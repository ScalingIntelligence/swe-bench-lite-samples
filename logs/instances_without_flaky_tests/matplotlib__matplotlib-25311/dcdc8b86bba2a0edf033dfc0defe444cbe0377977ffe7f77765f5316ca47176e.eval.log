2024-07-03 16:04:39,858 - INFO - Environment image sweb.env.x86_64.efa6065ed5bf204410fd53:latest found for matplotlib__matplotlib-25311
Building instance image sweb.eval.x86_64.matplotlib__matplotlib-25311:latest for matplotlib__matplotlib-25311
2024-07-03 16:04:39,862 - INFO - Image sweb.eval.x86_64.matplotlib__matplotlib-25311:latest already exists, skipping build.
2024-07-03 16:04:39,862 - INFO - Creating container for matplotlib__matplotlib-25311...
2024-07-03 16:04:41,886 - INFO - Container for matplotlib__matplotlib-25311 created: 323d89d79fa6df8c95a574ac3d059341e232e074a8380369800fd53c0400cedd
2024-07-03 16:04:48,071 - INFO - Container for matplotlib__matplotlib-25311 started: 323d89d79fa6df8c95a574ac3d059341e232e074a8380369800fd53c0400cedd
2024-07-03 16:04:48,071 - INFO - Intermediate patch for matplotlib__matplotlib-25311 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_176451/model_name_managed_by_server/matplotlib__matplotlib-25311/patch.diff, now applying to container...
2024-07-03 16:04:48,487 - INFO - >>>>> Applied Patch:
Checking patch lib/matplotlib/offsetbox.py...
Applied patch lib/matplotlib/offsetbox.py cleanly.

2024-07-03 16:04:50,052 - INFO - Git diff before:
diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py
index 1dee8a23d9..771d3e5158 100644
--- a/lib/matplotlib/offsetbox.py
+++ b/lib/matplotlib/offsetbox.py
@@ -1572,38 +1572,106 @@ class DraggableBase:
             self.canvas.mpl_disconnect(c1)
 
     def save_offset(self):
-        pass
+        self._offsets = self.ref_artist.get_offsets()
 
     def update_offset(self, dx, dy):
         pass
 
-    def finalize_offset(self):
-        pass
+def finalize_offset(self):
+    self._ref_artist.stale =True
 
 
-class DraggableOffsetBox(DraggableBase):
-    def __init__(self, ref_artist, offsetbox, use_blit=False):
-        super().__init__(ref_artist, use_blit=use_blit)
-        self.offsetbox = offsetbox
+class DraggableBase:
+    """
+    Helper base class for a draggable artist (legend, offsetbox).
 
-    def save_offset(self):
-        offsetbox = self.offsetbox
-        renderer = offsetbox.figure._get_renderer()
-        offset = offsetbox.get_offset(offsetbox.get_bbox(renderer), renderer)
-        self.offsetbox_x, self.offsetbox_y = offset
-        self.offsetbox.set_offset(offset)
+    Derived classes must override the following methods::
 
-    def update_offset(self, dx, dy):
-        loc_in_canvas = self.offsetbox_x + dx, self.offsetbox_y + dy
-        self.offsetbox.set_offset(loc_in_canvas)
-
-    def get_loc_in_canvas(self):
-        offsetbox = self.offsetbox
-        renderer = offsetbox.figure._get_renderer()
-        bbox = offsetbox.get_bbox(renderer)
-        ox, oy = offsetbox._offset
-        loc_in_canvas = (ox + bbox.x0, oy + bbox.y0)
-        return loc_in_canvas
+        def save_offset(self):
+            '''
+            Called when the object is picked for dragging; should save the
+            reference position of the artist.
+            '''
+
+        def update_offset(self, dx, dy):
+            '''
+            Called during the dragging; (*dx*, *dy*) is the pixel offset from
+            the point where the mouse drag started.
+            '''
+
+    Optionally, you may override the following method::
+
+        def finalize_offset(self):
+            '''Called when the mouse is released.'''
+
+    In the current implementation of `.DraggableLegend` and
+    `DraggableAnnotation`, `update_offset` places the artists in display
+    coordinates, and `finalize_offset` recalculates their position in axes
+    coordinate and set a relevant attribute.
+    """
+
+    def __init__(self, ref_artist, use_blit=False):
+        self.ref_artist = ref_artist
+        if not ref_artist.pickable():
+            ref_artist.set_picker(True)
+        self.got_artist = False
+        self.canvas = self.ref_artist.figure.canvas
+        self._use_blit = use_blit and self.canvas.supports_blit
+        self.cids = [
+            self.canvas.callbacks._connect_picklable(
+                'pick_event', self.on_pick),
+            self.canvas.callbacks._connect_picklable(
+                'button_release_event', self.on_release),
+        ]
+
+    def on_motion(self, evt):
+        if self._check_still_parented() and self.got_artist:
+            dx = evt.x - self.mouse_x
+            dy = evt.y - self.mouse_y
+            self.update_offset(dx, dy)
+            if self._use_blit:
+                self.canvas.restore_region(self.background)
+                self.ref_artist.draw(
+                    self.ref_artist.figure._get_renderer())
+                self.canvas.blit()
+            else:
+                self.canvas.draw()
+
+    def on_pick(self, evt):
+        if self._check_still_parented() and evt.artist == self.ref_artist:
+            self.mouse_x = evt.mouseevent.x
+            self.mouse_y = evt.mouseevent.y
+            self.got_artist = True
+            if self._use_blit:
+                self.ref_artist.set_animated(True)
+                self.canvas.draw()
+                self.background = \
+                    self.canvas.copy_from_bbox(self.ref_artist.figure.bbox)
+                self.ref_artist.draw(
+                    self.ref_artist.figure._get_renderer())
+                self.canvas.blit()
+            self._c1 = self.canvas.callbacks._connect_picklable(
+                "motion_notify_event", self.on_motion)
+            self.save_offset()
+
+    def disconnect(self):
+        """Disconnect the callbacks."""
+        for cid in self.cids:
+            self.canvas.mpl_disconnect(cid)
+        try:
+            c1 = self._c1
+        except AttributeError:
+            pass
+        else:
+            self.canvas.mpl_disconnect(c1)
+
+    def __getstate__(self):
+        state = {}
+        for attr in ['ref_artist', 'got_artist', 'canvas', '_use_blit', 'cids']:
+            state[attr] = getattr(self, attr)
+        if hasattr(self, '_c1'):
+            state['_c1'] = self._c1
+        return state
 
 
 class DraggableAnnotation(DraggableBase):
2024-07-03 16:04:50,055 - INFO - Eval script for matplotlib__matplotlib-25311 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_176451/model_name_managed_by_server/matplotlib__matplotlib-25311/patch.diff, now applying to container...
2024-07-03 16:05:06,994 - INFO - Test output for matplotlib__matplotlib-25311 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_176451/model_name_managed_by_server/matplotlib__matplotlib-25311/test_output.txt
2024-07-03 16:05:07,074 - INFO - Git diff after:
diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py
index 1dee8a23d9..771d3e5158 100644
--- a/lib/matplotlib/offsetbox.py
+++ b/lib/matplotlib/offsetbox.py
@@ -1572,38 +1572,106 @@ class DraggableBase:
             self.canvas.mpl_disconnect(c1)
 
     def save_offset(self):
-        pass
+        self._offsets = self.ref_artist.get_offsets()
 
     def update_offset(self, dx, dy):
         pass
 
-    def finalize_offset(self):
-        pass
+def finalize_offset(self):
+    self._ref_artist.stale =True
 
 
-class DraggableOffsetBox(DraggableBase):
-    def __init__(self, ref_artist, offsetbox, use_blit=False):
-        super().__init__(ref_artist, use_blit=use_blit)
-        self.offsetbox = offsetbox
+class DraggableBase:
+    """
+    Helper base class for a draggable artist (legend, offsetbox).
 
-    def save_offset(self):
-        offsetbox = self.offsetbox
-        renderer = offsetbox.figure._get_renderer()
-        offset = offsetbox.get_offset(offsetbox.get_bbox(renderer), renderer)
-        self.offsetbox_x, self.offsetbox_y = offset
-        self.offsetbox.set_offset(offset)
+    Derived classes must override the following methods::
 
-    def update_offset(self, dx, dy):
-        loc_in_canvas = self.offsetbox_x + dx, self.offsetbox_y + dy
-        self.offsetbox.set_offset(loc_in_canvas)
-
-    def get_loc_in_canvas(self):
-        offsetbox = self.offsetbox
-        renderer = offsetbox.figure._get_renderer()
-        bbox = offsetbox.get_bbox(renderer)
-        ox, oy = offsetbox._offset
-        loc_in_canvas = (ox + bbox.x0, oy + bbox.y0)
-        return loc_in_canvas
+        def save_offset(self):
+            '''
+            Called when the object is picked for dragging; should save the
+            reference position of the artist.
+            '''
+
+        def update_offset(self, dx, dy):
+            '''
+            Called during the dragging; (*dx*, *dy*) is the pixel offset from
+            the point where the mouse drag started.
+            '''
+
+    Optionally, you may override the following method::
+
+        def finalize_offset(self):
+            '''Called when the mouse is released.'''
+
+    In the current implementation of `.DraggableLegend` and
+    `DraggableAnnotation`, `update_offset` places the artists in display
+    coordinates, and `finalize_offset` recalculates their position in axes
+    coordinate and set a relevant attribute.
+    """
+
+    def __init__(self, ref_artist, use_blit=False):
+        self.ref_artist = ref_artist
+        if not ref_artist.pickable():
+            ref_artist.set_picker(True)
+        self.got_artist = False
+        self.canvas = self.ref_artist.figure.canvas
+        self._use_blit = use_blit and self.canvas.supports_blit
+        self.cids = [
+            self.canvas.callbacks._connect_picklable(
+                'pick_event', self.on_pick),
+            self.canvas.callbacks._connect_picklable(
+                'button_release_event', self.on_release),
+        ]
+
+    def on_motion(self, evt):
+        if self._check_still_parented() and self.got_artist:
+            dx = evt.x - self.mouse_x
+            dy = evt.y - self.mouse_y
+            self.update_offset(dx, dy)
+            if self._use_blit:
+                self.canvas.restore_region(self.background)
+                self.ref_artist.draw(
+                    self.ref_artist.figure._get_renderer())
+                self.canvas.blit()
+            else:
+                self.canvas.draw()
+
+    def on_pick(self, evt):
+        if self._check_still_parented() and evt.artist == self.ref_artist:
+            self.mouse_x = evt.mouseevent.x
+            self.mouse_y = evt.mouseevent.y
+            self.got_artist = True
+            if self._use_blit:
+                self.ref_artist.set_animated(True)
+                self.canvas.draw()
+                self.background = \
+                    self.canvas.copy_from_bbox(self.ref_artist.figure.bbox)
+                self.ref_artist.draw(
+                    self.ref_artist.figure._get_renderer())
+                self.canvas.blit()
+            self._c1 = self.canvas.callbacks._connect_picklable(
+                "motion_notify_event", self.on_motion)
+            self.save_offset()
+
+    def disconnect(self):
+        """Disconnect the callbacks."""
+        for cid in self.cids:
+            self.canvas.mpl_disconnect(cid)
+        try:
+            c1 = self._c1
+        except AttributeError:
+            pass
+        else:
+            self.canvas.mpl_disconnect(c1)
+
+    def __getstate__(self):
+        state = {}
+        for attr in ['ref_artist', 'got_artist', 'canvas', '_use_blit', 'cids']:
+            state[attr] = getattr(self, attr)
+        if hasattr(self, '_c1'):
+            state['_c1'] = self._c1
+        return state
 
 
 class DraggableAnnotation(DraggableBase):
2024-07-03 16:05:07,074 - INFO - Grading answer for matplotlib__matplotlib-25311...
2024-07-03 16:05:07,076 - INFO - report: {'matplotlib__matplotlib-25311': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['lib/matplotlib/tests/test_pickle.py::test_complete[png]']}, 'PASS_TO_PASS': {'success': [], 'failure': ['lib/matplotlib/tests/test_pickle.py::test_simple', 'lib/matplotlib/tests/test_pickle.py::test_gcf', 'lib/matplotlib/tests/test_pickle.py::test_no_pyplot', 'lib/matplotlib/tests/test_pickle.py::test_renderer', 'lib/matplotlib/tests/test_pickle.py::test_image', 'lib/matplotlib/tests/test_pickle.py::test_polar', 'lib/matplotlib/tests/test_pickle.py::test_transform', 'lib/matplotlib/tests/test_pickle.py::test_rrulewrapper', 'lib/matplotlib/tests/test_pickle.py::test_shared', 'lib/matplotlib/tests/test_pickle.py::test_inset_and_secondary', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap0]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap1]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap2]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap3]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap4]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap5]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap6]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap7]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap8]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap9]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap10]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap11]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap12]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap13]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap14]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap15]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap16]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap17]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap18]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap19]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap20]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap21]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap22]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap23]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap24]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap25]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap26]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap27]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap28]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap29]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap30]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap31]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap32]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap33]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap34]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap35]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap36]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap37]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap38]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap39]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap40]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap41]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap42]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap43]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap44]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap45]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap46]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap47]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap48]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap49]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap50]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap51]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap52]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap53]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap54]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap55]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap56]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap57]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap58]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap59]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap60]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap61]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap62]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap63]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap64]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap65]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap66]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap67]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap68]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap69]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap70]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap71]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap72]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap73]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap74]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap75]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap76]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap77]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap78]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap79]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap80]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap81]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap82]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap83]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap84]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap85]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap86]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap87]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap88]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap89]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap90]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap91]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap92]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap93]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap94]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap95]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap96]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap97]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap98]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap99]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap100]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap101]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap102]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap103]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap104]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap105]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap106]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap107]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap108]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap109]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap110]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap111]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap112]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap113]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap114]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap115]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap116]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap117]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap118]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap119]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap120]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap121]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap122]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap123]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap124]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap125]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap126]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap127]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap128]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap129]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap130]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap131]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap132]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap133]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap134]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap135]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap136]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap137]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap138]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap139]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap140]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap141]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap142]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap143]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap144]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap145]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap146]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap147]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap148]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap149]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap150]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap151]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap152]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap153]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap154]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap155]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap156]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap157]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap158]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap159]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap160]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap161]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap162]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap163]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap164]', 'lib/matplotlib/tests/test_pickle.py::test_cmap[cmap165]', 'lib/matplotlib/tests/test_pickle.py::test_unpickle_canvas', 'lib/matplotlib/tests/test_pickle.py::test_mpl_toolkits', 'lib/matplotlib/tests/test_pickle.py::test_standard_norm', 'lib/matplotlib/tests/test_pickle.py::test_dynamic_norm', 'lib/matplotlib/tests/test_pickle.py::test_vertexselector']}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for matplotlib__matplotlib-25311: resolved: False
2024-07-03 16:05:07,076 - INFO - Attempting to stop container sweb.eval.matplotlib__matplotlib-25311.evaluation_176451...
2024-07-03 16:05:11,163 - INFO - Attempting to remove container sweb.eval.matplotlib__matplotlib-25311.evaluation_176451...
2024-07-03 16:05:11,298 - INFO - Container sweb.eval.matplotlib__matplotlib-25311.evaluation_176451 removed.
