2024-07-03 03:22:43,189 - INFO - Environment image sweb.env.x86_64.c795f4b88616b8462021ed:latest found for sympy__sympy-22714
Building instance image sweb.eval.x86_64.sympy__sympy-22714:latest for sympy__sympy-22714
2024-07-03 03:22:43,191 - INFO - Image sweb.eval.x86_64.sympy__sympy-22714:latest already exists, skipping build.
2024-07-03 03:22:43,191 - INFO - Creating container for sympy__sympy-22714...
2024-07-03 03:22:43,332 - INFO - Container for sympy__sympy-22714 created: 0cd1bdc3564ccce0c62a49e0d3476fff3e85a5824299f33a60326affdf18750f
2024-07-03 03:22:43,587 - INFO - Container for sympy__sympy-22714 started: 0cd1bdc3564ccce0c62a49e0d3476fff3e85a5824299f33a60326affdf18750f
2024-07-03 03:22:43,587 - INFO - Intermediate patch for sympy__sympy-22714 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_139708/model_name_managed_by_server/sympy__sympy-22714/patch.diff, now applying to container...
2024-07-03 03:22:43,789 - INFO - >>>>> Applied Patch:
Checking patch sympy/geometry/point.py...
Applied patch sympy/geometry/point.py cleanly.

2024-07-03 03:22:44,673 - INFO - Git diff before:
diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py
index 73c20334d0..80a284d285 100644
--- a/sympy/geometry/point.py
+++ b/sympy/geometry/point.py
@@ -107,8 +107,9 @@ class Point(GeometryEntity):
     is_Point = True
 
     def __new__(cls, *args, **kwargs):
-        evaluate = kwargs.get('evaluate', global_parameters.evaluate)
-        on_morph = kwargs.get('on_morph', 'ignore')
+        evaluate = kwargs.pop('evaluate', global_parameters.evaluate)
+        on_morph = kwargs.pop('on_morph', 'ignore')
+        dim = kwargs.pop('dim', None)
 
         # unpack into coords
         coords = args[0] if len(args) == 1 else args
@@ -118,7 +119,7 @@ def __new__(cls, *args, **kwargs):
             # even if we're mutating the dimension of a point, we
             # don't reevaluate its coordinates
             evaluate = False
-            if len(coords) == kwargs.get('dim', len(coords)):
+            if len(coords) == dim:
                 return coords
 
         if not is_sequence(coords):
@@ -127,11 +128,12 @@ def __new__(cls, *args, **kwargs):
                                        .format(func_name(coords))))
         # A point where only `dim` is specified is initialized
         # to zeros.
-        if len(coords) == 0 and kwargs.get('dim', None):
-            coords = (S.Zero,)*kwargs.get('dim')
+        if len(coords) == 0 and dim is not None:
+            coords = (S.Zero,)*dim
 
         coords = Tuple(*coords)
-        dim = kwargs.get('dim', len(coords))
+        if dim is None:
+            dim = len(coords)
 
         if len(coords) < 2:
             raise ValueError(filldedent('''
2024-07-03 03:22:44,674 - INFO - Eval script for sympy__sympy-22714 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_139708/model_name_managed_by_server/sympy__sympy-22714/patch.diff, now applying to container...
2024-07-03 03:22:55,084 - INFO - Test output for sympy__sympy-22714 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_139708/model_name_managed_by_server/sympy__sympy-22714/test_output.txt
2024-07-03 03:22:55,143 - INFO - Git diff after:
diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py
index 73c20334d0..80a284d285 100644
--- a/sympy/geometry/point.py
+++ b/sympy/geometry/point.py
@@ -107,8 +107,9 @@ class Point(GeometryEntity):
     is_Point = True
 
     def __new__(cls, *args, **kwargs):
-        evaluate = kwargs.get('evaluate', global_parameters.evaluate)
-        on_morph = kwargs.get('on_morph', 'ignore')
+        evaluate = kwargs.pop('evaluate', global_parameters.evaluate)
+        on_morph = kwargs.pop('on_morph', 'ignore')
+        dim = kwargs.pop('dim', None)
 
         # unpack into coords
         coords = args[0] if len(args) == 1 else args
@@ -118,7 +119,7 @@ def __new__(cls, *args, **kwargs):
             # even if we're mutating the dimension of a point, we
             # don't reevaluate its coordinates
             evaluate = False
-            if len(coords) == kwargs.get('dim', len(coords)):
+            if len(coords) == dim:
                 return coords
 
         if not is_sequence(coords):
@@ -127,11 +128,12 @@ def __new__(cls, *args, **kwargs):
                                        .format(func_name(coords))))
         # A point where only `dim` is specified is initialized
         # to zeros.
-        if len(coords) == 0 and kwargs.get('dim', None):
-            coords = (S.Zero,)*kwargs.get('dim')
+        if len(coords) == 0 and dim is not None:
+            coords = (S.Zero,)*dim
 
         coords = Tuple(*coords)
-        dim = kwargs.get('dim', len(coords))
+        if dim is None:
+            dim = len(coords)
 
         if len(coords) < 2:
             raise ValueError(filldedent('''
2024-07-03 03:22:55,143 - INFO - Grading answer for sympy__sympy-22714...
2024-07-03 03:22:55,144 - INFO - report: {'sympy__sympy-22714': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['test_issue_22684']}, 'PASS_TO_PASS': {'success': ['test_point', 'test_point3D', 'test_Point2D', 'test_issue_9214', 'test_issue_11617', 'test_transform', 'test_concyclic_doctest_bug', 'test_arguments', 'test_unit', 'test_dot', 'test__normalize_dimension'], 'failure': []}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for sympy__sympy-22714: resolved: False
2024-07-03 03:22:55,144 - INFO - Attempting to stop container sweb.eval.sympy__sympy-22714.evaluation_139708...
2024-07-03 03:22:55,841 - INFO - Attempting to remove container sweb.eval.sympy__sympy-22714.evaluation_139708...
2024-07-03 03:22:56,071 - INFO - Container sweb.eval.sympy__sympy-22714.evaluation_139708 removed.
