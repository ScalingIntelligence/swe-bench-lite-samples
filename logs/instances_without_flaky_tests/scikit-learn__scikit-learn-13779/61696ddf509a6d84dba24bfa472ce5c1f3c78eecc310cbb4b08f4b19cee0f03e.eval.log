2024-07-03 12:13:05,411 - INFO - Environment image sweb.env.x86_64.aa92880033da20ca313928:latest found for scikit-learn__scikit-learn-13779
Building instance image sweb.eval.x86_64.scikit-learn__scikit-learn-13779:latest for scikit-learn__scikit-learn-13779
2024-07-03 12:13:05,413 - INFO - Image sweb.eval.x86_64.scikit-learn__scikit-learn-13779:latest already exists, skipping build.
2024-07-03 12:13:05,414 - INFO - Creating container for scikit-learn__scikit-learn-13779...
2024-07-03 12:13:08,246 - INFO - Container for scikit-learn__scikit-learn-13779 created: d5aa3489f20a2f83a7b12a1b3f2519b08d12a07eb3574e2edd098ed909a9e4b3
2024-07-03 12:13:09,579 - INFO - Container for scikit-learn__scikit-learn-13779 started: d5aa3489f20a2f83a7b12a1b3f2519b08d12a07eb3574e2edd098ed909a9e4b3
2024-07-03 12:13:09,579 - INFO - Intermediate patch for scikit-learn__scikit-learn-13779 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_159245/model_name_managed_by_server/scikit-learn__scikit-learn-13779/patch.diff, now applying to container...
2024-07-03 12:13:09,904 - INFO - >>>>> Applied Patch:
Checking patch sklearn/ensemble/voting.py...
Applied patch sklearn/ensemble/voting.py cleanly.

2024-07-03 12:13:11,000 - INFO - Git diff before:
diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py
index 7afa7180c..da0a7d38a 100644
--- a/sklearn/ensemble/voting.py
+++ b/sklearn/ensemble/voting.py
@@ -78,7 +78,7 @@ class _BaseVoting(_BaseComposition, TransformerMixin):
 
         if sample_weight is not None:
             for name, step in self.estimators:
-                if not has_fit_parameter(step, 'sample_weight'):
+                if step is not None and not has_fit_parameter(step, 'sample_weight'):
                     raise ValueError('Underlying estimator \'%s\' does not'
                                      ' support sample weights.' % name)
 
@@ -237,40 +237,43 @@ class VotingClassifier(_BaseVoting, ClassifierMixin):
         self.n_jobs = n_jobs
         self.flatten_transform = flatten_transform
 
-    def fit(self, X, y, sample_weight=None):
-        """ Fit the estimators.
+def fit(self, X, y, sample_weight=None):
+    """ Fit the estimators.
 
-        Parameters
-        ----------
-        X : {array-like, sparse matrix}, shape (n_samples, n_features)
-            Training vectors, where n_samples is the number of samples and
-            n_features is the number of features.
+    Parameters
+    ----------
+    X : {array-like, sparse matrix}, shape (n_samples, n_features)
+        Training vectors, where n_samples is the number of samples and
+        n_features is the number of features.
 
-        y : array-like, shape (n_samples,)
-            Target values.
+    y : array-like, shape (n_samples,)
+        Target values.
 
-        sample_weight : array-like, shape (n_samples,) or None
-            Sample weights. If None, then samples are equally weighted.
-            Note that this is supported only if all underlying estimators
-            support sample weights.
+    sample_weight : array-like, shape (n_samples,) or None
+        Sample weights. If None, then samples are equally weighted.
+        Note that this is supported only if all underlying estimators
+        support sample weights.
 
-        Returns
-        -------
-        self : object
-        """
-        if isinstance(y, np.ndarray) and len(y.shape) > 1 and y.shape[1] > 1:
-            raise NotImplementedError('Multilabel and multi-output'
-                                      ' classification is not supported.')
+    Returns
+    -------
+    self : object
+    """
+    if isinstance(y, np.ndarray) and len(y.shape) > 1 and y.shape[1] > 1:
+        raise NotImplementedError('Multilabel and multi-output'
+                                  ' classification is not supported.')
+
+    if self.voting not in ('soft', 'hard'):
+        raise ValueError("Voting must be 'soft' or 'hard'; got (voting=%r)"
+                         % self.voting)
 
-        if self.voting not in ('soft', 'hard'):
-            raise ValueError("Voting must be 'soft' or 'hard'; got (voting=%r)"
-                             % self.voting)
+    self.le_ = LabelEncoder().fit(y)
+    self.classes_ = self.le_.classes_
+    transformed_y = self.le_.transform(y)
 
-        self.le_ = LabelEncoder().fit(y)
-        self.classes_ = self.le_.classes_
-        transformed_y = self.le_.transform(y)
+    # Filter out None estimators before calling super().fit
+    self.estimators = [(name, est) for name, est in self.estimators if est is not None]
 
-        return super().fit(X, transformed_y, sample_weight)
+    return super().fit(X, transformed_y, sample_weight)
 
     def predict(self, X):
         """ Predict class labels for X.
2024-07-03 12:13:11,000 - INFO - Eval script for scikit-learn__scikit-learn-13779 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_159245/model_name_managed_by_server/scikit-learn__scikit-learn-13779/patch.diff, now applying to container...
2024-07-03 12:13:19,101 - INFO - Test output for scikit-learn__scikit-learn-13779 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_159245/model_name_managed_by_server/scikit-learn__scikit-learn-13779/test_output.txt
2024-07-03 12:13:19,163 - INFO - Git diff after:
diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py
index 7afa7180c..da0a7d38a 100644
--- a/sklearn/ensemble/voting.py
+++ b/sklearn/ensemble/voting.py
@@ -78,7 +78,7 @@ class _BaseVoting(_BaseComposition, TransformerMixin):
 
         if sample_weight is not None:
             for name, step in self.estimators:
-                if not has_fit_parameter(step, 'sample_weight'):
+                if step is not None and not has_fit_parameter(step, 'sample_weight'):
                     raise ValueError('Underlying estimator \'%s\' does not'
                                      ' support sample weights.' % name)
 
@@ -237,40 +237,43 @@ class VotingClassifier(_BaseVoting, ClassifierMixin):
         self.n_jobs = n_jobs
         self.flatten_transform = flatten_transform
 
-    def fit(self, X, y, sample_weight=None):
-        """ Fit the estimators.
+def fit(self, X, y, sample_weight=None):
+    """ Fit the estimators.
 
-        Parameters
-        ----------
-        X : {array-like, sparse matrix}, shape (n_samples, n_features)
-            Training vectors, where n_samples is the number of samples and
-            n_features is the number of features.
+    Parameters
+    ----------
+    X : {array-like, sparse matrix}, shape (n_samples, n_features)
+        Training vectors, where n_samples is the number of samples and
+        n_features is the number of features.
 
-        y : array-like, shape (n_samples,)
-            Target values.
+    y : array-like, shape (n_samples,)
+        Target values.
 
-        sample_weight : array-like, shape (n_samples,) or None
-            Sample weights. If None, then samples are equally weighted.
-            Note that this is supported only if all underlying estimators
-            support sample weights.
+    sample_weight : array-like, shape (n_samples,) or None
+        Sample weights. If None, then samples are equally weighted.
+        Note that this is supported only if all underlying estimators
+        support sample weights.
 
-        Returns
-        -------
-        self : object
-        """
-        if isinstance(y, np.ndarray) and len(y.shape) > 1 and y.shape[1] > 1:
-            raise NotImplementedError('Multilabel and multi-output'
-                                      ' classification is not supported.')
+    Returns
+    -------
+    self : object
+    """
+    if isinstance(y, np.ndarray) and len(y.shape) > 1 and y.shape[1] > 1:
+        raise NotImplementedError('Multilabel and multi-output'
+                                  ' classification is not supported.')
+
+    if self.voting not in ('soft', 'hard'):
+        raise ValueError("Voting must be 'soft' or 'hard'; got (voting=%r)"
+                         % self.voting)
 
-        if self.voting not in ('soft', 'hard'):
-            raise ValueError("Voting must be 'soft' or 'hard'; got (voting=%r)"
-                             % self.voting)
+    self.le_ = LabelEncoder().fit(y)
+    self.classes_ = self.le_.classes_
+    transformed_y = self.le_.transform(y)
 
-        self.le_ = LabelEncoder().fit(y)
-        self.classes_ = self.le_.classes_
-        transformed_y = self.le_.transform(y)
+    # Filter out None estimators before calling super().fit
+    self.estimators = [(name, est) for name, est in self.estimators if est is not None]
 
-        return super().fit(X, transformed_y, sample_weight)
+    return super().fit(X, transformed_y, sample_weight)
 
     def predict(self, X):
         """ Predict class labels for X.
2024-07-03 12:13:19,163 - INFO - Grading answer for scikit-learn__scikit-learn-13779...
2024-07-03 12:13:19,169 - INFO - report: {'scikit-learn__scikit-learn-13779': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['sklearn/ensemble/tests/test_voting.py::test_none_estimator_with_weights[X0-y0-voter0]', 'sklearn/ensemble/tests/test_voting.py::test_none_estimator_with_weights[X1-y1-voter1]']}, 'PASS_TO_PASS': {'success': [], 'failure': ['sklearn/ensemble/tests/test_voting.py::test_estimator_init', 'sklearn/ensemble/tests/test_voting.py::test_predictproba_hardvoting', 'sklearn/ensemble/tests/test_voting.py::test_notfitted', 'sklearn/ensemble/tests/test_voting.py::test_majority_label_iris', 'sklearn/ensemble/tests/test_voting.py::test_tie_situation', 'sklearn/ensemble/tests/test_voting.py::test_weights_iris', 'sklearn/ensemble/tests/test_voting.py::test_weights_regressor', 'sklearn/ensemble/tests/test_voting.py::test_predict_on_toy_problem', 'sklearn/ensemble/tests/test_voting.py::test_predict_proba_on_toy_problem', 'sklearn/ensemble/tests/test_voting.py::test_multilabel', 'sklearn/ensemble/tests/test_voting.py::test_gridsearch', 'sklearn/ensemble/tests/test_voting.py::test_parallel_fit', 'sklearn/ensemble/tests/test_voting.py::test_sample_weight', 'sklearn/ensemble/tests/test_voting.py::test_sample_weight_kwargs', 'sklearn/ensemble/tests/test_voting.py::test_set_params', 'sklearn/ensemble/tests/test_voting.py::test_set_estimator_none', 'sklearn/ensemble/tests/test_voting.py::test_estimator_weights_format', 'sklearn/ensemble/tests/test_voting.py::test_transform']}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for scikit-learn__scikit-learn-13779: resolved: False
2024-07-03 12:13:19,169 - INFO - Attempting to stop container sweb.eval.scikit-learn__scikit-learn-13779.evaluation_159245...
2024-07-03 12:13:22,986 - INFO - Attempting to remove container sweb.eval.scikit-learn__scikit-learn-13779.evaluation_159245...
2024-07-03 12:13:23,652 - INFO - Container sweb.eval.scikit-learn__scikit-learn-13779.evaluation_159245 removed.
