2024-07-03 20:05:22,038 - INFO - Environment image sweb.env.x86_64.c795f4b88616b8462021ed:latest found for sympy__sympy-23191
Building instance image sweb.eval.x86_64.sympy__sympy-23191:latest for sympy__sympy-23191
2024-07-03 20:05:22,040 - INFO - Image sweb.eval.x86_64.sympy__sympy-23191:latest already exists, skipping build.
2024-07-03 20:05:22,041 - INFO - Creating container for sympy__sympy-23191...
2024-07-03 20:05:23,020 - INFO - Container for sympy__sympy-23191 created: eca738d0e5dc07c2058245b8bb82312550939f8795afc4ab3e60c30cb9f78a56
2024-07-03 20:06:33,323 - INFO - Container for sympy__sympy-23191 started: eca738d0e5dc07c2058245b8bb82312550939f8795afc4ab3e60c30cb9f78a56
2024-07-03 20:06:33,323 - INFO - Intermediate patch for sympy__sympy-23191 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_196629/model_name_managed_by_server/sympy__sympy-23191/patch.diff, now applying to container...
2024-07-03 20:06:34,401 - INFO - >>>>> Applied Patch:
Checking patch sympy/printing/pretty/pretty.py...
Applied patch sympy/printing/pretty/pretty.py cleanly.

2024-07-03 20:06:39,274 - INFO - Git diff before:
diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py
index 66461181d0..99b4f2f63a 100644
--- a/sympy/printing/pretty/pretty.py
+++ b/sympy/printing/pretty/pretty.py
@@ -1141,27 +1141,27 @@ def _print_BasisDependent(self, expr):
         for i, partstr in enumerate(o1):
             flag.append(0)
             # XXX: What is this hack?
-            if '\n' in partstr:
-                tempstr = partstr
-                tempstr = tempstr.replace(vectstrs[i], '')
-                if '\N{right parenthesis extension}' in tempstr:   # If scalar is a fraction
-                    for paren in range(len(tempstr)):
-                        flag[i] = 1
-                        if tempstr[paren] == '\N{right parenthesis extension}':
-                            tempstr = tempstr[:paren] + '\N{right parenthesis extension}'\
-                                         + ' '  + vectstrs[i] + tempstr[paren + 1:]
-                            break
-                elif '\N{RIGHT PARENTHESIS LOWER HOOK}' in tempstr:
-                    flag[i] = 1
-                    tempstr = tempstr.replace('\N{RIGHT PARENTHESIS LOWER HOOK}',
-                                        '\N{RIGHT PARENTHESIS LOWER HOOK}'
-                                        + ' ' + vectstrs[i])
-                else:
-                    tempstr = tempstr.replace('\N{RIGHT PARENTHESIS UPPER HOOK}',
-                                        '\N{RIGHT PARENTHESIS UPPER HOOK}'
-                                        + ' ' + vectstrs[i])
-                o1[i] = tempstr
-
+                    if '\n' in partstr:
+                        tempstr = partstr
+                        tempstr = tempstr.replace(vectstrs[i], '')
+                        parts = tempstr.split('\n')
+                        for j, part in enumerate(parts):
+                            if j == 0 and '\N{right parenthesis extension}' in part:
+                                for paren in range(len(part)):
+                                    if part[paren] == '\N{right parenthesis extension}':
+                                        part = part[:paren] + '\N{right parenthesis extension}'\
+                                                     + ' '  + vectstrs[i] + part[paren + 1:]
+                                        break
+                            elif j == len(parts) - 1 and '\N{RIGHT PARENTHESIS LOWER HOOK}' in part:
+                                part = part.replace('\N{RIGHT PARENTHESIS LOWER HOOK}',
+                                                    '\N{RIGHT PARENTHESIS LOWER HOOK}'
+                                                    + ' ' + vectstrs[i])
+                            else:
+                                part = part.replace('\N{RIGHT PARENTHESIS UPPER HOOK}',
+                                                    '\N{RIGHT PARENTHESIS UPPER HOOK}'
+                                                    + ' ' + vectstrs[i])
+                            parts[j] = part
+                        o1[i] = '\n'.join(parts)
         o1 = [x.split('\n') for x in o1]
         n_newlines = max([len(x) for x in o1])  # Width of part in its pretty form
2024-07-03 20:06:39,278 - INFO - Eval script for sympy__sympy-23191 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_196629/model_name_managed_by_server/sympy__sympy-23191/patch.diff, now applying to container...
2024-07-03 20:07:13,304 - INFO - Test output for sympy__sympy-23191 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_196629/model_name_managed_by_server/sympy__sympy-23191/test_output.txt
2024-07-03 20:07:13,674 - INFO - Git diff after:
diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py
index 66461181d0..99b4f2f63a 100644
--- a/sympy/printing/pretty/pretty.py
+++ b/sympy/printing/pretty/pretty.py
@@ -1141,27 +1141,27 @@ def _print_BasisDependent(self, expr):
         for i, partstr in enumerate(o1):
             flag.append(0)
             # XXX: What is this hack?
-            if '\n' in partstr:
-                tempstr = partstr
-                tempstr = tempstr.replace(vectstrs[i], '')
-                if '\N{right parenthesis extension}' in tempstr:   # If scalar is a fraction
-                    for paren in range(len(tempstr)):
-                        flag[i] = 1
-                        if tempstr[paren] == '\N{right parenthesis extension}':
-                            tempstr = tempstr[:paren] + '\N{right parenthesis extension}'\
-                                         + ' '  + vectstrs[i] + tempstr[paren + 1:]
-                            break
-                elif '\N{RIGHT PARENTHESIS LOWER HOOK}' in tempstr:
-                    flag[i] = 1
-                    tempstr = tempstr.replace('\N{RIGHT PARENTHESIS LOWER HOOK}',
-                                        '\N{RIGHT PARENTHESIS LOWER HOOK}'
-                                        + ' ' + vectstrs[i])
-                else:
-                    tempstr = tempstr.replace('\N{RIGHT PARENTHESIS UPPER HOOK}',
-                                        '\N{RIGHT PARENTHESIS UPPER HOOK}'
-                                        + ' ' + vectstrs[i])
-                o1[i] = tempstr
-
+                    if '\n' in partstr:
+                        tempstr = partstr
+                        tempstr = tempstr.replace(vectstrs[i], '')
+                        parts = tempstr.split('\n')
+                        for j, part in enumerate(parts):
+                            if j == 0 and '\N{right parenthesis extension}' in part:
+                                for paren in range(len(part)):
+                                    if part[paren] == '\N{right parenthesis extension}':
+                                        part = part[:paren] + '\N{right parenthesis extension}'\
+                                                     + ' '  + vectstrs[i] + part[paren + 1:]
+                                        break
+                            elif j == len(parts) - 1 and '\N{RIGHT PARENTHESIS LOWER HOOK}' in part:
+                                part = part.replace('\N{RIGHT PARENTHESIS LOWER HOOK}',
+                                                    '\N{RIGHT PARENTHESIS LOWER HOOK}'
+                                                    + ' ' + vectstrs[i])
+                            else:
+                                part = part.replace('\N{RIGHT PARENTHESIS UPPER HOOK}',
+                                                    '\N{RIGHT PARENTHESIS UPPER HOOK}'
+                                                    + ' ' + vectstrs[i])
+                            parts[j] = part
+                        o1[i] = '\n'.join(parts)
         o1 = [x.split('\n') for x in o1]
         n_newlines = max([len(x) for x in o1])  # Width of part in its pretty form
2024-07-03 20:07:13,674 - INFO - Grading answer for sympy__sympy-23191...
2024-07-03 20:07:13,677 - INFO - report: {'sympy__sympy-23191': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['test_issue_23058']}, 'PASS_TO_PASS': {'success': [], 'failure': ['test_str_printing', 'test_pretty_print_unicode_v', 'test_latex_printing']}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for sympy__sympy-23191: resolved: False
2024-07-03 20:07:13,679 - INFO - Attempting to stop container sweb.eval.sympy__sympy-23191.evaluation_196629...
2024-07-03 20:07:16,988 - INFO - Attempting to remove container sweb.eval.sympy__sympy-23191.evaluation_196629...
2024-07-03 20:07:17,257 - INFO - Container sweb.eval.sympy__sympy-23191.evaluation_196629 removed.
