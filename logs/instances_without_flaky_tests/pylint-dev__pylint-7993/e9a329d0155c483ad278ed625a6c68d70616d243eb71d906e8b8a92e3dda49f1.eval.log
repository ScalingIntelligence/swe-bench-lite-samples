2024-07-03 14:12:24,971 - INFO - Environment image sweb.env.x86_64.b649f0ff62fad147f7f073:latest found for pylint-dev__pylint-7993
Building instance image sweb.eval.x86_64.pylint-dev__pylint-7993:latest for pylint-dev__pylint-7993
2024-07-03 14:12:24,972 - INFO - Image sweb.eval.x86_64.pylint-dev__pylint-7993:latest already exists, skipping build.
2024-07-03 14:12:24,972 - INFO - Creating container for pylint-dev__pylint-7993...
2024-07-03 14:12:28,570 - INFO - Container for pylint-dev__pylint-7993 created: afe0177bf6a7aba1f5c20f0d707a3dc5cc1d7e846860c95c32f17c1bcffa1fbe
2024-07-03 14:12:34,041 - INFO - Container for pylint-dev__pylint-7993 started: afe0177bf6a7aba1f5c20f0d707a3dc5cc1d7e846860c95c32f17c1bcffa1fbe
2024-07-03 14:12:34,068 - INFO - Intermediate patch for pylint-dev__pylint-7993 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_169051/model_name_managed_by_server/pylint-dev__pylint-7993/patch.diff, now applying to container...
2024-07-03 14:12:35,866 - INFO - >>>>> Applied Patch:
Checking patch pylint/reporters/text.py...
Applied patch pylint/reporters/text.py cleanly.

2024-07-03 14:12:36,704 - INFO - Git diff before:
diff --git a/pylint/reporters/text.py b/pylint/reporters/text.py
index 29bd46798..fc4e34106 100644
--- a/pylint/reporters/text.py
+++ b/pylint/reporters/text.py
@@ -174,16 +174,33 @@ class TextReporter(BaseReporter):
         # Set template to the currently selected template
         self._template = template
 
-        # Check to see if all parameters in the template are attributes of the Message
-        arguments = re.findall(r"\{(.+?)(:.*)?\}", template)
-        for argument in arguments:
-            if argument[0] not in MESSAGE_FIELDS:
-                warnings.warn(
-                    f"Don't recognize the argument '{argument[0]}' in the --msg-template. "
-                    "Are you sure it is supported on the current version of pylint?"
-                )
-                template = re.sub(r"\{" + argument[0] + r"(:.*?)?\}", "", template)
-        self._fixed_template = template
+        # Parse the template to distinguish between message fields and custom formats
+        parsed_template = []
+        i = 0
+        while i < len(template):
+            if template[i] == '{':
+                j = i + 1
+                while j < len(template) and template[j] != '}':
+                    j += 1
+                if j < len(template):
+                    # Check if it's a message field or custom format
+                    argument = template[i + 1:j]
+                    if ':' in argument:
+                        argument = argument.split(':')[0]
+                    if argument in MESSAGE_FIELDS:
+                        parsed_template.append(template[i:j + 1])
+                    else:
+                        warnings.warn(
+                            f"Don't recognize the argument '{argument}' in the --msg-template. "
+                            "Are you sure it is supported on the current version of pylint?"
+                        )
+                        i = j
+                else:
+                    parsed_template.append(template[i])
+            else:
+                parsed_template.append(template[i])
+            i += 1
+        self._fixed_template = ''.join(parsed_template)
 
     def write_message(self, msg: Message) -> None:
         """Convenience method to write a formatted message with class default
2024-07-03 14:12:36,707 - INFO - Eval script for pylint-dev__pylint-7993 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_169051/model_name_managed_by_server/pylint-dev__pylint-7993/patch.diff, now applying to container...
2024-07-03 14:12:55,036 - INFO - Test output for pylint-dev__pylint-7993 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_169051/model_name_managed_by_server/pylint-dev__pylint-7993/test_output.txt
2024-07-03 14:12:55,109 - INFO - Git diff after:
diff --git a/pylint/reporters/text.py b/pylint/reporters/text.py
index 29bd46798..fc4e34106 100644
--- a/pylint/reporters/text.py
+++ b/pylint/reporters/text.py
@@ -174,16 +174,33 @@ class TextReporter(BaseReporter):
         # Set template to the currently selected template
         self._template = template
 
-        # Check to see if all parameters in the template are attributes of the Message
-        arguments = re.findall(r"\{(.+?)(:.*)?\}", template)
-        for argument in arguments:
-            if argument[0] not in MESSAGE_FIELDS:
-                warnings.warn(
-                    f"Don't recognize the argument '{argument[0]}' in the --msg-template. "
-                    "Are you sure it is supported on the current version of pylint?"
-                )
-                template = re.sub(r"\{" + argument[0] + r"(:.*?)?\}", "", template)
-        self._fixed_template = template
+        # Parse the template to distinguish between message fields and custom formats
+        parsed_template = []
+        i = 0
+        while i < len(template):
+            if template[i] == '{':
+                j = i + 1
+                while j < len(template) and template[j] != '}':
+                    j += 1
+                if j < len(template):
+                    # Check if it's a message field or custom format
+                    argument = template[i + 1:j]
+                    if ':' in argument:
+                        argument = argument.split(':')[0]
+                    if argument in MESSAGE_FIELDS:
+                        parsed_template.append(template[i:j + 1])
+                    else:
+                        warnings.warn(
+                            f"Don't recognize the argument '{argument}' in the --msg-template. "
+                            "Are you sure it is supported on the current version of pylint?"
+                        )
+                        i = j
+                else:
+                    parsed_template.append(template[i])
+            else:
+                parsed_template.append(template[i])
+            i += 1
+        self._fixed_template = ''.join(parsed_template)
 
     def write_message(self, msg: Message) -> None:
         """Convenience method to write a formatted message with class default
2024-07-03 14:12:55,127 - INFO - Grading answer for pylint-dev__pylint-7993...
2024-07-03 14:12:55,129 - INFO - report: {'pylint-dev__pylint-7993': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['tests/reporters/unittest_reporting.py::test_template_option_with_header']}, 'PASS_TO_PASS': {'success': ['tests/reporters/unittest_reporting.py::test_template_option_default', 'tests/reporters/unittest_reporting.py::test_deprecation_set_output', 'tests/reporters/unittest_reporting.py::test_parseable_output_deprecated', 'tests/reporters/unittest_reporting.py::test_parseable_output_regression', 'tests/reporters/unittest_reporting.py::test_multi_format_output', 'tests/reporters/unittest_reporting.py::test_multi_reporter_independant_messages', 'tests/reporters/unittest_reporting.py::test_display_results_is_renamed'], 'failure': ['tests/reporters/unittest_reporting.py::test_template_option', 'tests/reporters/unittest_reporting.py::test_template_option_end_line', 'tests/reporters/unittest_reporting.py::test_template_option_non_existing']}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for pylint-dev__pylint-7993: resolved: False
2024-07-03 14:12:55,129 - INFO - Attempting to stop container sweb.eval.pylint-dev__pylint-7993.evaluation_169051...
2024-07-03 14:12:58,267 - INFO - Attempting to remove container sweb.eval.pylint-dev__pylint-7993.evaluation_169051...
2024-07-03 14:12:58,766 - INFO - Container sweb.eval.pylint-dev__pylint-7993.evaluation_169051 removed.
