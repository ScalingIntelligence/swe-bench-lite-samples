2024-07-03 15:54:47,473 - INFO - Environment image sweb.env.x86_64.27dd9791e13f5c857a09f9:latest found for scikit-learn__scikit-learn-25500
Building instance image sweb.eval.x86_64.scikit-learn__scikit-learn-25500:latest for scikit-learn__scikit-learn-25500
2024-07-03 15:54:47,476 - INFO - Image sweb.eval.x86_64.scikit-learn__scikit-learn-25500:latest already exists, skipping build.
2024-07-03 15:54:47,477 - INFO - Creating container for scikit-learn__scikit-learn-25500...
2024-07-03 15:54:49,225 - INFO - Container for scikit-learn__scikit-learn-25500 created: a0c2b88ed988dd1a5908f5e4d9e0ddccf1bd4b5c0faee81e5080a6f7533d84c4
2024-07-03 15:54:51,112 - INFO - Container for scikit-learn__scikit-learn-25500 started: a0c2b88ed988dd1a5908f5e4d9e0ddccf1bd4b5c0faee81e5080a6f7533d84c4
2024-07-03 15:54:51,112 - INFO - Intermediate patch for scikit-learn__scikit-learn-25500 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_175782/model_name_managed_by_server/scikit-learn__scikit-learn-25500/patch.diff, now applying to container...
2024-07-03 15:54:52,254 - INFO - >>>>> Applied Patch:
Checking patch sklearn/calibration.py...
Applied patch sklearn/calibration.py cleanly.

2024-07-03 15:54:52,754 - INFO - Git diff before:
diff --git a/sklearn/calibration.py b/sklearn/calibration.py
index 2c4a33616..500e69ca9 100644
--- a/sklearn/calibration.py
+++ b/sklearn/calibration.py
@@ -452,33 +452,33 @@ class CalibratedClassifierCV(ClassifierMixin, MetaEstimatorMixin, BaseEstimator)
             self.feature_names_in_ = first_clf.feature_names_in_
         return self
 
-    def predict_proba(self, X):
-        """Calibrated probabilities of classification.
+def predict_proba(self, X):
+    """Calibrated probabilities of classification.
 
-        This function returns calibrated probabilities of classification
-        according to each class on an array of test vectors X.
+    This function returns calibrated probabilities of classification
+    according to each class on an array of test vectors X.
 
-        Parameters
-        ----------
-        X : array-like of shape (n_samples, n_features)
-            The samples, as accepted by `estimator.predict_proba`.
+    Parameters
+    ----------
+    X : array-like of shape (n_samples, n_features)
+        The samples, as accepted by `estimator.predict_proba`.
 
-        Returns
-        -------
-        C : ndarray of shape (n_samples, n_classes)
-            The predicted probas.
-        """
-        check_is_fitted(self)
-        # Compute the arithmetic mean of the predictions of the calibrated
-        # classifiers
-        mean_proba = np.zeros((_num_samples(X), len(self.classes_)))
-        for calibrated_classifier in self.calibrated_classifiers_:
-            proba = calibrated_classifier.predict_proba(X)
-            mean_proba += proba
+    Returns
+    -------
+    C : ndarray of shape (n_samples, n_classes)
+        The predicted probas.
+    """
+    check_is_fitted(self)
+    # Compute the arithmetic mean of the predictions of the calibrated
+    # classifiers
+    mean_proba = np.zeros((_num_samples(X), len(self.classes_)))
+    for calibrated_classifier in self.calibrated_classifiers_:
+        proba = calibrated_classifier.predict_proba(X)
+        mean_proba += proba
 
-        mean_proba /= len(self.calibrated_classifiers_)
+    mean_proba /= len(self.calibrated_classifiers_)
 
-        return mean_proba
+    return mean_proba
 
     def predict(self, X):
         """Predict the target of new samples.
@@ -760,7 +760,10 @@ class _CalibratedClassifier:
                 # When binary, `predictions` consists only of predictions for
                 # clf.classes_[1] but `pos_class_indices` = 0
                 class_idx += 1
-            proba[:, class_idx] = calibrator.predict(this_pred)
+            calib_pred = calibrator.predict(this_pred)
+            if isinstance(calib_pred, pd.DataFrame):
+                calib_pred = calib_pred.to_numpy().flatten()
+            proba[:, class_idx] = calib_pred
 
         # Normalize the probabilities
         if n_classes == 2:
2024-07-03 15:54:52,755 - INFO - Eval script for scikit-learn__scikit-learn-25500 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_175782/model_name_managed_by_server/scikit-learn__scikit-learn-25500/patch.diff, now applying to container...
2024-07-03 15:55:02,547 - INFO - Test output for scikit-learn__scikit-learn-25500 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_175782/model_name_managed_by_server/scikit-learn__scikit-learn-25500/test_output.txt
2024-07-03 15:55:02,593 - INFO - Git diff after:
diff --git a/sklearn/calibration.py b/sklearn/calibration.py
index 2c4a33616..500e69ca9 100644
--- a/sklearn/calibration.py
+++ b/sklearn/calibration.py
@@ -452,33 +452,33 @@ class CalibratedClassifierCV(ClassifierMixin, MetaEstimatorMixin, BaseEstimator)
             self.feature_names_in_ = first_clf.feature_names_in_
         return self
 
-    def predict_proba(self, X):
-        """Calibrated probabilities of classification.
+def predict_proba(self, X):
+    """Calibrated probabilities of classification.
 
-        This function returns calibrated probabilities of classification
-        according to each class on an array of test vectors X.
+    This function returns calibrated probabilities of classification
+    according to each class on an array of test vectors X.
 
-        Parameters
-        ----------
-        X : array-like of shape (n_samples, n_features)
-            The samples, as accepted by `estimator.predict_proba`.
+    Parameters
+    ----------
+    X : array-like of shape (n_samples, n_features)
+        The samples, as accepted by `estimator.predict_proba`.
 
-        Returns
-        -------
-        C : ndarray of shape (n_samples, n_classes)
-            The predicted probas.
-        """
-        check_is_fitted(self)
-        # Compute the arithmetic mean of the predictions of the calibrated
-        # classifiers
-        mean_proba = np.zeros((_num_samples(X), len(self.classes_)))
-        for calibrated_classifier in self.calibrated_classifiers_:
-            proba = calibrated_classifier.predict_proba(X)
-            mean_proba += proba
+    Returns
+    -------
+    C : ndarray of shape (n_samples, n_classes)
+        The predicted probas.
+    """
+    check_is_fitted(self)
+    # Compute the arithmetic mean of the predictions of the calibrated
+    # classifiers
+    mean_proba = np.zeros((_num_samples(X), len(self.classes_)))
+    for calibrated_classifier in self.calibrated_classifiers_:
+        proba = calibrated_classifier.predict_proba(X)
+        mean_proba += proba
 
-        mean_proba /= len(self.calibrated_classifiers_)
+    mean_proba /= len(self.calibrated_classifiers_)
 
-        return mean_proba
+    return mean_proba
 
     def predict(self, X):
         """Predict the target of new samples.
@@ -760,7 +760,10 @@ class _CalibratedClassifier:
                 # When binary, `predictions` consists only of predictions for
                 # clf.classes_[1] but `pos_class_indices` = 0
                 class_idx += 1
-            proba[:, class_idx] = calibrator.predict(this_pred)
+            calib_pred = calibrator.predict(this_pred)
+            if isinstance(calib_pred, pd.DataFrame):
+                calib_pred = calib_pred.to_numpy().flatten()
+            proba[:, class_idx] = calib_pred
 
         # Normalize the probabilities
         if n_classes == 2:
2024-07-03 15:55:02,594 - INFO - Grading answer for scikit-learn__scikit-learn-25500...
2024-07-03 15:55:02,600 - INFO - report: {'scikit-learn__scikit-learn-25500': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['sklearn/tests/test_isotonic.py::test_isotonic_regression_output_predict']}, 'PASS_TO_PASS': {'success': ['sklearn/tests/test_isotonic.py::test_permutation_invariance', 'sklearn/tests/test_isotonic.py::test_check_increasing_small_number_of_samples', 'sklearn/tests/test_isotonic.py::test_check_increasing_up', 'sklearn/tests/test_isotonic.py::test_check_increasing_up_extreme', 'sklearn/tests/test_isotonic.py::test_check_increasing_down', 'sklearn/tests/test_isotonic.py::test_check_increasing_down_extreme', 'sklearn/tests/test_isotonic.py::test_check_ci_warn', 'sklearn/tests/test_isotonic.py::test_isotonic_regression', 'sklearn/tests/test_isotonic.py::test_isotonic_regression_ties_min', 'sklearn/tests/test_isotonic.py::test_isotonic_regression_ties_max', 'sklearn/tests/test_isotonic.py::test_isotonic_regression_ties_secondary_', 'sklearn/tests/test_isotonic.py::test_isotonic_regression_with_ties_in_differently_sized_groups', 'sklearn/tests/test_isotonic.py::test_isotonic_regression_reversed', 'sklearn/tests/test_isotonic.py::test_isotonic_regression_auto_decreasing', 'sklearn/tests/test_isotonic.py::test_isotonic_regression_auto_increasing', 'sklearn/tests/test_isotonic.py::test_assert_raises_exceptions', 'sklearn/tests/test_isotonic.py::test_isotonic_sample_weight_parameter_default_value', 'sklearn/tests/test_isotonic.py::test_isotonic_min_max_boundaries', 'sklearn/tests/test_isotonic.py::test_isotonic_sample_weight', 'sklearn/tests/test_isotonic.py::test_isotonic_regression_oob_raise', 'sklearn/tests/test_isotonic.py::test_isotonic_regression_oob_clip', 'sklearn/tests/test_isotonic.py::test_isotonic_regression_oob_nan', 'sklearn/tests/test_isotonic.py::test_isotonic_regression_pickle', 'sklearn/tests/test_isotonic.py::test_isotonic_duplicate_min_entry', 'sklearn/tests/test_isotonic.py::test_isotonic_ymin_ymax', 'sklearn/tests/test_isotonic.py::test_isotonic_zero_weight_loop', 'sklearn/tests/test_isotonic.py::test_fast_predict', 'sklearn/tests/test_isotonic.py::test_isotonic_copy_before_fit', 'sklearn/tests/test_isotonic.py::test_isotonic_dtype', 'sklearn/tests/test_isotonic.py::test_isotonic_mismatched_dtype[int32]', 'sklearn/tests/test_isotonic.py::test_isotonic_mismatched_dtype[int64]', 'sklearn/tests/test_isotonic.py::test_isotonic_mismatched_dtype[float32]', 'sklearn/tests/test_isotonic.py::test_isotonic_mismatched_dtype[float64]', 'sklearn/tests/test_isotonic.py::test_make_unique_dtype', 'sklearn/tests/test_isotonic.py::test_make_unique_tolerance[float64]', 'sklearn/tests/test_isotonic.py::test_make_unique_tolerance[float32]', 'sklearn/tests/test_isotonic.py::test_isotonic_make_unique_tolerance', 'sklearn/tests/test_isotonic.py::test_isotonic_non_regression_inf_slope', 'sklearn/tests/test_isotonic.py::test_isotonic_thresholds[True]', 'sklearn/tests/test_isotonic.py::test_isotonic_thresholds[False]', 'sklearn/tests/test_isotonic.py::test_input_shape_validation', 'sklearn/tests/test_isotonic.py::test_isotonic_2darray_more_than_1_feature', 'sklearn/tests/test_isotonic.py::test_isotonic_regression_sample_weight_not_overwritten', 'sklearn/tests/test_isotonic.py::test_get_feature_names_out[1d]', 'sklearn/tests/test_isotonic.py::test_get_feature_names_out[2d]'], 'failure': []}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for scikit-learn__scikit-learn-25500: resolved: False
2024-07-03 15:55:02,600 - INFO - Attempting to stop container sweb.eval.scikit-learn__scikit-learn-25500.evaluation_175782...
2024-07-03 15:55:09,175 - INFO - Attempting to remove container sweb.eval.scikit-learn__scikit-learn-25500.evaluation_175782...
2024-07-03 15:55:09,389 - INFO - Container sweb.eval.scikit-learn__scikit-learn-25500.evaluation_175782 removed.
