2024-07-03 03:52:08,225 - INFO - Environment image sweb.env.x86_64.aa92880033da20ca313928:latest found for scikit-learn__scikit-learn-13584
Building instance image sweb.eval.x86_64.scikit-learn__scikit-learn-13584:latest for scikit-learn__scikit-learn-13584
2024-07-03 03:52:08,227 - INFO - Image sweb.eval.x86_64.scikit-learn__scikit-learn-13584:latest already exists, skipping build.
2024-07-03 03:52:08,227 - INFO - Creating container for scikit-learn__scikit-learn-13584...
2024-07-03 03:52:11,187 - INFO - Container for scikit-learn__scikit-learn-13584 created: fdb856d8409c9be6c1201ac09af1fdff93a9aba050eed4bd2f52a7d937b0fd71
2024-07-03 03:52:12,605 - INFO - Container for scikit-learn__scikit-learn-13584 started: fdb856d8409c9be6c1201ac09af1fdff93a9aba050eed4bd2f52a7d937b0fd71
2024-07-03 03:52:12,605 - INFO - Intermediate patch for scikit-learn__scikit-learn-13584 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_141595/model_name_managed_by_server/scikit-learn__scikit-learn-13584/patch.diff, now applying to container...
2024-07-03 03:52:12,802 - INFO - >>>>> Applied Patch:
Checking patch sklearn/utils/_pprint.py...
Applied patch sklearn/utils/_pprint.py cleanly.

2024-07-03 03:52:13,119 - INFO - Git diff before:
diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py
index b8686dba5..af5a70e11 100644
--- a/sklearn/utils/_pprint.py
+++ b/sklearn/utils/_pprint.py
@@ -354,50 +354,39 @@ def _safe_repr(object, context, maxlevels, level, changed_only=False):
         level += 1
         saferepr = _safe_repr
         items = sorted(object.items(), key=pprint._safe_tuple)
-        for k, v in items:
-            krepr, kreadable, krecur = saferepr(
-                k, context, maxlevels, level, changed_only=changed_only)
-            vrepr, vreadable, vrecur = saferepr(
-                v, context, maxlevels, level, changed_only=changed_only)
-            append("%s: %s" % (krepr, vrepr))
-            readable = readable and kreadable and vreadable
-            if krecur or vrecur:
-                recursive = True
-        del context[objid]
-        return "{%s}" % ", ".join(components), readable, recursive
-
-    if (issubclass(typ, list) and r is list.__repr__) or \
-       (issubclass(typ, tuple) and r is tuple.__repr__):
-        if issubclass(typ, list):
-            if not object:
-                return "[]", True, False
-            format = "[%s]"
-        elif len(object) == 1:
-            format = "(%s,)"
-        else:
-            if not object:
-                return "()", True, False
-            format = "(%s)"
-        objid = id(object)
-        if maxlevels and level >= maxlevels:
-            return format % "...", False, objid in context
-        if objid in context:
-            return pprint._recursion(object), False, True
-        context[objid] = 1
-        readable = True
-        recursive = False
-        components = []
-        append = components.append
-        level += 1
-        for o in object:
-            orepr, oreadable, orecur = _safe_repr(
-                o, context, maxlevels, level, changed_only=changed_only)
-            append(orepr)
-            if not oreadable:
-                readable = False
-            if orecur:
-                recursive = True
-        del context[objid]
+if issubclass(typ, BaseEstimator):
+    objid = id(object)
+    if maxlevels and level >= maxlevels:
+        return "{...}", False, objid in context
+    if objid in context:
+        return pprint._recursion(object), False, True
+    context[objid] = 1
+    readable = True
+    recursive = False
+    if changed_only:
+        params = _changed_params(object)
+    else:
+        params = object.get_params(deep=False)
+    components = []
+    append = components.append
+    level += 1
+    saferepr = _safe_repr
+    items = sorted(params.items(), key=pprint._safe_tuple)
+    for k, v in items:
+        krepr, kreadable, krecur = saferepr(
+            k, context, maxlevels, level, changed_only=changed_only)
+        vrepr, vreadable, vrecur = saferepr(
+            v, context, maxlevels, level, changed_only=changed_only)
+        append("%s=%s" % (krepr.strip("'"), vrepr))
+        readable = readable and kreadable and vreadable
+        if krecur or vrecur:
+            recursive = True
+    del context[objid]
+    return ("%s(%s)" % (typ.__name__, ", ".join(components)), readable,
+            recursive)
+
+    rep = repr(object)
+    return rep, (rep and not rep.startswith('<')), False
         return format % ", ".join(components), readable, recursive
 
     if issubclass(typ, BaseEstimator):
2024-07-03 03:52:13,119 - INFO - Eval script for scikit-learn__scikit-learn-13584 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_141595/model_name_managed_by_server/scikit-learn__scikit-learn-13584/patch.diff, now applying to container...
2024-07-03 03:52:17,070 - INFO - Test output for scikit-learn__scikit-learn-13584 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_141595/model_name_managed_by_server/scikit-learn__scikit-learn-13584/test_output.txt
2024-07-03 03:52:17,168 - INFO - Git diff after:
diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py
index b8686dba5..af5a70e11 100644
--- a/sklearn/utils/_pprint.py
+++ b/sklearn/utils/_pprint.py
@@ -354,50 +354,39 @@ def _safe_repr(object, context, maxlevels, level, changed_only=False):
         level += 1
         saferepr = _safe_repr
         items = sorted(object.items(), key=pprint._safe_tuple)
-        for k, v in items:
-            krepr, kreadable, krecur = saferepr(
-                k, context, maxlevels, level, changed_only=changed_only)
-            vrepr, vreadable, vrecur = saferepr(
-                v, context, maxlevels, level, changed_only=changed_only)
-            append("%s: %s" % (krepr, vrepr))
-            readable = readable and kreadable and vreadable
-            if krecur or vrecur:
-                recursive = True
-        del context[objid]
-        return "{%s}" % ", ".join(components), readable, recursive
-
-    if (issubclass(typ, list) and r is list.__repr__) or \
-       (issubclass(typ, tuple) and r is tuple.__repr__):
-        if issubclass(typ, list):
-            if not object:
-                return "[]", True, False
-            format = "[%s]"
-        elif len(object) == 1:
-            format = "(%s,)"
-        else:
-            if not object:
-                return "()", True, False
-            format = "(%s)"
-        objid = id(object)
-        if maxlevels and level >= maxlevels:
-            return format % "...", False, objid in context
-        if objid in context:
-            return pprint._recursion(object), False, True
-        context[objid] = 1
-        readable = True
-        recursive = False
-        components = []
-        append = components.append
-        level += 1
-        for o in object:
-            orepr, oreadable, orecur = _safe_repr(
-                o, context, maxlevels, level, changed_only=changed_only)
-            append(orepr)
-            if not oreadable:
-                readable = False
-            if orecur:
-                recursive = True
-        del context[objid]
+if issubclass(typ, BaseEstimator):
+    objid = id(object)
+    if maxlevels and level >= maxlevels:
+        return "{...}", False, objid in context
+    if objid in context:
+        return pprint._recursion(object), False, True
+    context[objid] = 1
+    readable = True
+    recursive = False
+    if changed_only:
+        params = _changed_params(object)
+    else:
+        params = object.get_params(deep=False)
+    components = []
+    append = components.append
+    level += 1
+    saferepr = _safe_repr
+    items = sorted(params.items(), key=pprint._safe_tuple)
+    for k, v in items:
+        krepr, kreadable, krecur = saferepr(
+            k, context, maxlevels, level, changed_only=changed_only)
+        vrepr, vreadable, vrecur = saferepr(
+            v, context, maxlevels, level, changed_only=changed_only)
+        append("%s=%s" % (krepr.strip("'"), vrepr))
+        readable = readable and kreadable and vreadable
+        if krecur or vrecur:
+            recursive = True
+    del context[objid]
+    return ("%s(%s)" % (typ.__name__, ", ".join(components)), readable,
+            recursive)
+
+    rep = repr(object)
+    return rep, (rep and not rep.startswith('<')), False
         return format % ", ".join(components), readable, recursive
 
     if issubclass(typ, BaseEstimator):
2024-07-03 03:52:17,168 - INFO - Grading answer for scikit-learn__scikit-learn-13584...
2024-07-03 03:52:17,172 - INFO - report: {'scikit-learn__scikit-learn-13584': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['sklearn/utils/tests/test_pprint.py::test_changed_only', 'sklearn/utils/tests/test_pprint.py::test_pipeline', 'sklearn/utils/tests/test_pprint.py::test_deeply_nested', 'sklearn/utils/tests/test_pprint.py::test_gridsearch', 'sklearn/utils/tests/test_pprint.py::test_gridsearch_pipeline', 'sklearn/utils/tests/test_pprint.py::test_n_max_elements_to_show']}, 'PASS_TO_PASS': {'success': [], 'failure': ['sklearn/utils/tests/test_pprint.py::test_basic', 'sklearn/utils/tests/test_pprint.py::test_length_constraint', 'sklearn/utils/tests/test_pprint.py::test_builtin_prettyprinter']}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for scikit-learn__scikit-learn-13584: resolved: False
2024-07-03 03:52:17,172 - INFO - Attempting to stop container sweb.eval.scikit-learn__scikit-learn-13584.evaluation_141595...
2024-07-03 03:52:17,806 - INFO - Attempting to remove container sweb.eval.scikit-learn__scikit-learn-13584.evaluation_141595...
2024-07-03 03:52:17,824 - INFO - Container sweb.eval.scikit-learn__scikit-learn-13584.evaluation_141595 removed.
