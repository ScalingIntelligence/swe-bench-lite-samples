2024-07-03 20:45:40,830 - INFO - Environment image sweb.env.x86_64.2baaea72acc974f6c02079:latest found for django__django-11630
Building instance image sweb.eval.x86_64.django__django-11630:latest for django__django-11630
2024-07-03 20:45:40,832 - INFO - Image sweb.eval.x86_64.django__django-11630:latest already exists, skipping build.
2024-07-03 20:45:40,833 - INFO - Creating container for django__django-11630...
2024-07-03 20:45:42,253 - INFO - Container for django__django-11630 created: 74e919cf5f6cb3292e89cc9caf64a318f8db84b1c1115bd3a9b9822f0adc2526
2024-07-03 20:47:44,060 - INFO - Container for django__django-11630 started: 74e919cf5f6cb3292e89cc9caf64a318f8db84b1c1115bd3a9b9822f0adc2526
2024-07-03 20:47:44,060 - INFO - Intermediate patch for django__django-11630 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_200046/model_name_managed_by_server/django__django-11630/patch.diff, now applying to container...
2024-07-03 20:47:44,379 - INFO - >>>>> Applied Patch:
Checking patch django/db/models/base.py...
Applied patch django/db/models/base.py cleanly.

2024-07-03 20:47:47,179 - INFO - Git diff before:
diff --git a/django/db/models/base.py b/django/db/models/base.py
index 18ee0b4911..4d72c6f1b7 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -1368,11 +1368,29 @@ class Model(metaclass=ModelBase):
 
     @classmethod
     def _check_field_name_clashes(cls):
-        """Forbid field shadowing in multi-table inheritance."""
+        """Forbid field shadowing in multi-table inheritance and ensure unique db_table names."""
         errors = []
-        used_fields = {}  # name or attname -> field
+        used_tables = {}  # db_table -> model
+
+        # Collect all models and their db_table names
+        for model in apps.get_models():
+            db_table = model._meta.db_table
+            if db_table in used_tables:
+                original_model = used_tables[db_table]
+                errors.append(
+                    checks.Error(
+                        "The table '%s' is used by multiple models: '%s' and '%s'." % (
+                            db_table, original_model._meta, model._meta
+                        ),
+                        obj=cls,
+                        id='models.E028',
+                    )
+                )
+            else:
+                used_tables[db_table] = model
 
         # Check that multi-inheritance doesn't cause field name shadowing.
+        used_fields = {}  # name or attname -> field
         for parent in cls._meta.get_parent_list():
             for f in parent._meta.local_fields:
                 clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
@@ -1402,10 +1420,6 @@ class Model(metaclass=ModelBase):
 
         for f in cls._meta.local_fields:
             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
-            # Note that we may detect clash between user-defined non-unique
-            # field "id" and automatically added unique field "id", both
-            # defined at the same model. This special case is considered in
-            # _check_id_field and here we ignore it.
             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
             if clash and not id_conflict:
                 errors.append(
2024-07-03 20:47:47,187 - INFO - Eval script for django__django-11630 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_200046/model_name_managed_by_server/django__django-11630/patch.diff, now applying to container...
2024-07-03 20:49:24,175 - INFO - Test output for django__django-11630 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_200046/model_name_managed_by_server/django__django-11630/test_output.txt
2024-07-03 20:49:24,323 - INFO - Git diff after:
diff --git a/django/db/models/base.py b/django/db/models/base.py
index 18ee0b4911..4d72c6f1b7 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -1368,11 +1368,29 @@ class Model(metaclass=ModelBase):
 
     @classmethod
     def _check_field_name_clashes(cls):
-        """Forbid field shadowing in multi-table inheritance."""
+        """Forbid field shadowing in multi-table inheritance and ensure unique db_table names."""
         errors = []
-        used_fields = {}  # name or attname -> field
+        used_tables = {}  # db_table -> model
+
+        # Collect all models and their db_table names
+        for model in apps.get_models():
+            db_table = model._meta.db_table
+            if db_table in used_tables:
+                original_model = used_tables[db_table]
+                errors.append(
+                    checks.Error(
+                        "The table '%s' is used by multiple models: '%s' and '%s'." % (
+                            db_table, original_model._meta, model._meta
+                        ),
+                        obj=cls,
+                        id='models.E028',
+                    )
+                )
+            else:
+                used_tables[db_table] = model
 
         # Check that multi-inheritance doesn't cause field name shadowing.
+        used_fields = {}  # name or attname -> field
         for parent in cls._meta.get_parent_list():
             for f in parent._meta.local_fields:
                 clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
@@ -1402,10 +1420,6 @@ class Model(metaclass=ModelBase):
 
         for f in cls._meta.local_fields:
             clash = used_fields.get(f.name) or used_fields.get(f.attname) or None
-            # Note that we may detect clash between user-defined non-unique
-            # field "id" and automatically added unique field "id", both
-            # defined at the same model. This special case is considered in
-            # _check_id_field and here we ignore it.
             id_conflict = f.name == "id" and clash and clash.name == "id" and clash.model == cls
             if clash and not id_conflict:
                 errors.append(
2024-07-03 20:49:24,323 - INFO - Grading answer for django__django-11630...
2024-07-03 20:49:24,325 - INFO - report: {'django__django-11630': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['test_collision_across_apps_database_routers_installed (check_framework.test_model_checks.DuplicateDBTableTests)', 'test_collision_in_same_app_database_routers_installed (check_framework.test_model_checks.DuplicateDBTableTests)']}, 'PASS_TO_PASS': {'success': ['test_collision_abstract_model (check_framework.test_model_checks.IndexNameTests)', 'test_collision_across_apps (check_framework.test_model_checks.IndexNameTests)', 'test_collision_in_different_models (check_framework.test_model_checks.IndexNameTests)', 'test_collision_in_same_model (check_framework.test_model_checks.IndexNameTests)', 'test_no_collision_abstract_model_interpolation (check_framework.test_model_checks.IndexNameTests)', 'test_no_collision_across_apps_interpolation (check_framework.test_model_checks.IndexNameTests)', 'test_collision_abstract_model (check_framework.test_model_checks.ConstraintNameTests)', 'test_collision_across_apps (check_framework.test_model_checks.ConstraintNameTests)', 'test_collision_in_different_models (check_framework.test_model_checks.ConstraintNameTests)', 'test_collision_in_same_model (check_framework.test_model_checks.ConstraintNameTests)', 'test_no_collision_abstract_model_interpolation (check_framework.test_model_checks.ConstraintNameTests)', 'test_no_collision_across_apps_interpolation (check_framework.test_model_checks.ConstraintNameTests)', 'test_collision_across_apps (check_framework.test_model_checks.DuplicateDBTableTests)', 'test_collision_in_same_app (check_framework.test_model_checks.DuplicateDBTableTests)', 'test_no_collision_for_proxy_models (check_framework.test_model_checks.DuplicateDBTableTests)', 'test_no_collision_for_unmanaged_models (check_framework.test_model_checks.DuplicateDBTableTests)'], 'failure': []}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for django__django-11630: resolved: False
2024-07-03 20:49:24,325 - INFO - Attempting to stop container sweb.eval.django__django-11630.evaluation_200046...
2024-07-03 20:49:26,330 - INFO - Attempting to remove container sweb.eval.django__django-11630.evaluation_200046...
2024-07-03 20:49:26,993 - INFO - Container sweb.eval.django__django-11630.evaluation_200046 removed.
