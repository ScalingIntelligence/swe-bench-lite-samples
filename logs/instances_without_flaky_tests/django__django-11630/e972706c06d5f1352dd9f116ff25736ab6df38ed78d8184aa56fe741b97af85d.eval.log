2024-07-03 21:49:07,676 - INFO - Environment image sweb.env.x86_64.2baaea72acc974f6c02079:latest found for django__django-11630
Building instance image sweb.eval.x86_64.django__django-11630:latest for django__django-11630
2024-07-03 21:49:07,678 - INFO - Image sweb.eval.x86_64.django__django-11630:latest already exists, skipping build.
2024-07-03 21:49:07,678 - INFO - Creating container for django__django-11630...
2024-07-03 21:49:10,351 - INFO - Container for django__django-11630 created: 031d870adfbaadfa25dc080e2a59eccfb6d3187bb7f951aa5edb66d3ab8ba27b
2024-07-03 21:50:57,220 - INFO - Container for django__django-11630 started: 031d870adfbaadfa25dc080e2a59eccfb6d3187bb7f951aa5edb66d3ab8ba27b
2024-07-03 21:50:57,220 - INFO - Intermediate patch for django__django-11630 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_205087/model_name_managed_by_server/django__django-11630/patch.diff, now applying to container...
2024-07-03 21:50:57,622 - INFO - >>>>> Applied Patch:
Checking patch django/db/models/base.py...
Applied patch django/db/models/base.py cleanly.

2024-07-03 21:50:59,650 - INFO - Git diff before:
diff --git a/django/db/models/base.py b/django/db/models/base.py
index 18ee0b4911..79da0213fb 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -1428,9 +1428,26 @@ class Model(metaclass=ModelBase):
         # Store a list of column names which have already been used by other fields.
         used_column_names = []
         errors = []
+        table_name_to_models = {}
 
         for f in cls._meta.local_fields:
             _, column_name = f.get_attname_column()
+            db_table = cls._meta.db_table
+
+            if db_table in table_name_to_models:
+                if db_table not in table_name_to_models[db_table]:
+                    table_name_to_models[db_table].append(cls)
+                else:
+                    errors.append(
+                        checks.Error(
+                            "Table name '%s' is used by multiple models: %s, %s." % (db_table, table_name_to_models[db_table][0].__name__, cls.__name__),
+                            hint="Specify a different 'db_table' for one of the models.",
+                            obj=cls,
+                            id='models.E028'
+                        )
+                    )
+            else:
+                table_name_to_models[db_table] = [cls]
 
             # Ensure the column name is not already in use.
             if column_name and column_name in used_column_names:
2024-07-03 21:50:59,651 - INFO - Eval script for django__django-11630 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_205087/model_name_managed_by_server/django__django-11630/patch.diff, now applying to container...
2024-07-03 22:00:08,957 - INFO - Test output for django__django-11630 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_205087/model_name_managed_by_server/django__django-11630/test_output.txt
2024-07-03 22:00:09,034 - INFO - Git diff after:
diff --git a/django/db/models/base.py b/django/db/models/base.py
index 18ee0b4911..79da0213fb 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -1428,9 +1428,26 @@ class Model(metaclass=ModelBase):
         # Store a list of column names which have already been used by other fields.
         used_column_names = []
         errors = []
+        table_name_to_models = {}
 
         for f in cls._meta.local_fields:
             _, column_name = f.get_attname_column()
+            db_table = cls._meta.db_table
+
+            if db_table in table_name_to_models:
+                if db_table not in table_name_to_models[db_table]:
+                    table_name_to_models[db_table].append(cls)
+                else:
+                    errors.append(
+                        checks.Error(
+                            "Table name '%s' is used by multiple models: %s, %s." % (db_table, table_name_to_models[db_table][0].__name__, cls.__name__),
+                            hint="Specify a different 'db_table' for one of the models.",
+                            obj=cls,
+                            id='models.E028'
+                        )
+                    )
+            else:
+                table_name_to_models[db_table] = [cls]
 
             # Ensure the column name is not already in use.
             if column_name and column_name in used_column_names:
2024-07-03 22:00:09,034 - INFO - Grading answer for django__django-11630...
2024-07-03 22:00:09,036 - INFO - report: {'django__django-11630': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['test_collision_across_apps_database_routers_installed (check_framework.test_model_checks.DuplicateDBTableTests)', 'test_collision_in_same_app_database_routers_installed (check_framework.test_model_checks.DuplicateDBTableTests)']}, 'PASS_TO_PASS': {'success': ['test_collision_abstract_model (check_framework.test_model_checks.IndexNameTests)', 'test_collision_across_apps (check_framework.test_model_checks.IndexNameTests)', 'test_collision_in_different_models (check_framework.test_model_checks.IndexNameTests)', 'test_collision_in_same_model (check_framework.test_model_checks.IndexNameTests)', 'test_no_collision_abstract_model_interpolation (check_framework.test_model_checks.IndexNameTests)', 'test_no_collision_across_apps_interpolation (check_framework.test_model_checks.IndexNameTests)', 'test_collision_abstract_model (check_framework.test_model_checks.ConstraintNameTests)', 'test_collision_across_apps (check_framework.test_model_checks.ConstraintNameTests)', 'test_collision_in_different_models (check_framework.test_model_checks.ConstraintNameTests)', 'test_collision_in_same_model (check_framework.test_model_checks.ConstraintNameTests)', 'test_no_collision_abstract_model_interpolation (check_framework.test_model_checks.ConstraintNameTests)', 'test_no_collision_across_apps_interpolation (check_framework.test_model_checks.ConstraintNameTests)', 'test_collision_across_apps (check_framework.test_model_checks.DuplicateDBTableTests)', 'test_collision_in_same_app (check_framework.test_model_checks.DuplicateDBTableTests)', 'test_no_collision_for_proxy_models (check_framework.test_model_checks.DuplicateDBTableTests)', 'test_no_collision_for_unmanaged_models (check_framework.test_model_checks.DuplicateDBTableTests)'], 'failure': []}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for django__django-11630: resolved: False
2024-07-03 22:00:09,036 - INFO - Attempting to stop container sweb.eval.django__django-11630.evaluation_205087...
2024-07-03 22:00:10,951 - INFO - Attempting to remove container sweb.eval.django__django-11630.evaluation_205087...
2024-07-03 22:00:11,873 - INFO - Container sweb.eval.django__django-11630.evaluation_205087 removed.
