2024-07-03 21:16:27,258 - INFO - Environment image sweb.env.x86_64.2baaea72acc974f6c02079:latest found for django__django-11630
Building instance image sweb.eval.x86_64.django__django-11630:latest for django__django-11630
2024-07-03 21:16:27,263 - INFO - Image sweb.eval.x86_64.django__django-11630:latest already exists, skipping build.
2024-07-03 21:16:27,263 - INFO - Creating container for django__django-11630...
2024-07-03 21:16:28,108 - INFO - Container for django__django-11630 created: a0b4095c90f0f2dacad6dfe15259d14fedbc489db34983e5856a8eb911a84dfc
2024-07-03 21:18:15,262 - INFO - Container for django__django-11630 started: a0b4095c90f0f2dacad6dfe15259d14fedbc489db34983e5856a8eb911a84dfc
2024-07-03 21:18:15,263 - INFO - Intermediate patch for django__django-11630 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_202540/model_name_managed_by_server/django__django-11630/patch.diff, now applying to container...
2024-07-03 21:18:15,615 - INFO - >>>>> Applied Patch:
Checking patch django/core/checks/model_checks.py...
Applied patch django/core/checks/model_checks.py cleanly.

2024-07-03 21:18:17,714 - INFO - Git diff before:
diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py
index 5c2266ca1d..e043470035 100644
--- a/django/core/checks/model_checks.py
+++ b/django/core/checks/model_checks.py
@@ -36,15 +36,17 @@ def check_all_models(app_configs=None, **kwargs):
         for model_constraint in model._meta.constraints:
             constraints[model_constraint.name].append(model._meta.label)
     for db_table, model_labels in db_table_models.items():
-        if len(model_labels) != 1:
-            errors.append(
-                Error(
-                    "db_table '%s' is used by multiple models: %s."
-                    % (db_table, ', '.join(db_table_models[db_table])),
-                    obj=db_table,
-                    id='models.E028',
+        if len(model_labels) > 1:  # Change from != 1 to > 1
+            app_labels = set(label.split('.')[0] for label in model_labels)
+            if len(app_labels) != len(model_labels):  # Only raise if models are from different apps
+                errors.append(
+                    Error(
+                        "db_table '%s' is used by multiple models: %s."
+                        % (db_table, ', '.join(db_table_models[db_table])),
+                        obj=db_table,
+                        id='models.E028',
+                    )
                 )
-            )
     for index_name, model_labels in indexes.items():
         if len(model_labels) > 1:
             model_labels = set(model_labels)
2024-07-03 21:18:17,723 - INFO - Eval script for django__django-11630 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_202540/model_name_managed_by_server/django__django-11630/patch.diff, now applying to container...
2024-07-03 21:18:50,879 - INFO - Test output for django__django-11630 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_202540/model_name_managed_by_server/django__django-11630/test_output.txt
2024-07-03 21:18:51,074 - INFO - Git diff after:
diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py
index 5c2266ca1d..e043470035 100644
--- a/django/core/checks/model_checks.py
+++ b/django/core/checks/model_checks.py
@@ -36,15 +36,17 @@ def check_all_models(app_configs=None, **kwargs):
         for model_constraint in model._meta.constraints:
             constraints[model_constraint.name].append(model._meta.label)
     for db_table, model_labels in db_table_models.items():
-        if len(model_labels) != 1:
-            errors.append(
-                Error(
-                    "db_table '%s' is used by multiple models: %s."
-                    % (db_table, ', '.join(db_table_models[db_table])),
-                    obj=db_table,
-                    id='models.E028',
+        if len(model_labels) > 1:  # Change from != 1 to > 1
+            app_labels = set(label.split('.')[0] for label in model_labels)
+            if len(app_labels) != len(model_labels):  # Only raise if models are from different apps
+                errors.append(
+                    Error(
+                        "db_table '%s' is used by multiple models: %s."
+                        % (db_table, ', '.join(db_table_models[db_table])),
+                        obj=db_table,
+                        id='models.E028',
+                    )
                 )
-            )
     for index_name, model_labels in indexes.items():
         if len(model_labels) > 1:
             model_labels = set(model_labels)
2024-07-03 21:18:51,075 - INFO - Grading answer for django__django-11630...
2024-07-03 21:18:51,079 - INFO - report: {'django__django-11630': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['test_collision_across_apps_database_routers_installed (check_framework.test_model_checks.DuplicateDBTableTests)', 'test_collision_in_same_app_database_routers_installed (check_framework.test_model_checks.DuplicateDBTableTests)']}, 'PASS_TO_PASS': {'success': ['test_collision_abstract_model (check_framework.test_model_checks.IndexNameTests)', 'test_collision_across_apps (check_framework.test_model_checks.IndexNameTests)', 'test_collision_in_different_models (check_framework.test_model_checks.IndexNameTests)', 'test_collision_in_same_model (check_framework.test_model_checks.IndexNameTests)', 'test_no_collision_abstract_model_interpolation (check_framework.test_model_checks.IndexNameTests)', 'test_no_collision_across_apps_interpolation (check_framework.test_model_checks.IndexNameTests)', 'test_collision_abstract_model (check_framework.test_model_checks.ConstraintNameTests)', 'test_collision_across_apps (check_framework.test_model_checks.ConstraintNameTests)', 'test_collision_in_different_models (check_framework.test_model_checks.ConstraintNameTests)', 'test_collision_in_same_model (check_framework.test_model_checks.ConstraintNameTests)', 'test_no_collision_abstract_model_interpolation (check_framework.test_model_checks.ConstraintNameTests)', 'test_no_collision_across_apps_interpolation (check_framework.test_model_checks.ConstraintNameTests)', 'test_collision_in_same_app (check_framework.test_model_checks.DuplicateDBTableTests)', 'test_no_collision_for_proxy_models (check_framework.test_model_checks.DuplicateDBTableTests)', 'test_no_collision_for_unmanaged_models (check_framework.test_model_checks.DuplicateDBTableTests)'], 'failure': ['test_collision_across_apps (check_framework.test_model_checks.DuplicateDBTableTests)']}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for django__django-11630: resolved: False
2024-07-03 21:18:51,079 - INFO - Attempting to stop container sweb.eval.django__django-11630.evaluation_202540...
2024-07-03 21:18:54,207 - INFO - Attempting to remove container sweb.eval.django__django-11630.evaluation_202540...
2024-07-03 21:18:54,613 - INFO - Container sweb.eval.django__django-11630.evaluation_202540 removed.
