2024-07-03 20:00:12,540 - INFO - Environment image sweb.env.x86_64.2baaea72acc974f6c02079:latest found for django__django-11630
Building instance image sweb.eval.x86_64.django__django-11630:latest for django__django-11630
2024-07-03 20:00:12,544 - INFO - Image sweb.eval.x86_64.django__django-11630:latest already exists, skipping build.
2024-07-03 20:00:12,545 - INFO - Creating container for django__django-11630...
2024-07-03 20:00:13,508 - INFO - Container for django__django-11630 created: 166792c2c0f62365526d0af237d6c682a76877f599a3ccc954f53c85f4c625dd
2024-07-03 20:00:22,120 - INFO - Container for django__django-11630 started: 166792c2c0f62365526d0af237d6c682a76877f599a3ccc954f53c85f4c625dd
2024-07-03 20:00:22,121 - INFO - Intermediate patch for django__django-11630 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_196167/model_name_managed_by_server/django__django-11630/patch.diff, now applying to container...
2024-07-03 20:00:22,716 - INFO - >>>>> Applied Patch:
Checking patch django/db/models/base.py...
Applied patch django/db/models/base.py cleanly.

2024-07-03 20:00:32,065 - INFO - Git diff before:
diff --git a/django/db/models/base.py b/django/db/models/base.py
index 18ee0b4911..066419d635 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -3,6 +3,7 @@ import inspect
 import warnings
 from functools import partialmethod
 from itertools import chain
+from collections import defaultdict
 
 from django.apps import apps
 from django.conf import settings
@@ -1425,14 +1426,13 @@ class Model(metaclass=ModelBase):
 
     @classmethod
     def _check_column_name_clashes(cls):
-        # Store a list of column names which have already been used by other fields.
         used_column_names = []
         errors = []
+        db_table_models = defaultdict(list)
 
         for f in cls._meta.local_fields:
             _, column_name = f.get_attname_column()
 
-            # Ensure the column name is not already in use.
             if column_name and column_name in used_column_names:
                 errors.append(
                     checks.Error(
@@ -1446,6 +1446,20 @@ class Model(metaclass=ModelBase):
             else:
                 used_column_names.append(column_name)
 
+        for model in apps.get_models():
+            db_table_models[model._meta.db_table].append(model._meta.label)
+
+        for db_table, model_labels in db_table_models.items():
+            if len(model_labels) > 1:
+                errors.append(
+                    checks.Error(
+                        "db_table '%s' is used by multiple models: %s."
+                        % (db_table, ', '.join(model_labels)),
+                        obj=cls,
+                        id='models.E028',
+                    )
+                )
+
         return errors
 
     @classmethod
2024-07-03 20:00:32,066 - INFO - Eval script for django__django-11630 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_196167/model_name_managed_by_server/django__django-11630/patch.diff, now applying to container...
2024-07-03 20:03:16,865 - INFO - Test output for django__django-11630 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_196167/model_name_managed_by_server/django__django-11630/test_output.txt
2024-07-03 20:03:16,947 - INFO - Git diff after:
diff --git a/django/db/models/base.py b/django/db/models/base.py
index 18ee0b4911..066419d635 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -3,6 +3,7 @@ import inspect
 import warnings
 from functools import partialmethod
 from itertools import chain
+from collections import defaultdict
 
 from django.apps import apps
 from django.conf import settings
@@ -1425,14 +1426,13 @@ class Model(metaclass=ModelBase):
 
     @classmethod
     def _check_column_name_clashes(cls):
-        # Store a list of column names which have already been used by other fields.
         used_column_names = []
         errors = []
+        db_table_models = defaultdict(list)
 
         for f in cls._meta.local_fields:
             _, column_name = f.get_attname_column()
 
-            # Ensure the column name is not already in use.
             if column_name and column_name in used_column_names:
                 errors.append(
                     checks.Error(
@@ -1446,6 +1446,20 @@ class Model(metaclass=ModelBase):
             else:
                 used_column_names.append(column_name)
 
+        for model in apps.get_models():
+            db_table_models[model._meta.db_table].append(model._meta.label)
+
+        for db_table, model_labels in db_table_models.items():
+            if len(model_labels) > 1:
+                errors.append(
+                    checks.Error(
+                        "db_table '%s' is used by multiple models: %s."
+                        % (db_table, ', '.join(model_labels)),
+                        obj=cls,
+                        id='models.E028',
+                    )
+                )
+
         return errors
 
     @classmethod
2024-07-03 20:03:16,947 - INFO - Grading answer for django__django-11630...
2024-07-03 20:03:16,949 - INFO - report: {'django__django-11630': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['test_collision_across_apps_database_routers_installed (check_framework.test_model_checks.DuplicateDBTableTests)', 'test_collision_in_same_app_database_routers_installed (check_framework.test_model_checks.DuplicateDBTableTests)']}, 'PASS_TO_PASS': {'success': ['test_collision_abstract_model (check_framework.test_model_checks.IndexNameTests)', 'test_collision_across_apps (check_framework.test_model_checks.IndexNameTests)', 'test_collision_in_different_models (check_framework.test_model_checks.IndexNameTests)', 'test_collision_in_same_model (check_framework.test_model_checks.IndexNameTests)', 'test_no_collision_abstract_model_interpolation (check_framework.test_model_checks.IndexNameTests)', 'test_no_collision_across_apps_interpolation (check_framework.test_model_checks.IndexNameTests)', 'test_collision_abstract_model (check_framework.test_model_checks.ConstraintNameTests)', 'test_collision_across_apps (check_framework.test_model_checks.ConstraintNameTests)', 'test_collision_in_different_models (check_framework.test_model_checks.ConstraintNameTests)', 'test_collision_in_same_model (check_framework.test_model_checks.ConstraintNameTests)', 'test_no_collision_abstract_model_interpolation (check_framework.test_model_checks.ConstraintNameTests)', 'test_no_collision_across_apps_interpolation (check_framework.test_model_checks.ConstraintNameTests)', 'test_collision_across_apps (check_framework.test_model_checks.DuplicateDBTableTests)', 'test_collision_in_same_app (check_framework.test_model_checks.DuplicateDBTableTests)', 'test_no_collision_for_proxy_models (check_framework.test_model_checks.DuplicateDBTableTests)', 'test_no_collision_for_unmanaged_models (check_framework.test_model_checks.DuplicateDBTableTests)'], 'failure': []}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for django__django-11630: resolved: False
2024-07-03 20:03:16,949 - INFO - Attempting to stop container sweb.eval.django__django-11630.evaluation_196167...
2024-07-03 20:03:27,256 - INFO - Attempting to remove container sweb.eval.django__django-11630.evaluation_196167...
2024-07-03 20:03:27,505 - INFO - Container sweb.eval.django__django-11630.evaluation_196167 removed.
