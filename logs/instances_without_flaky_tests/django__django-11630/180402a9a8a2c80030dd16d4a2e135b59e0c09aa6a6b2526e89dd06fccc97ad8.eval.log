2024-07-03 21:09:36,098 - INFO - Environment image sweb.env.x86_64.2baaea72acc974f6c02079:latest found for django__django-11630
Building instance image sweb.eval.x86_64.django__django-11630:latest for django__django-11630
2024-07-03 21:09:36,100 - INFO - Image sweb.eval.x86_64.django__django-11630:latest already exists, skipping build.
2024-07-03 21:09:36,100 - INFO - Creating container for django__django-11630...
2024-07-03 21:09:37,221 - INFO - Container for django__django-11630 created: b1c39e4dbc8e559bf5431e796f38cf30d452a15b2711b2a97023f9da9ec4ac05
2024-07-03 21:11:05,315 - INFO - Container for django__django-11630 started: b1c39e4dbc8e559bf5431e796f38cf30d452a15b2711b2a97023f9da9ec4ac05
2024-07-03 21:11:05,317 - INFO - Intermediate patch for django__django-11630 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_201968/model_name_managed_by_server/django__django-11630/patch.diff, now applying to container...
2024-07-03 21:11:05,756 - INFO - >>>>> Applied Patch:
Checking patch django/core/checks/model_checks.py...
Applied patch django/core/checks/model_checks.py cleanly.

2024-07-03 21:11:07,136 - INFO - Git diff before:
diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py
index 5c2266ca1d..0339055d30 100644
--- a/django/core/checks/model_checks.py
+++ b/django/core/checks/model_checks.py
@@ -9,7 +9,7 @@ from django.core.checks import Error, Tags, register
 
 @register(Tags.models)
 def check_all_models(app_configs=None, **kwargs):
-    db_table_models = defaultdict(list)
+    db_table_models = defaultdict(lambda: defaultdict(list))
     indexes = defaultdict(list)
     constraints = defaultdict(list)
     errors = []
@@ -19,7 +19,7 @@ def check_all_models(app_configs=None, **kwargs):
         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)
     for model in models:
         if model._meta.managed and not model._meta.proxy:
-            db_table_models[model._meta.db_table].append(model._meta.label)
+            db_table_models[model._meta.db_table][model._meta.db_table].append(model._meta.label)
         if not inspect.ismethod(model.check):
             errors.append(
                 Error(
@@ -35,16 +35,17 @@ def check_all_models(app_configs=None, **kwargs):
             indexes[model_index.name].append(model._meta.label)
         for model_constraint in model._meta.constraints:
             constraints[model_constraint.name].append(model._meta.label)
-    for db_table, model_labels in db_table_models.items():
-        if len(model_labels) != 1:
-            errors.append(
-                Error(
-                    "db_table '%s' is used by multiple models: %s."
-                    % (db_table, ', '.join(db_table_models[db_table])),
-                    obj=db_table,
-                    id='models.E028',
+    for db_table, model_labels_by_db in db_table_models.items():
+        for db_alias, model_labels in model_labels_by_db.items():
+            if len(model_labels) != 1:
+                errors.append(
+                    Error(
+                        "db_table '%s' is used by multiple models: %s."
+                        % (db_table, ', '.join(model_labels)),
+                        obj=db_table,
+                        id='models.E028',
+                    )
                 )
-            )
     for index_name, model_labels in indexes.items():
         if len(model_labels) > 1:
             model_labels = set(model_labels)
2024-07-03 21:11:07,137 - INFO - Eval script for django__django-11630 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_201968/model_name_managed_by_server/django__django-11630/patch.diff, now applying to container...
2024-07-03 21:14:57,659 - INFO - Test output for django__django-11630 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_201968/model_name_managed_by_server/django__django-11630/test_output.txt
2024-07-03 21:14:57,820 - INFO - Git diff after:
diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py
index 5c2266ca1d..0339055d30 100644
--- a/django/core/checks/model_checks.py
+++ b/django/core/checks/model_checks.py
@@ -9,7 +9,7 @@ from django.core.checks import Error, Tags, register
 
 @register(Tags.models)
 def check_all_models(app_configs=None, **kwargs):
-    db_table_models = defaultdict(list)
+    db_table_models = defaultdict(lambda: defaultdict(list))
     indexes = defaultdict(list)
     constraints = defaultdict(list)
     errors = []
@@ -19,7 +19,7 @@ def check_all_models(app_configs=None, **kwargs):
         models = chain.from_iterable(app_config.get_models() for app_config in app_configs)
     for model in models:
         if model._meta.managed and not model._meta.proxy:
-            db_table_models[model._meta.db_table].append(model._meta.label)
+            db_table_models[model._meta.db_table][model._meta.db_table].append(model._meta.label)
         if not inspect.ismethod(model.check):
             errors.append(
                 Error(
@@ -35,16 +35,17 @@ def check_all_models(app_configs=None, **kwargs):
             indexes[model_index.name].append(model._meta.label)
         for model_constraint in model._meta.constraints:
             constraints[model_constraint.name].append(model._meta.label)
-    for db_table, model_labels in db_table_models.items():
-        if len(model_labels) != 1:
-            errors.append(
-                Error(
-                    "db_table '%s' is used by multiple models: %s."
-                    % (db_table, ', '.join(db_table_models[db_table])),
-                    obj=db_table,
-                    id='models.E028',
+    for db_table, model_labels_by_db in db_table_models.items():
+        for db_alias, model_labels in model_labels_by_db.items():
+            if len(model_labels) != 1:
+                errors.append(
+                    Error(
+                        "db_table '%s' is used by multiple models: %s."
+                        % (db_table, ', '.join(model_labels)),
+                        obj=db_table,
+                        id='models.E028',
+                    )
                 )
-            )
     for index_name, model_labels in indexes.items():
         if len(model_labels) > 1:
             model_labels = set(model_labels)
2024-07-03 21:14:57,820 - INFO - Grading answer for django__django-11630...
2024-07-03 21:14:57,823 - INFO - report: {'django__django-11630': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['test_collision_across_apps_database_routers_installed (check_framework.test_model_checks.DuplicateDBTableTests)', 'test_collision_in_same_app_database_routers_installed (check_framework.test_model_checks.DuplicateDBTableTests)']}, 'PASS_TO_PASS': {'success': ['test_collision_abstract_model (check_framework.test_model_checks.IndexNameTests)', 'test_collision_across_apps (check_framework.test_model_checks.IndexNameTests)', 'test_collision_in_different_models (check_framework.test_model_checks.IndexNameTests)', 'test_collision_in_same_model (check_framework.test_model_checks.IndexNameTests)', 'test_no_collision_abstract_model_interpolation (check_framework.test_model_checks.IndexNameTests)', 'test_no_collision_across_apps_interpolation (check_framework.test_model_checks.IndexNameTests)', 'test_collision_abstract_model (check_framework.test_model_checks.ConstraintNameTests)', 'test_collision_across_apps (check_framework.test_model_checks.ConstraintNameTests)', 'test_collision_in_different_models (check_framework.test_model_checks.ConstraintNameTests)', 'test_collision_in_same_model (check_framework.test_model_checks.ConstraintNameTests)', 'test_no_collision_abstract_model_interpolation (check_framework.test_model_checks.ConstraintNameTests)', 'test_no_collision_across_apps_interpolation (check_framework.test_model_checks.ConstraintNameTests)', 'test_collision_across_apps (check_framework.test_model_checks.DuplicateDBTableTests)', 'test_collision_in_same_app (check_framework.test_model_checks.DuplicateDBTableTests)', 'test_no_collision_for_proxy_models (check_framework.test_model_checks.DuplicateDBTableTests)', 'test_no_collision_for_unmanaged_models (check_framework.test_model_checks.DuplicateDBTableTests)'], 'failure': []}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for django__django-11630: resolved: False
2024-07-03 21:14:57,825 - INFO - Attempting to stop container sweb.eval.django__django-11630.evaluation_201968...
2024-07-03 21:15:04,101 - INFO - Attempting to remove container sweb.eval.django__django-11630.evaluation_201968...
2024-07-03 21:15:05,402 - INFO - Container sweb.eval.django__django-11630.evaluation_201968 removed.
