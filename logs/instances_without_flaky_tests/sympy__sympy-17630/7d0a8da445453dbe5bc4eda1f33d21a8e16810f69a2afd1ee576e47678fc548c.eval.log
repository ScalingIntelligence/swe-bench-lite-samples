2024-07-03 04:43:52,010 - INFO - Environment image sweb.env.x86_64.c795f4b88616b8462021ed:latest found for sympy__sympy-17630
Building instance image sweb.eval.x86_64.sympy__sympy-17630:latest for sympy__sympy-17630
2024-07-03 04:43:52,011 - INFO - Image sweb.eval.x86_64.sympy__sympy-17630:latest already exists, skipping build.
2024-07-03 04:43:52,011 - INFO - Creating container for sympy__sympy-17630...
2024-07-03 04:43:52,271 - INFO - Container for sympy__sympy-17630 created: af2aa47b81c253b70e31ef403c8599d9b93b14f62ab7eea6c50c38feddb3ab44
2024-07-03 04:43:52,419 - INFO - Container for sympy__sympy-17630 started: af2aa47b81c253b70e31ef403c8599d9b93b14f62ab7eea6c50c38feddb3ab44
2024-07-03 04:43:52,419 - INFO - Intermediate patch for sympy__sympy-17630 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_145181/model_name_managed_by_server/sympy__sympy-17630/patch.diff, now applying to container...
2024-07-03 04:43:52,552 - INFO - >>>>> Applied Patch:
Checking patch sympy/matrices/expressions/blockmatrix.py...
Applied patch sympy/matrices/expressions/blockmatrix.py cleanly.

2024-07-03 04:43:52,920 - INFO - Git diff before:
diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py
index 95302a05ca..8bda7f0e43 100644
--- a/sympy/matrices/expressions/blockmatrix.py
+++ b/sympy/matrices/expressions/blockmatrix.py
@@ -1,6 +1,6 @@
 from __future__ import print_function, division
 
-from sympy import ask, Q
+from sympy import ask, Q, Zero
 from sympy.core import Basic, Add
 from sympy.core.compatibility import range
 from sympy.strategies import typed, exhaust, condition, do_one, unpack
@@ -19,6 +19,7 @@
 from sympy.matrices.expressions.inverse import Inverse
 from sympy.matrices import Matrix, ShapeError
 from sympy.functions.elementary.complexes import re, im
+from sympy.core.numbers import Zero as SympyZero
 
 class BlockMatrix(MatrixExpr):
     """A BlockMatrix is a Matrix comprised of other matrices.
@@ -148,11 +149,11 @@ def blocks(self):
 
     @property
     def rowblocksizes(self):
-        return [self.blocks[i, 0].rows for i in range(self.blockshape[0])]
+        return [self.blocks[i, 0].rows if not isinstance(self.blocks[i, 0], Zero) else ZeroMatrix(1, 1).rows for i in range(self.blockshape[0])]
 
     @property
     def colblocksizes(self):
-        return [self.blocks[0, i].cols for i in range(self.blockshape[1])]
+        return [self.blocks[0, i].cols if not isinstance(self.blocks[0, i], Zero) else ZeroMatrix(self.blocks[0, i].shape[0], self.blocks[0, i].shape[1]).cols for i in range(self.blockshape[1])]
 
     def structurally_equal(self, other):
         return (isinstance(other, BlockMatrix)
2024-07-03 04:43:52,921 - INFO - Eval script for sympy__sympy-17630 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_145181/model_name_managed_by_server/sympy__sympy-17630/patch.diff, now applying to container...
2024-07-03 04:43:55,499 - INFO - Test output for sympy__sympy-17630 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_145181/model_name_managed_by_server/sympy__sympy-17630/test_output.txt
2024-07-03 04:43:55,541 - INFO - Git diff after:
diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py
index 95302a05ca..8bda7f0e43 100644
--- a/sympy/matrices/expressions/blockmatrix.py
+++ b/sympy/matrices/expressions/blockmatrix.py
@@ -1,6 +1,6 @@
 from __future__ import print_function, division
 
-from sympy import ask, Q
+from sympy import ask, Q, Zero
 from sympy.core import Basic, Add
 from sympy.core.compatibility import range
 from sympy.strategies import typed, exhaust, condition, do_one, unpack
@@ -19,6 +19,7 @@
 from sympy.matrices.expressions.inverse import Inverse
 from sympy.matrices import Matrix, ShapeError
 from sympy.functions.elementary.complexes import re, im
+from sympy.core.numbers import Zero as SympyZero
 
 class BlockMatrix(MatrixExpr):
     """A BlockMatrix is a Matrix comprised of other matrices.
@@ -148,11 +149,11 @@ def blocks(self):
 
     @property
     def rowblocksizes(self):
-        return [self.blocks[i, 0].rows for i in range(self.blockshape[0])]
+        return [self.blocks[i, 0].rows if not isinstance(self.blocks[i, 0], Zero) else ZeroMatrix(1, 1).rows for i in range(self.blockshape[0])]
 
     @property
     def colblocksizes(self):
-        return [self.blocks[0, i].cols for i in range(self.blockshape[1])]
+        return [self.blocks[0, i].cols if not isinstance(self.blocks[0, i], Zero) else ZeroMatrix(self.blocks[0, i].shape[0], self.blocks[0, i].shape[1]).cols for i in range(self.blockshape[1])]
 
     def structurally_equal(self, other):
         return (isinstance(other, BlockMatrix)
2024-07-03 04:43:55,541 - INFO - Grading answer for sympy__sympy-17630...
2024-07-03 04:43:55,542 - INFO - report: {'sympy__sympy-17630': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['test_issue_17624', 'test_zero_matrix_add']}, 'PASS_TO_PASS': {'success': [], 'failure': ['test_bc_matmul', 'test_bc_matadd', 'test_bc_transpose', 'test_bc_dist_diag', 'test_block_plus_ident', 'test_BlockMatrix', 'test_block_collapse_explicit_matrices', 'test_BlockMatrix_trace', 'test_BlockMatrix_Determinant', 'test_squareBlockMatrix', 'test_BlockDiagMatrix', 'test_blockcut', 'test_reblock_2x2', 'test_deblock', 'test_sort_key', 'test_matadd_sympify', 'test_matadd_of_matrices', 'test_doit_args', 'test_generic_identity']}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for sympy__sympy-17630: resolved: False
2024-07-03 04:43:55,542 - INFO - Attempting to stop container sweb.eval.sympy__sympy-17630.evaluation_145181...
2024-07-03 04:43:56,055 - INFO - Attempting to remove container sweb.eval.sympy__sympy-17630.evaluation_145181...
2024-07-03 04:43:56,102 - INFO - Container sweb.eval.sympy__sympy-17630.evaluation_145181 removed.
