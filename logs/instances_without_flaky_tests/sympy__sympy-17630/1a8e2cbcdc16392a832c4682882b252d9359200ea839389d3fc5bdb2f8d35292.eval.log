2024-07-03 04:35:37,530 - INFO - Environment image sweb.env.x86_64.c795f4b88616b8462021ed:latest found for sympy__sympy-17630
Building instance image sweb.eval.x86_64.sympy__sympy-17630:latest for sympy__sympy-17630
2024-07-03 04:35:37,532 - INFO - Image sweb.eval.x86_64.sympy__sympy-17630:latest already exists, skipping build.
2024-07-03 04:35:37,533 - INFO - Creating container for sympy__sympy-17630...
2024-07-03 04:35:38,031 - INFO - Container for sympy__sympy-17630 created: c9fc2095e6f472b31f915acbbc7b7981a52810fab0e74e030581bc01e68437ba
2024-07-03 04:35:38,176 - INFO - Container for sympy__sympy-17630 started: c9fc2095e6f472b31f915acbbc7b7981a52810fab0e74e030581bc01e68437ba
2024-07-03 04:35:38,176 - INFO - Intermediate patch for sympy__sympy-17630 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_144633/model_name_managed_by_server/sympy__sympy-17630/patch.diff, now applying to container...
2024-07-03 04:35:38,368 - INFO - >>>>> Applied Patch:
Checking patch sympy/matrices/expressions/blockmatrix.py...
Applied patch sympy/matrices/expressions/blockmatrix.py cleanly.

2024-07-03 04:35:38,858 - INFO - Git diff before:
diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py
index 95302a05ca..dd6f5e929b 100644
--- a/sympy/matrices/expressions/blockmatrix.py
+++ b/sympy/matrices/expressions/blockmatrix.py
@@ -76,57 +76,8 @@ class BlockMatrix(MatrixExpr):
     ========
     sympy.matrices.matrices.MatrixBase.irregular
     """
-    def __new__(cls, *args, **kwargs):
-        from sympy.matrices.immutable import ImmutableDenseMatrix
-        from sympy.utilities.iterables import is_sequence
-        isMat = lambda i: getattr(i, 'is_Matrix', False)
-        if len(args) != 1 or \
-                not is_sequence(args[0]) or \
-                len(set([isMat(r) for r in args[0]])) != 1:
-            raise ValueError(filldedent('''
-                expecting a sequence of 1 or more rows
-                containing Matrices.'''))
-        rows = args[0] if args else []
-        if not isMat(rows):
-            if rows and isMat(rows[0]):
-                rows = [rows]  # rows is not list of lists or []
-            # regularity check
-            # same number of matrices in each row
-            blocky = ok = len(set([len(r) for r in rows])) == 1
-            if ok:
-                # same number of rows for each matrix in a row
-                for r in rows:
-                    ok = len(set([i.rows for i in r])) == 1
-                    if not ok:
-                        break
-                blocky = ok
-                # same number of cols for each matrix in each col
-                for c in range(len(rows[0])):
-                    ok = len(set([rows[i][c].cols
-                        for i in range(len(rows))])) == 1
-                    if not ok:
-                        break
-            if not ok:
-                # same total cols in each row
-                ok = len(set([
-                    sum([i.cols for i in r]) for r in rows])) == 1
-                if blocky and ok:
-                    raise ValueError(filldedent('''
-                        Although this matrix is comprised of blocks,
-                        the blocks do not fill the matrix in a
-                        size-symmetric fashion. To create a full matrix
-                        from these arguments, pass them directly to
-                        Matrix.'''))
-                raise ValueError(filldedent('''
-                    When there are not the same number of rows in each
-                    row's matrices or there are not the same number of
-                    total columns in each row, the matrix is not a
-                    block matrix. If this matrix is known to consist of
-                    blocks fully filling a 2-D space then see
-                    Matrix.irregular.'''))
-        mat = ImmutableDenseMatrix(rows, evaluate=False)
-        obj = Basic.__new__(cls, mat)
-        return obj
+def __new__(cls, *mats):
+    return Basic.__new__(cls, *mats)
 
     @property
     def shape(self):
@@ -161,19 +112,22 @@ def structurally_equal(self, other):
             and self.rowblocksizes == other.rowblocksizes
             and self.colblocksizes == other.colblocksizes)
 
-    def _blockmul(self, other):
-        if (isinstance(other, BlockMatrix) and
-                self.colblocksizes == other.rowblocksizes):
-            return BlockMatrix(self.blocks*other.blocks)
+def _blockmul(self, other):
+    if (isinstance(other, BlockMatrix) and
+            self.colblocksizes == other.rowblocksizes):
+        result = self.blocks * other.blocks
+        # Convert any Zero objects to ZeroMatrix objects
+        result = result.applyfunc(lambda x: ZeroMatrix(*x.shape) if x.is_zero else x)
+        return BlockMatrix(result)
 
-        return self * other
+    return self * other
 
-    def _blockadd(self, other):
-        if (isinstance(other, BlockMatrix)
-                and self.structurally_equal(other)):
-            return BlockMatrix(self.blocks + other.blocks)
+def _blockadd(self, other):
+    if (isinstance(other, BlockMatrix)
+            and self.structurally_equal(other)):
+        return BlockMatrix(self.blocks + other.blocks)
 
-        return self + other
+    return self + other
 
     def _eval_transpose(self):
         # Flip all the individual matrices
2024-07-03 04:35:38,859 - INFO - Eval script for sympy__sympy-17630 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_144633/model_name_managed_by_server/sympy__sympy-17630/patch.diff, now applying to container...
2024-07-03 04:35:42,556 - INFO - Test output for sympy__sympy-17630 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_144633/model_name_managed_by_server/sympy__sympy-17630/test_output.txt
2024-07-03 04:35:42,596 - INFO - Git diff after:
diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py
index 95302a05ca..dd6f5e929b 100644
--- a/sympy/matrices/expressions/blockmatrix.py
+++ b/sympy/matrices/expressions/blockmatrix.py
@@ -76,57 +76,8 @@ class BlockMatrix(MatrixExpr):
     ========
     sympy.matrices.matrices.MatrixBase.irregular
     """
-    def __new__(cls, *args, **kwargs):
-        from sympy.matrices.immutable import ImmutableDenseMatrix
-        from sympy.utilities.iterables import is_sequence
-        isMat = lambda i: getattr(i, 'is_Matrix', False)
-        if len(args) != 1 or \
-                not is_sequence(args[0]) or \
-                len(set([isMat(r) for r in args[0]])) != 1:
-            raise ValueError(filldedent('''
-                expecting a sequence of 1 or more rows
-                containing Matrices.'''))
-        rows = args[0] if args else []
-        if not isMat(rows):
-            if rows and isMat(rows[0]):
-                rows = [rows]  # rows is not list of lists or []
-            # regularity check
-            # same number of matrices in each row
-            blocky = ok = len(set([len(r) for r in rows])) == 1
-            if ok:
-                # same number of rows for each matrix in a row
-                for r in rows:
-                    ok = len(set([i.rows for i in r])) == 1
-                    if not ok:
-                        break
-                blocky = ok
-                # same number of cols for each matrix in each col
-                for c in range(len(rows[0])):
-                    ok = len(set([rows[i][c].cols
-                        for i in range(len(rows))])) == 1
-                    if not ok:
-                        break
-            if not ok:
-                # same total cols in each row
-                ok = len(set([
-                    sum([i.cols for i in r]) for r in rows])) == 1
-                if blocky and ok:
-                    raise ValueError(filldedent('''
-                        Although this matrix is comprised of blocks,
-                        the blocks do not fill the matrix in a
-                        size-symmetric fashion. To create a full matrix
-                        from these arguments, pass them directly to
-                        Matrix.'''))
-                raise ValueError(filldedent('''
-                    When there are not the same number of rows in each
-                    row's matrices or there are not the same number of
-                    total columns in each row, the matrix is not a
-                    block matrix. If this matrix is known to consist of
-                    blocks fully filling a 2-D space then see
-                    Matrix.irregular.'''))
-        mat = ImmutableDenseMatrix(rows, evaluate=False)
-        obj = Basic.__new__(cls, mat)
-        return obj
+def __new__(cls, *mats):
+    return Basic.__new__(cls, *mats)
 
     @property
     def shape(self):
@@ -161,19 +112,22 @@ def structurally_equal(self, other):
             and self.rowblocksizes == other.rowblocksizes
             and self.colblocksizes == other.colblocksizes)
 
-    def _blockmul(self, other):
-        if (isinstance(other, BlockMatrix) and
-                self.colblocksizes == other.rowblocksizes):
-            return BlockMatrix(self.blocks*other.blocks)
+def _blockmul(self, other):
+    if (isinstance(other, BlockMatrix) and
+            self.colblocksizes == other.rowblocksizes):
+        result = self.blocks * other.blocks
+        # Convert any Zero objects to ZeroMatrix objects
+        result = result.applyfunc(lambda x: ZeroMatrix(*x.shape) if x.is_zero else x)
+        return BlockMatrix(result)
 
-        return self * other
+    return self * other
 
-    def _blockadd(self, other):
-        if (isinstance(other, BlockMatrix)
-                and self.structurally_equal(other)):
-            return BlockMatrix(self.blocks + other.blocks)
+def _blockadd(self, other):
+    if (isinstance(other, BlockMatrix)
+            and self.structurally_equal(other)):
+        return BlockMatrix(self.blocks + other.blocks)
 
-        return self + other
+    return self + other
 
     def _eval_transpose(self):
         # Flip all the individual matrices
2024-07-03 04:35:42,596 - INFO - Grading answer for sympy__sympy-17630...
2024-07-03 04:35:42,597 - INFO - report: {'sympy__sympy-17630': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['test_issue_17624', 'test_zero_matrix_add']}, 'PASS_TO_PASS': {'success': ['test_sort_key', 'test_matadd_sympify', 'test_matadd_of_matrices', 'test_doit_args', 'test_generic_identity'], 'failure': ['test_bc_matmul', 'test_bc_matadd', 'test_bc_transpose', 'test_bc_dist_diag', 'test_block_plus_ident', 'test_BlockMatrix', 'test_block_collapse_explicit_matrices', 'test_BlockMatrix_trace', 'test_BlockMatrix_Determinant', 'test_squareBlockMatrix', 'test_BlockDiagMatrix', 'test_blockcut', 'test_reblock_2x2', 'test_deblock']}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for sympy__sympy-17630: resolved: False
2024-07-03 04:35:42,597 - INFO - Attempting to stop container sweb.eval.sympy__sympy-17630.evaluation_144633...
2024-07-03 04:35:43,237 - INFO - Attempting to remove container sweb.eval.sympy__sympy-17630.evaluation_144633...
2024-07-03 04:35:43,293 - INFO - Container sweb.eval.sympy__sympy-17630.evaluation_144633 removed.
