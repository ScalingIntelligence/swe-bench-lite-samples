2024-07-03 04:17:52,034 - INFO - Environment image sweb.env.x86_64.c795f4b88616b8462021ed:latest found for sympy__sympy-22005
Building instance image sweb.eval.x86_64.sympy__sympy-22005:latest for sympy__sympy-22005
2024-07-03 04:17:52,035 - INFO - Image sweb.eval.x86_64.sympy__sympy-22005:latest already exists, skipping build.
2024-07-03 04:17:52,036 - INFO - Creating container for sympy__sympy-22005...
2024-07-03 04:17:52,661 - INFO - Container for sympy__sympy-22005 created: 68dc7914672dc581d719bf1c4c72defdd7a50036890d1ada67a4969ed2736898
2024-07-03 04:17:53,351 - INFO - Container for sympy__sympy-22005 started: 68dc7914672dc581d719bf1c4c72defdd7a50036890d1ada67a4969ed2736898
2024-07-03 04:17:53,352 - INFO - Intermediate patch for sympy__sympy-22005 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_143292/model_name_managed_by_server/sympy__sympy-22005/patch.diff, now applying to container...
2024-07-03 04:17:53,539 - INFO - >>>>> Applied Patch:
Checking patch sympy/solvers/polysys.py...
Applied patch sympy/solvers/polysys.py cleanly.

2024-07-03 04:17:54,150 - INFO - Git diff before:
diff --git a/sympy/solvers/polysys.py b/sympy/solvers/polysys.py
index b9809fd4e9..94724ca811 100644
--- a/sympy/solvers/polysys.py
+++ b/sympy/solvers/polysys.py
@@ -62,6 +62,75 @@ def solve_poly_system(seq, *gens, **args):
 
     return solve_generic(polys, opt)
 
+def _solve_reduced_system(system, gens, entry=False):
+    """Recursively solves reduced polynomial systems. """
+    if len(system) == len(gens) == 1:
+        zeros = list(roots(system[0], gens[-1]).keys())
+        return [(zero,) for zero in zeros]
+
+    basis = groebner(system, gens, polys=True)
+
+    if len(basis) == 1 and basis[0].is_ground:
+        if not entry:
+            return []
+        else:
+            return None
+
+    def _is_univariate(f):
+        """Returns True if 'f' is univariate in its last variable. """
+        for monom in f.monoms():
+            if any(monom[:-1]):
+                return False
+
+        return True
+
+    def _subs_root(f, gen, zero):
+        """Replace generator with a root so that the result is nice. """
+        p = f.as_expr({gen: zero})
+
+        if f.degree(gen) >= 2:
+            p = p.expand(deep=False)
+
+        return p
+
+    univariate = list(filter(_is_univariate, basis))
+
+    if len(univariate) == 1 and len(gens) > 1:
+        raise NotImplementedError(filldedent('''
+            only zero-dimensional systems supported (finite number of solutions)
+            '''))
+
+    gen = gens[-1]
+
+    zeros = list(roots(univariate[0].ltrim(gen)).keys())
+
+    if not zeros:
+        return []
+
+    if len(basis) == 1:
+        return [(zero,) for zero in zeros]
+
+    solutions = []
+
+    for zero in zeros:
+        new_system = []
+        new_gens = gens[:-1]
+
+        for b in basis[:-1]:
+            eq = _subs_root(b, gen, zero)
+
+            if eq is not S.Zero:
+                new_system.append(eq)
+
+        for solution in _solve_reduced_system(new_system, new_gens):
+            solutions.append(solution + (zero,))
+
+    if solutions and len(solutions[0]) != len(gens):
+        raise NotImplementedError(filldedent('''
+            only zero-dimensional systems supported (finite number of solutions)
+            '''))
+    return solutions
+
 
 def solve_biquadratic(f, g, opt):
     """Solve a system of two bivariate quadratic polynomial equations.
2024-07-03 04:17:54,163 - INFO - Eval script for sympy__sympy-22005 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_143292/model_name_managed_by_server/sympy__sympy-22005/patch.diff, now applying to container...
2024-07-03 04:18:02,653 - INFO - Test output for sympy__sympy-22005 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_143292/model_name_managed_by_server/sympy__sympy-22005/test_output.txt
2024-07-03 04:18:02,712 - INFO - Git diff after:
diff --git a/sympy/solvers/polysys.py b/sympy/solvers/polysys.py
index b9809fd4e9..94724ca811 100644
--- a/sympy/solvers/polysys.py
+++ b/sympy/solvers/polysys.py
@@ -62,6 +62,75 @@ def solve_poly_system(seq, *gens, **args):
 
     return solve_generic(polys, opt)
 
+def _solve_reduced_system(system, gens, entry=False):
+    """Recursively solves reduced polynomial systems. """
+    if len(system) == len(gens) == 1:
+        zeros = list(roots(system[0], gens[-1]).keys())
+        return [(zero,) for zero in zeros]
+
+    basis = groebner(system, gens, polys=True)
+
+    if len(basis) == 1 and basis[0].is_ground:
+        if not entry:
+            return []
+        else:
+            return None
+
+    def _is_univariate(f):
+        """Returns True if 'f' is univariate in its last variable. """
+        for monom in f.monoms():
+            if any(monom[:-1]):
+                return False
+
+        return True
+
+    def _subs_root(f, gen, zero):
+        """Replace generator with a root so that the result is nice. """
+        p = f.as_expr({gen: zero})
+
+        if f.degree(gen) >= 2:
+            p = p.expand(deep=False)
+
+        return p
+
+    univariate = list(filter(_is_univariate, basis))
+
+    if len(univariate) == 1 and len(gens) > 1:
+        raise NotImplementedError(filldedent('''
+            only zero-dimensional systems supported (finite number of solutions)
+            '''))
+
+    gen = gens[-1]
+
+    zeros = list(roots(univariate[0].ltrim(gen)).keys())
+
+    if not zeros:
+        return []
+
+    if len(basis) == 1:
+        return [(zero,) for zero in zeros]
+
+    solutions = []
+
+    for zero in zeros:
+        new_system = []
+        new_gens = gens[:-1]
+
+        for b in basis[:-1]:
+            eq = _subs_root(b, gen, zero)
+
+            if eq is not S.Zero:
+                new_system.append(eq)
+
+        for solution in _solve_reduced_system(new_system, new_gens):
+            solutions.append(solution + (zero,))
+
+    if solutions and len(solutions[0]) != len(gens):
+        raise NotImplementedError(filldedent('''
+            only zero-dimensional systems supported (finite number of solutions)
+            '''))
+    return solutions
+
 
 def solve_biquadratic(f, g, opt):
     """Solve a system of two bivariate quadratic polynomial equations.
2024-07-03 04:18:02,712 - INFO - Grading answer for sympy__sympy-22005...
2024-07-03 04:18:02,713 - INFO - report: {'sympy__sympy-22005': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['test_solve_poly_system']}, 'PASS_TO_PASS': {'success': ['test_solve_biquadratic', 'test_solve_triangulated'], 'failure': []}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for sympy__sympy-22005: resolved: False
2024-07-03 04:18:02,713 - INFO - Attempting to stop container sweb.eval.sympy__sympy-22005.evaluation_143292...
2024-07-03 04:18:03,179 - INFO - Attempting to remove container sweb.eval.sympy__sympy-22005.evaluation_143292...
2024-07-03 04:18:03,230 - INFO - Container sweb.eval.sympy__sympy-22005.evaluation_143292 removed.
