2024-07-03 02:33:03,029 - INFO - Environment image sweb.env.x86_64.aa92880033da20ca313928:latest found for scikit-learn__scikit-learn-14087
Building instance image sweb.eval.x86_64.scikit-learn__scikit-learn-14087:latest for scikit-learn__scikit-learn-14087
2024-07-03 02:33:03,031 - INFO - Image sweb.eval.x86_64.scikit-learn__scikit-learn-14087:latest already exists, skipping build.
2024-07-03 02:33:03,031 - INFO - Creating container for scikit-learn__scikit-learn-14087...
2024-07-03 02:33:03,547 - INFO - Container for scikit-learn__scikit-learn-14087 created: b0f31891b5388ecd0f9263992a0da8e300bb4ca962b644d085c2216101d34f84
2024-07-03 02:33:03,807 - INFO - Container for scikit-learn__scikit-learn-14087 started: b0f31891b5388ecd0f9263992a0da8e300bb4ca962b644d085c2216101d34f84
2024-07-03 02:33:03,807 - INFO - Intermediate patch for scikit-learn__scikit-learn-14087 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_136696/model_name_managed_by_server/scikit-learn__scikit-learn-14087/patch.diff, now applying to container...
2024-07-03 02:33:03,983 - INFO - >>>>> Applied Patch:
Checking patch sklearn/linear_model/logistic.py...
Applied patch sklearn/linear_model/logistic.py cleanly.

2024-07-03 02:33:04,289 - INFO - Git diff before:
diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py
index 1999f1dae..0bc7ee746 100644
--- a/sklearn/linear_model/logistic.py
+++ b/sklearn/linear_model/logistic.py
@@ -1933,6 +1933,78 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,
         self.random_state = random_state
         self.l1_ratios = l1_ratios
 
+    def fit(self, X, y, sample_weight=None):
+        """Fit the model according to the given training data.
+
+        Parameters
+        ----------
+        X : {array-like, sparse matrix}, shape (n_samples, n_features)
+            Training vector, where n_samples is the number of samples and
+            n_features is the number of features.
+
+        y : array-like, shape (n_samples,)
+            Target vector relative to X.
+
+        sample_weight : array-like, shape (n_samples,) optional
+            Array of weights that are assigned to individual samples.
+            If not provided, then each sample is given unit weight.
+
+        Returns
+        -------
+        self : object
+        """
+        solver = _check_solver(self.solver, self.penalty, self.dual)
+
+        if not isinstance(self.max_iter, numbers.Number) or self.max_iter < 0:
+            raise ValueError("Maximum number of iteration must be positive;"
+                             " got (max_iter=%r)" % self.max_iter)
+        if not isinstance(self.tol, numbers.Number) or self.tol < 0:
+            raise ValueError("Tolerance for stopping criteria must be "
+                             "positive; got (tol=%r)" % self.tol)
+        if self.penalty == 'elasticnet':
+            if self.l1_ratios is None or len(self.l1_ratios) == 0 or any(
+                    (not isinstance(l1_ratio, numbers.Number) or l1_ratio < 0
+                     or l1_ratio > 1) for l1_ratio in self.l1_ratios):
+                raise ValueError("l1_ratios must be a list of numbers between "
+                                 "0 and 1; got (l1_ratios=%r)" %
+                                 self.l1_ratios)
+            l1_ratios_ = self.l1_ratios
+        else:
+            if self.l1_ratios is not None:
+                warnings.warn("l1_ratios parameter is only used when penalty "
+                              "is 'elasticnet'. Got (penalty={})".format(
+                                  self.penalty))
+
+            l1_ratios_ = [None]
+
+        if self.penalty == 'none':
+            raise ValueError(
+                "penalty='none' is not useful and not supported by "
+                "LogisticRegressionCV."
+            )
+    def __init__(self, Cs=10, fit_intercept=True, cv=None, dual=False,
+                 penalty='l2', scoring=None, solver='lbfgs', tol=1e-4,
+                 max_iter=100, class_weight=None, n_jobs=None, verbose=0,
+                 refit=True, intercept_scaling=1., multi_class='auto',
+                 random_state=None, l1_ratios=None):
+        self.Cs = Cs
+        self.fit_intercept = fit_intercept
+        self.cv = cv
+        self.dual = dual
+        self.penalty = penalty
+        self.scoring = scoring
+        self.tol = tol
+        self.max_iter = max_iter
+        self.class_weight = class_weight
+        self.n_jobs = n_jobs
+        self.verbose = verbose
+        self.solver = solver
+        self.refit = refit
+        self.intercept_scaling = intercept_scaling
+        self.multi_class = multi_class
+        self.random_state = random_state
+        self.l1_ratios = l1_ratios
+
     def fit(self, X, y, sample_weight=None):
         """Fit the model according to the given training data.
 
@@ -2182,10 +2254,6 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,
 
                 best_indices_l1 = best_indices // len(self.Cs_)
                 self.l1_ratio_.append(np.mean(l1_ratios_[best_indices_l1]))
-
-            if multi_class == 'multinomial':
-                self.C_ = np.tile(self.C_, n_classes)
-                self.l1_ratio_ = np.tile(self.l1_ratio_, n_classes)
                 self.coef_ = w[:, :X.shape[1]]
                 if self.fit_intercept:
                     self.intercept_ = w[:, -1]
2024-07-03 02:33:04,289 - INFO - Eval script for scikit-learn__scikit-learn-14087 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_136696/model_name_managed_by_server/scikit-learn__scikit-learn-14087/patch.diff, now applying to container...
2024-07-03 02:33:08,366 - INFO - Test output for scikit-learn__scikit-learn-14087 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_136696/model_name_managed_by_server/scikit-learn__scikit-learn-14087/test_output.txt
2024-07-03 02:33:08,425 - INFO - Git diff after:
diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py
index 1999f1dae..0bc7ee746 100644
--- a/sklearn/linear_model/logistic.py
+++ b/sklearn/linear_model/logistic.py
@@ -1933,6 +1933,78 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,
         self.random_state = random_state
         self.l1_ratios = l1_ratios
 
+    def fit(self, X, y, sample_weight=None):
+        """Fit the model according to the given training data.
+
+        Parameters
+        ----------
+        X : {array-like, sparse matrix}, shape (n_samples, n_features)
+            Training vector, where n_samples is the number of samples and
+            n_features is the number of features.
+
+        y : array-like, shape (n_samples,)
+            Target vector relative to X.
+
+        sample_weight : array-like, shape (n_samples,) optional
+            Array of weights that are assigned to individual samples.
+            If not provided, then each sample is given unit weight.
+
+        Returns
+        -------
+        self : object
+        """
+        solver = _check_solver(self.solver, self.penalty, self.dual)
+
+        if not isinstance(self.max_iter, numbers.Number) or self.max_iter < 0:
+            raise ValueError("Maximum number of iteration must be positive;"
+                             " got (max_iter=%r)" % self.max_iter)
+        if not isinstance(self.tol, numbers.Number) or self.tol < 0:
+            raise ValueError("Tolerance for stopping criteria must be "
+                             "positive; got (tol=%r)" % self.tol)
+        if self.penalty == 'elasticnet':
+            if self.l1_ratios is None or len(self.l1_ratios) == 0 or any(
+                    (not isinstance(l1_ratio, numbers.Number) or l1_ratio < 0
+                     or l1_ratio > 1) for l1_ratio in self.l1_ratios):
+                raise ValueError("l1_ratios must be a list of numbers between "
+                                 "0 and 1; got (l1_ratios=%r)" %
+                                 self.l1_ratios)
+            l1_ratios_ = self.l1_ratios
+        else:
+            if self.l1_ratios is not None:
+                warnings.warn("l1_ratios parameter is only used when penalty "
+                              "is 'elasticnet'. Got (penalty={})".format(
+                                  self.penalty))
+
+            l1_ratios_ = [None]
+
+        if self.penalty == 'none':
+            raise ValueError(
+                "penalty='none' is not useful and not supported by "
+                "LogisticRegressionCV."
+            )
+    def __init__(self, Cs=10, fit_intercept=True, cv=None, dual=False,
+                 penalty='l2', scoring=None, solver='lbfgs', tol=1e-4,
+                 max_iter=100, class_weight=None, n_jobs=None, verbose=0,
+                 refit=True, intercept_scaling=1., multi_class='auto',
+                 random_state=None, l1_ratios=None):
+        self.Cs = Cs
+        self.fit_intercept = fit_intercept
+        self.cv = cv
+        self.dual = dual
+        self.penalty = penalty
+        self.scoring = scoring
+        self.tol = tol
+        self.max_iter = max_iter
+        self.class_weight = class_weight
+        self.n_jobs = n_jobs
+        self.verbose = verbose
+        self.solver = solver
+        self.refit = refit
+        self.intercept_scaling = intercept_scaling
+        self.multi_class = multi_class
+        self.random_state = random_state
+        self.l1_ratios = l1_ratios
+
     def fit(self, X, y, sample_weight=None):
         """Fit the model according to the given training data.
 
@@ -2182,10 +2254,6 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,
 
                 best_indices_l1 = best_indices // len(self.Cs_)
                 self.l1_ratio_.append(np.mean(l1_ratios_[best_indices_l1]))
-
-            if multi_class == 'multinomial':
-                self.C_ = np.tile(self.C_, n_classes)
-                self.l1_ratio_ = np.tile(self.l1_ratio_, n_classes)
                 self.coef_ = w[:, :X.shape[1]]
                 if self.fit_intercept:
                     self.intercept_ = w[:, -1]
2024-07-03 02:33:08,426 - INFO - Grading answer for scikit-learn__scikit-learn-14087...
2024-07-03 02:33:08,431 - INFO - report: {'scikit-learn__scikit-learn-14087': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['sklearn/linear_model/tests/test_logistic.py::test_LogisticRegressionCV_no_refit[ovr-l2]', 'sklearn/linear_model/tests/test_logistic.py::test_LogisticRegressionCV_no_refit[multinomial-l2]', 'sklearn/linear_model/tests/test_logistic.py::test_LogisticRegressionCV_no_refit[auto-l2]']}, 'PASS_TO_PASS': {'success': [], 'failure': ['sklearn/linear_model/tests/test_logistic.py::test_predict_2_classes', 'sklearn/linear_model/tests/test_logistic.py::test_error', 'sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_mock_scorer', 'sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_score_does_not_warn_by_default', 'sklearn/linear_model/tests/test_logistic.py::test_lr_liblinear_warning', 'sklearn/linear_model/tests/test_logistic.py::test_predict_3_classes', 'sklearn/linear_model/tests/test_logistic.py::test_predict_iris', 'sklearn/linear_model/tests/test_logistic.py::test_multinomial_validation[lbfgs]', 'sklearn/linear_model/tests/test_logistic.py::test_multinomial_validation[newton-cg]', 'sklearn/linear_model/tests/test_logistic.py::test_multinomial_validation[sag]', 'sklearn/linear_model/tests/test_logistic.py::test_multinomial_validation[saga]', 'sklearn/linear_model/tests/test_logistic.py::test_check_solver_option[LogisticRegression]', 'sklearn/linear_model/tests/test_logistic.py::test_check_solver_option[LogisticRegressionCV]', 'sklearn/linear_model/tests/test_logistic.py::test_multinomial_binary[lbfgs]', 'sklearn/linear_model/tests/test_logistic.py::test_multinomial_binary[newton-cg]', 'sklearn/linear_model/tests/test_logistic.py::test_multinomial_binary[sag]', 'sklearn/linear_model/tests/test_logistic.py::test_multinomial_binary[saga]', 'sklearn/linear_model/tests/test_logistic.py::test_multinomial_binary_probabilities', 'sklearn/linear_model/tests/test_logistic.py::test_sparsify', 'sklearn/linear_model/tests/test_logistic.py::test_inconsistent_input', 'sklearn/linear_model/tests/test_logistic.py::test_write_parameters', 'sklearn/linear_model/tests/test_logistic.py::test_nan', 'sklearn/linear_model/tests/test_logistic.py::test_consistency_path', 'sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_path_convergence_fail', 'sklearn/linear_model/tests/test_logistic.py::test_liblinear_dual_random_state', 'sklearn/linear_model/tests/test_logistic.py::test_logistic_loss_and_grad', 'sklearn/linear_model/tests/test_logistic.py::test_logistic_grad_hess', 'sklearn/linear_model/tests/test_logistic.py::test_logistic_cv', 'sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[accuracy-multiclass_agg_list0]', 'sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[precision-multiclass_agg_list1]', 'sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[f1-multiclass_agg_list2]', 'sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[neg_log_loss-multiclass_agg_list3]', 'sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_multinomial_score[recall-multiclass_agg_list4]', 'sklearn/linear_model/tests/test_logistic.py::test_multinomial_logistic_regression_string_inputs', 'sklearn/linear_model/tests/test_logistic.py::test_logistic_cv_sparse', 'sklearn/linear_model/tests/test_logistic.py::test_intercept_logistic_helper', 'sklearn/linear_model/tests/test_logistic.py::test_ovr_multinomial_iris', 'sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_solvers', 'sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_solvers_multiclass', 'sklearn/linear_model/tests/test_logistic.py::test_logistic_regressioncv_class_weights', 'sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_sample_weights', 'sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_class_weights', 'sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multinomial', 'sklearn/linear_model/tests/test_logistic.py::test_multinomial_grad_hess', 'sklearn/linear_model/tests/test_logistic.py::test_liblinear_decision_function_zero', 'sklearn/linear_model/tests/test_logistic.py::test_liblinear_logregcv_sparse', 'sklearn/linear_model/tests/test_logistic.py::test_saga_sparse', 'sklearn/linear_model/tests/test_logistic.py::test_logreg_intercept_scaling', 'sklearn/linear_model/tests/test_logistic.py::test_logreg_intercept_scaling_zero', 'sklearn/linear_model/tests/test_logistic.py::test_logreg_l1', 'sklearn/linear_model/tests/test_logistic.py::test_logreg_l1_sparse_data', 'sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_cv_refit[l1-42]', 'sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_cv_refit[l2-42]', 'sklearn/linear_model/tests/test_logistic.py::test_logreg_predict_proba_multinomial', 'sklearn/linear_model/tests/test_logistic.py::test_max_iter', 'sklearn/linear_model/tests/test_logistic.py::test_n_iter[newton-cg]', 'sklearn/linear_model/tests/test_logistic.py::test_n_iter[liblinear]', 'sklearn/linear_model/tests/test_logistic.py::test_n_iter[sag]', 'sklearn/linear_model/tests/test_logistic.py::test_n_iter[saga]', 'sklearn/linear_model/tests/test_logistic.py::test_n_iter[lbfgs]', 'sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-True-newton-cg]', 'sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-True-sag]', 'sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-True-saga]', 'sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-True-lbfgs]', 'sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-False-newton-cg]', 'sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-False-sag]', 'sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-False-saga]', 'sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-True-False-lbfgs]', 'sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-newton-cg]', 'sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-sag]', 'sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-saga]', 'sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-True-lbfgs]', 'sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-False-newton-cg]', 'sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-False-sag]', 'sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-False-saga]', 'sklearn/linear_model/tests/test_logistic.py::test_warm_start[ovr-False-False-lbfgs]', 'sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-True-newton-cg]', 'sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-True-sag]', 'sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-True-saga]', 'sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-True-lbfgs]', 'sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-False-newton-cg]', 'sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-False-sag]', 'sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-False-saga]', 'sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-True-False-lbfgs]', 'sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-True-newton-cg]', 'sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-True-sag]', 'sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-True-saga]', 'sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-True-lbfgs]', 'sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-False-newton-cg]', 'sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-False-sag]', 'sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-False-saga]', 'sklearn/linear_model/tests/test_logistic.py::test_warm_start[multinomial-False-False-lbfgs]', 'sklearn/linear_model/tests/test_logistic.py::test_saga_vs_liblinear', 'sklearn/linear_model/tests/test_logistic.py::test_dtype_match[newton-cg-ovr]', 'sklearn/linear_model/tests/test_logistic.py::test_dtype_match[newton-cg-multinomial]', 'sklearn/linear_model/tests/test_logistic.py::test_dtype_match[saga-ovr]', 'sklearn/linear_model/tests/test_logistic.py::test_dtype_match[saga-multinomial]', 'sklearn/linear_model/tests/test_logistic.py::test_warm_start_converge_LR', 'sklearn/linear_model/tests/test_logistic.py::test_elastic_net_coeffs', 'sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l1-1-0.001]', 'sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l1-1-0.1]', 'sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l1-1-1]', 'sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l1-1-10]', 'sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l1-1-100]', 'sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l1-1-1000]', 'sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l1-1-1000000.0]', 'sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l2-0-0.001]', 'sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l2-0-0.1]', 'sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l2-0-1]', 'sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l2-0-10]', 'sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l2-0-100]', 'sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l2-0-1000]', 'sklearn/linear_model/tests/test_logistic.py::test_elastic_net_l1_l2_equivalence[l2-0-1000000.0]', 'sklearn/linear_model/tests/test_logistic.py::test_elastic_net_vs_l1_l2[0.001]', 'sklearn/linear_model/tests/test_logistic.py::test_elastic_net_vs_l1_l2[1]', 'sklearn/linear_model/tests/test_logistic.py::test_elastic_net_vs_l1_l2[100]', 'sklearn/linear_model/tests/test_logistic.py::test_elastic_net_vs_l1_l2[1000000.0]', 'sklearn/linear_model/tests/test_logistic.py::test_LogisticRegression_elastic_net_objective[0.1-0.001]', 'sklearn/linear_model/tests/test_logistic.py::test_LogisticRegression_elastic_net_objective[0.1-0.046415888336127795]', 'sklearn/linear_model/tests/test_logistic.py::test_LogisticRegression_elastic_net_objective[0.1-2.1544346900318843]', 'sklearn/linear_model/tests/test_logistic.py::test_LogisticRegression_elastic_net_objective[0.1-100.0]', 'sklearn/linear_model/tests/test_logistic.py::test_LogisticRegression_elastic_net_objective[0.5-0.001]', 'sklearn/linear_model/tests/test_logistic.py::test_LogisticRegression_elastic_net_objective[0.5-0.046415888336127795]', 'sklearn/linear_model/tests/test_logistic.py::test_LogisticRegression_elastic_net_objective[0.5-2.1544346900318843]', 'sklearn/linear_model/tests/test_logistic.py::test_LogisticRegression_elastic_net_objective[0.5-100.0]', 'sklearn/linear_model/tests/test_logistic.py::test_LogisticRegression_elastic_net_objective[0.9-0.001]', 'sklearn/linear_model/tests/test_logistic.py::test_LogisticRegression_elastic_net_objective[0.9-0.046415888336127795]', 'sklearn/linear_model/tests/test_logistic.py::test_LogisticRegression_elastic_net_objective[0.9-2.1544346900318843]', 'sklearn/linear_model/tests/test_logistic.py::test_LogisticRegression_elastic_net_objective[0.9-100.0]', 'sklearn/linear_model/tests/test_logistic.py::test_LogisticRegressionCV_GridSearchCV_elastic_net[ovr]', 'sklearn/linear_model/tests/test_logistic.py::test_LogisticRegressionCV_GridSearchCV_elastic_net[multinomial]', 'sklearn/linear_model/tests/test_logistic.py::test_LogisticRegressionCV_GridSearchCV_elastic_net_ovr', 'sklearn/linear_model/tests/test_logistic.py::test_LogisticRegressionCV_no_refit[ovr-elasticnet]', 'sklearn/linear_model/tests/test_logistic.py::test_LogisticRegressionCV_no_refit[multinomial-elasticnet]', 'sklearn/linear_model/tests/test_logistic.py::test_LogisticRegressionCV_no_refit[auto-elasticnet]', 'sklearn/linear_model/tests/test_logistic.py::test_LogisticRegressionCV_elasticnet_attribute_shapes', 'sklearn/linear_model/tests/test_logistic.py::test_l1_ratio_param[-1]', 'sklearn/linear_model/tests/test_logistic.py::test_l1_ratio_param[2]', 'sklearn/linear_model/tests/test_logistic.py::test_l1_ratio_param[None]', 'sklearn/linear_model/tests/test_logistic.py::test_l1_ratio_param[something_wrong]', 'sklearn/linear_model/tests/test_logistic.py::test_l1_ratios_param[l1_ratios0]', 'sklearn/linear_model/tests/test_logistic.py::test_l1_ratios_param[l1_ratios1]', 'sklearn/linear_model/tests/test_logistic.py::test_l1_ratios_param[None]', 'sklearn/linear_model/tests/test_logistic.py::test_l1_ratios_param[something_wrong]', 'sklearn/linear_model/tests/test_logistic.py::test_elastic_net_versus_sgd[0.1-0.001]', 'sklearn/linear_model/tests/test_logistic.py::test_elastic_net_versus_sgd[0.1-0.046415888336127795]', 'sklearn/linear_model/tests/test_logistic.py::test_elastic_net_versus_sgd[0.1-2.1544346900318843]', 'sklearn/linear_model/tests/test_logistic.py::test_elastic_net_versus_sgd[0.1-100.0]', 'sklearn/linear_model/tests/test_logistic.py::test_elastic_net_versus_sgd[0.5-0.001]', 'sklearn/linear_model/tests/test_logistic.py::test_elastic_net_versus_sgd[0.5-0.046415888336127795]', 'sklearn/linear_model/tests/test_logistic.py::test_elastic_net_versus_sgd[0.5-2.1544346900318843]', 'sklearn/linear_model/tests/test_logistic.py::test_elastic_net_versus_sgd[0.5-100.0]', 'sklearn/linear_model/tests/test_logistic.py::test_elastic_net_versus_sgd[0.9-0.001]', 'sklearn/linear_model/tests/test_logistic.py::test_elastic_net_versus_sgd[0.9-0.046415888336127795]', 'sklearn/linear_model/tests/test_logistic.py::test_elastic_net_versus_sgd[0.9-2.1544346900318843]', 'sklearn/linear_model/tests/test_logistic.py::test_elastic_net_versus_sgd[0.9-100.0]', 'sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_path_coefs_multinomial', 'sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[liblinear-est0]', 'sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[liblinear-est1]', 'sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[lbfgs-est0]', 'sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[lbfgs-est1]', 'sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[newton-cg-est0]', 'sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[newton-cg-est1]', 'sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[sag-est0]', 'sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[sag-est1]', 'sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[saga-est0]', 'sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_multi_class_auto[saga-est1]', 'sklearn/linear_model/tests/test_logistic.py::test_logistic_regression_path_deprecation', 'sklearn/linear_model/tests/test_logistic.py::test_penalty_none[lbfgs]', 'sklearn/linear_model/tests/test_logistic.py::test_penalty_none[newton-cg]', 'sklearn/linear_model/tests/test_logistic.py::test_penalty_none[sag]', 'sklearn/linear_model/tests/test_logistic.py::test_penalty_none[saga]']}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for scikit-learn__scikit-learn-14087: resolved: False
2024-07-03 02:33:08,432 - INFO - Attempting to stop container sweb.eval.scikit-learn__scikit-learn-14087.evaluation_136696...
2024-07-03 02:33:09,006 - INFO - Attempting to remove container sweb.eval.scikit-learn__scikit-learn-14087.evaluation_136696...
2024-07-03 02:33:09,043 - INFO - Container sweb.eval.scikit-learn__scikit-learn-14087.evaluation_136696 removed.
