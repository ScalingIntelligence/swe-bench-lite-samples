2024-07-03 20:26:16,950 - INFO - Environment image sweb.env.x86_64.a0efca7a0fe6719dbf65c2:latest found for mwaskom__seaborn-3010
Building instance image sweb.eval.x86_64.mwaskom__seaborn-3010:latest for mwaskom__seaborn-3010
2024-07-03 20:26:16,952 - INFO - Image sweb.eval.x86_64.mwaskom__seaborn-3010:latest already exists, skipping build.
2024-07-03 20:26:16,953 - INFO - Creating container for mwaskom__seaborn-3010...
2024-07-03 20:26:17,826 - INFO - Container for mwaskom__seaborn-3010 created: 1723ee44ef0e307b27fa71fcf9de6e15751248404fd6fb709a3e2a6a435f7906
2024-07-03 20:26:57,950 - INFO - Container for mwaskom__seaborn-3010 started: 1723ee44ef0e307b27fa71fcf9de6e15751248404fd6fb709a3e2a6a435f7906
2024-07-03 20:26:57,966 - INFO - Intermediate patch for mwaskom__seaborn-3010 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_198372/model_name_managed_by_server/mwaskom__seaborn-3010/patch.diff, now applying to container...
2024-07-03 20:26:59,861 - INFO - >>>>> Applied Patch:
Checking patch seaborn/_stats/regression.py...
Applied patch seaborn/_stats/regression.py cleanly.

2024-07-03 20:27:01,421 - INFO - Git diff before:
diff --git a/seaborn/_stats/regression.py b/seaborn/_stats/regression.py
index 7b7ddc8d..9caa15f4 100644
--- a/seaborn/_stats/regression.py
+++ b/seaborn/_stats/regression.py
@@ -19,19 +19,23 @@ class PolyFit(Stat):
     order: int = 2
     gridsize: int = 100
 
-    def _fit_predict(self, data):
-
-        x = data["x"]
-        y = data["y"]
-        if x.nunique() <= self.order:
-            # TODO warn?
-            xx = yy = []
-        else:
-            p = np.polyfit(x, y, self.order)
-            xx = np.linspace(x.min(), x.max(), self.gridsize)
-            yy = np.polyval(p, xx)
-
-        return pd.DataFrame(dict(x=xx, y=yy))
+def _fit_predict(self, data):
+
+    x = data["x"]
+    y = data["y"]
+    # Filter out rows with missing values in the 'x' or 'y' columns
+    not_na = pd.notnull(x) & pd.notnull(y)
+    x = x[not_na]
+    y = y[not_na]
+    if x.nunique() <= self.order:
+        # TODO warn?
+        xx = yy = []
+    else:
+        p = np.polyfit(x, y, self.order)
+        xx = np.linspace(x.min(), x.max(), self.gridsize)
+        yy = np.polyval(p, xx)
+
+    return pd.DataFrame(dict(x=xx, y=yy))
 
     # TODO we should have a way of identifying the method that will be applied
     # and then only define __call__ on a base-class of stats with this pattern
2024-07-03 20:27:01,426 - INFO - Eval script for mwaskom__seaborn-3010 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_198372/model_name_managed_by_server/mwaskom__seaborn-3010/patch.diff, now applying to container...
2024-07-03 20:27:35,638 - INFO - Test output for mwaskom__seaborn-3010 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_198372/model_name_managed_by_server/mwaskom__seaborn-3010/test_output.txt
2024-07-03 20:27:35,876 - INFO - Git diff after:
diff --git a/seaborn/_stats/regression.py b/seaborn/_stats/regression.py
index 7b7ddc8d..9caa15f4 100644
--- a/seaborn/_stats/regression.py
+++ b/seaborn/_stats/regression.py
@@ -19,19 +19,23 @@ class PolyFit(Stat):
     order: int = 2
     gridsize: int = 100
 
-    def _fit_predict(self, data):
-
-        x = data["x"]
-        y = data["y"]
-        if x.nunique() <= self.order:
-            # TODO warn?
-            xx = yy = []
-        else:
-            p = np.polyfit(x, y, self.order)
-            xx = np.linspace(x.min(), x.max(), self.gridsize)
-            yy = np.polyval(p, xx)
-
-        return pd.DataFrame(dict(x=xx, y=yy))
+def _fit_predict(self, data):
+
+    x = data["x"]
+    y = data["y"]
+    # Filter out rows with missing values in the 'x' or 'y' columns
+    not_na = pd.notnull(x) & pd.notnull(y)
+    x = x[not_na]
+    y = y[not_na]
+    if x.nunique() <= self.order:
+        # TODO warn?
+        xx = yy = []
+    else:
+        p = np.polyfit(x, y, self.order)
+        xx = np.linspace(x.min(), x.max(), self.gridsize)
+        yy = np.polyval(p, xx)
+
+    return pd.DataFrame(dict(x=xx, y=yy))
 
     # TODO we should have a way of identifying the method that will be applied
     # and then only define __call__ on a base-class of stats with this pattern
2024-07-03 20:27:35,876 - INFO - Grading answer for mwaskom__seaborn-3010...
2024-07-03 20:27:35,877 - INFO - report: {'mwaskom__seaborn-3010': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['tests/_stats/test_regression.py::TestPolyFit::test_missing_data']}, 'PASS_TO_PASS': {'success': [], 'failure': ['tests/_stats/test_regression.py::TestPolyFit::test_no_grouper', 'tests/_stats/test_regression.py::TestPolyFit::test_one_grouper']}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for mwaskom__seaborn-3010: resolved: False
2024-07-03 20:27:35,877 - INFO - Attempting to stop container sweb.eval.mwaskom__seaborn-3010.evaluation_198372...
2024-07-03 20:28:24,788 - INFO - Attempting to remove container sweb.eval.mwaskom__seaborn-3010.evaluation_198372...
2024-07-03 20:28:25,515 - INFO - Container sweb.eval.mwaskom__seaborn-3010.evaluation_198372 removed.
