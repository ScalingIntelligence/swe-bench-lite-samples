2024-07-03 14:27:24,359 - INFO - Environment image sweb.env.x86_64.aa92880033da20ca313928:latest found for scikit-learn__scikit-learn-14092
Building instance image sweb.eval.x86_64.scikit-learn__scikit-learn-14092:latest for scikit-learn__scikit-learn-14092
2024-07-03 14:27:24,360 - INFO - Image sweb.eval.x86_64.scikit-learn__scikit-learn-14092:latest already exists, skipping build.
2024-07-03 14:27:24,361 - INFO - Creating container for scikit-learn__scikit-learn-14092...
2024-07-03 14:27:30,576 - INFO - Container for scikit-learn__scikit-learn-14092 created: 4df31fdb9adbc48293e39d9df6f4d7e6c23ac2f5544ae49cd102c352b1b56f1a
2024-07-03 14:27:33,914 - INFO - Container for scikit-learn__scikit-learn-14092 started: 4df31fdb9adbc48293e39d9df6f4d7e6c23ac2f5544ae49cd102c352b1b56f1a
2024-07-03 14:27:33,915 - INFO - Intermediate patch for scikit-learn__scikit-learn-14092 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_170033/model_name_managed_by_server/scikit-learn__scikit-learn-14092/patch.diff, now applying to container...
2024-07-03 14:27:34,750 - INFO - >>>>> Applied Patch:
Checking patch sklearn/neighbors/nca.py...
Applied patch sklearn/neighbors/nca.py cleanly.

2024-07-03 14:27:35,251 - INFO - Git diff before:
diff --git a/sklearn/neighbors/nca.py b/sklearn/neighbors/nca.py
index 1d278b6e1..1110e19ff 100644
--- a/sklearn/neighbors/nca.py
+++ b/sklearn/neighbors/nca.py
@@ -259,51 +259,42 @@ class NeighborhoodComponentsAnalysis(BaseEstimator, TransformerMixin):
 
         return np.dot(X, self.components_.T)
 
-    def _validate_params(self, X, y):
-        """Validate parameters as soon as :meth:`fit` is called.
-
-        Parameters
-        ----------
-        X : array-like, shape (n_samples, n_features)
-            The training samples.
-
-        y : array-like, shape (n_samples,)
-            The corresponding training labels.
-
-        Returns
-        -------
-        X : array, shape (n_samples, n_features)
-            The validated training samples.
-
-        y : array, shape (n_samples,)
-            The validated training labels, encoded to be integers in
-            the range(0, n_classes).
-
-        init : string or numpy array of shape (n_features_a, n_features_b)
-            The validated initialization of the linear transformation.
-
-        Raises
-        -------
-        TypeError
-            If a parameter is not an instance of the desired type.
-
-        ValueError
-            If a parameter's value violates its legal value range or if the
-            combination of two or more given parameters is incompatible.
-        """
-
         # Validate the inputs X and y, and converts y to numerical classes.
         X, y = check_X_y(X, y, ensure_min_samples=2)
         check_classification_targets(y)
-        y = LabelEncoder().fit_transform(y)
+        check_scalar(self.tol, 'tol', (float, int, np.int64, int), 0.)
+        check_scalar(self.n_components, 'n_components', (int, np.int64), 1)
+
+        if self.n_components > X.shape[1]:
+            raise ValueError('The preferred dimensionality of the '
+                             'projected space `n_components` ({}) cannot '
+                             'be greater than the given data '
+                             'dimensionality ({})!'
+                             .format(self.n_components, X.shape[1]))
 
-        # Check the preferred dimensionality of the projected space
-        if self.n_components is not None:
-            check_scalar(self.n_components, 'n_components', int, 1)
+        # If warm_start is enabled, check that the inputs are consistent
+        check_scalar(self.warm_start, 'warm_start', bool)
+        if self.warm_start and hasattr(self, 'components_'):
+            if self.components_.shape[1] != X.shape[1]:
+                raise ValueError('The new inputs dimensionality ({}) does not '
+                                 'match the input dimensionality of the '
+                                 'previously learned transformation ({}).'
+                                 .format(X.shape[1],
+                                         self.components_.shape[1]))
+
+        check_scalar(self.max_iter, 'max_iter', int, 1)
+        check_scalar(self.tol, 'tol', (float, int), 0.)
+        check_scalar(self.verbose, 'verbose', int, 0)
+
+        if self.callback is not None:
+            if not callable(self.callback):
+                raise ValueError('`callback` is not callable.')
+check_scalar(self.tol, 'tol', (float, int), 0.)
+check_scalar(self.n_components, 'n_components', (int, np.int64), 1)
 
-            if self.n_components > X.shape[1]:
-                raise ValueError('The preferred dimensionality of the '
-                                 'projected space `n_components` ({}) cannot '
+if self.n_components > X.shape[1]:
+    raise ValueError('The preferred dimensionality of the '
+                     'projected space `n_components` ({}) cannot '
                                  'be greater than the given data '
                                  'dimensionality ({})!'
                                  .format(self.n_components, X.shape[1]))
2024-07-03 14:27:35,293 - INFO - Eval script for scikit-learn__scikit-learn-14092 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_170033/model_name_managed_by_server/scikit-learn__scikit-learn-14092/patch.diff, now applying to container...
2024-07-03 14:27:45,331 - INFO - Test output for scikit-learn__scikit-learn-14092 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_170033/model_name_managed_by_server/scikit-learn__scikit-learn-14092/test_output.txt
2024-07-03 14:27:45,384 - INFO - Git diff after:
diff --git a/sklearn/neighbors/nca.py b/sklearn/neighbors/nca.py
index 1d278b6e1..1110e19ff 100644
--- a/sklearn/neighbors/nca.py
+++ b/sklearn/neighbors/nca.py
@@ -259,51 +259,42 @@ class NeighborhoodComponentsAnalysis(BaseEstimator, TransformerMixin):
 
         return np.dot(X, self.components_.T)
 
-    def _validate_params(self, X, y):
-        """Validate parameters as soon as :meth:`fit` is called.
-
-        Parameters
-        ----------
-        X : array-like, shape (n_samples, n_features)
-            The training samples.
-
-        y : array-like, shape (n_samples,)
-            The corresponding training labels.
-
-        Returns
-        -------
-        X : array, shape (n_samples, n_features)
-            The validated training samples.
-
-        y : array, shape (n_samples,)
-            The validated training labels, encoded to be integers in
-            the range(0, n_classes).
-
-        init : string or numpy array of shape (n_features_a, n_features_b)
-            The validated initialization of the linear transformation.
-
-        Raises
-        -------
-        TypeError
-            If a parameter is not an instance of the desired type.
-
-        ValueError
-            If a parameter's value violates its legal value range or if the
-            combination of two or more given parameters is incompatible.
-        """
-
         # Validate the inputs X and y, and converts y to numerical classes.
         X, y = check_X_y(X, y, ensure_min_samples=2)
         check_classification_targets(y)
-        y = LabelEncoder().fit_transform(y)
+        check_scalar(self.tol, 'tol', (float, int, np.int64, int), 0.)
+        check_scalar(self.n_components, 'n_components', (int, np.int64), 1)
+
+        if self.n_components > X.shape[1]:
+            raise ValueError('The preferred dimensionality of the '
+                             'projected space `n_components` ({}) cannot '
+                             'be greater than the given data '
+                             'dimensionality ({})!'
+                             .format(self.n_components, X.shape[1]))
 
-        # Check the preferred dimensionality of the projected space
-        if self.n_components is not None:
-            check_scalar(self.n_components, 'n_components', int, 1)
+        # If warm_start is enabled, check that the inputs are consistent
+        check_scalar(self.warm_start, 'warm_start', bool)
+        if self.warm_start and hasattr(self, 'components_'):
+            if self.components_.shape[1] != X.shape[1]:
+                raise ValueError('The new inputs dimensionality ({}) does not '
+                                 'match the input dimensionality of the '
+                                 'previously learned transformation ({}).'
+                                 .format(X.shape[1],
+                                         self.components_.shape[1]))
+
+        check_scalar(self.max_iter, 'max_iter', int, 1)
+        check_scalar(self.tol, 'tol', (float, int), 0.)
+        check_scalar(self.verbose, 'verbose', int, 0)
+
+        if self.callback is not None:
+            if not callable(self.callback):
+                raise ValueError('`callback` is not callable.')
+check_scalar(self.tol, 'tol', (float, int), 0.)
+check_scalar(self.n_components, 'n_components', (int, np.int64), 1)
 
-            if self.n_components > X.shape[1]:
-                raise ValueError('The preferred dimensionality of the '
-                                 'projected space `n_components` ({}) cannot '
+if self.n_components > X.shape[1]:
+    raise ValueError('The preferred dimensionality of the '
+                     'projected space `n_components` ({}) cannot '
                                  'be greater than the given data '
                                  'dimensionality ({})!'
                                  .format(self.n_components, X.shape[1]))
2024-07-03 14:27:45,384 - INFO - Grading answer for scikit-learn__scikit-learn-14092...
2024-07-03 14:27:45,387 - INFO - report: {'scikit-learn__scikit-learn-14092': {'patch_is_None': False, 'patch_exists': True, 'patch_successfully_applied': True, 'resolved': False, 'tests_status': {'FAIL_TO_PASS': {'success': [], 'failure': ['sklearn/neighbors/tests/test_nca.py::test_parameters_valid_types[n_components-value0]', 'sklearn/neighbors/tests/test_nca.py::test_parameters_valid_types[max_iter-value1]', 'sklearn/neighbors/tests/test_nca.py::test_parameters_valid_types[tol-value2]']}, 'PASS_TO_PASS': {'success': [], 'failure': ['sklearn/neighbors/tests/test_nca.py::test_simple_example', 'sklearn/neighbors/tests/test_nca.py::test_toy_example_collapse_points', 'sklearn/neighbors/tests/test_nca.py::test_finite_differences', 'sklearn/neighbors/tests/test_nca.py::test_params_validation', 'sklearn/neighbors/tests/test_nca.py::test_transformation_dimensions', 'sklearn/neighbors/tests/test_nca.py::test_n_components', 'sklearn/neighbors/tests/test_nca.py::test_init_transformation', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-5-3-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-5-3-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-5-3-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-5-3-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-5-5-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-5-5-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-5-5-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-5-5-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-5-7-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-5-7-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-5-7-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-5-7-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-5-11-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-5-11-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-5-11-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-5-11-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-7-3-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-7-3-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-7-3-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-7-3-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-7-5-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-7-5-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-7-5-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-7-5-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-7-7-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-7-7-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-7-7-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-7-7-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-7-11-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-7-11-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-7-11-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-7-11-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-11-3-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-11-3-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-11-3-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-11-3-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-11-5-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-11-5-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-11-5-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-11-5-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-11-7-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-11-7-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-11-7-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-11-7-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-11-11-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-11-11-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-11-11-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[3-11-11-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-5-3-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-5-3-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-5-3-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-5-3-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-5-5-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-5-5-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-5-5-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-5-5-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-5-7-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-5-7-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-5-7-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-5-7-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-5-11-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-5-11-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-5-11-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-5-11-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-7-3-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-7-3-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-7-3-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-7-3-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-7-5-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-7-5-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-7-5-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-7-5-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-7-7-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-7-7-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-7-7-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-7-7-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-7-11-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-7-11-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-7-11-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-7-11-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-11-3-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-11-3-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-11-3-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-11-3-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-11-5-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-11-5-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-11-5-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-11-5-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-11-7-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-11-7-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-11-7-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-11-7-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-11-11-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-11-11-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-11-11-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[5-11-11-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-5-3-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-5-3-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-5-3-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-5-3-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-5-5-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-5-5-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-5-5-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-5-5-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-5-7-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-5-7-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-5-7-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-5-7-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-5-11-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-5-11-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-5-11-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-5-11-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-7-3-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-7-3-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-7-3-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-7-3-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-7-5-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-7-5-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-7-5-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-7-5-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-7-7-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-7-7-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-7-7-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-7-7-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-7-11-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-7-11-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-7-11-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-7-11-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-11-3-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-11-3-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-11-3-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-11-3-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-11-5-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-11-5-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-11-5-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-11-5-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-11-7-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-11-7-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-11-7-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-11-7-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-11-11-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-11-11-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-11-11-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[7-11-11-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-5-3-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-5-3-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-5-3-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-5-3-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-5-5-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-5-5-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-5-5-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-5-5-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-5-7-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-5-7-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-5-7-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-5-7-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-5-11-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-5-11-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-5-11-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-5-11-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-7-3-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-7-3-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-7-3-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-7-3-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-7-5-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-7-5-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-7-5-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-7-5-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-7-7-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-7-7-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-7-7-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-7-7-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-7-11-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-7-11-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-7-11-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-7-11-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-11-3-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-11-3-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-11-3-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-11-3-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-11-5-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-11-5-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-11-5-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-11-5-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-11-7-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-11-7-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-11-7-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-11-7-11]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-11-11-3]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-11-11-5]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-11-11-7]', 'sklearn/neighbors/tests/test_nca.py::test_auto_init[11-11-11-11]', 'sklearn/neighbors/tests/test_nca.py::test_warm_start_validation', 'sklearn/neighbors/tests/test_nca.py::test_warm_start_effectiveness', 'sklearn/neighbors/tests/test_nca.py::test_verbose[pca]', 'sklearn/neighbors/tests/test_nca.py::test_verbose[lda]', 'sklearn/neighbors/tests/test_nca.py::test_verbose[identity]', 'sklearn/neighbors/tests/test_nca.py::test_verbose[random]', 'sklearn/neighbors/tests/test_nca.py::test_verbose[precomputed]', 'sklearn/neighbors/tests/test_nca.py::test_no_verbose', 'sklearn/neighbors/tests/test_nca.py::test_singleton_class', 'sklearn/neighbors/tests/test_nca.py::test_one_class', 'sklearn/neighbors/tests/test_nca.py::test_callback', 'sklearn/neighbors/tests/test_nca.py::test_expected_transformation_shape', 'sklearn/neighbors/tests/test_nca.py::test_convergence_warning']}, 'FAIL_TO_FAIL': {'success': [], 'failure': []}, 'PASS_TO_FAIL': {'success': [], 'failure': []}}}}
Result for scikit-learn__scikit-learn-14092: resolved: False
2024-07-03 14:27:45,387 - INFO - Attempting to stop container sweb.eval.scikit-learn__scikit-learn-14092.evaluation_170033...
2024-07-03 14:27:59,006 - INFO - Attempting to remove container sweb.eval.scikit-learn__scikit-learn-14092.evaluation_170033...
2024-07-03 14:27:59,105 - INFO - Container sweb.eval.scikit-learn__scikit-learn-14092.evaluation_170033 removed.
