2024-07-03 16:12:46,148 - INFO - Environment image sweb.env.x86_64.e83e37f52c09532c62acfb:latest found for django__django-13768
Building instance image sweb.eval.x86_64.django__django-13768:latest for django__django-13768
2024-07-03 16:12:46,151 - INFO - Image sweb.eval.x86_64.django__django-13768:latest already exists, skipping build.
2024-07-03 16:12:46,151 - INFO - Creating container for django__django-13768...
2024-07-03 16:12:48,841 - INFO - Container for django__django-13768 created: 6af96de67d83fe5c482481c995cfdfaf9a6ced9430067a5db0518a498d4c6934
2024-07-03 16:12:51,967 - INFO - Container for django__django-13768 started: 6af96de67d83fe5c482481c995cfdfaf9a6ced9430067a5db0518a498d4c6934
2024-07-03 16:12:51,967 - INFO - Intermediate patch for django__django-13768 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_177040/model_name_managed_by_server/django__django-13768/patch.diff, now applying to container...
2024-07-03 16:12:52,733 - INFO - >>>>> Applied Patch:
Checking patch django/dispatch/dispatcher.py...
Applied patch django/dispatch/dispatcher.py cleanly.

2024-07-03 16:12:54,387 - INFO - Git diff before:
diff --git a/django/dispatch/dispatcher.py b/django/dispatch/dispatcher.py
index b7d9d26389..831bf9fcb2 100644
--- a/django/dispatch/dispatcher.py
+++ b/django/dispatch/dispatcher.py
@@ -114,46 +114,6 @@ class Signal:
                 self.receivers.append((lookup_key, receiver))
             self.sender_receivers_cache.clear()
 
-    def disconnect(self, receiver=None, sender=None, dispatch_uid=None):
-        """
-        Disconnect receiver from sender for signal.
-
-        If weak references are used, disconnect need not be called. The receiver
-        will be removed from dispatch automatically.
-
-        Arguments:
-
-            receiver
-                The registered receiver to disconnect. May be none if
-                dispatch_uid is specified.
-
-            sender
-                The registered sender to disconnect
-
-            dispatch_uid
-                the unique identifier of the receiver to disconnect
-        """
-        if dispatch_uid:
-            lookup_key = (dispatch_uid, _make_id(sender))
-        else:
-            lookup_key = (_make_id(receiver), _make_id(sender))
-
-        disconnected = False
-        with self.lock:
-            self._clear_dead_receivers()
-            for index in range(len(self.receivers)):
-                (r_key, _) = self.receivers[index]
-                if r_key == lookup_key:
-                    disconnected = True
-                    del self.receivers[index]
-                    break
-            self.sender_receivers_cache.clear()
-        return disconnected
-
-    def has_listeners(self, sender=None):
-        return bool(self._live_receivers(sender))
-
-    def send(self, sender, **named):
         """
         Send signal from sender to all connected receivers.
 
@@ -179,39 +139,44 @@ class Signal:
             for receiver in self._live_receivers(sender)
         ]
 
-    def send_robust(self, sender, **named):
-        """
-        Send signal from sender to all connected receivers catching errors.
+import logging
 
-        Arguments:
+logger = logging.getLogger(__name__)
 
-            sender
-                The sender of the signal. Can be any Python object (normally one
-                registered with a connect if you actually want something to
-                occur).
+def send_robust(self, sender, **named):
+    """
+    Send signal from sender to all connected receivers catching errors.
 
-            named
-                Named arguments which will be passed to receivers.
+    Arguments:
 
-        Return a list of tuple pairs [(receiver, response), ... ].
+        sender
+            The sender of the signal. Can be any Python object (normally one
+            registered with a connect if you actually want something to
+            occur).
 
-        If any receiver raises an error (specifically any subclass of
-        Exception), return the error instance as the result for that receiver.
-        """
-        if not self.receivers or self.sender_receivers_cache.get(sender) is NO_RECEIVERS:
-            return []
+        named
+            Named arguments which will be passed to receivers.
 
-        # Call each receiver with whatever arguments it can accept.
-        # Return a list of tuple pairs [(receiver, response), ... ].
-        responses = []
-        for receiver in self._live_receivers(sender):
-            try:
-                response = receiver(signal=self, sender=sender, **named)
-            except Exception as err:
-                responses.append((receiver, err))
-            else:
-                responses.append((receiver, response))
-        return responses
+    Return a list of tuple pairs [(receiver, response), ... ].
+
+    If any receiver raises an error (specifically any subclass of
+    Exception), return the error instance as the result for that receiver.
+    """
+    if not self.receivers or self.sender_receivers_cache.get(sender) is NO_RECEIVERS:
+        return []
+
+    # Call each receiver with whatever arguments it can accept.
+    # Return a list of tuple pairs [(receiver, response), ... ].
+    responses = []
+    for receiver in self._live_receivers(sender):
+        try:
+            response = receiver(signal=self, sender=sender, **named)
+        except Exception as err:
+            logger.exception("Exception occurred in receiver")
+            responses.append((receiver, err))
+        else:
+            responses.append((receiver, response))
+    return responses
 
     def _clear_dead_receivers(self):
         # Note: caller is assumed to hold self.lock.
2024-07-03 16:12:54,389 - INFO - Eval script for django__django-13768 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_177040/model_name_managed_by_server/django__django-13768/patch.diff, now applying to container...
2024-07-03 16:23:24,352 - INFO - Test output for django__django-13768 written to /scratch/rse-swe-bench/unit_test_logs/evaluation_177040/model_name_managed_by_server/django__django-13768/test_output.txt
2024-07-03 16:23:44,314 - INFO - Attempting to stop container sweb.eval.django__django-13768.evaluation_177040...
2024-07-03 16:23:44,319 - INFO - Failed to stop container sweb.eval.django__django-13768.evaluation_177040: 409 Client Error for http+docker://localhost/v1.43/containers/6af96de67d83fe5c482481c995cfdfaf9a6ced9430067a5db0518a498d4c6934/kill: Conflict ("Cannot kill container: 6af96de67d83fe5c482481c995cfdfaf9a6ced9430067a5db0518a498d4c6934: Container 6af96de67d83fe5c482481c995cfdfaf9a6ced9430067a5db0518a498d4c6934 is not running"). Trying to forcefully kill...
2024-07-03 16:23:44,326 - INFO - PID for container sweb.eval.django__django-13768.evaluation_177040: 0 - not killing.
2024-07-03 16:23:44,326 - INFO - Attempting to remove container sweb.eval.django__django-13768.evaluation_177040...
2024-07-03 16:23:46,076 - INFO - Container sweb.eval.django__django-13768.evaluation_177040 removed.
