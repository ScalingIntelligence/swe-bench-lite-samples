{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/django/contrib/sitemaps/__init__.py b/django/contrib/sitemaps/__init__.py\nindex 27756d9d96..b40ad806ed 100644\n--- a/django/contrib/sitemaps/__init__.py\n+++ b/django/contrib/sitemaps/__init__.py\n@@ -168,7 +168,7 @@ class Sitemap:\n         if callable(self.lastmod):\n             try:\n                 return max([self.lastmod(item) for item in self.items()])\n-            except TypeError:\n+            except (TypeError, ValueError):\n                 return None\n         else:\n             return self.lastmod\n", "instance_id": "django__django-16255"}
{"model_name_or_path": "moatless-tools-deepseek-completion-1", "model_patch": "diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py\nindex 755088ca5..cc7486d19 100644\n--- a/sphinx/ext/napoleon/docstring.py\n+++ b/sphinx/ext/napoleon/docstring.py\n@@ -682,7 +682,11 @@ class GoogleDocstring:\n         return self._parse_generic_section(_('Notes'), use_admonition)\n \n     def _parse_other_parameters_section(self, section: str) -> List[str]:\n-        return self._format_fields(_('Other Parameters'), self._consume_fields())\n+        fields = self._consume_fields()\n+        if self._config.napoleon_use_param:\n+            return self._format_docutils_params(fields)\n+        else:\n+            return self._format_fields(_('Other Parameters'), fields)\n \n     def _parse_parameters_section(self, section: str) -> List[str]:\n         if self._config.napoleon_use_param:\n", "instance_id": "sphinx-doc__sphinx-8713"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/sklearn/ensemble/iforest.py b/sklearn/ensemble/iforest.py\nindex 8a1bd3625..ba11df2da 100644\n--- a/sklearn/ensemble/iforest.py\n+++ b/sklearn/ensemble/iforest.py\n@@ -173,7 +173,8 @@ class IsolationForest(BaseBagging, OutlierMixin):\n                  n_jobs=None,\n                  behaviour='old',\n                  random_state=None,\n-                 verbose=0):\n+                 verbose=0,\n+                 warm_start=False):\n         super().__init__(\n             base_estimator=ExtraTreeRegressor(\n                 max_features=1,\n@@ -187,10 +188,12 @@ class IsolationForest(BaseBagging, OutlierMixin):\n             max_features=max_features,\n             n_jobs=n_jobs,\n             random_state=random_state,\n-            verbose=verbose)\n+            verbose=verbose,\n+            warm_start=warm_start)\n \n         self.behaviour = behaviour\n         self.contamination = contamination\n+        self.warm_start = warm_start\n \n     def _set_oob_score(self, X, y):\n         raise NotImplementedError(\"OOB score not supported by iforest\")\n", "instance_id": "scikit-learn__scikit-learn-13496"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/xarray/core/groupby.py b/xarray/core/groupby.py\nindex 8a097251..af5abd9a 100644\n--- a/xarray/core/groupby.py\n+++ b/xarray/core/groupby.py\n@@ -436,7 +436,7 @@ class GroupBy(SupportsArithmetic):\n         return zip(self._unique_coord.values, self._iter_grouped())\n \n     def __repr__(self):\n-        return \"{}, grouped over {!r} \\n{!r} groups with labels {}.\".format(\n+        return \"{}, grouped over {!r}\\n{!r} groups with labels {}.\".format(\n             self.__class__.__name__,\n             self._unique_coord.name,\n             self._unique_coord.size,\n", "instance_id": "pydata__xarray-5131"}
{"model_name_or_path": "moatless-tools-deepseek-completion-1", "model_patch": "diff --git a/sympy/core/basic.py b/sympy/core/basic.py\nindex 6866648d4e..1c4454db06 100644\n--- a/sympy/core/basic.py\n+++ b/sympy/core/basic.py\n@@ -507,7 +507,9 @@ def atoms(self, *types):\n             types = (Atom,)\n         result = set()\n         for expr in preorder_traversal(self):\n-            if isinstance(expr, types):\n+            if types == (Atom,) and not expr.args:\n+                result.add(expr)\n+            elif isinstance(expr, types):\n                 result.add(expr)\n         return result\n \n", "instance_id": "sympy__sympy-18532"}
{"model_name_or_path": "moatless-tools-deepseek-completion-2", "model_patch": "diff --git a/sklearn/preprocessing/_encoders.py b/sklearn/preprocessing/_encoders.py\nindex 1e05aba59..e7273ccd5 100644\n--- a/sklearn/preprocessing/_encoders.py\n+++ b/sklearn/preprocessing/_encoders.py\n@@ -562,6 +562,12 @@ class OneHotEncoder(_BaseEncoder):\n \n         n_samples, n_features = X.shape\n \n+        # Check if categories are strings and transform array into objects if necessary\n+        if all(isinstance(cat, str) for cat_list in self.categories_ for cat in cat_list):\n+            max_length = max(len(cat) for cat_list in self.categories_ for cat in cat_list)\n+            if any(isinstance(val, str) and len(val) < max_length for row in X for val in row):\n+                X = X.astype(np.object)\n+\n         X_int, X_mask = self._transform(X, handle_unknown=self.handle_unknown)\n \n         mask = X_mask.ravel()\n", "instance_id": "scikit-learn__scikit-learn-12471"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/sympy/matrices/common.py b/sympy/matrices/common.py\nindex 056d9bc497..4aa75e4d77 100644\n--- a/sympy/matrices/common.py\n+++ b/sympy/matrices/common.py\n@@ -86,7 +86,7 @@ def entry(i, j):\n                 return self[i, j]\n             elif pos <= j < pos + other.cols:\n                 return other[i, j - pos]\n-            return self[i, j - pos - other.cols]\n+            return self[i, j - other.cols]\n \n         return self._new(self.rows, self.cols + other.cols,\n                          lambda i, j: entry(i, j))\n", "instance_id": "sympy__sympy-13647"}
{"model_name_or_path": "moatless-tools-deepseek-completion-3", "model_patch": "diff --git a/sphinx/ext/viewcode.py b/sphinx/ext/viewcode.py\nindex a7d52a91c..e7599bf6f 100644\n--- a/sphinx/ext/viewcode.py\n+++ b/sphinx/ext/viewcode.py\n@@ -182,6 +182,8 @@ def collect_pages(app: Sphinx) -> Generator[Tuple[str, Dict[str, Any], str], Non\n     env = app.builder.env\n     if not hasattr(env, '_viewcode_modules'):\n         return\n+    if not env.config.viewcode_enable_epub and app.builder.name.startswith('epub'):\n+        return\n     highlighter = app.builder.highlighter  # type: ignore\n     urito = app.builder.get_relative_uri\n \n", "instance_id": "sphinx-doc__sphinx-8721"}
{"model_name_or_path": "moatless-tools-deepseek-completion-3", "model_patch": "diff --git a/sympy/polys/monomials.py b/sympy/polys/monomials.py\nindex 0e84403307..d2cd3451e5 100644\n--- a/sympy/polys/monomials.py\n+++ b/sympy/polys/monomials.py\n@@ -127,7 +127,7 @@ def itermonomials(variables, max_degrees, min_degrees=None):\n                 for variable in item:\n                     if variable != 1:\n                         powers[variable] += 1\n-                if max(powers.values()) >= min_degree:\n+                if sum(powers.values()) >= min_degree:\n                     monomials_list_comm.append(Mul(*item))\n             yield from set(monomials_list_comm)\n         else:\n@@ -139,7 +139,7 @@ def itermonomials(variables, max_degrees, min_degrees=None):\n                 for variable in item:\n                     if variable != 1:\n                         powers[variable] += 1\n-                if max(powers.values()) >= min_degree:\n+                if sum(powers.values()) >= min_degree:\n                     monomials_list_non_comm.append(Mul(*item))\n             yield from set(monomials_list_non_comm)\n     else:\n", "instance_id": "sympy__sympy-21847"}
{"model_name_or_path": "moatless-tools-deepseek-completion-2", "model_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 7bc96e68eb..e414104dba 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -1042,7 +1042,13 @@ def __new__(cls, num, dps=None, prec=None, precision=None):\n                 # it's a hexadecimal (coming from a pickled object)\n                 # assume that it is in standard form\n                 num = list(num)\n-                num[1] = long(num[1], 16)\n+                if 'L' in num[1]:\n+                    num[1] = num[1].replace('L', '')\n+                    num[1] = int(num[1], 16)\n+                    if isinstance(num[1], tuple):  # Ensure it's still a tuple after conversion\n+                        num[1] = num[1][0]  # Extract the integer value if needed\n+                else:\n+                    num[1] = int(num[1], 16)\n                 _mpf_ = tuple(num)\n             else:\n                 if len(num) == 4:\n", "instance_id": "sympy__sympy-13471"}
{"model_name_or_path": "moatless-tools-deepseek-completion-10", "model_patch": "diff --git a/django/views/static.py b/django/views/static.py\nindex 1c558a53ff..381f53da96 100644\n--- a/django/views/static.py\n+++ b/django/views/static.py\n@@ -125,6 +125,8 @@ def was_modified_since(header=None, mtime=0, size=0):\n     size\n       This is the size of the item we're talking about.\n     \"\"\"\n+    if header == \"\":\n+        return True\n     try:\n         if header is None:\n             raise ValueError\n", "instance_id": "django__django-15498"}
{"model_name_or_path": "moatless-tools-deepseek-completion-9", "model_patch": "diff --git a/sympy/solvers/polysys.py b/sympy/solvers/polysys.py\nindex b9809fd4e9..d2c1fd468b 100644\n--- a/sympy/solvers/polysys.py\n+++ b/sympy/solvers/polysys.py\n@@ -60,6 +60,11 @@ def solve_poly_system(seq, *gens, **args):\n             except SolveFailed:\n                 pass\n \n+    if len(polys) != len(opt.gens):\n+        raise NotImplementedError(filldedent('''\n+            only zero-dimensional systems supported (finite number of solutions)\n+        '''))\n+\n     return solve_generic(polys, opt)\n \n \n", "instance_id": "sympy__sympy-22005"}
{"model_name_or_path": "moatless-tools-deepseek-completion-11", "model_patch": "diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py\nindex b8686dba5..527064d96 100644\n--- a/sklearn/utils/_pprint.py\n+++ b/sklearn/utils/_pprint.py\n@@ -87,7 +87,7 @@ class KeyValTupleParam(KeyValTuple):\n def _changed_params(estimator):\n     \"\"\"Return dict (param_name: value) of parameters that were given to\n     estimator with non-default values.\"\"\"\n-\n+    import numpy as np\n     params = estimator.get_params(deep=False)\n     filtered_params = {}\n     init_func = getattr(estimator.__init__, 'deprecated_original',\n@@ -95,6 +95,10 @@ def _changed_params(estimator):\n     init_params = signature(init_func).parameters\n     init_params = {name: param.default for name, param in init_params.items()}\n     for k, v in params.items():\n+        if isinstance(v, np.ndarray):\n+            v = v.tolist()\n+        if isinstance(init_params[k], np.ndarray):\n+            init_params[k] = init_params[k].tolist()\n         if (v != init_params[k] and\n                 not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):\n             filtered_params[k] = v\n", "instance_id": "scikit-learn__scikit-learn-13584"}
{"model_name_or_path": "moatless-tools-deepseek-completion-12", "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 73c20334d0..659fdbf713 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -152,7 +152,7 @@ def __new__(cls, *args, **kwargs):\n                         'warn' or 'ignore'.'''))\n         if any(coords[dim:]):\n             raise ValueError('Nonzero coordinates cannot be removed.')\n-        if any(a.is_number and im(a) for a in coords):\n+        if any(a.is_number and im(a) and evaluate for a in coords):\n             raise ValueError('Imaginary coordinates are not permitted.')\n         if not all(isinstance(a, Expr) for a in coords):\n             raise TypeError('Coordinates must be valid SymPy expressions.')\n", "instance_id": "sympy__sympy-22714"}
{"model_name_or_path": "moatless-tools-deepseek-completion-12", "model_patch": "diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py\nindex 03cf57a30b..f971328de2 100644\n--- a/sympy/sets/sets.py\n+++ b/sympy/sets/sets.py\n@@ -1261,6 +1261,7 @@ def __new__(cls, *args, **kwargs):\n \n         # flatten inputs to merge intersections and iterables\n         args = _sympify(args)\n+        args = list(ordered(set(args), Set._infimum_key))  # Remove duplicates\n \n         # Reduce sets using known rules\n         if evaluate:\n", "instance_id": "sympy__sympy-16988"}
{"model_name_or_path": "moatless-tools-deepseek-completion-14", "model_patch": "diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py\nindex 8fe6e7a9c1..e2ff0a1474 100644\n--- a/lib/mpl_toolkits/mplot3d/art3d.py\n+++ b/lib/mpl_toolkits/mplot3d/art3d.py\n@@ -708,6 +708,8 @@ class Poly3DCollection(PolyCollection):\n                 raise ValueError('verts must be a list of (N, 3) array-like')\n         self.set_zsort(zsort)\n         self._codes3d = None\n+        self._facecolors2d = None\n+        self._edgecolors2d = None\n \n     _zsort_functions = {\n         'average': np.average,\n", "instance_id": "matplotlib__matplotlib-23562"}
{"model_name_or_path": "moatless-tools-deepseek-completion-43", "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex c2623f099f..0c083fd928 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -38,7 +38,21 @@ class Q(tree.Node):\n     conditional = True\n \n     def __init__(self, *args, _connector=None, _negated=False, **kwargs):\n-        super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)\n+        import pickle\n+        children = []\n+        for item in args:\n+            try:\n+                pickle.dumps(item)\n+                children.append(item)\n+            except TypeError:\n+                continue\n+        for key, value in sorted(kwargs.items()):\n+            try:\n+                pickle.dumps(value)\n+                children.append((key, value))\n+            except TypeError:\n+                continue\n+        super().__init__(children=children, connector=_connector, negated=_negated)\n \n     def _combine(self, other, conn):\n         if not isinstance(other, Q):\n", "instance_id": "django__django-14016"}
{"model_name_or_path": "moatless-tools-deepseek-completion-85", "model_patch": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 7649c39262..ddd6ea5e32 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -349,6 +349,9 @@ class SQLCompiler:\n                 else:\n                     raise DatabaseError('ORDER BY term does not match any column in the result set.')\n             sql, params = self.compile(resolved)\n+            # Convert multiline SQL string to a single line\n+            sql_oneline = ' '.join(sql.split('\\n'))\n+            sql = sql_oneline\n             # Don't add the same column twice, but the order direction is\n             # not taken into account so we strip it. When this entire method\n             # is refactored into expressions, then we can check each part as we\n", "instance_id": "django__django-11001"}
{"model_name_or_path": "moatless-tools-deepseek-completion-40", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 2d4610aac4..429cbd1e74 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -354,7 +354,10 @@ class URLPattern:\n             new_path, args, kwargs = match\n             # Pass any extra_kwargs as **kwargs.\n             kwargs.update(self.default_args)\n-            return ResolverMatch(self.callback, args, kwargs, self.pattern.name, route=str(self.pattern))\n+            # Ensure we do not pass extra positional arguments\n+            if not kwargs:\n+                return ResolverMatch(self.callback, (), {}, self.pattern.name, route=str(self.pattern))\n+            return ResolverMatch(self.callback, (), kwargs, self.pattern.name, route=str(self.pattern))\n \n     @cached_property\n     def lookup_str(self):\n", "instance_id": "django__django-12184"}
{"model_name_or_path": "moatless-tools-deepseek-completion-50", "model_patch": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex 2d3072da04..f1025bd836 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -727,9 +727,9 @@ class Colormap:\n                 xa = xa.astype(int)\n         # Set the over-range indices before the under-range;\n         # otherwise the under-range values get converted to over-range.\n-        xa[xa > self.N - 1] = self._i_over\n-        xa[xa < 0] = self._i_under\n-        xa[mask_bad] = self._i_bad\n+        xa[xa > self.N - 1] = np.array(self._i_over).astype(xa.dtype)\n+        xa[xa < 0] = np.array(self._i_under).astype(xa.dtype)\n+        xa[mask_bad] = np.array(self._i_bad).astype(xa.dtype)\n \n         lut = self._lut\n         if bytes:\n", "instance_id": "matplotlib__matplotlib-24970"}
{"model_name_or_path": "moatless-tools-deepseek-completion-94", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 7d226955d5..d3d850574e 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -269,7 +269,12 @@ class TypeSerializer(BaseSerializer):\n             if module == builtins.__name__:\n                 return self.value.__name__, set()\n             else:\n-                return \"%s.%s\" % (module, self.value.__name__), {\"import %s\" % module}\n+                name = self.value.__qualname__\n+                if '.' in name:  # Check if it's an inner class\n+                    outer_class, inner_class = name.split('.', 1)\n+                    return \"%s.%s.%s\" % (module, outer_class, inner_class), {\"import %s\" % module}\n+                else:\n+                    return \"%s.%s\" % (module, self.value.__name__), {\"import %s\" % module}\n \n \n class UUIDSerializer(BaseSerializer):\n", "instance_id": "django__django-12125"}
{"model_name_or_path": "moatless-tools-deepseek-completion-133", "model_patch": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex 1999f1dae..30e95db63 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -2178,10 +2178,10 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                                  for i in range(len(folds))], axis=0)\n \n                 best_indices_C = best_indices % len(self.Cs_)\n-                self.C_.append(np.mean(self.Cs_[best_indices_C]))\n+                self.C_.append(self.Cs_[best_indices_C[0]])\n \n                 best_indices_l1 = best_indices // len(self.Cs_)\n-                self.l1_ratio_.append(np.mean(l1_ratios_[best_indices_l1]))\n+                self.l1_ratio_.append(l1_ratios_[best_indices_l1[0]])\n \n             if multi_class == 'multinomial':\n                 self.C_ = np.tile(self.C_, n_classes)\n", "instance_id": "scikit-learn__scikit-learn-14087"}
{"model_name_or_path": "moatless-tools-deepseek-completion-240", "model_patch": "diff --git a/src/_pytest/main.py b/src/_pytest/main.py\nindex 843c5b5f7..2947c0b50 100644\n--- a/src/_pytest/main.py\n+++ b/src/_pytest/main.py\n@@ -103,12 +103,13 @@ def pytest_addoption(parser):\n         help=\"Define root directory for tests. Can be relative path: 'root_dir', './root_dir', \"\n         \"'root_dir/another_dir/'; absolute path: '/home/user/root_dir'; path with variables: \"\n         \"'$HOME/root_dir'.\",\n-    )\n+    ),\n \n     group = parser.getgroup(\"collect\", \"collection\")\n     group.addoption(\n         \"--collectonly\",\n         \"--collect-only\",\n+        \"--co\",\n         action=\"store_true\",\n         help=\"only collect tests, don't execute them.\",\n     ),\n", "instance_id": "pytest-dev__pytest-6116"}
{"model_name_or_path": "moatless-tools-deepseek-completion-228", "model_patch": "diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\nindex 7a1538325..cce5a748b 100644\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -75,17 +75,25 @@ def default_role(docname: str, name: str) -> Generator[None, None, None]:\n     docutils.unregister_role('')\n \n \n+import re\n+\n+domain_directive_re = re.compile(r'^\\s*:([a-zA-Z]+):`[^`]+`\\s*$')\n+\n def prepend_prolog(content: StringList, prolog: str) -> None:\n     \"\"\"Prepend a string to content body as prolog.\"\"\"\n     if prolog:\n         pos = 0\n+        domain_directive_found = False\n         for line in content:\n-            if docinfo_re.match(line):\n+            if domain_directive_re.match(line):\n+                domain_directive_found = True\n+                break\n+            elif docinfo_re.match(line):\n                 pos += 1\n             else:\n                 break\n \n-        if pos > 0:\n+        if pos > 0 and not domain_directive_found:\n             # insert a blank line after docinfo\n             content.insert(pos, '', '<generated>', 0)\n             pos += 1\n", "instance_id": "sphinx-doc__sphinx-11445"}
{"model_name_or_path": "moatless-tools-deepseek-completion-203", "model_patch": "diff --git a/sympy/core/function.py b/sympy/core/function.py\nindex 69df976b8b..8de33fec86 100644\n--- a/sympy/core/function.py\n+++ b/sympy/core/function.py\n@@ -1426,15 +1426,17 @@ def __new__(cls, expr, *variables, **kwargs):\n         # denest\n         if isinstance(expr, Derivative):\n             variable_count = list(expr.variable_count) + variable_count\n-            expr = expr.expr\n-            return _derivative_dispatch(expr, *variable_count, **kwargs)\n-\n-        # we return here if evaluate is False or if there is no\n-        # _eval_derivative method\n-        if not evaluate or not hasattr(expr, '_eval_derivative'):\n-            # return an unevaluated Derivative\n-            if evaluate and variable_count == [(expr, 1)] and expr.is_scalar:\n-                # special hack providing evaluation for classes\n+            if isinstance(expr, Derivative):\n+                variable_count = list(expr.variable_count) + variable_count\n+                expr = expr.expr\n+\n+            # we return here if evaluate is False or if there is no\n+            # _eval_derivative method\n+            if not evaluate or not hasattr(expr, '_eval_derivative'):\n+                # return an unevaluated Derivative\n+                if evaluate and variable_count == [(expr, 1)] and expr.is_scalar:\n+                    # special hack providing evaluation for classes\n+                    return S.One\n                 # that have defined is_scalar=True but have no\n                 # _eval_derivative defined\n                 return S.One\n", "instance_id": "sympy__sympy-21614"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/django/core/cache/backends/filebased.py b/django/core/cache/backends/filebased.py\nindex 631da49444..215fefbcc0 100644\n--- a/django/core/cache/backends/filebased.py\n+++ b/django/core/cache/backends/filebased.py\n@@ -90,10 +90,11 @@ class FileBasedCache(BaseCache):\n \n     def has_key(self, key, version=None):\n         fname = self._key_to_file(key, version)\n-        if os.path.exists(fname):\n+        try:\n             with open(fname, \"rb\") as f:\n                 return not self._is_expired(f)\n-        return False\n+        except FileNotFoundError:\n+            return False\n \n     def _cull(self):\n         \"\"\"\n", "instance_id": "django__django-16379"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex dadd4acfa1..bcde2a83b4 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2040,7 +2040,7 @@ class InlineModelAdmin(BaseModelAdmin):\n         if self.verbose_name is None:\n             self.verbose_name = self.model._meta.verbose_name\n         if self.verbose_name_plural is None:\n-            self.verbose_name_plural = self.model._meta.verbose_name_plural\n+            self.verbose_name_plural = format_lazy('{}s', self.verbose_name)\n \n     @property\n     def media(self):\n", "instance_id": "django__django-13710"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/django/template/defaultfilters.py b/django/template/defaultfilters.py\nindex 03676533b7..671971a846 100644\n--- a/django/template/defaultfilters.py\n+++ b/django/template/defaultfilters.py\n@@ -587,7 +587,8 @@ def join(value, arg, autoescape=True):\n     try:\n         if autoescape:\n             value = [conditional_escape(v) for v in value]\n-        data = conditional_escape(arg).join(value)\n+            arg = conditional_escape(arg)\n+        data = arg.join(value)\n     except TypeError:  # Fail silently if arg isn't iterable.\n         return value\n     return mark_safe(data)\n", "instance_id": "django__django-16873"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py\nindex acee9887d2..bdeec80610 100644\n--- a/django/conf/global_settings.py\n+++ b/django/conf/global_settings.py\n@@ -304,7 +304,7 @@ FILE_UPLOAD_TEMP_DIR = None\n \n # The numeric mode to set newly-uploaded files to. The value should be a mode\n # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.\n-FILE_UPLOAD_PERMISSIONS = None\n+FILE_UPLOAD_PERMISSIONS = 0o644\n \n # The numeric mode to assign to newly-created directories, when uploading files.\n # The value should be a mode as you'd pass to os.chmod;\n", "instance_id": "django__django-10914"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/django/core/management/commands/sqlmigrate.py b/django/core/management/commands/sqlmigrate.py\nindex f0b663222a..90e318c2ef 100644\n--- a/django/core/management/commands/sqlmigrate.py\n+++ b/django/core/management/commands/sqlmigrate.py\n@@ -55,8 +55,8 @@ class Command(BaseCommand):\n                 migration_name, app_label))\n         targets = [(app_label, migration.name)]\n \n-        # Show begin/end around output only for atomic migrations\n-        self.output_transaction = migration.atomic\n+        # Show begin/end around output only for atomic migrations and if the schema editor can rollback DDL\n+        self.output_transaction = migration.atomic and connection.features.can_rollback_ddl\n \n         # Make a plan that represents just the requested migrations and show SQL\n         # for it\n", "instance_id": "django__django-11039"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/django/contrib/syndication/views.py b/django/contrib/syndication/views.py\nindex 68ffb0bfe0..5f51880c21 100644\n--- a/django/contrib/syndication/views.py\n+++ b/django/contrib/syndication/views.py\n@@ -200,6 +200,7 @@ class Feed:\n                 updateddate = make_aware(updateddate, tz)\n \n             feed.add_item(\n+                comments=self._get_dynamic_attr('item_comments', item),\n                 title=title,\n                 link=link,\n                 description=description,\n", "instance_id": "django__django-13230"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/django/core/management/templates.py b/django/core/management/templates.py\nindex 8dc6068286..f248ab1b71 100644\n--- a/django/core/management/templates.py\n+++ b/django/core/management/templates.py\n@@ -74,7 +74,7 @@ class TemplateCommand(BaseCommand):\n                 raise CommandError(e)\n         else:\n             if app_or_project == 'app':\n-                self.validate_name(os.path.basename(target), 'directory')\n+                self.validate_name(os.path.basename(target.rstrip(os.sep)), 'directory')\n             top_dir = os.path.abspath(os.path.expanduser(target))\n             if not os.path.exists(top_dir):\n                 raise CommandError(\"Destination directory '%s' does not \"\n", "instance_id": "django__django-14382"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/requests/models.py b/requests/models.py\nindex d8456375..aa98e367 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -149,7 +149,11 @@ class Request(object):\n         hooks = hooks or {}\n \n         for (k, v) in list(hooks.items()):\n-            self.register_hook(event=k, hook=v)\n+            if isinstance(v, list):\n+                for hook in v:\n+                    self.register_hook(event=k, hook=hook)\n+            else:\n+                self.register_hook(event=k, hook=v)\n \n         #: Session.\n         self.session = session\n", "instance_id": "psf__requests-863"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/django/utils/http.py b/django/utils/http.py\nindex 572cfb4347..93b9747c5a 100644\n--- a/django/utils/http.py\n+++ b/django/utils/http.py\n@@ -176,10 +176,13 @@ def parse_http_date(date):\n     try:\n         year = int(m.group('year'))\n         if year < 100:\n-            if year < 70:\n-                year += 2000\n+            current_year = datetime.datetime.utcnow().year\n+            century = current_year // 100 * 100\n+            year_in_current_century = century + year\n+            if year_in_current_century > current_year + 50:\n+                year += century - 100  # Adjust to the previous century if more than 50 years in the future\n             else:\n-                year += 1900\n+                year += century\n         month = MONTHS.index(m.group('mon').lower()) + 1\n         day = int(m.group('day'))\n         hour = int(m.group('hour'))\n", "instance_id": "django__django-11848"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/django/db/migrations/operations/fields.py b/django/db/migrations/operations/fields.py\nindex cd3aab43ad..4f3d4c7fcc 100644\n--- a/django/db/migrations/operations/fields.py\n+++ b/django/db/migrations/operations/fields.py\n@@ -251,6 +251,10 @@ class AlterField(FieldOperation):\n             operation\n         ):\n             return [operation]\n+        elif isinstance(operation, AlterField) and self.is_same_field_operation(\n+            operation\n+        ):\n+            return [operation]\n         elif (\n             isinstance(operation, RenameField)\n             and self.is_same_field_operation(operation)\n", "instance_id": "django__django-16595"}
{"model_name_or_path": "moatless-tools-deepseek-completion-1", "model_patch": "diff --git a/src/_pytest/skipping.py b/src/_pytest/skipping.py\nindex 7bd975e5a..e9d4c3068 100644\n--- a/src/_pytest/skipping.py\n+++ b/src/_pytest/skipping.py\n@@ -271,7 +271,16 @@ def pytest_runtest_makereport(item: Item, call: CallInfo[None]):\n             rep.longrepr = \"Unexpected success\"\n         rep.outcome = \"failed\"\n     elif item.config.option.runxfail:\n-        pass  # don't interfere\n+        # Ensure location reporting for skipped tests is correct\n+        if (\n+            item._store.get(skipped_by_mark_key, True)\n+            and rep.skipped\n+            and type(rep.longrepr) is tuple\n+        ):\n+            _, _, reason = rep.longrepr\n+            filename, line = item.reportinfo()[:2]\n+            assert line is not None\n+            rep.longrepr = str(filename), line + 1, reason\n     elif call.excinfo and isinstance(call.excinfo.value, xfail.Exception):\n         assert call.excinfo.value.msg is not None\n         rep.wasxfail = \"reason: \" + call.excinfo.value.msg\n", "instance_id": "pytest-dev__pytest-7432"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py\nindex 78accaf295..e63092888c 100644\n--- a/sympy/physics/quantum/tensorproduct.py\n+++ b/sympy/physics/quantum/tensorproduct.py\n@@ -246,9 +246,10 @@ def _eval_expand_tensorproduct(self, **hints):\n             if isinstance(args[i], Add):\n                 for aa in args[i].args:\n                     tp = TensorProduct(*args[:i] + (aa,) + args[i + 1:])\n-                    if isinstance(tp, TensorProduct):\n-                        tp = tp._eval_expand_tensorproduct()\n-                    add_args.append(tp)\n+                    c_part, nc_part = tp.args_cnc()\n+                    if len(nc_part) == 1 and isinstance(nc_part[0], TensorProduct):\n+                        nc_part = (nc_part[0]._eval_expand_tensorproduct(), )\n+                    add_args.append(Mul(*c_part) * Mul(*nc_part))\n                 break\n \n         if add_args:\n", "instance_id": "sympy__sympy-24152"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 4648daf395..433bdc83f1 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1077,10 +1077,13 @@ class Query(BaseExpression):\n         elif isinstance(value, (list, tuple)):\n             # The items of the iterable may be expressions and therefore need\n             # to be resolved independently.\n-            return type(value)(\n+            resolved_values = (\n                 self.resolve_lookup_value(sub_value, can_reuse, allow_joins)\n                 for sub_value in value\n             )\n+            if hasattr(value, '_fields'):  # Check if it's a named tuple\n+                return type(value)(*resolved_values)\n+            return type(value)(resolved_values)\n         return value\n \n     def solve_lookup_type(self, lookup):\n", "instance_id": "django__django-13590"}
{"model_name_or_path": "moatless-tools-deepseek-completion-1", "model_patch": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex e2bbf061e..ed3e2408d 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -784,6 +784,14 @@ class PyLinter(\n             if key == \"fatal\":\n                 message = str(error[\"ex\"]).replace(os.getcwd() + os.sep, \"\")\n             self.add_message(key, args=message)\n+        for module_descr in result:\n+            if _is_ignored_file(\n+                module_descr[\"path\"],\n+                self.config.ignore,\n+                self.config.ignore_patterns,\n+                self._ignore_paths,\n+            ):\n+                result.remove(module_descr)\n         return result\n \n     def set_current_module(\n", "instance_id": "pylint-dev__pylint-7080"}
{"model_name_or_path": "moatless-tools-deepseek-completion-3", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ce18098fd2..ca9f9d3e7b 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1125,10 +1125,7 @@ class Query(BaseExpression):\n     def check_filterable(self, expression):\n         \"\"\"Raise an error if expression cannot be used in a WHERE clause.\"\"\"\n         if not getattr(expression, 'filterable', True):\n-            raise NotSupportedError(\n-                expression.__class__.__name__ + ' is disallowed in the filter '\n-                'clause.'\n-            )\n+            return\n         if hasattr(expression, 'get_source_expressions'):\n             for expr in expression.get_source_expressions():\n                 self.check_filterable(expr)\n", "instance_id": "django__django-13028"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5dcf923c12..bc7e6959e7 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1171,6 +1171,9 @@ class ModelChoiceIteratorValue:\n             other = other.value\n         return self.value == other\n \n+    def __hash__(self):\n+        return hash(self.value)\n+\n \n class ModelChoiceIterator:\n     def __init__(self, field):\n", "instance_id": "django__django-14915"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py\nindex 61f88401ab..3199ee63ff 100644\n--- a/django/db/backends/base/schema.py\n+++ b/django/db/backends/base/schema.py\n@@ -408,11 +408,22 @@ class BaseDatabaseSchemaEditor:\n             **constraint_kwargs\n         )\n         if len(constraint_names) != 1:\n-            raise ValueError(\"Found wrong number (%s) of constraints for %s(%s)\" % (\n-                len(constraint_names),\n-                model._meta.db_table,\n-                \", \".join(columns),\n-            ))\n+            unique_constraint_names = self._constraint_names(\n+                model, columns, exclude=meta_constraint_names | meta_index_names, unique=True\n+            )\n+            index_constraint_names = self._constraint_names(\n+                model, columns, exclude=meta_constraint_names | meta_index_names, index=True\n+            )\n+            if constraint_kwargs.get('unique', False) and unique_constraint_names:\n+                constraint_names = unique_constraint_names\n+            elif constraint_kwargs.get('index', False) and index_constraint_names:\n+                constraint_names = index_constraint_names\n+            else:\n+                raise ValueError(\"Found wrong number (%s) of constraints for %s(%s)\" % (\n+                    len(constraint_names),\n+                    model._meta.db_table,\n+                    \", \".join(columns),\n+                ))\n         self.execute(self._delete_constraint_sql(sql, model, constraint_names[0]))\n \n     def alter_db_table(self, model, old_db_table, new_db_table):\n", "instance_id": "django__django-12708"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex d701ff2e..adcfbac7 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -425,7 +425,7 @@ class Session(SessionRedirectMixin):\n             If Tuple, ('cert', 'key') pair.\n         \"\"\"\n \n-        method = builtin_str(method)\n+        method = to_native_string(method)\n \n         # Create the Request.\n         req = Request(\n", "instance_id": "psf__requests-2317"}
{"model_name_or_path": "moatless-tools-deepseek-completion-1", "model_patch": "diff --git a/django/contrib/admin/helpers.py b/django/contrib/admin/helpers.py\nindex dd154f72ee..ba8c3463a0 100644\n--- a/django/contrib/admin/helpers.py\n+++ b/django/contrib/admin/helpers.py\n@@ -209,7 +209,11 @@ class AdminReadonlyField:\n             remote_field.model._meta.model_name,\n         )\n         try:\n-            url = reverse(url_name, args=[quote(remote_obj.pk)])\n+            url = reverse(\n+                url_name,\n+                args=[quote(remote_obj.pk)],\n+                current_app=self.model_admin.admin_site.name\n+            )\n             return format_html('<a href=\"{}\">{}</a>', url, remote_obj)\n         except NoReverseMatch:\n             return str(remote_obj)\n", "instance_id": "django__django-14855"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/django/http/response.py b/django/http/response.py\nindex 6a84e193ba..507322473e 100644\n--- a/django/http/response.py\n+++ b/django/http/response.py\n@@ -233,6 +233,8 @@ class HttpResponseBase:\n             return bytes(value)\n         if isinstance(value, str):\n             return bytes(value.encode(self.charset))\n+        if isinstance(value, memoryview):\n+            return bytes(value)\n         # Handle non-string types.\n         return str(value).encode(self.charset)\n \n", "instance_id": "django__django-11133"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/requests/models.py b/requests/models.py\nindex fbb3c7e6..3ee22de6 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -695,7 +695,8 @@ class Response(object):\n         chunks = reused_chunks if self._content_consumed else stream_chunks\n \n         if decode_unicode:\n-            chunks = stream_decode_response_unicode(chunks, self)\n+            encoding = self.encoding if self.encoding else self.apparent_encoding\n+            chunks = (str(chunk, encoding, errors='replace') for chunk in chunks)\n \n         return chunks\n \n", "instance_id": "psf__requests-3362"}
{"model_name_or_path": "moatless-tools-deepseek-completion-1", "model_patch": "diff --git a/lib/mpl_toolkits/mplot3d/axes3d.py b/lib/mpl_toolkits/mplot3d/axes3d.py\nindex 9db44b7994..3f3dd3baa2 100644\n--- a/lib/mpl_toolkits/mplot3d/axes3d.py\n+++ b/lib/mpl_toolkits/mplot3d/axes3d.py\n@@ -185,6 +185,14 @@ class Axes3D(Axes):\n                 \"other Axes classes.\")\n             fig.add_axes(self)\n \n+    def set_visible(self, visible):\n+        self._visible = visible\n+        if not visible:\n+            self.set_axis_off()\n+        else:\n+            self.set_axis_on()\n+        self.stale = True\n+\n     def set_axis_off(self):\n         self._axis3don = False\n         self.stale = True\n", "instance_id": "matplotlib__matplotlib-23314"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/sklearn/linear_model/ridge.py b/sklearn/linear_model/ridge.py\nindex 911c74ae3..b1fccc2e9 100644\n--- a/sklearn/linear_model/ridge.py\n+++ b/sklearn/linear_model/ridge.py\n@@ -1333,10 +1333,11 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n-            scoring=scoring, cv=cv)\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n         self.class_weight = class_weight\n \n     def fit(self, X, y, sample_weight=None):\n", "instance_id": "scikit-learn__scikit-learn-10297"}
{"model_name_or_path": "moatless-tools-deepseek-completion-1", "model_patch": "diff --git a/sklearn/decomposition/kernel_pca.py b/sklearn/decomposition/kernel_pca.py\nindex bb91d0cbb..001c41c6f 100644\n--- a/sklearn/decomposition/kernel_pca.py\n+++ b/sklearn/decomposition/kernel_pca.py\n@@ -220,6 +220,12 @@ class KernelPCA(BaseEstimator, TransformerMixin, _UnstableOn32BitMixin):\n             self.alphas_ = self.alphas_[:, self.lambdas_ > 0]\n             self.lambdas_ = self.lambdas_[self.lambdas_ > 0]\n \n+        # Normalize eigenvectors such that the max value is positive\n+        for i in range(self.alphas_.shape[1]):\n+            max_index = np.argmax(np.abs(self.alphas_[:, i]))\n+            if self.alphas_[max_index, i] < 0:\n+                self.alphas_[:, i] *= -1\n+\n         return K\n \n     def _fit_inverse_transform(self, X_transformed, X):\n", "instance_id": "scikit-learn__scikit-learn-13241"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex a3ead157c1..f3b7669e96 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -740,7 +740,7 @@ def _print_Function(self, expr, exp=None):\n                 len(args) == 1 and \\\n                 not self._needs_function_brackets(expr.args[0])\n \n-            inv_trig_table = [\"asin\", \"acos\", \"atan\", \"acot\"]\n+            inv_trig_table = [\"asin\", \"acos\", \"atan\", \"acsc\", \"asec\", \"acot\"]\n \n             # If the function is an inverse trig function, handle the style\n             if func in inv_trig_table:\n", "instance_id": "sympy__sympy-14774"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex f32ce64629..d2492da61b 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1587,7 +1587,8 @@ class DurationField(Field):\n     empty_strings_allowed = False\n     default_error_messages = {\n         'invalid': _(\"'%(value)s' value has an invalid format. It must be in \"\n-                     \"[DD] [HH:[MM:]]ss[.uuuuuu] format.\")\n+                     \"[DD] [[HH:]MM:]ss[.uuuuuu] format.\"),\n+        'overflow': _('The number of days must be between {min_days} and {max_days}.')\n     }\n     description = _(\"Duration\")\n \n@@ -1631,10 +1632,12 @@ class DurationField(Field):\n         return '' if val is None else duration_string(val)\n \n     def formfield(self, **kwargs):\n-        return super().formfield(**{\n+        defaults = {\n             'form_class': forms.DurationField,\n-            **kwargs,\n-        })\n+            'help_text': _(\"Enter a duration in the format [DD] [[HH:]MM:]ss[.uuuuuu]\"),\n+        }\n+        defaults.update(kwargs)\n+        return super().formfield(**defaults)\n \n \n class EmailField(CharField):\ndiff --git a/django/forms/fields.py b/django/forms/fields.py\nindex a977256525..869d2634a1 100644\n--- a/django/forms/fields.py\n+++ b/django/forms/fields.py\n@@ -468,7 +468,7 @@ class DateTimeField(BaseTemporalField):\n \n class DurationField(Field):\n     default_error_messages = {\n-        'invalid': _('Enter a valid duration.'),\n+        'invalid': _('[DD] [[HH:]MM:]ss[.uuuuuu]'),\n         'overflow': _('The number of days must be between {min_days} and {max_days}.')\n     }\n \n", "instance_id": "django__django-11049"}
{"model_name_or_path": "moatless-tools-deepseek-completion-2", "model_patch": "diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py\nindex 2c50002de3..b26ab3bcf3 100644\n--- a/sympy/core/numbers.py\n+++ b/sympy/core/numbers.py\n@@ -2625,10 +2625,10 @@ def __neg__():\n     def _eval_power(self, expt):\n         if expt.is_positive:\n             return self\n-        if expt.is_negative:\n-            return S.ComplexInfinity\n         if expt.is_extended_real is False:\n             return S.NaN\n+        if expt == S.NegativeInfinity:\n+            return S.ComplexInfinity\n         # infinities are already handled with pos and neg\n         # tests above; now throw away leading numbers on Mul\n         # exponent\n", "instance_id": "sympy__sympy-20212"}
{"model_name_or_path": "moatless-tools-deepseek-completion-1", "model_patch": "diff --git a/sklearn/pipeline.py b/sklearn/pipeline.py\nindex 7eaf9a46f..69bc50e05 100644\n--- a/sklearn/pipeline.py\n+++ b/sklearn/pipeline.py\n@@ -312,6 +312,9 @@ class Pipeline(_BaseComposition):\n             self._final_estimator.fit(Xt, y, **fit_params)\n         return self\n \n+    def __len__(self):\n+        return len(self.steps)\n+\n     def fit_transform(self, X, y=None, **fit_params):\n         \"\"\"Fit the model and transform with the final estimator\n \n", "instance_id": "scikit-learn__scikit-learn-13439"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 157903faf..8d6fccc62 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -678,7 +678,7 @@ class AssertionRewriter(ast.NodeVisitor):\n                 and isinstance(item.value, ast.Constant)\n             ):\n                 doc = item.value.value\n-                if self.is_rewrite_disabled(doc):\n+                if isinstance(doc, str) and self.is_rewrite_disabled(doc):\n                     return\n                 expect_docstring = False\n             elif (\n", "instance_id": "pytest-dev__pytest-11143"}
{"model_name_or_path": "moatless-tools-deepseek-completion-2", "model_patch": "diff --git a/sympy/combinatorics/permutations.py b/sympy/combinatorics/permutations.py\nindex 136ed5a478..1b56da7868 100644\n--- a/sympy/combinatorics/permutations.py\n+++ b/sympy/combinatorics/permutations.py\n@@ -897,8 +897,18 @@ def __new__(cls, *args, **kwargs):\n         temp = flatten(args)\n         if has_dups(temp):\n             if is_cycle:\n-                raise ValueError('there were repeated elements; to resolve '\n-                'cycles use Cycle%s.' % ''.join([str(tuple(c)) for c in args]))\n+                # Combine non-disjoint cycles in left-to-right order\n+                c = Cycle()\n+                for ci in args:\n+                    c = c(*ci)\n+                aform = c.list()\n+                if size and size > len(aform):\n+                    aform.extend(list(range(len(aform), size)))\n+                size = len(aform)\n+                obj = Basic.__new__(cls, aform)\n+                obj._array_form = aform\n+                obj._size = size\n+                return obj\n             else:\n                 raise ValueError('there were repeated elements.')\n         temp = set(temp)\n", "instance_id": "sympy__sympy-12481"}
{"model_name_or_path": "moatless-tools-deepseek-completion-3", "model_patch": "diff --git a/sklearn/ensemble/voting.py b/sklearn/ensemble/voting.py\nindex 7afa7180c..13accdcec 100644\n--- a/sklearn/ensemble/voting.py\n+++ b/sklearn/ensemble/voting.py\n@@ -78,7 +78,7 @@ class _BaseVoting(_BaseComposition, TransformerMixin):\n \n         if sample_weight is not None:\n             for name, step in self.estimators:\n-                if not has_fit_parameter(step, 'sample_weight'):\n+                if step is not None and not has_fit_parameter(step, 'sample_weight'):\n                     raise ValueError('Underlying estimator \\'%s\\' does not'\n                                      ' support sample weights.' % name)\n \n", "instance_id": "scikit-learn__scikit-learn-13779"}
{"model_name_or_path": "moatless-tools-deepseek-completion-3", "model_patch": "diff --git a/pylint/reporters/text.py b/pylint/reporters/text.py\nindex 29bd46798..f0621e7d8 100644\n--- a/pylint/reporters/text.py\n+++ b/pylint/reporters/text.py\n@@ -175,7 +175,7 @@ class TextReporter(BaseReporter):\n         self._template = template\n \n         # Check to see if all parameters in the template are attributes of the Message\n-        arguments = re.findall(r\"\\{(.+?)(:.*)?\\}\", template)\n+        arguments = re.findall(r\"\\{\\s*([^{}:]+?)\\s*(?::\\s*(.+?))?\\s*\\}\", template)\n         for argument in arguments:\n             if argument[0] not in MESSAGE_FIELDS:\n                 warnings.warn(\n", "instance_id": "pylint-dev__pylint-7993"}
{"model_name_or_path": "moatless-tools-deepseek-completion-2", "model_patch": "diff --git a/requests/adapters.py b/requests/adapters.py\nindex 841cbbfe..22d8129b 100644\n--- a/requests/adapters.py\n+++ b/requests/adapters.py\n@@ -432,4 +432,10 @@ class HTTPAdapter(BaseAdapter):\n             else:\n                 raise\n \n+        except DecodeError as e:\n+            raise ContentDecodingError(e, request=request)\n+\n+        except TimeoutError as e:\n+            raise Timeout(e, request=request)\n+\n         return self.build_response(request, resp)\n", "instance_id": "psf__requests-2674"}
{"model_name_or_path": "moatless-tools-deepseek-completion-4", "model_patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex a89c35599f..250947c435 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -295,7 +295,7 @@ class BaseFormSet:\n         \"\"\"\n         if self._non_form_errors is None:\n             self.full_clean()\n-        return self._non_form_errors\n+        return self._non_form_errors if self._non_form_errors is not None else self.error_class(error_class='nonform')\n \n     @property\n     def errors(self):\n@@ -333,7 +333,7 @@ class BaseFormSet:\n         self._non_form_errors.\n         \"\"\"\n         self._errors = []\n-        self._non_form_errors = self.error_class()\n+        self._non_form_errors = self.error_class(error_class='nonform')\n         empty_forms_count = 0\n \n         if not self.is_bound:  # Stop further processing.\n@@ -380,7 +380,7 @@ class BaseFormSet:\n             # Give self.clean() a chance to do cross-form validation.\n             self.clean()\n         except ValidationError as e:\n-            self._non_form_errors = self.error_class(e.error_list)\n+            self._non_form_errors = self.error_class(e.error_list, error_class='nonform')\n \n     def clean(self):\n         \"\"\"\n", "instance_id": "django__django-14608"}
{"model_name_or_path": "moatless-tools-deepseek-completion-3", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 2428218696..cda24dc125 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -933,9 +933,9 @@ class Model(metaclass=ModelBase):\n                         \"%s() prohibited to prevent data loss due to unsaved \"\n                         \"related object '%s'.\" % (operation_name, field.name)\n                     )\n-                elif getattr(self, field.attname) is None:\n+                elif getattr(self, field.attname) is None or getattr(obj, field.target_field.attname) != getattr(self, field.attname):\n                     # Use pk from related object if it has been saved after\n-                    # an assignment.\n+                    # an assignment or if the relationship's pk/to_field was changed.\n                     setattr(self, field.attname, obj.pk)\n                 # If the relationship's pk/to_field was changed, clear the\n                 # cached relationship.\n", "instance_id": "django__django-13964"}
{"model_name_or_path": "moatless-tools-deepseek-completion-3", "model_patch": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..cd7486283e 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,7 +59,7 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n@@ -67,7 +67,9 @@ def json_script(value, element_id=None):\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    if encoder is None:\n+        encoder = DjangoJSONEncoder\n+    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\n", "instance_id": "django__django-15789"}
{"model_name_or_path": "moatless-tools-deepseek-completion-6", "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 25c3b44250..3c088eaf4d 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -143,6 +143,11 @@ def iter_modules_and_files(modules, extra_files):\n             # The module could have been removed, don't fail loudly if this\n             # is the case.\n             continue\n+        except ValueError as e:\n+            if 'embedded null byte' in str(e):\n+                logger.warning(\"Skipping path due to embedded null byte: %s\", path)\n+                continue\n+            raise\n         results.add(resolved_path)\n     return frozenset(results)\n \n", "instance_id": "django__django-11583"}
{"model_name_or_path": "moatless-tools-deepseek-completion-4", "model_patch": "diff --git a/sklearn/feature_selection/mutual_info_.py b/sklearn/feature_selection/mutual_info_.py\nindex d5d1b7fb5..a4845ac46 100644\n--- a/sklearn/feature_selection/mutual_info_.py\n+++ b/sklearn/feature_selection/mutual_info_.py\n@@ -251,8 +251,9 @@ def _estimate_mi(X, y, discrete_features='auto', discrete_target=False,\n         discrete_features = issparse(X)\n \n     if isinstance(discrete_features, bool):\n-        discrete_mask = np.empty(n_features, dtype=bool)\n-        discrete_mask.fill(discrete_features)\n+        discrete_mask = np.full(n_features, discrete_features, dtype=bool)\n+    elif isinstance(discrete_features, str):\n+        raise ValueError(\"Invalid value for discrete_features: 'auto' is not supported in this context.\")\n     else:\n         discrete_features = np.asarray(discrete_features)\n         if discrete_features.dtype != 'bool':\n", "instance_id": "scikit-learn__scikit-learn-13497"}
{"model_name_or_path": "moatless-tools-deepseek-completion-3", "model_patch": "diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py\nindex 6ec7bd891c..7bef281d97 100644\n--- a/sympy/printing/pycode.py\n+++ b/sympy/printing/pycode.py\n@@ -667,6 +667,9 @@ def _print_CodegenArrayPermuteDims(self, expr):\n             self._print(expr.permutation.args[0]),\n         )\n \n+    def _print_Identity(self, expr):\n+        return 'numpy.eye(%s)' % self._print(expr.rows)\n+\n     def _print_CodegenArrayElementwiseAdd(self, expr):\n         return self._expand_fold_binary_op('numpy.add', expr.args)\n \n", "instance_id": "sympy__sympy-17022"}
{"model_name_or_path": "moatless-tools-deepseek-completion-6", "model_patch": "diff --git a/lib/matplotlib/backends/backend_ps.py b/lib/matplotlib/backends/backend_ps.py\nindex f209e811f1..7da42e63e3 100644\n--- a/lib/matplotlib/backends/backend_ps.py\n+++ b/lib/matplotlib/backends/backend_ps.py\n@@ -665,8 +665,8 @@ grestore\n                 curr_stream[1].append(\n                     (item.x, item.ft_object.get_glyph_name(item.glyph_idx))\n                 )\n-            # append the last entry\n-            stream.append(curr_stream)\n+            if curr_stream:\n+                stream.append(curr_stream)\n \n         self.set_color(*gc.get_rgb())\n \n", "instance_id": "matplotlib__matplotlib-23964"}
{"model_name_or_path": "moatless-tools-deepseek-completion-7", "model_patch": "diff --git a/astropy/modeling/separable.py b/astropy/modeling/separable.py\nindex a308e2729..ae6cf7750 100644\n--- a/astropy/modeling/separable.py\n+++ b/astropy/modeling/separable.py\n@@ -306,7 +306,11 @@ def _separable(transform):\n     elif isinstance(transform, CompoundModel):\n         sepleft = _separable(transform.left)\n         sepright = _separable(transform.right)\n-        return _operators[transform.op](sepleft, sepright)\n+        if transform.op == '&':\n+            return np.vstack([np.hstack([sepleft, np.zeros((sepleft.shape[0], sepright.shape[1]))]),\n+                              np.hstack([np.zeros((sepright.shape[0], sepleft.shape[1])), sepright])])\n+        else:\n+            return _operators[transform.op](sepleft, sepright)\n     elif isinstance(transform, Model):\n         return _coord_matrix(transform, 'left', transform.n_outputs)\n \n", "instance_id": "astropy__astropy-12907"}
{"model_name_or_path": "moatless-tools-deepseek-completion-21", "model_patch": "diff --git a/django/utils/text.py b/django/utils/text.py\nindex fb5f6298c4..d6ae0f96a7 100644\n--- a/django/utils/text.py\n+++ b/django/utils/text.py\n@@ -402,8 +402,8 @@ def slugify(value, allow_unicode=False):\n         value = unicodedata.normalize('NFKC', value)\n     else:\n         value = unicodedata.normalize('NFKD', value).encode('ascii', 'ignore').decode('ascii')\n-    value = re.sub(r'[^\\w\\s-]', '', value.lower()).strip()\n-    return re.sub(r'[-\\s]+', '-', value)\n+    value = re.sub(r'[^\\w\\s-]', '', value.lower()).strip(\"-_\")\n+    return re.sub(r'[-\\s]+', '-', value).strip(\"-_\")\n \n \n def camel_case_to_spaces(value):\n", "instance_id": "django__django-12983"}
{"model_name_or_path": "moatless-tools-deepseek-completion-11", "model_patch": "diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py\nindex 456681ab2..ac227fd73 100644\n--- a/src/_pytest/assertion/rewrite.py\n+++ b/src/_pytest/assertion/rewrite.py\n@@ -887,61 +887,58 @@ class AssertionRewriter(ast.NodeVisitor):\n             # Failed\n             if assert_.msg:\n                 assertmsg = self.helper(\"_format_assertmsg\", assert_.msg)\n-                gluestr = \"\\n>assert \"\n-            else:\n-                assertmsg = ast.Str(\"\")\n-                gluestr = \"assert \"\n-            err_explanation = ast.BinOp(ast.Str(gluestr), ast.Add(), msg)\n-            err_msg = ast.BinOp(assertmsg, ast.Add(), err_explanation)\n-            err_name = ast.Name(\"AssertionError\", ast.Load())\n-            fmt = self.helper(\"_format_explanation\", err_msg)\n-            exc = ast.Call(err_name, [fmt], [])\n-            raise_ = ast.Raise(exc, None)\n-            statements_fail = []\n-            statements_fail.extend(self.expl_stmts)\n-            statements_fail.append(raise_)\n-\n-            # Passed\n-            fmt_pass = self.helper(\"_format_explanation\", msg)\n-            orig = _get_assertion_exprs(self.source)[assert_.lineno]\n-            hook_call_pass = ast.Expr(\n-                self.helper(\n-                    \"_call_assertion_pass\",\n-                    ast.Num(assert_.lineno),\n-                    ast.Str(orig),\n-                    fmt_pass,\n+                gluestr = \"\\n>assert \" if assert_.msg else \"assert \"\n+                err_explanation = ast.BinOp(ast.Str(gluestr), ast.Add(), msg)\n+                err_msg = ast.BinOp(assertmsg, ast.Add(), err_explanation)\n+                err_name = ast.Name(\"AssertionError\", ast.Load())\n+                fmt = self.helper(\"_format_explanation\", err_msg)\n+                exc = ast.Call(err_name, [fmt], [])\n+                raise_ = ast.Raise(exc, None)\n+                statements_fail = []\n+                statements_fail.extend(self.expl_stmts)\n+                statements_fail.append(raise_)\n+\n+                # Passed\n+                fmt_pass = self.helper(\"_format_explanation\", msg)\n+                orig = _get_assertion_exprs(self.source)[assert_.lineno]\n+                hook_call_pass = ast.Expr(\n+                    self.helper(\n+                        \"_call_assertion_pass\",\n+                        ast.Num(assert_.lineno),\n+                        ast.Str(orig),\n+                        fmt_pass,\n+                    )\n                 )\n-            )\n-            # If any hooks implement assert_pass hook\n-            hook_impl_test = ast.If(\n-                self.helper(\"_check_if_assertion_pass_impl\"),\n-                self.expl_stmts + [hook_call_pass],\n-                [],\n-            )\n-            statements_pass = [hook_impl_test]\n-\n-            # Test for assertion condition\n-            main_test = ast.If(negation, statements_fail, statements_pass)\n-            self.statements.append(main_test)\n-            if self.format_variables:\n-                variables = [\n-                    ast.Name(name, ast.Store()) for name in self.format_variables\n-                ]\n-                clear_format = ast.Assign(variables, ast.NameConstant(None))\n-                self.statements.append(clear_format)\n-\n-        else:  # Original assertion rewriting\n-            # Create failure message.\n-            body = self.expl_stmts\n-            self.statements.append(ast.If(negation, body, []))\n-            if assert_.msg:\n-                assertmsg = self.helper(\"_format_assertmsg\", assert_.msg)\n-                explanation = \"\\n>assert \" + explanation\n-            else:\n-                assertmsg = ast.Str(\"\")\n-                explanation = \"assert \" + explanation\n-            template = ast.BinOp(assertmsg, ast.Add(), ast.Str(explanation))\n-            msg = self.pop_format_context(template)\n+                # If any hooks implement assert_pass hook\n+                hook_impl_test = ast.If(\n+                    self.helper(\"_check_if_assertion_pass_impl\"),\n+                    self.expl_stmts + [hook_call_pass],\n+                    [],\n+                )\n+                statements_pass = [hook_impl_test]\n+\n+                # Test for assertion condition\n+                main_test = ast.If(negation, statements_fail, statements_pass)\n+                self.statements.append(main_test)\n+                if self.format_variables:\n+                    variables = [\n+                        ast.Name(name, ast.Store()) for name in self.format_variables\n+                    ]\n+                    clear_format = ast.Assign(variables, ast.NameConstant(None))\n+                    self.statements.append(clear_format)\n+\n+            else:  # Original assertion rewriting\n+                # Create failure message.\n+                body = self.expl_stmts\n+                self.statements.append(ast.If(negation, body, []))\n+                if assert_.msg:\n+                    assertmsg = self.helper(\"_format_assertmsg\", assert_.msg)\n+                    explanation = \"\\n>assert \" + explanation\n+                else:\n+                    assertmsg = ast.Str(\"\")\n+                    explanation = \"assert \" + explanation\n+                template = ast.BinOp(assertmsg, ast.Add(), ast.Str(explanation))\n+                msg = self.pop_format_context(template)\n             fmt = self.helper(\"_format_explanation\", msg)\n             err_name = ast.Name(\"AssertionError\", ast.Load())\n             exc = ast.Call(err_name, [fmt], [])\n", "instance_id": "pytest-dev__pytest-9359"}
{"model_name_or_path": "moatless-tools-deepseek-completion-12", "model_patch": "diff --git a/django/contrib/admin/sites.py b/django/contrib/admin/sites.py\nindex 837dabfea8..bbb190f860 100644\n--- a/django/contrib/admin/sites.py\n+++ b/django/contrib/admin/sites.py\n@@ -430,7 +430,7 @@ class AdminSite:\n                     return HttpResponsePermanentRedirect(path)\n         raise Http404\n \n-    def _build_app_dict(self, request, label=None):\n+    def build_app_dict(self, request, label=None):\n         \"\"\"\n         Build the app dictionary. The optional `label` parameter filters models\n         of a specific app.\n@@ -466,6 +466,7 @@ class AdminSite:\n                 'perms': perms,\n                 'admin_url': None,\n                 'add_url': None,\n+                'model': model,  # Add model class to the dictionary\n             }\n             if perms.get('change') or perms.get('view'):\n                 model_dict['view_only'] = not perms.get('change')\n@@ -503,7 +504,7 @@ class AdminSite:\n         Return a sorted list of all the installed apps that have been\n         registered in this site.\n         \"\"\"\n-        app_dict = self._build_app_dict(request)\n+        app_dict = self.build_app_dict(request)\n \n         # Sort the apps alphabetically.\n         app_list = sorted(app_dict.values(), key=lambda x: x['name'].lower())\n", "instance_id": "django__django-13447"}
{"model_name_or_path": "moatless-tools-deepseek-completion-7", "model_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex da67263b19..c1f39d9328 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -961,7 +961,10 @@ def _recursive_to_string(doprint, arg):\n             left, right = \"()\"\n         else:\n             raise NotImplementedError(\"unhandled type: %s, %s\" % (type(arg), arg))\n-        return left +', '.join(_recursive_to_string(doprint, e) for e in arg) + right\n+        elements = ', '.join(_recursive_to_string(doprint, e) for e in arg)\n+        if isinstance(arg, tuple) and len(arg) == 1:\n+            elements += ','\n+        return left + elements + right\n     elif isinstance(arg, str):\n         return arg\n     else:\n", "instance_id": "sympy__sympy-23262"}
{"model_name_or_path": "moatless-tools-deepseek-completion-15", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 0c64748ccd..4fa04e83ed 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1663,7 +1663,9 @@ class FilePathField(Field):\n \n     def __init__(self, verbose_name=None, name=None, path='', match=None,\n                  recursive=False, allow_files=True, allow_folders=False, **kwargs):\n-        self.path, self.match, self.recursive = path, match, recursive\n+        self.path_callable = callable(path)\n+        self.path = path if callable(path) else path\n+        self.match, self.recursive = match, recursive\n         self.allow_files, self.allow_folders = allow_files, allow_folders\n         kwargs.setdefault('max_length', 100)\n         super().__init__(verbose_name, name, **kwargs)\n@@ -1697,6 +1699,8 @@ class FilePathField(Field):\n             kwargs['allow_files'] = self.allow_files\n         if self.allow_folders is not False:\n             kwargs['allow_folders'] = self.allow_folders\n+        if self.path_callable:\n+            kwargs['path_callable'] = True\n         if kwargs.get(\"max_length\") == 100:\n             del kwargs[\"max_length\"]\n         return name, path, args, kwargs\n@@ -1708,8 +1712,9 @@ class FilePathField(Field):\n         return str(value)\n \n     def formfield(self, **kwargs):\n+        path = self.path() if self.path_callable else self.path\n         return super().formfield(**{\n-            'path': self.path,\n+            'path': path,\n             'match': self.match,\n             'recursive': self.recursive,\n             'form_class': forms.FilePathField,\n", "instance_id": "django__django-10924"}
{"model_name_or_path": "moatless-tools-deepseek-completion-17", "model_patch": "diff --git a/sphinx/util/typing.py b/sphinx/util/typing.py\nindex 2d4f67bba..8e8a3f432 100644\n--- a/sphinx/util/typing.py\n+++ b/sphinx/util/typing.py\n@@ -89,6 +89,7 @@ def is_system_TypeVar(typ: Any) -> bool:\n def restify(cls: Optional[\"Type\"]) -> str:\n     \"\"\"Convert python class to a reST reference.\"\"\"\n     from sphinx.util import inspect  # lazy loading\n+    import struct\n \n     if cls is None or cls is NoneType:\n         return ':obj:`None`'\n@@ -96,6 +97,8 @@ def restify(cls: Optional[\"Type\"]) -> str:\n         return '...'\n     elif inspect.isNewType(cls):\n         return ':class:`%s`' % cls.__name__\n+    elif cls == struct.Struct:\n+        return ':class:`struct.Struct`'\n     elif cls.__module__ in ('__builtin__', 'builtins'):\n         return ':class:`%s`' % cls.__name__\n     else:\n", "instance_id": "sphinx-doc__sphinx-8627"}
{"model_name_or_path": "moatless-tools-deepseek-completion-27", "model_patch": "diff --git a/sklearn/cluster/_affinity_propagation.py b/sklearn/cluster/_affinity_propagation.py\nindex 4806afee9..a3f7c8744 100644\n--- a/sklearn/cluster/_affinity_propagation.py\n+++ b/sklearn/cluster/_affinity_propagation.py\n@@ -388,6 +388,13 @@ class AffinityPropagation(ClusterMixin, BaseEstimator):\n                 convergence_iter=self.convergence_iter, damping=self.damping,\n                 copy=self.copy, verbose=self.verbose, return_n_iter=True)\n \n+        # Check if the algorithm converged\n+        self.converged_ = self.n_iter_ < self.max_iter\n+\n+        if not self.converged_:\n+            self.labels_ = np.array([-1] * X.shape[0])\n+            self.cluster_centers_indices_ = []\n+\n         if self.affinity != \"precomputed\":\n             self.cluster_centers_ = X[self.cluster_centers_indices_].copy()\n \n", "instance_id": "scikit-learn__scikit-learn-15512"}
{"model_name_or_path": "moatless-tools-deepseek-completion-21", "model_patch": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex c49a3ce6a..25f01fc4f 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1136,6 +1136,14 @@ class _RepeatedSplits(metaclass=ABCMeta):\n             for train_index, test_index in cv.split(X, y, groups):\n                 yield train_index, test_index\n \n+    def __repr__(self):\n+        params = {\n+            'n_splits': self.cvargs.get('n_splits'),\n+            'n_repeats': self.n_repeats,\n+            'random_state': self.random_state\n+        }\n+        return f\"{self.__class__.__name__}({_pprint(params, offset=len(self.__class__.__name__))})\"\n+\n     def get_n_splits(self, X=None, y=None, groups=None):\n         \"\"\"Returns the number of splitting iterations in the cross-validator\n \n", "instance_id": "scikit-learn__scikit-learn-14983"}
{"model_name_or_path": "moatless-tools-deepseek-completion-34", "model_patch": "diff --git a/pylint/checkers/misc.py b/pylint/checkers/misc.py\nindex 69149e61a..abfa375c7 100644\n--- a/pylint/checkers/misc.py\n+++ b/pylint/checkers/misc.py\n@@ -123,7 +123,7 @@ class EncodingChecker(BaseChecker):\n         if self.config.notes_rgx:\n             regex_string = rf\"#\\s*({notes}|{self.config.notes_rgx})\\b\"\n         else:\n-            regex_string = rf\"#\\s*({notes})\\b\"\n+            regex_string = rf\"#\\s*({notes})(?!\\w)\"\n \n         self._fixme_pattern = re.compile(regex_string, re.I)\n \n", "instance_id": "pylint-dev__pylint-5859"}
{"model_name_or_path": "moatless-tools-deepseek-completion-65", "model_patch": "diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py\nindex d96e76263b..a7d9558950 100644\n--- a/sympy/utilities/iterables.py\n+++ b/sympy/utilities/iterables.py\n@@ -2106,6 +2106,7 @@ def uniq(seq, result=None):\n     >>> list(uniq([[1], [2, 1], [1]]))\n     [[1], [2, 1]]\n     \"\"\"\n+    initial_size = len(seq) if hasattr(seq, '__len__') else None\n     try:\n         seen = set()\n         result = result or []\n@@ -2122,6 +2123,8 @@ def uniq(seq, result=None):\n         else:\n             for s in uniq(seq, result):\n                 yield s\n+    if initial_size is not None and len(seq) != initial_size:\n+        raise RuntimeError(\"sequence changed size during iteration\")\n \n \n def generate_bell(n):\n", "instance_id": "sympy__sympy-18835"}
{"model_name_or_path": "moatless-tools-deepseek-completion-42", "model_patch": "diff --git a/django/db/models/enums.py b/django/db/models/enums.py\nindex bbe362a6ab..8edf011de9 100644\n--- a/django/db/models/enums.py\n+++ b/django/db/models/enums.py\n@@ -65,7 +65,8 @@ class Choices(enum.Enum, metaclass=ChoicesMeta):\n \n class IntegerChoices(int, Choices):\n     \"\"\"Class for creating enumerated integer choices.\"\"\"\n-    pass\n+    def __str__(self):\n+        return str(self.value)\n \n \n class TextChoices(str, Choices):\n@@ -73,3 +74,6 @@ class TextChoices(str, Choices):\n \n     def _generate_next_value_(name, start, count, last_values):\n         return name\n+\n+    def __str__(self):\n+        return str(self.value)\n", "instance_id": "django__django-11964"}
{"model_name_or_path": "moatless-tools-deepseek-completion-48", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 28374272f4..db6a20f29e 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -514,20 +514,19 @@ class Field(RegisterLookupMixin):\n         return self.__class__(*args, **kwargs)\n \n     def __eq__(self, other):\n-        # Needed for @total_ordering\n         if isinstance(other, Field):\n-            return self.creation_counter == other.creation_counter\n+            return self.creation_counter == other.creation_counter and self.model == other.model\n         return NotImplemented\n \n     def __lt__(self, other):\n-        # This is needed because bisect does not take a comparison function.\n         if isinstance(other, Field):\n+            if self.creation_counter == other.creation_counter:\n+                return self.model._meta.concrete_model._meta.label_lower < other.model._meta.concrete_model._meta.label_lower\n             return self.creation_counter < other.creation_counter\n         return NotImplemented\n \n     def __hash__(self):\n-        return hash(self.creation_counter)\n-\n+        return hash((self.creation_counter, self.model._meta.concrete_model._meta.label_lower))\n     def __deepcopy__(self, memodict):\n         # We don't have to deepcopy very much here, since most things are not\n         # intended to be altered after initial creation.\n", "instance_id": "django__django-13401"}
{"model_name_or_path": "moatless-tools-deepseek-completion-40", "model_patch": "diff --git a/sklearn/neighbors/nca.py b/sklearn/neighbors/nca.py\nindex 1d278b6e1..a4a26a568 100644\n--- a/sklearn/neighbors/nca.py\n+++ b/sklearn/neighbors/nca.py\n@@ -299,7 +299,7 @@ class NeighborhoodComponentsAnalysis(BaseEstimator, TransformerMixin):\n \n         # Check the preferred dimensionality of the projected space\n         if self.n_components is not None:\n-            check_scalar(self.n_components, 'n_components', int, 1)\n+            check_scalar(self.n_components, 'n_components', (int, np.integer), 1)\n \n             if self.n_components > X.shape[1]:\n                 raise ValueError('The preferred dimensionality of the '\n@@ -318,9 +318,9 @@ class NeighborhoodComponentsAnalysis(BaseEstimator, TransformerMixin):\n                                  .format(X.shape[1],\n                                          self.components_.shape[1]))\n \n-        check_scalar(self.max_iter, 'max_iter', int, 1)\n-        check_scalar(self.tol, 'tol', float, 0.)\n-        check_scalar(self.verbose, 'verbose', int, 0)\n+        check_scalar(self.max_iter, 'max_iter', (int, np.integer), 1)\n+        check_scalar(self.tol, 'tol', (float, np.floating), 0.)\n+        check_scalar(self.verbose, 'verbose', (int, np.integer), 0)\n \n         if self.callback is not None:\n             if not callable(self.callback):\ndiff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex 8747844e5..96d8ab4c9 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -443,6 +443,15 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n         # not a data type (e.g. a column named dtype in a pandas DataFrame)\n         dtype_orig = None\n \n+    # Recognize numpy integer and float types as valid integers and floats\n+    if dtype_numeric:\n+        if dtype_orig is not None and dtype_orig.kind == \"i\":\n+            dtype = int\n+        elif dtype_orig is not None and dtype_orig.kind == \"f\":\n+            dtype = float\n+        else:\n+            dtype = None\n+\n     # check if the object contains several dtypes (typically a pandas\n     # DataFrame), and store them. If not, store None.\n     dtypes_orig = None\n", "instance_id": "scikit-learn__scikit-learn-14092"}
{"model_name_or_path": "moatless-tools-deepseek-completion-80", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 0545797d5f..e1c377c89e 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -825,7 +825,7 @@ def _print_MatAdd(self, expr):\n             if s is None:\n                 s = pform     # First element\n             else:\n-                if S(item.args[0]).is_negative:\n+                if isinstance(item.args[0], Rational) and item.args[0].is_negative:\n                     s = prettyForm(*stringPict.next(s, ' '))\n                     pform = self._print(item)\n                 else:\n", "instance_id": "sympy__sympy-14817"}
{"model_name_or_path": "moatless-tools-deepseek-completion-107", "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 8642e1f151..19df9a4f29 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -962,6 +962,8 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):\n     def __init__(self, expression, output_field):\n         super().__init__(output_field=output_field)\n         self.expression = expression\n+        if isinstance(expression, Q) and expression.negated:\n+            self.expression = Value(True)\n \n     def set_source_expressions(self, exprs):\n         self.expression = exprs[0]\n", "instance_id": "django__django-15213"}
{"model_name_or_path": "moatless-tools-deepseek-completion-87", "model_patch": "diff --git a/sphinx/ext/autodoc/importer.py b/sphinx/ext/autodoc/importer.py\nindex 477aae247..b5b22cdb8 100644\n--- a/sphinx/ext/autodoc/importer.py\n+++ b/sphinx/ext/autodoc/importer.py\n@@ -298,9 +298,20 @@ def get_class_members(subject: Any, objpath: List[str], attrgetter: Callable\n             for name in getannotations(cls):\n                 name = unmangle(cls, name)\n                 if name and name not in members:\n-                    members[name] = ObjectMember(name, INSTANCEATTR, class_=cls)\n-\n-            # append instance attributes (cf. self.attr1) if analyzer knows\n+                    value = INSTANCEATTR\n+                    docstring = None\n+                    try:\n+                        modname = safe_getattr(cls, '__module__')\n+                        qualname = safe_getattr(cls, '__qualname__')\n+                        analyzer = ModuleAnalyzer.for_module(modname)\n+                        analyzer.analyze()\n+                        if (qualname, name) in analyzer.attr_docs:\n+                            docstring = '\\n'.join(analyzer.attr_docs[(qualname, name)])\n+                    except (AttributeError, PycodeError):\n+                        pass\n+                    members[name] = ObjectMember(name, value, class_=cls, docstring=docstring)\n+\n+            # append instance attributes (cf. self.attr1) if analyzerknows\n             try:\n                 modname = safe_getattr(cls, '__module__')\n                 qualname = safe_getattr(cls, '__qualname__')\n", "instance_id": "sphinx-doc__sphinx-8801"}
{"model_name_or_path": "moatless-tools-deepseek-completion-71", "model_patch": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 1dee8a23d9..3d70ef683c 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1605,6 +1605,17 @@ class DraggableOffsetBox(DraggableBase):\n         loc_in_canvas = (ox + bbox.x0, oy + bbox.y0)\n         return loc_in_canvas\n \n+    def __getstate__(self):\n+        state = self.__dict__.copy()\n+        # Remove the unpicklable entries.\n+        state.pop('canvas', None)\n+        state.pop('cids', None)\n+        return state\n+\n+    def __setstate__(self, state):\n+        self.__dict__ = state\n+        self.cids = []\n+\n \n class DraggableAnnotation(DraggableBase):\n     def __init__(self, annotation, use_blit=False):\n", "instance_id": "matplotlib__matplotlib-25311"}
{"model_name_or_path": "moatless-tools-deepseek-completion-222", "model_patch": "diff --git a/django/core/management/commands/shell.py b/django/core/management/commands/shell.py\nindex 2b306a579e..9cb8f68441 100644\n--- a/django/core/management/commands/shell.py\n+++ b/django/core/management/commands/shell.py\n@@ -82,15 +82,16 @@ class Command(BaseCommand):\n         code.interact(local=imported_objects)\n \n     def handle(self, **options):\n+        import django\n         # Execute the command and exit.\n         if options['command']:\n-            exec(options['command'])\n+            exec(options['command'], {'__name__': '__main__', 'django': django})\n             return\n \n         # Execute stdin if it has anything to read and exit.\n         # Not supported on Windows due to select.select() limitations.\n         if sys.platform != 'win32' and not sys.stdin.isatty() and select.select([sys.stdin], [], [], 0)[0]:\n-            exec(sys.stdin.read())\n+            exec(sys.stdin.read(), {'__name__': '__main__', 'django': django})\n             return\n \n         available_shells = [options['interface']] if options['interface'] else self.shells\n", "instance_id": "django__django-13660"}
{"model_name_or_path": "moatless-tools-deepseek-completion-1", "model_patch": "diff --git a/django/db/backends/postgresql/client.py b/django/db/backends/postgresql/client.py\nindex 4c9bd63546..3b5ddafaca 100644\n--- a/django/db/backends/postgresql/client.py\n+++ b/django/db/backends/postgresql/client.py\n@@ -32,9 +32,9 @@ class DatabaseClient(BaseDatabaseClient):\n             args += [\"-h\", host]\n         if port:\n             args += [\"-p\", str(port)]\n+        args.extend(parameters)\n         if dbname:\n             args += [dbname]\n-        args.extend(parameters)\n \n         env = {}\n         if passwd:\n", "instance_id": "django__django-15851"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 5d115458a1..f993bb9c98 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -100,7 +100,7 @@ def apply_limit_choices_to_to_formfield(formfield):\n     if hasattr(formfield, 'queryset') and hasattr(formfield, 'get_limit_choices_to'):\n         limit_choices_to = formfield.get_limit_choices_to()\n         if limit_choices_to is not None:\n-            formfield.queryset = formfield.queryset.complex_filter(limit_choices_to)\n+            formfield.queryset = formfield.queryset.complex_filter(limit_choices_to).distinct()\n \n \n def fields_for_model(model, fields=None, exclude=None, widgets=None,\n", "instance_id": "django__django-13315"}
{"model_name_or_path": "moatless-tools-deepseek-completion-152", "model_patch": "diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py\nindex 2154a46320..217f56311c 100644\n--- a/django/urls/resolvers.py\n+++ b/django/urls/resolvers.py\n@@ -367,6 +367,8 @@ class URLPattern:\n         return callback.__module__ + \".\" + callback.__qualname__\n \n \n+from django.http import Http404\n+\n class URLResolver:\n     def __init__(self, pattern, urlconf_name, default_kwargs=None, app_name=None, namespace=None):\n         self.pattern = pattern\n@@ -546,6 +548,12 @@ class URLResolver:\n                         tried.extend([pattern] + t for t in sub_tried)\n                     else:\n                         tried.append([pattern])\n+                except Http404 as e:\n+                    if settings.DEBUG:\n+                        from django.views import debug\n+                        raise Resolver404({'tried': tried, 'path': new_path}) from e\n+                    else:\n+                        raise\n                 else:\n                     if sub_match:\n                         # Merge captured arguments in match with submatch\n", "instance_id": "django__django-11620"}
{"model_name_or_path": "moatless-tools-deepseek-completion-1", "model_patch": "diff --git a/django/contrib/admin/views/autocomplete.py b/django/contrib/admin/views/autocomplete.py\nindex 3903e4c98c..593bb371dd 100644\n--- a/django/contrib/admin/views/autocomplete.py\n+++ b/django/contrib/admin/views/autocomplete.py\n@@ -26,12 +26,14 @@ class AutocompleteJsonView(BaseListView):\n         context = self.get_context_data()\n         return JsonResponse({\n             'results': [\n-                {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}\n-                for obj in context['object_list']\n+                self.serialize_result(obj, to_field_name) for obj in context['object_list']\n             ],\n             'pagination': {'more': context['page_obj'].has_next()},\n         })\n \n+    def serialize_result(self, obj, to_field_name):\n+        return {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}\n+\n     def get_paginator(self, *args, **kwargs):\n         \"\"\"Use the ModelAdmin's paginator.\"\"\"\n         return self.model_admin.get_paginator(self.request, *args, **kwargs)\n", "instance_id": "django__django-14752"}
{"model_name_or_path": "moatless-tools-deepseek-completion-157", "model_patch": "diff --git a/xarray/core/concat.py b/xarray/core/concat.py\nindex ecae2566..8f6c67b8 100644\n--- a/xarray/core/concat.py\n+++ b/xarray/core/concat.py\n@@ -312,15 +312,9 @@ def _dataset_concat(\n         to_merge = {var: [] for var in variables_to_merge}\n \n         for ds in datasets:\n-            absent_merge_vars = variables_to_merge - set(ds.variables)\n-            if absent_merge_vars:\n-                raise ValueError(\n-                    \"variables %r are present in some datasets but not others. \"\n-                    % absent_merge_vars\n-                )\n-\n             for var in variables_to_merge:\n-                to_merge[var].append(ds.variables[var])\n+                if var in ds.variables:\n+                    to_merge[var].append(ds.variables[var])\n \n         for var in variables_to_merge:\n             result_vars[var] = unique_variable(\n", "instance_id": "pydata__xarray-3364"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex 57676428ff..2378a27077 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -257,12 +257,14 @@ class BaseFormSet(RenderableFormMixin):\n \n     @property\n     def empty_form(self):\n+        form_kwargs = self.get_form_kwargs(None)\n+        form_kwargs.pop('empty_permitted', None)\n         form = self.form(\n             auto_id=self.auto_id,\n             prefix=self.add_prefix(\"__prefix__\"),\n             empty_permitted=True,\n             use_required_attribute=False,\n-            **self.get_form_kwargs(None),\n+            **form_kwargs,\n             renderer=self.renderer,\n         )\n         self.add_fields(form, None)\n", "instance_id": "django__django-16041"}
{"model_name_or_path": "moatless-tools-deepseek-completion-243", "model_patch": "diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py\nindex 762e5761d..ac1c49760 100644\n--- a/src/_pytest/assertion/util.py\n+++ b/src/_pytest/assertion/util.py\n@@ -259,9 +259,14 @@ def _compare_eq_sequence(left, right, verbose=0):\n     len_right = len(right)\n     for i in range(min(len_left, len_right)):\n         if left[i] != right[i]:\n-            explanation += [\n-                \"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])\n-            ]\n+            if isinstance(left, bytes) and isinstance(right, bytes):\n+                explanation += [\n+                    \"At index {} diff: b'{}' != b'{}'\".format(i, left[i:i+1].decode('latin1'), right[i:i+1].decode('latin1'))\n+                ]\n+            else:\n+                explanation += [\n+                    \"At index {} diff: {!r} != {!r}\".format(i, left[i], right[i])\n+                ]\n             break\n     len_diff = len_left - len_right\n \n@@ -275,14 +280,25 @@ def _compare_eq_sequence(left, right, verbose=0):\n             extra = saferepr(right[len_left])\n \n         if len_diff == 1:\n-            explanation += [\n-                \"{} contains one more item: {}\".format(dir_with_more, extra)\n-            ]\n+            if isinstance(left, bytes) and isinstance(right, bytes):\n+                explanation += [\n+                    \"{} contains one more item: b'{}'\".format(dir_with_more, extra.decode('latin1'))\n+                ]\n+            else:\n+                explanation += [\n+                    \"{} contains one more item: {}\".format(dir_with_more, extra)\n+                ]\n         else:\n-            explanation += [\n-                \"%s contains %d more items, first extra item: %s\"\n-                % (dir_with_more, len_diff, extra)\n-            ]\n+            if isinstance(left, bytes) and isinstance(right, bytes):\n+                explanation += [\n+                    \"%s contains %d more items, first extra item: b'%s'\"\n+                    % (dir_with_more, len_diff, extra.decode('latin1'))\n+                ]\n+            else:\n+                explanation += [\n+                    \"%s contains %d more items, first extra item: %s\"\n+                    % (dir_with_more, len_diff, extra)\n+                ]\n     return explanation\n \n \n", "instance_id": "pytest-dev__pytest-5495"}
{"model_name_or_path": "moatless-tools-deepseek-completion-209", "model_patch": "diff --git a/sphinx/domains/std.py b/sphinx/domains/std.py\nindex c87217c56..1e1bd62d6 100644\n--- a/sphinx/domains/std.py\n+++ b/sphinx/domains/std.py\n@@ -191,11 +191,14 @@ class Cmdoption(ObjectDescription):\n             potential_option = potential_option.strip()\n             m = option_desc_re.match(potential_option)\n             if not m:\n-                logger.warning(__('Malformed option description %r, should '\n-                                  'look like \"opt\", \"-opt args\", \"--opt args\", '\n-                                  '\"/opt args\" or \"+opt args\"'), potential_option,\n-                               location=signode)\n-                continue\n+                # Allow any non-whitespace characters before an optional '=' and any characters afterwards\n+                m = re.match(r'([^\\s=]+)(=?\\s*.*)', potential_option)\n+                if not m:\n+                    logger.warning(__('Malformed option description %r, should '\n+                                      'look like \"opt\", \"-opt args\", \"--opt args\", '\n+                                      '\"/opt args\" or \"+opt args\"'), potential_option,\n+                                   location=signode)\n+                    continue\n             optname, args = m.groups()\n             if count:\n                 signode += addnodes.desc_addname(', ', ', ')\n", "instance_id": "sphinx-doc__sphinx-8506"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/django/core/checks/translation.py b/django/core/checks/translation.py\nindex 138ed07ff8..ae93b5d7e1 100644\n--- a/django/core/checks/translation.py\n+++ b/django/core/checks/translation.py\n@@ -56,6 +56,7 @@ def check_setting_languages_bidi(app_configs, **kwargs):\n def check_language_settings_consistent(app_configs, **kwargs):\n     \"\"\"Error if language settings are not consistent with each other.\"\"\"\n     available_tags = {i for i, _ in settings.LANGUAGES} | {'en-us'}\n-    if settings.LANGUAGE_CODE not in available_tags:\n+    base_language = settings.LANGUAGE_CODE.split('-')[0]\n+    if settings.LANGUAGE_CODE not in available_tags and base_language not in available_tags:\n         return [E004]\n     return []\n", "instance_id": "django__django-12286"}
{"model_name_or_path": "moatless-tools-deepseek-completion-224", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 71a52fb754..62cc2310fb 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1221,7 +1221,18 @@ class QuerySet:\n         if fields == (None,):\n             clone.query.clear_deferred_loading()\n         else:\n-            clone.query.add_deferred_loading(fields)\n+            existing, defer = clone.query.deferred_loading\n+            if defer:\n+                # Add to existing deferred names.\n+                clone.query.deferred_loading = existing.union(fields), True\n+            else:\n+                # Remove names from the set of any existing \"immediate load\" names.\n+                immediate_fields = existing.difference(fields)\n+                deferred_fields = set(fields).difference(existing)\n+                if immediate_fields:\n+                    clone.query.deferred_loading = immediate_fields, False\n+                else:\n+                    clone.query.deferred_loading = deferred_fields, True\n         return clone\n \n     def only(self, *fields):\n@@ -1243,6 +1254,11 @@ class QuerySet:\n                 raise ValueError('only() is not supported with FilteredRelation.')\n         clone = self._chain()\n         clone.query.add_immediate_loading(fields)\n+        # Ensure that calling only() followed by defer() on the same fields\n+        # results in immediate loading for the fields that are not deferred again.\n+        current_deferred = set(filter(None, self.query.deferred_loading[0])) if self.query.deferred_loading[1] else set()\n+        new_immediate_fields = set(fields) - current_deferred\n+        clone.query.add_immediate_loading(new_immediate_fields)\n         return clone\n \n     def using(self, alias):\n", "instance_id": "django__django-14667"}
{"model_name_or_path": "moatless-tools-deepseek-completion-13", "model_patch": "diff --git a/sphinx/environment/adapters/indexentries.py b/sphinx/environment/adapters/indexentries.py\nindex 5af213932..43599331b 100644\n--- a/sphinx/environment/adapters/indexentries.py\n+++ b/sphinx/environment/adapters/indexentries.py\n@@ -108,9 +108,11 @@ class IndexEntries:\n             lckey = unicodedata.normalize('NFD', key.lower())\n             if lckey.startswith('\\N{RIGHT-TO-LEFT MARK}'):\n                 lckey = lckey[1:]\n-            if lckey[0:1].isalpha() or lckey.startswith('_'):\n+            if not lckey[0:1].isalpha() and not lckey.startswith('_'):\n+                lckey = _('Symbols')\n+            else:\n                 lckey = chr(127) + lckey\n-            # ensure a determinstic order *within* letters by also sorting on\n+            # ensure a deterministic order *within* letters by also sorting on\n             # the entry itself\n             return (lckey, entry[0])\n         newlist = sorted(new.items(), key=keyfunc)\n", "instance_id": "sphinx-doc__sphinx-7975"}
{"model_name_or_path": "moatless-tools-deepseek-completion-2", "model_patch": "diff --git a/django/utils/decorators.py b/django/utils/decorators.py\nindex 5c9a5d01c7..0c30c0f31b 100644\n--- a/django/utils/decorators.py\n+++ b/django/utils/decorators.py\n@@ -38,6 +38,7 @@ def _multi_decorate(decorators, method):\n         # 'func'. Also, wrap method.__get__() in a function because new\n         # attributes can't be set on bound method objects, only on functions.\n         bound_method = partial(method.__get__(self, type(self)))\n+        update_wrapper(bound_method, method)  # Update the partial with method's attributes\n         for dec in decorators:\n             bound_method = dec(bound_method)\n         return bound_method(*args, **kwargs)\n", "instance_id": "django__django-14787"}
{"model_name_or_path": "moatless-tools-deepseek-completion-2", "model_patch": "diff --git a/django/contrib/staticfiles/handlers.py b/django/contrib/staticfiles/handlers.py\nindex 711d8864ad..90f486075d 100644\n--- a/django/contrib/staticfiles/handlers.py\n+++ b/django/contrib/staticfiles/handlers.py\n@@ -1,5 +1,6 @@\n from urllib.parse import urlparse\n from urllib.request import url2pathname\n+from asgiref.sync import sync_to_async\n \n from django.conf import settings\n from django.contrib.staticfiles import utils\n@@ -86,3 +87,9 @@ class ASGIStaticFilesHandler(StaticFilesHandlerMixin, ASGIHandler):\n             return await super().__call__(scope, receive, send)\n         # Hand off to the main app\n         return await self.application(scope, receive, send)\n+\n+    async def get_response_async(self, request):\n+        try:\n+            return await sync_to_async(self.get_response)(request)\n+        except Http404:\n+            return None\n", "instance_id": "django__django-12915"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex 3daf84c108..b31c77ce16 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -11,6 +11,7 @@\n from sympy.core.singleton import S\n from sympy.physics.units.dimensions import _QuantityMapper\n from sympy.physics.units.quantities import Quantity\n+from sympy.functions.elementary.exponential import exp\n \n from .dimensions import Dimension\n \n@@ -192,6 +193,9 @@ def _collect_factor_and_dimension(self, expr):\n         elif isinstance(expr, Function):\n             fds = [self._collect_factor_and_dimension(\n                 arg) for arg in expr.args]\n+            if isinstance(expr, exp):\n+                if all(self.get_dimension_system().is_dimensionless(d[1]) for d in fds):\n+                    return expr.func(*(f[0] for f in fds)), Dimension(1)\n             return (expr.func(*(f[0] for f in fds)),\n                     *(d[1] for d in fds))\n         elif isinstance(expr, Dimension):\n", "instance_id": "sympy__sympy-24066"}
{"model_name_or_path": "moatless-tools-deepseek-completion-18", "model_patch": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex e6b7d4d821..04c8f27328 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -90,6 +90,8 @@ class SafeExceptionReporterFilter:\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, (list, tuple, set)):\n+                cleansed = type(value)(self.cleanse_setting(key, item) for item in value)\n             else:\n                 cleansed = value\n         except TypeError:\n", "instance_id": "django__django-12700"}
{"model_name_or_path": "moatless-tools-deepseek-completion-21", "model_patch": "diff --git a/sympy/core/expr.py b/sympy/core/expr.py\nindex 24d89897f7..a648dd64de 100644\n--- a/sympy/core/expr.py\n+++ b/sympy/core/expr.py\n@@ -120,14 +120,14 @@ def _hashable_content(self):\n         return self._args\n \n     def __eq__(self, other):\n+        if not isinstance(other, Expr):\n+            return False\n         try:\n             other = sympify(other)\n-            if not isinstance(other, Expr):\n-                return False\n         except (SympifyError, SyntaxError):\n             return False\n         # check for pure number expr\n-        if  not (self.is_Number and other.is_Number) and (\n+        if not (self.is_Number and other.is_Number) and (\n                 type(self) != type(other)):\n             return False\n         a, b = self._hashable_content(), other._hashable_content()\n", "instance_id": "sympy__sympy-18057"}
{"model_name_or_path": "moatless-tools-deepseek-completion-19", "model_patch": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex 33cc636b22..d601beb53a 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -738,7 +738,7 @@ class Query(BaseExpression):\n         for field_name in field_names:\n             parts = field_name.split(LOOKUP_SEP)\n             cur_model = self.model._meta.concrete_model\n-            opts = orig_opts\n+            opts = orig_opts.concrete_model._meta\n             for name in parts[:-1]:\n                 old_model = cur_model\n                 if name in self._filtered_relations:\n@@ -748,7 +748,7 @@ class Query(BaseExpression):\n                     cur_model = source.related_model\n                 else:\n                     cur_model = source.remote_field.model\n-                opts = cur_model._meta\n+                opts = cur_model._meta.concrete_model._meta\n                 # Even if we're \"just passing through\" this model, we must add\n                 # both the current model's pk and the related reference field\n                 # (if it's not a reverse relation) to the things we select.\n@@ -796,7 +796,7 @@ class Query(BaseExpression):\n             # Now ensure that every model in the inheritance chain is mentioned\n             # in the parent list. Again, it must be mentioned to ensure that\n             # only \"must include\" fields are pulled in.\n-            for model in orig_opts.get_parent_list():\n+            for model in orig_opts.concrete_model._meta.get_parent_list():\n                 seen.setdefault(model, set())\n             for model, fields in seen.items():\n                 target[model] = {f.attname for f in fields}\n", "instance_id": "django__django-15814"}
{"model_name_or_path": "moatless-tools-deepseek-completion-13", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 4038859cfa..356fed838a 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -1302,21 +1302,22 @@ class Model(metaclass=ModelBase):\n             not settings.is_overridden('DEFAULT_AUTO_FIELD') and\n             not cls._meta.app_config._is_default_auto_field_overridden\n         ):\n-            return [\n-                checks.Warning(\n-                    f\"Auto-created primary key used when not defining a \"\n-                    f\"primary key type, by default \"\n-                    f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n-                    hint=(\n-                        f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n-                        f\"{cls._meta.app_config.__class__.__qualname__}.\"\n-                        f\"default_auto_field attribute to point to a subclass \"\n-                        f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+            if not cls._meta.parents or (cls._meta.parents and cls._meta.pk != list(cls._meta.parents.values())[0]):\n+                return [\n+                    checks.Warning(\n+                        f\"Auto-created primary key used when not defining a \"\n+                        f\"primary key type, by default \"\n+                        f\"'{settings.DEFAULT_AUTO_FIELD}'.\",\n+                        hint=(\n+                            f\"Configure the DEFAULT_AUTO_FIELD setting or the \"\n+                            f\"{cls._meta.app_config.__class__.__qualname__}.\"\n+                            f\"default_auto_field attribute to point to a subclass \"\n+                            f\"of AutoField, e.g. 'django.db.models.BigAutoField'.\"\n+                        ),\n+                        obj=cls,\n+                        id='models.W042',\n                     ),\n-                    obj=cls,\n-                    id='models.W042',\n-                ),\n-            ]\n+                ]\n         return []\n \n     @classmethod\n", "instance_id": "django__django-13925"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/sklearn/svm/base.py b/sklearn/svm/base.py\nindex 64cebe837..55664789b 100644\n--- a/sklearn/svm/base.py\n+++ b/sklearn/svm/base.py\n@@ -286,12 +286,15 @@ class BaseLibSVM(BaseEstimator, metaclass=ABCMeta):\n             n_class = 1\n         n_SV = self.support_vectors_.shape[0]\n \n-        dual_coef_indices = np.tile(np.arange(n_SV), n_class)\n-        dual_coef_indptr = np.arange(0, dual_coef_indices.size + 1,\n-                                     dual_coef_indices.size / n_class)\n-        self.dual_coef_ = sp.csr_matrix(\n-            (dual_coef_data, dual_coef_indices, dual_coef_indptr),\n-            (n_class, n_SV))\n+        if n_SV == 0:\n+            self.dual_coef_ = sp.csr_matrix([])\n+        else:\n+            dual_coef_indices = np.tile(np.arange(n_SV), n_class)\n+            dual_coef_indptr = np.arange(0, dual_coef_indices.size + 1,\n+                                         dual_coef_indices.size / n_class)\n+            self.dual_coef_ = sp.csr_matrix(\n+                (dual_coef_data, dual_coef_indices, dual_coef_indptr),\n+                (n_class, n_SV))\n \n     def predict(self, X):\n         \"\"\"Perform regression on samples in X.\n", "instance_id": "scikit-learn__scikit-learn-14894"}
{"model_name_or_path": "moatless-tools-deepseek-completion-9", "model_patch": "diff --git a/src/_pytest/junitxml.py b/src/_pytest/junitxml.py\nindex 15c630b1d..b05d557c3 100644\n--- a/src/_pytest/junitxml.py\n+++ b/src/_pytest/junitxml.py\n@@ -657,6 +657,12 @@ class LogXML:\n         )\n         logfile.write('<?xml version=\"1.0\" encoding=\"utf-8\"?>')\n \n+        import socket\n+        import datetime\n+\n+        hostname = socket.gethostname()\n+        timestamp = datetime.datetime.now().isoformat()\n+\n         suite_node = Junit.testsuite(\n             self._get_global_properties_node(),\n             [x.to_xml() for x in self.node_reporters_ordered],\n@@ -666,6 +672,8 @@ class LogXML:\n             skipped=self.stats[\"skipped\"],\n             tests=numtests,\n             time=\"%.3f\" % suite_time_delta,\n+            hostname=hostname,\n+            timestamp=timestamp,\n         )\n         logfile.write(Junit.testsuites([suite_node]).unicode(indent=0))\n         logfile.close()\n", "instance_id": "pytest-dev__pytest-5692"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py\nindex 488d6a77cd..e952af3fdc 100644\n--- a/django/utils/numberformat.py\n+++ b/django/utils/numberformat.py\n@@ -68,7 +68,7 @@ def format(\n             str_number = \"{:f}\".format(number)\n     else:\n         str_number = str(number)\n-    if str_number[0] == \"-\":\n+    if str_number and str_number[0] == \"-\":\n         sign = \"-\"\n         str_number = str_number[1:]\n     # decimal part\n", "instance_id": "django__django-16046"}
{"model_name_or_path": "moatless-tools-deepseek-completion-2", "model_patch": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 5bbb786984..7f02e03601 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -2426,9 +2426,12 @@ class Figure(FigureBase):\n             if isinstance(tight_layout, dict):\n                 self.get_layout_engine().set(**tight_layout)\n         elif constrained_layout is not None:\n-            self.set_layout_engine(layout='constrained')\n-            if isinstance(constrained_layout, dict):\n-                self.get_layout_engine().set(**constrained_layout)\n+            if constrained_layout is False:\n+                self.set_layout_engine(layout='none')\n+            else:\n+                self.set_layout_engine(layout='constrained')\n+                if isinstance(constrained_layout, dict):\n+                    self.get_layout_engine().set(**constrained_layout)\n         else:\n             # everything is None, so use default:\n             self.set_layout_engine(layout=layout)\n", "instance_id": "matplotlib__matplotlib-23987"}
{"model_name_or_path": "moatless-tools-deepseek-completion-1", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 27b5cbd379..2935120918 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -120,9 +120,9 @@ class EnumSerializer(BaseSerializer):\n     def serialize(self):\n         enum_class = self.value.__class__\n         module = enum_class.__module__\n-        v_string, v_imports = serializer_factory(self.value.value).serialize()\n-        imports = {'import %s' % module, *v_imports}\n-        return \"%s.%s(%s)\" % (module, enum_class.__name__, v_string), imports\n+        name = self.value.name\n+        imports = {'import %s' % module}\n+        return \"%s.%s['%s']\" % (module, enum_class.__name__, name), imports\n \n \n class FloatSerializer(BaseSimpleSerializer):\n", "instance_id": "django__django-11815"}
{"model_name_or_path": "moatless-tools-deepseek-completion-1", "model_patch": "diff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py\nindex 34c6ddb861..c069726683 100644\n--- a/lib/matplotlib/cbook/__init__.py\n+++ b/lib/matplotlib/cbook/__init__.py\n@@ -1746,7 +1746,10 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):\n         raise RuntimeError(\"matplotlib does not \"\n                            \"support generators as input\")\n     else:\n-        return next(val for val in obj if safe_isfinite(val))\n+        for val in obj:\n+            if safe_isfinite(val):\n+                return val\n+        return np.nan\n \n \n def sanitize_sequence(data):\n", "instance_id": "matplotlib__matplotlib-24149"}
{"model_name_or_path": "moatless-tools-deepseek-completion-3", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 901918674a..8923ff6791 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1438,7 +1438,7 @@ def _print_MatrixBase(self, expr):\n \n     def _print_MatrixElement(self, expr):\n         return self.parenthesize(expr.parent, PRECEDENCE[\"Atom\"], strict=True) \\\n-            + '_{%s, %s}' % (expr.i, expr.j)\n+            + '_{%s, %s}' % (self._print(expr.i), self._print(expr.j))\n \n     def _print_MatrixSlice(self, expr):\n         def latexslice(x):\n", "instance_id": "sympy__sympy-15609"}
{"model_name_or_path": "moatless-tools-deepseek-completion-1", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex d85d79617..be5117cf2 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -780,6 +780,8 @@ class Documenter:\n                 if (self.options.members is ALL and\n                         is_filtered_inherited_member(membername, obj)):\n                     keep = False\n+                elif isinstance(self, ModuleDocumenter) and self.__all__ is not None and not self.__all__:\n+                    keep = False\n                 else:\n                     # ignore undocumented members if :undoc-members: is not given\n                     keep = has_doc or self.options.undoc_members\n", "instance_id": "sphinx-doc__sphinx-8595"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\nindex af0815d41d..a1b398565b 100644\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -2024,6 +2024,8 @@ class Axis(martist.Artist):\n         result = self._set_tick_locations(ticks, minor=minor)\n         if labels is not None:\n             self.set_ticklabels(labels, minor=minor, **kwargs)\n+        else:\n+            kwtrans = self._translate_tick_params(kwargs)\n         return result\n \n     def _get_tick_boxes_siblings(self, renderer):\n", "instance_id": "matplotlib__matplotlib-24334"}
{"model_name_or_path": "moatless-tools-deepseek-completion-24", "model_patch": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 425db22c..178d204e 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -88,7 +88,7 @@ class SessionRedirectMixin(object):\n         i = 0\n \n         while resp.is_redirect:\n-            prepared_request = req.copy()\n+            prepared_request = req.copy() if i == 0 else resp.request.copy()\n \n             resp.content  # Consume socket so it can be released\n \n@@ -99,7 +99,7 @@ class SessionRedirectMixin(object):\n             resp.close()\n \n             url = resp.headers['location']\n-            method = req.method\n+            method = prepared_request.method\n \n             # Handle redirection without scheme (see: RFC 1808 Section 4)\n             if url.startswith('//'):\n", "instance_id": "psf__requests-1963"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex 1ba093e51f..095ad0ccf0 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -344,7 +344,12 @@ class ManagementUtility:\n         # Preprocess options to extract --settings and --pythonpath.\n         # These options could affect the commands that are available, so they\n         # must be processed early.\n-        parser = CommandParser(usage='%(prog)s subcommand [options] [args]', add_help=False, allow_abbrev=False)\n+        parser = CommandParser(\n+            prog=self.prog_name,\n+            usage='%(prog)s subcommand [options] [args]',\n+            add_help=False,\n+            allow_abbrev=False\n+        )\n         parser.add_argument('--settings')\n         parser.add_argument('--pythonpath')\n         parser.add_argument('args', nargs='*')  # catch-all\n", "instance_id": "django__django-13658"}
{"model_name_or_path": "moatless-tools-deepseek-completion-33", "model_patch": "diff --git a/seaborn/_oldcore.py b/seaborn/_oldcore.py\nindex c9218c1f..9afa5ee8 100644\n--- a/seaborn/_oldcore.py\n+++ b/seaborn/_oldcore.py\n@@ -154,7 +154,7 @@ class HueMapping(SemanticMapping):\n             try:\n                 normed = self.norm(key)\n             except TypeError as err:\n-                if np.isnan(key):\n+                if isinstance(key, (str, pd.CategoricalDtype)):\n                     value = (0, 0, 0, 0)\n                 else:\n                     raise err\ndiff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 8526f44b..2f1bd6ea 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1332,6 +1332,12 @@ class PairGrid(Grid):\n         indices = zip(row_indices.flat, col_indices.flat)\n         self._map_bivariate(func, indices, **kwargs)\n \n+        if \"hue\" in kwargs:\n+            self._hue_var = kwargs[\"hue\"]\n+            hue_data = kwargs.pop(\"hue\", None)\n+            self.hue_vals = self.data[hue_data] if hue_data in self.data else hue_data\n+            self.palette = self._get_palette(self.data, self._hue_var, self._hue_order, self._orig_palette)\n+\n         return self\n \n     def map_lower(self, func, **kwargs):\n", "instance_id": "mwaskom__seaborn-2848"}
{"model_name_or_path": "moatless-tools-deepseek-completion-1", "model_patch": "diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py\nindex 92fe4affb9..3a462f1c4c 100644\n--- a/django/db/models/deletion.py\n+++ b/django/db/models/deletion.py\n@@ -277,6 +277,7 @@ class Collector:\n             if self.can_fast_delete(instance):\n                 with transaction.mark_for_rollback_on_error():\n                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)\n+                setattr(instance, model._meta.pk.attname, None)\n                 return count, {model._meta.label: count}\n \n         with transaction.atomic(using=self.using, savepoint=False):\n", "instance_id": "django__django-11179"}
{"model_name_or_path": "moatless-tools-deepseek-completion-8", "model_patch": "diff --git a/src/_pytest/pathlib.py b/src/_pytest/pathlib.py\nindex e43310ef0..e24a0f991 100644\n--- a/src/_pytest/pathlib.py\n+++ b/src/_pytest/pathlib.py\n@@ -520,22 +520,24 @@ def import_path(\n \n     if not path.exists():\n         raise ImportError(path)\n-\n     if mode is ImportMode.importlib:\n         module_name = module_name_from_path(path, root)\n \n-        for meta_importer in sys.meta_path:\n-            spec = meta_importer.find_spec(module_name, [str(path.parent)])\n-            if spec is not None:\n-                break\n+        if module_name in sys.modules:\n+            mod = sys.modules[module_name]\n         else:\n-            spec = importlib.util.spec_from_file_location(module_name, str(path))\n-\n-        if spec is None:\n-            raise ImportError(f\"Can't find module {module_name} at location {path}\")\n-        mod = importlib.util.module_from_spec(spec)\n-        sys.modules[module_name] = mod\n-        spec.loader.exec_module(mod)  # type: ignore[union-attr]\n+            for meta_importer in sys.meta_path:\n+                spec = meta_importer.find_spec(module_name, [str(path.parent)])\n+                if spec is not None:\n+                    break\n+            else:\n+                spec = importlib.util.spec_from_file_location(module_name, str(path))\n+\n+            if spec is None:\n+                raise ImportError(f\"Can't find module {module_name} at location {path}\")\n+            mod = importlib.util.module_from_spec(spec)\n+            sys.modules[module_name] = mod\n+            spec.loader.exec_module(mod)  # type: ignore[union-attr]\n         insert_missing_modules(sys.modules, module_name)\n         return mod\n \n", "instance_id": "pytest-dev__pytest-11148"}
{"model_name_or_path": "moatless-tools-deepseek-completion-31", "model_patch": "diff --git a/django/forms/utils.py b/django/forms/utils.py\nindex 905babce4d..a9215a2d81 100644\n--- a/django/forms/utils.py\n+++ b/django/forms/utils.py\n@@ -65,10 +65,7 @@ class RenderableMixin:\n         renderer = renderer or self.renderer\n         template = template_name or self.template_name\n         context = context or self.get_context()\n-        if (\n-            template == \"django/forms/default.html\"\n-            or template == \"django/forms/formsets/default.html\"\n-        ):\n+        if template == \"django/forms/formsets/default.html\":\n             warnings.warn(\n                 DEFAULT_TEMPLATE_DEPRECATION_MSG, RemovedInDjango50Warning, stacklevel=2\n             )\n", "instance_id": "django__django-15902"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 422bc5d178..a6ef20cf44 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1284,7 +1284,7 @@ class ModelChoiceField(ChoiceField):\n                 value = getattr(value, key)\n             value = self.queryset.get(**{key: value})\n         except (ValueError, TypeError, self.queryset.model.DoesNotExist):\n-            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice')\n+            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice', params={'value': value})\n         return value\n \n     def validate(self, value):\n", "instance_id": "django__django-13933"}
{"model_name_or_path": "moatless-tools-deepseek-completion-11", "model_patch": "diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py\nindex 7ca0d68fae..e41a30fa66 100644\n--- a/django/utils/autoreload.py\n+++ b/django/utils/autoreload.py\n@@ -103,7 +103,11 @@ def iter_all_python_module_files():\n     # aren't loaded on the fly.\n     keys = sorted(sys.modules)\n     modules = tuple(m for m in map(sys.modules.__getitem__, keys) if not isinstance(m, weakref.ProxyTypes))\n-    return iter_modules_and_files(modules, frozenset(_error_files))\n+    extra_files = frozenset(_error_files)\n+    manage_py_path = pathlib.Path(sys.argv[0]).resolve().absolute()\n+    if manage_py_path.exists():\n+        extra_files |= {manage_py_path}\n+    return iter_modules_and_files(modules, extra_files)\n \n \n @functools.lru_cache(maxsize=1)\n", "instance_id": "django__django-11422"}
{"model_name_or_path": "moatless-tools-deepseek-completion-2", "model_patch": "diff --git a/sklearn/mixture/bayesian_mixture.py b/sklearn/mixture/bayesian_mixture.py\nindex aef6828fa..c1d277d43 100644\n--- a/sklearn/mixture/bayesian_mixture.py\n+++ b/sklearn/mixture/bayesian_mixture.py\n@@ -783,3 +783,18 @@ class BayesianGaussianMixture(BaseMixture):\n                                       self.precisions_cholesky_.T)\n         else:\n             self.precisions_ = self.precisions_cholesky_ ** 2\n+\n+    def fit_predict(self, X):\n+        \"\"\"Fit and then predict labels for data.\n+\n+        Parameters\n+        ----------\n+        X : array-like, shape (n_samples, n_features)\n+\n+        Returns\n+        -------\n+        labels : array, shape (n_samples,)\n+            Predicted labels for the input data.\n+        \"\"\"\n+        self.fit(X)\n+        return self.predict(X)\ndiff --git a/sklearn/mixture/gaussian_mixture.py b/sklearn/mixture/gaussian_mixture.py\nindex d58a9e326..a7ee61de0 100644\n--- a/sklearn/mixture/gaussian_mixture.py\n+++ b/sklearn/mixture/gaussian_mixture.py\n@@ -748,3 +748,18 @@ class GaussianMixture(BaseMixture):\n             The lower the better.\n         \"\"\"\n         return -2 * self.score(X) * X.shape[0] + 2 * self._n_parameters()\n+\n+    def fit_predict(self, X):\n+        \"\"\"Fit and then predict labels for data.\n+\n+        Parameters\n+        ----------\n+        X : array-like, shape (n_samples, n_features)\n+\n+        Returns\n+        -------\n+        labels : array, shape (n_samples,)\n+            Predicted labels for the input data.\n+        \"\"\"\n+        self.fit(X)\n+        return self.predict(X)\ndiff --git a/sklearn/mixture/gmm.py b/sklearn/mixture/gmm.py\nindex b3c231314..8dabee8f1 100644\n--- a/sklearn/mixture/gmm.py\n+++ b/sklearn/mixture/gmm.py\n@@ -450,7 +450,7 @@ class _GMMBase(BaseEstimator):\n         -------\n         C : array, shape = (n_samples,) component memberships\n         \"\"\"\n-        return self._fit(X, y).argmax(axis=1)\n+        return self.fit(X).predict(X)\n \n     def _fit(self, X, y=None, do_prediction=False):\n         \"\"\"Estimate model parameters with the EM algorithm.\n", "instance_id": "scikit-learn__scikit-learn-11281"}
{"model_name_or_path": "moatless-tools-deepseek-completion-24", "model_patch": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex 289e1afce..77ba92ba5 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -91,9 +91,20 @@ def expand_modules(\n             except ImportError:\n                 modname = os.path.splitext(basename)[0]\n             if os.path.isdir(something):\n-                filepath = os.path.join(something, \"__init__.py\")\n+                filepath = something\n             else:\n                 filepath = something\n+            # Add specific condition to handle cases where a module shares the same name as its parent directory\n+            if os.path.isdir(something) and os.path.basename(something) == os.path.splitext(basename)[0]:\n+                try:\n+                    filepath = modutils.file_from_modpath(\n+                        modname.split(\".\"), path=additional_search_path\n+                    )\n+                    if filepath is None:\n+                        continue\n+                except (ImportError, SyntaxError) as ex:\n+                    errors.append({\"key\": \"fatal\", \"mod\": modname, \"ex\": ex})\n+                    continue\n         else:\n             # suppose it's a module or package\n             modname = something\n", "instance_id": "pylint-dev__pylint-7114"}
{"model_name_or_path": "moatless-tools-deepseek-completion-7", "model_patch": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 8ea6c05ef9..ece3e7061d 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -945,7 +945,7 @@ class Model(metaclass=ModelBase):\n \n     def _get_FIELD_display(self, field):\n         value = getattr(self, field.attname)\n-        choices_dict = dict(make_hashable(field.flatchoices))\n+        choices_dict = dict(make_hashable(self._meta.get_field(field.name).flatchoices))\n         # force_str() to coerce lazy strings.\n         return force_str(choices_dict.get(make_hashable(value), value), strings_only=True)\n \n", "instance_id": "django__django-12284"}
{"model_name_or_path": "moatless-tools-deepseek-completion-68", "model_patch": "diff --git a/sympy/functions/elementary/complexes.py b/sympy/functions/elementary/complexes.py\nindex b34ca3a7de..596781d7b7 100644\n--- a/sympy/functions/elementary/complexes.py\n+++ b/sympy/functions/elementary/complexes.py\n@@ -11,6 +11,7 @@\n from sympy.functions.elementary.miscellaneous import sqrt\n from sympy.functions.elementary.piecewise import Piecewise\n from sympy.functions.elementary.trigonometric import atan, atan2\n+from sympy.assumptions import ask, Q  # type: ignore\n \n ###############################################################################\n ######################### REAL and IMAGINARY PARTS ############################\n@@ -769,6 +770,16 @@ def _eval_rewrite_as_atan2(self, arg, **kwargs):\n         x, y = self.args[0].as_real_imag()\n         return atan2(y, x)\n \n+    def _eval_refine(self, assumptions):\n+        arg = self.args[0]\n+        if ask(Q.positive(arg), assumptions):\n+            return S.Zero\n+        if ask(Q.negative(arg), assumptions):\n+            return pi\n+        if ask(Q.zero(arg), assumptions):\n+            raise ValueError(\"Cannot evaluate arg(0)\")\n+        return None\n+\n \n class conjugate(Function):\n     \"\"\"\n", "instance_id": "sympy__sympy-21055"}
{"model_name_or_path": "moatless-tools-deepseek-completion-16", "model_patch": "diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py\nindex 8ddbb5ba68..536b3dd601 100644\n--- a/django/db/models/fields/related.py\n+++ b/django/db/models/fields/related.py\n@@ -1309,7 +1309,7 @@ class ManyToManyField(RelatedField):\n                              \"through_fields keyword argument.\") % (self, from_model_name),\n                             hint=(\n                                 'If you want to create a recursive relationship, '\n-                                'use ForeignKey(\"%s\", symmetrical=False, through=\"%s\").'\n+                                'use ManyToManyField(\"%s\", through=\"%s\").'\n                             ) % (\n                                 RECURSIVE_RELATIONSHIP_CONSTANT,\n                                 relationship_model_name,\n@@ -1329,7 +1329,7 @@ class ManyToManyField(RelatedField):\n                             \"through_fields keyword argument.\" % (self, to_model_name),\n                             hint=(\n                                 'If you want to create a recursive relationship, '\n-                                'use ForeignKey(\"%s\", symmetrical=False, through=\"%s\").'\n+                                'use ManyToManyField(\"%s\", through=\"%s\").'\n                             ) % (\n                                 RECURSIVE_RELATIONSHIP_CONSTANT,\n                                 relationship_model_name,\n", "instance_id": "django__django-12497"}
{"model_name_or_path": "moatless-tools-deepseek-completion-4", "model_patch": "diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py\nindex 982816be3a..7d2c201fdd 100644\n--- a/django/db/migrations/operations/models.py\n+++ b/django/db/migrations/operations/models.py\n@@ -292,6 +292,8 @@ class RenameModel(ModelOperation):\n     def __init__(self, old_name, new_name):\n         self.old_name = old_name\n         self.new_name = new_name\n+        self.__old_name_lower = old_name.lower()\n+        self.__new_name_lower = new_name.lower()\n         super().__init__(old_name)\n \n     @cached_property\n@@ -320,6 +322,8 @@ class RenameModel(ModelOperation):\n         new_model = to_state.apps.get_model(app_label, self.new_name)\n         if self.allow_migrate_model(schema_editor.connection.alias, new_model):\n             old_model = from_state.apps.get_model(app_label, self.old_name)\n+            if old_model._meta.db_table == new_model._meta.db_table:\n+                return\n             # Move the main table\n             schema_editor.alter_db_table(\n                 new_model,\n", "instance_id": "django__django-14999"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/django/db/models/fields/reverse_related.py b/django/db/models/fields/reverse_related.py\nindex ccc2223a5f..65950590e2 100644\n--- a/django/db/models/fields/reverse_related.py\n+++ b/django/db/models/fields/reverse_related.py\n@@ -310,7 +310,7 @@ class ManyToManyRel(ForeignObjectRel):\n     def identity(self):\n         return super().identity + (\n             self.through,\n-            self.through_fields,\n+            make_hashable(self.through_fields),\n             self.db_constraint,\n         )\n \n", "instance_id": "django__django-14672"}
{"model_name_or_path": "moatless-tools-deepseek-completion-5", "model_patch": "diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py\nindex bd34333c0..af9a29d02 100644\n--- a/sklearn/mixture/base.py\n+++ b/sklearn/mixture/base.py\n@@ -273,6 +273,11 @@ class BaseMixture(DensityMixin, BaseEstimator, metaclass=ABCMeta):\n         self.n_iter_ = best_n_iter\n         self.lower_bound_ = max_lower_bound\n \n+        # Always do a final e-step to guarantee that the labels returned by\n+        # fit_predict(X) are always consistent with fit(X).predict(X)\n+        # for any value of max_iter and tol (and any random_state).\n+        _, log_resp = self._e_step(X)\n+\n         return log_resp.argmax(axis=1)\n \n     def _e_step(self, X):\n", "instance_id": "scikit-learn__scikit-learn-13142"}
{"model_name_or_path": "moatless-tools-deepseek-completion-190", "model_patch": "diff --git a/django/forms/widgets.py b/django/forms/widgets.py\nindex 00c19e2c55..876b0670bf 100644\n--- a/django/forms/widgets.py\n+++ b/django/forms/widgets.py\n@@ -849,10 +849,7 @@ class MultiWidget(Widget):\n         return context\n \n     def id_for_label(self, id_):\n-        if id_:\n-            id_ += '_0'\n-        return id_\n-\n+        return None\n     def value_from_datadict(self, data, files, name):\n         return [\n             widget.value_from_datadict(data, files, name + widget_name)\n", "instance_id": "django__django-15061"}
{"model_name_or_path": "moatless-tools-deepseek-completion-2", "model_patch": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 364b24a1e5..9edbaadc30 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1655,9 +1655,9 @@ def _print_SeqFormula(self, s):\n         else:\n             printset = tuple(s)\n \n-        return (r\"\\left\\[\"\n+        return (r\"\\left[\"\n               + r\", \".join(self._print(el) for el in printset)\n-              + r\"\\right\\]\")\n+              + r\"\\right]\")\n \n     _print_SeqPer = _print_SeqFormula\n     _print_SeqAdd = _print_SeqFormula\n", "instance_id": "sympy__sympy-13971"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py\nindex b3cfc6723c..f6c4b7fc2f 100644\n--- a/django/contrib/auth/forms.py\n+++ b/django/contrib/auth/forms.py\n@@ -163,7 +163,7 @@ class UserChangeForm(forms.ModelForm):\n         super().__init__(*args, **kwargs)\n         password = self.fields.get(\"password\")\n         if password:\n-            password.help_text = password.help_text.format(\"../password/\")\n+            password.help_text = password.help_text.format(f\"../../{self.instance.pk}/password/\")\n         user_permissions = self.fields.get(\"user_permissions\")\n         if user_permissions:\n             user_permissions.queryset = user_permissions.queryset.select_related(\n", "instance_id": "django__django-16139"}
{"model_name_or_path": "moatless-tools-deepseek-completion-36", "model_patch": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 11aebbc59f..2a058b0085 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -288,6 +288,8 @@ class BlockDiagMatrix(BlockMatrix):\n     sympy.matrices.dense.diag\n     \"\"\"\n     def __new__(cls, *mats):\n+        if len(mats) == 1:\n+            return mats[0]\n         return Basic.__new__(BlockDiagMatrix, *mats)\n \n     @property\n", "instance_id": "sympy__sympy-18621"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/sympy/functions/elementary/hyperbolic.py b/sympy/functions/elementary/hyperbolic.py\nindex 2a4555d919..5fbb73c786 100644\n--- a/sympy/functions/elementary/hyperbolic.py\n+++ b/sympy/functions/elementary/hyperbolic.py\n@@ -587,7 +587,7 @@ def eval(cls, arg):\n                 x, m = _peeloff_ipi(arg)\n                 if m:\n                     cothm = coth(m)\n-                    if cotm is S.ComplexInfinity:\n+                    if cothm is S.ComplexInfinity:\n                         return coth(x)\n                     else: # cothm == 0\n                         return tanh(x)\n", "instance_id": "sympy__sympy-13480"}
{"model_name_or_path": "moatless-tools-deepseek-completion-10", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex ee45bb941e..52124147f9 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -763,8 +763,10 @@ class Field(RegisterLookupMixin):\n             if not getattr(cls, self.attname, None):\n                 setattr(cls, self.attname, self.descriptor_class(self))\n         if self.choices is not None:\n-            setattr(cls, 'get_%s_display' % self.name,\n-                    partialmethod(cls._get_FIELD_display, field=self))\n+            display_name = 'get_%s_display' % self.name\n+            if not hasattr(cls, display_name):\n+                setattr(cls, display_name,\n+                        partialmethod(cls._get_FIELD_display, field=self))\n \n     def get_filter_kwargs_for_object(self, obj):\n         \"\"\"\n", "instance_id": "django__django-11999"}
{"model_name_or_path": "moatless-tools-deepseek-completion-11", "model_patch": "diff --git a/sklearn/metrics/cluster/_supervised.py b/sklearn/metrics/cluster/_supervised.py\nindex 4bddae35c..0f2f183b8 100644\n--- a/sklearn/metrics/cluster/_supervised.py\n+++ b/sklearn/metrics/cluster/_supervised.py\n@@ -43,12 +43,24 @@ def check_clusterings(labels_true, labels_pred):\n         The predicted labels.\n     \"\"\"\n     labels_true = check_array(\n-        labels_true, ensure_2d=False, ensure_min_samples=0\n+        labels_true, ensure_2d=False, ensure_min_samples=0, dtype=None\n     )\n     labels_pred = check_array(\n-        labels_pred, ensure_2d=False, ensure_min_samples=0\n+        labels_pred, ensure_2d=False, ensure_min_samples=0, dtype=None\n     )\n \n+    # Additional check for string arrays cast to object type\n+    if labels_true.dtype == object and labels_true.dtype.kind == 'O':\n+        try:\n+            labels_true = labels_true.astype(str)\n+        except ValueError:\n+            raise ValueError(\"Cannot convert labels_true to string.\")\n+    if labels_pred.dtype == object and labels_pred.dtype.kind == 'O':\n+        try:\n+            labels_pred = labels_pred.astype(str)\n+        except ValueError:\n+            raise ValueError(\"Cannot convert labels_pred to string.\")\n+\n     # input checks\n     if labels_true.ndim != 1:\n         raise ValueError(\n", "instance_id": "scikit-learn__scikit-learn-15535"}
{"model_name_or_path": "moatless-tools-deepseek-completion-23", "model_patch": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex a26145117..cd6b9a7a2 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -859,13 +859,10 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                 # verbose_feature_names_out. Here we prefix the feature names if\n                 # verbose_feature_names_out=True.\n \n-                if not self.verbose_feature_names_out:\n-                    return output\n-\n                 transformer_names = [\n-                    t[0] for t in self._iter(fitted=True, replace_strings=True)\n+                    t[0] for t in self._iter(fitted=True, replace_strings=True) if not (t[1] == \"passthrough\" and _is_empty_column_selection(t[2]))\n                 ]\n-                feature_names_outs = [X.columns for X in Xs]\n+                feature_names_outs = [X.columns for X in Xs if not (X.empty and len(X.columns) == 0)]\n                 names_out = self._add_prefix_for_feature_names_out(\n                     list(zip(transformer_names, feature_names_outs))\n                 )\n", "instance_id": "scikit-learn__scikit-learn-25570"}
{"model_name_or_path": "moatless-tools-deepseek-completion-3", "model_patch": "diff --git a/sympy/simplify/fu.py b/sympy/simplify/fu.py\nindex ad1130ef96..3ba71ab9a2 100644\n--- a/sympy/simplify/fu.py\n+++ b/sympy/simplify/fu.py\n@@ -501,9 +501,11 @@ def _f(rv):\n         if not (rv.is_Pow and rv.base.func == f):\n             return rv\n \n-        if (rv.exp < 0) == True:\n+        if not rv.exp.is_real:\n             return rv\n-        if (rv.exp > max) == True:\n+        if rv.exp < 0:\n+            return rv\n+        if rv.exp > max:\n             return rv\n         if rv.exp == 2:\n             return h(g(rv.base.args[0])**2)\n", "instance_id": "sympy__sympy-17139"}
{"model_name_or_path": "moatless-tools-deepseek-completion-14", "model_patch": "diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py\nindex 77768e7383..62bfff62b8 100644\n--- a/lib/matplotlib/offsetbox.py\n+++ b/lib/matplotlib/offsetbox.py\n@@ -1499,7 +1499,7 @@ class DraggableBase:\n         if not ref_artist.pickable():\n             ref_artist.set_picker(True)\n         self.got_artist = False\n-        self._use_blit = use_blit and self.canvas.supports_blit\n+        self._use_blit = use_blit and (ref_artist is not None and ref_artist.figure is not None and ref_artist.figure.canvas.supports_blit)\n         self.cids = [\n             self.canvas.callbacks._connect_picklable(\n                 'pick_event', self.on_pick),\n@@ -1515,12 +1515,12 @@ class DraggableBase:\n             dx = evt.x - self.mouse_x\n             dy = evt.y - self.mouse_y\n             self.update_offset(dx, dy)\n-            if self._use_blit:\n+            if self.ref_artist is not None and self._use_blit:\n                 self.canvas.restore_region(self.background)\n                 self.ref_artist.draw(\n                     self.ref_artist.figure._get_renderer())\n                 self.canvas.blit()\n-            else:\n+            elif self.ref_artist is not None:\n                 self.canvas.draw()\n \n     def on_pick(self, evt):\n@@ -1550,22 +1550,19 @@ class DraggableBase:\n                 self.ref_artist.set_animated(False)\n \n     def _check_still_parented(self):\n-        if self.ref_artist.figure is None:\n-            self.disconnect()\n-            return False\n-        else:\n-            return True\n+        return self.ref_artist is not None and self.ref_artist.figure is not None\n \n     def disconnect(self):\n         \"\"\"Disconnect the callbacks.\"\"\"\n-        for cid in self.cids:\n-            self.canvas.mpl_disconnect(cid)\n-        try:\n-            c1 = self._c1\n-        except AttributeError:\n-            pass\n-        else:\n-            self.canvas.mpl_disconnect(c1)\n+        if self.ref_artist is not None:\n+            for cid in self.cids:\n+                self.canvas.mpl_disconnect(cid)\n+            try:\n+                c1 = self._c1\n+            except AttributeError:\n+                pass\n+            else:\n+                self.canvas.mpl_disconnect(c1)\n \n     def save_offset(self):\n         pass\n", "instance_id": "matplotlib__matplotlib-25442"}
{"model_name_or_path": "moatless-tools-deepseek-completion-1", "model_patch": "diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py\nindex b4878cfd45..1304f20a60 100644\n--- a/django/contrib/auth/validators.py\n+++ b/django/contrib/auth/validators.py\n@@ -7,7 +7,7 @@ from django.utils.translation import gettext_lazy as _\n \n @deconstructible\n class ASCIIUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only English letters, '\n         'numbers, and @/./+/-/_ characters.'\n@@ -17,7 +17,7 @@ class ASCIIUsernameValidator(validators.RegexValidator):\n \n @deconstructible\n class UnicodeUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only letters, '\n         'numbers, and @/./+/-/_ characters.'\n", "instance_id": "django__django-11099"}
{"model_name_or_path": "moatless-tools-deepseek-completion-106", "model_patch": "diff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py\nindex b4d759836e..f42bff123d 100644\n--- a/sympy/matrices/expressions/matexpr.py\n+++ b/sympy/matrices/expressions/matexpr.py\n@@ -479,7 +479,7 @@ def _entry(self, i, j):\n         if i == j:\n             return S.One\n         else:\n-            return S.Zero\n+            return S.One / self.rows\n \n     def _eval_determinant(self):\n         return S.One\n", "instance_id": "sympy__sympy-12419"}
{"model_name_or_path": "moatless-tools-deepseek-completion-74", "model_patch": "diff --git a/sympy/tensor/array/ndim_array.py b/sympy/tensor/array/ndim_array.py\nindex 6490a655a4..1e886f02fd 100644\n--- a/sympy/tensor/array/ndim_array.py\n+++ b/sympy/tensor/array/ndim_array.py\n@@ -194,6 +194,9 @@ def f(pointer):\n             if not isinstance(pointer, Iterable):\n                 return [pointer], ()\n \n+            if not pointer:\n+                return [], (0,)\n+\n             result = []\n             elems, shapes = zip(*[f(i) for i in pointer])\n             if len(set(shapes)) != 1:\n", "instance_id": "sympy__sympy-23117"}
{"model_name_or_path": "moatless-tools-deepseek-completion-75", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 07d6ffd4ca..a18e03d4ab 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -920,6 +920,7 @@ class QuerySet:\n         \"\"\"Return an empty QuerySet.\"\"\"\n         clone = self._chain()\n         clone.query.set_empty()\n+        clone._result_cache = []\n         return clone\n \n     ##################################################################\n", "instance_id": "django__django-13158"}
{"model_name_or_path": "moatless-tools-deepseek-completion-2", "model_patch": "diff --git a/sympy/utilities/iterables.py b/sympy/utilities/iterables.py\nindex dd36dea304..9fe76ac08b 100644\n--- a/sympy/utilities/iterables.py\n+++ b/sympy/utilities/iterables.py\n@@ -1804,7 +1804,7 @@ def partitions(n, m=None, k=None, size=False):\n     if size:\n         yield sum(ms.values()), ms\n     else:\n-        yield ms\n+        yield ms.copy()\n \n     while keys != [1]:\n         # Reuse any 1's.\n@@ -1842,9 +1842,9 @@ def partitions(n, m=None, k=None, size=False):\n             break\n         room -= need\n         if size:\n-            yield sum(ms.values()), ms\n+            yield sum(ms.values()), ms.copy()\n         else:\n-            yield ms\n+            yield ms.copy()\n \n \n def ordered_partitions(n, m=None, sort=True):\n", "instance_id": "sympy__sympy-20154"}
{"model_name_or_path": "moatless-tools-deepseek-completion-191", "model_patch": "diff --git a/src/_pytest/nodes.py b/src/_pytest/nodes.py\nindex 560548aea..aab07792b 100644\n--- a/src/_pytest/nodes.py\n+++ b/src/_pytest/nodes.py\n@@ -281,6 +281,9 @@ class Node(metaclass=NodeMeta):\n             self.own_markers.append(marker_.mark)\n         else:\n             self.own_markers.insert(0, marker_.mark)\n+        # Ensure the xfail marker is handled appropriately\n+        if marker_.name == \"xfail\":\n+            self.config.hook.pytest_runtest_setup(item=self)\n \n     def iter_markers(self, name: Optional[str] = None) -> Iterator[Mark]:\n         \"\"\"\n", "instance_id": "pytest-dev__pytest-7490"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex a436880c4b..1bb2c0fe47 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -175,10 +175,10 @@ def _collect_factor_and_dimension(self, expr):\n             for addend in expr.args[1:]:\n                 addend_factor, addend_dim = \\\n                     self._collect_factor_and_dimension(addend)\n-                if dim != addend_dim:\n+                if not self.get_dimension_system().equivalent_dims(dim, addend_dim):\n                     raise ValueError(\n                         'Dimension of \"{}\" is {}, '\n-                        'but it should be {}'.format(\n+                        'but it should be {} or equivalent'.format(\n                             addend, addend_dim, dim))\n                 factor += addend_factor\n             return factor, dim\n", "instance_id": "sympy__sympy-24213"}
{"model_name_or_path": "moatless-tools-deepseek-completion-1", "model_patch": "diff --git a/django/db/backends/base/creation.py b/django/db/backends/base/creation.py\nindex c50fc90171..5cf1f5b3c2 100644\n--- a/django/db/backends/base/creation.py\n+++ b/django/db/backends/base/creation.py\n@@ -5,7 +5,7 @@ from io import StringIO\n from django.apps import apps\n from django.conf import settings\n from django.core import serializers\n-from django.db import router\n+from django.db import router, transaction\n \n # The prefix to put on the default database name when creating\n # the test database.\n@@ -126,8 +126,9 @@ class BaseDatabaseCreation:\n         the serialize_db_to_string() method.\n         \"\"\"\n         data = StringIO(data)\n-        for obj in serializers.deserialize(\"json\", data, using=self.connection.alias):\n-            obj.save()\n+        with transaction.atomic(using=self.connection.alias):\n+            for obj in serializers.deserialize(\"json\", data, using=self.connection.alias):\n+                obj.save()\n \n     def _get_database_display_str(self, verbosity, database_name):\n         \"\"\"\n", "instance_id": "django__django-12453"}
{"model_name_or_path": "moatless-tools-deepseek-completion-8", "model_patch": "diff --git a/django/db/models/query.py b/django/db/models/query.py\nindex 5ac2407ea3..2d8a75c6fe 100644\n--- a/django/db/models/query.py\n+++ b/django/db/models/query.py\n@@ -1846,6 +1846,18 @@ class QuerySet(AltersData):\n                         returning_fields=self.model._meta.db_returning_fields,\n                     )\n                 )\n+            elif on_conflict == OnConflict.UPDATE:\n+                inserted_rows.extend(\n+                    self._insert(\n+                        item,\n+                        fields=fields,\n+                        using=self.db,\n+                        on_conflict=on_conflict,\n+                        update_fields=update_fields,\n+                        unique_fields=unique_fields,\n+                        returning_fields=self.model._meta.db_returning_fields,\n+                    )\n+                )\n             else:\n                 self._insert(\n                     item,\ndiff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex b28dc925ba..61755ea42b 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -1810,11 +1810,6 @@ class SQLInsertCompiler(SQLCompiler):\n             ]\n \n     def execute_sql(self, returning_fields=None):\n-        assert not (\n-            returning_fields\n-            and len(self.query.objs) != 1\n-            and not self.connection.features.can_return_rows_from_bulk_insert\n-        )\n         opts = self.query.get_meta()\n         self.returning_fields = returning_fields\n         with self.connection.cursor() as cursor:\n@@ -1828,7 +1823,6 @@ class SQLInsertCompiler(SQLCompiler):\n             ):\n                 rows = self.connection.ops.fetch_returned_insert_rows(cursor)\n             elif self.connection.features.can_return_columns_from_insert:\n-                assert len(self.query.objs) == 1\n                 rows = [\n                     self.connection.ops.fetch_returned_insert_columns(\n                         cursor,\n", "instance_id": "django__django-17051"}
{"model_name_or_path": "moatless-tools-deepseek-completion-124", "model_patch": "diff --git a/sklearn/isotonic.py b/sklearn/isotonic.py\nindex b05e59536..ace4d6aae 100644\n--- a/sklearn/isotonic.py\n+++ b/sklearn/isotonic.py\n@@ -410,7 +410,10 @@ class IsotonicRegression(RegressorMixin, TransformerMixin, BaseEstimator):\n         y_pred : ndarray of shape (n_samples,)\n             Transformed data.\n         \"\"\"\n-        return self.transform(T)\n+        y_pred = self.transform(T)\n+        if hasattr(y_pred, 'to_numpy'):\n+            y_pred = y_pred.to_numpy()\n+        return y_pred\n \n     # We implement get_feature_names_out here instead of using\n     # `ClassNamePrefixFeaturesOutMixin`` because `input_features` are ignored.\n", "instance_id": "scikit-learn__scikit-learn-25500"}
{"model_name_or_path": "moatless-tools-deepseek-completion-74", "model_patch": "diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py\nindex 7a3de33522..0f1d79d1e3 100644\n--- a/sympy/printing/pretty/pretty.py\n+++ b/sympy/printing/pretty/pretty.py\n@@ -618,8 +618,8 @@ def adjust(s, wid=None, how='<^>'):\n \n             if first:\n                 # change F baseline so it centers on the sign\n-                prettyF.baseline -= d - (prettyF.height()//2 -\n-                                         prettyF.baseline) - adjustment\n+                prettyF.baseline -= d - (prettyF.height() // 2 -\n+                                         prettyF.baseline)\n                 first = False\n \n             # put padding to the right\n", "instance_id": "sympy__sympy-16503"}
{"model_name_or_path": "moatless-tools-deepseek-completion-3", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 62631f7ff..9d226d74d 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -319,7 +319,8 @@ class Documenter:\n     titles_allowed = False\n \n     option_spec: OptionSpec = {\n-        'noindex': bool_option\n+        'noindex': bool_option,\n+        'inherited-members': inherited_members_option,\n     }\n \n     def get_attr(self, obj: Any, name: str, *defargs: Any) -> Any:\n@@ -681,8 +682,9 @@ class Documenter:\n         \"\"\"\n         def is_filtered_inherited_member(name: str, obj: Any) -> bool:\n             if inspect.isclass(self.object):\n+                inherited_members_list = self.options.inherited_members\n                 for cls in self.object.__mro__:\n-                    if cls.__name__ == self.options.inherited_members and cls != self.object:\n+                    if cls.__name__ in inherited_members_list and cls != self.object:\n                         # given member is a member of specified *super class*\n                         return True\n                     elif name in cls.__dict__:\n", "instance_id": "sphinx-doc__sphinx-10325"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 757cb2797..08670d2b2 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -15,7 +15,7 @@ from _pytest.compat import dummy_context_manager\n from _pytest.config import create_terminal_writer\n from _pytest.pathlib import Path\n \n-DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n DEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n \n \n", "instance_id": "pytest-dev__pytest-5227"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/django/contrib/admin/templatetags/admin_modify.py b/django/contrib/admin/templatetags/admin_modify.py\nindex 9df4b7aadb..5b742af46a 100644\n--- a/django/contrib/admin/templatetags/admin_modify.py\n+++ b/django/contrib/admin/templatetags/admin_modify.py\n@@ -100,6 +100,7 @@ def submit_row(context):\n                 and context.get(\"show_delete\", True)\n             ),\n             \"show_save_as_new\": not is_popup\n+            and has_add_permission\n             and has_change_permission\n             and change\n             and save_as,\n", "instance_id": "django__django-16527"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py\nindex 7c978c47be..0a14773403 100644\n--- a/sympy/geometry/point.py\n+++ b/sympy/geometry/point.py\n@@ -278,6 +278,37 @@ def __mul__(self, factor):\n         coords = [simplify(x*factor) for x in self.args]\n         return Point(coords, evaluate=False)\n \n+    def __rmul__(self, factor):\n+        \"\"\"Multiply point's coordinates by a factor from the left.\n+\n+        Notes\n+        =====\n+\n+        >>> from sympy.geometry.point import Point\n+\n+        When multiplying a Point by a floating point number from the left,\n+        the coordinates of the Point will be changed to Floats:\n+\n+        >>> 0.1 * Point(1, 2)\n+        Point2D(0.1, 0.2)\n+\n+        If this is not desired, the `scale` method can be used or\n+        else only multiply or divide by integers:\n+\n+        >>> Point(1, 2).scale(1.1, 1.1)\n+        Point2D(11/10, 11/5)\n+        >>> 11/10 * Point(1, 2)\n+        Point2D(11/10, 11/5)\n+\n+        See Also\n+        ========\n+\n+        sympy.geometry.point.Point.scale\n+        \"\"\"\n+        factor = sympify(factor)\n+        coords = [simplify(x*factor) for x in self.args]\n+        return Point(coords, evaluate=False)\n+\n     def __neg__(self):\n         \"\"\"Negate the point.\"\"\"\n         coords = [-x for x in self.args]\n", "instance_id": "sympy__sympy-17655"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/src/_pytest/mark/evaluate.py b/src/_pytest/mark/evaluate.py\nindex 759191668..673c022fc 100644\n--- a/src/_pytest/mark/evaluate.py\n+++ b/src/_pytest/mark/evaluate.py\n@@ -19,16 +19,10 @@ evalcache_key = StoreKey[Dict[str, Any]]()\n \n \n def cached_eval(config: Config, expr: str, d: Dict[str, object]) -> Any:\n-    default = {}  # type: Dict[str, object]\n-    evalcache = config._store.setdefault(evalcache_key, default)\n-    try:\n-        return evalcache[expr]\n-    except KeyError:\n-        import _pytest._code\n-\n-        exprcode = _pytest._code.compile(expr, mode=\"eval\")\n-        evalcache[expr] = x = eval(exprcode, d)\n-        return x\n+    import _pytest._code\n+\n+    exprcode = _pytest._code.compile(expr, mode=\"eval\")\n+    return eval(exprcode, d)\n \n \n class MarkEvaluator:\n", "instance_id": "pytest-dev__pytest-7373"}
{"model_name_or_path": "moatless-tools-deepseek-completion-44", "model_patch": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 171a3e7b0..ee48b03c0 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1702,7 +1702,7 @@ class DataDocumenter(ModuleLevelDocumenter):\n         if not self.options.annotation:\n             # obtain annotation for this data\n             try:\n-                annotations = get_type_hints(self.parent)\n+                annotations = get_type_hints(self.parent, localns=self.config.autodoc_type_aliases)\n             except NameError:\n                 # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n                 annotations = safe_getattr(self.parent, '__annotations__', {})\n@@ -2093,7 +2093,7 @@ class AttributeDocumenter(DocstringStripSignatureMixin, ClassLevelDocumenter):\n         if not self.options.annotation:\n             # obtain type annotation for this attribute\n             try:\n-                annotations = get_type_hints(self.parent)\n+                annotations = get_type_hints(self.parent, localns=self.config.autodoc_type_aliases)\n             except NameError:\n                 # Failed to evaluate ForwardRef (maybe TYPE_CHECKING)\n                 annotations = safe_getattr(self.parent, '__annotations__', {})\n", "instance_id": "sphinx-doc__sphinx-8435"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/django/contrib/messages/storage/cookie.py b/django/contrib/messages/storage/cookie.py\nindex 1d390c71dd..e48d4edb08 100644\n--- a/django/contrib/messages/storage/cookie.py\n+++ b/django/contrib/messages/storage/cookie.py\n@@ -19,7 +19,7 @@ class MessageEncoder(json.JSONEncoder):\n             # Using 0/1 here instead of False/True to produce more compact json\n             is_safedata = 1 if isinstance(obj.message, SafeData) else 0\n             message = [self.message_key, is_safedata, obj.level, obj.message]\n-            if obj.extra_tags:\n+            if obj.extra_tags is not None:\n                 message.append(obj.extra_tags)\n             return message\n         return super().default(obj)\n", "instance_id": "django__django-15347"}
{"model_name_or_path": "moatless-tools-deepseek-completion-3", "model_patch": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex 0f53d9c30b..0ce7de02c6 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -2524,7 +2524,7 @@ class AutoFieldMeta(type):\n         return isinstance(instance, self._subclasses) or super().__instancecheck__(instance)\n \n     def __subclasscheck__(self, subclass):\n-        return subclass in self._subclasses or super().__subclasscheck__(subclass)\n+        return issubclass(subclass, self._subclasses) or super().__subclasscheck__(subclass)\n \n \n class AutoField(AutoFieldMixin, IntegerField, metaclass=AutoFieldMeta):\n", "instance_id": "django__django-14238"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/seaborn/_stats/regression.py b/seaborn/_stats/regression.py\nindex 7b7ddc8d..a7afde4a 100644\n--- a/seaborn/_stats/regression.py\n+++ b/seaborn/_stats/regression.py\n@@ -23,6 +23,11 @@ class PolyFit(Stat):\n \n         x = data[\"x\"]\n         y = data[\"y\"]\n+        # Check for missing data\n+        mask = x.notna() & y.notna()\n+        x = x[mask]\n+        y = y[mask]\n+\n         if x.nunique() <= self.order:\n             # TODO warn?\n             xx = yy = []\n", "instance_id": "mwaskom__seaborn-3010"}
{"model_name_or_path": "moatless-tools-deepseek-completion-1", "model_patch": "diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py\nindex 6c9ecbc9..28092854 100644\n--- a/seaborn/_core/scales.py\n+++ b/seaborn/_core/scales.py\n@@ -343,6 +343,8 @@ class ContinuousBase(Scale):\n         normalize: Optional[Callable[[ArrayLike], ArrayLike]]\n         if prop.normed:\n             if new.norm is None:\n+                if data.dtype == bool:\n+                    data = data.astype(float)\n                 vmin, vmax = data.min(), data.max()\n             else:\n                 vmin, vmax = new.norm\n", "instance_id": "mwaskom__seaborn-3190"}
{"model_name_or_path": "moatless-tools-deepseek-completion-9", "model_patch": "diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py\nindex f71bea25f5..d9d561c5b2 100644\n--- a/sympy/utilities/lambdify.py\n+++ b/sympy/utilities/lambdify.py\n@@ -707,7 +707,7 @@ def _preprocess(self, args, expr):\n \n         Returns string form of args, and updated expr.\n         \"\"\"\n-        from sympy import Dummy, Symbol, Function, flatten\n+        from sympy import Dummy, Symbol, Function, MatrixSymbol, flatten\n         from sympy.matrices import DeferredVector\n \n         dummify = self._dummify\n@@ -738,6 +738,15 @@ def _preprocess(self, args, expr):\n                 dummy = Dummy()\n                 argstrs.append(self._argrepr(dummy))\n                 expr = self._subexpr(expr, {arg: dummy})\n+            elif isinstance(arg, MatrixSymbol):\n+                argrep = self._argrepr(arg)\n+\n+                if dummify or not self._is_safe_ident(argrep):\n+                    dummy = Dummy()\n+                    argstrs.append(self._argrepr(dummy))\n+                    expr = self._subexpr(expr, {arg: dummy})\n+                else:\n+                    argstrs.append(argrep)\n             else:\n                 argstrs.append(str(arg))\n \n", "instance_id": "sympy__sympy-15011"}
{"model_name_or_path": "moatless-tools-deepseek-completion-119", "model_patch": "diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py\nindex b0df8749..875180f4 100644\n--- a/xarray/core/dataarray.py\n+++ b/xarray/core/dataarray.py\n@@ -1961,7 +1961,11 @@ class DataArray(AbstractArray, DataWithCoords):\n         # pull variables out of datarray\n         data_dict = {}\n         for k in variables:\n-            data_dict[k] = self.sel({variable_dim: k}).squeeze(drop=True)\n+            selected = self.sel({variable_dim: k}, drop=True)\n+            if selected.ndim == 0:\n+                # Convert single-dimensional variable to a DataArray with a dummy dimension\n+                selected = selected.expand_dims(dim={variable_dim: [k]})\n+            data_dict[k] = selected.squeeze(drop=True)\n \n         # unstacked dataset\n         return Dataset(data_dict)\n", "instance_id": "pydata__xarray-4094"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/django/core/checks/templates.py b/django/core/checks/templates.py\nindex 5214276987..91096ef838 100644\n--- a/django/core/checks/templates.py\n+++ b/django/core/checks/templates.py\n@@ -54,11 +54,16 @@ def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n \n     for conf in settings.TEMPLATES:\n         custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n+        unique_libraries = set()\n         for module_name, module_path in custom_libraries.items():\n-            libraries[module_name].append(module_path)\n+            if (module_name, module_path) not in unique_libraries:\n+                libraries[module_name].append(module_path)\n+                unique_libraries.add((module_name, module_path))\n \n     for module_name, module_path in get_template_tag_modules():\n-        libraries[module_name].append(module_path)\n+        if (module_name, module_path) not in unique_libraries:\n+            libraries[module_name].append(module_path)\n+            unique_libraries.add((module_name, module_path))\n \n     for library_name, items in libraries.items():\n         if len(items) > 1:\n", "instance_id": "django__django-15790"}
{"model_name_or_path": "moatless-tools-deepseek-completion-0", "model_patch": "diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py\nindex 4153dfccb..6a266e0ce 100644\n--- a/astropy/nddata/mixins/ndarithmetic.py\n+++ b/astropy/nddata/mixins/ndarithmetic.py\n@@ -523,8 +523,14 @@ class NDArithmeticMixin:\n         elif operand is None:\n             return deepcopy(self.mask)\n         else:\n-            # Now lets calculate the resulting mask (operation enforces copy)\n-            return handle_mask(self.mask, operand.mask, **kwds)\n+            # Check if either mask is None and handle accordingly\n+            if self.mask is None:\n+                return deepcopy(operand.mask)\n+            elif operand.mask is None:\n+                return deepcopy(self.mask)\n+            else:\n+                # Now lets calculate the resulting mask (operation enforces copy)\n+                return handle_mask(self.mask, operand.mask, **kwds)\n \n     def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):\n         \"\"\"\n", "instance_id": "astropy__astropy-14995"}
{"model_name_or_path": "moatless-tools-deepseek-completion-7", "model_patch": "diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py\nindex 9e5b903d59..3a92258f4a 100644\n--- a/lib/matplotlib/legend.py\n+++ b/lib/matplotlib/legend.py\n@@ -314,6 +314,7 @@ class Legend(Artist):\n         prop=None,           # properties for the legend texts\n         fontsize=None,       # keyword to set font size directly\n         labelcolor=None,     # keyword to set the text color\n+        draggable=None,      # keyword to make legend draggable at creation\n \n         # spacing & pad defined as a fraction of the font-size\n         borderpad=None,      # whitespace inside the legend border\n@@ -537,7 +538,10 @@ class Legend(Artist):\n             title_prop_fp.set_size(title_fontsize)\n \n         self.set_title(title, prop=title_prop_fp)\n-        self._draggable = None\n+        if draggable is True:\n+            self._draggable = True\n+        else:\n+            self._draggable = None\n \n         # set the text color\n \n", "instance_id": "matplotlib__matplotlib-23913"}
{"model_name_or_path": "moatless-tools-deepseek-completion-3", "model_patch": "diff --git a/lib/mpl_toolkits/axes_grid1/axes_grid.py b/lib/mpl_toolkits/axes_grid1/axes_grid.py\nindex 2b1b1d3200..15f6ebbac7 100644\n--- a/lib/mpl_toolkits/axes_grid1/axes_grid.py\n+++ b/lib/mpl_toolkits/axes_grid1/axes_grid.py\n@@ -13,8 +13,9 @@ from .mpl_axes import Axes\n def _tick_only(ax, bottom_on, left_on):\n     bottom_off = not bottom_on\n     left_off = not left_on\n-    ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n-    ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n+    if hasattr(ax.axis, '__getitem__'):\n+        ax.axis[\"bottom\"].toggle(ticklabels=bottom_off, label=bottom_off)\n+        ax.axis[\"left\"].toggle(ticklabels=left_off, label=left_off)\n \n \n class CbarAxesBase:\n", "instance_id": "matplotlib__matplotlib-26020"}
{"model_name_or_path": "moatless-tools-deepseek-completion-214", "model_patch": "diff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py\nindex e6e7e29f11..c1cb083217 100644\n--- a/lib/matplotlib/axis.py\n+++ b/lib/matplotlib/axis.py\n@@ -1237,8 +1237,9 @@ class Axis(martist.Artist):\n         if auto is not None:\n             self._set_autoscale_on(bool(auto))\n \n+        self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n+\n         if emit:\n-            self.axes.callbacks.process(f\"{name}lim_changed\", self.axes)\n             # Call all of the other axes that are shared with this one\n             for other in self._get_shared_axes():\n                 if other is not self.axes:\n", "instance_id": "matplotlib__matplotlib-26011"}
{"model_name_or_path": "moatless-tools-deepseek-completion-24", "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex 38da1e6ecc..6d1247aa15 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -122,13 +122,28 @@ class DictionarySerializer(BaseSerializer):\n \n \n class EnumSerializer(BaseSerializer):\n-    def serialize(self):\n-        enum_class = self.value.__class__\n-        module = enum_class.__module__\n-        return (\n-            \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n-            {\"import %s\" % module},\n-        )\n+        def serialize(self):\n+            enum_class = self.value.__class__\n+            module = enum_class.__module__\n+            if self.value.name is not None:\n+                return (\n+                    \"%s.%s[%r]\" % (module, enum_class.__qualname__, self.value.name),\n+                    {\"import %s\" % module},\n+                )\n+            else:\n+                try:\n+                    decomposed = enum_class._decompose(self.value)\n+                except AttributeError:\n+                    # Handle the case where _decompose is not available\n+                    values = [item.value for item in enum_class]\n+                    decomposed_values = [value for value in values if self.value & value == value]\n+                    decomposed = [enum_class(val) for val in decomposed_values]\n+                names = [item.name for item in decomposed]\n+                or_expression = \" | \".join([\"%s.%s['%s']\" % (module, enum_class.__qualname__, name) for name in names])\n+                return (\n+                    or_expression,\n+                    {\"import %s\" % module},\n+                )\n \n \n class FloatSerializer(BaseSimpleSerializer):\n", "instance_id": "django__django-15996"}
{"model_name_or_path": "moatless-tools-deepseek-completion-45", "model_patch": "diff --git a/astropy/io/fits/fitsrec.py b/astropy/io/fits/fitsrec.py\nindex 574b4073b..8890e158e 100644\n--- a/astropy/io/fits/fitsrec.py\n+++ b/astropy/io/fits/fitsrec.py\n@@ -1261,7 +1261,7 @@ class FITS_rec(np.recarray):\n \n         # Replace exponent separator in floating point numbers\n         if 'D' in format:\n-            output_field.replace(encode_ascii('E'), encode_ascii('D'))\n+            output_field[:] = output_field.replace(encode_ascii('E'), encode_ascii('D'))\n \n \n def _get_recarray_field(array, key):\n", "instance_id": "astropy__astropy-6938"}
{"model_name_or_path": "moatless-tools-deepseek-completion-248", "model_patch": "diff --git a/lib/matplotlib/cbook.py b/lib/matplotlib/cbook.py\nindex c9699b2e21..85e899f229 100644\n--- a/lib/matplotlib/cbook.py\n+++ b/lib/matplotlib/cbook.py\n@@ -789,7 +789,7 @@ class Grouper:\n         self._mapping = {weakref.ref(x): [weakref.ref(x)] for x in init}\n \n     def __contains__(self, item):\n-        return weakref.ref(item) in self._mapping\n+        return _StrongRef(item) in self._mapping\n \n     def clean(self):\n         \"\"\"Clean dead weak references from the dictionary.\"\"\"\n@@ -804,10 +804,10 @@ class Grouper:\n         Join given arguments into the same set.  Accepts one or more arguments.\n         \"\"\"\n         mapping = self._mapping\n-        set_a = mapping.setdefault(weakref.ref(a), [weakref.ref(a)])\n+        set_a = mapping.setdefault(_StrongRef(a), [_StrongRef(a)])\n \n         for arg in args:\n-            set_b = mapping.get(weakref.ref(arg), [weakref.ref(arg)])\n+            set_b = mapping.get(_StrongRef(arg), [_StrongRef(arg)])\n             if set_b is not set_a:\n                 if len(set_b) > len(set_a):\n                     set_a, set_b = set_b, set_a\n@@ -820,14 +820,14 @@ class Grouper:\n     def joined(self, a, b):\n         \"\"\"Return whether *a* and *b* are members of the same set.\"\"\"\n         self.clean()\n-        return (self._mapping.get(weakref.ref(a), object())\n-                is self._mapping.get(weakref.ref(b)))\n+        return (self._mapping.get(_StrongRef(a), object())\n+                is self._mapping.get(_StrongRef(b)))\n \n     def remove(self, a):\n         self.clean()\n-        set_a = self._mapping.pop(weakref.ref(a), None)\n+        set_a = self._mapping.pop(_StrongRef(a), None)\n         if set_a:\n-            set_a.remove(weakref.ref(a))\n+            set_a.remove(_StrongRef(a))\n \n     def __iter__(self):\n         \"\"\"\n@@ -843,6 +843,9 @@ class Grouper:\n     def get_siblings(self, a):\n         \"\"\"Return all of the items joined with *a*, including itself.\"\"\"\n         self.clean()\n+        siblings = self._mapping.get(_StrongRef(a), [_StrongRef(a)])\n+        return [x() for x in siblings]\n+        self.clean()\n         siblings = self._mapping.get(weakref.ref(a), [weakref.ref(a)])\n         return [x() for x in siblings]\n \n", "instance_id": "matplotlib__matplotlib-25332"}
