{
  "info": {
    "duration": 193.1501567363739,
    "submission": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 95302a05ca..ef358c7009 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -162,9 +162,27 @@ def structurally_equal(self, other):\n             and self.colblocksizes == other.colblocksizes)\n \n     def _blockmul(self, other):\n+        def convert_zero_to_zeromatrix(block, rows, cols):\n+            if block == 0:\n+                return ZeroMatrix(rows, cols)\n+            return block\n+\n         if (isinstance(other, BlockMatrix) and\n                 self.colblocksizes == other.rowblocksizes):\n-            return BlockMatrix(self.blocks*other.blocks)\n+            new_blocks = []\n+            for i in range(self.blocks.rows):\n+                new_row = []\n+                for j in range(other.blocks.cols):\n+                    block_product = ZeroMatrix(self.blocks[i, 0].rows, other.blocks[0, j].cols)\n+                    for k in range(self.blocks.cols):\n+                        A = self.blocks[i, k]\n+                        B = other.blocks[k, j]\n+                        A = convert_zero_to_zeromatrix(A, self.blocks[i, k].rows, self.blocks[i, k].cols)\n+                        B = convert_zero_to_zeromatrix(B, other.blocks[k, j].rows, other.blocks[k, j].cols)\n+                        block_product += A * B\n+                    new_row.append(block_product)\n+                new_blocks.append(new_row)\n+            return BlockMatrix(Matrix(new_blocks))\n \n         return self * other\n \n",
    "total_cost": 0.10751100000000001,
    "instance_id": "sympy__sympy-17630",
    "evaluation_name": "temperature_sweep_250_samples_50_problems_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves an exception when performing block matrix multiplication involving ZeroMatrix blocks. The exception occurs specifically when trying to access the 'cols' attribute of a 'Zero' object within the BlockMatrix class. This suggests that during the multiplication process, ZeroMatrix objects are being replaced or interpreted as Zero objects, which do not have the 'cols' attribute. To address this, we need to investigate the BlockMatrix class and its related functions, specifically focusing on the block multiplication and collapse functions.",
            "search_requests": [
              {
                "query": "block multiplication ZeroMatrix",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/matrices/expressions/blockmatrix.py",
                "function_names": []
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": "def _blockmul(self, other):",
                "file_pattern": "**/matrices/expressions/blockmatrix.py",
                "function_names": []
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": "def block_collapse(expr):",
                "file_pattern": "**/matrices/expressions/blockmatrix.py",
                "function_names": []
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": "def bc_matmul(expr):",
                "file_pattern": "**/matrices/expressions/blockmatrix.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 208,
                "span_id": "imports",
                "file_path": "sympy/matrices/expressions/blockmatrix.py"
              },
              {
                "rank": 1,
                "tokens": 186,
                "span_id": "bc_matmul",
                "file_path": "sympy/matrices/expressions/blockmatrix.py"
              },
              {
                "rank": 2,
                "tokens": 501,
                "span_id": "BlockMatrix",
                "file_path": "sympy/matrices/expressions/blockmatrix.py"
              },
              {
                "rank": 3,
                "tokens": 27,
                "span_id": "bc_unpack",
                "file_path": "sympy/matrices/expressions/blockmatrix.py"
              },
              {
                "rank": 3,
                "tokens": 80,
                "span_id": "bc_matadd",
                "file_path": "sympy/matrices/expressions/blockmatrix.py"
              },
              {
                "rank": 4,
                "tokens": 133,
                "span_id": "bc_dist",
                "file_path": "sympy/matrices/expressions/blockmatrix.py"
              },
              {
                "rank": 5,
                "tokens": 77,
                "span_id": "BlockMatrix.as_real_imag",
                "file_path": "sympy/matrices/expressions/blockmatrix.py"
              },
              {
                "rank": 0,
                "tokens": 77,
                "span_id": "BlockMatrix.as_real_imag",
                "file_path": "sympy/matrices/expressions/blockmatrix.py"
              },
              {
                "rank": 0,
                "tokens": 13,
                "span_id": "BlockMatrix.blocks",
                "file_path": "sympy/matrices/expressions/blockmatrix.py"
              },
              {
                "rank": 0,
                "tokens": 69,
                "span_id": "BlockMatrix.shape",
                "file_path": "sympy/matrices/expressions/blockmatrix.py"
              },
              {
                "rank": 0,
                "tokens": 57,
                "span_id": "BlockMatrix.structurally_equal",
                "file_path": "sympy/matrices/expressions/blockmatrix.py"
              },
              {
                "rank": 0,
                "tokens": 28,
                "span_id": "BlockMatrix.colblocksizes",
                "file_path": "sympy/matrices/expressions/blockmatrix.py"
              },
              {
                "rank": 0,
                "tokens": 80,
                "span_id": "BlockMatrix._eval_determinant",
                "file_path": "sympy/matrices/expressions/blockmatrix.py"
              },
              {
                "rank": 0,
                "tokens": 28,
                "span_id": "BlockMatrix.rowblocksizes",
                "file_path": "sympy/matrices/expressions/blockmatrix.py"
              },
              {
                "rank": 0,
                "tokens": 346,
                "span_id": "block_collapse",
                "file_path": "sympy/matrices/expressions/blockmatrix.py"
              },
              {
                "rank": 0,
                "tokens": 186,
                "span_id": "bc_matmul",
                "file_path": "sympy/matrices/expressions/blockmatrix.py"
              }
            ],
            "search_requests": [
              {
                "query": "block multiplication ZeroMatrix",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/matrices/expressions/blockmatrix.py",
                "function_names": []
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": "def _blockmul(self, other):",
                "file_pattern": "**/matrices/expressions/blockmatrix.py",
                "function_names": []
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": "def block_collapse(expr):",
                "file_pattern": "**/matrices/expressions/blockmatrix.py",
                "function_names": []
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": "def bc_matmul(expr):",
                "file_pattern": "**/matrices/expressions/blockmatrix.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 3985,
          "output_tokens": 288,
          "retry_message": null,
          "completion_cost": 0.016275
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 208,
            "span_id": "imports",
            "file_path": "sympy/matrices/expressions/blockmatrix.py"
          },
          {
            "rank": 1,
            "tokens": 186,
            "span_id": "bc_matmul",
            "file_path": "sympy/matrices/expressions/blockmatrix.py"
          },
          {
            "rank": 2,
            "tokens": 501,
            "span_id": "BlockMatrix",
            "file_path": "sympy/matrices/expressions/blockmatrix.py"
          },
          {
            "rank": 3,
            "tokens": 27,
            "span_id": "bc_unpack",
            "file_path": "sympy/matrices/expressions/blockmatrix.py"
          },
          {
            "rank": 3,
            "tokens": 80,
            "span_id": "bc_matadd",
            "file_path": "sympy/matrices/expressions/blockmatrix.py"
          },
          {
            "rank": 4,
            "tokens": 133,
            "span_id": "bc_dist",
            "file_path": "sympy/matrices/expressions/blockmatrix.py"
          },
          {
            "rank": 5,
            "tokens": 77,
            "span_id": "BlockMatrix.as_real_imag",
            "file_path": "sympy/matrices/expressions/blockmatrix.py"
          },
          {
            "rank": 0,
            "tokens": 77,
            "span_id": "BlockMatrix.as_real_imag",
            "file_path": "sympy/matrices/expressions/blockmatrix.py"
          },
          {
            "rank": 0,
            "tokens": 13,
            "span_id": "BlockMatrix.blocks",
            "file_path": "sympy/matrices/expressions/blockmatrix.py"
          },
          {
            "rank": 0,
            "tokens": 69,
            "span_id": "BlockMatrix.shape",
            "file_path": "sympy/matrices/expressions/blockmatrix.py"
          },
          {
            "rank": 0,
            "tokens": 57,
            "span_id": "BlockMatrix.structurally_equal",
            "file_path": "sympy/matrices/expressions/blockmatrix.py"
          },
          {
            "rank": 0,
            "tokens": 28,
            "span_id": "BlockMatrix.colblocksizes",
            "file_path": "sympy/matrices/expressions/blockmatrix.py"
          },
          {
            "rank": 0,
            "tokens": 80,
            "span_id": "BlockMatrix._eval_determinant",
            "file_path": "sympy/matrices/expressions/blockmatrix.py"
          },
          {
            "rank": 0,
            "tokens": 28,
            "span_id": "BlockMatrix.rowblocksizes",
            "file_path": "sympy/matrices/expressions/blockmatrix.py"
          },
          {
            "rank": 0,
            "tokens": 346,
            "span_id": "block_collapse",
            "file_path": "sympy/matrices/expressions/blockmatrix.py"
          },
          {
            "rank": 0,
            "tokens": 186,
            "span_id": "bc_matmul",
            "file_path": "sympy/matrices/expressions/blockmatrix.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves an exception thrown when block-multiplying a BlockMatrix containing ZeroMatrix blocks. The exception occurs due to the ZeroMatrix objects being transformed into Zero objects during the multiplication process, which lack the 'cols' attribute required by the BlockMatrix operations. The search results provide detailed code spans relevant to BlockMatrix operations, including properties like 'colblocksizes' that access the 'cols' attribute. These spans include the '_blockmul' method, which is central to the block multiplication operation, and the 'block_collapse' function, which initiates the collapse strategy. Additionally, the spans include error-prone areas such as '@property methods' for 'rowblocksizes' and 'colblocksizes' that directly access the 'cols' attribute of matrix blocks, including potential Zero objects. Therefore, the identified spans are crucial for understanding and addressing the issue at hand.",
            "identified_spans": [
              {
                "span_ids": [
                  "BlockMatrix.colblocksizes",
                  "BlockMatrix._blockmul",
                  "block_collapse"
                ],
                "file_path": "sympy/matrices/expressions/blockmatrix.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 5016,
          "output_tokens": 268,
          "retry_message": null,
          "completion_cost": 0.019068
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context provided includes the `BlockMatrix` class and its related functions, specifically focusing on the block multiplication and collapse functions. The issue involves an exception when performing block matrix multiplication involving ZeroMatrix blocks. The exception occurs specifically when trying to access the 'cols' attribute of a 'Zero' object within the BlockMatrix class. This suggests that during the multiplication process, ZeroMatrix objects are being replaced or interpreted as Zero objects, which do not have the 'cols' attribute. The provided file context includes the `BlockMatrix` class with the `_blockmul` method and the `colblocksizes` property, which are likely places to look for the cause of the issue. The file context also includes the `block_collapse` function, which is directly related to the operations causing the exception.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 3901,
          "output_tokens": 200,
          "retry_message": null,
          "completion_cost": 0.014703
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "BlockMatrix._blockmul",
            "file_path": "sympy/matrices/expressions/blockmatrix.py",
            "scratch_pad": "The issue arises because the zeros in the block multiplication result are of type `Zero` instead of `ZeroMatrix`. This results in an `AttributeError` when trying to access the `cols` attribute of a `Zero` object. To fix this, we need to ensure that when `Zero` objects are encountered during block multiplication, they are converted to `ZeroMatrix` objects of appropriate size.",
            "instructions": "Convert `Zero` objects to `ZeroMatrix` objects with appropriate dimensions during block multiplication."
          },
          "output": {
            "span_id": "BlockMatrix._blockmul",
            "end_line": 169,
            "file_path": "sympy/matrices/expressions/blockmatrix.py",
            "start_line": 164,
            "instructions": "Convert `Zero` objects to `ZeroMatrix` objects with appropriate dimensions during block multiplication."
          },
          "input_tokens": 4925,
          "output_tokens": 162,
          "retry_message": null,
          "completion_cost": 0.017204999999999998
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "BlockMatrix._blockmul",
        "end_line": 169,
        "file_path": "sympy/matrices/expressions/blockmatrix.py",
        "max_tokens": 1000,
        "start_line": 164,
        "temperature": 1.6,
        "instructions": "Convert `Zero` objects to `ZeroMatrix` objects with appropriate dimensions during block multiplication.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```\n<replace>\n    def _blockmul(self, other):\n        def convert_zero_to_zeromatrix(block, rows, cols):\n            if block == 0:\n                return ZeroMatrix(rows, cols)\n            return block\n\n        if (isinstance(other, BlockMatrix) and\n                self.colblocksizes == other.rowblocksizes):\n            new_blocks = []\n            for i in range(self.blocks.rows):\n                new_row = []\n                for j in range(other.blocks.cols):\n                    block_product = ZeroMatrix(self.blocks[i, 0].rows, other.blocks[0, j].cols)\n                    for k in range(self.blocks.cols):\n                        A = self.blocks[i, k]\n                        B = other.blocks[k, j]\n                        A = convert_zero_to_zeromatrix(A, self.blocks[i, k].rows, self.blocks[i, k].cols)\n                        B = convert_zero_to_zeromatrix(B, other.blocks[k, j].rows, other.blocks[k, j].cols)\n                        block_product += A * B\n                    new_row.append(block_product)\n                new_blocks.append(new_row)\n            return BlockMatrix(Matrix(new_blocks))\n\n        return self * other\n</replace>"
          },
          "output": {
            "diff": "--- sympy/matrices/expressions/blockmatrix.py\n+++ sympy/matrices/expressions/blockmatrix.py\n@@ -162,9 +162,27 @@\n             and self.colblocksizes == other.colblocksizes)\n \n     def _blockmul(self, other):\n+        def convert_zero_to_zeromatrix(block, rows, cols):\n+            if block == 0:\n+                return ZeroMatrix(rows, cols)\n+            return block\n+\n         if (isinstance(other, BlockMatrix) and\n                 self.colblocksizes == other.rowblocksizes):\n-            return BlockMatrix(self.blocks*other.blocks)\n+            new_blocks = []\n+            for i in range(self.blocks.rows):\n+                new_row = []\n+                for j in range(other.blocks.cols):\n+                    block_product = ZeroMatrix(self.blocks[i, 0].rows, other.blocks[0, j].cols)\n+                    for k in range(self.blocks.cols):\n+                        A = self.blocks[i, k]\n+                        B = other.blocks[k, j]\n+                        A = convert_zero_to_zeromatrix(A, self.blocks[i, k].rows, self.blocks[i, k].cols)\n+                        B = convert_zero_to_zeromatrix(B, other.blocks[k, j].rows, other.blocks[k, j].cols)\n+                        block_product += A * B\n+                    new_row.append(block_product)\n+                new_blocks.append(new_row)\n+            return BlockMatrix(Matrix(new_blocks))\n \n         return self * other\n \n",
            "message": "Applied the change to sympy/matrices/expressions/blockmatrix.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 5378,
          "output_tokens": 320,
          "retry_message": null,
          "completion_cost": 0.020934
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sympy/matrices/expressions/blockmatrix.py\n+++ sympy/matrices/expressions/blockmatrix.py\n@@ -162,9 +162,27 @@\n             and self.colblocksizes == other.colblocksizes)\n \n     def _blockmul(self, other):\n+        def convert_zero_to_zeromatrix(block, rows, cols):\n+            if block == 0:\n+                return ZeroMatrix(rows, cols)\n+            return block\n+\n         if (isinstance(other, BlockMatrix) and\n                 self.colblocksizes == other.rowblocksizes):\n-            return BlockMatrix(self.blocks*other.blocks)\n+            new_blocks = []\n+            for i in range(self.blocks.rows):\n+                new_row = []\n+                for j in range(other.blocks.cols):\n+                    block_product = ZeroMatrix(self.blocks[i, 0].rows, other.blocks[0, j].cols)\n+                    for k in range(self.blocks.cols):\n+                        A = self.blocks[i, k]\n+                        B = other.blocks[k, j]\n+                        A = convert_zero_to_zeromatrix(A, self.blocks[i, k].rows, self.blocks[i, k].cols)\n+                        B = convert_zero_to_zeromatrix(B, other.blocks[k, j].rows, other.blocks[k, j].cols)\n+                        block_product += A * B\n+                    new_row.append(block_product)\n+                new_blocks.append(new_row)\n+            return BlockMatrix(Matrix(new_blocks))\n \n         return self * other\n \n",
        "model": "deepseek-coder",
        "message": "Applied the change to sympy/matrices/expressions/blockmatrix.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The changes have been applied and the issue has been resolved.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The provided changes appear to correctly address the issue by converting `Zero` objects to `ZeroMatrix` objects with appropriate dimensions during block multiplication. This should prevent the `AttributeError` caused by attempting to access the `cols` attribute of a `Zero` object.",
            "instructions": null
          },
          "output": {
            "message": "The changes have been applied and the issue has been resolved."
          },
          "input_tokens": 5807,
          "output_tokens": 127,
          "retry_message": null,
          "completion_cost": 0.019326
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The changes have been applied and the issue has been resolved.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Exception when multiplying BlockMatrix containing ZeroMatrix blocks\nWhen a block matrix with zero blocks is defined\r\n\r\n```\r\n>>> from sympy import *\r\n>>> a = MatrixSymbol(\"a\", 2, 2)\r\n>>> z = ZeroMatrix(2, 2)\r\n>>> b = BlockMatrix([[a, z], [z, z]])\r\n```\r\n\r\nthen block-multiplying it once seems to work fine:\r\n\r\n```\r\n>>> block_collapse(b * b)\r\nMatrix([\r\n[a**2, 0],\r\n[0, 0]])\r\n>>> b._blockmul(b)\r\nMatrix([\r\n[a**2, 0],\r\n[0, 0]])\r\n```\r\n\r\nbut block-multiplying twice throws an exception:\r\n\r\n```\r\n>>> block_collapse(b * b * b)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/matrices/expressions/blockmatrix.py\", line 297, in block_collapse\r\n    result = rule(expr)\r\n  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/strategies/core.py\", line 11, in exhaustive_rl\r\n    new, old = rule(expr), expr\r\n  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/strategies/core.py\", line 44, in chain_rl\r\n    expr = rule(expr)\r\n  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/strategies/core.py\", line 11, in exhaustive_rl\r\n    new, old = rule(expr), expr\r\n  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/strategies/core.py\", line 33, in conditioned_rl\r\n    return rule(expr)\r\n  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/strategies/core.py\", line 95, in switch_rl\r\n    return rl(expr)\r\n  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/matrices/expressions/blockmatrix.py\", line 361, in bc_matmul\r\n    matrices[i] = A._blockmul(B)\r\n  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/matrices/expressions/blockmatrix.py\", line 91, in _blockmul\r\n    self.colblocksizes == other.rowblocksizes):\r\n  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/matrices/expressions/blockmatrix.py\", line 80, in colblocksizes\r\n    return [self.blocks[0, i].cols for i in range(self.blockshape[1])]\r\n  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/matrices/expressions/blockmatrix.py\", line 80, in <listcomp>\r\n    return [self.blocks[0, i].cols for i in range(self.blockshape[1])]\r\nAttributeError: 'Zero' object has no attribute 'cols'\r\n>>> b._blockmul(b)._blockmul(b)\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/matrices/expressions/blockmatrix.py\", line 91, in _blockmul\r\n    self.colblocksizes == other.rowblocksizes):\r\n  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/matrices/expressions/blockmatrix.py\", line 80, in colblocksizes\r\n    return [self.blocks[0, i].cols for i in range(self.blockshape[1])]\r\n  File \"/home/jan/.pyenv/versions/3.7.4/lib/python3.7/site-packages/sympy/matrices/expressions/blockmatrix.py\", line 80, in <listcomp>\r\n    return [self.blocks[0, i].cols for i in range(self.blockshape[1])]\r\nAttributeError: 'Zero' object has no attribute 'cols'\r\n```\r\n\r\nThis seems to be caused by the fact that the zeros in `b._blockmul(b)` are not `ZeroMatrix` but `Zero`:\r\n\r\n```\r\n>>> type(b._blockmul(b).blocks[0, 1])\r\n<class 'sympy.core.numbers.Zero'>\r\n```\r\n\r\nHowever, I don't understand SymPy internals well enough to find out why this happens. I use Python 3.7.4 and sympy 1.4 (installed with pip).\n"
}