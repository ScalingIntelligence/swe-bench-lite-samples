{
  "info": {
    "duration": 222.71935391426086,
    "submission": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex bc227d2c4..88b450b21 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -588,9 +588,7 @@ class PyLinter(\n         Returns iterator of paths to discovered modules and packages.\n         \"\"\"\n         for something in files_or_modules:\n-            if os.path.isdir(something) and not os.path.isfile(\n-                os.path.join(something, \"__init__.py\")\n-            ):\n+            if os.path.isdir(something):\n                 skip_subtrees: list[str] = []\n                 for root, _, files in os.walk(something):\n                     if any(root.startswith(s) for s in skip_subtrees):\n@@ -608,7 +606,8 @@ class PyLinter(\n \n                     if \"__init__.py\" in files:\n                         skip_subtrees.append(root)\n-                        yield root\n+                        if not os.path.basename(root) + \".py\" in files:\n+                            yield root\n                     else:\n                         yield from (\n                             os.path.join(root, file)\n",
    "total_cost": 0.196056,
    "instance_id": "pylint-dev__pylint-7114",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue seems to be related to how Pylint handles module names and directory structure, particularly when a module has the same name as its containing directory. The error message suggests that Pylint is looking for `__init__.py` files where they don't exist or aren't expected. This could be due to how Pylint determines the module paths and handles the expansion of these modules. It might involve functions like `_modpath_from_file`, `get_python_path`, `expand_modules`, and methods within the `PyLinter` class. Additionally, the `pylint/__init__.py` and `pylint/__main__.py` files are relevant for understanding how Pylint is being run and what modifications are made to the system path. A deeper look into these functionalities might help in diagnosing and fixing the issue.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "PyLinter"
                ],
                "code_snippet": null,
                "file_pattern": "pylint/lint/*.py",
                "function_names": [
                  "expand_modules",
                  "get_python_path",
                  "_modpath_from_file"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "pylint/*.py",
                "function_names": [
                  "run_pylint"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 260,
                "span_id": "PyLinter",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 0,
                "tokens": 703,
                "span_id": "expand_modules",
                "file_path": "pylint/lint/expand_modules.py"
              },
              {
                "rank": 0,
                "tokens": 123,
                "span_id": "get_python_path",
                "file_path": "pylint/lint/expand_modules.py"
              },
              {
                "rank": 0,
                "tokens": 84,
                "span_id": "_modpath_from_file",
                "file_path": "pylint/lint/expand_modules.py"
              },
              {
                "rank": 0,
                "tokens": 73,
                "span_id": "run_pylint",
                "file_path": "pylint/__init__.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "PyLinter"
                ],
                "code_snippet": null,
                "file_pattern": "pylint/lint/*.py",
                "function_names": [
                  "expand_modules",
                  "get_python_path",
                  "_modpath_from_file"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "pylint/*.py",
                "function_names": [
                  "run_pylint"
                ]
              }
            ]
          },
          "input_tokens": 3834,
          "output_tokens": 307,
          "retry_message": null,
          "completion_cost": 0.016107
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 260,
            "span_id": "PyLinter",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 0,
            "tokens": 703,
            "span_id": "expand_modules",
            "file_path": "pylint/lint/expand_modules.py"
          },
          {
            "rank": 0,
            "tokens": 123,
            "span_id": "get_python_path",
            "file_path": "pylint/lint/expand_modules.py"
          },
          {
            "rank": 0,
            "tokens": 84,
            "span_id": "_modpath_from_file",
            "file_path": "pylint/lint/expand_modules.py"
          },
          {
            "rank": 0,
            "tokens": 73,
            "span_id": "run_pylint",
            "file_path": "pylint/__init__.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "Analyzing the reported issue, the key problems seem to be related to the handling of module names that clash with their containing package names, leading to parsing errors during Pylint execution. The issue specifically mentions errors when trying to parse modules named the same as their containing package and the inability to find `__init__.py` files in such cases. The provided search results contain relevant code spans in the `pylint/lint/pylinter.py` file particularly focusing on the PyLinter class and its initialization, which manages the overall linting process. Additionally, the `pylint/lint/expand_modules.py` file contains functions dealing with module path expansion and handling of module files, which are critical for correctly identifying and handling modules during linting. These code spans directly relate to the issue by outlining how Pylint processes and handles modules, including checks for `__init__.py` files which are central to the reported problem. The `pylint/__init__.py` file includes the high-level function `run_pylint` which encapsulates the invocation of the linting process, though it doesn't directly address the issue but is contextually relevant as it invokes the core linting functionality.",
            "identified_spans": [
              {
                "span_ids": [
                  "PyLinter",
                  "PyLinter.__init__"
                ],
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "span_ids": [
                  "_modpath_from_file",
                  "get_python_path",
                  "expand_modules"
                ],
                "file_path": "pylint/lint/expand_modules.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 5115,
          "output_tokens": 380,
          "retry_message": null,
          "completion_cost": 0.021045
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The provided file context includes portions of Pylint's codebase that are relevant to module parsing and handling, particularly the handling of module paths and the expansion of modules. The functions like `_modpath_from_file`, `get_python_path`, and `expand_modules` are directly related to how Pylint manages module paths and expands modules, which are critical for addressing the issue of module name conflicts and the failure to find `__init__.py` files. Additionally, the `PyLinter` class includes configurations and settings pertinent to how Pylint performs its checks and handles errors, which could be modified to address the issue. However, the specific method or tweak needed to solve the problem is not explicitly detailed in the provided context, suggesting further investigation might be necessary to pinpoint the exact code changes required.",
            "search_suggestions": "Consider looking into the methods within the PyLinter class that handle module loading and path resolution, as well as the functions responsible for determining if a module is a package or a regular module. Additionally, examining how Pylint uses configurations and settings related to module parsing could provide insights into potential fixes."
          },
          "output": {
            "message": "Consider looking into the methods within the PyLinter class that handle module loading and path resolution, as well as the functions responsible for determining if a module is a package or a regular module. Additionally, examining how Pylint uses configurations and settings related to module parsing could provide insights into potential fixes."
          },
          "input_tokens": 4964,
          "output_tokens": 268,
          "retry_message": null,
          "completion_cost": 0.018912
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Consider looking into the methods within the PyLinter class that handle module loading and path resolution, as well as the functions responsible for determining if a module is a package or a regular module. Additionally, examining how Pylint uses configurations and settings related to module parsing could provide insights into potential fixes.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue appears to be related to how Pylint handles the expansion of modules and their paths, particularly when a module shares its name with its directory. Key areas of focus should be methods within the PyLinter class that deal with module loading and path resolution, including but not limited to `_discover_files`, `check_single_file`, `_expand_files`, and `_get_namespace_for_file`. Additionally, the functions responsible for determining module paths such as `_modpath_from_file`, `get_python_path`, and `expand_modules` are crucial. Further examination of how Pylint determines if a module is a package or a regular module and how it handles configurations related to module parsing would also be beneficial to understand why it seeks `__init__.py` files in unexpected locations.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "PyLinter"
                ],
                "code_snippet": null,
                "file_pattern": "pylint/lint/*.py",
                "function_names": [
                  "_discover_files",
                  "check_single_file",
                  "_expand_files",
                  "_get_namespace_for_file"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "pylint/lint/*.py",
                "function_names": [
                  "_modpath_from_file",
                  "get_python_path",
                  "expand_modules"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 202,
                "span_id": "PyLinter._discover_files",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 0,
                "tokens": 77,
                "span_id": "PyLinter.check_single_file",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 0,
                "tokens": 120,
                "span_id": "PyLinter._expand_files",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 0,
                "tokens": 77,
                "span_id": "PyLinter._get_namespace_for_file",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 0,
                "tokens": 84,
                "span_id": "_modpath_from_file",
                "file_path": "pylint/lint/expand_modules.py"
              },
              {
                "rank": 0,
                "tokens": 123,
                "span_id": "get_python_path",
                "file_path": "pylint/lint/expand_modules.py"
              },
              {
                "rank": 0,
                "tokens": 703,
                "span_id": "expand_modules",
                "file_path": "pylint/lint/expand_modules.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "PyLinter"
                ],
                "code_snippet": null,
                "file_pattern": "pylint/lint/*.py",
                "function_names": [
                  "_discover_files",
                  "check_single_file",
                  "_expand_files",
                  "_get_namespace_for_file"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "pylint/lint/*.py",
                "function_names": [
                  "_modpath_from_file",
                  "get_python_path",
                  "expand_modules"
                ]
              }
            ]
          },
          "input_tokens": 7603,
          "output_tokens": 388,
          "retry_message": null,
          "completion_cost": 0.028629
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 202,
            "span_id": "PyLinter._discover_files",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 0,
            "tokens": 77,
            "span_id": "PyLinter.check_single_file",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 0,
            "tokens": 120,
            "span_id": "PyLinter._expand_files",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 0,
            "tokens": 77,
            "span_id": "PyLinter._get_namespace_for_file",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 0,
            "tokens": 84,
            "span_id": "_modpath_from_file",
            "file_path": "pylint/lint/expand_modules.py"
          },
          {
            "rank": 0,
            "tokens": 123,
            "span_id": "get_python_path",
            "file_path": "pylint/lint/expand_modules.py"
          },
          {
            "rank": 0,
            "tokens": 703,
            "span_id": "expand_modules",
            "file_path": "pylint/lint/expand_modules.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about linting failing if a module contains a file of the same name as the module, which leads to the linter searching for a non-existent '__init__.py' file. This behavior is causing errors like 'F0010' which indicates a parse error. The issue is particularly seen when running `pylint a` with `a/a.py` present. The current context already has relevant parts of the code from `pylinter.py` and `expand_modules.py` that handle module discovery, file paths, and error handling. The new search results further detail the `PyLinter` class's methods for file discovery, expansion, and checking, as well as the `expand_modules` function. These new sections allow for a more thorough understanding of how file paths are handled and how modules are expanded, which is crucial for addressing the issue of the linter failing due to module-filename conflicts. The identified code spans from the new search results directly relate to the handling of module paths, file existence checks, and module expansion, which are directly relevant to the issue at hand. These spans should be considered in the context of addressing the issue to ensure proper handling of file paths and module names to avoid such conflicts in future linting operations.",
            "identified_spans": [
              {
                "span_ids": [
                  "PyLinter._discover_files",
                  "PyLinter._expand_files"
                ],
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "span_ids": [
                  "expand_modules"
                ],
                "file_path": "pylint/lint/expand_modules.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 7809,
          "output_tokens": 396,
          "retry_message": null,
          "completion_cost": 0.029367
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context provided exposes key methods and functionalities from the Pylint codebase relevant to the issue reported. Specifically, the methods _discover_files, _expand_files, and expand_modules in the PyLinter class and the expand_modules function are directly related to the process of module discovery and path expansion, which are central to the issue. Additionally, the methods _modpath_from_file and get_python_path in expand_modules.py manage module path resolution and Python path determination, which are crucial for understanding how Pylint handles module paths and discovers them. Therefore, the provided context seems sufficient to address the linting issue concerning module and path handling in Pylint.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 5398,
          "output_tokens": 182,
          "retry_message": null,
          "completion_cost": 0.018924
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "PyLinter._discover_files",
            "file_path": "pylint/lint/pylinter.py",
            "scratch_pad": "The issue seems to be related to the discovery and handling of files during linting. Specifically, when a module contains a file of the same name, it causes confusion and the linting process fails. To address this, we need to ensure that the file discovery process correctly handles such cases.",
            "instructions": "Update the '_discover_files' method in the PyLinter class to ensure it correctly handles directories and files with the same name. Specifically, when checking if a directory is a module, ensure it does not mistakenly look for an '__init__.py' file within itself if it contains a file with the same name."
          },
          "output": {
            "span_id": "PyLinter._discover_files",
            "end_line": 619,
            "file_path": "pylint/lint/pylinter.py",
            "start_line": 585,
            "instructions": "Update the '_discover_files' method in the PyLinter class to ensure it correctly handles directories and files with the same name. Specifically, when checking if a directory is a module, ensure it does not mistakenly look for an '__init__.py' file within itself if it contains a file with the same name."
          },
          "input_tokens": 5585,
          "output_tokens": 188,
          "retry_message": null,
          "completion_cost": 0.019575
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "PyLinter._discover_files",
        "end_line": 619,
        "file_path": "pylint/lint/pylinter.py",
        "max_tokens": 1000,
        "start_line": 585,
        "temperature": 1.6,
        "instructions": "Update the '_discover_files' method in the PyLinter class to ensure it correctly handles directories and files with the same name. Specifically, when checking if a directory is a module, ensure it does not mistakenly look for an '__init__.py' file within itself if it contains a file with the same name.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\n    def _discover_files(self, files_or_modules: Sequence[str]) -> Iterator[str]:\n        \"\"\"Discover python modules and packages in sub-directory.\n\n        Returns iterator of paths to discovered modules and packages.\n        \"\"\"\n        for something in files_or_modules:\n            if os.path.isdir(something):\n                skip_subtrees: list[str] = []\n                for root, _, files in os.walk(something):\n                    if any(root.startswith(s) for s in skip_subtrees):\n                        # Skip subtree of already discovered package.\n                        continue\n\n                    if _is_ignored_file(\n                        root,\n                        self.config.ignore,\n                        self.config.ignore_patterns,\n                        self.config.ignore_paths,\n                    ):\n                        skip_subtrees.append(root)\n                        continue\n\n                    if \"__init__.py\" in files:\n                        skip_subtrees.append(root)\n                        if not os.path.basename(root) + \".py\" in files:\n                            yield root\n                    else:\n                        yield from (\n                            os.path.join(root, file)\n                            for file in files\n                            if file.endswith(\".py\")\n                        )\n            else:\n                yield something\n</replace>"
          },
          "output": {
            "diff": "--- pylint/lint/pylinter.py\n+++ pylint/lint/pylinter.py\n@@ -588,9 +588,7 @@\n         Returns iterator of paths to discovered modules and packages.\n         \"\"\"\n         for something in files_or_modules:\n-            if os.path.isdir(something) and not os.path.isfile(\n-                os.path.join(something, \"__init__.py\")\n-            ):\n+            if os.path.isdir(something):\n                 skip_subtrees: list[str] = []\n                 for root, _, files in os.walk(something):\n                     if any(root.startswith(s) for s in skip_subtrees):\n@@ -608,7 +606,8 @@\n \n                     if \"__init__.py\" in files:\n                         skip_subtrees.append(root)\n-                        yield root\n+                        if not os.path.basename(root) + \".py\" in files:\n+                            yield root\n                     else:\n                         yield from (\n                             os.path.join(root, file)\n",
            "message": "Applied the change to pylint/lint/pylinter.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 5870,
          "output_tokens": 300,
          "retry_message": null,
          "completion_cost": 0.02211
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- pylint/lint/pylinter.py\n+++ pylint/lint/pylinter.py\n@@ -588,9 +588,7 @@\n         Returns iterator of paths to discovered modules and packages.\n         \"\"\"\n         for something in files_or_modules:\n-            if os.path.isdir(something) and not os.path.isfile(\n-                os.path.join(something, \"__init__.py\")\n-            ):\n+            if os.path.isdir(something):\n                 skip_subtrees: list[str] = []\n                 for root, _, files in os.walk(something):\n                     if any(root.startswith(s) for s in skip_subtrees):\n@@ -608,7 +606,8 @@\n \n                     if \"__init__.py\" in files:\n                         skip_subtrees.append(root)\n-                        yield root\n+                        if not os.path.basename(root) + \".py\" in files:\n+                            yield root\n                     else:\n                         yield from (\n                             os.path.join(root, file)\n",
        "model": "deepseek-coder",
        "message": "Applied the change to pylint/lint/pylinter.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The code has been updated to handle the case where a directory contains a file with the same name. This should resolve the issues with linting.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The updated code in `_discover_files` ensures that when a directory is being checked for files, it does not mistakenly look for an '__init__.py' file within itself if it contains a file with the same name. This should address the reported issue.",
            "instructions": null
          },
          "output": {
            "message": "The code has been updated to handle the case where a directory contains a file with the same name. This should resolve the issues with linting."
          },
          "input_tokens": 6309,
          "output_tokens": 164,
          "retry_message": null,
          "completion_cost": 0.021387
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The code has been updated to handle the case where a directory contains a file with the same name. This should resolve the issues with linting.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Linting fails if module contains module of the same name\n### Steps to reproduce\r\n\r\nGiven multiple files:\r\n```\r\n.\r\n`-- a/\r\n    |-- a.py\r\n    `-- b.py\r\n```\r\nWhich are all empty, running `pylint a` fails:\r\n\r\n```\r\n$ pylint a\r\n************* Module a\r\na/__init__.py:1:0: F0010: error while code parsing: Unable to load file a/__init__.py:\r\n[Errno 2] No such file or directory: 'a/__init__.py' (parse-error)\r\n$\r\n```\r\n\r\nHowever, if I rename `a.py`, `pylint a` succeeds:\r\n\r\n```\r\n$ mv a/a.py a/c.py\r\n$ pylint a\r\n$\r\n```\r\nAlternatively, I can also `touch a/__init__.py`, but that shouldn't be necessary anymore.\r\n\r\n### Current behavior\r\n\r\nRunning `pylint a` if `a/a.py` is present fails while searching for an `__init__.py` file.\r\n\r\n### Expected behavior\r\n\r\nRunning `pylint a` if `a/a.py` is present should succeed.\r\n\r\n### pylint --version output\r\n\r\nResult of `pylint --version` output:\r\n\r\n```\r\npylint 3.0.0a3\r\nastroid 2.5.6\r\nPython 3.8.5 (default, Jan 27 2021, 15:41:15) \r\n[GCC 9.3.0]\r\n```\r\n\r\n### Additional info\r\n\r\nThis also has some side-effects in module resolution. For example, if I create another file `r.py`:\r\n\r\n```\r\n.\r\n|-- a\r\n|   |-- a.py\r\n|   `-- b.py\r\n`-- r.py\r\n```\r\n\r\nWith the content:\r\n\r\n```\r\nfrom a import b\r\n```\r\n\r\nRunning `pylint -E r` will run fine, but `pylint -E r a` will fail. Not just for module a, but for module r as well.\r\n\r\n```\r\n************* Module r\r\nr.py:1:0: E0611: No name 'b' in module 'a' (no-name-in-module)\r\n************* Module a\r\na/__init__.py:1:0: F0010: error while code parsing: Unable to load file a/__init__.py:\r\n[Errno 2] No such file or directory: 'a/__init__.py' (parse-error)\r\n```\r\n\r\nAgain, if I rename `a.py` to `c.py`, `pylint -E r a` will work perfectly.\n"
}