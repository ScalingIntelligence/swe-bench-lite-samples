{
  "info": {
    "duration": 182.60391306877136,
    "submission": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex bc227d2c4..3135e0f80 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -588,9 +588,9 @@ class PyLinter(\n         Returns iterator of paths to discovered modules and packages.\n         \"\"\"\n         for something in files_or_modules:\n-            if os.path.isdir(something) and not os.path.isfile(\n-                os.path.join(something, \"__init__.py\")\n-            ):\n+            if os.path.isfile(something) and something.endswith('.py'):\n+                yield something\n+            elif os.path.isdir(something):\n                 skip_subtrees: list[str] = []\n                 for root, _, files in os.walk(something):\n                     if any(root.startswith(s) for s in skip_subtrees):\n@@ -615,8 +615,6 @@ class PyLinter(\n                             for file in files\n                             if file.endswith(\".py\")\n                         )\n-            else:\n-                yield something\n \n     def check(self, files_or_modules: Sequence[str] | str) -> None:\n         \"\"\"Main checking entry: check a list of files or modules from their name.\n",
    "total_cost": 0.184497,
    "instance_id": "pylint-dev__pylint-7114",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue describes a problem where running `pylint` on a directory containing a module with the same name as the directory itself (e.g., `a/a.py` within `a/`) leads to a failure in linting. The error message indicates that `pylint` is unexpectedly searching for an `__init__.py` file, which shouldn't be necessary. Investigate the logic in `pylint` that handles module expansion and file discovery to understand why and how the presence of a file with the same name as its directory is causing this issue.",
            "search_requests": [
              {
                "query": "module expansion and file discovery",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/lint/**/*.py",
                "function_names": [
                  "expand_modules",
                  "discover_files",
                  "_expand_files",
                  "_discover_files",
                  "_modpath_from_file"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 202,
                "span_id": "PyLinter._discover_files",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 3,
                "tokens": 120,
                "span_id": "PyLinter._expand_files",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 1,
                "tokens": 703,
                "span_id": "expand_modules",
                "file_path": "pylint/lint/expand_modules.py"
              },
              {
                "rank": 2,
                "tokens": 84,
                "span_id": "_modpath_from_file",
                "file_path": "pylint/lint/expand_modules.py"
              }
            ],
            "search_requests": [
              {
                "query": "module expansion and file discovery",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/lint/**/*.py",
                "function_names": [
                  "expand_modules",
                  "discover_files",
                  "_expand_files",
                  "_discover_files",
                  "_modpath_from_file"
                ]
              }
            ]
          },
          "input_tokens": 3834,
          "output_tokens": 228,
          "retry_message": null,
          "completion_cost": 0.014922000000000001
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 202,
            "span_id": "PyLinter._discover_files",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 3,
            "tokens": 120,
            "span_id": "PyLinter._expand_files",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 1,
            "tokens": 703,
            "span_id": "expand_modules",
            "file_path": "pylint/lint/expand_modules.py"
          },
          {
            "rank": 2,
            "tokens": 84,
            "span_id": "_modpath_from_file",
            "file_path": "pylint/lint/expand_modules.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves a failure when a module name conflicts with the directory name in a Python package hierarchy. Pylint fails to correctly handle such situations, leading to errors during linting. The provided search results offer insights into Pylint's internal mechanisms for discovering and expanding files (modules) during the linting process. The _discover_files method in PyLinter class manages the discovery of files within directories, specifically checking for the presence of '__init__.py' to identify package directories. The _expand_files method, also in PyLinter, manages the expansion of module paths while handling potential errors during this process. In expand_modules, a function outside the PyLinter class, the logic for expanding modules is detailed, including dealing with files and directories, updating paths, and handling import errors. This function's logic directly impacts how Pylint resolves module paths, which is critical for addressing the issue of conflict between module and directory names. It's essential to note that the provided code snippets capture key functionality related to file and module discovery, which aligns closely with the reported issue's core concern - the handling of file paths and module imports within Python packages. These code spans are relevant as they pertain to the internal logic used by Pylint to manage and parse files, indicating potential areas where adjustments might be necessary to resolve the issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "PyLinter._discover_files",
                  "PyLinter._expand_files"
                ],
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "span_ids": [
                  "expand_modules",
                  "_modpath_from_file",
                  "get_python_path"
                ],
                "file_path": "pylint/lint/expand_modules.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4142,
          "output_tokens": 427,
          "retry_message": null,
          "completion_cost": 0.018831
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The issue describes a problem where running `pylint` on a directory containing a module with the same name as the directory itself (e.g., `a/a.py` within `a/`) leads to a failure in linting. The error message indicates that `pylint` is unexpectedly searching for an `__init__.py` file, which shouldn't be necessary. The provided file context includes methods like `_discover_files` and `_expand_files` in the `PyLinter` class, as well as functions in `expand_modules.py` that handle module expansion and file discovery. These methods and functions are relevant to the issue as they deal with how `pylint` processes module paths and file discovery. The logic in these methods does appear to account for directories and files within those directories, including checks for `__init__.py`. However, there is no explicit check or handling for a module with the same name as its directory. This suggests that the issue might be due to the lack of specific handling for this edge case.",
            "search_suggestions": "Look for additional logic related to module name resolution and directory-module name conflict resolution in other parts of the `pylint` codebase, especially focusing on any methods involved in determining module paths or handling import resolution errors."
          },
          "output": {
            "message": "Look for additional logic related to module name resolution and directory-module name conflict resolution in other parts of the `pylint` codebase, especially focusing on any methods involved in determining module paths or handling import resolution errors."
          },
          "input_tokens": 4020,
          "output_tokens": 305,
          "retry_message": null,
          "completion_cost": 0.016635
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look for additional logic related to module name resolution and directory-module name conflict resolution in other parts of the `pylint` codebase, especially focusing on any methods involved in determining module paths or handling import resolution errors.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "Based on the provided context, it's evident that the `pylint` codebase involves a complex process for module expansion and file discovery, particularly through methods like `_expand_files` and `_discover_files` in the `PyLinter` class. The issue at hand involves a conflict where a file named similarly to its directory causes an error by triggering an unexpected search for an `__init__.py` file. To address this, it's crucial to delve deeper into the logic governing module name resolution, particularly where it intersects with directory-module name conflicts. This might include checking the method `_modpath_from_file` in `expand_modules.py`, which constructs module paths, and ensuring it handles exceptions related to file and directory names correctly.",
            "search_requests": [
              {
                "query": "module name resolution and directory-module name conflict",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "pylint/lint/**/*.py",
                "function_names": [
                  "expand_modules",
                  "discover_files",
                  "_expand_files",
                  "_discover_files",
                  "_modpath_from_file",
                  "get_python_path",
                  "_get_namespace_for_file"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 84,
                "span_id": "_modpath_from_file",
                "file_path": "pylint/lint/expand_modules.py"
              },
              {
                "rank": 1,
                "tokens": 703,
                "span_id": "expand_modules",
                "file_path": "pylint/lint/expand_modules.py"
              },
              {
                "rank": 4,
                "tokens": 123,
                "span_id": "get_python_path",
                "file_path": "pylint/lint/expand_modules.py"
              },
              {
                "rank": 2,
                "tokens": 202,
                "span_id": "PyLinter._discover_files",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 3,
                "tokens": 120,
                "span_id": "PyLinter._expand_files",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 8,
                "tokens": 77,
                "span_id": "PyLinter._get_namespace_for_file",
                "file_path": "pylint/lint/pylinter.py"
              }
            ],
            "search_requests": [
              {
                "query": "module name resolution and directory-module name conflict",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "pylint/lint/**/*.py",
                "function_names": [
                  "expand_modules",
                  "discover_files",
                  "_expand_files",
                  "_discover_files",
                  "_modpath_from_file",
                  "get_python_path",
                  "_get_namespace_for_file"
                ]
              }
            ]
          },
          "input_tokens": 6585,
          "output_tokens": 318,
          "retry_message": null,
          "completion_cost": 0.024525
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 84,
            "span_id": "_modpath_from_file",
            "file_path": "pylint/lint/expand_modules.py"
          },
          {
            "rank": 1,
            "tokens": 703,
            "span_id": "expand_modules",
            "file_path": "pylint/lint/expand_modules.py"
          },
          {
            "rank": 4,
            "tokens": 123,
            "span_id": "get_python_path",
            "file_path": "pylint/lint/expand_modules.py"
          },
          {
            "rank": 2,
            "tokens": 202,
            "span_id": "PyLinter._discover_files",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 3,
            "tokens": 120,
            "span_id": "PyLinter._expand_files",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 8,
            "tokens": 77,
            "span_id": "PyLinter._get_namespace_for_file",
            "file_path": "pylint/lint/pylinter.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue indicates that Pylint fails when a module directory contains a file with the same name as the directory, e.g., 'a.py' inside a directory 'a'. The issue is related to Pylint's handling of module discovery and import resolution. This involves two primary functions: '_discover_files' and '_expand_files' in the Pylinter class. Both functions are responsible for file discovery and module expansion, respectively, and they leverage the 'expand_modules' function in 'expand_modules.py' to handle the actual expansion. This process also includes checking for '__init__.py' files, which Pylint uses to determine if a directory is a package. From the provided context and search results, it's clear that these functions are critical for Pylint's module handling. The new 'PyLinter._get_namespace_for_file' method might be relevant for further namespace resolution steps. Therefore, the identified spans are crucial for diagnosing and potentially resolving the linting issue described.",
            "identified_spans": [
              {
                "span_ids": [
                  "PyLinter._discover_files",
                  "PyLinter._expand_files"
                ],
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "span_ids": [
                  "expand_modules"
                ],
                "file_path": "pylint/lint/expand_modules.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 6815,
          "output_tokens": 346,
          "retry_message": null,
          "completion_cost": 0.025635
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The provided file context includes relevant code from `pylinter.py` and `expand_modules.py`, which deal with module discovery and file parsing in the pylint codebase. The methods `_discover_files` and `_expand_files` in `pylinter.py` are directly involved in handling file and module expansion, which is core to addressing the issue of module name conflicts. Additionally, the method `_modpath_from_file` in `expand_modules.py` handles the construction of module paths, which plays a crucial role in resolving conflicts when a file and its containing directory have similar names. Given the direct relevance of these methods to the reported issue, it can be concluded that the file context provided is complete for addressing the concerns raised in the issue.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 5387,
          "output_tokens": 200,
          "retry_message": null,
          "completion_cost": 0.019161
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "PyLinter._discover_files",
            "file_path": "pylint/lint/pylinter.py",
            "scratch_pad": "The issue described involves the inability to parse modules when a module and a directory share the same name. When a module named 'a.py' is located within a directory named 'a', it causes the linter to expect an '__init__.py' file in the directory, leading to a failure. This can be addressed by distinguishing between file and directory paths in the _discover_files method in pylinter.py. Specifically, the check for the existence of '__init__.py' should be refined to avoid confusion between a module file and a directory with the same name. This involves ensuring that when a file is encountered, it is not mistaken for a directory or vice versa.",
            "instructions": "Update the _discover_files method in pylinter.py to handle cases where a file and a directory share the same name but are not the same. Ensure that when a file is encountered, it is not misinterpreted as a directory and the check for '__init__.py' is only performed when the path is a directory."
          },
          "output": {
            "span_id": "PyLinter._discover_files",
            "end_line": 619,
            "file_path": "pylint/lint/pylinter.py",
            "start_line": 585,
            "instructions": "Update the _discover_files method in pylinter.py to handle cases where a file and a directory share the same name but are not the same. Ensure that when a file is encountered, it is not misinterpreted as a directory and the check for '__init__.py' is only performed when the path is a directory."
          },
          "input_tokens": 5585,
          "output_tokens": 269,
          "retry_message": null,
          "completion_cost": 0.02079
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "PyLinter._discover_files",
        "end_line": 619,
        "file_path": "pylint/lint/pylinter.py",
        "max_tokens": 1000,
        "start_line": 585,
        "temperature": 1.6,
        "instructions": "Update the _discover_files method in pylinter.py to handle cases where a file and a directory share the same name but are not the same. Ensure that when a file is encountered, it is not misinterpreted as a directory and the check for '__init__.py' is only performed when the path is a directory.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n    def _discover_files(self, files_or_modules: Sequence[str]) -> Iterator[str]:\n        \"\"\"Discover python modules and packages in sub-directory.\n\n        Returns iterator of paths to discovered modules and packages.\n        \"\"\"\n        for something in files_or_modules:\n            if os.path.isfile(something) and something.endswith('.py'):\n                yield something\n            elif os.path.isdir(something):\n                skip_subtrees: list[str] = []\n                for root, _, files in os.walk(something):\n                    if any(root.startswith(s) for s in skip_subtrees):\n                        # Skip subtree of already discovered package.\n                        continue\n\n                    if _is_ignored_file(\n                        root,\n                        self.config.ignore,\n                        self.config.ignore_patterns,\n                        self.config.ignore_paths,\n                    ):\n                        skip_subtrees.append(root)\n                        continue\n\n                    if \"__init__.py\" in files:\n                        skip_subtrees.append(root)\n                        yield root\n                    else:\n                        yield from (\n                            os.path.join(root, file)\n                            for file in files\n                            if file.endswith(\".py\")\n                        )\n</replace>"
          },
          "output": {
            "diff": "--- pylint/lint/pylinter.py\n+++ pylint/lint/pylinter.py\n@@ -588,9 +588,9 @@\n         Returns iterator of paths to discovered modules and packages.\n         \"\"\"\n         for something in files_or_modules:\n-            if os.path.isdir(something) and not os.path.isfile(\n-                os.path.join(something, \"__init__.py\")\n-            ):\n+            if os.path.isfile(something) and something.endswith('.py'):\n+                yield something\n+            elif os.path.isdir(something):\n                 skip_subtrees: list[str] = []\n                 for root, _, files in os.walk(something):\n                     if any(root.startswith(s) for s in skip_subtrees):\n@@ -615,8 +615,6 @@\n                             for file in files\n                             if file.endswith(\".py\")\n                         )\n-            else:\n-                yield something\n \n     def check(self, files_or_modules: Sequence[str] | str) -> None:\n         \"\"\"Main checking entry: check a list of files or modules from their name.\n",
            "message": "Applied the change to pylint/lint/pylinter.py.",
            "verification_errors": []
          },
          "input_tokens": 5872,
          "output_tokens": 294,
          "retry_message": null,
          "completion_cost": 0.022026
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- pylint/lint/pylinter.py\n+++ pylint/lint/pylinter.py\n@@ -588,9 +588,9 @@\n         Returns iterator of paths to discovered modules and packages.\n         \"\"\"\n         for something in files_or_modules:\n-            if os.path.isdir(something) and not os.path.isfile(\n-                os.path.join(something, \"__init__.py\")\n-            ):\n+            if os.path.isfile(something) and something.endswith('.py'):\n+                yield something\n+            elif os.path.isdir(something):\n                 skip_subtrees: list[str] = []\n                 for root, _, files in os.walk(something):\n                     if any(root.startswith(s) for s in skip_subtrees):\n@@ -615,8 +615,6 @@\n                             for file in files\n                             if file.endswith(\".py\")\n                         )\n-            else:\n-                yield something\n \n     def check(self, files_or_modules: Sequence[str] | str) -> None:\n         \"\"\"Main checking entry: check a list of files or modules from their name.\n",
        "model": "deepseek-coder",
        "message": "Applied the change to pylint/lint/pylinter.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The fix implemented in the _discover_files method addresses the issue by correctly handling the distinction between files and directories. This ensures that the presence of a file named after a directory does not lead to a search for an `__init__.py` file, thus resolving the pylint failure issue.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The change made to the _discover_files method in pylint/lint/pylinter.py seems to adequately address the issue. The updated logic ensures that files and directories are distinguished, preventing the scenario where a file named `a.py` within a directory named `a` causes a false expectation of an `__init__.py` file. The yield statement is now appropriately conditional, which should resolve the linting failure described in the issue. It's now ready to proceed as per the requirement, handling the confusion between file and directory paths.",
            "instructions": null
          },
          "output": {
            "message": "The fix implemented in the _discover_files method addresses the issue by correctly handling the distinction between files and directories. This ensures that the presence of a file named after a directory does not lead to a search for an `__init__.py` file, thus resolving the pylint failure issue."
          },
          "input_tokens": 6164,
          "output_tokens": 232,
          "retry_message": null,
          "completion_cost": 0.021972000000000002
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The fix implemented in the _discover_files method addresses the issue by correctly handling the distinction between files and directories. This ensures that the presence of a file named after a directory does not lead to a search for an `__init__.py` file, thus resolving the pylint failure issue.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Linting fails if module contains module of the same name\n### Steps to reproduce\r\n\r\nGiven multiple files:\r\n```\r\n.\r\n`-- a/\r\n    |-- a.py\r\n    `-- b.py\r\n```\r\nWhich are all empty, running `pylint a` fails:\r\n\r\n```\r\n$ pylint a\r\n************* Module a\r\na/__init__.py:1:0: F0010: error while code parsing: Unable to load file a/__init__.py:\r\n[Errno 2] No such file or directory: 'a/__init__.py' (parse-error)\r\n$\r\n```\r\n\r\nHowever, if I rename `a.py`, `pylint a` succeeds:\r\n\r\n```\r\n$ mv a/a.py a/c.py\r\n$ pylint a\r\n$\r\n```\r\nAlternatively, I can also `touch a/__init__.py`, but that shouldn't be necessary anymore.\r\n\r\n### Current behavior\r\n\r\nRunning `pylint a` if `a/a.py` is present fails while searching for an `__init__.py` file.\r\n\r\n### Expected behavior\r\n\r\nRunning `pylint a` if `a/a.py` is present should succeed.\r\n\r\n### pylint --version output\r\n\r\nResult of `pylint --version` output:\r\n\r\n```\r\npylint 3.0.0a3\r\nastroid 2.5.6\r\nPython 3.8.5 (default, Jan 27 2021, 15:41:15) \r\n[GCC 9.3.0]\r\n```\r\n\r\n### Additional info\r\n\r\nThis also has some side-effects in module resolution. For example, if I create another file `r.py`:\r\n\r\n```\r\n.\r\n|-- a\r\n|   |-- a.py\r\n|   `-- b.py\r\n`-- r.py\r\n```\r\n\r\nWith the content:\r\n\r\n```\r\nfrom a import b\r\n```\r\n\r\nRunning `pylint -E r` will run fine, but `pylint -E r a` will fail. Not just for module a, but for module r as well.\r\n\r\n```\r\n************* Module r\r\nr.py:1:0: E0611: No name 'b' in module 'a' (no-name-in-module)\r\n************* Module a\r\na/__init__.py:1:0: F0010: error while code parsing: Unable to load file a/__init__.py:\r\n[Errno 2] No such file or directory: 'a/__init__.py' (parse-error)\r\n```\r\n\r\nAgain, if I rename `a.py` to `c.py`, `pylint -E r a` will work perfectly.\n"
}