{
  "info": {
    "duration": 217.6036880016327,
    "submission": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex bc227d2c4..0b05837ef 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -588,9 +588,7 @@ class PyLinter(\n         Returns iterator of paths to discovered modules and packages.\n         \"\"\"\n         for something in files_or_modules:\n-            if os.path.isdir(something) and not os.path.isfile(\n-                os.path.join(something, \"__init__.py\")\n-            ):\n+            if os.path.isdir(something):\n                 skip_subtrees: list[str] = []\n                 for root, _, files in os.walk(something):\n                     if any(root.startswith(s) for s in skip_subtrees):\n@@ -606,7 +604,9 @@ class PyLinter(\n                         skip_subtrees.append(root)\n                         continue\n \n-                    if \"__init__.py\" in files:\n+                    has_init = \"__init__.py\" in files\n+                    same_name_file = os.path.basename(root) + \".py\" in files\n+                    if has_init or same_name_file:\n                         skip_subtrees.append(root)\n                         yield root\n                     else:\n",
    "total_cost": 0.19121700000000003,
    "instance_id": "pylint-dev__pylint-7114",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves the failure of `pylint` when a module contains a file of the same name within the directory. This is causing `pylint` to fail while searching for an `__init__.py` file and can lead to module resolution errors. Based on the context provided, it appears that the `PyLinter` class and its methods in `pylint/lint/pylinter.py` and `expand_modules` in `pylint/lint/expand_modules.py` might be relevant as they handle module discovery and parsing. Additionally, the `Pylinter._check_namespace_module` method, if it exists, might be responsible for handling namespace modules which could be related to the issue. Also, `pylint/config/find_default_config_files.py` might contain logic related to configuration parsing which could affect how module paths are handled.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "PyLinter"
                ],
                "code_snippet": null,
                "file_pattern": "**/pylint/lint/**/*.py",
                "function_names": [
                  "expand_modules",
                  "check_single_file",
                  "_discover_files",
                  "_check_namespace_module"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pylint/config/**/*.py",
                "function_names": [
                  "_toml_has_config",
                  "_cfg_has_config"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 77,
                "span_id": "PyLinter.check_single_file",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 0,
                "tokens": 202,
                "span_id": "PyLinter._discover_files",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 0,
                "tokens": 78,
                "span_id": "_toml_has_config",
                "file_path": "pylint/config/find_default_config_files.py"
              },
              {
                "rank": 0,
                "tokens": 53,
                "span_id": "_cfg_has_config",
                "file_path": "pylint/config/find_default_config_files.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "PyLinter"
                ],
                "code_snippet": null,
                "file_pattern": "**/pylint/lint/**/*.py",
                "function_names": [
                  "expand_modules",
                  "check_single_file",
                  "_discover_files",
                  "_check_namespace_module"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pylint/config/**/*.py",
                "function_names": [
                  "_toml_has_config",
                  "_cfg_has_config"
                ]
              }
            ]
          },
          "input_tokens": 3834,
          "output_tokens": 335,
          "retry_message": null,
          "completion_cost": 0.016527
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 77,
            "span_id": "PyLinter.check_single_file",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 0,
            "tokens": 202,
            "span_id": "PyLinter._discover_files",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 0,
            "tokens": 78,
            "span_id": "_toml_has_config",
            "file_path": "pylint/config/find_default_config_files.py"
          },
          {
            "rank": 0,
            "tokens": 53,
            "span_id": "_cfg_has_config",
            "file_path": "pylint/config/find_default_config_files.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue pertains to the failure of pylint when running against a directory containing a Python module with the same name as the directory, due to an attempt to locate an `__init__.py` file which does not exist. The search results provided include key files from the pylint codebase, including 'pylinter.py', which contains the core class PyLinter responsible for linting operations. The spans in this file that are potentially relevant include the initialization of the PyLinter class and the method '_discover_files', which is responsible for identifying files to be linted. The method checks for directories and their contents, including the presence of `__init__.py` files, which could be directly related to the issue. Also included is a reference to the deprecated method 'check_single_file', which could be indirectly relevant, especially if changes in pylint now mandate its removal. No directly relevant code was found in 'find_default_config_files.py', as it relates to finding configuration files rather than dealing with the module/directory naming conflict. Considering the specificity of the issue to the linting process and file discovery, the identified spans in 'pylinter.py' are likely the most relevant for addressing the problem.",
            "identified_spans": [
              {
                "span_ids": [
                  "PyLinter.__init__",
                  "PyLinter._discover_files",
                  "PyLinter.check_single_file"
                ],
                "file_path": "pylint/lint/pylinter.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3052,
          "output_tokens": 350,
          "retry_message": null,
          "completion_cost": 0.014406000000000002
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The issue involves the failure of `pylint` when a module contains a file of the same name within the directory. This is causing `pylint` to fail while searching for an `__init__.py` file and can lead to module resolution errors. Based on the context provided, it appears that the `PyLinter` class and its methods in `pylint/lint/pylinter.py` and `expand_modules` in `pylint/lint/expand_modules.py` might be relevant as they handle module discovery and parsing. Additionally, the `Pylinter._check_namespace_module` method, if it exists, might be responsible for handling namespace modules which could be related to the issue. Also, `pylint/config/find_default_config_files.py` might contain logic related to configuration parsing which could affect how module paths are handled.",
            "search_suggestions": "Look for `_check_namespace_module` method in `py-linter.py` or similar files. Additionally, check `pylint/lint/expand_modules.py` and `pylint/config/find_default_config_files.py` for any related logic"
          },
          "output": {
            "message": "Look for `_check_namespace_module` method in `py-linter.py` or similar files. Additionally, check `pylint/lint/expand_modules.py` and `pylint/config/find_default_config_files.py` for any related logic"
          },
          "input_tokens": 2790,
          "output_tokens": 290,
          "retry_message": null,
          "completion_cost": 0.01272
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look for `_check_namespace_module` method in `py-linter.py` or similar files. Additionally, check `pylint/lint/expand_modules.py` and `pylint/config/find_default_config_files.py` for any related logic",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The provided context from `pylint/lint/pylinter.py` does not contain the `_check_namespace_module` method. However, the `_discover_files` method might be relevant as it handles the discovery of files and directories, which could be related to the issue regarding module discovery errors. Additionally, the `check_single_file` method is deprecated and suggests using `check_single_file_item`, which might be worth investigating further if other methods do not provide insights.",
            "search_requests": [
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "pylint/lint/pylinter.py",
                "function_names": [
                  "_discover_files",
                  "check_single_file_item"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "pylint/lint/expand_modules.py",
                "function_names": []
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "pylint/config/find_default_config_files.py",
                "function_names": [
                  "_toml_has_config",
                  "_cfg_has_config"
                ]
              }
            ]
          },
          "output": null,
          "input_tokens": 5453,
          "output_tokens": 359,
          "retry_message": "You must provide at least one the search attributes query, code_snippet, class_name or function_name to search. If you're finished, set finished to true.",
          "completion_cost": 0.021744000000000003
        },
        {
          "action": {
            "complete": false,
            "scratch_pad": "The initial search for the `_check_namespace_module` method did not yield any results. However, the `_discover_files` method in `pylint/lint/pylinter.py` is highly relevant as it involves discovering files and directories, which directly relates to the module resolution issues described. The `expand_modules` function in `pylint/lint/expand_modules.py` is also relevant as it deals with expanding modules to be checked by `pylint`. Additionally, the `_toml_has_config` and `_cfg_has_config` functions in `pylint/config/find_default_config_files.py` could influence how `pylint` handles configurations, which might indirectly affect module handling. Given these insights, further detailed searches focused on these specific areas should provide more context and possibly resolve the issue.",
            "search_requests": [
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "pylint/lint/pylinter.py",
                "function_names": [
                  "_discover_files"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "pylint/lint/expand_modules.py",
                "function_names": [
                  "expand_modules"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "pylint/config/find_default_config_files.py",
                "function_names": [
                  "_toml_has_config",
                  "_cfg_has_config"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 202,
                "span_id": "PyLinter._discover_files",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 0,
                "tokens": 703,
                "span_id": "expand_modules",
                "file_path": "pylint/lint/expand_modules.py"
              },
              {
                "rank": 0,
                "tokens": 78,
                "span_id": "_toml_has_config",
                "file_path": "pylint/config/find_default_config_files.py"
              },
              {
                "rank": 0,
                "tokens": 53,
                "span_id": "_cfg_has_config",
                "file_path": "pylint/config/find_default_config_files.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "pylint/lint/pylinter.py",
                "function_names": [
                  "_discover_files"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "pylint/lint/expand_modules.py",
                "function_names": [
                  "expand_modules"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "pylint/config/find_default_config_files.py",
                "function_names": [
                  "_toml_has_config",
                  "_cfg_has_config"
                ]
              }
            ]
          },
          "input_tokens": 5855,
          "output_tokens": 419,
          "retry_message": null,
          "completion_cost": 0.02385
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 202,
            "span_id": "PyLinter._discover_files",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 0,
            "tokens": 703,
            "span_id": "expand_modules",
            "file_path": "pylint/lint/expand_modules.py"
          },
          {
            "rank": 0,
            "tokens": 78,
            "span_id": "_toml_has_config",
            "file_path": "pylint/config/find_default_config_files.py"
          },
          {
            "rank": 0,
            "tokens": 53,
            "span_id": "_cfg_has_config",
            "file_path": "pylint/config/find_default_config_files.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue indicates that pylint fails when a module contains a module of the same name, specifically when `a/a.py` exists but `a/__init__.py` does not. This leads to a `parse-error` due to the inability to load `a/__init__.py`. The current context shows relevant code spans in `pylint/lint/pylinter.py` which handle file discovery and single file checking. The new search results include code in `pylint/lint/expand_modules.py` which handles module expansion, checking for `__init__.py` files, and determining if a directory is a package. This new code is highly relevant to the issue as it directly addresses the handling of module paths and package detection. Therefore, the code spans in `expand_modules` function are marked as relevant. The code in `pylint/config/find_default_config_files.py` does not directly address the reported issue and is therefore not marked as relevant.",
            "identified_spans": [
              {
                "span_ids": [
                  "PyLinter._discover_files"
                ],
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "span_ids": [
                  "get_python_path",
                  "expand_modules",
                  "_modpath_from_file"
                ],
                "file_path": "pylint/lint/expand_modules.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 5385,
          "output_tokens": 348,
          "retry_message": null,
          "completion_cost": 0.021374999999999998
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The provided file context contains methods and functions that are highly relevant to the reported issue related to module resolution and discovery in `pylint`. Specifically, `_discover_files` in `pylint/lint/pylinter.py` and `expand_modules` in `pylint/lint/expand_modules.py` are central to the process of identifying and handling modules, which directly addresses the issues of encountering `__init__.py` files and module naming conflicts. Given the detailed examination, it appears that the file context provided is both relevant and sufficient to address the primary concerns outlined in the reported issue.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 5358,
          "output_tokens": 167,
          "retry_message": null,
          "completion_cost": 0.018579000000000002
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "PyLinter._discover_files",
            "file_path": "pylint/lint/pylinter.py",
            "scratch_pad": "The issue is caused by a module named the same as its parent directory, leading to confusion when checking for an `__init__.py` file. This can be resolved by adjusting the file discovery process to handle such cases more gracefully.",
            "instructions": "Modify the `_discover_files` method in `PyLinter` to handle directories with modules of the same name by ensuring that if a directory contains a module with the same name, it should not trigger a check for `__init__.py`."
          },
          "output": {
            "span_id": "PyLinter._discover_files",
            "end_line": 619,
            "file_path": "pylint/lint/pylinter.py",
            "start_line": 585,
            "instructions": "Modify the `_discover_files` method in `PyLinter` to handle directories with modules of the same name by ensuring that if a directory contains a module with the same name, it should not trigger a check for `__init__.py`."
          },
          "input_tokens": 5534,
          "output_tokens": 165,
          "retry_message": null,
          "completion_cost": 0.019077
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "PyLinter._discover_files",
        "end_line": 619,
        "file_path": "pylint/lint/pylinter.py",
        "max_tokens": 1000,
        "start_line": 585,
        "temperature": 1.6,
        "instructions": "Modify the `_discover_files` method in `PyLinter` to handle directories with modules of the same name by ensuring that if a directory contains a module with the same name, it should not trigger a check for `__init__.py`.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n    def _discover_files(self, files_or_modules: Sequence[str]) -> Iterator[str]:\n        \"\"\"Discover python modules and packages in sub-directory.\n\n        Returns iterator of paths to discovered modules and packages.\n        \"\"\"\n        for something in files_or_modules:\n            if os.path.isdir(something):\n                skip_subtrees: list[str] = []\n                for root, _, files in os.walk(something):\n                    if any(root.startswith(s) for s in skip_subtrees):\n                        # Skip subtree of already discovered package.\n                        continue\n\n                    if _is_ignored_file(\n                        root,\n                        self.config.ignore,\n                        self.config.ignore_patterns,\n                        self.config.ignore_paths,\n                    ):\n                        skip_subtrees.append(root)\n                        continue\n\n                    has_init = \"__init__.py\" in files\n                    same_name_file = os.path.basename(root) + \".py\" in files\n                    if has_init or same_name_file:\n                        skip_subtrees.append(root)\n                        yield root\n                    else:\n                        yield from (\n                            os.path.join(root, file)\n                            for file in files\n                            if file.endswith(\".py\")\n                        )\n            else:\n                yield something\n</replace>"
          },
          "output": {
            "diff": "--- pylint/lint/pylinter.py\n+++ pylint/lint/pylinter.py\n@@ -588,9 +588,7 @@\n         Returns iterator of paths to discovered modules and packages.\n         \"\"\"\n         for something in files_or_modules:\n-            if os.path.isdir(something) and not os.path.isfile(\n-                os.path.join(something, \"__init__.py\")\n-            ):\n+            if os.path.isdir(something):\n                 skip_subtrees: list[str] = []\n                 for root, _, files in os.walk(something):\n                     if any(root.startswith(s) for s in skip_subtrees):\n@@ -606,7 +604,9 @@\n                         skip_subtrees.append(root)\n                         continue\n \n-                    if \"__init__.py\" in files:\n+                    has_init = \"__init__.py\" in files\n+                    same_name_file = os.path.basename(root) + \".py\" in files\n+                    if has_init or same_name_file:\n                         skip_subtrees.append(root)\n                         yield root\n                     else:\n",
            "message": "Applied the change to pylint/lint/pylinter.py.",
            "verification_errors": []
          },
          "input_tokens": 5788,
          "output_tokens": 315,
          "retry_message": null,
          "completion_cost": 0.022089
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- pylint/lint/pylinter.py\n+++ pylint/lint/pylinter.py\n@@ -588,9 +588,7 @@\n         Returns iterator of paths to discovered modules and packages.\n         \"\"\"\n         for something in files_or_modules:\n-            if os.path.isdir(something) and not os.path.isfile(\n-                os.path.join(something, \"__init__.py\")\n-            ):\n+            if os.path.isdir(something):\n                 skip_subtrees: list[str] = []\n                 for root, _, files in os.walk(something):\n                     if any(root.startswith(s) for s in skip_subtrees):\n@@ -606,7 +604,9 @@\n                         skip_subtrees.append(root)\n                         continue\n \n-                    if \"__init__.py\" in files:\n+                    has_init = \"__init__.py\" in files\n+                    same_name_file = os.path.basename(root) + \".py\" in files\n+                    if has_init or same_name_file:\n                         skip_subtrees.append(root)\n                         yield root\n                     else:\n",
        "model": "deepseek-coder",
        "message": "Applied the change to pylint/lint/pylinter.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The changes have been applied to handle the scenario where a directory contains a module of the same name, resolving the issue of unnecessary `__init__.py` file checks and thus preventing the linting process from failing.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The changes applied to `_discover_files` method in `PyLinter` should resolve the issue by ensuring that the existence of a module with the same name as the directory does not trigger an unnecessary check for an `__init__.py` file. This should align the behavior with the expected outcome where `pylint` can handle modules named similarly to their parent directories without failures.",
            "instructions": null
          },
          "output": {
            "message": "The changes have been applied to handle the scenario where a directory contains a module of the same name, resolving the issue of unnecessary `__init__.py` file checks and thus preventing the linting process from failing."
          },
          "input_tokens": 6030,
          "output_tokens": 184,
          "retry_message": null,
          "completion_cost": 0.02085
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The changes have been applied to handle the scenario where a directory contains a module of the same name, resolving the issue of unnecessary `__init__.py` file checks and thus preventing the linting process from failing.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Linting fails if module contains module of the same name\n### Steps to reproduce\r\n\r\nGiven multiple files:\r\n```\r\n.\r\n`-- a/\r\n    |-- a.py\r\n    `-- b.py\r\n```\r\nWhich are all empty, running `pylint a` fails:\r\n\r\n```\r\n$ pylint a\r\n************* Module a\r\na/__init__.py:1:0: F0010: error while code parsing: Unable to load file a/__init__.py:\r\n[Errno 2] No such file or directory: 'a/__init__.py' (parse-error)\r\n$\r\n```\r\n\r\nHowever, if I rename `a.py`, `pylint a` succeeds:\r\n\r\n```\r\n$ mv a/a.py a/c.py\r\n$ pylint a\r\n$\r\n```\r\nAlternatively, I can also `touch a/__init__.py`, but that shouldn't be necessary anymore.\r\n\r\n### Current behavior\r\n\r\nRunning `pylint a` if `a/a.py` is present fails while searching for an `__init__.py` file.\r\n\r\n### Expected behavior\r\n\r\nRunning `pylint a` if `a/a.py` is present should succeed.\r\n\r\n### pylint --version output\r\n\r\nResult of `pylint --version` output:\r\n\r\n```\r\npylint 3.0.0a3\r\nastroid 2.5.6\r\nPython 3.8.5 (default, Jan 27 2021, 15:41:15) \r\n[GCC 9.3.0]\r\n```\r\n\r\n### Additional info\r\n\r\nThis also has some side-effects in module resolution. For example, if I create another file `r.py`:\r\n\r\n```\r\n.\r\n|-- a\r\n|   |-- a.py\r\n|   `-- b.py\r\n`-- r.py\r\n```\r\n\r\nWith the content:\r\n\r\n```\r\nfrom a import b\r\n```\r\n\r\nRunning `pylint -E r` will run fine, but `pylint -E r a` will fail. Not just for module a, but for module r as well.\r\n\r\n```\r\n************* Module r\r\nr.py:1:0: E0611: No name 'b' in module 'a' (no-name-in-module)\r\n************* Module a\r\na/__init__.py:1:0: F0010: error while code parsing: Unable to load file a/__init__.py:\r\n[Errno 2] No such file or directory: 'a/__init__.py' (parse-error)\r\n```\r\n\r\nAgain, if I rename `a.py` to `c.py`, `pylint -E r a` will work perfectly.\n"
}