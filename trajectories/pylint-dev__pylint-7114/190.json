{
  "info": {
    "duration": 233.41641640663147,
    "submission": "diff --git a/pylint/lint/expand_modules.py b/pylint/lint/expand_modules.py\nindex 289e1afce..212666bf4 100644\n--- a/pylint/lint/expand_modules.py\n+++ b/pylint/lint/expand_modules.py\n@@ -16,6 +16,8 @@ from pylint.typing import ErrorDescriptionDict, ModuleDescriptionDict\n \n def _modpath_from_file(filename: str, is_namespace: bool, path: list[str]) -> list[str]:\n     def _is_package_cb(inner_path: str, parts: list[str]) -> bool:\n+        if os.path.basename(inner_path) == parts[-1] + \".py\":\n+            return False\n         return modutils.check_modpath_has_init(inner_path, parts) or is_namespace\n \n     return modutils.modpath_from_file_with_callback(\n",
    "total_cost": 0.138129,
    "instance_id": "pylint-dev__pylint-7114",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue pertains to a specific error caused by the presence of a file with the same name as its parent directory, leading to an inability to locate an '__init__.py' file during linting. This error disrupts module resolution and causes linting to fail. The aim is to identify the root cause of this issue within the Pylint codebase, focusing on the module discovery and file handling mechanisms, especially in the context of module naming conflicts.",
            "search_requests": [
              {
                "query": "module discovery and file handling",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pylint/**/*.py",
                "function_names": [
                  "_modpath_from_file",
                  "get_python_path",
                  "expand_modules",
                  "lint",
                  "initialize",
                  "_discover_files",
                  "check",
                  "check_single_file",
                  "_expand_files",
                  "_get_namespace_for_file",
                  "get_ast"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 1,
                "tokens": 202,
                "span_id": "PyLinter._discover_files",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 3,
                "tokens": 120,
                "span_id": "PyLinter._expand_files",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 10,
                "tokens": 72,
                "span_id": "PyLinter.initialize",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 12,
                "tokens": 323,
                "span_id": "PyLinter.check",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 27,
                "tokens": 77,
                "span_id": "PyLinter._get_namespace_for_file",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 41,
                "tokens": 337,
                "span_id": "PyLinter.get_ast",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 54,
                "tokens": 77,
                "span_id": "PyLinter.check_single_file",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 2,
                "tokens": 84,
                "span_id": "_modpath_from_file",
                "file_path": "pylint/lint/expand_modules.py"
              },
              {
                "rank": 5,
                "tokens": 703,
                "span_id": "expand_modules",
                "file_path": "pylint/lint/expand_modules.py"
              },
              {
                "rank": 46,
                "tokens": 123,
                "span_id": "get_python_path",
                "file_path": "pylint/lint/expand_modules.py"
              },
              {
                "rank": 102,
                "tokens": 33,
                "span_id": "initialize",
                "file_path": "pylint/checkers/__init__.py"
              },
              {
                "rank": 30,
                "tokens": 492,
                "span_id": "lint",
                "file_path": "pylint/epylint.py"
              },
              {
                "rank": 48,
                "tokens": 35,
                "span_id": "initialize",
                "file_path": "pylint/extensions/__init__.py"
              },
              {
                "rank": 218,
                "tokens": 33,
                "span_id": "initialize",
                "file_path": "pylint/reporters/__init__.py"
              }
            ],
            "search_requests": [
              {
                "query": "module discovery and file handling",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pylint/**/*.py",
                "function_names": [
                  "_modpath_from_file",
                  "get_python_path",
                  "expand_modules",
                  "lint",
                  "initialize",
                  "_discover_files",
                  "check",
                  "check_single_file",
                  "_expand_files",
                  "_get_namespace_for_file",
                  "get_ast"
                ]
              }
            ]
          },
          "input_tokens": 3834,
          "output_tokens": 268,
          "retry_message": null,
          "completion_cost": 0.015522000000000001
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 1,
            "tokens": 202,
            "span_id": "PyLinter._discover_files",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 3,
            "tokens": 120,
            "span_id": "PyLinter._expand_files",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 10,
            "tokens": 72,
            "span_id": "PyLinter.initialize",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 12,
            "tokens": 323,
            "span_id": "PyLinter.check",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 27,
            "tokens": 77,
            "span_id": "PyLinter._get_namespace_for_file",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 41,
            "tokens": 337,
            "span_id": "PyLinter.get_ast",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 54,
            "tokens": 77,
            "span_id": "PyLinter.check_single_file",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 2,
            "tokens": 84,
            "span_id": "_modpath_from_file",
            "file_path": "pylint/lint/expand_modules.py"
          },
          {
            "rank": 5,
            "tokens": 703,
            "span_id": "expand_modules",
            "file_path": "pylint/lint/expand_modules.py"
          },
          {
            "rank": 46,
            "tokens": 123,
            "span_id": "get_python_path",
            "file_path": "pylint/lint/expand_modules.py"
          },
          {
            "rank": 102,
            "tokens": 33,
            "span_id": "initialize",
            "file_path": "pylint/checkers/__init__.py"
          },
          {
            "rank": 30,
            "tokens": 492,
            "span_id": "lint",
            "file_path": "pylint/epylint.py"
          },
          {
            "rank": 48,
            "tokens": 35,
            "span_id": "initialize",
            "file_path": "pylint/extensions/__init__.py"
          },
          {
            "rank": 218,
            "tokens": 33,
            "span_id": "initialize",
            "file_path": "pylint/reporters/__init__.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about a specific behavior when running `pylint` on a directory containing a Python file with the same name as the directory itself. The linting process fails due to an attempt to load an `__init__.py` file that doesn't exist. The expected behavior is for the linting to succeed without requiring the presence of an `__init__.py` file when there's a conflicting file name.\n\nGiven the code spans provided, we need to identify sections that are relevant to the module discovery and file parsing process of `pylint`. These sections need to be examined to understand how the system handles modules, packages, and file names during the linting process.\n\n1. In `pylint/lint/pylinter.py`, the `_discover_files` method is responsible for discovering files to be linted. This method should be checked to see if it correctly handles the scenario where a directory has a file with the same name, especially around the logic that checks for `__init__.py` files.\n2. In `pylint/lint/pylinter.py`, the `check` method orchestrates the linting process and calls `_discover_files`. Understanding how it interacts with other parts of the module discovery process is crucial.\n3. In `pylint/lint/expand_modules.py`, the `expand_modules` function is directly involved in the process of expanding modules and directories into a list of files to be checked. The logic within this function that deals with handling modules and directories could be key to resolving the issue.\n4. Similarly, in `pylint/lint/expand_modules.py`, the `get_python_path` function determines the Python path for a given file or directory. The way it checks for `__init__.py` files could be relevant to the reported issue.\n\nThese code spans provide a starting point to analyze how `pylint` handles file and module discovery, and they will be essential in understanding and potentially fixing the issue described in the report.",
            "identified_spans": [
              {
                "span_ids": [
                  "_discover_files",
                  "check"
                ],
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "span_ids": [
                  "expand_modules",
                  "get_python_path"
                ],
                "file_path": "pylint/lint/expand_modules.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 5898,
          "output_tokens": 550,
          "retry_message": null,
          "completion_cost": 0.025944000000000002
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The provided file context includes the `expand_modules` function from Pylint's `lint/expand_modules.py` file, which is directly involved in the module discovery and expansion process. This function checks for the existence of '__init__.py' files and handles module paths and names. However, the specific bug reported, where the presence of a file with the same name as its parent directory causes linting to fail due to an inability to locate an '__init__.py' file, is not explicitly handled in the provided snippet. Further investigation into the module parsing and handling logic, especially around file and directory naming conflicts, would be necessary to determine if the issue lies within this function or elsewhere in the codebase.",
            "search_suggestions": "Investigate the `modutils` module and its functions (like `modpath_from_file`, `file_info_from_modpath`, etc.) used within the `expand_modules` function. Also, look into how the system handles directory and file naming conflicts during module parsing and loading, focusing on the logic around the '__init__.py' file checks and module path resolution."
          },
          "output": {
            "message": "Investigate the `modutils` module and its functions (like `modpath_from_file`, `file_info_from_modpath`, etc.) used within the `expand_modules` function. Also, look into how the system handles directory and file naming conflicts during module parsing and loading, focusing on the logic around the '__init__.py' file checks and module path resolution."
          },
          "input_tokens": 2785,
          "output_tokens": 266,
          "retry_message": null,
          "completion_cost": 0.012345
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Investigate the `modutils` module and its functions (like `modpath_from_file`, `file_info_from_modpath`, etc.) used within the `expand_modules` function. Also, look into how the system handles directory and file naming conflicts during module parsing and loading, focusing on the logic around the '__init__.py' file checks and module path resolution.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "Based on the file context provided, the `expand_modules` function and its dependencies in the `modutils` module play a critical role in resolving module paths and handling file and directory naming conflicts. The primary focus should be on the functions `_modpath_from_file`, `get_python_path`, and `modutils.modpath_from_file`, which are key to understanding how module paths are resolved and how the system checks for the presence of '__init__.py' files. Specifically, the logic within `get_python_path` that checks for the absence of '__init__.py' files is crucial to the understanding of the directory and file naming conflicts issue described. Additionally, the callback function `_is_package_cb` in `_modpath_from_file` highlights the need to investigate how namespace packages and '__init__.py' presence are managed.",
            "search_requests": [
              {
                "query": "module path resolution and '__init__.py' handling",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pylint/**/*.py",
                "function_names": [
                  "_modpath_from_file",
                  "get_python_path",
                  "modutils.modpath_from_file",
                  "modutils.check_modpath_has_init",
                  "modutils.file_info_from_modpath"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 84,
                "span_id": "_modpath_from_file",
                "file_path": "pylint/lint/expand_modules.py"
              },
              {
                "rank": 3,
                "tokens": 123,
                "span_id": "get_python_path",
                "file_path": "pylint/lint/expand_modules.py"
              }
            ],
            "search_requests": [
              {
                "query": "module path resolution and '__init__.py' handling",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pylint/**/*.py",
                "function_names": [
                  "_modpath_from_file",
                  "get_python_path",
                  "modutils.modpath_from_file",
                  "modutils.check_modpath_has_init",
                  "modutils.file_info_from_modpath"
                ]
              }
            ]
          },
          "input_tokens": 5431,
          "output_tokens": 344,
          "retry_message": null,
          "completion_cost": 0.021453000000000003
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 84,
            "span_id": "_modpath_from_file",
            "file_path": "pylint/lint/expand_modules.py"
          },
          {
            "rank": 3,
            "tokens": 123,
            "span_id": "get_python_path",
            "file_path": "pylint/lint/expand_modules.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves a failure of `pylint` to handle modules with the same name as their containing directory, leading to a search for an `__init__.py` file that doesn't exist. This causes `pylint` to fail rather than succeed as expected. The main functionality in question is in the function `expand_modules`, which is responsible for expanding the given files or modules to be linted, and it uses `_modpath_from_file` and `get_python_path` to determine the module paths. The search results show the implementation of these functions, which might be causing the issue due to the way they handle module paths and the presence of `__init__.py` files. Specifically, the function `get_python_path` checks for the existence of `__init__.py` while traversing up the directory structure, potentially causing the erroneous search for an `__init__.py` file in cases where a module has the same name as its containing directory. The `expand_modules` function also processes the files or modules, handling both files and directories, and it might be incorrectly treating a module with the same name as a directory, leading to the error. Analyzing these functions and their interactions with modutils could provide insights into how to address the issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "_modpath_from_file",
                  "get_python_path",
                  "expand_modules"
                ],
                "file_path": "pylint/lint/expand_modules.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3825,
          "output_tokens": 358,
          "retry_message": null,
          "completion_cost": 0.016845
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context provided includes functions like `_modpath_from_file`, `get_python_path`, and the broader `expand_modules` function which are instrumental in the module resolution and handling of '__init__.py' files. These functions are directly relevant to the issue of linting failing due to module name conflicts and the handling of '__init__.py' files. By examining these functions, one can deduce how the module search path is determined and how the presence of '__init__.py' is managed. This context is sufficient to understand and potentially address the reported issue. Therefore, further search suggestions are not necessary as the relevant code has been identified.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 2876,
          "output_tokens": 173,
          "retry_message": null,
          "completion_cost": 0.011223
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "_modpath_from_file",
            "file_path": "pylint/lint/expand_modules.py",
            "scratch_pad": "We need to address the issue where the presence of a module having the same name as its parent directory causes linting to fail due to an attempt to load a non-existent '__init__.py' file. To fix this, we should adjust the '_modpath_from_file' function to handle this specific case.",
            "instructions": "Modify the '_modpath_from_file' function to check if the module name is the same as its parent directory and to handle it accordingly without attempting to load '__init__.py' if it doesn't exist."
          },
          "output": {
            "span_id": "_modpath_from_file",
            "end_line": 23,
            "file_path": "pylint/lint/expand_modules.py",
            "start_line": 17,
            "instructions": "Modify the '_modpath_from_file' function to check if the module name is the same as its parent directory and to handle it accordingly without attempting to load '__init__.py' if it doesn't exist."
          },
          "input_tokens": 2986,
          "output_tokens": 175,
          "retry_message": null,
          "completion_cost": 0.011583000000000001
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "_modpath_from_file",
        "end_line": 23,
        "file_path": "pylint/lint/expand_modules.py",
        "max_tokens": 1000,
        "start_line": 17,
        "temperature": 1.6,
        "instructions": "Modify the '_modpath_from_file' function to check if the module name is the same as its parent directory and to handle it accordingly without attempting to load '__init__.py' if it doesn't exist.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\ndef _modpath_from_file(filename: str, is_namespace: bool, path: list[str]) -> list[str]:\n    def _is_package_cb(inner_path: str, parts: list[str]) -> bool:\n        if os.path.basename(inner_path) == parts[-1] + \".py\":\n            return False\n        return modutils.check_modpath_has_init(inner_path, parts) or is_namespace\n\n    return modutils.modpath_from_file_with_callback(\n        filename, path=path, is_package_cb=_is_package_cb\n    )\n</replace>"
          },
          "output": {
            "diff": "--- pylint/lint/expand_modules.py\n+++ pylint/lint/expand_modules.py\n@@ -16,6 +16,8 @@\n \n def _modpath_from_file(filename: str, is_namespace: bool, path: list[str]) -> list[str]:\n     def _is_package_cb(inner_path: str, parts: list[str]) -> bool:\n+        if os.path.basename(inner_path) == parts[-1] + \".py\":\n+            return False\n         return modutils.check_modpath_has_init(inner_path, parts) or is_namespace\n \n     return modutils.modpath_from_file_with_callback(\n",
            "message": "Applied the change to pylint/lint/expand_modules.py.",
            "verification_errors": []
          },
          "input_tokens": 2752,
          "output_tokens": 154,
          "retry_message": null,
          "completion_cost": 0.010565999999999999
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- pylint/lint/expand_modules.py\n+++ pylint/lint/expand_modules.py\n@@ -16,6 +16,8 @@\n \n def _modpath_from_file(filename: str, is_namespace: bool, path: list[str]) -> list[str]:\n     def _is_package_cb(inner_path: str, parts: list[str]) -> bool:\n+        if os.path.basename(inner_path) == parts[-1] + \".py\":\n+            return False\n         return modutils.check_modpath_has_init(inner_path, parts) or is_namespace\n \n     return modutils.modpath_from_file_with_callback(\n",
        "model": "deepseek-coder",
        "message": "Applied the change to pylint/lint/expand_modules.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue has been resolved by ensuring that the '_modpath_from_file' function does not unnecessarily check for '__init__.py' when the module name matches its parent directory.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The change to handle the case where a module has the same name as its parent directory has been applied successfully. The modification to the '_modpath_from_file' function prevents the linting process from attempting to load a non-existent '__init__.py' file in such cases, which should resolve the reported issue.",
            "instructions": null
          },
          "output": {
            "message": "The issue has been resolved by ensuring that the '_modpath_from_file' function does not unnecessarily check for '__init__.py' when the module name matches its parent directory."
          },
          "input_tokens": 3396,
          "output_tokens": 164,
          "retry_message": null,
          "completion_cost": 0.012648000000000001
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue has been resolved by ensuring that the '_modpath_from_file' function does not unnecessarily check for '__init__.py' when the module name matches its parent directory.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Linting fails if module contains module of the same name\n### Steps to reproduce\r\n\r\nGiven multiple files:\r\n```\r\n.\r\n`-- a/\r\n    |-- a.py\r\n    `-- b.py\r\n```\r\nWhich are all empty, running `pylint a` fails:\r\n\r\n```\r\n$ pylint a\r\n************* Module a\r\na/__init__.py:1:0: F0010: error while code parsing: Unable to load file a/__init__.py:\r\n[Errno 2] No such file or directory: 'a/__init__.py' (parse-error)\r\n$\r\n```\r\n\r\nHowever, if I rename `a.py`, `pylint a` succeeds:\r\n\r\n```\r\n$ mv a/a.py a/c.py\r\n$ pylint a\r\n$\r\n```\r\nAlternatively, I can also `touch a/__init__.py`, but that shouldn't be necessary anymore.\r\n\r\n### Current behavior\r\n\r\nRunning `pylint a` if `a/a.py` is present fails while searching for an `__init__.py` file.\r\n\r\n### Expected behavior\r\n\r\nRunning `pylint a` if `a/a.py` is present should succeed.\r\n\r\n### pylint --version output\r\n\r\nResult of `pylint --version` output:\r\n\r\n```\r\npylint 3.0.0a3\r\nastroid 2.5.6\r\nPython 3.8.5 (default, Jan 27 2021, 15:41:15) \r\n[GCC 9.3.0]\r\n```\r\n\r\n### Additional info\r\n\r\nThis also has some side-effects in module resolution. For example, if I create another file `r.py`:\r\n\r\n```\r\n.\r\n|-- a\r\n|   |-- a.py\r\n|   `-- b.py\r\n`-- r.py\r\n```\r\n\r\nWith the content:\r\n\r\n```\r\nfrom a import b\r\n```\r\n\r\nRunning `pylint -E r` will run fine, but `pylint -E r a` will fail. Not just for module a, but for module r as well.\r\n\r\n```\r\n************* Module r\r\nr.py:1:0: E0611: No name 'b' in module 'a' (no-name-in-module)\r\n************* Module a\r\na/__init__.py:1:0: F0010: error while code parsing: Unable to load file a/__init__.py:\r\n[Errno 2] No such file or directory: 'a/__init__.py' (parse-error)\r\n```\r\n\r\nAgain, if I rename `a.py` to `c.py`, `pylint -E r a` will work perfectly.\n"
}