{
  "info": {
    "duration": 135.80761575698853,
    "submission": "",
    "total_cost": 0.0834,
    "instance_id": "pylint-dev__pylint-7114",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves module conflicts where a module named 'a' containing a file also named 'a.py' causes pylint to fail due to a missing '__init__.py' file. To resolve this, the search should focus on the module expansion and file discovery logic within pylint. Specifically, we need to look for functions or classes dealing with module path management and file parsing, particularly where they handle initialization files. Additionally, the error handling during module parsing could be a relevant area.",
            "search_requests": [
              {
                "query": "module expansion and file discovery logic",
                "class_names": [
                  "PyLinter"
                ],
                "code_snippet": null,
                "file_pattern": "**/pylint/**/*.py",
                "function_names": [
                  "expand_modules",
                  "check_single_file",
                  "_expand_files",
                  "_discover_files"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 202,
                "span_id": "PyLinter._discover_files",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 1,
                "tokens": 120,
                "span_id": "PyLinter._expand_files",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 4,
                "tokens": 122,
                "span_id": "PyLinter._iterate_file_descrs",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 6,
                "tokens": 323,
                "span_id": "PyLinter.check",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 10,
                "tokens": 327,
                "span_id": "PyLinter._check_file",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 11,
                "tokens": 72,
                "span_id": "PyLinter.initialize",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 11,
                "tokens": 185,
                "span_id": "PyLinter.should_analyze_file",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 12,
                "tokens": 174,
                "span_id": "PyLinter._check_files",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 13,
                "tokens": 306,
                "span_id": "PyLinter._check_astroid_module",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 14,
                "tokens": 141,
                "span_id": "PyLinter._get_file_descr_from_stdin",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 15,
                "tokens": 115,
                "span_id": "PyLinter.load_plugin_configuration",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 15,
                "tokens": 77,
                "span_id": "PyLinter.load_plugin_modules",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 16,
                "tokens": 153,
                "span_id": "PyLinter.check_astroid_module",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 18,
                "tokens": 62,
                "span_id": "PyLinter.option_groups_1",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 18,
                "tokens": 19,
                "span_id": "PyLinter.load_default_plugins",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 18,
                "tokens": 65,
                "span_id": "PyLinter.option_groups",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 18,
                "tokens": 260,
                "span_id": "PyLinter",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 23,
                "tokens": 118,
                "span_id": "PyLinter.prepare_checkers",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 24,
                "tokens": 86,
                "span_id": "PyLinter._parse_error_mode",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 24,
                "tokens": 44,
                "span_id": "PyLinter.get_checkers",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 24,
                "tokens": 41,
                "span_id": "PyLinter.disable_reporters",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 24,
                "tokens": 55,
                "span_id": "PyLinter.get_checker_names",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 24,
                "tokens": 27,
                "span_id": "PyLinter.any_fail_on_issues",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 25,
                "tokens": 77,
                "span_id": "PyLinter.check_single_file",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 25,
                "tokens": 77,
                "span_id": "PyLinter.check_single_file_item",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 2,
                "tokens": 703,
                "span_id": "expand_modules",
                "file_path": "pylint/lint/expand_modules.py"
              }
            ],
            "search_requests": [
              {
                "query": "module expansion and file discovery logic",
                "class_names": [
                  "PyLinter"
                ],
                "code_snippet": null,
                "file_pattern": "**/pylint/**/*.py",
                "function_names": [
                  "expand_modules",
                  "check_single_file",
                  "_expand_files",
                  "_discover_files"
                ]
              }
            ]
          },
          "input_tokens": 3834,
          "output_tokens": 205,
          "retry_message": null,
          "completion_cost": 0.014577
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 202,
            "span_id": "PyLinter._discover_files",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 1,
            "tokens": 120,
            "span_id": "PyLinter._expand_files",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 4,
            "tokens": 122,
            "span_id": "PyLinter._iterate_file_descrs",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 6,
            "tokens": 323,
            "span_id": "PyLinter.check",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 10,
            "tokens": 327,
            "span_id": "PyLinter._check_file",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 11,
            "tokens": 72,
            "span_id": "PyLinter.initialize",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 11,
            "tokens": 185,
            "span_id": "PyLinter.should_analyze_file",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 12,
            "tokens": 174,
            "span_id": "PyLinter._check_files",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 13,
            "tokens": 306,
            "span_id": "PyLinter._check_astroid_module",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 14,
            "tokens": 141,
            "span_id": "PyLinter._get_file_descr_from_stdin",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 15,
            "tokens": 115,
            "span_id": "PyLinter.load_plugin_configuration",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 15,
            "tokens": 77,
            "span_id": "PyLinter.load_plugin_modules",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 16,
            "tokens": 153,
            "span_id": "PyLinter.check_astroid_module",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 18,
            "tokens": 62,
            "span_id": "PyLinter.option_groups_1",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 18,
            "tokens": 19,
            "span_id": "PyLinter.load_default_plugins",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 18,
            "tokens": 65,
            "span_id": "PyLinter.option_groups",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 18,
            "tokens": 260,
            "span_id": "PyLinter",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 23,
            "tokens": 118,
            "span_id": "PyLinter.prepare_checkers",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 24,
            "tokens": 86,
            "span_id": "PyLinter._parse_error_mode",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 24,
            "tokens": 44,
            "span_id": "PyLinter.get_checkers",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 24,
            "tokens": 41,
            "span_id": "PyLinter.disable_reporters",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 24,
            "tokens": 55,
            "span_id": "PyLinter.get_checker_names",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 24,
            "tokens": 27,
            "span_id": "PyLinter.any_fail_on_issues",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 25,
            "tokens": 77,
            "span_id": "PyLinter.check_single_file",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 25,
            "tokens": 77,
            "span_id": "PyLinter.check_single_file_item",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 2,
            "tokens": 703,
            "span_id": "expand_modules",
            "file_path": "pylint/lint/expand_modules.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves a failure in Pylint when a module contains a file with the same name. The initial analysis of the search results focused on the `pylinter.py` file, specifically on the `PyLinter` class and its methods. The relevant spans in this class include the initializer (`__init__`), methods for file discovery (`_discover_files`), and the main check method (`check`). These methods handle the loading and checking of modules, which is crucial for understanding how Pylint processes files. Additionally, the `expand_modules` function from `expand_modules.py` was examined, as it is responsible for expanding the list of files and modules to be analyzed. The code spans provided reveal the logic behind how files and modules are expanded and how errors are handled during this process. In particular, the `expand_modules` function checks if the file or module should be ignored based on various criteria and constructs a list of modules to be analyzed. Based on this analysis, the relevant code spans have been identified to address the reported issue. They pertain to the methods in `PyLinter` that manage the loading, expansion, and checking of modules, including error handling for missing files.",
            "identified_spans": [
              {
                "span_ids": [
                  "PyLinter.__init__",
                  "PyLinter._discover_files",
                  "PyLinter.check",
                  "PyLinter._check_files",
                  "PyLinter._check_file",
                  "PyLinter._get_file_descr_from_stdin",
                  "PyLinter._iterate_file_descrs",
                  "PyLinter._expand_files",
                  "PyLinter.check_astroid_module",
                  "PyLinter._check_astroid_module"
                ],
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "span_ids": [
                  "expand_modules"
                ],
                "file_path": "pylint/lint/expand_modules.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 6864,
          "output_tokens": 480,
          "retry_message": null,
          "completion_cost": 0.027791999999999997
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The provided file context includes the relevant parts of the pylint codebase that deal with module expansion, file discovery, and error handling during module parsing. The `_discover_files`, `_expand_files`, and `check_astroid_module` methods in `PyLinter` are particularly relevant, as they handle the discovery and parsing of modules, including the handling of initialization files and module path management. These methods should be sufficient to diagnose and potentially fix the issue described, particularly if the fix involves improving the handling of module names and paths. If additional context is needed, it would likely be within pylint's module utility functions or in the specific error handling logic for 'fatal' errors or 'astroid-error' messages.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 5650,
          "output_tokens": 188,
          "retry_message": null,
          "completion_cost": 0.01977
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "PyLinter._expand_files",
            "file_path": "pylint/lint/pylinter.py",
            "scratch_pad": "The issue occurs when a module named the same as its parent directory is present. This causes a failure in the discovery process as pylint is confused by the directory and file having the same name. To fix this, we need to adjust the file discovery logic to correctly handle such cases. Specifically, we can modify the `_expand_files` method in `PyLinter` to properly distinguish between directories and files, ensuring that files with the same name as their parent directory are not mistaken for modules.",
            "instructions": "Update the `_expand_files` method to correctly handle cases where a file has the same name as its parent directory. We should skip the directory and only consider the file if it's a Python file."
          },
          "output": {
            "span_id": "PyLinter._expand_files",
            "end_line": 789,
            "file_path": "pylint/lint/pylinter.py",
            "start_line": 774,
            "instructions": "Update the `_expand_files` method to correctly handle cases where a file has the same name as its parent directory. We should skip the directory and only consider the file if it's a Python file."
          },
          "input_tokens": 6042,
          "output_tokens": 209,
          "retry_message": null,
          "completion_cost": 0.021261
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "PyLinter._expand_files",
        "end_line": 789,
        "file_path": "pylint/lint/pylinter.py",
        "max_tokens": 1000,
        "start_line": 774,
        "temperature": 1.6,
        "instructions": "Update the `_expand_files` method to correctly handle cases where a file has the same name as its parent directory. We should skip the directory and only consider the file if it's a Python file.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```json\n\"<replace>\n    def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n        \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n        result, errors = expand_modules(\n            modules,\n            self.config.ignore,\n            self.config.ignore_patterns,\n            self._ignore_paths,\n        )\n        for error in errors:\n            message = modname = error[\\\"mod\\\"]\n            key = error[\\\"key\\\"]\n            self.set_current_module(modname)\n            if key == \\\"fatal\\\":\n                message = str(error[\\\"ex\\\"]).replace(os.getcwd() + os.sep, \\\"\\\")\n            self.add_message(key, args=message)\n        result_filtered = []\n        for item in result:\n            if not (item['name'] == os.path.basename(item['path'][:-3]) and item['path'].endswith('.py')):\n                result_filtered.append(item)\n        return result_filtered\n</replace>\""
          },
          "output": null,
          "input_tokens": 6587,
          "output_tokens": 250,
          "retry_message": "The following diff was not applied:\n --- pylint/lint/pylinter.py\n+++ pylint/lint/pylinter.py\n@@ -780,13 +780,17 @@\n             self._ignore_paths,\n         )\n         for error in errors:\n-            message = modname = error[\"mod\"]\n-            key = error[\"key\"]\n+            message = modname = error[\\\"mod\\\"]\n+            key = error[\\\"key\\\"]\n             self.set_current_module(modname)\n-            if key == \"fatal\":\n-                message = str(error[\"ex\"]).replace(os.getcwd() + os.sep, \"\")\n+            if key == \\\"fatal\\\":\n+                message = str(error[\\\"ex\\\"]).replace(os.getcwd() + os.sep, \\\"\\\")\n             self.add_message(key, args=message)\n-        return result\n+        result_filtered = []\n+        for item in result:\n+            if not (item['name'] == os.path.basename(item['path'][:-3]) and item['path'].endswith('.py')):\n+                result_filtered.append(item)\n+        return result_filtered\n \n     def set_current_module(\n         self, modname: str | None, filepath: str | None = None\n. \nErrors:\nFUNCTION has invalid code:\n\n```\n\n    def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n        \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n        result, errors = expand_modules(\n            modules,\n            self.config.ignore,\n            self.config.ignore_patterns,\n            self._ignore_paths,\n        )\n        for error in errors:\n            message = modname = error[\\\"mod\\\"]\n            key = error[\\\"key\\\"]\n            self.set_current_module(modname)\n            if key == \\\"fatal\\\":\n                message = str(error[\\\"ex\\\"]).replace(os.getcwd() + os.sep, \\\"\\\")\n            self.add_message(key, args=message)\n        result_filtered = []\n        for item in result:\n            if not (item['name'] == os.path.basename(item['path'][:-3]) and item['path'].endswith('.py')):\n                result_filtered.append(item)\n        return result_filtered\n```.\nFUNCTION has invalid code:\n\n```\n\n    def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n        \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n        result, errors = expand_modules(\n            modules,\n            self.config.ignore,\n            self.config.ignore_patterns,\n            self._ignore_paths,\n        )\n        for error in errors:\n            message = modname = error[\\\"mod\\\"]\n            key = error[\\\"key\\\"]\n            self.set_current_module(modname)\n            if key == \\\"fatal\\\":\n                message = str(error[\\\"ex\\\"]).replace(os.getcwd() + os.sep, \\\"\\\")\n            self.add_message(key, args=message)\n        result_filtered = []\n        for item in result:\n            if not (item['name'] == os.path.basename(item['path'][:-3]) and item['path'].endswith('.py')):\n                result_filtered.append(item)\n        return result_filtered\n```.\n\nMake sure that you return the unchanged code in the replace tag exactly as it is. If you want to reject the instructions, use the reject function.",
          "completion_cost": 0.023511
        },
        {
          "action": {
            "content": "```json\n\"<replace>\n    def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n        \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n        result, errors = expand_modules(\n            modules,\n            self.config.ignore,\n            self.config.ignore_patterns,\n            self._ignore_paths,\n        )\n        for error in errors:\n            message = modname = error[\\\"mod\\\"]\n            key = error[\\\"key\\\"]\n            self.set_current_module(modname)\n            if key == \\\"fatal\\\":\n                message = str(error[\\\"ex\\\"]).replace(os.getcwd() + os.sep, \\\"\\\")\n            self.add_message(key, args=message)\n        return result\n</replace>\""
          },
          "output": null,
          "input_tokens": 7701,
          "output_tokens": 189,
          "retry_message": "The following diff was not applied:\n --- pylint/lint/pylinter.py\n+++ pylint/lint/pylinter.py\n@@ -780,11 +780,11 @@\n             self._ignore_paths,\n         )\n         for error in errors:\n-            message = modname = error[\"mod\"]\n-            key = error[\"key\"]\n+            message = modname = error[\\\"mod\\\"]\n+            key = error[\\\"key\\\"]\n             self.set_current_module(modname)\n-            if key == \"fatal\":\n-                message = str(error[\"ex\"]).replace(os.getcwd() + os.sep, \"\")\n+            if key == \\\"fatal\\\":\n+                message = str(error[\\\"ex\\\"]).replace(os.getcwd() + os.sep, \\\"\\\")\n             self.add_message(key, args=message)\n         return result\n \n. \nErrors:\nFUNCTION has invalid code:\n\n```\n\n    def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n        \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n        result, errors = expand_modules(\n            modules,\n            self.config.ignore,\n            self.config.ignore_patterns,\n            self._ignore_paths,\n        )\n        for error in errors:\n            message = modname = error[\\\"mod\\\"]\n            key = error[\\\"key\\\"]\n            self.set_current_module(modname)\n            if key == \\\"fatal\\\":\n                message = str(error[\\\"ex\\\"]).replace(os.getcwd() + os.sep, \\\"\\\")\n            self.add_message(key, args=message)\n        return result\n```.\nFUNCTION has invalid code:\n\n```\n\n    def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n        \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n        result, errors = expand_modules(\n            modules,\n            self.config.ignore,\n            self.config.ignore_patterns,\n            self._ignore_paths,\n        )\n        for error in errors:\n            message = modname = error[\\\"mod\\\"]\n            key = error[\\\"key\\\"]\n            self.set_current_module(modname)\n            if key == \\\"fatal\\\":\n                message = str(error[\\\"ex\\\"]).replace(os.getcwd() + os.sep, \\\"\\\")\n            self.add_message(key, args=message)\n        return result\n```.\n\nMake sure that you return the unchanged code in the replace tag exactly as it is. If you want to reject the instructions, use the reject function.",
          "completion_cost": 0.025938000000000003
        },
        {
          "action": {
            "content": "```json\n\"<replace>\n    def _expand_files(self, modules: Sequence[str]) -> list[ModuleDescriptionDict]:\n        \"\"\"Get modules and errors from a list of modules and handle errors.\"\"\"\n        result, errors = expand_modules(\n            modules,\n            self.config.ignore,\n            self.config.ignore_patterns,\n            self._ignore_paths,\n        )\n        for error in errors:\n            message = modname = error[\"mod\"]\n            key = error[\"key\"]\n            self.set_current_module(modname)\n            if key == \"fatal\":\n                message = str(error[\"ex\"]).replace(os.getcwd() + os.sep, \"\")\n            self.add_message(key, args=message)\n        return result\n</replace>\""
          },
          "output": null,
          "input_tokens": 8534,
          "output_tokens": 181,
          "retry_message": "The code in the replace tag is the same as in the search. Use the reject function if you can't do any changes and want to reject the instructions.",
          "completion_cost": 0.028317
        }
      ]
    }
  ],
  "initial_message": "Linting fails if module contains module of the same name\n### Steps to reproduce\r\n\r\nGiven multiple files:\r\n```\r\n.\r\n`-- a/\r\n    |-- a.py\r\n    `-- b.py\r\n```\r\nWhich are all empty, running `pylint a` fails:\r\n\r\n```\r\n$ pylint a\r\n************* Module a\r\na/__init__.py:1:0: F0010: error while code parsing: Unable to load file a/__init__.py:\r\n[Errno 2] No such file or directory: 'a/__init__.py' (parse-error)\r\n$\r\n```\r\n\r\nHowever, if I rename `a.py`, `pylint a` succeeds:\r\n\r\n```\r\n$ mv a/a.py a/c.py\r\n$ pylint a\r\n$\r\n```\r\nAlternatively, I can also `touch a/__init__.py`, but that shouldn't be necessary anymore.\r\n\r\n### Current behavior\r\n\r\nRunning `pylint a` if `a/a.py` is present fails while searching for an `__init__.py` file.\r\n\r\n### Expected behavior\r\n\r\nRunning `pylint a` if `a/a.py` is present should succeed.\r\n\r\n### pylint --version output\r\n\r\nResult of `pylint --version` output:\r\n\r\n```\r\npylint 3.0.0a3\r\nastroid 2.5.6\r\nPython 3.8.5 (default, Jan 27 2021, 15:41:15) \r\n[GCC 9.3.0]\r\n```\r\n\r\n### Additional info\r\n\r\nThis also has some side-effects in module resolution. For example, if I create another file `r.py`:\r\n\r\n```\r\n.\r\n|-- a\r\n|   |-- a.py\r\n|   `-- b.py\r\n`-- r.py\r\n```\r\n\r\nWith the content:\r\n\r\n```\r\nfrom a import b\r\n```\r\n\r\nRunning `pylint -E r` will run fine, but `pylint -E r a` will fail. Not just for module a, but for module r as well.\r\n\r\n```\r\n************* Module r\r\nr.py:1:0: E0611: No name 'b' in module 'a' (no-name-in-module)\r\n************* Module a\r\na/__init__.py:1:0: F0010: error while code parsing: Unable to load file a/__init__.py:\r\n[Errno 2] No such file or directory: 'a/__init__.py' (parse-error)\r\n```\r\n\r\nAgain, if I rename `a.py` to `c.py`, `pylint -E r a` will work perfectly.\n"
}