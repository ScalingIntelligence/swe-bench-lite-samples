{
  "info": {
    "duration": 144.8438618183136,
    "submission": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex bc227d2c4..b63d7081f 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -588,9 +588,9 @@ class PyLinter(\n         Returns iterator of paths to discovered modules and packages.\n         \"\"\"\n         for something in files_or_modules:\n-            if os.path.isdir(something) and not os.path.isfile(\n-                os.path.join(something, \"__init__.py\")\n-            ):\n+            if os.path.isdir(something):\n+                dir_name = os.path.basename(something)\n+                dir_has_init = os.path.isfile(os.path.join(something, \"__init__.py\"))\n                 skip_subtrees: list[str] = []\n                 for root, _, files in os.walk(something):\n                     if any(root.startswith(s) for s in skip_subtrees):\n@@ -606,7 +606,7 @@ class PyLinter(\n                         skip_subtrees.append(root)\n                         continue\n \n-                    if \"__init__.py\" in files:\n+                    if \"__init__.py\" in files or dir_name + \".py\" in files:\n                         skip_subtrees.append(root)\n                         yield root\n                     else:\n",
    "total_cost": 0.140964,
    "instance_id": "pylint-dev__pylint-7114",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue pertains to a naming conflict where the presence of a file `a.py` within a directory named `a` causes `pylint` to fail, mistakenly attempting to load an `__init__.py`. This problem exacerbates module resolution issues. To address this, it's crucial to identify how `pylint` determines file paths and handles module names that are the same as their containing directory. I will focus the search on the `pylint/lint` directory since it contains the logic for expanding and linting modules. Specifically, I'll be looking for functions or classes that handle file discovery, module parsing, and path resolution.",
            "search_requests": [
              {
                "query": "module name conflict resolution handling",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "pylint/lint/**/*.py",
                "function_names": []
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "pylint/lint/**/*.py",
                "function_names": [
                  "_discover_files",
                  "expand_modules",
                  "get_python_path"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 224,
                "span_id": "docstring",
                "file_path": "pylint/lint/base_options.py"
              },
              {
                "rank": 0,
                "tokens": 2596,
                "span_id": "_make_linter_options",
                "file_path": "pylint/lint/base_options.py"
              },
              {
                "rank": 1,
                "tokens": 141,
                "span_id": "PyLinter._get_file_descr_from_stdin",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 3,
                "tokens": 77,
                "span_id": "PyLinter._get_namespace_for_file",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 3,
                "tokens": 236,
                "span_id": "PyLinter.set_current_module",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 5,
                "tokens": 7,
                "span_id": "GetAstProtocol",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 5,
                "tokens": 31,
                "span_id": "GetAstProtocol.__call__",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 5,
                "tokens": 431,
                "span_id": "docstring",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 5,
                "tokens": 59,
                "span_id": "_read_stdin",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 5,
                "tokens": 111,
                "span_id": "_load_reporter_by_class",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 2,
                "tokens": 84,
                "span_id": "_modpath_from_file",
                "file_path": "pylint/lint/expand_modules.py"
              },
              {
                "rank": 2,
                "tokens": 100,
                "span_id": "docstring",
                "file_path": "pylint/lint/expand_modules.py"
              },
              {
                "rank": 4,
                "tokens": 303,
                "span_id": "docstring",
                "file_path": "pylint/lint/__init__.py"
              },
              {
                "rank": 0,
                "tokens": 202,
                "span_id": "PyLinter._discover_files",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 1,
                "tokens": 703,
                "span_id": "expand_modules",
                "file_path": "pylint/lint/expand_modules.py"
              },
              {
                "rank": 1,
                "tokens": 123,
                "span_id": "get_python_path",
                "file_path": "pylint/lint/expand_modules.py"
              }
            ],
            "search_requests": [
              {
                "query": "module name conflict resolution handling",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "pylint/lint/**/*.py",
                "function_names": []
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "pylint/lint/**/*.py",
                "function_names": [
                  "_discover_files",
                  "expand_modules",
                  "get_python_path"
                ]
              }
            ]
          },
          "input_tokens": 3834,
          "output_tokens": 251,
          "retry_message": null,
          "completion_cost": 0.015267
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 224,
            "span_id": "docstring",
            "file_path": "pylint/lint/base_options.py"
          },
          {
            "rank": 0,
            "tokens": 2596,
            "span_id": "_make_linter_options",
            "file_path": "pylint/lint/base_options.py"
          },
          {
            "rank": 0,
            "tokens": 202,
            "span_id": "PyLinter._discover_files",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 1,
            "tokens": 141,
            "span_id": "PyLinter._get_file_descr_from_stdin",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 1,
            "tokens": 703,
            "span_id": "expand_modules",
            "file_path": "pylint/lint/expand_modules.py"
          },
          {
            "rank": 1,
            "tokens": 123,
            "span_id": "get_python_path",
            "file_path": "pylint/lint/expand_modules.py"
          },
          {
            "rank": 2,
            "tokens": 84,
            "span_id": "_modpath_from_file",
            "file_path": "pylint/lint/expand_modules.py"
          },
          {
            "rank": 2,
            "tokens": 100,
            "span_id": "docstring",
            "file_path": "pylint/lint/expand_modules.py"
          },
          {
            "rank": 3,
            "tokens": 77,
            "span_id": "PyLinter._get_namespace_for_file",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 3,
            "tokens": 236,
            "span_id": "PyLinter.set_current_module",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 4,
            "tokens": 303,
            "span_id": "docstring",
            "file_path": "pylint/lint/__init__.py"
          },
          {
            "rank": 5,
            "tokens": 7,
            "span_id": "GetAstProtocol",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 5,
            "tokens": 31,
            "span_id": "GetAstProtocol.__call__",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 5,
            "tokens": 431,
            "span_id": "docstring",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 5,
            "tokens": 59,
            "span_id": "_read_stdin",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 5,
            "tokens": 111,
            "span_id": "_load_reporter_by_class",
            "file_path": "pylint/lint/pylinter.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is related to the failure of pylint when a module contains a file of the same name, which causes pylint to incorrectly look for an `__init__.py` file and fail. This issue can be tied to the logic within the PyLinter class in the pylint/lint/pylinter.py file, specifically the _discover_files method, which handles the discovery of files and modules. The method checks if a directory is a package by looking for an `__init__.py` file, which seems to be a key point that leads to the issue when there's a file with the same name as its containing directory/module. Other relevant methods in this class include _get_namespace_for_file and set_current_module, which also interact with file paths and module names. Additionally, the get_python_path function in pylint/lint/expand_modules.py checks for the existence of `__init__.py` files, further highlighting its significance in this issue. Given these insights, the identified spans should focus on these methods and the interactions with file paths and module names.",
            "identified_spans": [
              {
                "span_ids": [
                  "PyLinter._discover_files",
                  "PyLinter._get_namespace_for_file",
                  "PyLinter.set_current_module"
                ],
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "span_ids": [
                  "get_python_path"
                ],
                "file_path": "pylint/lint/expand_modules.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4356,
          "output_tokens": 377,
          "retry_message": null,
          "completion_cost": 0.018723
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The file context provided includes key components related to module discovery and file path handling in Pylint. Specifically, the `_discover_files` method in `pylinter.py` and the `expand_modules` function in `expand_modules.py` are crucial for understanding how Pylint processes directories and files. These methods encapsulate logic that determines the paths of modules and how they are treated, especially in the context of directories and the presence of `__init__.py` files. The presence of these methods indicates that the relevant areas for addressing the issue are covered. However, there might be a need for deeper inspection of how module names conflicting with directory names are handled explicitly within these methods. Further examination of these methods for specific handling of such conflicts could be beneficial.",
            "search_suggestions": "Examine the logic within the `_discover_files` method and the `expand_modules` function for explicit handling of module names that conflict with directory names. Additionally, check for any conditions or assertions that might fail when a file and its containing directory share the same name."
          },
          "output": {
            "message": "Examine the logic within the `_discover_files` method and the `expand_modules` function for explicit handling of module names that conflict with directory names. Additionally, check for any conditions or assertions that might fail when a file and its containing directory share the same name."
          },
          "input_tokens": 4124,
          "output_tokens": 254,
          "retry_message": null,
          "completion_cost": 0.016182000000000002
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Examine the logic within the `_discover_files` method and the `expand_modules` function for explicit handling of module names that conflict with directory names. Additionally, check for any conditions or assertions that might fail when a file and its containing directory share the same name.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "scratch_pad": "Based on the provided context, the `_discover_files` method and the `expand_modules` function are crucial for understanding how `pylint` handles file discovery and module expansion. The `_discover_files` method iterates over provided files or modules, checking if they are directories and if they contain an `__init__.py` file. If a directory does not contain an `__init__.py`, it is considered a package, and its subfiles are traversed. The `expand_modules` function processes each item in the list of files or modules, determining the module name and path. It checks if the file or module exists and handles both cases where it exists as a file or a directory. There doesn't appear to be explicit handling for conflicts between module names and directory names, such as when a file and its containing directory share the same name. This might be the root cause of the issue, as `pylint` might incorrectly assume the presence of an `__init__.py` based on the directory name.",
            "search_requests": []
          },
          "output": {
            "message": "Based on the provided context, the `_discover_files` method and the `expand_modules` function are crucial for understanding how `pylint` handles file discovery and module expansion. The `_discover_files` method iterates over provided files or modules, checking if they are directories and if they contain an `__init__.py` file. If a directory does not contain an `__init__.py`, it is considered a package, and its subfiles are traversed. The `expand_modules` function processes each item in the list of files or modules, determining the module name and path. It checks if the file or module exists and handles both cases where it exists as a file or a directory. There doesn't appear to be explicit handling for conflicts between module names and directory names, such as when a file and its containing directory share the same name. This might be the root cause of the issue, as `pylint` might incorrectly assume the presence of an `__init__.py` based on the directory name."
          },
          "input_tokens": 6743,
          "output_tokens": 234,
          "retry_message": null,
          "completion_cost": 0.023739
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "Based on the provided context, the `_discover_files` method and the `expand_modules` function are crucial for understanding how `pylint` handles file discovery and module expansion. The `_discover_files` method iterates over provided files or modules, checking if they are directories and if they contain an `__init__.py` file. If a directory does not contain an `__init__.py`, it is considered a package, and its subfiles are traversed. The `expand_modules` function processes each item in the list of files or modules, determining the module name and path. It checks if the file or module exists and handles both cases where it exists as a file or a directory. There doesn't appear to be explicit handling for conflicts between module names and directory names, such as when a file and its containing directory share the same name. This might be the root cause of the issue, as `pylint` might incorrectly assume the presence of an `__init__.py` based on the directory name.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "PyLinter._discover_files",
            "file_path": "pylint/lint/pylinter.py",
            "scratch_pad": "The issue arises due to a conflict between a module's name and the name of its parent directory. When the module has the same name as the parent directory, pylint incorrectly assumes the presence of an `__init__.py` file, leading to errors. To fix this, we need to adjust the `_discover_files` method in `pylinter.py` to account for this naming conflict.",
            "instructions": "Modify the `_discover_files` method to check for naming conflicts between the module and its parent directory. If a conflict is detected, handle it appropriately to avoid assuming the presence of an `__init__.py` file."
          },
          "output": {
            "span_id": "PyLinter._discover_files",
            "end_line": 619,
            "file_path": "pylint/lint/pylinter.py",
            "start_line": 585,
            "instructions": "Modify the `_discover_files` method to check for naming conflicts between the module and its parent directory. If a conflict is detected, handle it appropriately to avoid assuming the presence of an `__init__.py` file."
          },
          "input_tokens": 6030,
          "output_tokens": 195,
          "retry_message": null,
          "completion_cost": 0.021015000000000002
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "PyLinter._discover_files",
        "end_line": 619,
        "file_path": "pylint/lint/pylinter.py",
        "max_tokens": 1000,
        "start_line": 585,
        "temperature": 1.6,
        "instructions": "Modify the `_discover_files` method to check for naming conflicts between the module and its parent directory. If a conflict is detected, handle it appropriately to avoid assuming the presence of an `__init__.py` file.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```\n<replace>\n    def _discover_files(self, files_or_modules: Sequence[str]) -> Iterator[str]:\n        \"\"\"Discover python modules and packages in sub-directory.\n\n        Returns iterator of paths to discovered modules and packages.\n        \"\"\"\n        for something in files_or_modules:\n            if os.path.isdir(something):\n                dir_name = os.path.basename(something)\n                dir_has_init = os.path.isfile(os.path.join(something, \"__init__.py\"))\n                skip_subtrees: list[str] = []\n                for root, _, files in os.walk(something):\n                    if any(root.startswith(s) for s in skip_subtrees):\n                        # Skip subtree of already discovered package.\n                        continue\n\n                    if _is_ignored_file(\n                        root,\n                        self.config.ignore,\n                        self.config.ignore_patterns,\n                        self.config.ignore_paths,\n                    ):\n                        skip_subtrees.append(root)\n                        continue\n\n                    if \"__init__.py\" in files or dir_name + \".py\" in files:\n                        skip_subtrees.append(root)\n                        yield root\n                    else:\n                        yield from (\n                            os.path.join(root, file)\n                            for file in files\n                            if file.endswith(\".py\")\n                        )\n            else:\n                yield something\n</replace>"
          },
          "output": {
            "diff": "--- pylint/lint/pylinter.py\n+++ pylint/lint/pylinter.py\n@@ -588,9 +588,9 @@\n         Returns iterator of paths to discovered modules and packages.\n         \"\"\"\n         for something in files_or_modules:\n-            if os.path.isdir(something) and not os.path.isfile(\n-                os.path.join(something, \"__init__.py\")\n-            ):\n+            if os.path.isdir(something):\n+                dir_name = os.path.basename(something)\n+                dir_has_init = os.path.isfile(os.path.join(something, \"__init__.py\"))\n                 skip_subtrees: list[str] = []\n                 for root, _, files in os.walk(something):\n                     if any(root.startswith(s) for s in skip_subtrees):\n@@ -606,7 +606,7 @@\n                         skip_subtrees.append(root)\n                         continue\n \n-                    if \"__init__.py\" in files:\n+                    if \"__init__.py\" in files or dir_name + \".py\" in files:\n                         skip_subtrees.append(root)\n                         yield root\n                     else:\n",
            "message": "Applied the change to pylint/lint/pylinter.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 6088,
          "output_tokens": 332,
          "retry_message": null,
          "completion_cost": 0.023244
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- pylint/lint/pylinter.py\n+++ pylint/lint/pylinter.py\n@@ -588,9 +588,9 @@\n         Returns iterator of paths to discovered modules and packages.\n         \"\"\"\n         for something in files_or_modules:\n-            if os.path.isdir(something) and not os.path.isfile(\n-                os.path.join(something, \"__init__.py\")\n-            ):\n+            if os.path.isdir(something):\n+                dir_name = os.path.basename(something)\n+                dir_has_init = os.path.isfile(os.path.join(something, \"__init__.py\"))\n                 skip_subtrees: list[str] = []\n                 for root, _, files in os.walk(something):\n                     if any(root.startswith(s) for s in skip_subtrees):\n@@ -606,7 +606,7 @@\n                         skip_subtrees.append(root)\n                         continue\n \n-                    if \"__init__.py\" in files:\n+                    if \"__init__.py\" in files or dir_name + \".py\" in files:\n                         skip_subtrees.append(root)\n                         yield root\n                     else:\n",
        "model": "deepseek-coder",
        "message": "Applied the change to pylint/lint/pylinter.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The modification to the `_discover_files` method has been applied to handle cases where a module file shares the same name as its parent directory. This should prevent pylint from incorrectly expecting an `__init__.py` file and thus resolve the linting errors reported when such naming conflicts occur.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The change made to the `_discover_files` method seems to address the issue by ensuring that the presence of a file like 'a.py' in a directory named 'a' doesn't incorrectly infer the existence of '__init__.py'. The added logic checks for both '__init__.py' and the potential conflict file ('a.py' for directory 'a').",
            "instructions": null
          },
          "output": {
            "message": "The modification to the `_discover_files` method has been applied to handle cases where a module file shares the same name as its parent directory. This should prevent pylint from incorrectly expecting an `__init__.py` file and thus resolve the linting errors reported when such naming conflicts occur."
          },
          "input_tokens": 6603,
          "output_tokens": 199,
          "retry_message": null,
          "completion_cost": 0.022794000000000002
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The modification to the `_discover_files` method has been applied to handle cases where a module file shares the same name as its parent directory. This should prevent pylint from incorrectly expecting an `__init__.py` file and thus resolve the linting errors reported when such naming conflicts occur.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Linting fails if module contains module of the same name\n### Steps to reproduce\r\n\r\nGiven multiple files:\r\n```\r\n.\r\n`-- a/\r\n    |-- a.py\r\n    `-- b.py\r\n```\r\nWhich are all empty, running `pylint a` fails:\r\n\r\n```\r\n$ pylint a\r\n************* Module a\r\na/__init__.py:1:0: F0010: error while code parsing: Unable to load file a/__init__.py:\r\n[Errno 2] No such file or directory: 'a/__init__.py' (parse-error)\r\n$\r\n```\r\n\r\nHowever, if I rename `a.py`, `pylint a` succeeds:\r\n\r\n```\r\n$ mv a/a.py a/c.py\r\n$ pylint a\r\n$\r\n```\r\nAlternatively, I can also `touch a/__init__.py`, but that shouldn't be necessary anymore.\r\n\r\n### Current behavior\r\n\r\nRunning `pylint a` if `a/a.py` is present fails while searching for an `__init__.py` file.\r\n\r\n### Expected behavior\r\n\r\nRunning `pylint a` if `a/a.py` is present should succeed.\r\n\r\n### pylint --version output\r\n\r\nResult of `pylint --version` output:\r\n\r\n```\r\npylint 3.0.0a3\r\nastroid 2.5.6\r\nPython 3.8.5 (default, Jan 27 2021, 15:41:15) \r\n[GCC 9.3.0]\r\n```\r\n\r\n### Additional info\r\n\r\nThis also has some side-effects in module resolution. For example, if I create another file `r.py`:\r\n\r\n```\r\n.\r\n|-- a\r\n|   |-- a.py\r\n|   `-- b.py\r\n`-- r.py\r\n```\r\n\r\nWith the content:\r\n\r\n```\r\nfrom a import b\r\n```\r\n\r\nRunning `pylint -E r` will run fine, but `pylint -E r a` will fail. Not just for module a, but for module r as well.\r\n\r\n```\r\n************* Module r\r\nr.py:1:0: E0611: No name 'b' in module 'a' (no-name-in-module)\r\n************* Module a\r\na/__init__.py:1:0: F0010: error while code parsing: Unable to load file a/__init__.py:\r\n[Errno 2] No such file or directory: 'a/__init__.py' (parse-error)\r\n```\r\n\r\nAgain, if I rename `a.py` to `c.py`, `pylint -E r a` will work perfectly.\n"
}