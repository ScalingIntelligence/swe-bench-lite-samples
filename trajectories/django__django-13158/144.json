{
  "info": {
    "duration": 179.7369909286499,
    "submission": "",
    "total_cost": 0.12939600000000004,
    "instance_id": "django__django-13158",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue appears to be related to the behavior of the `QuerySet.none()` method when used in combination with the `union()` method for forming queries. This might be a bug or an unexpected interaction between the two methods. To debug this issue, it would be beneficial to first locate the implementation of the `none()` and `union()` methods within Django's ORM, specifically in files like 'django/db/models/query.py' and 'django/db/models/sql/query.py'. Additionally, since the problem seems to occur when using forms, it would be prudent to investigate the 'ModelMultipleChoiceField' class in 'django/forms/models.py' to understand how it handles querysets.",
            "search_requests": [
              {
                "query": "QuerySet.none() method implementation and behavior",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "django/db/models/query.py",
                "function_names": [
                  "none"
                ]
              },
              {
                "query": "QuerySet.union() method implementation and behavior",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "django/db/models/sql/query.py",
                "function_names": [
                  "union"
                ]
              },
              {
                "query": null,
                "class_names": [
                  "ModelMultipleChoiceField"
                ],
                "code_snippet": null,
                "file_pattern": "django/forms/models.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 42,
                "span_id": "QuerySet.none",
                "file_path": "django/db/models/query.py"
              },
              {
                "rank": 0,
                "tokens": 94,
                "span_id": "ModelMultipleChoiceField",
                "file_path": "django/forms/models.py"
              },
              {
                "rank": 0,
                "tokens": 90,
                "span_id": "ModelMultipleChoiceField.__init__",
                "file_path": "django/forms/models.py"
              },
              {
                "rank": 0,
                "tokens": 21,
                "span_id": "ModelMultipleChoiceField.to_python",
                "file_path": "django/forms/models.py"
              },
              {
                "rank": 0,
                "tokens": 107,
                "span_id": "ModelMultipleChoiceField.clean",
                "file_path": "django/forms/models.py"
              },
              {
                "rank": 0,
                "tokens": 258,
                "span_id": "ModelMultipleChoiceField._check_values",
                "file_path": "django/forms/models.py"
              },
              {
                "rank": 0,
                "tokens": 62,
                "span_id": "ModelMultipleChoiceField.prepare_value",
                "file_path": "django/forms/models.py"
              },
              {
                "rank": 0,
                "tokens": 74,
                "span_id": "ModelMultipleChoiceField.has_changed",
                "file_path": "django/forms/models.py"
              }
            ],
            "search_requests": [
              {
                "query": "QuerySet.none() method implementation and behavior",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "django/db/models/query.py",
                "function_names": [
                  "none"
                ]
              },
              {
                "query": "QuerySet.union() method implementation and behavior",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "django/db/models/sql/query.py",
                "function_names": [
                  "union"
                ]
              },
              {
                "query": null,
                "class_names": [
                  "ModelMultipleChoiceField"
                ],
                "code_snippet": null,
                "file_pattern": "django/forms/models.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 3244,
          "output_tokens": 321,
          "retry_message": null,
          "completion_cost": 0.014547000000000001
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 42,
            "span_id": "QuerySet.none",
            "file_path": "django/db/models/query.py"
          },
          {
            "rank": 0,
            "tokens": 94,
            "span_id": "ModelMultipleChoiceField",
            "file_path": "django/forms/models.py"
          },
          {
            "rank": 0,
            "tokens": 90,
            "span_id": "ModelMultipleChoiceField.__init__",
            "file_path": "django/forms/models.py"
          },
          {
            "rank": 0,
            "tokens": 21,
            "span_id": "ModelMultipleChoiceField.to_python",
            "file_path": "django/forms/models.py"
          },
          {
            "rank": 0,
            "tokens": 107,
            "span_id": "ModelMultipleChoiceField.clean",
            "file_path": "django/forms/models.py"
          },
          {
            "rank": 0,
            "tokens": 258,
            "span_id": "ModelMultipleChoiceField._check_values",
            "file_path": "django/forms/models.py"
          },
          {
            "rank": 0,
            "tokens": 62,
            "span_id": "ModelMultipleChoiceField.prepare_value",
            "file_path": "django/forms/models.py"
          },
          {
            "rank": 0,
            "tokens": 74,
            "span_id": "ModelMultipleChoiceField.has_changed",
            "file_path": "django/forms/models.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "Based on the reported issue, the problem revolves around the behavior of QuerySet.none() when used in combination with union(). The user has noticed that when using the union() method to combine QuerySets and then submitting an empty form, all objects matching the queryset are added. This suggests a potential issue in how QuerySet.none() or union() is handled in the context of ModelMultipleChoiceField. From the provided search results, relevant code spans include `QuerySet.none()`, `ModelMultipleChoiceField.__init__`, `ModelMultipleChoiceField.clean`, and `ModelMultipleChoiceField._check_values`. These sections are particularly important because they directly involve the methods and processes that could be causing the issue outlined. The `QuerySet.none()` method is implicated in the unexpected behavior of returning all results when combined with union(), and the `ModelMultipleChoiceField.clean` method is where this behavior manifests during form submission. The `_check_values` method is also relevant as it processes the form values and interacts with the queryset. Therefore, these code spans are identified as relevant to understanding and potentially fixing the issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "QuerySet.none"
                ],
                "file_path": "django/db/models/query.py"
              },
              {
                "span_ids": [
                  "ModelMultipleChoiceField.__init__",
                  "ModelMultipleChoiceField.clean",
                  "ModelMultipleChoiceField._check_values"
                ],
                "file_path": "django/forms/models.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 2580,
          "output_tokens": 369,
          "retry_message": null,
          "completion_cost": 0.013275
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The file context includes relevant code from 'django/db/models/query.py' and 'django/forms/models.py'. In 'django/db/models/query.py', the `none()` method of the `QuerySet` class is found, which is relevant to the issue. In 'django/forms/models.py', the `ModelMultipleChoiceField` class and its methods, including `clean()` and `_check_values()`, are found, which are also relevant as they handle the queryset for the form. The issue is related to the combination of `none()` method and `union()` method, and how it affects the form's handling of querysets. The provided context seems to cover the necessary parts for investigating and understanding the issue.",
            "search_suggestions": "Look into the implementation of the `union()` method in Django's ORM, particularly in 'django/db/models/query.py' and 'django/db/models/sql/query.py', to understand how it interacts with the `none()` method and affects the form's queryset handling."
          },
          "output": {
            "message": "Look into the implementation of the `union()` method in Django's ORM, particularly in 'django/db/models/query.py' and 'django/db/models/sql/query.py', to understand how it interacts with the `none()` method and affects the form's queryset handling."
          },
          "input_tokens": 2149,
          "output_tokens": 265,
          "retry_message": null,
          "completion_cost": 0.010422
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look into the implementation of the `union()` method in Django's ORM, particularly in 'django/db/models/query.py' and 'django/db/models/sql/query.py', to understand how it interacts with the `none()` method and affects the form's queryset handling.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The provided context gives insights into the `none()` method within `django/db/models/query.py` and the `clean()` method of `ModelMultipleChoiceField` in `django/forms/models.py`. The `none()` method in `QuerySet` simply creates a clone of the current queryset and sets its query to be empty, effectively rendering it a queryset with no results. On the other hand, the `clean()` method in `ModelMultipleChoiceField` processes the input values and returns a queryset containing the valid objects based on these values. If no values are provided and the field is not required, it defaults to returning a queryset of none. However, the issue at hand involves the interaction between `union()` and `none()`, which has not been addressed in the provided context. Therefore, it's necessary to look further into the implementation of the `union()` method in the specified files to understand how it might interact with `none()` and affect the form's queryset handling.",
            "search_requests": [
              {
                "query": "QuerySet.union() method implementation and behavior",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "django/db/models/query.py",
                "function_names": [
                  "union"
                ]
              },
              {
                "query": "QuerySet.union() method implementation and behavior",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "django/db/models/sql/query.py",
                "function_names": [
                  "union"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 94,
                "span_id": "QuerySet.union",
                "file_path": "django/db/models/query.py"
              }
            ],
            "search_requests": [
              {
                "query": "QuerySet.union() method implementation and behavior",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "django/db/models/query.py",
                "function_names": [
                  "union"
                ]
              },
              {
                "query": "QuerySet.union() method implementation and behavior",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "django/db/models/sql/query.py",
                "function_names": [
                  "union"
                ]
              }
            ]
          },
          "input_tokens": 4619,
          "output_tokens": 391,
          "retry_message": null,
          "completion_cost": 0.019722
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 94,
            "span_id": "QuerySet.union",
            "file_path": "django/db/models/query.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves the behavior of `QuerySet.none()` when combined with `union()` in a `ModelMultipleChoiceField` queryset. The issue is that using `union()` results in all objects from the queryset being added when the form is submitted empty, whereas using the OR query (`|`) does not. This suggests a discrepancy in how the two methods handle the absence of selected values.\n\nFrom the provided code, we can see the implementation of `QuerySet.none()` and `QuerySet.union()` in the `QuerySet` class. The `none()` method is used to return a queryset that always evaluates to an empty result. The `union()` method combines multiple querysets and has an argument `all` to include duplicate rows if set to `True`.\n\nWe also have code related to `ModelMultipleChoiceField` in `django/forms/models.py`. Specifically, the `clean()` method of `ModelMultipleChoiceField` handles the validation of the input values and returns `self.queryset.none()` if no value is provided and the field is not required. The `_check_values()` method further processes the provided values.\n\nThe provided search results do not offer new context regarding the issue; the relevant code has already been provided in the file context. Therefore, the search task can be considered complete based on the existing code spans.",
            "identified_spans": null
          },
          "output": {
            "message": "The search returned 1 results. But unfortunately, I didn\u2019t find any of the search results relevant to the query.\n\nThe reported issue involves the behavior of `QuerySet.none()` when combined with `union()` in a `ModelMultipleChoiceField` queryset. The issue is that using `union()` results in all objects from the queryset being added when the form is submitted empty, whereas using the OR query (`|`) does not. This suggests a discrepancy in how the two methods handle the absence of selected values.\n\nFrom the provided code, we can see the implementation of `QuerySet.none()` and `QuerySet.union()` in the `QuerySet` class. The `none()` method is used to return a queryset that always evaluates to an empty result. The `union()` method combines multiple querysets and has an argument `all` to include duplicate rows if set to `True`.\n\nWe also have code related to `ModelMultipleChoiceField` in `django/forms/models.py`. Specifically, the `clean()` method of `ModelMultipleChoiceField` handles the validation of the input values and returns `self.queryset.none()` if no value is provided and the field is not required. The `_check_values()` method further processes the provided values.\n\nThe provided search results do not offer new context regarding the issue; the relevant code has already been provided in the file context. Therefore, the search task can be considered complete based on the existing code spans."
          },
          "input_tokens": 2575,
          "output_tokens": 316,
          "retry_message": null,
          "completion_cost": 0.012465
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "The search returned 1 results. But unfortunately, I didn\u2019t find any of the search results relevant to the query.\n\nThe reported issue involves the behavior of `QuerySet.none()` when combined with `union()` in a `ModelMultipleChoiceField` queryset. The issue is that using `union()` results in all objects from the queryset being added when the form is submitted empty, whereas using the OR query (`|`) does not. This suggests a discrepancy in how the two methods handle the absence of selected values.\n\nFrom the provided code, we can see the implementation of `QuerySet.none()` and `QuerySet.union()` in the `QuerySet` class. The `none()` method is used to return a queryset that always evaluates to an empty result. The `union()` method combines multiple querysets and has an argument `all` to include duplicate rows if set to `True`.\n\nWe also have code related to `ModelMultipleChoiceField` in `django/forms/models.py`. Specifically, the `clean()` method of `ModelMultipleChoiceField` handles the validation of the input values and returns `self.queryset.none()` if no value is provided and the field is not required. The `_check_values()` method further processes the provided values.\n\nThe provided search results do not offer new context regarding the issue; the relevant code has already been provided in the file context. Therefore, the search task can be considered complete based on the existing code spans.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "scratch_pad": "The provided context and code snippets offer a detailed look into the inner workings of the `QuerySet.none()` and `QuerySet.union()` methods, as well as the `ModelMultipleChoiceField` class in Django. The `none()` method in `QuerySet` is used to return a queryset that always evaluates to an empty result by setting the query to be empty. The `union()` method, which combines multiple querysets, does not explicitly handle the interaction with `none()` in the provided code snippet. However, the issue at hand involves the unexpected behavior when using `union()` in a `ModelMultipleChoiceField`, where all objects are added when the form is submitted empty. The relevant part of the `ModelMultipleChoiceField` class shows that if no value is provided and the field is not required, it returns `self.queryset.none()`. This suggests that the problem might lie in how `union()` interacts with this default behavior, possibly due to differences in how `union()` and the OR operator (`|`) are implemented in the database query handling. Given the provided context and the lack of additional relevant results, the search for further specific code can be considered complete.",
            "search_requests": []
          },
          "output": {
            "message": "The provided context and code snippets offer a detailed look into the inner workings of the `QuerySet.none()` and `QuerySet.union()` methods, as well as the `ModelMultipleChoiceField` class in Django. The `none()` method in `QuerySet` is used to return a queryset that always evaluates to an empty result by setting the query to be empty. The `union()` method, which combines multiple querysets, does not explicitly handle the interaction with `none()` in the provided code snippet. However, the issue at hand involves the unexpected behavior when using `union()` in a `ModelMultipleChoiceField`, where all objects are added when the form is submitted empty. The relevant part of the `ModelMultipleChoiceField` class shows that if no value is provided and the field is not required, it returns `self.queryset.none()`. This suggests that the problem might lie in how `union()` interacts with this default behavior, possibly due to differences in how `union()` and the OR operator (`|`) are implemented in the database query handling. Given the provided context and the lack of additional relevant results, the search for further specific code can be considered complete."
          },
          "input_tokens": 5331,
          "output_tokens": 273,
          "retry_message": null,
          "completion_cost": 0.020088
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "The provided context and code snippets offer a detailed look into the inner workings of the `QuerySet.none()` and `QuerySet.union()` methods, as well as the `ModelMultipleChoiceField` class in Django. The `none()` method in `QuerySet` is used to return a queryset that always evaluates to an empty result by setting the query to be empty. The `union()` method, which combines multiple querysets, does not explicitly handle the interaction with `none()` in the provided code snippet. However, the issue at hand involves the unexpected behavior when using `union()` in a `ModelMultipleChoiceField`, where all objects are added when the form is submitted empty. The relevant part of the `ModelMultipleChoiceField` class shows that if no value is provided and the field is not required, it returns `self.queryset.none()`. This suggests that the problem might lie in how `union()` interacts with this default behavior, possibly due to differences in how `union()` and the OR operator (`|`) are implemented in the database query handling. Given the provided context and the lack of additional relevant results, the search for further specific code can be considered complete.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "QuerySet.none",
            "file_path": "django/db/models/query.py",
            "scratch_pad": "The issue seems to be related to how `QuerySet.union()` interacts with `ModelMultipleChoiceField` in Django. When `ModelMultipleChoiceField` is submitted empty and not required, it returns `self.queryset.none()`. However, when using `union()`, this behavior is not maintained, and all objects from the combined queryset are added. This suggests an issue with how `union()` handles the empty queryset.",
            "instructions": "Update the `QuerySet.union()` method to correctly handle cases where `QuerySet.none()` is involved, ensuring that if an empty queryset is returned, it does not add all objects from the combined queryset."
          },
          "output": {
            "span_id": "QuerySet.none",
            "end_line": 923,
            "file_path": "django/db/models/query.py",
            "start_line": 919,
            "instructions": "Update the `QuerySet.union()` method to correctly handle cases where `QuerySet.none()` is involved, ensuring that if an empty queryset is returned, it does not add all objects from the combined queryset."
          },
          "input_tokens": 2699,
          "output_tokens": 196,
          "retry_message": null,
          "completion_cost": 0.011037
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "QuerySet.none",
        "end_line": 923,
        "file_path": "django/db/models/query.py",
        "max_tokens": 1000,
        "start_line": 919,
        "temperature": 1.6,
        "instructions": "Update the `QuerySet.union()` method to correctly handle cases where `QuerySet.none()` is involved, ensuring that if an empty queryset is returned, it does not add all objects from the combined queryset.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\n    def none(self):\n        \"\"\"Return an empty QuerySet.\"\"\"\n        clone = self._chain()\n        clone.query.set_empty()\n        return clone\n</replace>"
          },
          "output": null,
          "input_tokens": 2208,
          "output_tokens": 48,
          "retry_message": "The code in the replace tag is the same as in the search. Use the reject function if you can't do any changes and want to reject the instructions.",
          "completion_cost": 0.007344000000000001
        },
        {
          "action": {
            "content": "```xml\n<reject>\nThe provided context does not include the `union` method or any code where `none()` is used in conjunction with `union()`, which is necessary to implement the requested change.\n</reject>\n```"
          },
          "output": {
            "message": "\nThe provided context does not include the `union` method or any code where `none()` is used in conjunction with `union()`, which is necessary to implement the requested change.\n"
          },
          "input_tokens": 2296,
          "output_tokens": 49,
          "retry_message": null,
          "completion_cost": 0.007623
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "\nThe provided context does not include the `union` method or any code where `none()` is used in conjunction with `union()`, which is necessary to implement the requested change.\n",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "reject",
            "finish": null,
            "reject": "The `union` method is not included in the provided file context, making it impossible to implement the necessary changes without the full implementation details.",
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The issue revolves around the interaction between `QuerySet.none()` and `QuerySet.union()`. From the context provided, it's clear that `QuerySet.none()` is designed to return an empty queryset, but when used with `union()`, it doesn't maintain this behavior, leading to the addition of all objects from the combined queryset. The relevant changes need to be made in the `QuerySet` class where `union()` is likely implemented, but it's not included in the provided file context. Therefore, before making any changes, we need to ensure we have the complete context, including the `union()` method implementation.",
            "instructions": null
          },
          "output": {
            "message": "The `union` method is not included in the provided file context, making it impossible to implement the necessary changes without the full implementation details."
          },
          "input_tokens": 3176,
          "output_tokens": 223,
          "retry_message": null,
          "completion_cost": 0.012872999999999999
        }
      ]
    },
    {
      "name": "Rejected",
      "state": {
        "model": "gpt-4o",
        "message": "The `union` method is not included in the provided file context, making it impossible to implement the necessary changes without the full implementation details.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "QuerySet.none() on combined queries returns all results.\nDescription\n\t\nI came across this issue on Stack Overflow. I'm not 100% sure it's a bug, but it does seem strange. With this code (excuse the bizarre example filtering):\nclass Publication(models.Model):\n\tpass\nclass Article(models.Model):\n\tpublications = models.ManyToManyField(to=Publication, blank=True, null=True)\nclass ArticleForm(forms.ModelForm):\n\tpublications = forms.ModelMultipleChoiceField(\n\t\tPublication.objects.filter(id__lt=2) | Publication.objects.filter(id__gt=5),\n\t\trequired=False,\n\t)\n\tclass Meta:\n\t\tmodel = Article\n\t\tfields = [\"publications\"]\nclass ArticleAdmin(admin.ModelAdmin):\n\tform = ArticleForm\nThis works well. However, changing the ModelMultipleChoiceField queryset to use union() breaks things.\npublications = forms.ModelMultipleChoiceField(\n\tPublication.objects.filter(id__lt=2).union(\n\t\tPublication.objects.filter(id__gt=5)\n\t),\n\trequired=False,\n)\nThe form correctly shows only the matching objects. However, if you submit this form while empty (i.e. you didn't select any publications), ALL objects matching the queryset will be added. Using the OR query, NO objects are added, as I'd expect.\n"
}