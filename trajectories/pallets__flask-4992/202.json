{
  "info": {
    "duration": 302.1705400943756,
    "submission": "diff --git a/src/flask/config.py b/src/flask/config.py\nindex d4fc310f..2db452d1 100644\n--- a/src/flask/config.py\n+++ b/src/flask/config.py\n@@ -234,6 +234,7 @@ class Config(dict):\n         filename: str,\n         load: t.Callable[[t.IO[t.Any]], t.Mapping],\n         silent: bool = False,\n+        mode: str = \"r\"\n     ) -> bool:\n         \"\"\"Update the values in the config from a file that is loaded\n         using the ``load`` parameter. The loaded data is passed to the\n@@ -254,6 +255,7 @@ class Config(dict):\n         :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n             implements a ``read`` method.\n         :param silent: Ignore the file if it doesn't exist.\n+        :param mode: The mode in which the file is opened. Defaults to 'r'.\n         :return: ``True`` if the file was loaded successfully.\n \n         .. versionadded:: 2.0\n@@ -261,7 +263,7 @@ class Config(dict):\n         filename = os.path.join(self.root_path, filename)\n \n         try:\n-            with open(filename) as f:\n+            with open(filename, mode) as f:\n                 obj = load(f)\n         except OSError as e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n",
    "total_cost": 0.16828800000000002,
    "instance_id": "pallets__flask-4992",
    "evaluation_name": "temperature_sweep_250_samples_50_problems_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue is about handling TOML files correctly with the `flask.Config.from_file()` method. The `tomllib.load()` function requires the file to be opened in binary mode, but `flask.Config.from_file()` currently opens files in text mode by default. The goal is to enhance `flask.Config.from_file()` to accept a file mode parameter, enabling binary mode for TOML files. This requires modifications in the `config.py` file where the `from_file` method is defined, and potentially in related methods in the `app.py` and `scaffold.py` files.",
            "search_requests": [
              {
                "query": "flask.Config.from_file() method to add file mode parameter",
                "class_names": [],
                "code_snippet": "def from_file(self, filename: str, load: t.Callable[[t.IO[t.Any]], t.Mapping], silent: bool = False) -> bool:",
                "file_pattern": "**/flask/config.py",
                "function_names": []
              },
              {
                "query": "interaction with config and file handling in Flask app",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/flask/app.py",
                "function_names": [
                  "make_config",
                  "open_instance_resource"
                ]
              },
              {
                "query": "methods related to file operations in Scaffold class",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/flask/scaffold.py",
                "function_names": [
                  "open_resource"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 122,
                "span_id": "Flask.open_instance_resource",
                "file_path": "src/flask/app.py"
              },
              {
                "rank": 1,
                "tokens": 129,
                "span_id": "Flask.make_config",
                "file_path": "src/flask/app.py"
              },
              {
                "rank": 0,
                "tokens": 201,
                "span_id": "Scaffold.open_resource",
                "file_path": "src/flask/scaffold.py"
              }
            ],
            "search_requests": [
              {
                "query": "flask.Config.from_file() method to add file mode parameter",
                "class_names": [],
                "code_snippet": "def from_file(self, filename: str, load: t.Callable[[t.IO[t.Any]], t.Mapping], silent: bool = False) -> bool:",
                "file_pattern": "**/flask/config.py",
                "function_names": []
              },
              {
                "query": "interaction with config and file handling in Flask app",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/flask/app.py",
                "function_names": [
                  "make_config",
                  "open_instance_resource"
                ]
              },
              {
                "query": "methods related to file operations in Scaffold class",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/flask/scaffold.py",
                "function_names": [
                  "open_resource"
                ]
              }
            ]
          },
          "input_tokens": 3682,
          "output_tokens": 369,
          "retry_message": null,
          "completion_cost": 0.016581
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 122,
            "span_id": "Flask.open_instance_resource",
            "file_path": "src/flask/app.py"
          },
          {
            "rank": 1,
            "tokens": 129,
            "span_id": "Flask.make_config",
            "file_path": "src/flask/app.py"
          },
          {
            "rank": 0,
            "tokens": 201,
            "span_id": "Scaffold.open_resource",
            "file_path": "src/flask/scaffold.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The task is to identify code related to adding a file mode parameter to `flask.Config.from_file()`. The provided context does not have any relevant files identified yet. The search results reveal several files and spans, but none directly mention `Config.from_file()`. However, since the task involves changing the `from_file` method, it's likely related to the `Config` class. One relevant span in `src/flask/app.py` is the `Flask.make_config` method, which creates an instance of the `Config` class. Another potentially relevant span is `Flask.open_instance_resource`, which opens a resource with a specific mode (defaulting to binary). Additionally, a similar method `Scaffold.open_resource` in `src/flask/scaffold.py` also opens a resource in binary mode. The similarity in these methods to the issue's requirement suggests these could be starting points for modifying `from_file` to accept a file mode parameter. I have identified these spans as relevant for further investigation or modification based on the task.",
            "identified_spans": [
              {
                "span_ids": [
                  "Flask.make_config",
                  "Flask.open_instance_resource"
                ],
                "file_path": "src/flask/app.py"
              },
              {
                "span_ids": [
                  "Scaffold.open_resource"
                ],
                "file_path": "src/flask/scaffold.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3360,
          "output_tokens": 365,
          "retry_message": null,
          "completion_cost": 0.015555
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The file context provided does not contain the direct definition of the `from_file` method within the `flask.Config` class. However, it does include related methods such as `open_instance_resource` and `open_resource` in `app.py` and `scaffold.py`, respectively, which might be relevant as they handle file opening with specified modes. The `config.py` file, which would likely contain the `from_file` method, is not provided in the context. It's necessary to check the `config.py` file to determine if the `from_file` method exists and if it has the necessary parameter to accept the file mode.",
            "search_suggestions": "Look for the `config.py` file in the `src/flask/` directory to find the definition of `flask.Config.from_file()`. This file should contain the method where the file mode parameter would need to be added to support loading TOML files correctly with `tomllib.load()`."
          },
          "output": {
            "message": "Look for the `config.py` file in the `src/flask/` directory to find the definition of `flask.Config.from_file()`. This file should contain the method where the file mode parameter would need to be added to support loading TOML files correctly with `tomllib.load()`."
          },
          "input_tokens": 3259,
          "output_tokens": 248,
          "retry_message": null,
          "completion_cost": 0.013497000000000002
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look for the `config.py` file in the `src/flask/` directory to find the definition of `flask.Config.from_file()`. This file should contain the method where the file mode parameter would need to be added to support loading TOML files correctly with `tomllib.load()`.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "Based on the file context provided, the `config.py` file hasn't been directly referenced with its contents. It's necessary to look into this file specifically to find the implementation of the `flask.Config.from_file()` method, as this is where the file mode parameter for binary mode support is likely to be added.",
            "search_requests": [
              {
                "query": "definition of flask.Config.from_file() method",
                "class_names": [
                  "Config"
                ],
                "code_snippet": null,
                "file_pattern": "**/config.py",
                "function_names": [
                  "from_file"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 252,
                "span_id": "Config.from_pyfile",
                "file_path": "src/flask/config.py"
              },
              {
                "rank": 1,
                "tokens": 315,
                "span_id": "Config.from_file",
                "file_path": "src/flask/config.py"
              },
              {
                "rank": 2,
                "tokens": 365,
                "span_id": "Config",
                "file_path": "src/flask/config.py"
              },
              {
                "rank": 3,
                "tokens": 194,
                "span_id": "Config.from_envvar",
                "file_path": "src/flask/config.py"
              },
              {
                "rank": 4,
                "tokens": 337,
                "span_id": "Config.from_object",
                "file_path": "src/flask/config.py"
              },
              {
                "rank": 6,
                "tokens": 121,
                "span_id": "Config.from_mapping",
                "file_path": "src/flask/config.py"
              },
              {
                "rank": 7,
                "tokens": 420,
                "span_id": "Config.from_prefixed_env",
                "file_path": "src/flask/config.py"
              },
              {
                "rank": 8,
                "tokens": 27,
                "span_id": "Config.__repr__",
                "file_path": "src/flask/config.py"
              },
              {
                "rank": 8,
                "tokens": 295,
                "span_id": "Config.get_namespace",
                "file_path": "src/flask/config.py"
              }
            ],
            "search_requests": [
              {
                "query": "definition of flask.Config.from_file() method",
                "class_names": [
                  "Config"
                ],
                "code_snippet": null,
                "file_pattern": "**/config.py",
                "function_names": [
                  "from_file"
                ]
              }
            ]
          },
          "input_tokens": 6182,
          "output_tokens": 183,
          "retry_message": null,
          "completion_cost": 0.021291
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 252,
            "span_id": "Config.from_pyfile",
            "file_path": "src/flask/config.py"
          },
          {
            "rank": 1,
            "tokens": 315,
            "span_id": "Config.from_file",
            "file_path": "src/flask/config.py"
          },
          {
            "rank": 2,
            "tokens": 365,
            "span_id": "Config",
            "file_path": "src/flask/config.py"
          },
          {
            "rank": 3,
            "tokens": 194,
            "span_id": "Config.from_envvar",
            "file_path": "src/flask/config.py"
          },
          {
            "rank": 4,
            "tokens": 337,
            "span_id": "Config.from_object",
            "file_path": "src/flask/config.py"
          },
          {
            "rank": 6,
            "tokens": 121,
            "span_id": "Config.from_mapping",
            "file_path": "src/flask/config.py"
          },
          {
            "rank": 7,
            "tokens": 420,
            "span_id": "Config.from_prefixed_env",
            "file_path": "src/flask/config.py"
          },
          {
            "rank": 8,
            "tokens": 27,
            "span_id": "Config.__repr__",
            "file_path": "src/flask/config.py"
          },
          {
            "rank": 8,
            "tokens": 295,
            "span_id": "Config.get_namespace",
            "file_path": "src/flask/config.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue seeks to add a file mode parameter to `flask.Config.from_file()` to accommodate the binary mode requirement for loading TOML files using `tomllib.load()`. This feature would simplify the current workaround of manually opening the file in binary mode and passing the loaded dictionary to `app.Config.from_mapping()`. The current implementation of `flask.Config.from_file()` in the `Config` class opens files in text mode, which causes the `TypeError` when using `tomllib.load()`. Analyzing the provided search results, the relevant code span is within the `Config` class and specifically the `from_file` method. This method is where the modification to include a mode parameter should be made to handle both text and binary modes. The current implementation of `from_file` does not provide for a mode parameter and always opens files in text mode. The other methods in the `Config` class, like `from_envvar`, `from_prefixed_env`, `from_pyfile`, `from_object`, and `from_mapping`, are not directly relevant to the issue of adding a file mode parameter to `from_file`. Therefore, the focus should be on modifying the `from_file` method to accept a mode parameter and use this parameter when opening the file.",
            "identified_spans": [
              {
                "span_ids": [
                  "imports",
                  "Config",
                  "Config.from_file"
                ],
                "file_path": "src/flask/config.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4677,
          "output_tokens": 358,
          "retry_message": null,
          "completion_cost": 0.019401
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context includes `config.py` where the `from_file()` method is implemented. This method does not currently support a file mode parameter for opening files in binary mode. Reviewing this file establishes the location where a file mode parameter would be added to support binary mode for TOML files.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 4168,
          "output_tokens": 100,
          "retry_message": null,
          "completion_cost": 0.014003999999999999
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "Config.from_file",
            "file_path": "src/flask/config.py",
            "scratch_pad": "The reported issue suggests adding a file mode parameter to `flask.Config.from_file()` to support loading TOML config files using `tomllib.load()`, which requires binary mode. This change would involve modifying the `from_file` method in `Config` class to accept a `mode` parameter and use it when opening the file.",
            "instructions": "Add a `mode` parameter to the `from_file` method in the `Config` class with a default value of 'r' to maintain backward compatibility. Modify the `open` call within the method to use this new `mode` parameter instead of hardcoding 'r'."
          },
          "output": {
            "span_id": "Config.from_file",
            "end_line": 273,
            "file_path": "src/flask/config.py",
            "start_line": 232,
            "instructions": "Add a `mode` parameter to the `from_file` method in the `Config` class with a default value of 'r' to maintain backward compatibility. Modify the `open` call within the method to use this new `mode` parameter instead of hardcoding 'r'."
          },
          "input_tokens": 4497,
          "output_tokens": 204,
          "retry_message": null,
          "completion_cost": 0.016551
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "Config.from_file",
        "end_line": 273,
        "file_path": "src/flask/config.py",
        "max_tokens": 1000,
        "start_line": 232,
        "temperature": 1.6,
        "instructions": "Add a `mode` parameter to the `from_file` method in the `Config` class with a default value of 'r' to maintain backward compatibility. Modify the `open` call within the method to use this new `mode` parameter instead of hardcoding 'r'.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\n    def from_file(\n        self,\n        filename: str,\n        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n        silent: bool = False,\n        mode: str = \"r\"\n    ) -> bool:\n        \"\"\"Update the values in the config from a file that is loaded\n        using the ``load`` parameter. The loaded data is passed to the\n        :meth:`from_mapping` method.\n\n        .. code-block:: python\n\n            import json\n            app.config.from_file(\"config.json\", load=json.load)\n\n            import toml\n            app.config.from_file(\"config.toml\", load=toml.load)\n\n        :param filename: The path to the data file. This can be an\n            absolute path or relative to the config root path.\n        :param load: A callable that takes a file handle and returns a\n            mapping of loaded data from the file.\n        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n            implements a ``read`` method.\n        :param silent: Ignore the file if it doesn't exist.\n        :param mode: The mode in which the file is opened. Defaults to 'r'.\n        :return: ``True`` if the file was loaded successfully.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        filename = os.path.join(self.root_path, filename)\n\n        try:\n            with open(filename, mode) as f:\n                obj = load(f)\n        except OSError as e:\n            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n                return False\n\n            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n            raise\n\n        return self.from_mapping(obj)\n</replace>"
          },
          "output": {
            "diff": "--- src/flask/config.py\n+++ src/flask/config.py\n@@ -234,6 +234,7 @@\n         filename: str,\n         load: t.Callable[[t.IO[t.Any]], t.Mapping],\n         silent: bool = False,\n+        mode: str = \"r\"\n     ) -> bool:\n         \"\"\"Update the values in the config from a file that is loaded\n         using the ``load`` parameter. The loaded data is passed to the\n@@ -254,6 +255,7 @@\n         :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n             implements a ``read`` method.\n         :param silent: Ignore the file if it doesn't exist.\n+        :param mode: The mode in which the file is opened. Defaults to 'r'.\n         :return: ``True`` if the file was loaded successfully.\n \n         .. versionadded:: 2.0\n@@ -261,7 +263,7 @@\n         filename = os.path.join(self.root_path, filename)\n \n         try:\n-            with open(filename) as f:\n+            with open(filename, mode) as f:\n                 obj = load(f)\n         except OSError as e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n",
            "message": "Applied the change to src/flask/config.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 8796,
          "output_tokens": 435,
          "retry_message": null,
          "completion_cost": 0.032913000000000005
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- src/flask/config.py\n+++ src/flask/config.py\n@@ -234,6 +234,7 @@\n         filename: str,\n         load: t.Callable[[t.IO[t.Any]], t.Mapping],\n         silent: bool = False,\n+        mode: str = \"r\"\n     ) -> bool:\n         \"\"\"Update the values in the config from a file that is loaded\n         using the ``load`` parameter. The loaded data is passed to the\n@@ -254,6 +255,7 @@\n         :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n             implements a ``read`` method.\n         :param silent: Ignore the file if it doesn't exist.\n+        :param mode: The mode in which the file is opened. Defaults to 'r'.\n         :return: ``True`` if the file was loaded successfully.\n \n         .. versionadded:: 2.0\n@@ -261,7 +263,7 @@\n         filename = os.path.join(self.root_path, filename)\n \n         try:\n-            with open(filename) as f:\n+            with open(filename, mode) as f:\n                 obj = load(f)\n         except OSError as e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n",
        "model": "deepseek-coder",
        "message": "Applied the change to src/flask/config.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The addition of the `mode` parameter to `flask.Config.from_file()` effectively resolves the issue of handling files opened in binary mode. This enhancement simplifies the process of loading TOML configuration files without requiring additional code to manually handle file opening modes.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The change to add a file mode parameter to `flask.Config.from_file()` has been successfully applied in `src/flask/config.py`. This update allows the method to open files in binary mode when necessary, such as when using `tomllib.load()`, which improves flexibility for handling various file types. The updated method now accepts a `mode` parameter with a default value of 'r', ensuring backward compatibility while providing the option to specify binary mode using 'b'.",
            "instructions": null
          },
          "output": {
            "message": "The addition of the `mode` parameter to `flask.Config.from_file()` effectively resolves the issue of handling files opened in binary mode. This enhancement simplifies the process of loading TOML configuration files without requiring additional code to manually handle file opening modes."
          },
          "input_tokens": 5080,
          "output_tokens": 217,
          "retry_message": null,
          "completion_cost": 0.018495
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The addition of the `mode` parameter to `flask.Config.from_file()` effectively resolves the issue of handling files opened in binary mode. This enhancement simplifies the process of loading TOML configuration files without requiring additional code to manually handle file opening modes.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Add a file mode parameter to flask.Config.from_file()\nPython 3.11 introduced native TOML support with the `tomllib` package. This could work nicely with the `flask.Config.from_file()` method as an easy way to load TOML config files:\r\n\r\n```python\r\napp.config.from_file(\"config.toml\", tomllib.load)\r\n```\r\n\r\nHowever, `tomllib.load()` takes an object readable in binary mode, while `flask.Config.from_file()` opens a file in text mode, resulting in this error:\r\n\r\n```\r\nTypeError: File must be opened in binary mode, e.g. use `open('foo.toml', 'rb')`\r\n```\r\n\r\nWe can get around this with a more verbose expression, like loading from a file opened with the built-in `open()` function and passing the `dict` to `app.Config.from_mapping()`:\r\n\r\n```python\r\n# We have to repeat the path joining that from_file() does\r\nwith open(os.path.join(app.config.root_path, \"config.toml\"), \"rb\") as file:\r\n    app.config.from_mapping(tomllib.load(file))\r\n```\r\n\r\nBut adding a file mode parameter to `flask.Config.from_file()` would enable the use of a simpler expression. E.g.:\r\n\r\n```python\r\napp.config.from_file(\"config.toml\", tomllib.load, mode=\"b\")\r\n```\r\n\n"
}