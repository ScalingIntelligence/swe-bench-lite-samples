{
  "info": {
    "duration": 287.8531928062439,
    "submission": "diff --git a/src/flask/config.py b/src/flask/config.py\nindex d4fc310f..9a49507c 100644\n--- a/src/flask/config.py\n+++ b/src/flask/config.py\n@@ -233,6 +233,7 @@ class Config(dict):\n         self,\n         filename: str,\n         load: t.Callable[[t.IO[t.Any]], t.Mapping],\n+        mode: str = 'r',\n         silent: bool = False,\n     ) -> bool:\n         \"\"\"Update the values in the config from a file that is loaded\n@@ -245,7 +246,7 @@ class Config(dict):\n             app.config.from_file(\"config.json\", load=json.load)\n \n             import toml\n-            app.config.from_file(\"config.toml\", load=toml.load)\n+            app.config.from_file(\"config.toml\", load=toml.load, mode=\"b\")\n \n         :param filename: The path to the data file. This can be an\n             absolute path or relative to the config root path.\n@@ -253,6 +254,7 @@ class Config(dict):\n             mapping of loaded data from the file.\n         :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n             implements a ``read`` method.\n+        :param mode: The mode in which the file is opened. Default is 'r' (text mode). Use 'b' for binary mode.\n         :param silent: Ignore the file if it doesn't exist.\n         :return: ``True`` if the file was loaded successfully.\n \n@@ -261,7 +263,7 @@ class Config(dict):\n         filename = os.path.join(self.root_path, filename)\n \n         try:\n-            with open(filename) as f:\n+            with open(filename, mode) as f:\n                 obj = load(f)\n         except OSError as e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n",
    "total_cost": 0.16089900000000001,
    "instance_id": "pallets__flask-4992",
    "evaluation_name": "temperature_sweep_250_samples_50_problems_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue pertains to the need for adding a file mode parameter to the `flask.Config.from_file()` method to support binary mode, which is required by the `tomllib.load()` function introduced in Python 3.11 for loading TOML files. The relevant methods and classes to inspect include `Config.from_file()`, `Config`, and potentially related methods like `open_resource()` and `open_instance_resource()`. Seaching specifically in the `src/flask/config.py` and `src/flask/scaffold.py` seems appropriate given the context of the issue, focusing on the `flask.Config` class and its methods along with the `Scaffold` class which manages resources.",
            "search_requests": [
              {
                "query": "flask.Config.from_file()",
                "class_names": [
                  "Config"
                ],
                "code_snippet": "self.from_file(filename: str, load: t.Callable[[t.IO[t.Any]], t.Mapping], silent: bool = False)",
                "file_pattern": "src/flask/config.py",
                "function_names": [
                  "from_file"
                ]
              },
              {
                "query": "open_resource",
                "class_names": [
                  "Scaffold"
                ],
                "code_snippet": "def open_resource(self, resource: str, mode: str = \"rb\") -> t.IO[t.AnyStr]:",
                "file_pattern": "src/flask/scaffold.py",
                "function_names": [
                  "open_resource"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 201,
                "span_id": "Scaffold.open_resource",
                "file_path": "src/flask/scaffold.py"
              }
            ],
            "search_requests": [
              {
                "query": "flask.Config.from_file()",
                "class_names": [
                  "Config"
                ],
                "code_snippet": "self.from_file(filename: str, load: t.Callable[[t.IO[t.Any]], t.Mapping], silent: bool = False)",
                "file_pattern": "src/flask/config.py",
                "function_names": [
                  "from_file"
                ]
              },
              {
                "query": "open_resource",
                "class_names": [
                  "Scaffold"
                ],
                "code_snippet": "def open_resource(self, resource: str, mode: str = \"rb\") -> t.IO[t.AnyStr]:",
                "file_pattern": "src/flask/scaffold.py",
                "function_names": [
                  "open_resource"
                ]
              }
            ]
          },
          "input_tokens": 3682,
          "output_tokens": 390,
          "retry_message": null,
          "completion_cost": 0.016896
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 201,
            "span_id": "Scaffold.open_resource",
            "file_path": "src/flask/scaffold.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is requesting an enhancement to the `flask.Config.from_file()` method to include a file mode parameter that would allow the file to be opened in binary mode as needed with Python 3.11's `tomllib` for TOML support. Given this requirement, the search results provided include a file `src/flask/scaffold.py` that contains several code spans describing methods of file handling potentially related to the issue. Specifically, the method `Scaffold.open_resource()`, and its capability to open resources with different modes (`\"r\"`, `\"rt\"`, `\"rb\"`) is directly relevant to allowing or altering file opening behavior, which could be extended or modified to achieve the desired enhancement. This method's validation and mode checking could inform how to adapt or extend `flask.Config.from_file()` to accept a mode parameter without breaking existing functionality.",
            "identified_spans": [
              {
                "span_ids": [
                  "Scaffold.open_resource"
                ],
                "file_path": "src/flask/scaffold.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3771,
          "output_tokens": 267,
          "retry_message": null,
          "completion_cost": 0.015318
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": false,
            "scratch_pad": "The file context provided does not directly include the `flask.Config.from_file()` method, which is central to the reported issue. To address the issue of adding a file mode parameter to `flask.Config.from_file()`, examining the `Config` class and its methods is crucial, particularly the `from_file()` method itself. Given the context of the issue and the provided file context, specific attention should be given to the referenced classes and methods mentioned in the issue to ensure completeness of the file context.",
            "search_suggestions": "Look for the `Config.from_file()` method in the `src/flask/config.py` file of the Flask source code, focusing on how it handles file modes and whether it can be altered to include a new parameter for specifying the file mode, such as 'b' for binary mode as required by `tomllib.load()`."
          },
          "output": {
            "message": "Look for the `Config.from_file()` method in the `src/flask/config.py` file of the Flask source code, focusing on how it handles file modes and whether it can be altered to include a new parameter for specifying the file mode, such as 'b' for binary mode as required by `tomllib.load()`."
          },
          "input_tokens": 3217,
          "output_tokens": 220,
          "retry_message": null,
          "completion_cost": 0.012951
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look for the `Config.from_file()` method in the `src/flask/config.py` file of the Flask source code, focusing on how it handles file modes and whether it can be altered to include a new parameter for specifying the file mode, such as 'b' for binary mode as required by `tomllib.load()`.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The `Config.from_file()` method in `src/flask/config.py` needs to be examined to determine how it currently handles file modes and whether it can be updated to include a new parameter for specifying the file mode, such as 'b' for binary mode. This modification is necessary to support the `tomllib.load()` function, which requires the file to be opened in binary mode. Given the context provided, it is clear that the method needs to be adjusted to accommodate different file modes, particularly for binary file handling. The initial search results have identified the `Config` class and its `from_file()` method, which will be the focus of further investigation to determine the feasibility of extending it to include the new functionality.",
            "search_requests": [
              {
                "query": "Config.from_file() file mode parameter",
                "class_names": [
                  "Config"
                ],
                "code_snippet": null,
                "file_pattern": "src/flask/config.py",
                "function_names": [
                  "from_file"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 252,
                "span_id": "Config.from_pyfile",
                "file_path": "src/flask/config.py"
              },
              {
                "rank": 1,
                "tokens": 365,
                "span_id": "Config",
                "file_path": "src/flask/config.py"
              },
              {
                "rank": 2,
                "tokens": 315,
                "span_id": "Config.from_file",
                "file_path": "src/flask/config.py"
              },
              {
                "rank": 3,
                "tokens": 194,
                "span_id": "Config.from_envvar",
                "file_path": "src/flask/config.py"
              },
              {
                "rank": 4,
                "tokens": 337,
                "span_id": "Config.from_object",
                "file_path": "src/flask/config.py"
              },
              {
                "rank": 6,
                "tokens": 121,
                "span_id": "Config.from_mapping",
                "file_path": "src/flask/config.py"
              },
              {
                "rank": 7,
                "tokens": 420,
                "span_id": "Config.from_prefixed_env",
                "file_path": "src/flask/config.py"
              },
              {
                "rank": 8,
                "tokens": 27,
                "span_id": "Config.__repr__",
                "file_path": "src/flask/config.py"
              },
              {
                "rank": 8,
                "tokens": 295,
                "span_id": "Config.get_namespace",
                "file_path": "src/flask/config.py"
              }
            ],
            "search_requests": [
              {
                "query": "Config.from_file() file mode parameter",
                "class_names": [
                  "Config"
                ],
                "code_snippet": null,
                "file_pattern": "src/flask/config.py",
                "function_names": [
                  "from_file"
                ]
              }
            ]
          },
          "input_tokens": 6106,
          "output_tokens": 258,
          "retry_message": null,
          "completion_cost": 0.022188
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 252,
            "span_id": "Config.from_pyfile",
            "file_path": "src/flask/config.py"
          },
          {
            "rank": 1,
            "tokens": 365,
            "span_id": "Config",
            "file_path": "src/flask/config.py"
          },
          {
            "rank": 2,
            "tokens": 315,
            "span_id": "Config.from_file",
            "file_path": "src/flask/config.py"
          },
          {
            "rank": 3,
            "tokens": 194,
            "span_id": "Config.from_envvar",
            "file_path": "src/flask/config.py"
          },
          {
            "rank": 4,
            "tokens": 337,
            "span_id": "Config.from_object",
            "file_path": "src/flask/config.py"
          },
          {
            "rank": 6,
            "tokens": 121,
            "span_id": "Config.from_mapping",
            "file_path": "src/flask/config.py"
          },
          {
            "rank": 7,
            "tokens": 420,
            "span_id": "Config.from_prefixed_env",
            "file_path": "src/flask/config.py"
          },
          {
            "rank": 8,
            "tokens": 27,
            "span_id": "Config.__repr__",
            "file_path": "src/flask/config.py"
          },
          {
            "rank": 8,
            "tokens": 295,
            "span_id": "Config.get_namespace",
            "file_path": "src/flask/config.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about enhancing `flask.Config.from_file()` to accept a file mode parameter to support binary mode for reading files, specifically for TOML files using `tomllib.load()`. The current implementation of `from_file()` in `src/flask/config.py` opens the file in text mode by default, which is causing a `TypeError` when `tomllib.load()` expects binary mode. The relevant code spans in the search results that pertain to the issue are those which define the `Config` class and its `from_file()` method. These spans include the class definition itself (`Config`), the method that needs modification (`Config.from_file`), and related methods (`Config.from_mapping` for how the configuration settings are added). Additionally, it's noted that modifying `from_file()` to accept an optional mode parameter aligns with the existing method `Scaffold.open_resource` in `src/flask/scaffold.py`, which already supports mode parameter with a default of 'rb'. This similarity suggests a consistent approach to handling file modes across the Flask framework.",
            "identified_spans": [
              {
                "span_ids": [
                  "Config",
                  "Config.from_file",
                  "Config.from_mapping"
                ],
                "file_path": "src/flask/config.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4722,
          "output_tokens": 321,
          "retry_message": null,
          "completion_cost": 0.018980999999999998
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The `Config.from_file()` method in `src/flask/config.py` currently opens the file in text mode by default. This does not support the binary mode needed for `tomllib.load()`. The file context confirms that the method needs to be updated to include a parameter for specifying the file mode, such as 'b' for binary mode. This modification aligns with the reported issue, which seeks a way to load TOML config files using `tomllib`. The relevant method and class are identified in the file context, indicating that the area for modification is clear and likely sufficient to implement the required functionality.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 3615,
          "output_tokens": 167,
          "retry_message": null,
          "completion_cost": 0.01335
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "Config.from_file",
            "file_path": "src/flask/config.py",
            "scratch_pad": "To address the issue of opening the file in binary mode, we need to modify the `from_file` method in the `Config` class to accept an optional `mode` parameter. This will allow users to specify the file mode when loading configuration files that require binary reading.",
            "instructions": "Update the `from_file` method in the `Config` class to include an optional `mode` parameter. Default this parameter to 'r' (text mode). If 'b' (binary mode) is specified, open the file in binary mode. Adjust the `open` function call within the method to use this mode parameter."
          },
          "output": {
            "span_id": "Config.from_file",
            "end_line": 273,
            "file_path": "src/flask/config.py",
            "start_line": 232,
            "instructions": "Update the `from_file` method in the `Config` class to include an optional `mode` parameter. Default this parameter to 'r' (text mode). If 'b' (binary mode) is specified, open the file in binary mode. Adjust the `open` function call within the method to use this mode parameter."
          },
          "input_tokens": 3971,
          "output_tokens": 198,
          "retry_message": null,
          "completion_cost": 0.014883
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "Config.from_file",
        "end_line": 273,
        "file_path": "src/flask/config.py",
        "max_tokens": 1000,
        "start_line": 232,
        "temperature": 1.6,
        "instructions": "Update the `from_file` method in the `Config` class to include an optional `mode` parameter. Default this parameter to 'r' (text mode). If 'b' (binary mode) is specified, open the file in binary mode. Adjust the `open` function call within the method to use this mode parameter.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```html\n<replace>\n    def from_file(\n        self,\n        filename: str,\n        load: t.Callable[[t.IO[t.Any]], t.Mapping],\n        mode: str = 'r',\n        silent: bool = False,\n    ) -> bool:\n        \"\"\"Update the values in the config from a file that is loaded\n        using the ``load`` parameter. The loaded data is passed to the\n        :meth:`from_mapping` method.\n\n        .. code-block:: python\n\n            import json\n            app.config.from_file(\"config.json\", load=json.load)\n\n            import toml\n            app.config.from_file(\"config.toml\", load=toml.load, mode=\"b\")\n\n        :param filename: The path to the data file. This can be an\n            absolute path or relative to the config root path.\n        :param load: A callable that takes a file handle and returns a\n            mapping of loaded data from the file.\n        :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n            implements a ``read`` method.\n        :param mode: The mode in which the file is opened. Default is 'r' (text mode). Use 'b' for binary mode.\n        :param silent: Ignore the file if it doesn't exist.\n        :return: ``True`` if the file was loaded successfully.\n\n        .. versionadded:: 2.0\n        \"\"\"\n        filename = os.path.join(self.root_path, filename)\n\n        try:\n            with open(filename, mode) as f:\n                obj = load(f)\n        except OSError as e:\n            if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n                return False\n\n            e.strerror = f\"Unable to load configuration file ({e.strerror})\"\n            raise\n\n        return self.from_mapping(obj)\n</replace>"
          },
          "output": {
            "diff": "--- src/flask/config.py\n+++ src/flask/config.py\n@@ -233,6 +233,7 @@\n         self,\n         filename: str,\n         load: t.Callable[[t.IO[t.Any]], t.Mapping],\n+        mode: str = 'r',\n         silent: bool = False,\n     ) -> bool:\n         \"\"\"Update the values in the config from a file that is loaded\n@@ -245,7 +246,7 @@\n             app.config.from_file(\"config.json\", load=json.load)\n \n             import toml\n-            app.config.from_file(\"config.toml\", load=toml.load)\n+            app.config.from_file(\"config.toml\", load=toml.load, mode=\"b\")\n \n         :param filename: The path to the data file. This can be an\n             absolute path or relative to the config root path.\n@@ -253,6 +254,7 @@\n             mapping of loaded data from the file.\n         :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n             implements a ``read`` method.\n+        :param mode: The mode in which the file is opened. Default is 'r' (text mode). Use 'b' for binary mode.\n         :param silent: Ignore the file if it doesn't exist.\n         :return: ``True`` if the file was loaded successfully.\n \n@@ -261,7 +263,7 @@\n         filename = os.path.join(self.root_path, filename)\n \n         try:\n-            with open(filename) as f:\n+            with open(filename, mode) as f:\n                 obj = load(f)\n         except OSError as e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n",
            "message": "Applied the change to src/flask/config.py.\n\n<scratch_pad>\n```html\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 7533,
          "output_tokens": 451,
          "retry_message": null,
          "completion_cost": 0.029364
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- src/flask/config.py\n+++ src/flask/config.py\n@@ -233,6 +233,7 @@\n         self,\n         filename: str,\n         load: t.Callable[[t.IO[t.Any]], t.Mapping],\n+        mode: str = 'r',\n         silent: bool = False,\n     ) -> bool:\n         \"\"\"Update the values in the config from a file that is loaded\n@@ -245,7 +246,7 @@\n             app.config.from_file(\"config.json\", load=json.load)\n \n             import toml\n-            app.config.from_file(\"config.toml\", load=toml.load)\n+            app.config.from_file(\"config.toml\", load=toml.load, mode=\"b\")\n \n         :param filename: The path to the data file. This can be an\n             absolute path or relative to the config root path.\n@@ -253,6 +254,7 @@\n             mapping of loaded data from the file.\n         :type load: ``Callable[[Reader], Mapping]`` where ``Reader``\n             implements a ``read`` method.\n+        :param mode: The mode in which the file is opened. Default is 'r' (text mode). Use 'b' for binary mode.\n         :param silent: Ignore the file if it doesn't exist.\n         :return: ``True`` if the file was loaded successfully.\n \n@@ -261,7 +263,7 @@\n         filename = os.path.join(self.root_path, filename)\n \n         try:\n-            with open(filename) as f:\n+            with open(filename, mode) as f:\n                 obj = load(f)\n         except OSError as e:\n             if silent and e.errno in (errno.ENOENT, errno.EISDIR):\n",
        "model": "deepseek-coder",
        "message": "Applied the change to src/flask/config.py.\n\n<scratch_pad>\n```html\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The necessary changes to the `Config.from_file` method have been successfully implemented, including the addition of a `mode` parameter that defaults to 'r' (text mode) and can be set to 'b' for binary mode. This aligns with the specifications for the issue and is consistent with the provided context.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The changes applied to `Config.from_file` method in `src/flask/config.py` seem to adequately address the issue. The method now includes an optional `mode` parameter, allowing the file to be opened in binary mode if needed. This is crucial for compatibility with libraries like `tomllib` that require binary mode.",
            "instructions": null
          },
          "output": {
            "message": "The necessary changes to the `Config.from_file` method have been successfully implemented, including the addition of a `mode` parameter that defaults to 'r' (text mode) and can be set to 'b' for binary mode. This aligns with the specifications for the issue and is consistent with the provided context."
          },
          "input_tokens": 4671,
          "output_tokens": 197,
          "retry_message": null,
          "completion_cost": 0.016968
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The necessary changes to the `Config.from_file` method have been successfully implemented, including the addition of a `mode` parameter that defaults to 'r' (text mode) and can be set to 'b' for binary mode. This aligns with the specifications for the issue and is consistent with the provided context.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Add a file mode parameter to flask.Config.from_file()\nPython 3.11 introduced native TOML support with the `tomllib` package. This could work nicely with the `flask.Config.from_file()` method as an easy way to load TOML config files:\r\n\r\n```python\r\napp.config.from_file(\"config.toml\", tomllib.load)\r\n```\r\n\r\nHowever, `tomllib.load()` takes an object readable in binary mode, while `flask.Config.from_file()` opens a file in text mode, resulting in this error:\r\n\r\n```\r\nTypeError: File must be opened in binary mode, e.g. use `open('foo.toml', 'rb')`\r\n```\r\n\r\nWe can get around this with a more verbose expression, like loading from a file opened with the built-in `open()` function and passing the `dict` to `app.Config.from_mapping()`:\r\n\r\n```python\r\n# We have to repeat the path joining that from_file() does\r\nwith open(os.path.join(app.config.root_path, \"config.toml\"), \"rb\") as file:\r\n    app.config.from_mapping(tomllib.load(file))\r\n```\r\n\r\nBut adding a file mode parameter to `flask.Config.from_file()` would enable the use of a simpler expression. E.g.:\r\n\r\n```python\r\napp.config.from_file(\"config.toml\", tomllib.load, mode=\"b\")\r\n```\r\n\n"
}