{
  "info": {
    "duration": 191.18270111083984,
    "submission": "diff --git a/sklearn/calibration.py b/sklearn/calibration.py\nindex 2c4a33616..d9ee49b2d 100644\n--- a/sklearn/calibration.py\n+++ b/sklearn/calibration.py\n@@ -760,7 +760,7 @@ class _CalibratedClassifier:\n                 # When binary, `predictions` consists only of predictions for\n                 # clf.classes_[1] but `pos_class_indices` = 0\n                 class_idx += 1\n-            proba[:, class_idx] = calibrator.predict(this_pred)\n+            proba[:, class_idx] = calibrator.predict(this_pred).to_numpy().reshape(-1)\n \n         # Normalize the probabilities\n         if n_classes == 2:\n",
    "total_cost": 0.125718,
    "instance_id": "scikit-learn__scikit-learn-25500",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves CalibratedClassifierCV not working when `set_config(transform_output=\"pandas\")` is set. The error occurs specifically in the `predict_proba` method of `_CalibratedClassifier` when handling the output of IsotonicRegression, which returns a DataFrame instead of a NumPy array. To resolve this, we need to locate the appropriate part of the codebase where the transformation or handling of the output from IsotonicRegression is managed within `_CalibratedClassifier` and `CalibratedClassifierCV`.",
            "search_requests": [
              {
                "query": "CalibratedClassifierCV with isotonic regression predict_proba handling dataframe output",
                "class_names": [
                  "CalibratedClassifierCV",
                  "_CalibratedClassifier"
                ],
                "code_snippet": null,
                "file_pattern": null,
                "function_names": [
                  "predict_proba"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 2041,
                "span_id": "CalibratedClassifierCV",
                "file_path": "sklearn/calibration.py"
              },
              {
                "rank": 1,
                "tokens": 166,
                "span_id": "CalibratedClassifierCV.predict_proba",
                "file_path": "sklearn/calibration.py"
              },
              {
                "rank": 2,
                "tokens": 407,
                "span_id": "_CalibratedClassifier.predict_proba",
                "file_path": "sklearn/calibration.py"
              },
              {
                "rank": 4,
                "tokens": 70,
                "span_id": "CalibratedClassifierCV.__init__",
                "file_path": "sklearn/calibration.py"
              },
              {
                "rank": 4,
                "tokens": 1186,
                "span_id": "CalibratedClassifierCV.fit",
                "file_path": "sklearn/calibration.py"
              },
              {
                "rank": 4,
                "tokens": 117,
                "span_id": "CalibratedClassifierCV.predict",
                "file_path": "sklearn/calibration.py"
              },
              {
                "rank": 4,
                "tokens": 74,
                "span_id": "CalibratedClassifierCV._more_tags",
                "file_path": "sklearn/calibration.py"
              },
              {
                "rank": 5,
                "tokens": 181,
                "span_id": "_CalibratedClassifier",
                "file_path": "sklearn/calibration.py"
              },
              {
                "rank": 7,
                "tokens": 103,
                "span_id": "NaivelyCalibratedLinearSVC.predict_proba",
                "file_path": "examples/calibration/plot_calibration_curve.py"
              },
              {
                "rank": 8,
                "tokens": 102,
                "span_id": "NaivelyCalibratedLinearSVC.predict_proba",
                "file_path": "examples/calibration/plot_compare_calibration.py"
              },
              {
                "rank": 17,
                "tokens": 163,
                "span_id": "BaseSearchCV.predict_proba",
                "file_path": "sklearn/model_selection/_search.py"
              },
              {
                "rank": 38,
                "tokens": 357,
                "span_id": "LogisticRegression.predict_proba",
                "file_path": "sklearn/linear_model/_logistic.py"
              },
              {
                "rank": 20,
                "tokens": 219,
                "span_id": "MultiOutputClassifier.predict_proba",
                "file_path": "sklearn/multioutput.py"
              },
              {
                "rank": 23,
                "tokens": 251,
                "span_id": "ClassifierChain.predict_proba",
                "file_path": "sklearn/multioutput.py"
              },
              {
                "rank": 34,
                "tokens": 277,
                "span_id": "BaseSVC.predict_proba",
                "file_path": "sklearn/svm/_base.py"
              },
              {
                "rank": 24,
                "tokens": 235,
                "span_id": "GaussianProcessClassifier.predict_proba",
                "file_path": "sklearn/gaussian_process/_gpc.py"
              },
              {
                "rank": 25,
                "tokens": 123,
                "span_id": "LinearDiscriminantAnalysis.predict_proba",
                "file_path": "sklearn/discriminant_analysis.py"
              },
              {
                "rank": 29,
                "tokens": 590,
                "span_id": "SGDClassifier.predict_proba",
                "file_path": "sklearn/linear_model/_stochastic_gradient.py"
              },
              {
                "rank": 30,
                "tokens": 126,
                "span_id": "SelfTrainingClassifier.predict_proba",
                "file_path": "sklearn/semi_supervised/_self_training.py"
              },
              {
                "rank": 31,
                "tokens": 153,
                "span_id": "RFE.predict_proba",
                "file_path": "sklearn/feature_selection/_rfe.py"
              },
              {
                "rank": 39,
                "tokens": 362,
                "span_id": "DecisionTreeClassifier.predict_proba",
                "file_path": "sklearn/tree/_classes.py"
              },
              {
                "rank": 40,
                "tokens": 184,
                "span_id": "StackingClassifier.predict_proba",
                "file_path": "sklearn/ensemble/_stacking.py"
              },
              {
                "rank": 41,
                "tokens": 85,
                "span_id": "_ConstantPredictor.predict_proba",
                "file_path": "sklearn/multiclass.py"
              },
              {
                "rank": 42,
                "tokens": 148,
                "span_id": "MLPClassifier.predict_proba",
                "file_path": "sklearn/neural_network/_multilayer_perceptron.py"
              },
              {
                "rank": 43,
                "tokens": 431,
                "span_id": "DummyClassifier.predict_proba",
                "file_path": "sklearn/dummy.py"
              },
              {
                "rank": 44,
                "tokens": 208,
                "span_id": "AdaBoostClassifier.predict_proba",
                "file_path": "sklearn/ensemble/_weight_boosting.py"
              }
            ],
            "search_requests": [
              {
                "query": "CalibratedClassifierCV with isotonic regression predict_proba handling dataframe output",
                "class_names": [
                  "CalibratedClassifierCV",
                  "_CalibratedClassifier"
                ],
                "code_snippet": null,
                "file_pattern": null,
                "function_names": [
                  "predict_proba"
                ]
              }
            ]
          },
          "input_tokens": 5390,
          "output_tokens": 237,
          "retry_message": null,
          "completion_cost": 0.019725
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 2041,
            "span_id": "CalibratedClassifierCV",
            "file_path": "sklearn/calibration.py"
          },
          {
            "rank": 1,
            "tokens": 166,
            "span_id": "CalibratedClassifierCV.predict_proba",
            "file_path": "sklearn/calibration.py"
          },
          {
            "rank": 2,
            "tokens": 407,
            "span_id": "_CalibratedClassifier.predict_proba",
            "file_path": "sklearn/calibration.py"
          },
          {
            "rank": 4,
            "tokens": 70,
            "span_id": "CalibratedClassifierCV.__init__",
            "file_path": "sklearn/calibration.py"
          },
          {
            "rank": 4,
            "tokens": 1186,
            "span_id": "CalibratedClassifierCV.fit",
            "file_path": "sklearn/calibration.py"
          },
          {
            "rank": 4,
            "tokens": 117,
            "span_id": "CalibratedClassifierCV.predict",
            "file_path": "sklearn/calibration.py"
          },
          {
            "rank": 4,
            "tokens": 74,
            "span_id": "CalibratedClassifierCV._more_tags",
            "file_path": "sklearn/calibration.py"
          },
          {
            "rank": 5,
            "tokens": 181,
            "span_id": "_CalibratedClassifier",
            "file_path": "sklearn/calibration.py"
          },
          {
            "rank": 7,
            "tokens": 103,
            "span_id": "NaivelyCalibratedLinearSVC.predict_proba",
            "file_path": "examples/calibration/plot_calibration_curve.py"
          },
          {
            "rank": 8,
            "tokens": 102,
            "span_id": "NaivelyCalibratedLinearSVC.predict_proba",
            "file_path": "examples/calibration/plot_compare_calibration.py"
          },
          {
            "rank": 17,
            "tokens": 163,
            "span_id": "BaseSearchCV.predict_proba",
            "file_path": "sklearn/model_selection/_search.py"
          },
          {
            "rank": 20,
            "tokens": 219,
            "span_id": "MultiOutputClassifier.predict_proba",
            "file_path": "sklearn/multioutput.py"
          },
          {
            "rank": 23,
            "tokens": 251,
            "span_id": "ClassifierChain.predict_proba",
            "file_path": "sklearn/multioutput.py"
          },
          {
            "rank": 24,
            "tokens": 235,
            "span_id": "GaussianProcessClassifier.predict_proba",
            "file_path": "sklearn/gaussian_process/_gpc.py"
          },
          {
            "rank": 25,
            "tokens": 123,
            "span_id": "LinearDiscriminantAnalysis.predict_proba",
            "file_path": "sklearn/discriminant_analysis.py"
          },
          {
            "rank": 29,
            "tokens": 590,
            "span_id": "SGDClassifier.predict_proba",
            "file_path": "sklearn/linear_model/_stochastic_gradient.py"
          },
          {
            "rank": 30,
            "tokens": 126,
            "span_id": "SelfTrainingClassifier.predict_proba",
            "file_path": "sklearn/semi_supervised/_self_training.py"
          },
          {
            "rank": 31,
            "tokens": 153,
            "span_id": "RFE.predict_proba",
            "file_path": "sklearn/feature_selection/_rfe.py"
          },
          {
            "rank": 34,
            "tokens": 277,
            "span_id": "BaseSVC.predict_proba",
            "file_path": "sklearn/svm/_base.py"
          },
          {
            "rank": 38,
            "tokens": 357,
            "span_id": "LogisticRegression.predict_proba",
            "file_path": "sklearn/linear_model/_logistic.py"
          },
          {
            "rank": 39,
            "tokens": 362,
            "span_id": "DecisionTreeClassifier.predict_proba",
            "file_path": "sklearn/tree/_classes.py"
          },
          {
            "rank": 40,
            "tokens": 184,
            "span_id": "StackingClassifier.predict_proba",
            "file_path": "sklearn/ensemble/_stacking.py"
          },
          {
            "rank": 41,
            "tokens": 85,
            "span_id": "_ConstantPredictor.predict_proba",
            "file_path": "sklearn/multiclass.py"
          },
          {
            "rank": 42,
            "tokens": 148,
            "span_id": "MLPClassifier.predict_proba",
            "file_path": "sklearn/neural_network/_multilayer_perceptron.py"
          },
          {
            "rank": 43,
            "tokens": 431,
            "span_id": "DummyClassifier.predict_proba",
            "file_path": "sklearn/dummy.py"
          },
          {
            "rank": 44,
            "tokens": 208,
            "span_id": "AdaBoostClassifier.predict_proba",
            "file_path": "sklearn/ensemble/_weight_boosting.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves CalibratedClassifierCV with isotonic regression not working when `set_config(transform_output=\"pandas\")` is set. The problem occurs in the `predict_proba` method of `_CalibratedClassifier` where a DataFrame is returned by `IsotonicRegression`, causing an error when attempting to broadcast the DataFrame into a numpy array row. To address this issue, we need to identify the relevant code spans that handle the `predict_proba` method for CalibratedClassifierCV and its internal _CalibratedClassifier class. We should also look for any code spans that might deal with the transformation settings affecting the output type. Given the reported error and the code examples provided, the focus should be on the `predict_proba` method of both `CalibratedClassifierCV` and `_CalibratedClassifier`, as well as any related methods in the `sklearn.calibration` module. Additionally, we should check if there are any configurations or settings in the `set_config` function that might affect the output type of estimators like IsotonicRegression.",
            "identified_spans": [
              {
                "span_ids": [
                  "CalibratedClassifierCV.predict_proba",
                  "_CalibratedClassifier.predict_proba"
                ],
                "file_path": "sklearn/calibration.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 8716,
          "output_tokens": 324,
          "retry_message": null,
          "completion_cost": 0.031008
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context provided includes the `CalibratedClassifierCV` class and the `_CalibratedClassifier` class, both of which are relevant to the issue. The `predict_proba` method in `_CalibratedClassifier` specifically handles the prediction probabilities and is where the error described in the issue might occur. It is also where the output of the IsotonicRegression (stored in `calibrator.predict(this_pred)`) is integrated into the `proba` array. This part of the code is directly implicated in the reported bug, suggesting that the relevant part of the file context has been identified.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 3678,
          "output_tokens": 171,
          "retry_message": null,
          "completion_cost": 0.013599
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "_CalibratedClassifier.predict_proba",
            "file_path": "sklearn/calibration.py",
            "scratch_pad": "The issue is caused by the `IsotonicRegression` returning a DataFrame when `set_config(transform_output=\"pandas\")` is set. This causes a problem in `_CalibratedClassifier.predict_proba` where it tries to broadcast the DataFrame into a numpy array. The solution is to ensure that the output from `calibrator.predict` is converted to a numpy array before being assigned to `proba[:, class_idx]`.",
            "instructions": "Convert the output of `calibrator.predict(this_pred)` to a numpy array before assigning it to `proba[:, class_idx]`."
          },
          "output": {
            "span_id": "_CalibratedClassifier.predict_proba",
            "end_line": 781,
            "file_path": "sklearn/calibration.py",
            "start_line": 732,
            "instructions": "Convert the output of `calibrator.predict(this_pred)` to a numpy array before assigning it to `proba[:, class_idx]`."
          },
          "input_tokens": 4144,
          "output_tokens": 194,
          "retry_message": null,
          "completion_cost": 0.015342000000000001
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "_CalibratedClassifier.predict_proba",
        "end_line": 781,
        "file_path": "sklearn/calibration.py",
        "max_tokens": 1000,
        "start_line": 732,
        "temperature": 1.6,
        "instructions": "Convert the output of `calibrator.predict(this_pred)` to a numpy array before assigning it to `proba[:, class_idx]`.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\n    def predict_proba(self, X):\n        \"\"\"Calculate calibrated probabilities.\n\n        Calculates classification calibrated probabilities\n        for each class, in a one-vs-all manner, for `X`.\n\n        Parameters\n        ----------\n        X : ndarray of shape (n_samples, n_features)\n            The sample data.\n\n        Returns\n        -------\n        proba : array, shape (n_samples, n_classes)\n            The predicted probabilities. Can be exact zeros.\n        \"\"\"\n        n_classes = len(self.classes)\n        pred_method, method_name = _get_prediction_method(self.estimator)\n        predictions = _compute_predictions(pred_method, method_name, X, n_classes)\n\n        label_encoder = LabelEncoder().fit(self.classes)\n        pos_class_indices = label_encoder.transform(self.estimator.classes_)\n\n        proba = np.zeros((_num_samples(X), n_classes))\n        for class_idx, this_pred, calibrator in zip(\n            pos_class_indices, predictions.T, self.calibrators\n        ):\n            if n_classes == 2:\n                # When binary, `predictions` consists only of predictions for\n                # clf.classes_[1] but `pos_class_indices` = 0\n                class_idx += 1\n            proba[:, class_idx] = calibrator.predict(this_pred).to_numpy().reshape(-1)\n\n        # Normalize the probabilities\n        if n_classes == 2:\n            proba[:, 0] = 1.0 - proba[:, 1]\n        else:\n            denominator = np.sum(proba, axis=1)[:, np.newaxis]\n            # In the edge case where for each class calibrator returns a null\n            # probability for a given sample, use the uniform distribution\n            # instead.\n            uniform_proba = np.full_like(proba, 1 / n_classes)\n            proba = np.divide(\n                proba, denominator, out=uniform_proba, where=denominator != 0\n            )\n\n        # Deal with cases where the predicted probability minimally exceeds 1.0\n        proba[(1.0 < proba) & (proba <= 1.0 + 1e-5)] = 1.0\n\n        return proba\n</replace>"
          },
          "output": {
            "diff": "--- sklearn/calibration.py\n+++ sklearn/calibration.py\n@@ -760,7 +760,7 @@\n                 # When binary, `predictions` consists only of predictions for\n                 # clf.classes_[1] but `pos_class_indices` = 0\n                 class_idx += 1\n-            proba[:, class_idx] = calibrator.predict(this_pred)\n+            proba[:, class_idx] = calibrator.predict(this_pred).to_numpy().reshape(-1)\n \n         # Normalize the probabilities\n         if n_classes == 2:\n",
            "message": "Applied the change to sklearn/calibration.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 7248,
          "output_tokens": 563,
          "retry_message": null,
          "completion_cost": 0.030189
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sklearn/calibration.py\n+++ sklearn/calibration.py\n@@ -760,7 +760,7 @@\n                 # When binary, `predictions` consists only of predictions for\n                 # clf.classes_[1] but `pos_class_indices` = 0\n                 class_idx += 1\n-            proba[:, class_idx] = calibrator.predict(this_pred)\n+            proba[:, class_idx] = calibrator.predict(this_pred).to_numpy().reshape(-1)\n \n         # Normalize the probabilities\n         if n_classes == 2:\n",
        "model": "deepseek-coder",
        "message": "Applied the change to sklearn/calibration.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The change has been applied correctly. The output from `calibrator.predict(this_pred)` is now converted to a numpy array before being assigned, which resolves the broadcasting error.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The change applied correctly converts the output of `calibrator.predict(this_pred)` to a numpy array before assigning it to `proba[:, class_idx]`. This should resolve the issue where a DataFrame was causing a broadcasting error.",
            "instructions": null
          },
          "output": {
            "message": "The change has been applied correctly. The output from `calibrator.predict(this_pred)` is now converted to a numpy array before being assigned, which resolves the broadcasting error."
          },
          "input_tokens": 4545,
          "output_tokens": 148,
          "retry_message": null,
          "completion_cost": 0.015855
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The change has been applied correctly. The output from `calibrator.predict(this_pred)` is now converted to a numpy array before being assigned, which resolves the broadcasting error.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "CalibratedClassifierCV doesn't work with `set_config(transform_output=\"pandas\")`\n### Describe the bug\r\n\r\nCalibratedClassifierCV with isotonic regression doesn't work when we previously set `set_config(transform_output=\"pandas\")`.\r\nThe IsotonicRegression seems to return a dataframe, which is a problem for `_CalibratedClassifier`  in `predict_proba` where it tries to put the dataframe in a numpy array row `proba[:, class_idx] = calibrator.predict(this_pred)`.\r\n\r\n### Steps/Code to Reproduce\r\n\r\n```python\r\nimport numpy as np\r\nfrom sklearn import set_config\r\nfrom sklearn.calibration import CalibratedClassifierCV\r\nfrom sklearn.linear_model import SGDClassifier\r\n\r\nset_config(transform_output=\"pandas\")\r\nmodel = CalibratedClassifierCV(SGDClassifier(), method='isotonic')\r\nmodel.fit(np.arange(90).reshape(30, -1), np.arange(30) % 2)\r\nmodel.predict(np.arange(90).reshape(30, -1))\r\n```\r\n\r\n### Expected Results\r\n\r\nIt should not crash.\r\n\r\n### Actual Results\r\n\r\n```\r\n../core/model_trainer.py:306: in train_model\r\n    cv_predictions = cross_val_predict(pipeline,\r\n../../../../.anaconda3/envs/strategy-training/lib/python3.9/site-packages/sklearn/model_selection/_validation.py:968: in cross_val_predict\r\n    predictions = parallel(\r\n../../../../.anaconda3/envs/strategy-training/lib/python3.9/site-packages/joblib/parallel.py:1085: in __call__\r\n    if self.dispatch_one_batch(iterator):\r\n../../../../.anaconda3/envs/strategy-training/lib/python3.9/site-packages/joblib/parallel.py:901: in dispatch_one_batch\r\n    self._dispatch(tasks)\r\n../../../../.anaconda3/envs/strategy-training/lib/python3.9/site-packages/joblib/parallel.py:819: in _dispatch\r\n    job = self._backend.apply_async(batch, callback=cb)\r\n../../../../.anaconda3/envs/strategy-training/lib/python3.9/site-packages/joblib/_parallel_backends.py:208: in apply_async\r\n    result = ImmediateResult(func)\r\n../../../../.anaconda3/envs/strategy-training/lib/python3.9/site-packages/joblib/_parallel_backends.py:597: in __init__\r\n    self.results = batch()\r\n../../../../.anaconda3/envs/strategy-training/lib/python3.9/site-packages/joblib/parallel.py:288: in __call__\r\n    return [func(*args, **kwargs)\r\n../../../../.anaconda3/envs/strategy-training/lib/python3.9/site-packages/joblib/parallel.py:288: in <listcomp>\r\n    return [func(*args, **kwargs)\r\n../../../../.anaconda3/envs/strategy-training/lib/python3.9/site-packages/sklearn/utils/fixes.py:117: in __call__\r\n    return self.function(*args, **kwargs)\r\n../../../../.anaconda3/envs/strategy-training/lib/python3.9/site-packages/sklearn/model_selection/_validation.py:1052: in _fit_and_predict\r\n    predictions = func(X_test)\r\n../../../../.anaconda3/envs/strategy-training/lib/python3.9/site-packages/sklearn/pipeline.py:548: in predict_proba\r\n    return self.steps[-1][1].predict_proba(Xt, **predict_proba_params)\r\n../../../../.anaconda3/envs/strategy-training/lib/python3.9/site-packages/sklearn/calibration.py:477: in predict_proba\r\n    proba = calibrated_classifier.predict_proba(X)\r\n../../../../.anaconda3/envs/strategy-training/lib/python3.9/site-packages/sklearn/calibration.py:764: in predict_proba\r\n    proba[:, class_idx] = calibrator.predict(this_pred)\r\nE   ValueError: could not broadcast input array from shape (20,1) into shape (20,)\r\n```\r\n\r\n### Versions\r\n\r\n```shell\r\nSystem:\r\n    python: 3.9.15 (main, Nov 24 2022, 14:31:59)  [GCC 11.2.0]\r\nexecutable: /home/philippe/.anaconda3/envs/strategy-training/bin/python\r\n   machine: Linux-5.15.0-57-generic-x86_64-with-glibc2.31\r\n\r\nPython dependencies:\r\n      sklearn: 1.2.0\r\n          pip: 22.2.2\r\n   setuptools: 62.3.2\r\n        numpy: 1.23.5\r\n        scipy: 1.9.3\r\n       Cython: None\r\n       pandas: 1.4.1\r\n   matplotlib: 3.6.3\r\n       joblib: 1.2.0\r\nthreadpoolctl: 3.1.0\r\n\r\nBuilt with OpenMP: True\r\n\r\nthreadpoolctl info:\r\n       user_api: openmp\r\n   internal_api: openmp\r\n         prefix: libgomp\r\n       filepath: /home/philippe/.anaconda3/envs/strategy-training/lib/python3.9/site-packages/scikit_learn.libs/libgomp-a34b3233.so.1.0.0\r\n        version: None\r\n    num_threads: 12\r\n\r\n       user_api: blas\r\n   internal_api: openblas\r\n         prefix: libopenblas\r\n       filepath: /home/philippe/.anaconda3/envs/strategy-training/lib/python3.9/site-packages/numpy.libs/libopenblas64_p-r0-742d56dc.3.20.so\r\n        version: 0.3.20\r\nthreading_layer: pthreads\r\n   architecture: Haswell\r\n    num_threads: 12\r\n\r\n       user_api: blas\r\n   internal_api: openblas\r\n         prefix: libopenblas\r\n       filepath: /home/philippe/.anaconda3/envs/strategy-training/lib/python3.9/site-packages/scipy.libs/libopenblasp-r0-41284840.3.18.so\r\n        version: 0.3.18\r\nthreading_layer: pthreads\r\n   architecture: Haswell\r\n    num_threads: 12\r\n```\r\n\n"
}