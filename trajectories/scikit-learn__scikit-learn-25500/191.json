{
  "info": {
    "duration": 224.22173404693604,
    "submission": "diff --git a/sklearn/calibration.py b/sklearn/calibration.py\nindex 2c4a33616..dfaa30617 100644\n--- a/sklearn/calibration.py\n+++ b/sklearn/calibration.py\n@@ -760,7 +760,10 @@ class _CalibratedClassifier:\n                 # When binary, `predictions` consists only of predictions for\n                 # clf.classes_[1] but `pos_class_indices` = 0\n                 class_idx += 1\n-            proba[:, class_idx] = calibrator.predict(this_pred)\n+            pred_proba = calibrator.predict(this_pred)\n+            if isinstance(pred_proba, pd.DataFrame):\n+                pred_proba = pred_proba.values.flatten()\n+            proba[:, class_idx] = pred_proba\n \n         # Normalize the probabilities\n         if n_classes == 2:\n",
    "total_cost": 0.150678,
    "instance_id": "scikit-learn__scikit-learn-25500",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue pertains to the CalibratedClassifierCV with isotonic regression not functioning correctly when `set_config(transform_output=\"pandas\")` is used. The primary problem is that IsotonicRegression returns a DataFrame, causing a type mismatch in `_CalibratedClassifier` during the `predict_proba` method. The focus should be on the `calibration.py` file where `CalibratedClassifierCV` is defined, especially the `predict_proba` method in the `_CalibratedClassifier` class.",
            "search_requests": [
              {
                "query": "CalibratedClassifierCV isotonic regression DataFrame predict_proba",
                "class_names": [],
                "code_snippet": "proba[:, class_idx] = calibrator.predict(this_pred)",
                "file_pattern": "sklearn/calibration.py",
                "function_names": [
                  "predict_proba"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 407,
                "span_id": "_CalibratedClassifier.predict_proba",
                "file_path": "sklearn/calibration.py"
              }
            ],
            "search_requests": [
              {
                "query": "CalibratedClassifierCV isotonic regression DataFrame predict_proba",
                "class_names": [],
                "code_snippet": "proba[:, class_idx] = calibrator.predict(this_pred)",
                "file_pattern": "sklearn/calibration.py",
                "function_names": [
                  "predict_proba"
                ]
              }
            ]
          },
          "input_tokens": 5390,
          "output_tokens": 238,
          "retry_message": null,
          "completion_cost": 0.01974
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 407,
            "span_id": "_CalibratedClassifier.predict_proba",
            "file_path": "sklearn/calibration.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves the incompatibility of the `CalibratedClassifierCV` with `set_config(transform_output=\"pandas\")` when using isotonic regression. Specifically, the failure occurs in the `predict_proba` method of `_CalibratedClassifier` where a DataFrame is returned by the IsotonicRegression and subsequently cast into a numpy array, resulting in a ValueError. To address the issue, we need to focus on the `predict_proba` method in `_CalibratedClassifier` and ensure that the method properly handles DataFrame outputs by the calibrator. The code spans identified from the search results include the `predict_proba` method where the transformation issue originates, providing a clear starting point for fixing the problem. This method could be adjusted to check the type of the prediction and handle it accordingly. Additionally, further investigation into the exact line of the error and whether there are more potential areas in the codebase that are affected by this pandas DataFrame output would be necessary, but for the current task, the identified code span is the most pertinent. Thus, the search task can be considered complete for now, based on the identified span that directly relates to the reported bug.",
            "identified_spans": [
              {
                "span_ids": [
                  "_CalibratedClassifier.predict_proba"
                ],
                "file_path": "sklearn/calibration.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3340,
          "output_tokens": 324,
          "retry_message": null,
          "completion_cost": 0.014879999999999999
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The analysis of the issue reveals that the problem lies in the `predict_proba` method of the `_CalibratedClassifier` class within the `calibration.py` file. The reported issue states that when `set_config(transform_output=\"pandas\")` is used, the `IsotonicRegression` returns a DataFrame instead of a NumPy array, causing a type mismatch. This is exactly what causes the error in the provided code snippet.\n\nThe file context includes the `predict_proba` method of the `_CalibratedClassifier` class, confirming that the error occurs when trying to place the DataFrame from `calibrator.predict(this_pred)` into the NumPy array `proba[:, class_idx]`. The focus on this specific part of the code and the error message provided in the issue implies that the relevant code in the file context directly relates to the reported issue.\n\nGiven these observations, I conclude that the file context is relevant and complete for addressing the reported issue.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 3245,
          "output_tokens": 255,
          "retry_message": null,
          "completion_cost": 0.013560000000000001
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "_CalibratedClassifier.predict_proba",
            "file_path": "sklearn/calibration.py",
            "scratch_pad": "The issue arises because the `IsotonicRegression` calibrator returns a DataFrame when `set_config(transform_output=\"pandas\")` is set, which causes a mismatch in dimensions when attempting to assign these predictions to a numpy array. To resolve this, we need to ensure that the predictions are converted to a numpy array before they are used.",
            "instructions": "Update the `predict_proba` method in `_CalibratedClassifier` to convert the output of `calibrator.predict(this_pred)` to a numpy array if it is not already."
          },
          "output": {
            "span_id": "_CalibratedClassifier.predict_proba",
            "end_line": 781,
            "file_path": "sklearn/calibration.py",
            "start_line": 732,
            "instructions": "Update the `predict_proba` method in `_CalibratedClassifier` to convert the output of `calibrator.predict(this_pred)` to a numpy array if it is not already."
          },
          "input_tokens": 5534,
          "output_tokens": 180,
          "retry_message": null,
          "completion_cost": 0.019302
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "_CalibratedClassifier.predict_proba",
        "end_line": 781,
        "file_path": "sklearn/calibration.py",
        "max_tokens": 1000,
        "start_line": 732,
        "temperature": 1.6,
        "instructions": "Update the `predict_proba` method in `_CalibratedClassifier` to convert the output of `calibrator.predict(this_pred)` to a numpy array if it is not already.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n    def predict_proba(self, X):\n        \"\"\"Calculate calibrated probabilities.\n\n        Calculates classification calibrated probabilities\n        for each class, in a one-vs-all manner, for `X`.\n\n        Parameters\n        ----------\n        X : ndarray of shape (n_samples, n_features)\n            The sample data.\n\n        Returns\n        -------\n        proba : array, shape (n_samples, n_classes)\n            The predicted probabilities. Can be exact zeros.\n        \"\"\"\n        n_classes = len(self.classes)\n        pred_method, method_name = _get_prediction_method(self.estimator)\n        predictions = _compute_predictions(pred_method, method_name, X, n_classes)\n\n        label_encoder = LabelEncoder().fit(self.classes)\n        pos_class_indices = label_encoder.transform(self.estimator.classes_)\n\n        proba = np.zeros((_num_samples(X), n_classes))\n        for class_idx, this_pred, calibrator in zip(\n            pos_class_indices, predictions.T, self.calibrators\n        ):\n            if n_classes == 2:\n                # When binary, `predictions` consists only of predictions for\n                # clf.classes_[1] but `pos_class_indices` = 0\n                class_idx += 1\n            pred_proba = calibrator.predict(this_pred)\n            if isinstance(pred_proba, pd.DataFrame):\n                pred_proba = pred_proba.values.flatten()\n            proba[:, class_idx] = pred_proba\n\n        # Normalize the probabilities\n        if n_classes == 2:\n            proba[:, 0] = 1.0 - proba[:, 1]\n        else:\n            denominator = np.sum(proba, axis=1)[:, np.newaxis]\n            # In the edge case where for each class calibrator returns a null\n            # probability for a given sample, use the uniform distribution\n            # instead.\n            uniform_proba = np.full_like(proba, 1 / n_classes)\n            proba = np.divide(\n                proba, denominator, out=uniform_proba, where=denominator != 0\n            )\n\n        # Deal with cases where the predicted probability minimally exceeds 1.0\n        proba[(1.0 < proba) & (proba <= 1.0 + 1e-5)] = 1.0\n\n        return proba\n</replace>"
          },
          "output": {
            "diff": "--- sklearn/calibration.py\n+++ sklearn/calibration.py\n@@ -760,7 +760,10 @@\n                 # When binary, `predictions` consists only of predictions for\n                 # clf.classes_[1] but `pos_class_indices` = 0\n                 class_idx += 1\n-            proba[:, class_idx] = calibrator.predict(this_pred)\n+            pred_proba = calibrator.predict(this_pred)\n+            if isinstance(pred_proba, pd.DataFrame):\n+                pred_proba = pred_proba.values.flatten()\n+            proba[:, class_idx] = pred_proba\n \n         # Normalize the probabilities\n         if n_classes == 2:\n",
            "message": "Applied the change to sklearn/calibration.py.",
            "verification_errors": [
              {
                "code": "E0602",
                "line": 764,
                "message": "Undefined variable 'pd'",
                "file_path": "sklearn/calibration.py"
              }
            ]
          },
          "input_tokens": 6841,
          "output_tokens": 593,
          "retry_message": null,
          "completion_cost": 0.029418
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sklearn/calibration.py\n+++ sklearn/calibration.py\n@@ -760,7 +760,10 @@\n                 # When binary, `predictions` consists only of predictions for\n                 # clf.classes_[1] but `pos_class_indices` = 0\n                 class_idx += 1\n-            proba[:, class_idx] = calibrator.predict(this_pred)\n+            pred_proba = calibrator.predict(this_pred)\n+            if isinstance(pred_proba, pd.DataFrame):\n+                pred_proba = pred_proba.values.flatten()\n+            proba[:, class_idx] = pred_proba\n \n         # Normalize the probabilities\n         if n_classes == 2:\n",
        "model": "deepseek-coder",
        "message": "Applied the change to sklearn/calibration.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [
          {
            "code": "E0602",
            "line": 764,
            "message": "Undefined variable 'pd'",
            "file_path": "sklearn/calibration.py"
          }
        ],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "file_start",
            "file_path": "sklearn/calibration.py",
            "scratch_pad": "The lint error indicates that the variable 'pd' is undefined. This is because the pandas library is not imported in the file. To resolve this, we need to import pandas at the beginning of the file.",
            "instructions": "Import the pandas library at the beginning of the file to resolve the undefined variable 'pd' error."
          },
          "output": null,
          "input_tokens": 6020,
          "output_tokens": 132,
          "retry_message": "Span not found: file_start. Available spans: _CalibratedClassifier.predict_proba, _CalibratedClassifier, _compute_predictions, _CalibratedClassifier.__init__, _fit_calibrator, CalibratedClassifierCV.fit, _fit_classifier_calibrator_pair",
          "completion_cost": 0.02004
        },
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "CalibratedClassifierCV",
            "file_path": "sklearn/calibration.py",
            "scratch_pad": "Since there is no specific span named 'file_start', we need to place the import statement at a logical starting point in the file. Given the structure of the file, placing the pandas import at the beginning of the file, but within the context of the existing code, will ensure it is available for use throughout the module.",
            "instructions": "Import the pandas library at the top of the file, before the definition of any classes or functions."
          },
          "output": {
            "span_id": "CalibratedClassifierCV",
            "file_path": "sklearn/calibration.py",
            "instructions": "Import the pandas library at the top of the file, before the definition of any classes or functions."
          },
          "input_tokens": 6228,
          "output_tokens": 159,
          "retry_message": null,
          "completion_cost": 0.021068999999999997
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "CalibratedClassifierCV",
        "end_line": null,
        "file_path": "sklearn/calibration.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Import the pandas library at the top of the file, before the definition of any classes or functions.\n\nThe current code does not include an import statement for the pandas library. Adding this should ideally be done at the top of the file, right after any existing import statements. However, since there are no explicit import statements before line 54, where the class definition starts, the import statement should be placed right at the beginning of the file.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 1,
            "start_line": 1,
            "scratch_pad": "The current code does not include an import statement for the pandas library. Adding this should ideally be done at the top of the file, right after any existing import statements. However, since there are no explicit import statements before line 54, where the class definition starts, the import statement should be placed right at the beginning of the file."
          },
          "output": {
            "span_id": "CalibratedClassifierCV",
            "end_line": 5,
            "file_path": "sklearn/calibration.py",
            "start_line": 1,
            "instructions": "Import the pandas library at the top of the file, before the definition of any classes or functions.\n\nThe current code does not include an import statement for the pandas library. Adding this should ideally be done at the top of the file, right after any existing import statements. However, since there are no explicit import statements before line 54, where the class definition starts, the import statement should be placed right at the beginning of the file."
          },
          "input_tokens": 3703,
          "output_tokens": 104,
          "retry_message": null,
          "completion_cost": 0.012669000000000001
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "CalibratedClassifierCV",
        "end_line": 5,
        "file_path": "sklearn/calibration.py",
        "max_tokens": 1000,
        "start_line": 1,
        "temperature": 1.6,
        "instructions": "Import the pandas library at the top of the file, before the definition of any classes or functions.\n\nThe current code does not include an import statement for the pandas library. Adding this should ideally be done at the top of the file, right after any existing import statements. However, since there are no explicit import statements before line 54, where the class definition starts, the import statement should be placed right at the beginning of the file.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```json\n{\n  \"<replace>\": \"import pandas as pd\\n\\n\\\"\\\"\\\"Calibration of predicted probabilities.\\\"\\\"\\\"\\n\\n# Author: Alexandre Gramfort <alexandre.gramfort@telecom-paristech.fr>\\n#         Balazs Kegl <balazs.kegl@gmail.com>\\n#         Jan Hendrik Metzen <jhm@informatik.uni-bremen.de>\"\n  \"</replace>\""
          },
          "output": null,
          "input_tokens": 6460,
          "output_tokens": 105,
          "retry_message": "The following diff was not applied:\n --- sklearn/calibration.py\n+++ sklearn/calibration.py\n@@ -1,8 +1,5 @@\n-\"\"\"Calibration of predicted probabilities.\"\"\"\n-\n-# Author: Alexandre Gramfort <alexandre.gramfort@telecom-paristech.fr>\n-#         Balazs Kegl <balazs.kegl@gmail.com>\n-#         Jan Hendrik Metzen <jhm@informatik.uni-bremen.de>\n+\": \"import pandas as pd\\n\\n\\\"\\\"\\\"Calibration of predicted probabilities.\\\"\\\"\\\"\\n\\n# Author: Alexandre Gramfort <alexandre.gramfort@telecom-paristech.fr>\\n#         Balazs Kegl <balazs.kegl@gmail.com>\\n#         Jan Hendrik Metzen <jhm@informatik.uni-bremen.de>\"\n+  \"\n #         Mathieu Blondel <mathieu@mblondel.org>\n #\n # License: BSD 3 clause\n. \nErrors:\nThe updated code is invalid.\nMake sure that you return the unchanged code in the replace tag exactly as it is. If you want to reject the instructions, use the reject function.",
          "completion_cost": 0.020955
        },
        {
          "action": {
            "content": "```json\n{\n  \"reject\": \"The updated code is invalid.\"\n}\n```"
          },
          "output": null,
          "input_tokens": 6856,
          "output_tokens": 20,
          "retry_message": "You did not provide any code in the replace tag. If you want to reject the instructions, use the reject function.",
          "completion_cost": 0.020868
        },
        {
          "action": {
            "content": "```json\n{\n  \"reject\": \"The instructions for updating the code resulted in invalid syntax.\"\n}\n```"
          },
          "output": null,
          "input_tokens": 6907,
          "output_tokens": 25,
          "retry_message": "You did not provide any code in the replace tag. If you want to reject the instructions, use the reject function.",
          "completion_cost": 0.021096
        }
      ]
    }
  ],
  "initial_message": "CalibratedClassifierCV doesn't work with `set_config(transform_output=\"pandas\")`\n### Describe the bug\r\n\r\nCalibratedClassifierCV with isotonic regression doesn't work when we previously set `set_config(transform_output=\"pandas\")`.\r\nThe IsotonicRegression seems to return a dataframe, which is a problem for `_CalibratedClassifier`  in `predict_proba` where it tries to put the dataframe in a numpy array row `proba[:, class_idx] = calibrator.predict(this_pred)`.\r\n\r\n### Steps/Code to Reproduce\r\n\r\n```python\r\nimport numpy as np\r\nfrom sklearn import set_config\r\nfrom sklearn.calibration import CalibratedClassifierCV\r\nfrom sklearn.linear_model import SGDClassifier\r\n\r\nset_config(transform_output=\"pandas\")\r\nmodel = CalibratedClassifierCV(SGDClassifier(), method='isotonic')\r\nmodel.fit(np.arange(90).reshape(30, -1), np.arange(30) % 2)\r\nmodel.predict(np.arange(90).reshape(30, -1))\r\n```\r\n\r\n### Expected Results\r\n\r\nIt should not crash.\r\n\r\n### Actual Results\r\n\r\n```\r\n../core/model_trainer.py:306: in train_model\r\n    cv_predictions = cross_val_predict(pipeline,\r\n../../../../.anaconda3/envs/strategy-training/lib/python3.9/site-packages/sklearn/model_selection/_validation.py:968: in cross_val_predict\r\n    predictions = parallel(\r\n../../../../.anaconda3/envs/strategy-training/lib/python3.9/site-packages/joblib/parallel.py:1085: in __call__\r\n    if self.dispatch_one_batch(iterator):\r\n../../../../.anaconda3/envs/strategy-training/lib/python3.9/site-packages/joblib/parallel.py:901: in dispatch_one_batch\r\n    self._dispatch(tasks)\r\n../../../../.anaconda3/envs/strategy-training/lib/python3.9/site-packages/joblib/parallel.py:819: in _dispatch\r\n    job = self._backend.apply_async(batch, callback=cb)\r\n../../../../.anaconda3/envs/strategy-training/lib/python3.9/site-packages/joblib/_parallel_backends.py:208: in apply_async\r\n    result = ImmediateResult(func)\r\n../../../../.anaconda3/envs/strategy-training/lib/python3.9/site-packages/joblib/_parallel_backends.py:597: in __init__\r\n    self.results = batch()\r\n../../../../.anaconda3/envs/strategy-training/lib/python3.9/site-packages/joblib/parallel.py:288: in __call__\r\n    return [func(*args, **kwargs)\r\n../../../../.anaconda3/envs/strategy-training/lib/python3.9/site-packages/joblib/parallel.py:288: in <listcomp>\r\n    return [func(*args, **kwargs)\r\n../../../../.anaconda3/envs/strategy-training/lib/python3.9/site-packages/sklearn/utils/fixes.py:117: in __call__\r\n    return self.function(*args, **kwargs)\r\n../../../../.anaconda3/envs/strategy-training/lib/python3.9/site-packages/sklearn/model_selection/_validation.py:1052: in _fit_and_predict\r\n    predictions = func(X_test)\r\n../../../../.anaconda3/envs/strategy-training/lib/python3.9/site-packages/sklearn/pipeline.py:548: in predict_proba\r\n    return self.steps[-1][1].predict_proba(Xt, **predict_proba_params)\r\n../../../../.anaconda3/envs/strategy-training/lib/python3.9/site-packages/sklearn/calibration.py:477: in predict_proba\r\n    proba = calibrated_classifier.predict_proba(X)\r\n../../../../.anaconda3/envs/strategy-training/lib/python3.9/site-packages/sklearn/calibration.py:764: in predict_proba\r\n    proba[:, class_idx] = calibrator.predict(this_pred)\r\nE   ValueError: could not broadcast input array from shape (20,1) into shape (20,)\r\n```\r\n\r\n### Versions\r\n\r\n```shell\r\nSystem:\r\n    python: 3.9.15 (main, Nov 24 2022, 14:31:59)  [GCC 11.2.0]\r\nexecutable: /home/philippe/.anaconda3/envs/strategy-training/bin/python\r\n   machine: Linux-5.15.0-57-generic-x86_64-with-glibc2.31\r\n\r\nPython dependencies:\r\n      sklearn: 1.2.0\r\n          pip: 22.2.2\r\n   setuptools: 62.3.2\r\n        numpy: 1.23.5\r\n        scipy: 1.9.3\r\n       Cython: None\r\n       pandas: 1.4.1\r\n   matplotlib: 3.6.3\r\n       joblib: 1.2.0\r\nthreadpoolctl: 3.1.0\r\n\r\nBuilt with OpenMP: True\r\n\r\nthreadpoolctl info:\r\n       user_api: openmp\r\n   internal_api: openmp\r\n         prefix: libgomp\r\n       filepath: /home/philippe/.anaconda3/envs/strategy-training/lib/python3.9/site-packages/scikit_learn.libs/libgomp-a34b3233.so.1.0.0\r\n        version: None\r\n    num_threads: 12\r\n\r\n       user_api: blas\r\n   internal_api: openblas\r\n         prefix: libopenblas\r\n       filepath: /home/philippe/.anaconda3/envs/strategy-training/lib/python3.9/site-packages/numpy.libs/libopenblas64_p-r0-742d56dc.3.20.so\r\n        version: 0.3.20\r\nthreading_layer: pthreads\r\n   architecture: Haswell\r\n    num_threads: 12\r\n\r\n       user_api: blas\r\n   internal_api: openblas\r\n         prefix: libopenblas\r\n       filepath: /home/philippe/.anaconda3/envs/strategy-training/lib/python3.9/site-packages/scipy.libs/libopenblasp-r0-41284840.3.18.so\r\n        version: 0.3.18\r\nthreading_layer: pthreads\r\n   architecture: Haswell\r\n    num_threads: 12\r\n```\r\n\n"
}