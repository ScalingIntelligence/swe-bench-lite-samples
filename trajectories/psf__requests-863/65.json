{
  "info": {
    "duration": 225.30746936798096,
    "submission": "diff --git a/requests/models.py b/requests/models.py\nindex d8456375..5dbd7a84 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -148,8 +148,12 @@ class Request(object):\n \n         hooks = hooks or {}\n \n-        for (k, v) in list(hooks.items()):\n-            self.register_hook(event=k, hook=v)\n+        for event, value in hooks.items():\n+            if isinstance(value, list):\n+                for hook in value:\n+                    self.register_hook(event=event, hook=hook)\n+            else:\n+                self.register_hook(event=event, hook=value)\n \n         #: Session.\n         self.session = session\n",
    "total_cost": 0.18716099999999997,
    "instance_id": "psf__requests-863",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue is about allowing lists in the dictionary values for the 'hooks' argument in the Request class. The current implementation of the Request.__init__() method does not handle lists correctly, causing errors when multiple hooks are provided. To address this, we need to locate the code where the 'hooks' argument is processed in the Request class. Since the issue references the Request.__init__() method, we should search for this method in the given file context. Additionally, we should look for any related methods or functions that interact with the 'hooks' argument, such as 'register_hook' and 'deregister_hook'. Furthermore, the Session class in sessions.py also mentions 'hooks' in its request method, so it might be related.",
            "search_requests": [
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/models.py",
                "function_names": [
                  "__init__",
                  "register_hook",
                  "deregister_hook"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/sessions.py",
                "function_names": [
                  "request"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/hooks.py",
                "function_names": [
                  "dispatch_hook"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 26,
                "span_id": "Request.register_hook",
                "file_path": "requests/models.py"
              },
              {
                "rank": 0,
                "tokens": 51,
                "span_id": "Request.deregister_hook",
                "file_path": "requests/models.py"
              },
              {
                "rank": 0,
                "tokens": 1016,
                "span_id": "Session.request",
                "file_path": "requests/sessions.py"
              },
              {
                "rank": 0,
                "tokens": 83,
                "span_id": "dispatch_hook",
                "file_path": "requests/hooks.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/models.py",
                "function_names": [
                  "__init__",
                  "register_hook",
                  "deregister_hook"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/sessions.py",
                "function_names": [
                  "request"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/hooks.py",
                "function_names": [
                  "dispatch_hook"
                ]
              }
            ]
          },
          "input_tokens": 2826,
          "output_tokens": 287,
          "retry_message": null,
          "completion_cost": 0.012783
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 26,
            "span_id": "Request.register_hook",
            "file_path": "requests/models.py"
          },
          {
            "rank": 0,
            "tokens": 51,
            "span_id": "Request.deregister_hook",
            "file_path": "requests/models.py"
          },
          {
            "rank": 0,
            "tokens": 1016,
            "span_id": "Session.request",
            "file_path": "requests/sessions.py"
          },
          {
            "rank": 0,
            "tokens": 83,
            "span_id": "dispatch_hook",
            "file_path": "requests/hooks.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about allowing lists in the dictionary values of the hooks argument in the Request class. The current implementation in Request.__init__() does not handle lists as values, which causes issues when multiple hooks are needed. To address this, we need to ensure that if a list of hooks is provided, it is handled correctly and not wrapped unnecessarily, which leads to errors when the hooks are consumed. We see the relevant code in Request.__init__() where hooks are processed, as well as the register_hook() method which appends hooks to the self.hooks dictionary. Additionally, we have the Session.request() method which also handles hooks. The dispatch_hook() function in hooks.py also plays a role in handling hooks during the request process. These sections of code need to be reviewed and potentially modified to resolve the issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "Request.__init__",
                  "Request.register_hook"
                ],
                "file_path": "requests/models.py"
              },
              {
                "span_ids": [
                  "Session.request"
                ],
                "file_path": "requests/sessions.py"
              },
              {
                "span_ids": [
                  "dispatch_hook"
                ],
                "file_path": "requests/hooks.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3159,
          "output_tokens": 322,
          "retry_message": null,
          "completion_cost": 0.014307
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "I have identified the Request.__init__() method in the models.py file where the 'hooks' argument is processed. However, there is an issue with how the hooks are processed where list values are wrapped in a list and cause errors when attempting to execute them since a list is not callable. The register_hook method is also identified as a place where hooks can be added, so it's likely related to the issue as well. There are also references to 'hooks' in the Session class in sessions.py, which indicates it might be related. Therefore, all relevant areas that are currently available, such as where hooks are processed in the Request class and how they can be added or modified through the register_hook function, are provided in the context. However, without more extensive file context like deregister_hook methods or detailed function call examples, it's challenging to confirm if more related functions are hidden in other sections of the codebase. Suggest searching for more implementation details regarding handling hooks in other parts of the code.",
            "search_suggestions": "Look for other possible functions or methods in the codebase that deal with hooks management, such as deregister_hook, and examine their implementation to ensure all aspects of hook handling are captured."
          },
          "output": {
            "message": "Look for other possible functions or methods in the codebase that deal with hooks management, such as deregister_hook, and examine their implementation to ensure all aspects of hook handling are captured."
          },
          "input_tokens": 3474,
          "output_tokens": 286,
          "retry_message": null,
          "completion_cost": 0.014712000000000001
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look for other possible functions or methods in the codebase that deal with hooks management, such as deregister_hook, and examine their implementation to ensure all aspects of hook handling are captured.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue emphasizes the need to support lists as values for the 'hooks' dictionary in the Request class. This allows multiple hooks to be registered per event. The current implementation in Request.__init__() and register_hook() methods does not handle lists properly, leading to errors. To address this, additional searches are needed to find other relevant methods or functions in the codebase that deal with hooks management, especially 'deregister_hook', as mentioned in the instructions. This will help ensure that all aspects of hook handling are captured and can be adjusted to support the desired functionality.",
            "search_requests": [
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/models.py",
                "function_names": [
                  "__init__",
                  "register_hook",
                  "deregister_hook"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/sessions.py",
                "function_names": [
                  "request"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/hooks.py",
                "function_names": [
                  "dispatch_hook"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 26,
                "span_id": "Request.register_hook",
                "file_path": "requests/models.py"
              },
              {
                "rank": 0,
                "tokens": 51,
                "span_id": "Request.deregister_hook",
                "file_path": "requests/models.py"
              },
              {
                "rank": 0,
                "tokens": 1016,
                "span_id": "Session.request",
                "file_path": "requests/sessions.py"
              },
              {
                "rank": 0,
                "tokens": 83,
                "span_id": "dispatch_hook",
                "file_path": "requests/hooks.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/models.py",
                "function_names": [
                  "__init__",
                  "register_hook",
                  "deregister_hook"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/sessions.py",
                "function_names": [
                  "request"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/hooks.py",
                "function_names": [
                  "dispatch_hook"
                ]
              }
            ]
          },
          "input_tokens": 5625,
          "output_tokens": 344,
          "retry_message": null,
          "completion_cost": 0.022035000000000003
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 26,
            "span_id": "Request.register_hook",
            "file_path": "requests/models.py"
          },
          {
            "rank": 0,
            "tokens": 51,
            "span_id": "Request.deregister_hook",
            "file_path": "requests/models.py"
          },
          {
            "rank": 0,
            "tokens": 1016,
            "span_id": "Session.request",
            "file_path": "requests/sessions.py"
          },
          {
            "rank": 0,
            "tokens": 83,
            "span_id": "dispatch_hook",
            "file_path": "requests/hooks.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue concerns the handling of the 'hooks' argument in the Request class. Specifically, the issue is that the current implementation of Request.__init__() does not properly handle lists of hook functions, leading to an error when a list is provided. To address this, the code needs to be updated to correctly process and store lists of hook functions. From the provided search results, the relevant sections of the code include the '__init__' method of the Request class and the 'register_hook' method. The '__init__' method currently iterates over the hooks and registers them individually, but it does not account for the possibility of a value being a list of hook functions. This is where the modification needs to be made to support accepting lists as values for the hooks dictionary.",
            "identified_spans": [
              {
                "span_ids": [
                  "Request.__init__",
                  "Request.register_hook"
                ],
                "file_path": "requests/models.py"
              },
              {
                "span_ids": [
                  "Session.request"
                ],
                "file_path": "requests/sessions.py"
              },
              {
                "span_ids": [
                  "dispatch_hook"
                ],
                "file_path": "requests/hooks.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 5638,
          "output_tokens": 309,
          "retry_message": null,
          "completion_cost": 0.021549000000000002
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The file context provided includes the methods 'register_hook' and '__init__' in the Request class, as well as their interaction within the context of handling hooks. The current implementation in '__init__' processes hooks individually and does not handle lists of hooks, which is the issue described. However, the context lacks the method 'deregister_hook' and other methods or logic that might manage hooks in a more comprehensive manner. This missing context suggests that there may be more areas in the codebase dealing with hooks that are not covered here.",
            "search_suggestions": "Search for: 'deregister_hook' method in the codebase to ensure comprehensive understanding and modification for supporting lists in hook values."
          },
          "output": {
            "message": "Search for: 'deregister_hook' method in the codebase to ensure comprehensive understanding and modification for supporting lists in hook values."
          },
          "input_tokens": 4407,
          "output_tokens": 176,
          "retry_message": null,
          "completion_cost": 0.015861
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Search for: 'deregister_hook' method in the codebase to ensure comprehensive understanding and modification for supporting lists in hook values.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "scratch_pad": "The 'deregister_hook' method was not found in the provided file context. Since the initial search was focused on the 'register_hook' and '__init__' methods in the Request class within 'models.py', and these code snippets were already identified, it seems that the 'deregister_hook' method is not present in the files provided. Therefore, there is no need for further search requests on 'deregister_hook'.",
            "search_requests": []
          },
          "output": {
            "message": "The 'deregister_hook' method was not found in the provided file context. Since the initial search was focused on the 'register_hook' and '__init__' methods in the Request class within 'models.py', and these code snippets were already identified, it seems that the 'deregister_hook' method is not present in the files provided. Therefore, there is no need for further search requests on 'deregister_hook'."
          },
          "input_tokens": 6972,
          "output_tokens": 113,
          "retry_message": null,
          "completion_cost": 0.022611
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "The 'deregister_hook' method was not found in the provided file context. Since the initial search was focused on the 'register_hook' and '__init__' methods in the Request class within 'models.py', and these code snippets were already identified, it seems that the 'deregister_hook' method is not present in the files provided. Therefore, there is no need for further search requests on 'deregister_hook'.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "Request.__init__",
            "file_path": "requests/models.py",
            "scratch_pad": "The issue requires modifying the `__init__` method of the Request class to correctly handle dictionaries with lists as values in the `hooks` parameter. Currently, if a list is provided for hooks, it is wrapped in another list, leading to a failure when the hooks are consumed. We need to adjust the code to accept and correctly process lists within the hooks dictionary.",
            "instructions": "Modify the __init__ method in the Request class to correctly handle dictionaries with lists as values for the hooks parameter. Instead of appending hook functions directly to the self.hooks[event] list, iterate over the value if it's a list or just append it if it's a single function. This will allow for multiple hooks to be specified per event without wrapping them in a list upon every update."
          },
          "output": {
            "span_id": "Request.__init__",
            "file_path": "requests/models.py",
            "instructions": "Modify the __init__ method in the Request class to correctly handle dictionaries with lists as values for the hooks parameter. Instead of appending hook functions directly to the self.hooks[event] list, iterate over the value if it's a list or just append it if it's a single function. This will allow for multiple hooks to be specified per event without wrapping them in a list upon every update."
          },
          "input_tokens": 4765,
          "output_tokens": 214,
          "retry_message": null,
          "completion_cost": 0.017505
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "Request.__init__",
        "end_line": null,
        "file_path": "requests/models.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Modify the __init__ method in the Request class to correctly handle dictionaries with lists as values for the hooks parameter. Instead of appending hook functions directly to the self.hooks[event] list, iterate over the value if it's a list or just append it if it's a single function. This will allow for multiple hooks to be specified per event without wrapping them in a list upon every update.\n\nThe instruction requires modifying the handling of the 'hooks' parameter in the __init__ method of the Request class. Specifically, it needs to iterate over the value if it's a list or append it directly if it's a single function. This logic needs to be changed in the for loop starting at line 151 where hooks are registered.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 152,
            "start_line": 151,
            "scratch_pad": "The instruction requires modifying the handling of the 'hooks' parameter in the __init__ method of the Request class. Specifically, it needs to iterate over the value if it's a list or append it directly if it's a single function. This logic needs to be changed in the for loop starting at line 151 where hooks are registered."
          },
          "output": {
            "span_id": "Request.__init__",
            "end_line": 155,
            "file_path": "requests/models.py",
            "start_line": 147,
            "instructions": "Modify the __init__ method in the Request class to correctly handle dictionaries with lists as values for the hooks parameter. Instead of appending hook functions directly to the self.hooks[event] list, iterate over the value if it's a list or just append it if it's a single function. This will allow for multiple hooks to be specified per event without wrapping them in a list upon every update.\n\nThe instruction requires modifying the handling of the 'hooks' parameter in the __init__ method of the Request class. Specifically, it needs to iterate over the value if it's a list or append it directly if it's a single function. This logic needs to be changed in the for loop starting at line 151 where hooks are registered."
          },
          "input_tokens": 1967,
          "output_tokens": 111,
          "retry_message": null,
          "completion_cost": 0.007566
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "Request.__init__",
        "end_line": 155,
        "file_path": "requests/models.py",
        "max_tokens": 1000,
        "start_line": 147,
        "temperature": 1.6,
        "instructions": "Modify the __init__ method in the Request class to correctly handle dictionaries with lists as values for the hooks parameter. Instead of appending hook functions directly to the self.hooks[event] list, iterate over the value if it's a list or just append it if it's a single function. This will allow for multiple hooks to be specified per event without wrapping them in a list upon every update.\n\nThe instruction requires modifying the handling of the 'hooks' parameter in the __init__ method of the Request class. Specifically, it needs to iterate over the value if it's a list or append it directly if it's a single function. This logic needs to be changed in the for loop starting at line 151 where hooks are registered.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n            self.hooks[event] = []\n\n        hooks = hooks or {}\n\n        for event, value in hooks.items():\n            if isinstance(value, list):\n                for hook in value:\n                    self.register_hook(event=event, hook=hook)\n            else:\n                self.register_hook(event=event, hook=value)\n\n        #: Session.\n        self.session = session\n</replace>"
          },
          "output": {
            "diff": "--- requests/models.py\n+++ requests/models.py\n@@ -148,8 +148,12 @@\n \n         hooks = hooks or {}\n \n-        for (k, v) in list(hooks.items()):\n-            self.register_hook(event=k, hook=v)\n+        for event, value in hooks.items():\n+            if isinstance(value, list):\n+                for hook in value:\n+                    self.register_hook(event=event, hook=hook)\n+            else:\n+                self.register_hook(event=event, hook=value)\n \n         #: Session.\n         self.session = session\n",
            "message": "Applied the change to requests/models.py.",
            "verification_errors": []
          },
          "input_tokens": 6039,
          "output_tokens": 102,
          "retry_message": null,
          "completion_cost": 0.019647
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- requests/models.py\n+++ requests/models.py\n@@ -148,8 +148,12 @@\n \n         hooks = hooks or {}\n \n-        for (k, v) in list(hooks.items()):\n-            self.register_hook(event=k, hook=v)\n+        for event, value in hooks.items():\n+            if isinstance(value, list):\n+                for hook in value:\n+                    self.register_hook(event=event, hook=hook)\n+            else:\n+                self.register_hook(event=event, hook=value)\n \n         #: Session.\n         self.session = session\n",
        "model": "deepseek-coder",
        "message": "Applied the change to requests/models.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue has been fully addressed, allowing lists of hooks to be correctly processed and registered during the instantiation of a `Request` object. This enhancement adheres to the specified requirements and improves the functionality of the `hooks` parameter in the `Request` class.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The changes applied in the previous step correctly address the issue by modifying the `__init__` method of the `Request` class to handle lists within the hooks dictionary. Each hook function in the list is registered correctly, allowing multiple hooks per event without further wrapping. This modification simplifies the process of applying multiple hooks to a request without needing to call `register_hook` multiple times after the initial request creation.",
            "instructions": null
          },
          "output": {
            "message": "The issue has been fully addressed, allowing lists of hooks to be correctly processed and registered during the instantiation of a `Request` object. This enhancement adheres to the specified requirements and improves the functionality of the `hooks` parameter in the `Request` class."
          },
          "input_tokens": 5210,
          "output_tokens": 197,
          "retry_message": null,
          "completion_cost": 0.018585
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue has been fully addressed, allowing lists of hooks to be correctly processed and registered during the instantiation of a `Request` object. This enhancement adheres to the specified requirements and improves the functionality of the `hooks` parameter in the `Request` class.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Allow lists in the dict values of the hooks argument\nCurrently the Request class has a .register_hook() method but it parses the dictionary it expects from it's hooks argument weirdly: the argument can only specify one hook function per hook.  If you pass in a list of hook functions per hook the code in Request.**init**() will wrap the list in a list which then fails when the hooks are consumed (since a list is not callable).  This is especially annoying since you can not use multiple hooks from a session.  The only way to get multiple hooks now is to create the request object without sending it, then call .register_hook() multiple times and then finally call .send().\n\nThis would all be much easier if Request.**init**() parsed the hooks parameter in a way that it accepts lists as it's values.\n\n"
}