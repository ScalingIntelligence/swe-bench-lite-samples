{
  "info": {
    "duration": 141.6315221786499,
    "submission": "diff --git a/requests/models.py b/requests/models.py\nindex d8456375..aa98e367 100644\n--- a/requests/models.py\n+++ b/requests/models.py\n@@ -149,7 +149,11 @@ class Request(object):\n         hooks = hooks or {}\n \n         for (k, v) in list(hooks.items()):\n-            self.register_hook(event=k, hook=v)\n+            if isinstance(v, list):\n+                for hook in v:\n+                    self.register_hook(event=k, hook=hook)\n+            else:\n+                self.register_hook(event=k, hook=v)\n \n         #: Session.\n         self.session = session\n",
    "total_cost": 0.12224100000000002,
    "instance_id": "psf__requests-863",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue is about enhancing the functionality of the Request class's .register_hook() method. The current implementation only allows one hook function per hook, and it fails when a list of hook functions is provided. We need to modify Request.__init__() to parse the hooks parameter in a way that it accepts lists as values. The relevant files identified so far include models.py, hooks.py, sessions.py, utils.py, cookies.py, api.py, common.py, structures.py, and request.py. We should focus on these files to find the place in Request.__init__() where the hooks parameter is parsed and ensure it can handle lists.",
            "search_requests": [
              {
                "query": "Request class hooks parameter handling lists",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/requests/**/*.py",
                "function_names": [
                  "__init__",
                  "register_hook"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 26,
                "span_id": "Request.register_hook",
                "file_path": "requests/models.py"
              },
              {
                "rank": 41,
                "tokens": 19,
                "span_id": "MockRequest.__init__",
                "file_path": "requests/cookies.py"
              },
              {
                "rank": 46,
                "tokens": 46,
                "span_id": "EUCKRProber.__init__",
                "file_path": "requests/packages/chardet/euckrprober.py"
              },
              {
                "rank": 142,
                "tokens": 45,
                "span_id": "PoolManager.__init__",
                "file_path": "requests/packages/urllib3/poolmanager.py"
              },
              {
                "rank": 77,
                "tokens": 46,
                "span_id": "EUCTWProber.__init__",
                "file_path": "requests/packages/chardet/euctwprober.py"
              },
              {
                "rank": 84,
                "tokens": 71,
                "span_id": "EscCharSetProber.__init__",
                "file_path": "requests/packages/chardet/escprober.py"
              },
              {
                "rank": 91,
                "tokens": 45,
                "span_id": "Big5Prober.__init__",
                "file_path": "requests/packages/chardet/big5prober.py"
              },
              {
                "rank": 93,
                "tokens": 73,
                "span_id": "MBCSGroupProber.__init__",
                "file_path": "requests/packages/chardet/mbcsgroupprober.py"
              },
              {
                "rank": 181,
                "tokens": 117,
                "span_id": "OrderedDict.__init__",
                "file_path": "requests/packages/urllib3/packages/ordered_dict.py"
              },
              {
                "rank": 278,
                "tokens": 12,
                "span_id": "_LazyDescr.__init__",
                "file_path": "requests/packages/urllib3/packages/six.py"
              },
              {
                "rank": 278,
                "tokens": 46,
                "span_id": "MovedModule.__init__",
                "file_path": "requests/packages/urllib3/packages/six.py"
              },
              {
                "rank": 193,
                "tokens": 42,
                "span_id": "RecentlyUsedContainer.__init__",
                "file_path": "requests/packages/urllib3/_collections.py"
              },
              {
                "rank": 140,
                "tokens": 38,
                "span_id": "CharSetGroupProber.__init__",
                "file_path": "requests/packages/chardet/charsetgroupprober.py"
              },
              {
                "rank": 141,
                "tokens": 7,
                "span_id": "CharSetProber.__init__",
                "file_path": "requests/packages/chardet/charsetprober.py"
              },
              {
                "rank": 144,
                "tokens": 44,
                "span_id": "MultiByteCharSetProber.__init__",
                "file_path": "requests/packages/chardet/mbcharsetprober.py"
              },
              {
                "rank": 156,
                "tokens": 7,
                "span_id": "CharSetProber.__init__",
                "file_path": "requests/packages/chardet2/charsetprober.py"
              },
              {
                "rank": 175,
                "tokens": 75,
                "span_id": "SingleByteCharSetProber.__init__",
                "file_path": "requests/packages/chardet/sbcharsetprober.py"
              },
              {
                "rank": 195,
                "tokens": 47,
                "span_id": "GB2312Prober.__init__",
                "file_path": "requests/packages/chardet/gb2312prober.py"
              },
              {
                "rank": 198,
                "tokens": 33,
                "span_id": "CodingStateMachine.__init__",
                "file_path": "requests/packages/chardet/codingstatemachine.py"
              },
              {
                "rank": 210,
                "tokens": 123,
                "span_id": "NTLMConnectionPool.__init__",
                "file_path": "requests/packages/urllib3/contrib/ntlmpool.py"
              },
              {
                "rank": 259,
                "tokens": 147,
                "span_id": "HTTPResponse.__init__",
                "file_path": "requests/packages/urllib3/response.py"
              },
              {
                "rank": 249,
                "tokens": 32,
                "span_id": "UTF8Prober.__init__",
                "file_path": "requests/packages/chardet/utf8prober.py"
              },
              {
                "rank": 262,
                "tokens": 60,
                "span_id": "EUCJPProber.__init__",
                "file_path": "requests/packages/chardet/eucjpprober.py"
              },
              {
                "rank": 266,
                "tokens": 56,
                "span_id": "SJISProber.__init__",
                "file_path": "requests/packages/chardet/sjisprober.py"
              }
            ],
            "search_requests": [
              {
                "query": "Request class hooks parameter handling lists",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/requests/**/*.py",
                "function_names": [
                  "__init__",
                  "register_hook"
                ]
              }
            ]
          },
          "input_tokens": 2826,
          "output_tokens": 230,
          "retry_message": null,
          "completion_cost": 0.011928
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 26,
            "span_id": "Request.register_hook",
            "file_path": "requests/models.py"
          },
          {
            "rank": 41,
            "tokens": 19,
            "span_id": "MockRequest.__init__",
            "file_path": "requests/cookies.py"
          },
          {
            "rank": 46,
            "tokens": 46,
            "span_id": "EUCKRProber.__init__",
            "file_path": "requests/packages/chardet/euckrprober.py"
          },
          {
            "rank": 142,
            "tokens": 45,
            "span_id": "PoolManager.__init__",
            "file_path": "requests/packages/urllib3/poolmanager.py"
          },
          {
            "rank": 77,
            "tokens": 46,
            "span_id": "EUCTWProber.__init__",
            "file_path": "requests/packages/chardet/euctwprober.py"
          },
          {
            "rank": 84,
            "tokens": 71,
            "span_id": "EscCharSetProber.__init__",
            "file_path": "requests/packages/chardet/escprober.py"
          },
          {
            "rank": 91,
            "tokens": 45,
            "span_id": "Big5Prober.__init__",
            "file_path": "requests/packages/chardet/big5prober.py"
          },
          {
            "rank": 93,
            "tokens": 73,
            "span_id": "MBCSGroupProber.__init__",
            "file_path": "requests/packages/chardet/mbcsgroupprober.py"
          },
          {
            "rank": 181,
            "tokens": 117,
            "span_id": "OrderedDict.__init__",
            "file_path": "requests/packages/urllib3/packages/ordered_dict.py"
          },
          {
            "rank": 278,
            "tokens": 12,
            "span_id": "_LazyDescr.__init__",
            "file_path": "requests/packages/urllib3/packages/six.py"
          },
          {
            "rank": 278,
            "tokens": 46,
            "span_id": "MovedModule.__init__",
            "file_path": "requests/packages/urllib3/packages/six.py"
          },
          {
            "rank": 193,
            "tokens": 42,
            "span_id": "RecentlyUsedContainer.__init__",
            "file_path": "requests/packages/urllib3/_collections.py"
          },
          {
            "rank": 140,
            "tokens": 38,
            "span_id": "CharSetGroupProber.__init__",
            "file_path": "requests/packages/chardet/charsetgroupprober.py"
          },
          {
            "rank": 141,
            "tokens": 7,
            "span_id": "CharSetProber.__init__",
            "file_path": "requests/packages/chardet/charsetprober.py"
          },
          {
            "rank": 144,
            "tokens": 44,
            "span_id": "MultiByteCharSetProber.__init__",
            "file_path": "requests/packages/chardet/mbcharsetprober.py"
          },
          {
            "rank": 156,
            "tokens": 7,
            "span_id": "CharSetProber.__init__",
            "file_path": "requests/packages/chardet2/charsetprober.py"
          },
          {
            "rank": 175,
            "tokens": 75,
            "span_id": "SingleByteCharSetProber.__init__",
            "file_path": "requests/packages/chardet/sbcharsetprober.py"
          },
          {
            "rank": 195,
            "tokens": 47,
            "span_id": "GB2312Prober.__init__",
            "file_path": "requests/packages/chardet/gb2312prober.py"
          },
          {
            "rank": 198,
            "tokens": 33,
            "span_id": "CodingStateMachine.__init__",
            "file_path": "requests/packages/chardet/codingstatemachine.py"
          },
          {
            "rank": 210,
            "tokens": 123,
            "span_id": "NTLMConnectionPool.__init__",
            "file_path": "requests/packages/urllib3/contrib/ntlmpool.py"
          },
          {
            "rank": 259,
            "tokens": 147,
            "span_id": "HTTPResponse.__init__",
            "file_path": "requests/packages/urllib3/response.py"
          },
          {
            "rank": 249,
            "tokens": 32,
            "span_id": "UTF8Prober.__init__",
            "file_path": "requests/packages/chardet/utf8prober.py"
          },
          {
            "rank": 262,
            "tokens": 60,
            "span_id": "EUCJPProber.__init__",
            "file_path": "requests/packages/chardet/eucjpprober.py"
          },
          {
            "rank": 266,
            "tokens": 56,
            "span_id": "SJISProber.__init__",
            "file_path": "requests/packages/chardet/sjisprober.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The task is to identify code within the search results that is relevant to allowing lists in the dict values of the hooks argument in the Request class. The issue specifies that the current implementation of Request.__init__() and Request.register_hook() methods does not handle lists of hook functions properly. Specifically, when a list of hook functions is passed, it is wrapped in another list which causes errors when the hooks are consumed.\n\nFrom the search results, the relevant section is in the file 'requests/models.py', specifically the spans 'Request.__init__' and 'Request.register_hook'. The 'Request.__init__' method initializes the hooks as an empty dictionary and registers each hook individually. The current implementation does not handle lists of hook functions, which is the core issue described. The 'Request.register_hook' method simply appends the hook to the list of hooks for the given event. This highlights the need for a change in the parsing logic in '__init__' to handle lists of hook functions correctly.",
            "identified_spans": [
              {
                "span_ids": [
                  "Request.__init__",
                  "Request.register_hook"
                ],
                "file_path": "requests/models.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 5239,
          "output_tokens": 288,
          "retry_message": null,
          "completion_cost": 0.020037000000000003
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The file context provided includes the Request class from the models.py file in the requests library. This class contains the __init__() method which is responsible for initializing the Request object and parsing the hooks parameter. The hooks parameter is currently processed in a way that it expects a single hook function per hook. If a list of hook functions is provided, it will not be handled correctly leading to the failure mentioned in the issue. The relevant code in Request.__init__() processes the hooks parameter and calls the register_hook() method for each hook. To resolve the issue, the __init__() method should be modified to handle lists of hook functions. The register_hook() method would also need to be adjusted to manage multiple hooks properly. The provided file context and the identified additional files (hooks.py, sessions.py, utils.py, cookies.py, api.py, common.py, structures.py, and request.py) should be reviewed for any additional references or dependencies related to the hooks functionality. Given the current file context and the outlined changes required, it is safe to say that the relevant code for addressing the issue has been identified, but modifications are needed to properly handle lists of hook functions.",
            "search_suggestions": "Review the additional identified files (hooks.py, sessions.py, utils.py, cookies.py, api.py, common.py, structures.py, and request.py) to ensure all related code is identified and modify the __init__() method in models.py and the register_hook() method to handle lists of hook functions."
          },
          "output": {
            "message": "Review the additional identified files (hooks.py, sessions.py, utils.py, cookies.py, api.py, common.py, structures.py, and request.py) to ensure all related code is identified and modify the __init__() method in models.py and the register_hook() method to handle lists of hook functions."
          },
          "input_tokens": 2201,
          "output_tokens": 358,
          "retry_message": null,
          "completion_cost": 0.011973000000000001
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Review the additional identified files (hooks.py, sessions.py, utils.py, cookies.py, api.py, common.py, structures.py, and request.py) to ensure all related code is identified and modify the __init__() method in models.py and the register_hook() method to handle lists of hook functions.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "scratch_pad": "The additional identified files have been reviewed, and the relevant code snippets have been examined. The `__init__` method in `models.py` needs to be modified to handle lists of hook functions in the `hooks` parameter. Currently, it registers each hook individually without checking if it is a list. The `register_hook` method also only appends the hook directly, which needs to be adjusted to iterate over a list if provided.",
            "search_requests": []
          },
          "output": {
            "message": "The additional identified files have been reviewed, and the relevant code snippets have been examined. The `__init__` method in `models.py` needs to be modified to handle lists of hook functions in the `hooks` parameter. Currently, it registers each hook individually without checking if it is a list. The `register_hook` method also only appends the hook directly, which needs to be adjusted to iterate over a list if provided."
          },
          "input_tokens": 4265,
          "output_tokens": 120,
          "retry_message": null,
          "completion_cost": 0.014595
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "The additional identified files have been reviewed, and the relevant code snippets have been examined. The `__init__` method in `models.py` needs to be modified to handle lists of hook functions in the `hooks` parameter. Currently, it registers each hook individually without checking if it is a list. The `register_hook` method also only appends the hook directly, which needs to be adjusted to iterate over a list if provided.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "Request.__init__",
            "file_path": "requests/models.py",
            "scratch_pad": "The current code in the `__init__` method of the `Request` class does not handle lists of hook functions in the `hooks` parameter correctly. It currently registers each hook individually without checking if it is a list. This leads to wrapping the list in a list, which then fails when the hooks are consumed because a list is not callable. We need to modify the `__init__` method to accept lists as values in the `hooks` parameter and correctly register each hook function in the list.",
            "instructions": "Modify the `__init__` method of the `Request` class to handle lists of hook functions in the `hooks` parameter. Update the method to check if each value in the `hooks` dictionary is a list, and if so, iterate over the list and register each hook function individually, instead of registering the list itself."
          },
          "output": {
            "span_id": "Request.__init__",
            "file_path": "requests/models.py",
            "instructions": "Modify the `__init__` method of the `Request` class to handle lists of hook functions in the `hooks` parameter. Update the method to check if each value in the `hooks` dictionary is a list, and if so, iterate over the list and register each hook function individually, instead of registering the list itself."
          },
          "input_tokens": 4856,
          "output_tokens": 240,
          "retry_message": null,
          "completion_cost": 0.018168
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "Request.__init__",
        "end_line": null,
        "file_path": "requests/models.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Modify the `__init__` method of the `Request` class to handle lists of hook functions in the `hooks` parameter. Update the method to check if each value in the `hooks` dictionary is a list, and if so, iterate over the list and register each hook function individually, instead of registering the list itself.\n\nThe __init__ method needs to be modified to handle lists in the hooks parameter. Specifically, the for loop (lines 149-152) that registers hooks should be updated to check if a hook value is a list and iterate over it if so.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 152,
            "start_line": 151,
            "scratch_pad": "The __init__ method needs to be modified to handle lists in the hooks parameter. Specifically, the for loop (lines 149-152) that registers hooks should be updated to check if a hook value is a list and iterate over it if so."
          },
          "output": {
            "span_id": "Request.__init__",
            "end_line": 155,
            "file_path": "requests/models.py",
            "start_line": 147,
            "instructions": "Modify the `__init__` method of the `Request` class to handle lists of hook functions in the `hooks` parameter. Update the method to check if each value in the `hooks` dictionary is a list, and if so, iterate over the list and register each hook function individually, instead of registering the list itself.\n\nThe __init__ method needs to be modified to handle lists in the hooks parameter. Specifically, the for loop (lines 149-152) that registers hooks should be updated to check if a hook value is a list and iterate over it if so."
          },
          "input_tokens": 1951,
          "output_tokens": 94,
          "retry_message": null,
          "completion_cost": 0.007263
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "Request.__init__",
        "end_line": 155,
        "file_path": "requests/models.py",
        "max_tokens": 1000,
        "start_line": 147,
        "temperature": 1.6,
        "instructions": "Modify the `__init__` method of the `Request` class to handle lists of hook functions in the `hooks` parameter. Update the method to check if each value in the `hooks` dictionary is a list, and if so, iterate over the list and register each hook function individually, instead of registering the list itself.\n\nThe __init__ method needs to be modified to handle lists in the hooks parameter. Specifically, the for loop (lines 149-152) that registers hooks should be updated to check if a hook value is a list and iterate over it if so.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\n            self.hooks[event] = []\n\n        hooks = hooks or {}\n\n        for (k, v) in list(hooks.items()):\n            if isinstance(v, list):\n                for hook in v:\n                    self.register_hook(event=k, hook=hook)\n            else:\n                self.register_hook(event=k, hook=v)\n\n        #: Session.\n        self.session = session\n</replace>"
          },
          "output": {
            "diff": "--- requests/models.py\n+++ requests/models.py\n@@ -149,7 +149,11 @@\n         hooks = hooks or {}\n \n         for (k, v) in list(hooks.items()):\n-            self.register_hook(event=k, hook=v)\n+            if isinstance(v, list):\n+                for hook in v:\n+                    self.register_hook(event=k, hook=hook)\n+            else:\n+                self.register_hook(event=k, hook=v)\n \n         #: Session.\n         self.session = session\n",
            "message": "Applied the change to requests/models.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 5749,
          "output_tokens": 110,
          "retry_message": null,
          "completion_cost": 0.018897
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- requests/models.py\n+++ requests/models.py\n@@ -149,7 +149,11 @@\n         hooks = hooks or {}\n \n         for (k, v) in list(hooks.items()):\n-            self.register_hook(event=k, hook=v)\n+            if isinstance(v, list):\n+                for hook in v:\n+                    self.register_hook(event=k, hook=hook)\n+            else:\n+                self.register_hook(event=k, hook=v)\n \n         #: Session.\n         self.session = session\n",
        "model": "deepseek-coder",
        "message": "Applied the change to requests/models.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The changes made to the `__init__` method of the `Request` class have been successfully applied. The method now correctly processes lists of hook functions within the `hooks` parameter, ensuring each function is registered appropriately. This fix addresses the reported issue and allows for the use of multiple hooks from a session without requiring additional steps such as creating the request object without sending it and calling `.register_hook()` multiple times.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The changes applied to the `__init__` method of the `Request` class now correctly handle lists of hook functions in the `hooks` parameter. Each hook function in the list is iterated over and registered individually, eliminating the issue of wrapping a list within a list. This fix resolves the reported problem where lists of hook functions were not supported and simplifies the process of using multiple hooks from a session.",
            "instructions": null
          },
          "output": {
            "message": "The changes made to the `__init__` method of the `Request` class have been successfully applied. The method now correctly processes lists of hook functions within the `hooks` parameter, ensuring each function is registered appropriately. This fix addresses the reported issue and allows for the use of multiple hooks from a session without requiring additional steps such as creating the request object without sending it and calling `.register_hook()` multiple times."
          },
          "input_tokens": 5320,
          "output_tokens": 228,
          "retry_message": null,
          "completion_cost": 0.01938
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The changes made to the `__init__` method of the `Request` class have been successfully applied. The method now correctly processes lists of hook functions within the `hooks` parameter, ensuring each function is registered appropriately. This fix addresses the reported issue and allows for the use of multiple hooks from a session without requiring additional steps such as creating the request object without sending it and calling `.register_hook()` multiple times.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Allow lists in the dict values of the hooks argument\nCurrently the Request class has a .register_hook() method but it parses the dictionary it expects from it's hooks argument weirdly: the argument can only specify one hook function per hook.  If you pass in a list of hook functions per hook the code in Request.**init**() will wrap the list in a list which then fails when the hooks are consumed (since a list is not callable).  This is especially annoying since you can not use multiple hooks from a session.  The only way to get multiple hooks now is to create the request object without sending it, then call .register_hook() multiple times and then finally call .send().\n\nThis would all be much easier if Request.**init**() parsed the hooks parameter in a way that it accepts lists as it's values.\n\n"
}