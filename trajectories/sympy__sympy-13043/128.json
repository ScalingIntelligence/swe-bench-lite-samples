{
  "info": {
    "duration": 358.14102029800415,
    "submission": "diff --git a/sympy/integrals/intpoly.py b/sympy/integrals/intpoly.py\nindex fc72bd206f..8f29afc854 100644\n--- a/sympy/integrals/intpoly.py\n+++ b/sympy/integrals/intpoly.py\n@@ -569,7 +569,8 @@ def decompose(expr, separate=False):\n             degrees = [(sum(degree_list(monom, *symbols)), monom)\n                        for monom in expr.args]\n             if separate:\n-                return [monom[1] for monom in degrees]\n+                monoms = [monom[1] for monom in degrees]\n+                return sorted(monoms, key=lambda m: (sum(degree_list(m, *symbols)), m.as_ordered_factors()))\n             else:\n                 for monom in degrees:\n                     degree, term = monom\n@@ -593,7 +594,7 @@ def decompose(expr, separate=False):\n         poly_dict[0] = expr\n \n     if separate:\n-        return list(poly_dict.values())\n+        return sorted(poly_dict.values(), key=lambda m: (sum(degree_list(m, *symbols)), m.as_ordered_factors()))\n     return poly_dict\n \n \n",
    "total_cost": 0.156168,
    "instance_id": "sympy__sympy-13043",
    "evaluation_name": "temperature_sweep_250_samples_50_problems_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue identifies that the decompose() function, when separate=True, returns an arbitrarily ordered list from `list(poly_dict.values())`. This is causing problems in various tests. To address this, it's necessary to locate where the decompose() function is defined and used within the sympy project to determine how the list ordering can be controlled or why it should be changed. Starting with the file mentioned in the issue content (`sympy/integrals/intpoly.py`), and potentially looking into where it might be used or explicitly search for where `decompose(expr, separate=True)` might be invoked.",
            "search_requests": [
              {
                "query": "decompose function with separate=True",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/intpoly.py",
                "function_names": [
                  "decompose"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": "decompose(expr, separate=True)",
                "file_pattern": "**/*.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 478,
                "span_id": "decompose",
                "file_path": "sympy/integrals/intpoly.py"
              }
            ],
            "search_requests": [
              {
                "query": "decompose function with separate=True",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/intpoly.py",
                "function_names": [
                  "decompose"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": "decompose(expr, separate=True)",
                "file_pattern": "**/*.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 3721,
          "output_tokens": 240,
          "retry_message": null,
          "completion_cost": 0.014763000000000002
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 478,
            "span_id": "decompose",
            "file_path": "sympy/integrals/intpoly.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue concerns the `decompose()` function in `intpoly.py`, which is used to decompose a polynomial expression into its constituent monomials. The issue specifically notes that when `separate=True`, the function returns `list(poly_dict.values())`, which is ordered arbitrarily. This arbitrary order is causing test failures. To address this issue, it is necessary to identify the relevant code spans where the `decompose()` function is defined and used, with particular attention to how it handles the `separate` parameter and the order of the returned list. The search results provide the full context of the `decompose()` function, showing how it processes the input expression and constructs the `poly_dict` dictionary before returning either the dictionary itself or its values as a list, depending on the `separate` parameter. This context is crucial for understanding the potential fix needed to ensure the returned list is ordered appropriately, or changed to a set if intended to be unordered. Given the provided context and the issue description, the relevant code spans include the definition of the `decompose()` function and its usage within the `polytope_integrate()` function where the order issue could impact the result. Thus, these code spans are identified as relevant to the reported issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "decompose",
                  "polytope_integrate"
                ],
                "file_path": "sympy/integrals/intpoly.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 2429,
          "output_tokens": 334,
          "retry_message": null,
          "completion_cost": 0.012296999999999999
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The decompose() function is found in the file context. When 'separate=True', it returns 'list(poly_dict.values())', which may indeed be arbitrarily ordered because dictionaries do not maintain any specific order. The issue seems to be the order of the list impacting the tests' outcomes. The file context includes the definition of decompose() and its usage in polytope_integrate() function, which could be relevant for the reported issue. However, the actual impact on tests and how the list should be sorted or why it should be a set rather than a list isn't immediately apparent from the provided context. Further investigation might be required to understand the specific requirements for sorting or changing the data structure in other parts of the codebase where decompose() is used or tested.",
            "search_suggestions": "Look into the tests that are failing due to the arbitrary order of the list returned by decompose() with 'separate=True'. These tests might provide hints on how the list should be ordered or why a set might be a better choice. Also, investigate if there are any other functions or parts of the codebase that rely on decompose() and might be affected by its output order or structure."
          },
          "output": {
            "message": "Look into the tests that are failing due to the arbitrary order of the list returned by decompose() with 'separate=True'. These tests might provide hints on how the list should be ordered or why a set might be a better choice. Also, investigate if there are any other functions or parts of the codebase that rely on decompose() and might be affected by its output order or structure."
          },
          "input_tokens": 3037,
          "output_tokens": 273,
          "retry_message": null,
          "completion_cost": 0.013206
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look into the tests that are failing due to the arbitrary order of the list returned by decompose() with 'separate=True'. These tests might provide hints on how the list should be ordered or why a set might be a better choice. Also, investigate if there are any other functions or parts of the codebase that rely on decompose() and might be affected by its output order or structure.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "To address the issue of the arbitrary order of the list returned by decompose() with 'separate=True', it's crucial to look into the failing tests. These tests can provide insights into the expected order or suggest an alternative approach like using a set. Additionally, it's important to investigate any dependent functions or parts of the codebase that might be relying on the current behavior of decompose(). Based on the file context provided, it's clear that decompose() is used in the context of integrating polynomials over polytopes. The current implementation of decompose() does not guarantee any specific order when 'separate=True', which likely leads to issues in the tests and could potentially affect other parts of the code that rely on this function.",
            "search_requests": [
              {
                "query": "decompose function with separate=True failing",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/*test*.py",
                "function_names": [
                  "decompose"
                ]
              },
              {
                "query": "functions dependent on decompose()",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/*.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 21,
                "span_id": "imports",
                "file_path": "sympy/solvers/decompogen.py"
              },
              {
                "rank": 0,
                "tokens": 477,
                "span_id": "decompogen",
                "file_path": "sympy/solvers/decompogen.py"
              },
              {
                "rank": 1,
                "tokens": 337,
                "span_id": "compogen",
                "file_path": "sympy/solvers/decompogen.py"
              },
              {
                "rank": 2,
                "tokens": 89,
                "span_id": "_dup_decompose",
                "file_path": "sympy/polys/densetools.py"
              },
              {
                "rank": 2,
                "tokens": 90,
                "span_id": "_dup_left_decompose",
                "file_path": "sympy/polys/densetools.py"
              },
              {
                "rank": 3,
                "tokens": 9,
                "span_id": "imports",
                "file_path": "sympy/functions/combinatorial/__init__.py"
              },
              {
                "rank": 4,
                "tokens": 478,
                "span_id": "decompose",
                "file_path": "sympy/integrals/intpoly.py"
              },
              {
                "rank": 5,
                "tokens": 1083,
                "span_id": "docstring",
                "file_path": "setup.py"
              },
              {
                "rank": 6,
                "tokens": 611,
                "span_id": "solve_decomposition",
                "file_path": "sympy/solvers/solveset.py"
              },
              {
                "rank": 7,
                "tokens": 1209,
                "span_id": "expr_to_holonomic",
                "file_path": "sympy/holonomic/holonomic.py"
              },
              {
                "rank": 8,
                "tokens": 874,
                "span_id": "lambdastr",
                "file_path": "sympy/utilities/lambdify.py"
              },
              {
                "rank": 9,
                "tokens": 741,
                "span_id": "Lambdifier:2",
                "file_path": "sympy/plotting/experimental_lambdify.py"
              },
              {
                "rank": 9,
                "tokens": 78,
                "span_id": "Lambdifier.get_dict_str",
                "file_path": "sympy/plotting/experimental_lambdify.py"
              }
            ],
            "search_requests": [
              {
                "query": "decompose function with separate=True failing",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/*test*.py",
                "function_names": [
                  "decompose"
                ]
              },
              {
                "query": "functions dependent on decompose()",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/*.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 6119,
          "output_tokens": 304,
          "retry_message": null,
          "completion_cost": 0.022917
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 21,
            "span_id": "imports",
            "file_path": "sympy/solvers/decompogen.py"
          },
          {
            "rank": 0,
            "tokens": 477,
            "span_id": "decompogen",
            "file_path": "sympy/solvers/decompogen.py"
          },
          {
            "rank": 1,
            "tokens": 337,
            "span_id": "compogen",
            "file_path": "sympy/solvers/decompogen.py"
          },
          {
            "rank": 2,
            "tokens": 89,
            "span_id": "_dup_decompose",
            "file_path": "sympy/polys/densetools.py"
          },
          {
            "rank": 2,
            "tokens": 90,
            "span_id": "_dup_left_decompose",
            "file_path": "sympy/polys/densetools.py"
          },
          {
            "rank": 3,
            "tokens": 9,
            "span_id": "imports",
            "file_path": "sympy/functions/combinatorial/__init__.py"
          },
          {
            "rank": 4,
            "tokens": 478,
            "span_id": "decompose",
            "file_path": "sympy/integrals/intpoly.py"
          },
          {
            "rank": 5,
            "tokens": 1083,
            "span_id": "docstring",
            "file_path": "setup.py"
          },
          {
            "rank": 6,
            "tokens": 611,
            "span_id": "solve_decomposition",
            "file_path": "sympy/solvers/solveset.py"
          },
          {
            "rank": 7,
            "tokens": 1209,
            "span_id": "expr_to_holonomic",
            "file_path": "sympy/holonomic/holonomic.py"
          },
          {
            "rank": 8,
            "tokens": 874,
            "span_id": "lambdastr",
            "file_path": "sympy/utilities/lambdify.py"
          },
          {
            "rank": 9,
            "tokens": 741,
            "span_id": "Lambdifier:2",
            "file_path": "sympy/plotting/experimental_lambdify.py"
          },
          {
            "rank": 9,
            "tokens": 78,
            "span_id": "Lambdifier.get_dict_str",
            "file_path": "sympy/plotting/experimental_lambdify.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves the `decompose()` function returning a list of monomials in an arbitrary order when `separate=True`. This is causing test failures due to the arbitrary ordering. To address this, we need to identify the relevant sections of code that deal with the `decompose()` function and determine how the ordering might be handled or adjusted.\n\nI reviewed the provided file context and identified two spans in `sympy/integrals/intpoly.py` that contain the `decompose()` function: one where it is defined and another where it is used within the `polytope_integrate` function. This use case aligns with the reported issue, as it involves calling `decompose()` with `separate=True` and handling the resulting list of monomials.\n\nNext, I analyzed the new search results and found the `decompose()` function defined in a different context within the same file (`sympy/integrals/intpoly.py`), ensuring that the definition is consistent and directly relevant to the reported issue. I also identified usages of `decompose()` in other files (`sympy/solvers/decompogen.py` and `sympy/solvers/solveset.py`), which help understand the broader context of its use.\n\nBased on this analysis, I will mark the relevant spans in the `sympy/integrals/intpoly.py` file as identified, as they directly pertain to the `decompose()` function and its usage with `separate=True`.",
            "identified_spans": [
              {
                "span_ids": [
                  "decompose",
                  "polytope_integrate"
                ],
                "file_path": "sympy/integrals/intpoly.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 5922,
          "output_tokens": 392,
          "retry_message": null,
          "completion_cost": 0.023646
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context provided includes the `decompose()` function, which is the focus of the reported issue. This function, when called with `separate=True`, returns `list(poly_dict.values())`. The current implementation does not guarantee any specific order, and this appears to be the root cause of the issue. The issue mentions that the arbitrary order is causing test failures, indicating that downstream processes or tests rely on the order. Therefore, the file context provided is relevant to the issue.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 3587,
          "output_tokens": 139,
          "retry_message": null,
          "completion_cost": 0.012846
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "decompose",
            "file_path": "sympy/integrals/intpoly.py",
            "scratch_pad": "The `decompose()` function currently returns the values of the `poly_dict` dictionary as a list, which can be ordered arbitrarily. This is causing issues since the order affects the outcome of operations that rely on it. To address this, we need to ensure the list is ordered. A straightforward way to achieve this is to sort the keys of the dictionary before returning the values.",
            "instructions": "Update the `decompose()` function to sort the dictionary keys before returning the list of values. This ensures that the order of monomials is consistent and predictable."
          },
          "output": {
            "span_id": "decompose",
            "end_line": 597,
            "file_path": "sympy/integrals/intpoly.py",
            "start_line": 538,
            "instructions": "Update the `decompose()` function to sort the dictionary keys before returning the list of values. This ensures that the order of monomials is consistent and predictable."
          },
          "input_tokens": 3775,
          "output_tokens": 181,
          "retry_message": null,
          "completion_cost": 0.01404
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "decompose",
        "end_line": 597,
        "file_path": "sympy/integrals/intpoly.py",
        "max_tokens": 1000,
        "start_line": 538,
        "temperature": 1.6,
        "instructions": "Update the `decompose()` function to sort the dictionary keys before returning the list of values. This ensures that the order of monomials is consistent and predictable.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```\n<replace>\ndef decompose(expr, separate=False):\n    \"\"\"Decomposes an input polynomial into homogeneous ones of\n    smaller or equal degree.\n    Returns a dictionary with keys as the degree of the smaller\n    constituting polynomials. Values are the constituting polynomials.\n    Parameters\n    ==========\n    expr : Polynomial(SymPy expression)\n\n    Optional Parameters :\n\n    separate : If True then simply return a list of the constituent monomials\n               If not then break up the polynomial into constituent homogeneous\n               polynomials.\n    Examples\n    ========\n    >>> from sympy.abc import x, y\n    >>> from sympy.integrals.intpoly import decompose\n    >>> decompose(x**2 + x*y + x + y + x**3*y**2 + y**5)\n    {1: x + y, 2: x**2 + x*y, 5: x**3*y**2 + y**5}\n    >>> decompose(x**2 + x*y + x + y + x**3*y**2 + y**5, True)\n    [x, y, x**2, y**5, x*y, x**3*y**2]\n    \"\"\"\n    expr = S(expr)\n    poly_dict = {}\n\n    if isinstance(expr, Expr) and not expr.is_number:\n        if expr.is_Symbol:\n            poly_dict[1] = expr\n        elif expr.is_Add:\n            symbols = expr.atoms(Symbol)\n            degrees = [(sum(degree_list(monom, *symbols)), monom)\n                       for monom in expr.args]\n            if separate:\n                monoms = [monom[1] for monom in degrees]\n                return sorted(monoms, key=lambda m: (sum(degree_list(m, *symbols)), m.as_ordered_factors()))\n            else:\n                for monom in degrees:\n                    degree, term = monom\n                    if poly_dict.get(degree):\n                        poly_dict[degree] += term\n                    else:\n                        poly_dict[degree] = term\n        elif expr.is_Pow:\n            _, degree = expr.args\n            poly_dict[degree] = expr\n        else:  # Now expr can only be of `Mul` type\n            degree = 0\n            for term in expr.args:\n                term_type = len(term.args)\n                if term_type == 0 and term.is_Symbol:\n                    degree += 1\n                elif term_type == 2:\n                    degree += term.args[1]\n            poly_dict[degree] = expr\n    else:\n        poly_dict[0] = expr\n\n    if separate:\n        return sorted(poly_dict.values(), key=lambda m: (sum(degree_list(m, *symbols)), m.as_ordered_factors()))\n    return poly_dict\n</replace>"
          },
          "output": {
            "diff": "--- sympy/integrals/intpoly.py\n+++ sympy/integrals/intpoly.py\n@@ -569,7 +569,8 @@\n             degrees = [(sum(degree_list(monom, *symbols)), monom)\n                        for monom in expr.args]\n             if separate:\n-                return [monom[1] for monom in degrees]\n+                monoms = [monom[1] for monom in degrees]\n+                return sorted(monoms, key=lambda m: (sum(degree_list(m, *symbols)), m.as_ordered_factors()))\n             else:\n                 for monom in degrees:\n                     degree, term = monom\n@@ -593,7 +594,7 @@\n         poly_dict[0] = expr\n \n     if separate:\n-        return list(poly_dict.values())\n+        return sorted(poly_dict.values(), key=lambda m: (sum(degree_list(m, *symbols)), m.as_ordered_factors()))\n     return poly_dict\n \n \n",
            "message": "Applied the change to sympy/integrals/intpoly.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 5776,
          "output_tokens": 665,
          "retry_message": null,
          "completion_cost": 0.027303
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sympy/integrals/intpoly.py\n+++ sympy/integrals/intpoly.py\n@@ -569,7 +569,8 @@\n             degrees = [(sum(degree_list(monom, *symbols)), monom)\n                        for monom in expr.args]\n             if separate:\n-                return [monom[1] for monom in degrees]\n+                monoms = [monom[1] for monom in degrees]\n+                return sorted(monoms, key=lambda m: (sum(degree_list(m, *symbols)), m.as_ordered_factors()))\n             else:\n                 for monom in degrees:\n                     degree, term = monom\n@@ -593,7 +594,7 @@\n         poly_dict[0] = expr\n \n     if separate:\n-        return list(poly_dict.values())\n+        return sorted(poly_dict.values(), key=lambda m: (sum(degree_list(m, *symbols)), m.as_ordered_factors()))\n     return poly_dict\n \n \n",
        "model": "deepseek-coder",
        "message": "Applied the change to sympy/integrals/intpoly.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The changes have been applied successfully, and the `decompose()` function now returns a sorted list of monomials. This should resolve the issues with the arbitrary order and prevent future test failures.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The applied change seems appropriate and addresses the issue. The `decompose()` function now returns a sorted list of monomials, ensuring that the order is consistent and predictable. This should resolve the test failures caused by the arbitrary order of the returned list.",
            "instructions": null
          },
          "output": {
            "message": "The changes have been applied successfully, and the `decompose()` function now returns a sorted list of monomials. This should resolve the issues with the arbitrary order and prevent future test failures."
          },
          "input_tokens": 4310,
          "output_tokens": 148,
          "retry_message": null,
          "completion_cost": 0.01515
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The changes have been applied successfully, and the `decompose()` function now returns a sorted list of monomials. This should resolve the issues with the arbitrary order and prevent future test failures.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "decompose() function in intpoly returns a list of arbitrary order\nThe decompose() function, with separate=True, returns `list(poly_dict.values())`, which is ordered arbitrarily.  \r\n\r\nWhat is this used for? It should be sorted somehow, or returning a set (in which case, why not just use the returned dictionary and have the caller take the values). This is causing test failures for me after some changes to the core. \r\n\r\nCC @ArifAhmed1995 @certik \n"
}