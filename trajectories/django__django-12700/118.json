{
  "info": {
    "duration": 145.74331068992615,
    "submission": "diff --git a/django/views/debug.py b/django/views/debug.py\nindex e6b7d4d821..8e77608133 100644\n--- a/django/views/debug.py\n+++ b/django/views/debug.py\n@@ -90,6 +90,8 @@ class SafeExceptionReporterFilter:\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, list):\n+                cleansed = [self.cleanse_setting(key, v) for v in value]\n             else:\n                 cleansed = value\n         except TypeError:\n",
    "total_cost": 0.112347,
    "instance_id": "django__django-12700",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue revolves around the inadequate sanitization of settings in `django.views.debug.SafeExceptionReporterFilter.get_safe_settings()`. Specifically, the `cleanse_setting()` method only handles `dict` types, ignoring other iterable types like lists. This leads to un-cleansed values being returned and exposed. To address this, we need to search for the `cleanse_setting()` method and related functionality in the Django codebase to understand how and where setting values are processed and potentially exposed. Key files and methods to search include `SafeExceptionReporterFilter`, `cleanse_setting()`, and other related functions. Additionally, understanding how settings are structured and accessed, especially in contexts like debug views, is crucial.",
            "search_requests": [
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/django/views/debug.py",
                "function_names": [
                  "cleanse_setting",
                  "get_safe_settings"
                ]
              },
              {
                "query": null,
                "class_names": [
                  "Settings"
                ],
                "code_snippet": null,
                "file_pattern": "**/django/conf/__init__.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 140,
                "span_id": "SafeExceptionReporterFilter.cleanse_setting",
                "file_path": "django/views/debug.py"
              },
              {
                "rank": 0,
                "tokens": 65,
                "span_id": "SafeExceptionReporterFilter.get_safe_settings",
                "file_path": "django/views/debug.py"
              },
              {
                "rank": 0,
                "tokens": 3,
                "span_id": "Settings",
                "file_path": "django/conf/__init__.py"
              },
              {
                "rank": 0,
                "tokens": 441,
                "span_id": "Settings.__init__",
                "file_path": "django/conf/__init__.py"
              },
              {
                "rank": 0,
                "tokens": 15,
                "span_id": "Settings.is_overridden",
                "file_path": "django/conf/__init__.py"
              },
              {
                "rank": 0,
                "tokens": 41,
                "span_id": "Settings.__repr__",
                "file_path": "django/conf/__init__.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/django/views/debug.py",
                "function_names": [
                  "cleanse_setting",
                  "get_safe_settings"
                ]
              },
              {
                "query": null,
                "class_names": [
                  "Settings"
                ],
                "code_snippet": null,
                "file_pattern": "**/django/conf/__init__.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 3302,
          "output_tokens": 260,
          "retry_message": null,
          "completion_cost": 0.013806
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 140,
            "span_id": "SafeExceptionReporterFilter.cleanse_setting",
            "file_path": "django/views/debug.py"
          },
          {
            "rank": 0,
            "tokens": 65,
            "span_id": "SafeExceptionReporterFilter.get_safe_settings",
            "file_path": "django/views/debug.py"
          },
          {
            "rank": 0,
            "tokens": 3,
            "span_id": "Settings",
            "file_path": "django/conf/__init__.py"
          },
          {
            "rank": 0,
            "tokens": 441,
            "span_id": "Settings.__init__",
            "file_path": "django/conf/__init__.py"
          },
          {
            "rank": 0,
            "tokens": 15,
            "span_id": "Settings.is_overridden",
            "file_path": "django/conf/__init__.py"
          },
          {
            "rank": 0,
            "tokens": 41,
            "span_id": "Settings.__repr__",
            "file_path": "django/conf/__init__.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "Analyzing the reported issue, the main concern is about the insufficient cleansing of settings in the Django debug view, particularly regarding types other than dictionaries. The focus is on the method `cleanse_setting` within the `SafeExceptionReporterFilter` class, which currently only handles dictionaries and returns other types as-is, leading to potential security risks. The provided search results include the relevant code spans for this class and method. The code shows `cleanse_setting` treating dictionaries explicitly but not extending the handling to other types of iterables like lists of dictionaries. This aligns with the issue description that other iterable types are not cleansed. Therefore, the identified code spans are directly relevant to addressing the issue of settings not being cleaned sufficiently. This information helps in determining the exact parts of the codebase that need improvement to ensure all sensitive data in settings are properly cleansed.",
            "identified_spans": [
              {
                "span_ids": [
                  "SafeExceptionReporterFilter",
                  "SafeExceptionReporterFilter.cleanse_setting",
                  "SafeExceptionReporterFilter.get_safe_settings"
                ],
                "file_path": "django/views/debug.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3065,
          "output_tokens": 271,
          "retry_message": null,
          "completion_cost": 0.013260000000000001
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The file context provided contains the relevant `SafeExceptionReporterFilter` class along with the `cleanse_setting()` method. This method currently only processes `dict` types, which aligns with the reported issue. The presence of these details allows for a full understanding of the current state of setting sanitization in the Django debug views. A potential next step would be to extend the `cleanse_setting()` method to handle other iterable types, such as lists, to fully address the issue.",
            "search_suggestions": null
          },
          "output": {
            "message": null
          },
          "input_tokens": 1960,
          "output_tokens": 137,
          "retry_message": null,
          "completion_cost": 0.007935
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The initial analysis of the `django/views/debug.py` file reveals the implementation of the `SafeExceptionReporterFilter` class, which includes the `cleanse_setting()` method. This method currently checks if the value is a dictionary and recursively cleanses it. However, it does not handle other types of iterables such as lists. To address the issue, the method needs to be enhanced to handle different iterable types and ensure that sensitive information is properly cleansed. Further investigation is required to identify all instances where settings are processed and exposed. The search should focus on enhancing the `cleanse_setting()` method to handle other iterables and ensuring that all sensitive information is properly sanitized before being exposed.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "Settings"
                ],
                "code_snippet": null,
                "file_pattern": "**/django/conf/__init__.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 3,
                "span_id": "Settings",
                "file_path": "django/conf/__init__.py"
              },
              {
                "rank": 0,
                "tokens": 441,
                "span_id": "Settings.__init__",
                "file_path": "django/conf/__init__.py"
              },
              {
                "rank": 0,
                "tokens": 15,
                "span_id": "Settings.is_overridden",
                "file_path": "django/conf/__init__.py"
              },
              {
                "rank": 0,
                "tokens": 41,
                "span_id": "Settings.__repr__",
                "file_path": "django/conf/__init__.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "Settings"
                ],
                "code_snippet": null,
                "file_pattern": "**/django/conf/__init__.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 4136,
          "output_tokens": 240,
          "retry_message": null,
          "completion_cost": 0.016008
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 3,
            "span_id": "Settings",
            "file_path": "django/conf/__init__.py"
          },
          {
            "rank": 0,
            "tokens": 441,
            "span_id": "Settings.__init__",
            "file_path": "django/conf/__init__.py"
          },
          {
            "rank": 0,
            "tokens": 15,
            "span_id": "Settings.is_overridden",
            "file_path": "django/conf/__init__.py"
          },
          {
            "rank": 0,
            "tokens": 41,
            "span_id": "Settings.__repr__",
            "file_path": "django/conf/__init__.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue concerns the insufficient cleansing of settings in Django's SafeExceptionReporterFilter. Specifically, the issue notes that the cleanse_setting method only handles dictionaries and does not account for other types of iterables, such as lists and nested lists of dictionaries, potentially exposing sensitive information. The user provided an example in settings.py illustrating how un-cleansed values could be returned in the MY_SETTING variable.\n\nIn the provided file_context, the relevant code spans are already identified, specifically in the SafeExceptionReporterFilter class. The cleanse_setting method and the get_safe_settings method are key here. The cleanse_setting method currently only processes dictionaries and leaves other iterable types untouched, which aligns with the reported issue. The get_safe_settings method builds a settings dictionary using the cleanse_setting method, making it also relevant to the issue.\n\nThe new search results provided do not directly contain code spans relevant to the issue of insufficient settings cleansing. The code in django/conf/__init__.py pertains to the lazy loading and configuration of settings, handling of environment variables, and validation of certain settings, but it does not address the specific issue of cleansing different types of iterables within settings. Therefore, these results do not contribute directly to resolving the issue at hand.\n\nBased on the analysis, the current identified spans in the file_context are sufficient and directly relevant to the reported issue, and new search results do not yield additional relevant code spans.",
            "identified_spans": null
          },
          "output": {
            "message": "The search returned 4 results. But unfortunately, I didn\u2019t find any of the search results relevant to the query.\n\nThe reported issue concerns the insufficient cleansing of settings in Django's SafeExceptionReporterFilter. Specifically, the issue notes that the cleanse_setting method only handles dictionaries and does not account for other types of iterables, such as lists and nested lists of dictionaries, potentially exposing sensitive information. The user provided an example in settings.py illustrating how un-cleansed values could be returned in the MY_SETTING variable.\n\nIn the provided file_context, the relevant code spans are already identified, specifically in the SafeExceptionReporterFilter class. The cleanse_setting method and the get_safe_settings method are key here. The cleanse_setting method currently only processes dictionaries and leaves other iterable types untouched, which aligns with the reported issue. The get_safe_settings method builds a settings dictionary using the cleanse_setting method, making it also relevant to the issue.\n\nThe new search results provided do not directly contain code spans relevant to the issue of insufficient settings cleansing. The code in django/conf/__init__.py pertains to the lazy loading and configuration of settings, handling of environment variables, and validation of certain settings, but it does not address the specific issue of cleansing different types of iterables within settings. Therefore, these results do not contribute directly to resolving the issue at hand.\n\nBased on the analysis, the current identified spans in the file_context are sufficient and directly relevant to the reported issue, and new search results do not yield additional relevant code spans."
          },
          "input_tokens": 3059,
          "output_tokens": 328,
          "retry_message": null,
          "completion_cost": 0.014096999999999998
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "The search returned 4 results. But unfortunately, I didn\u2019t find any of the search results relevant to the query.\n\nThe reported issue concerns the insufficient cleansing of settings in Django's SafeExceptionReporterFilter. Specifically, the issue notes that the cleanse_setting method only handles dictionaries and does not account for other types of iterables, such as lists and nested lists of dictionaries, potentially exposing sensitive information. The user provided an example in settings.py illustrating how un-cleansed values could be returned in the MY_SETTING variable.\n\nIn the provided file_context, the relevant code spans are already identified, specifically in the SafeExceptionReporterFilter class. The cleanse_setting method and the get_safe_settings method are key here. The cleanse_setting method currently only processes dictionaries and leaves other iterable types untouched, which aligns with the reported issue. The get_safe_settings method builds a settings dictionary using the cleanse_setting method, making it also relevant to the issue.\n\nThe new search results provided do not directly contain code spans relevant to the issue of insufficient settings cleansing. The code in django/conf/__init__.py pertains to the lazy loading and configuration of settings, handling of environment variables, and validation of certain settings, but it does not address the specific issue of cleansing different types of iterables within settings. Therefore, these results do not contribute directly to resolving the issue at hand.\n\nBased on the analysis, the current identified spans in the file_context are sufficient and directly relevant to the reported issue, and new search results do not yield additional relevant code spans.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "scratch_pad": "Given the detailed analysis and the provided file context, it is clear that the relevant code spans for addressing the issue of insufficient settings cleansing are already identified within the `SafeExceptionReporterFilter` class in the `django/views/debug.py` file. The `cleanse_setting()` method, which is central to the issue, currently only handles dictionaries and does not account for other iterable types such as lists. This confirms the reported issue. The `get_safe_settings()` method, which builds a settings dictionary using `cleanse_setting()`, is also directly relevant. While new search results did not yield further relevant code spans, the existing ones in the provided file context are sufficient to address the issue. Expanding the capability of `cleanse_setting()` to handle different types of iterables and ensuring all sensitive information is properly sanitized is the next logical step.",
            "search_requests": []
          },
          "output": {
            "message": "Given the detailed analysis and the provided file context, it is clear that the relevant code spans for addressing the issue of insufficient settings cleansing are already identified within the `SafeExceptionReporterFilter` class in the `django/views/debug.py` file. The `cleanse_setting()` method, which is central to the issue, currently only handles dictionaries and does not account for other iterable types such as lists. This confirms the reported issue. The `get_safe_settings()` method, which builds a settings dictionary using `cleanse_setting()`, is also directly relevant. While new search results did not yield further relevant code spans, the existing ones in the provided file context are sufficient to address the issue. Expanding the capability of `cleanse_setting()` to handle different types of iterables and ensuring all sensitive information is properly sanitized is the next logical step."
          },
          "input_tokens": 4714,
          "output_tokens": 207,
          "retry_message": null,
          "completion_cost": 0.017247
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "Given the detailed analysis and the provided file context, it is clear that the relevant code spans for addressing the issue of insufficient settings cleansing are already identified within the `SafeExceptionReporterFilter` class in the `django/views/debug.py` file. The `cleanse_setting()` method, which is central to the issue, currently only handles dictionaries and does not account for other iterable types such as lists. This confirms the reported issue. The `get_safe_settings()` method, which builds a settings dictionary using `cleanse_setting()`, is also directly relevant. While new search results did not yield further relevant code spans, the existing ones in the provided file context are sufficient to address the issue. Expanding the capability of `cleanse_setting()` to handle different types of iterables and ensuring all sensitive information is properly sanitized is the next logical step.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "SafeExceptionReporterFilter.cleanse_setting",
            "file_path": "django/views/debug.py",
            "scratch_pad": "The issue requires expanding the capability of `cleanse_setting()` to handle different types of iterables beyond dictionaries. This includes lists and other iterable types that may contain sensitive information. By updating the `cleanse_setting()` method to recursively process these types, we can ensure that all sensitive data is properly sanitized.",
            "instructions": "Update the `cleanse_setting()` method to handle lists and other iterable types by recursively applying the cleansing process to each element. This ensures that any nested structures containing sensitive information are properly sanitized."
          },
          "output": {
            "span_id": "SafeExceptionReporterFilter.cleanse_setting",
            "end_line": 102,
            "file_path": "django/views/debug.py",
            "start_line": 83,
            "instructions": "Update the `cleanse_setting()` method to handle lists and other iterable types by recursively applying the cleansing process to each element. This ensures that any nested structures containing sensitive information are properly sanitized."
          },
          "input_tokens": 2343,
          "output_tokens": 168,
          "retry_message": null,
          "completion_cost": 0.009549
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "SafeExceptionReporterFilter.cleanse_setting",
        "end_line": 102,
        "file_path": "django/views/debug.py",
        "max_tokens": 1000,
        "start_line": 83,
        "temperature": 1.6,
        "instructions": "Update the `cleanse_setting()` method to handle lists and other iterable types by recursively applying the cleansing process to each element. This ensures that any nested structures containing sensitive information are properly sanitized.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\n    def cleanse_setting(self, key, value):\n        \"\"\"\n        Cleanse an individual setting key/value of sensitive content. If the\n        value is a dictionary, recursively cleanse the keys in that dictionary.\n        \"\"\"\n        try:\n            if self.hidden_settings.search(key):\n                cleansed = self.cleansed_substitute\n            elif isinstance(value, dict):\n                cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n            elif isinstance(value, list):\n                cleansed = [self.cleanse_setting(key, v) for v in value]\n            else:\n                cleansed = value\n        except TypeError:\n            # If the key isn't regex-able, just return as-is.\n            cleansed = value\n\n        if callable(cleansed):\n            cleansed = CallableSettingWrapper(cleansed)\n\n        return cleansed\n</replace>"
          },
          "output": {
            "diff": "--- django/views/debug.py\n+++ django/views/debug.py\n@@ -90,6 +90,8 @@\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, list):\n+                cleansed = [self.cleanse_setting(key, v) for v in value]\n             else:\n                 cleansed = value\n         except TypeError:\n",
            "message": "Applied the change to django/views/debug.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 2069,
          "output_tokens": 228,
          "retry_message": null,
          "completion_cost": 0.009627
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- django/views/debug.py\n+++ django/views/debug.py\n@@ -90,6 +90,8 @@\n                 cleansed = self.cleansed_substitute\n             elif isinstance(value, dict):\n                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}\n+            elif isinstance(value, list):\n+                cleansed = [self.cleanse_setting(key, v) for v in value]\n             else:\n                 cleansed = value\n         except TypeError:\n",
        "model": "deepseek-coder",
        "message": "Applied the change to django/views/debug.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue of insufficient settings cleansing has been addressed by enhancing the `cleanse_setting()` method to handle lists and ensure all sensitive data is properly sanitized. No further changes are required.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The change has been successfully applied to handle lists within the `cleanse_setting()` method. This ensures that sensitive information contained in lists is properly sanitized. The code now includes a check for `isinstance(value, list)` and processes each element of the list by recursively calling `cleanse_setting()`. The provided git diff shows the addition of this functionality.",
            "instructions": null
          },
          "output": {
            "message": "The issue of insufficient settings cleansing has been addressed by enhancing the `cleanse_setting()` method to handle lists and ensure all sensitive data is properly sanitized. No further changes are required."
          },
          "input_tokens": 2731,
          "output_tokens": 175,
          "retry_message": null,
          "completion_cost": 0.010818000000000001
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue of insufficient settings cleansing has been addressed by enhancing the `cleanse_setting()` method to handle lists and ensure all sensitive data is properly sanitized. No further changes are required.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Settings are cleaned insufficiently.\nDescription\n\t\nPosting publicly after checking with the rest of the security team.\nI just ran into a case where django.views.debug.SafeExceptionReporterFilter.get_safe_settings() would return several un-cleansed values. Looking at cleanse_setting() I realized that we \u200bonly take care of `dict`s but don't take other types of iterables into account but \u200breturn them as-is.\nExample:\nIn my settings.py I have this:\nMY_SETTING = {\n\t\"foo\": \"value\",\n\t\"secret\": \"value\",\n\t\"token\": \"value\",\n\t\"something\": [\n\t\t{\"foo\": \"value\"},\n\t\t{\"secret\": \"value\"},\n\t\t{\"token\": \"value\"},\n\t],\n\t\"else\": [\n\t\t[\n\t\t\t{\"foo\": \"value\"},\n\t\t\t{\"secret\": \"value\"},\n\t\t\t{\"token\": \"value\"},\n\t\t],\n\t\t[\n\t\t\t{\"foo\": \"value\"},\n\t\t\t{\"secret\": \"value\"},\n\t\t\t{\"token\": \"value\"},\n\t\t],\n\t]\n}\nOn Django 3.0 and below:\n>>> import pprint\n>>> from django.views.debug import get_safe_settings\n>>> pprint.pprint(get_safe_settings()[\"MY_SETTING\"])\n{'else': [[{'foo': 'value'}, {'secret': 'value'}, {'token': 'value'}],\n\t\t [{'foo': 'value'}, {'secret': 'value'}, {'token': 'value'}]],\n 'foo': 'value',\n 'secret': '********************',\n 'something': [{'foo': 'value'}, {'secret': 'value'}, {'token': 'value'}],\n 'token': '********************'}\nOn Django 3.1 and up:\n>>> from django.views.debug import SafeExceptionReporterFilter\n>>> import pprint\n>>> pprint.pprint(SafeExceptionReporterFilter().get_safe_settings()[\"MY_SETTING\"])\n{'else': [[{'foo': 'value'}, {'secret': 'value'}, {'token': 'value'}],\n\t\t [{'foo': 'value'}, {'secret': 'value'}, {'token': 'value'}]],\n 'foo': 'value',\n 'secret': '********************',\n 'something': [{'foo': 'value'}, {'secret': 'value'}, {'token': 'value'}],\n 'token': '********************'}\n"
}