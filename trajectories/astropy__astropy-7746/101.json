{
  "info": {
    "error": "Traceback (most recent call last):\n  File \"/workspace/moatless/moatless-tools/driver/run_moatless.py\", line 89, in run_moatless_core\n    response = loop.run(problem_statement)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/workspace/moatless/moatless-tools/moatless/loop.py\", line 179, in run\n    self._run()\n  File \"/workspace/moatless/moatless-tools/moatless/loop.py\", line 378, in _run\n    action, cost, input_tokens, output_tokens = self._next_action()\n                                                ^^^^^^^^^^^^^^^^^^^\n  File \"/workspace/moatless/moatless-tools/moatless/loop.py\", line 601, in _next_action\n    raise e\n  File \"/workspace/moatless/moatless-tools/moatless/loop.py\", line 587, in _next_action\n    client.chat.completions.create_with_completion(\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/client.py\", line 223, in create_with_completion\n    model = self.create_fn(\n            ^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/patch.py\", line 143, in new_create_sync\n    response = retry_sync(\n               ^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/retry.py\", line 151, in retry_sync\n    for attempt in max_retries:\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/tenacity/__init__.py\", line 443, in __iter__\n    do = self.iter(retry_state=retry_state)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/tenacity/__init__.py\", line 376, in iter\n    result = action(retry_state)\n             ^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/tenacity/__init__.py\", line 418, in exc_check\n    raise retry_exc.reraise()\n          ^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/tenacity/__init__.py\", line 185, in reraise\n    raise self.last_attempt.result()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/concurrent/futures/_base.py\", line 449, in result\n    return self.__get_result()\n           ^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/concurrent/futures/_base.py\", line 401, in __get_result\n    raise self._exception\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/retry.py\", line 175, in retry_sync\n    raise e\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/retry.py\", line 157, in retry_sync\n    return process_response(\n           ^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/process_response.py\", line 144, in process_response\n    model = response_model.from_response(\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/function_calls.py\", line 125, in from_response\n    return cls.parse_json(completion, validation_context, strict)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/function_calls.py\", line 273, in parse_json\n    return cls.model_validate_json(\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/pydantic/main.py\", line 580, in model_validate_json\n    return cls.__pydantic_validator__.validate_json(json_data, strict=strict, context=context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\npydantic_core._pydantic_core.ValidationError: 1 validation error for Search\n  Invalid JSON: key must be a string at line 1 column 2 [type=json_invalid, input_value='{0})\".format(self.naxis)...argument). Instead, {2}', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.7/v/json_invalid\n",
    "duration": 337.1297857761383,
    "submission": "",
    "total_cost": 0.163641,
    "instance_id": "astropy__astropy-7746",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue pertains to handling empty lists/arrays in WCS transformations in the Astropy library. The traceback indicates the error occurs in the 'wcs_pix2world' method of the 'WCS' class within 'astropy/wcs/wcs.py'. To resolve this, the focus should be on identifying where and how empty inputs are handled within this method and potentially other related methods such as '_array_converter' and '_return_list_of_arrays'. Additionally, checking 'WCSPixel2WorldTransform' in 'astropy/visualization/wcsaxes/transforms.py' might provide insight into how transformations are managed, considering it deals with similar pixel-to-world conversions.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "WCS"
                ],
                "code_snippet": null,
                "file_pattern": "**/astropy/wcs/wcs.py",
                "function_names": [
                  "wcs_pix2world",
                  "_array_converter",
                  "_return_list_of_arrays"
                ]
              },
              {
                "query": null,
                "class_names": [
                  "WCSPixel2WorldTransform"
                ],
                "code_snippet": null,
                "file_pattern": "**/astropy/visualization/wcsaxes/transforms.py",
                "function_names": [
                  "transform"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 64,
                "span_id": "WCS.wcs_pix2world",
                "file_path": "astropy/wcs/wcs.py"
              },
              {
                "rank": 0,
                "tokens": 561,
                "span_id": "WCS._array_converter",
                "file_path": "astropy/wcs/wcs.py"
              },
              {
                "rank": 0,
                "tokens": 259,
                "span_id": "WCSPixel2WorldTransform.transform",
                "file_path": "astropy/visualization/wcsaxes/transforms.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "WCS"
                ],
                "code_snippet": null,
                "file_pattern": "**/astropy/wcs/wcs.py",
                "function_names": [
                  "wcs_pix2world",
                  "_array_converter",
                  "_return_list_of_arrays"
                ]
              },
              {
                "query": null,
                "class_names": [
                  "WCSPixel2WorldTransform"
                ],
                "code_snippet": null,
                "file_pattern": "**/astropy/visualization/wcsaxes/transforms.py",
                "function_names": [
                  "transform"
                ]
              }
            ]
          },
          "input_tokens": 3156,
          "output_tokens": 302,
          "retry_message": null,
          "completion_cost": 0.013998
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 64,
            "span_id": "WCS.wcs_pix2world",
            "file_path": "astropy/wcs/wcs.py"
          },
          {
            "rank": 0,
            "tokens": 561,
            "span_id": "WCS._array_converter",
            "file_path": "astropy/wcs/wcs.py"
          },
          {
            "rank": 0,
            "tokens": 259,
            "span_id": "WCSPixel2WorldTransform.transform",
            "file_path": "astropy/visualization/wcsaxes/transforms.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "Analyzing the reported issue, it is clear that the problem arises when passing empty lists/arrays to WCS transformations. The specific method of interest is 'wcs_pix2world'. I reviewed the provided code spans and identified that the 'WCS.wcs_pix2world' method is central to the issue as it handles the transformation from pixel to world coordinates. This method uses '_array_converter' to process the input arrays. Within '_array_converter', the '_return_list_of_arrays' function is responsible for handling multi-dimensional arrays and preparing them for transformation. I also noted that the 'WCS.__init__' constructor is relevant for understanding how WCS objects are initialized, including handling different types of inputs such as FITS files. Thus, these spans appear to be directly relevant to resolving the issue with empty lists/arrays in WCS transformations.",
            "identified_spans": [
              {
                "span_ids": [
                  "WCS.wcs_pix2world",
                  "WCS._array_converter",
                  "WCS.__init__"
                ],
                "file_path": "astropy/wcs/wcs.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4086,
          "output_tokens": 276,
          "retry_message": null,
          "completion_cost": 0.016398
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The file context provided does contain the relevant methods ('wcs_pix2world', '_array_converter', and '_return_list_of_arrays') which are involved in handling WCS transformations and might be related to the issue of handling empty lists/arrays. However, the file context is focused on the initialization and other functionalities of the WCS class rather than the direct handling of empty inputs within these methods. Although relevant code for addressing the issue is present, the context lacks specific details on how empty inputs are managed within the '_array_converter' method.",
            "search_suggestions": "Look into the '_array_converter' method and its helper functions to understand how empty arrays are currently handled and if additional checks or modifications are necessary to prevent the reported error."
          },
          "output": {
            "message": "Look into the '_array_converter' method and its helper functions to understand how empty arrays are currently handled and if additional checks or modifications are necessary to prevent the reported error."
          },
          "input_tokens": 4400,
          "output_tokens": 188,
          "retry_message": null,
          "completion_cost": 0.01602
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look into the '_array_converter' method and its helper functions to understand how empty arrays are currently handled and if additional checks or modifications are necessary to prevent the reported error.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "Based on the provided context, the '_array_converter' method in 'astropy/wcs/wcs.py' handles the conversion of arrays. When the number of arguments is two, it expects a single array and an origin, while with more than two arguments, it expects a 1-D array for each axis followed by an origin. The method already includes checks for the dimensionality of the provided arrays and raises errors when the shapes do not match expected values. To address the issue with empty arrays, the current logic might not explicitly handle zero-length arrays since they still need to be broadcastable to each other, which might not be feasible for empty arrays. Additional checks or modifications may be needed within '_array_converter' and its helper functions to ensure that empty arrays are appropriately handled and do not lead to errors such as 'InconsistentAxisTypesError'.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "WCS"
                ],
                "code_snippet": null,
                "file_pattern": "**/astropy/wcs/wcs.py",
                "function_names": [
                  "_array_converter",
                  "_return_list_of_arrays",
                  "_return_single_array"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 561,
                "span_id": "WCS._array_converter",
                "file_path": "astropy/wcs/wcs.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "WCS"
                ],
                "code_snippet": null,
                "file_pattern": "**/astropy/wcs/wcs.py",
                "function_names": [
                  "_array_converter",
                  "_return_list_of_arrays",
                  "_return_single_array"
                ]
              }
            ]
          },
          "input_tokens": 6298,
          "output_tokens": 307,
          "retry_message": null,
          "completion_cost": 0.023499
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 561,
            "span_id": "WCS._array_converter",
            "file_path": "astropy/wcs/wcs.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves handling empty lists/arrays in WCS transformations, specifically when calling `wcs.wcs_pix2world([], [], 0)`. The error indicates that there is a problem when the input is empty. To resolve this, we need to identify the relevant code sections responsible for this transformation. The file context provided includes several key methods within the `WCS` class, such as `__init__`, `_array_converter`, and `wcs_pix2world`. These methods are crucial for understanding how the WCS transformations are handled. The search results reaffirm these methods and show their implementations. Specifically, `_array_converter` is the method that processes the input arrays and applies the transformation function. The current implementation attempts to stack the input arrays and reshape them, but it does not specifically handle the case when the input arrays are empty. Therefore, the identified relevant code spans are those that handle the array processing and transformation, particularly focusing on where and how empty arrays are dealt with.",
            "identified_spans": [
              {
                "span_ids": [
                  "WCS",
                  "WCS.__init__",
                  "WCS._array_converter",
                  "WCS.wcs_pix2world"
                ],
                "file_path": "astropy/wcs/wcs.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 6342,
          "output_tokens": 311,
          "retry_message": null,
          "completion_cost": 0.023691
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "Based on the provided context, the '_array_converter' method in 'astropy/wcs/wcs.py' handles the conversion of arrays. When the number of arguments is two, it expects a single array and an origin, while with more than two arguments, it expects a 1-D array for each axis followed by an origin. The method already includes checks for the dimensionality of the provided arrays and raises errors when the shapes do not match expected values. To address the issue with empty arrays, the current logic might not explicitly handle zero-length arrays since they still need to be broadcastable to each other, which might not be feasible for empty arrays. Additional checks or modifications may be needed within '_array_converter' and its helper functions to ensure that empty arrays are appropriately handled and do not lead to errors such as 'InconsistentAxisTypesError'.",
            "search_suggestions": null
          },
          "output": {
            "message": null
          },
          "input_tokens": 5267,
          "output_tokens": 216,
          "retry_message": null,
          "completion_cost": 0.019041
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The '_array_converter' method in 'astropy/wcs/wcs.py' is responsible for handling the conversion of arrays between pixel and world coordinates. The method utilizes two helper functions: '_return_list_of_arrays' and '_return_single_array'. The error handling in these functions checks the dimensionality and shape of the provided arrays, ensuring they match the expected values. However, there is no explicit handling for zero-length arrays, which might be causing the 'InconsistentAxisTypesError' when empty arrays are passed to 'wcs_pix2world'. To address this issue, additional checks should be added to '_array_converter' and its helper functions to handle empty arrays appropriately, ensuring they do not lead to errors during the transformation process.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "WCS"
                ],
                "code_snippet": null,
                "file_pattern": "**/astropy/wcs/wcs.py",
                "function_names": [
                  "_array_converter",
                  "_return_list_of_arrays",
                  "_return_single_array"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 561,
                "span_id": "WCS._array_converter",
                "file_path": "astropy/wcs/wcs.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "WCS"
                ],
                "code_snippet": null,
                "file_pattern": "**/astropy/wcs/wcs.py",
                "function_names": [
                  "_array_converter",
                  "_return_list_of_arrays",
                  "_return_single_array"
                ]
              }
            ]
          },
          "input_tokens": 7448,
          "output_tokens": 288,
          "retry_message": null,
          "completion_cost": 0.026664
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 561,
            "span_id": "WCS._array_converter",
            "file_path": "astropy/wcs/wcs.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves handling empty lists/arrays when performing WCS transformations using the 'wcs_pix2world' method. The error indicates that passing empty lists should not fail but instead should return empty lists/arrays. Based on the file context and search results, the relevant code spans are identified within the 'WCS' class methods 'wcs_pix2world' and '_array_converter'. The '_array_converter' method is responsible for converting arrays and handling the transformation logic, which includes handling the case where the input arrays might be empty. Therefore, the identified code spans are critical for addressing the issue as they directly deal with the transformation process and error handling. Both methods are already included in the file context, so no new code spans are added from the search results.",
            "identified_spans": null
          },
          "output": {
            "message": "The search returned 1 results. But unfortunately, I didn\u2019t find any of the search results relevant to the query.\n\nThe reported issue involves handling empty lists/arrays when performing WCS transformations using the 'wcs_pix2world' method. The error indicates that passing empty lists should not fail but instead should return empty lists/arrays. Based on the file context and search results, the relevant code spans are identified within the 'WCS' class methods 'wcs_pix2world' and '_array_converter'. The '_array_converter' method is responsible for converting arrays and handling the transformation logic, which includes handling the case where the input arrays might be empty. Therefore, the identified code spans are critical for addressing the issue as they directly deal with the transformation process and error handling. Both methods are already included in the file context, so no new code spans are added from the search results."
          },
          "input_tokens": 7190,
          "output_tokens": 184,
          "retry_message": null,
          "completion_cost": 0.024329999999999997
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "The search returned 1 results. But unfortunately, I didn\u2019t find any of the search results relevant to the query.\n\nThe reported issue involves handling empty lists/arrays when performing WCS transformations using the 'wcs_pix2world' method. The error indicates that passing empty lists should not fail but instead should return empty lists/arrays. Based on the file context and search results, the relevant code spans are identified within the 'WCS' class methods 'wcs_pix2world' and '_array_converter'. The '_array_converter' method is responsible for converting arrays and handling the transformation logic, which includes handling the case where the input arrays might be empty. Therefore, the identified code spans are critical for addressing the issue as they directly deal with the transformation process and error handling. Both methods are already included in the file context, so no new code spans are added from the search results.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": []
    }
  ],
  "initial_message": "Issue when passing empty lists/arrays to WCS transformations\nThe following should not fail but instead should return empty lists/arrays:\r\n\r\n```\r\nIn [1]: from astropy.wcs import WCS\r\n\r\nIn [2]: wcs = WCS('2MASS_h.fits')\r\n\r\nIn [3]: wcs.wcs_pix2world([], [], 0)\r\n---------------------------------------------------------------------------\r\nInconsistentAxisTypesError                Traceback (most recent call last)\r\n<ipython-input-3-e2cc0e97941a> in <module>()\r\n----> 1 wcs.wcs_pix2world([], [], 0)\r\n\r\n~/Dropbox/Code/Astropy/astropy/astropy/wcs/wcs.py in wcs_pix2world(self, *args, **kwargs)\r\n   1352         return self._array_converter(\r\n   1353             lambda xy, o: self.wcs.p2s(xy, o)['world'],\r\n-> 1354             'output', *args, **kwargs)\r\n   1355     wcs_pix2world.__doc__ = \"\"\"\r\n   1356         Transforms pixel coordinates to world coordinates by doing\r\n\r\n~/Dropbox/Code/Astropy/astropy/astropy/wcs/wcs.py in _array_converter(self, func, sky, ra_dec_order, *args)\r\n   1267                     \"a 1-D array for each axis, followed by an origin.\")\r\n   1268 \r\n-> 1269             return _return_list_of_arrays(axes, origin)\r\n   1270 \r\n   1271         raise TypeError(\r\n\r\n~/Dropbox/Code/Astropy/astropy/astropy/wcs/wcs.py in _return_list_of_arrays(axes, origin)\r\n   1223             if ra_dec_order and sky == 'input':\r\n   1224                 xy = self._denormalize_sky(xy)\r\n-> 1225             output = func(xy, origin)\r\n   1226             if ra_dec_order and sky == 'output':\r\n   1227                 output = self._normalize_sky(output)\r\n\r\n~/Dropbox/Code/Astropy/astropy/astropy/wcs/wcs.py in <lambda>(xy, o)\r\n   1351             raise ValueError(\"No basic WCS settings were created.\")\r\n   1352         return self._array_converter(\r\n-> 1353             lambda xy, o: self.wcs.p2s(xy, o)['world'],\r\n   1354             'output', *args, **kwargs)\r\n   1355     wcs_pix2world.__doc__ = \"\"\"\r\n\r\nInconsistentAxisTypesError: ERROR 4 in wcsp2s() at line 2646 of file cextern/wcslib/C/wcs.c:\r\nncoord and/or nelem inconsistent with the wcsprm.\r\n```\n"
}