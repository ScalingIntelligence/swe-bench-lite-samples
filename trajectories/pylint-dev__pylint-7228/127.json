{
  "info": {
    "duration": 223.1679298877716,
    "submission": "",
    "total_cost": 0.14793,
    "instance_id": "pylint-dev__pylint-7228",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The error occurs when using a regular expression pattern in the .pylintrc file that includes '\\p{Han}', which is not supported by Python's re module. This could be related to how Pylint handles configuration file parsing and regular expression compilation. The search should focus on Pylint's configuration and regex processing components.",
            "search_requests": [
              {
                "query": "error when using regular expression pattern in configuration file",
                "class_names": [],
                "code_snippet": "function-rgx=[\\p{Han}a-z_][\\p{Han}a-z0-9_]{2,30}$",
                "file_pattern": "**/pylint/config/**/*.py",
                "function_names": [
                  "_parse_configuration_file",
                  "compile"
                ]
              }
            ]
          },
          "output": null,
          "input_tokens": 4777,
          "output_tokens": 202,
          "retry_message": "\n\nUnfortunately, I didn\u2019t find any relevant results.",
          "completion_cost": 0.017361
        },
        {
          "action": {
            "complete": false,
            "scratch_pad": "No results were found initially, suggesting that the issue might be in the wider context of how Pylint handles configuration file parsing and regular expression compilation, rather than a specific area of the configuration handling. Expanding the search to include more general components that could be involved in parsing or compiling regular expressions might uncover the relevant code.",
            "search_requests": [
              {
                "query": "parsing configuration file regular expression",
                "class_names": [],
                "code_snippet": "function-rgx=[\\p{Han}a-z_][\\p{Han}a-z0-9_]{2,30}$",
                "file_pattern": "**/*.py",
                "function_names": [
                  "_parse_configuration_file",
                  "compile"
                ]
              },
              {
                "query": "handling regular expressions",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pylint/checkers/**/*.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 101,
                "span_id": "EncodingChecker.open",
                "file_path": "pylint/checkers/misc.py"
              },
              {
                "rank": 1,
                "tokens": 137,
                "span_id": "NameChecker.open",
                "file_path": "pylint/checkers/base/name_checker/checker.py"
              },
              {
                "rank": 3,
                "tokens": 224,
                "span_id": "NameChecker._create_naming_rules",
                "file_path": "pylint/checkers/base/name_checker/checker.py"
              },
              {
                "rank": 10,
                "tokens": 901,
                "span_id": "NameChecker",
                "file_path": "pylint/checkers/base/name_checker/checker.py"
              },
              {
                "rank": 2,
                "tokens": 389,
                "span_id": "docstring",
                "file_path": "pylint/checkers/__init__.py"
              },
              {
                "rank": 4,
                "tokens": 274,
                "span_id": "docstring",
                "file_path": "pylint/checkers/base/__init__.py"
              },
              {
                "rank": 4,
                "tokens": 73,
                "span_id": "register",
                "file_path": "pylint/checkers/base/__init__.py"
              },
              {
                "rank": 5,
                "tokens": 115,
                "span_id": "FormatChecker.check_line_length",
                "file_path": "pylint/checkers/format.py"
              },
              {
                "rank": 6,
                "tokens": 869,
                "span_id": "FormatChecker.process_tokens",
                "file_path": "pylint/checkers/format.py"
              },
              {
                "rank": 7,
                "tokens": 94,
                "span_id": "FormatChecker.is_line_length_check_activated",
                "file_path": "pylint/checkers/format.py"
              },
              {
                "rank": 7,
                "tokens": 72,
                "span_id": "FormatChecker.remove_pylint_option_from_lines",
                "file_path": "pylint/checkers/format.py"
              },
              {
                "rank": 8,
                "tokens": 121,
                "span_id": "UnicodeChecker._check_invalid_chars",
                "file_path": "pylint/checkers/unicode.py"
              },
              {
                "rank": 9,
                "tokens": 141,
                "span_id": "NamingStyle.get_regex",
                "file_path": "pylint/checkers/base/name_checker/naming_style.py"
              }
            ],
            "search_requests": [
              {
                "query": "parsing configuration file regular expression",
                "class_names": [],
                "code_snippet": "function-rgx=[\\p{Han}a-z_][\\p{Han}a-z0-9_]{2,30}$",
                "file_pattern": "**/*.py",
                "function_names": [
                  "_parse_configuration_file",
                  "compile"
                ]
              },
              {
                "query": "handling regular expressions",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pylint/checkers/**/*.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 5012,
          "output_tokens": 257,
          "retry_message": null,
          "completion_cost": 0.018891
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 101,
            "span_id": "EncodingChecker.open",
            "file_path": "pylint/checkers/misc.py"
          },
          {
            "rank": 1,
            "tokens": 137,
            "span_id": "NameChecker.open",
            "file_path": "pylint/checkers/base/name_checker/checker.py"
          },
          {
            "rank": 3,
            "tokens": 224,
            "span_id": "NameChecker._create_naming_rules",
            "file_path": "pylint/checkers/base/name_checker/checker.py"
          },
          {
            "rank": 10,
            "tokens": 901,
            "span_id": "NameChecker",
            "file_path": "pylint/checkers/base/name_checker/checker.py"
          },
          {
            "rank": 2,
            "tokens": 389,
            "span_id": "docstring",
            "file_path": "pylint/checkers/__init__.py"
          },
          {
            "rank": 4,
            "tokens": 274,
            "span_id": "docstring",
            "file_path": "pylint/checkers/base/__init__.py"
          },
          {
            "rank": 4,
            "tokens": 73,
            "span_id": "register",
            "file_path": "pylint/checkers/base/__init__.py"
          },
          {
            "rank": 5,
            "tokens": 115,
            "span_id": "FormatChecker.check_line_length",
            "file_path": "pylint/checkers/format.py"
          },
          {
            "rank": 6,
            "tokens": 869,
            "span_id": "FormatChecker.process_tokens",
            "file_path": "pylint/checkers/format.py"
          },
          {
            "rank": 7,
            "tokens": 94,
            "span_id": "FormatChecker.is_line_length_check_activated",
            "file_path": "pylint/checkers/format.py"
          },
          {
            "rank": 7,
            "tokens": 72,
            "span_id": "FormatChecker.remove_pylint_option_from_lines",
            "file_path": "pylint/checkers/format.py"
          },
          {
            "rank": 8,
            "tokens": 121,
            "span_id": "UnicodeChecker._check_invalid_chars",
            "file_path": "pylint/checkers/unicode.py"
          },
          {
            "rank": 9,
            "tokens": 141,
            "span_id": "NamingStyle.get_regex",
            "file_path": "pylint/checkers/base/name_checker/naming_style.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about using a regex pattern in the `.pylintrc` configuration file that includes `\\p{Han}` which causes an error. This regex pattern is related to naming conventions in Pylint, specifically the `function-rgx` configuration option. After analyzing the search results, it's evident that the relevant files and code spans are those that deal with name checking and regex handling in the Pylint configuration. Files like `pylint/checkers/base/name_checker/checker.py` and `pylint/checkers/misc.py` are particularly relevant. The spans in these files that are related to regex handling and name checking are `NameChecker` class, especially the `open` and `_create_naming_rules` methods, and the `EncodingChecker` class, specifically the `open` method. These sections of the code parse and compile regex patterns as part of the configuration setup, which is directly related to the issue reported.",
            "identified_spans": [
              {
                "span_ids": [
                  "EncodingChecker.open"
                ],
                "file_path": "pylint/checkers/misc.py"
              },
              {
                "span_ids": [
                  "NameChecker",
                  "NameChecker.open",
                  "NameChecker._create_naming_rules"
                ],
                "file_path": "pylint/checkers/base/name_checker/checker.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 7421,
          "output_tokens": 347,
          "retry_message": null,
          "completion_cost": 0.027468000000000003
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "Upon analyzing the issue, it appears that the reported problem is related to the correct usage of regular expressions within the pylint configuration file. However, the provided file context does not include the specific file or section of code that is directly responsible for parsing or validating these regular expressions from the configuration file. Thus, it's challenging to directly relate the reported issue to the available code without the exact component that handles the configuration parsing and regex validation. It is advised to further inspect the parts of the codebase responsible for configuration file parsing and regex compilation to find the direct relevance to this issue.",
            "search_suggestions": "Look for files and methods containing 'config','configuration', 'ini', 'parse', 'parser', 'regex', 're', 'compile', 'pylintrc', and 'pattern' to find the part of the codebase that parses the pylint configuration file and handles the compilation of its regular expressions."
          },
          "output": {
            "message": "Look for files and methods containing 'config','configuration', 'ini', 'parse', 'parser', 'regex', 're', 'compile', 'pylintrc', and 'pattern' to find the part of the codebase that parses the pylint configuration file and handles the compilation of its regular expressions."
          },
          "input_tokens": 4734,
          "output_tokens": 218,
          "retry_message": null,
          "completion_cost": 0.017472
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look for files and methods containing 'config','configuration', 'ini', 'parse', 'parser', 'regex', 're', 'compile', 'pylintrc', and 'pattern' to find the part of the codebase that parses the pylint configuration file and handles the compilation of its regular expressions.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The provided file context suggests that the relevant code for parsing and handling the pylint configuration file and its regular expressions might be found in modules dealing with config parsing (such as those containing 'config','configuration', 'ini', 'parse', 'parser') or in modules directly responsible for regular expression handling ('regex', 're', 'compile'). Since the context provided is from the 'pylint/checkers' directory, it's plausible that the configuration parsing logic could be situated in a dedicated module for configuration handling or within the pylint core module handling configuration or options. The specific methods '_parse_configuration_file' and 'compile' were mentioned, indicating that these could be crucial points of interest within the codebase.",
            "search_requests": [
              {
                "query": "parsing configuration file regular expression",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/config/**/*.py",
                "function_names": [
                  "_parse_configuration_file",
                  "compile"
                ]
              },
              {
                "query": "handling pylint configuration regex",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pylint/**/*.py",
                "function_names": [
                  "_parse_configuration_file",
                  "compile"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 16,
                "tokens": 94,
                "span_id": "_ArgumentsManager._parse_configuration_file",
                "file_path": "pylint/config/arguments_manager.py"
              },
              {
                "rank": 80,
                "tokens": 94,
                "span_id": "_ArgumentsManager._parse_configuration_file",
                "file_path": "pylint/config/arguments_manager.py"
              }
            ],
            "search_requests": [
              {
                "query": "parsing configuration file regular expression",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/config/**/*.py",
                "function_names": [
                  "_parse_configuration_file",
                  "compile"
                ]
              },
              {
                "query": "handling pylint configuration regex",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pylint/**/*.py",
                "function_names": [
                  "_parse_configuration_file",
                  "compile"
                ]
              }
            ]
          },
          "input_tokens": 7293,
          "output_tokens": 328,
          "retry_message": null,
          "completion_cost": 0.026799
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 16,
            "tokens": 94,
            "span_id": "_ArgumentsManager._parse_configuration_file",
            "file_path": "pylint/config/arguments_manager.py"
          },
          {
            "rank": 80,
            "tokens": 94,
            "span_id": "_ArgumentsManager._parse_configuration_file",
            "file_path": "pylint/config/arguments_manager.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The issue reported involves the regex pattern '\\p{Han}' in the .pylintrc configuration file causing an error during the pylint execution. The regex pattern is intended to include Han characters in the function name pattern. Both provided contexts and search results relate to the processing of configuration files and regex patterns in pylint. In particular, the search results include a method '_parse_configuration_file' in the '_ArgumentsManager' class, which seems highly relevant as it involves parsing and handling arguments from configuration files. This method likely interacts directly with the regex patterns defined in the configuration, making it a potential location for the error handling and resolution.\n\nGiven the context and search results, the '_parse_configuration_file' method and its surrounding code are identified as highly relevant for addressing the issue since it parses the configuration settings from the .pylintrc file, which includes the regex pattern causing the error. Therefore, focusing on enhancing error handling or providing informative messages within this method about regex pattern issues could potentially resolve the reported problem.",
            "identified_spans": [
              {
                "span_ids": [
                  "_ArgumentsManager._parse_configuration_file"
                ],
                "file_path": "pylint/config/arguments_manager.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 5429,
          "output_tokens": 287,
          "retry_message": null,
          "completion_cost": 0.020592
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The provided file context does not directly contain the piece of code that is causing the error, specifically the part where the regular expression in the .pylintrc file is being parsed or compiled. The file context provided includes checkers and configuration management files, which are related to the broader pylint functionality, but not the specific parsing of the .pylintrc file or the handling of regular expressions. It's plausible that the error is occurring at a deeper level in the config parsing, potentially in a different module not included in the context. Therefore, while these files are relevant to the overall pylint configuration and checkers, they do not specifically address the reported issue of the bad escape error in the regex compilation from the .pylintrc file.",
            "search_suggestions": "Look in the pylint core module or in a dedicated configuration handling module for methods or functions related to parsing configuration files and compiling regular expressions."
          },
          "output": {
            "message": "Look in the pylint core module or in a dedicated configuration handling module for methods or functions related to parsing configuration files and compiling regular expressions."
          },
          "input_tokens": 5364,
          "output_tokens": 217,
          "retry_message": null,
          "completion_cost": 0.019347000000000003
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look in the pylint core module or in a dedicated configuration handling module for methods or functions related to parsing configuration files and compiling regular expressions.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The error indicates that a variable expected to be iterable is None, which might be happening due to race conditions or missing checks under high load. Investigate the file upload logic to ensure all necessary checks are in place and improve concurrency handling.",
            "search_requests": []
          },
          "output": null,
          "input_tokens": 8729,
          "output_tokens": 95,
          "retry_message": "\n\nUnfortunately, I didn\u2019t find any relevant results.",
          "completion_cost": 0.027612
        },
        {
          "action": {
            "complete": false,
            "scratch_pad": "Given the complexity of the problem and the absence of immediate hits in the code base, it's essential to widen the net for our search. The issue at hand involves Pylint's handling of configuration files and specifically the compilation of regular expressions during this process. Since our initial focus on specific modules hasn't yielded results, we should now cast a wider net across the Pylint core functionality and potentially broader Python stdlib modules that might play a role in parsing config files or compiling regexes.",
            "search_requests": [
              {
                "query": "handles config file parsing regex compilation",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pylint/**/*.py",
                "function_names": [
                  "compile"
                ]
              },
              {
                "query": "parses config files compiles regexes",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/lib/python*/site-packages/**/*.py",
                "function_names": [
                  "compile"
                ]
              }
            ]
          },
          "output": null,
          "input_tokens": 8300,
          "output_tokens": 277,
          "retry_message": "\n\nUnfortunately, I didn\u2019t find any relevant results.",
          "completion_cost": 0.029055
        },
        {
          "action": {
            "complete": false,
            "scratch_pad": "Despite broadening the search parameters, relevant results still elude us. It's possible that the issue is either deeply embedded in Pylint's core processing or that our search parameters are still too specific for the actual underlying cause. Given this, my recommendation is to refine the search by focusing on how Pylint internally manages configurations and possible error handling during regex compilation. Expand the search to include Pylint's internal error handling mechanisms and configuration management across its different components.",
            "search_requests": [
              {
                "query": "config management error handling regex compilation",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pylint/lint/**/*.py",
                "function_names": [
                  "handle_error",
                  "compile"
                ]
              },
              {
                "query": "configuration internal management regex processing errors",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pylint/config/**/*.py",
                "function_names": [
                  "process_config",
                  "compile"
                ]
              }
            ]
          },
          "output": null,
          "input_tokens": 8595,
          "output_tokens": 284,
          "retry_message": "\n\nUnfortunately, I didn\u2019t find any relevant results.",
          "completion_cost": 0.030045000000000002
        }
      ]
    }
  ],
  "initial_message": "rxg include '\\p{Han}' will throw error\n### Bug description\r\n\r\nconfig rxg in pylintrc with \\p{Han} will throw err\r\n\r\n### Configuration\r\n.pylintrc:\r\n\r\n```ini\r\nfunction-rgx=[\\p{Han}a-z_][\\p{Han}a-z0-9_]{2,30}$\r\n```\r\n\r\n### Command used\r\n\r\n```shell\r\npylint\r\n```\r\n\r\n\r\n### Pylint output\r\n\r\n```shell\r\n(venvtest) tsung-hande-MacBook-Pro:robot_is_comming tsung-han$ pylint\r\nTraceback (most recent call last):\r\n  File \"/Users/tsung-han/PycharmProjects/robot_is_comming/venvtest/bin/pylint\", line 8, in <module>\r\n    sys.exit(run_pylint())\r\n  File \"/Users/tsung-han/PycharmProjects/robot_is_comming/venvtest/lib/python3.9/site-packages/pylint/__init__.py\", line 25, in run_pylint\r\n    PylintRun(argv or sys.argv[1:])\r\n  File \"/Users/tsung-han/PycharmProjects/robot_is_comming/venvtest/lib/python3.9/site-packages/pylint/lint/run.py\", line 161, in __init__\r\n    args = _config_initialization(\r\n  File \"/Users/tsung-han/PycharmProjects/robot_is_comming/venvtest/lib/python3.9/site-packages/pylint/config/config_initialization.py\", line 57, in _config_initialization\r\n    linter._parse_configuration_file(config_args)\r\n  File \"/Users/tsung-han/PycharmProjects/robot_is_comming/venvtest/lib/python3.9/site-packages/pylint/config/arguments_manager.py\", line 244, in _parse_configuration_file\r\n    self.config, parsed_args = self._arg_parser.parse_known_args(\r\n  File \"/usr/local/Cellar/python@3.9/3.9.13_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/argparse.py\", line 1858, in parse_known_args\r\n    namespace, args = self._parse_known_args(args, namespace)\r\n  File \"/usr/local/Cellar/python@3.9/3.9.13_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/argparse.py\", line 2067, in _parse_known_args\r\n    start_index = consume_optional(start_index)\r\n  File \"/usr/local/Cellar/python@3.9/3.9.13_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/argparse.py\", line 2007, in consume_optional\r\n    take_action(action, args, option_string)\r\n  File \"/usr/local/Cellar/python@3.9/3.9.13_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/argparse.py\", line 1919, in take_action\r\n    argument_values = self._get_values(action, argument_strings)\r\n  File \"/usr/local/Cellar/python@3.9/3.9.13_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/argparse.py\", line 2450, in _get_values\r\n    value = self._get_value(action, arg_string)\r\n  File \"/usr/local/Cellar/python@3.9/3.9.13_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/argparse.py\", line 2483, in _get_value\r\n    result = type_func(arg_string)\r\n  File \"/usr/local/Cellar/python@3.9/3.9.13_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/re.py\", line 252, in compile\r\n    return _compile(pattern, flags)\r\n  File \"/usr/local/Cellar/python@3.9/3.9.13_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/re.py\", line 304, in _compile\r\n    p = sre_compile.compile(pattern, flags)\r\n  File \"/usr/local/Cellar/python@3.9/3.9.13_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/sre_compile.py\", line 788, in compile\r\n    p = sre_parse.parse(p, flags)\r\n  File \"/usr/local/Cellar/python@3.9/3.9.13_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/sre_parse.py\", line 955, in parse\r\n    p = _parse_sub(source, state, flags & SRE_FLAG_VERBOSE, 0)\r\n  File \"/usr/local/Cellar/python@3.9/3.9.13_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/sre_parse.py\", line 444, in _parse_sub\r\n    itemsappend(_parse(source, state, verbose, nested + 1,\r\n  File \"/usr/local/Cellar/python@3.9/3.9.13_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/sre_parse.py\", line 555, in _parse\r\n    code1 = _class_escape(source, this)\r\n  File \"/usr/local/Cellar/python@3.9/3.9.13_1/Frameworks/Python.framework/Versions/3.9/lib/python3.9/sre_parse.py\", line 350, in _class_escape\r\n    raise source.error('bad escape %s' % escape, len(escape))\r\nre.error: bad escape \\p at position 1\r\n```\r\n\r\n### Expected behavior\r\n\r\nnot throw error\r\n\r\n### Pylint version\r\n\r\n```shell\r\npylint 2.14.4\r\nastroid 2.11.7\r\nPython 3.9.13 (main, May 24 2022, 21:28:44) \r\n[Clang 13.0.0 (clang-1300.0.29.30)]\r\n```\r\n\r\n\r\n### OS / Environment\r\n\r\nmacOS 11.6.7\r\n\n"
}