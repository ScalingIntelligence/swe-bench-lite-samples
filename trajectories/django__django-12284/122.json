{
  "info": {
    "duration": 234.64688801765442,
    "submission": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 8ea6c05ef9..e11dd52fd9 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -946,6 +946,9 @@ class Model(metaclass=ModelBase):\n     def _get_FIELD_display(self, field):\n         value = getattr(self, field.attname)\n         choices_dict = dict(make_hashable(field.flatchoices))\n+        # Dynamically fetch the choices from the actual model instance\n+        if self.__class__ != field.model:\n+            choices_dict = dict(make_hashable(self.__class__._meta.get_field(field.name).flatchoices))\n         # force_str() to coerce lazy strings.\n         return force_str(choices_dict.get(make_hashable(value), value), strings_only=True)\n \n",
    "total_cost": 0.2589,
    "instance_id": "django__django-12284",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue describes a problem with the method `get_foo_display()` not functioning correctly with inherited choices in Django models. Specifically, when a child model extends a base model and overrides the `foo_choice` attribute with additional tuples, the method fails to return the correct display value for the new choices added. To address this, we need to investigate the `Model` class and the method `_get_FIELD_display` within it, as well as any related handling of choices in model fields.",
            "search_requests": [
              {
                "query": "handling of choices in model fields",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/models/**/*.py",
                "function_names": [
                  "_get_FIELD_display"
                ]
              },
              {
                "query": "method to get display value for choices",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/models/**/*.py",
                "function_names": [
                  "get_choices"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 4,
                "tokens": 57,
                "span_id": "Model._get_FIELD_display",
                "file_path": "django/db/models/base.py"
              },
              {
                "rank": 1,
                "tokens": 213,
                "span_id": "Field.get_choices",
                "file_path": "django/db/models/fields/__init__.py"
              },
              {
                "rank": 2,
                "tokens": 144,
                "span_id": "ForeignObjectRel.get_choices",
                "file_path": "django/db/models/fields/reverse_related.py"
              }
            ],
            "search_requests": [
              {
                "query": "handling of choices in model fields",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/models/**/*.py",
                "function_names": [
                  "_get_FIELD_display"
                ]
              },
              {
                "query": "method to get display value for choices",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/models/**/*.py",
                "function_names": [
                  "get_choices"
                ]
              }
            ]
          },
          "input_tokens": 3176,
          "output_tokens": 245,
          "retry_message": null,
          "completion_cost": 0.013203
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 4,
            "tokens": 57,
            "span_id": "Model._get_FIELD_display",
            "file_path": "django/db/models/base.py"
          },
          {
            "rank": 1,
            "tokens": 213,
            "span_id": "Field.get_choices",
            "file_path": "django/db/models/fields/__init__.py"
          },
          {
            "rank": 2,
            "tokens": 144,
            "span_id": "ForeignObjectRel.get_choices",
            "file_path": "django/db/models/fields/reverse_related.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about the `Model.get_FOO_display()` method not working correctly with inherited choices. The user identifies that the method works for the choices inherited from the base model but fails for the new choices added in the child model. This suggests that the issue is related to how the choices are being handled in the `_get_FIELD_display` method, specifically when the choices are overridden in the child model. The search results include relevant code spans from the Django source code: 1. The `Model` class definition and the `_get_FIELD_display` method implementation in `django/db/models/base.py`. 2. The `Field` class definition and the `get_choices` method in `django/db/models/fields/__init__.py`. 3. The `ForeignObjectRel` class definition and the `get_choices` method in `django/db/models/fields/reverse_related.py`. All these spans are relevant because they deal with how choices are managed and how the display value is retrieved for a field, especially in the context of inherited models and fields with choices. The identified spans cover the necessary code paths to understand and potentially resolve the issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "Model",
                  "Model._get_FIELD_display"
                ],
                "file_path": "django/db/models/base.py"
              },
              {
                "span_ids": [
                  "Field",
                  "Field.__init__",
                  "Field.get_choices"
                ],
                "file_path": "django/db/models/fields/__init__.py"
              },
              {
                "span_ids": [
                  "ForeignObjectRel",
                  "ForeignObjectRel.__init__",
                  "ForeignObjectRel.get_choices"
                ],
                "file_path": "django/db/models/fields/reverse_related.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4304,
          "output_tokens": 457,
          "retry_message": null,
          "completion_cost": 0.019767
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The issue raised pertains to the method `get_foo_display()` in Django's `Model` class not functioning correctly with inherited choices. Specifically, when a child model extends a base model and adds new choices, the method fails to return the correct display value for these new choices. Upon reviewing the provided file context, I can confirm that the relevant code for handling choices and displaying them, particularly the `_get_FIELD_display` method in the `Model` class, is indeed present. This method is responsible for fetching the display value of a field based on its choices. The context also includes the `Field` class and its subclasses, where the `choices` attribute is defined, which corroborates the existence of the essential components related to this issue. However, the specific problem highlighted about inherited choices not being handled correctly requires deeper inspection of how choices are managed and overridden in child models, possibly involving nuances in how Django handles model inheritance and field overrides. Given the provided context, it does not explicitly cover the intricate details of model inheritance and choice handling, suggesting that additional relevant code may be located elsewhere in the Django codebase to fully address the reported issue. Thus, while the core components for handling choices and displaying them are identified in the provided context, more context might be needed to address the specific problem of inherited choices not working as expected.",
            "search_suggestions": "Consider exploring the Django codebase related to model inheritance, particularly how Django handles field overrides in child models, and how choices are managed in the context of model inheritance. Additionally, examining the `Model` class's `_get_FIELD_display` method more deeply to understand how it processes choices from inherited models could provide further insights."
          },
          "output": {
            "message": "Consider exploring the Django codebase related to model inheritance, particularly how Django handles field overrides in child models, and how choices are managed in the context of model inheritance. Additionally, examining the `Model` class's `_get_FIELD_display` method more deeply to understand how it processes choices from inherited models could provide further insights."
          },
          "input_tokens": 5571,
          "output_tokens": 379,
          "retry_message": null,
          "completion_cost": 0.022397999999999998
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Consider exploring the Django codebase related to model inheritance, particularly how Django handles field overrides in child models, and how choices are managed in the context of model inheritance. Additionally, examining the `Model` class's `_get_FIELD_display` method more deeply to understand how it processes choices from inherited models could provide further insights.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue is related to how Django's Model class handles field choices in inherited models. There is a specific method `_get_FIELD_display` that needs to be examined to understand its behavior with inherited choices. Additionally, we need to investigate the `Field` class and its instances to see how choices are managed and overridden in model inheritance scenarios.",
            "search_requests": [
              {
                "query": "handling inherited field choices in Model class",
                "class_names": [
                  "Model"
                ],
                "code_snippet": null,
                "file_pattern": "**/models/**/*.py",
                "function_names": [
                  "_get_FIELD_display"
                ]
              },
              {
                "query": "overriding choices in Field subclasses",
                "class_names": [
                  "Field"
                ],
                "code_snippet": "self.choices = choices",
                "file_pattern": "**/models/**/*.py",
                "function_names": [
                  "__init__"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 2,
                "tokens": 6,
                "span_id": "Model:8",
                "file_path": "django/db/models/base.py"
              },
              {
                "rank": 2,
                "tokens": 76,
                "span_id": "Model._do_insert",
                "file_path": "django/db/models/base.py"
              },
              {
                "rank": 2,
                "tokens": 92,
                "span_id": "Model.delete",
                "file_path": "django/db/models/base.py"
              },
              {
                "rank": 2,
                "tokens": 57,
                "span_id": "Model._get_FIELD_display",
                "file_path": "django/db/models/base.py"
              },
              {
                "rank": 4,
                "tokens": 314,
                "span_id": "Model._check_local_fields",
                "file_path": "django/db/models/base.py"
              },
              {
                "rank": 7,
                "tokens": 189,
                "span_id": "Model._get_next_or_previous_by_FIELD",
                "file_path": "django/db/models/base.py"
              },
              {
                "rank": 11,
                "tokens": 137,
                "span_id": "Model.serializable_value",
                "file_path": "django/db/models/base.py"
              },
              {
                "rank": 17,
                "tokens": 161,
                "span_id": "Model._get_next_or_previous_in_order",
                "file_path": "django/db/models/base.py"
              },
              {
                "rank": 24,
                "tokens": 636,
                "span_id": "Model._check_ordering",
                "file_path": "django/db/models/base.py"
              },
              {
                "rank": 25,
                "tokens": 63,
                "span_id": "Model._check_fields",
                "file_path": "django/db/models/base.py"
              },
              {
                "rank": 25,
                "tokens": 70,
                "span_id": "Model._check_model",
                "file_path": "django/db/models/base.py"
              },
              {
                "rank": 25,
                "tokens": 41,
                "span_id": "Model._check_managers",
                "file_path": "django/db/models/base.py"
              },
              {
                "rank": 29,
                "tokens": 438,
                "span_id": "Model._check_field_name_clashes",
                "file_path": "django/db/models/base.py"
              },
              {
                "rank": 0,
                "tokens": 302,
                "span_id": "Field",
                "file_path": "django/db/models/fields/__init__.py"
              }
            ],
            "search_requests": [
              {
                "query": "handling inherited field choices in Model class",
                "class_names": [
                  "Model"
                ],
                "code_snippet": null,
                "file_pattern": "**/models/**/*.py",
                "function_names": [
                  "_get_FIELD_display"
                ]
              },
              {
                "query": "overriding choices in Field subclasses",
                "class_names": [
                  "Field"
                ],
                "code_snippet": "self.choices = choices",
                "file_pattern": "**/models/**/*.py",
                "function_names": [
                  "__init__"
                ]
              }
            ]
          },
          "input_tokens": 7963,
          "output_tokens": 650,
          "retry_message": null,
          "completion_cost": 0.033639
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 2,
            "tokens": 6,
            "span_id": "Model:8",
            "file_path": "django/db/models/base.py"
          },
          {
            "rank": 2,
            "tokens": 76,
            "span_id": "Model._do_insert",
            "file_path": "django/db/models/base.py"
          },
          {
            "rank": 2,
            "tokens": 92,
            "span_id": "Model.delete",
            "file_path": "django/db/models/base.py"
          },
          {
            "rank": 2,
            "tokens": 57,
            "span_id": "Model._get_FIELD_display",
            "file_path": "django/db/models/base.py"
          },
          {
            "rank": 4,
            "tokens": 314,
            "span_id": "Model._check_local_fields",
            "file_path": "django/db/models/base.py"
          },
          {
            "rank": 7,
            "tokens": 189,
            "span_id": "Model._get_next_or_previous_by_FIELD",
            "file_path": "django/db/models/base.py"
          },
          {
            "rank": 11,
            "tokens": 137,
            "span_id": "Model.serializable_value",
            "file_path": "django/db/models/base.py"
          },
          {
            "rank": 17,
            "tokens": 161,
            "span_id": "Model._get_next_or_previous_in_order",
            "file_path": "django/db/models/base.py"
          },
          {
            "rank": 24,
            "tokens": 636,
            "span_id": "Model._check_ordering",
            "file_path": "django/db/models/base.py"
          },
          {
            "rank": 25,
            "tokens": 63,
            "span_id": "Model._check_fields",
            "file_path": "django/db/models/base.py"
          },
          {
            "rank": 25,
            "tokens": 70,
            "span_id": "Model._check_model",
            "file_path": "django/db/models/base.py"
          },
          {
            "rank": 25,
            "tokens": 41,
            "span_id": "Model._check_managers",
            "file_path": "django/db/models/base.py"
          },
          {
            "rank": 29,
            "tokens": 438,
            "span_id": "Model._check_field_name_clashes",
            "file_path": "django/db/models/base.py"
          },
          {
            "rank": 0,
            "tokens": 302,
            "span_id": "Field",
            "file_path": "django/db/models/fields/__init__.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue concerns the functionality of `Model.get_FOO_display()` with inherited choices. Specifically, it is mentioned that the method does not work correctly for new tuples added in child models. Given this context, I reviewed the relevant sections of the codebase, focusing on the `Model` class and its methods related to field display, particularly `_get_FIELD_display`. The provided search results include the `_get_FIELD_display` method within the `Model` class, which constructs a dictionary of choices and uses this to return the display value. This method would be central to addressing the issue as it directly handles the display logic for model fields with choices. Additionally, the `Field` class initialization and the handling of choices during field definition are also critical for understanding how choices are set up and could potentially be mismanaged when inherited. Therefore, these sections are relevant to the reported issue and should be considered for further investigation and potential modifications.",
            "identified_spans": [
              {
                "span_ids": [
                  "Model._get_FIELD_display",
                  "Model.__init__",
                  "Model.serializable_value",
                  "Model._do_insert",
                  "Model.delete",
                  "Model:8",
                  "Model._get_next_or_previous_by_FIELD",
                  "Model._get_next_or_previous_in_order",
                  "Model._check_model",
                  "Model._check_managers",
                  "Model._check_fields",
                  "Model._check_field_name_clashes",
                  "Model._check_local_fields",
                  "Model._check_ordering"
                ],
                "file_path": "django/db/models/base.py"
              },
              {
                "span_ids": [
                  "Field",
                  "Field.__init__"
                ],
                "file_path": "django/db/models/fields/__init__.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 10602,
          "output_tokens": 455,
          "retry_message": null,
          "completion_cost": 0.038631
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "After analyzing the file context, it is clear that the relevant code related to the issue is provided. The key method `_get_FIELD_display` in the `Model` class handles how choices are displayed, and the `Field` class, particularly the `CharField` and its `choices` attribute, is central to the issue's context. Furthermore, the `ManyToOneRel` and `ManyToManyRel` classes in `reverse_related.py` contribute to understanding related fields' behavior in inheritance scenarios. Therefore, the provided file context is sufficient to understand and potentially fix the reported issue.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 9224,
          "output_tokens": 162,
          "retry_message": null,
          "completion_cost": 0.030102000000000004
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "Model._get_FIELD_display",
            "file_path": "django/db/models/base.py",
            "scratch_pad": "The issue is that Model.get_FOO_display() does not correctly handle choices inherited and subsequently overridden by child models. The method should return the display value for all choices, including those added in the child model. The current implementation uses a dictionary built from the base model's choices, which does not include the new choices from the child model. The solution is to update the _get_FIELD_display method to consider choices from the actual model instance, not just the base model's choices.",
            "instructions": "Modify the _get_FIELD_display method to dynamically fetch the choices from the actual model instance, ensuring that overridden and new choices are included in the display lookup."
          },
          "output": {
            "span_id": "Model._get_FIELD_display",
            "end_line": 950,
            "file_path": "django/db/models/base.py",
            "start_line": 946,
            "instructions": "Modify the _get_FIELD_display method to dynamically fetch the choices from the actual model instance, ensuring that overridden and new choices are included in the display lookup."
          },
          "input_tokens": 10055,
          "output_tokens": 200,
          "retry_message": null,
          "completion_cost": 0.033165
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "Model._get_FIELD_display",
        "end_line": 950,
        "file_path": "django/db/models/base.py",
        "max_tokens": 1000,
        "start_line": 946,
        "temperature": 1.6,
        "instructions": "Modify the _get_FIELD_display method to dynamically fetch the choices from the actual model instance, ensuring that overridden and new choices are included in the display lookup.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```html\n<replace>\n    def _get_FIELD_display(self, field):\n        value = getattr(self, field.attname)\n        choices_dict = dict(make_hashable(field.flatchoices))\n        # Dynamically fetch the choices from the actual model instance\n        if self.__class__ != field.model:\n            choices_dict = dict(make_hashable(self.__class__._meta.get_field(field.name).flatchoices))\n        # force_str() to coerce lazy strings.\n        return force_str(choices_dict.get(make_hashable(value), value), strings_only=True)\n</replace>"
          },
          "output": {
            "diff": "--- django/db/models/base.py\n+++ django/db/models/base.py\n@@ -946,6 +946,9 @@\n     def _get_FIELD_display(self, field):\n         value = getattr(self, field.attname)\n         choices_dict = dict(make_hashable(field.flatchoices))\n+        # Dynamically fetch the choices from the actual model instance\n+        if self.__class__ != field.model:\n+            choices_dict = dict(make_hashable(self.__class__._meta.get_field(field.name).flatchoices))\n         # force_str() to coerce lazy strings.\n         return force_str(choices_dict.get(make_hashable(value), value), strings_only=True)\n \n",
            "message": "Applied the change to django/db/models/base.py.\n\n<scratch_pad>\n```html\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 10552,
          "output_tokens": 156,
          "retry_message": null,
          "completion_cost": 0.033996000000000005
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- django/db/models/base.py\n+++ django/db/models/base.py\n@@ -946,6 +946,9 @@\n     def _get_FIELD_display(self, field):\n         value = getattr(self, field.attname)\n         choices_dict = dict(make_hashable(field.flatchoices))\n+        # Dynamically fetch the choices from the actual model instance\n+        if self.__class__ != field.model:\n+            choices_dict = dict(make_hashable(self.__class__._meta.get_field(field.name).flatchoices))\n         # force_str() to coerce lazy strings.\n         return force_str(choices_dict.get(make_hashable(value), value), strings_only=True)\n \n",
        "model": "deepseek-coder",
        "message": "Applied the change to django/db/models/base.py.\n\n<scratch_pad>\n```html\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue has been resolved by updating the _get_FIELD_display method to dynamically include choices from the actual model instance, thus correctly handling inherited and overridden choices.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The code change has been applied to the _get_FIELD_display method to dynamically fetch the choices from the actual model instance, ensuring that overridden and new choices are included in the display lookup. This addresses the issue reported where Model.get_FOO_display() did not work correctly with inherited choices. The solution checks if the class of the instance is different from the original field model and updates the choices_dict accordingly to include the child model's choices.",
            "instructions": null
          },
          "output": {
            "message": "The issue has been resolved by updating the _get_FIELD_display method to dynamically include choices from the actual model instance, thus correctly handling inherited and overridden choices."
          },
          "input_tokens": 10548,
          "output_tokens": 157,
          "retry_message": null,
          "completion_cost": 0.033999
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue has been resolved by updating the _get_FIELD_display method to dynamically include choices from the actual model instance, thus correctly handling inherited and overridden choices.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Model.get_FOO_display() does not work correctly with inherited choices.\nDescription\n\t \n\t\t(last modified by Mariusz Felisiak)\n\t \nGiven a base model with choices A containing 3 tuples\nChild Model inherits the base model overrides the choices A and adds 2 more tuples\nget_foo_display does not work correctly for the new tuples added\nExample:\nclass A(models.Model):\n foo_choice = [(\"A\",\"output1\"),(\"B\",\"output2\")]\n field_foo = models.CharField(max_length=254,choices=foo_choice)\n class Meta:\n\t abstract = True\nclass B(A):\n foo_choice = [(\"A\",\"output1\"),(\"B\",\"output2\"),(\"C\",\"output3\")]\n field_foo = models.CharField(max_length=254,choices=foo_choice)\nUpon invoking get_field_foo_display() on instance of B , \nFor value \"A\" and \"B\" the output works correctly i.e. returns \"output1\" / \"output2\"\nbut for value \"C\" the method returns \"C\" and not \"output3\" which is the expected behaviour\n"
}