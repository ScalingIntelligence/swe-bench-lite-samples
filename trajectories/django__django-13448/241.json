{
  "info": {
    "duration": 137.5685691833496,
    "submission": "diff --git a/django/db/backends/base/creation.py b/django/db/backends/base/creation.py\nindex 503f7f56fd..2718b20196 100644\n--- a/django/db/backends/base/creation.py\n+++ b/django/db/backends/base/creation.py\n@@ -202,6 +202,18 @@ class BaseDatabaseCreation:\n                     self.log('Tests cancelled.')\n                     sys.exit(1)\n \n+        # Check for the existence of 'django_admin_log' and handle cases where it does not exist gracefully\n+        if self.connection.settings_dict.get('TEST', {}).get('MIGRATE') is False:\n+            with self.connection.cursor() as cursor:\n+                try:\n+                    cursor.execute(\"SELECT 1 FROM django_admin_log LIMIT 1\")\n+                except Exception as e:\n+                    if 'relation \"django_admin_log\" does not exist' in str(e):\n+                        # Handle the case where 'django_admin_log' does not exist\n+                        self.log('Relation \"django_admin_log\" does not exist. Skipping.')\n+                    else:\n+                        raise e\n+\n         return test_database_name\n \n     def clone_test_db(self, suffix, verbosity=1, autoclobber=False, keepdb=False):\n",
    "total_cost": 0.11853,
    "instance_id": "django__django-13448",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The error trace suggests that the test runner is crashing due to the 'TEST': {'MIGRATE': False} setting, which implies the database tables have not been created for the test environment. This could be due to legacy settings or dependencies from the previous Django upgrade. The focus should be on the database creation and migration setup in Django, specifically around how test databases are created and handled when migrations are skipped. Given the traceback and the context, the search should focus on database creation and setup related to tests, especially in the PostgreSQL backend and the core Django management commands.",
            "search_requests": [
              {
                "query": "create_test_db TEST MIGRATE False",
                "class_names": [
                  "BaseDatabaseCreation",
                  "DatabaseCreation"
                ],
                "code_snippet": null,
                "file_pattern": "**/django/db/**/*.py",
                "function_names": [
                  "_create_test_db",
                  "_execute_create_test_db",
                  "create_test_db"
                ]
              },
              {
                "query": "test database setup MIGRATE False",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/django/core/management/commands/**/*.py",
                "function_names": [
                  "setup_databases",
                  "run_from_argv",
                  "execute"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 62,
                "span_id": "BaseDatabaseCreation._get_database_display_str",
                "file_path": "django/db/backends/base/creation.py"
              },
              {
                "rank": 0,
                "tokens": 95,
                "span_id": "BaseDatabaseCreation._get_test_db_name",
                "file_path": "django/db/backends/base/creation.py"
              },
              {
                "rank": 0,
                "tokens": 31,
                "span_id": "BaseDatabaseCreation._execute_create_test_db",
                "file_path": "django/db/backends/base/creation.py"
              },
              {
                "rank": 1,
                "tokens": 332,
                "span_id": "BaseDatabaseCreation._create_test_db",
                "file_path": "django/db/backends/base/creation.py"
              },
              {
                "rank": 9,
                "tokens": 27,
                "span_id": "BaseDatabaseCreation",
                "file_path": "django/db/backends/base/creation.py"
              },
              {
                "rank": 9,
                "tokens": 12,
                "span_id": "BaseDatabaseCreation.__init__",
                "file_path": "django/db/backends/base/creation.py"
              },
              {
                "rank": 2,
                "tokens": 226,
                "span_id": "DatabaseCreation._clone_test_db",
                "file_path": "django/db/backends/mysql/creation.py"
              },
              {
                "rank": 3,
                "tokens": 154,
                "span_id": "DatabaseCreation._execute_create_test_db",
                "file_path": "django/db/backends/postgresql/creation.py"
              },
              {
                "rank": 6,
                "tokens": 220,
                "span_id": "DatabaseCreation._clone_test_db",
                "file_path": "django/db/backends/postgresql/creation.py"
              },
              {
                "rank": 4,
                "tokens": 210,
                "span_id": "DatabaseCreation._create_test_db",
                "file_path": "django/db/backends/sqlite3/creation.py"
              },
              {
                "rank": 5,
                "tokens": 651,
                "span_id": "DatabaseCreation._create_test_db",
                "file_path": "django/db/backends/oracle/creation.py"
              },
              {
                "rank": 7,
                "tokens": 184,
                "span_id": "DatabaseCreation._get_test_db_params",
                "file_path": "django/db/backends/oracle/creation.py"
              },
              {
                "rank": 8,
                "tokens": 301,
                "span_id": "DatabaseCreation._execute_test_db_creation",
                "file_path": "django/db/backends/oracle/creation.py"
              },
              {
                "rank": 0,
                "tokens": 65,
                "span_id": "Command.run_from_argv",
                "file_path": "django/core/management/commands/test.py"
              },
              {
                "rank": 18,
                "tokens": 65,
                "span_id": "Command.execute",
                "file_path": "django/core/management/commands/sqlmigrate.py"
              }
            ],
            "search_requests": [
              {
                "query": "create_test_db TEST MIGRATE False",
                "class_names": [
                  "BaseDatabaseCreation",
                  "DatabaseCreation"
                ],
                "code_snippet": null,
                "file_pattern": "**/django/db/**/*.py",
                "function_names": [
                  "_create_test_db",
                  "_execute_create_test_db",
                  "create_test_db"
                ]
              },
              {
                "query": "test database setup MIGRATE False",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/django/core/management/commands/**/*.py",
                "function_names": [
                  "setup_databases",
                  "run_from_argv",
                  "execute"
                ]
              }
            ]
          },
          "input_tokens": 4669,
          "output_tokens": 296,
          "retry_message": null,
          "completion_cost": 0.018447
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 62,
            "span_id": "BaseDatabaseCreation._get_database_display_str",
            "file_path": "django/db/backends/base/creation.py"
          },
          {
            "rank": 0,
            "tokens": 95,
            "span_id": "BaseDatabaseCreation._get_test_db_name",
            "file_path": "django/db/backends/base/creation.py"
          },
          {
            "rank": 0,
            "tokens": 31,
            "span_id": "BaseDatabaseCreation._execute_create_test_db",
            "file_path": "django/db/backends/base/creation.py"
          },
          {
            "rank": 1,
            "tokens": 332,
            "span_id": "BaseDatabaseCreation._create_test_db",
            "file_path": "django/db/backends/base/creation.py"
          },
          {
            "rank": 9,
            "tokens": 27,
            "span_id": "BaseDatabaseCreation",
            "file_path": "django/db/backends/base/creation.py"
          },
          {
            "rank": 9,
            "tokens": 12,
            "span_id": "BaseDatabaseCreation.__init__",
            "file_path": "django/db/backends/base/creation.py"
          },
          {
            "rank": 2,
            "tokens": 226,
            "span_id": "DatabaseCreation._clone_test_db",
            "file_path": "django/db/backends/mysql/creation.py"
          },
          {
            "rank": 3,
            "tokens": 154,
            "span_id": "DatabaseCreation._execute_create_test_db",
            "file_path": "django/db/backends/postgresql/creation.py"
          },
          {
            "rank": 6,
            "tokens": 220,
            "span_id": "DatabaseCreation._clone_test_db",
            "file_path": "django/db/backends/postgresql/creation.py"
          },
          {
            "rank": 4,
            "tokens": 210,
            "span_id": "DatabaseCreation._create_test_db",
            "file_path": "django/db/backends/sqlite3/creation.py"
          },
          {
            "rank": 5,
            "tokens": 651,
            "span_id": "DatabaseCreation._create_test_db",
            "file_path": "django/db/backends/oracle/creation.py"
          },
          {
            "rank": 7,
            "tokens": 184,
            "span_id": "DatabaseCreation._get_test_db_params",
            "file_path": "django/db/backends/oracle/creation.py"
          },
          {
            "rank": 8,
            "tokens": 301,
            "span_id": "DatabaseCreation._execute_test_db_creation",
            "file_path": "django/db/backends/oracle/creation.py"
          },
          {
            "rank": 0,
            "tokens": 65,
            "span_id": "Command.run_from_argv",
            "file_path": "django/core/management/commands/test.py"
          },
          {
            "rank": 18,
            "tokens": 65,
            "span_id": "Command.execute",
            "file_path": "django/core/management/commands/sqlmigrate.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about the setup_databases crashing when the 'TEST': {'MIGRATE': False} setting is used during a test run after upgrading from Django 3.0 to 3.1. The traceback indicates that the error is due to an undefined table 'django_admin_log'. This suggests that there might be a problem with how the test database is being created or accessed when migrations are skipped. Given the search results, the files 'django/db/backends/base/creation.py', 'django/db/backends/mysql/creation.py', 'django/db/backends/postgresql/creation.py', 'django/db/backends/sqlite3/creation.py', and 'django/db/backends/oracle/creation.py' all contain code related to the creation of test databases and might be relevant to the issue. The methods '_get_test_db_name' and '_create_test_db' in these files are particularly relevant as they handle the naming and creation of test databases, which could be affected by the 'MIGRATE': False setting. The 'django/core/management/commands/test.py' file also contains the 'Command' class which runs tests and might interact with these database creation methods. Therefore, these files and methods should be further investigated to understand how the 'MIGRATE': False setting might be affecting the test database creation and lead to the undefined table error.",
            "identified_spans": [
              {
                "span_ids": [
                  "BaseDatabaseCreation._get_test_db_name",
                  "BaseDatabaseCreation._create_test_db"
                ],
                "file_path": "django/db/backends/base/creation.py"
              },
              {
                "span_ids": [
                  "DatabaseCreation._get_test_db_name"
                ],
                "file_path": "django/db/backends/mysql/creation.py"
              },
              {
                "span_ids": [
                  "DatabaseCreation._get_test_db_name"
                ],
                "file_path": "django/db/backends/postgresql/creation.py"
              },
              {
                "span_ids": [
                  "DatabaseCreation._get_test_db_name"
                ],
                "file_path": "django/db/backends/sqlite3/creation.py"
              },
              {
                "span_ids": [
                  "DatabaseCreation._get_test_db_name"
                ],
                "file_path": "django/db/backends/oracle/creation.py"
              },
              {
                "span_ids": [
                  "Command"
                ],
                "file_path": "django/core/management/commands/test.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 7061,
          "output_tokens": 638,
          "retry_message": null,
          "completion_cost": 0.030753000000000003
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "Relevant parts from the file context include the base class 'BaseDatabaseCreation' in 'django/db/backends/base/creation.py' which provides the core functionality for test database creation across different database backends. Specific implementations such as 'django/db/backends/postgresql/creation.py', 'django/db/backends/sqlite3/creation.py', and 'django/db/backends/oracle/creation.py' are seen as well, focusing on specific database functionalities and test setup. The management command 'django/core/management/commands/test.py', which is fundamental for running tests, is also provided. The traceback in the issue suggests problems with the test database creation specifically when 'MIGRATE': False is set. Since the core functionality and specific implementations for database setup and testing are identified in the provided context, it cues to the completion of the task. Further details or deep dives into the specific database issues on particular backends are not within the scope of current necessity, so marking as complete.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 3760,
          "output_tokens": 250,
          "retry_message": null,
          "completion_cost": 0.01503
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "BaseDatabaseCreation._create_test_db",
            "file_path": "django/db/backends/base/creation.py",
            "scratch_pad": "The error indicates that there is an attempt to access a table ('django_admin_log') that does not exist during the test setup when 'TEST': {'MIGRATE': False} is set. This suggests that some part of the code expects the table to be present even when migrations are skipped. A potential solution could be to ensure that any code querying 'django_admin_log' is conditional on the presence of this table when 'MIGRATE' is False.",
            "instructions": "Modify 'django/db/backends/base/creation.py' to check for the existence of 'django_admin_log' and handle cases where it does not exist gracefully when 'TEST': {'MIGRATE': False} is set."
          },
          "output": {
            "span_id": "BaseDatabaseCreation._create_test_db",
            "end_line": 205,
            "file_path": "django/db/backends/base/creation.py",
            "start_line": 166,
            "instructions": "Modify 'django/db/backends/base/creation.py' to check for the existence of 'django_admin_log' and handle cases where it does not exist gracefully when 'TEST': {'MIGRATE': False} is set."
          },
          "input_tokens": 4090,
          "output_tokens": 214,
          "retry_message": null,
          "completion_cost": 0.01548
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "BaseDatabaseCreation._create_test_db",
        "end_line": 205,
        "file_path": "django/db/backends/base/creation.py",
        "max_tokens": 1000,
        "start_line": 166,
        "temperature": 1.6,
        "instructions": "Modify 'django/db/backends/base/creation.py' to check for the existence of 'django_admin_log' and handle cases where it does not exist gracefully when 'TEST': {'MIGRATE': False} is set.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```json\n<replace>\n    def _create_test_db(self, verbosity, autoclobber, keepdb=False):\n        \"\"\"\n        Internal implementation - create the test db tables.\n        \"\"\"\n        test_database_name = self._get_test_db_name()\n        test_db_params = {\n            'dbname': self.connection.ops.quote_name(test_database_name),\n            'suffix': self.sql_table_creation_suffix(),\n        }\n        # Create the test database and connect to it.\n        with self._nodb_cursor() as cursor:\n            try:\n                self._execute_create_test_db(cursor, test_db_params, keepdb)\n            except Exception as e:\n                # if we want to keep the db, then no need to do any of the below,\n                # just return and skip it all.\n                if keepdb:\n                    return test_database_name\n\n                self.log('Got an error creating the test database: %s' % e)\n                if not autoclobber:\n                    confirm = input(\n                        \"Type 'yes' if you would like to try deleting the test \"\n                        \"database '%s', or 'no' to cancel: \" % test_database_name)\n                if autoclobber or confirm == 'yes':\n                    try:\n                        if verbosity >= 1:\n                            self.log('Destroying old test database for alias %s...' % (\n                                self._get_database_display_str(verbosity, test_database_name),\n                            ))\n                        cursor.execute('DROP DATABASE %(dbname)s' % test_db_params)\n                        self._execute_create_test_db(cursor, test_db_params, keepdb)\n                    except Exception as e:\n                        self.log('Got an error recreating the test database: %s' % e)\n                        sys.exit(2)\n                else:\n                    self.log('Tests cancelled.')\n                    sys.exit(1)\n\n        # Check for the existence of 'django_admin_log' and handle cases where it does not exist gracefully\n        if self.connection.settings_dict.get('TEST', {}).get('MIGRATE') is False:\n            with self.connection.cursor() as cursor:\n                try:\n                    cursor.execute(\"SELECT 1 FROM django_admin_log LIMIT 1\")\n                except Exception as e:\n                    if 'relation \"django_admin_log\" does not exist' in str(e):\n                        # Handle the case where 'django_admin_log' does not exist\n                        self.log('Relation \"django_admin_log\" does not exist. Skipping.')\n                    else:\n                        raise e\n\n        return test_database_name\n</replace>"
          },
          "output": {
            "diff": "--- django/db/backends/base/creation.py\n+++ django/db/backends/base/creation.py\n@@ -202,6 +202,18 @@\n                     self.log('Tests cancelled.')\n                     sys.exit(1)\n \n+        # Check for the existence of 'django_admin_log' and handle cases where it does not exist gracefully\n+        if self.connection.settings_dict.get('TEST', {}).get('MIGRATE') is False:\n+            with self.connection.cursor() as cursor:\n+                try:\n+                    cursor.execute(\"SELECT 1 FROM django_admin_log LIMIT 1\")\n+                except Exception as e:\n+                    if 'relation \"django_admin_log\" does not exist' in str(e):\n+                        # Handle the case where 'django_admin_log' does not exist\n+                        self.log('Relation \"django_admin_log\" does not exist. Skipping.')\n+                    else:\n+                        raise e\n+\n         return test_database_name\n \n     def clone_test_db(self, suffix, verbosity=1, autoclobber=False, keepdb=False):\n",
            "message": "Applied the change to django/db/backends/base/creation.py.\n\n<scratch_pad>\n```json\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 4166,
          "output_tokens": 635,
          "retry_message": null,
          "completion_cost": 0.022023
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- django/db/backends/base/creation.py\n+++ django/db/backends/base/creation.py\n@@ -202,6 +202,18 @@\n                     self.log('Tests cancelled.')\n                     sys.exit(1)\n \n+        # Check for the existence of 'django_admin_log' and handle cases where it does not exist gracefully\n+        if self.connection.settings_dict.get('TEST', {}).get('MIGRATE') is False:\n+            with self.connection.cursor() as cursor:\n+                try:\n+                    cursor.execute(\"SELECT 1 FROM django_admin_log LIMIT 1\")\n+                except Exception as e:\n+                    if 'relation \"django_admin_log\" does not exist' in str(e):\n+                        # Handle the case where 'django_admin_log' does not exist\n+                        self.log('Relation \"django_admin_log\" does not exist. Skipping.')\n+                    else:\n+                        raise e\n+\n         return test_database_name\n \n     def clone_test_db(self, suffix, verbosity=1, autoclobber=False, keepdb=False):\n",
        "model": "deepseek-coder",
        "message": "Applied the change to django/db/backends/base/creation.py.\n\n<scratch_pad>\n```json\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The change has been successfully applied, and the issue appears to be resolved based on the provided context and modifications.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The proposed change has been applied successfully. The code now includes a check for the existence of 'django_admin_log' and handles the case where it does not exist gracefully when 'TEST': {'MIGRATE': False} is set. This should resolve the issue reported by ensuring that any attempted access to 'django_admin_log' is conditioned on its existence when migrations are skipped during testing.",
            "instructions": null
          },
          "output": {
            "message": "The change has been successfully applied, and the issue appears to be resolved based on the provided context and modifications."
          },
          "input_tokens": 4774,
          "output_tokens": 165,
          "retry_message": null,
          "completion_cost": 0.016797
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The change has been successfully applied, and the issue appears to be resolved based on the provided context and modifications.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Test runner setup_databases crashes with \"TEST\": {\"MIGRATE\": False}.\nDescription\n\t\nI'm trying to upgrade a project from Django 3.0 to Django 3.1 and wanted to try out the new \"TEST\": {\"MIGRATE\": False} database setting.\nSadly I'm running into an issue immediately when running ./manage.py test.\nRemoving the \"TEST\": {\"MIGRATE\": False} line allows the tests to run. So this is not blocking the upgrade for us, but it would be nice if we were able to use the new feature to skip migrations during testing.\nFor reference, this project was recently upgraded from Django 1.4 all the way to 3.0 so there might be some legacy cruft somewhere that triggers this.\nHere's the trackeback. I'll try to debug this some more.\nTraceback (most recent call last):\n File \"/usr/local/lib/python3.6/site-packages/django/db/backends/utils.py\", line 84, in _execute\n\treturn self.cursor.execute(sql, params)\npsycopg2.errors.UndefinedTable: relation \"django_admin_log\" does not exist\nLINE 1: ...n_flag\", \"django_admin_log\".\"change_message\" FROM \"django_ad...\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ^\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\n File \"/usr/local/lib/python3.6/site-packages/django/db/models/sql/compiler.py\", line 1156, in execute_sql\n\tcursor.execute(sql, params)\n File \"/usr/local/lib/python3.6/site-packages/django/db/backends/utils.py\", line 66, in execute\n\treturn self._execute_with_wrappers(sql, params, many=False, executor=self._execute)\n File \"/usr/local/lib/python3.6/site-packages/django/db/backends/utils.py\", line 75, in _execute_with_wrappers\n\treturn executor(sql, params, many, context)\n File \"/usr/local/lib/python3.6/site-packages/django/db/backends/utils.py\", line 84, in _execute\n\treturn self.cursor.execute(sql, params)\n File \"/usr/local/lib/python3.6/site-packages/django/db/utils.py\", line 90, in __exit__\n\traise dj_exc_value.with_traceback(traceback) from exc_value\n File \"/usr/local/lib/python3.6/site-packages/django/db/backends/utils.py\", line 84, in _execute\n\treturn self.cursor.execute(sql, params)\ndjango.db.utils.ProgrammingError: relation \"django_admin_log\" does not exist\nLINE 1: ...n_flag\", \"django_admin_log\".\"change_message\" FROM \"django_ad...\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ^\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n File \"./manage.py\", line 15, in <module>\n\tmain()\n File \"./manage.py\", line 11, in main\n\texecute_from_command_line(sys.argv)\n File \"/usr/local/lib/python3.6/site-packages/django/core/management/__init__.py\", line 401, in execute_from_command_line\n\tutility.execute()\n File \"/usr/local/lib/python3.6/site-packages/django/core/management/__init__.py\", line 395, in execute\n\tself.fetch_command(subcommand).run_from_argv(self.argv)\n File \"/usr/local/lib/python3.6/site-packages/django/core/management/commands/test.py\", line 23, in run_from_argv\n\tsuper().run_from_argv(argv)\n File \"/usr/local/lib/python3.6/site-packages/django/core/management/base.py\", line 330, in run_from_argv\n\tself.execute(*args, **cmd_options)\n File \"/usr/local/lib/python3.6/site-packages/django/core/management/base.py\", line 371, in execute\n\toutput = self.handle(*args, **options)\n File \"/usr/local/lib/python3.6/site-packages/django/core/management/commands/test.py\", line 53, in handle\n\tfailures = test_runner.run_tests(test_labels)\n File \"/usr/local/lib/python3.6/site-packages/django/test/runner.py\", line 695, in run_tests\n\told_config = self.setup_databases(aliases=databases)\n File \"/usr/local/lib/python3.6/site-packages/django/test/runner.py\", line 616, in setup_databases\n\tself.parallel, **kwargs\n File \"/usr/local/lib/python3.6/site-packages/django/test/utils.py\", line 174, in setup_databases\n\tserialize=connection.settings_dict['TEST'].get('SERIALIZE', True),\n File \"/usr/local/lib/python3.6/site-packages/django/db/backends/base/creation.py\", line 78, in create_test_db\n\tself.connection._test_serialized_contents = self.serialize_db_to_string()\n File \"/usr/local/lib/python3.6/site-packages/django/db/backends/base/creation.py\", line 121, in serialize_db_to_string\n\tserializers.serialize(\"json\", get_objects(), indent=None, stream=out)\n File \"/usr/local/lib/python3.6/site-packages/django/core/serializers/__init__.py\", line 128, in serialize\n\ts.serialize(queryset, **options)\n File \"/usr/local/lib/python3.6/site-packages/django/core/serializers/base.py\", line 90, in serialize\n\tfor count, obj in enumerate(queryset, start=1):\n File \"/usr/local/lib/python3.6/site-packages/django/db/backends/base/creation.py\", line 118, in get_objects\n\tyield from queryset.iterator()\n File \"/usr/local/lib/python3.6/site-packages/django/db/models/query.py\", line 360, in _iterator\n\tyield from self._iterable_class(self, chunked_fetch=use_chunked_fetch, chunk_size=chunk_size)\n File \"/usr/local/lib/python3.6/site-packages/django/db/models/query.py\", line 53, in __iter__\n\tresults = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)\n File \"/usr/local/lib/python3.6/site-packages/django/db/models/sql/compiler.py\", line 1159, in execute_sql\n\tcursor.close()\npsycopg2.errors.InvalidCursorName: cursor \"_django_curs_139860821038912_sync_1\" does not exist\n"
}