{
  "info": {
    "duration": 165.1675992012024,
    "submission": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex c49a3ce6a..95337d8b4 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -2165,4 +2165,13 @@ def _build_repr(self):\n             warnings.filters.pop(0)\n         params[key] = value\n \n+    # Include n_splits, n_repeats, and random_state for RepeatedKFold and RepeatedStratifiedKFold\n+    if class_name in ['RepeatedKFold', 'RepeatedStratifiedKFold']:\n+        if 'n_splits' not in params:\n+            params['n_splits'] = getattr(self, 'n_splits', None)\n+        if 'n_repeats' not in params:\n+            params['n_repeats'] = getattr(self, 'n_repeats', None)\n+        if 'random_state' not in params:\n+            params['random_state'] = getattr(self, 'random_state', None)\n+\n     return '%s(%s)' % (class_name, _pprint(params, offset=len(class_name)))\n",
    "total_cost": 0.11314200000000002,
    "instance_id": "scikit-learn__scikit-learn-14983",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue identifies that `RepeatedKFold` and `RepeatedStratifiedKFold` do not display the correct `__repr__` string. The expected behavior is to show the parameters of the objects, but instead, they show a generic object representation. Given the context, it is likely that the `__repr__` method in these classes is not correctly implemented or overridden. The focus should be on classes `RepeatedKFold` and `RepeatedStratifiedKFold` in the `sklearn.model_selection._split` module, as well as any base classes they inherit from that might handle the `__repr__` method.",
            "search_requests": [
              {
                "query": "RepeatedKFold RepeatedStratifiedKFold __repr__",
                "class_names": [
                  "RepeatedKFold",
                  "RepeatedStratifiedKFold"
                ],
                "code_snippet": null,
                "file_pattern": "**/model_selection/**/*.py",
                "function_names": [
                  "__repr__"
                ]
              },
              {
                "query": "BaseEstimator __repr__",
                "class_names": [
                  "BaseEstimator"
                ],
                "code_snippet": null,
                "file_pattern": "**/base.py",
                "function_names": [
                  "__repr__"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 458,
                "span_id": "RepeatedKFold",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 0,
                "tokens": 437,
                "span_id": "RepeatedStratifiedKFold",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 0,
                "tokens": 11,
                "span_id": "BaseCrossValidator.__repr__",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 0,
                "tokens": 11,
                "span_id": "BaseShuffleSplit.__repr__",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 0,
                "tokens": 471,
                "span_id": "BaseEstimator.__repr__",
                "file_path": "sklearn/base.py"
              },
              {
                "rank": 1,
                "tokens": 69,
                "span_id": "BaseEstimator",
                "file_path": "sklearn/base.py"
              },
              {
                "rank": 1,
                "tokens": 220,
                "span_id": "BaseEstimator._get_param_names",
                "file_path": "sklearn/base.py"
              },
              {
                "rank": 3,
                "tokens": 196,
                "span_id": "BaseEstimator.get_params",
                "file_path": "sklearn/base.py"
              },
              {
                "rank": 4,
                "tokens": 98,
                "span_id": "BaseEstimator._get_tags",
                "file_path": "sklearn/base.py"
              },
              {
                "rank": 4,
                "tokens": 9,
                "span_id": "BaseEstimator._more_tags",
                "file_path": "sklearn/base.py"
              },
              {
                "rank": 6,
                "tokens": 236,
                "span_id": "BaseEstimator.set_params",
                "file_path": "sklearn/base.py"
              },
              {
                "rank": 8,
                "tokens": 55,
                "span_id": "BaseEstimator.__getstate__",
                "file_path": "sklearn/base.py"
              },
              {
                "rank": 8,
                "tokens": 130,
                "span_id": "BaseEstimator.__setstate__",
                "file_path": "sklearn/base.py"
              }
            ],
            "search_requests": [
              {
                "query": "RepeatedKFold RepeatedStratifiedKFold __repr__",
                "class_names": [
                  "RepeatedKFold",
                  "RepeatedStratifiedKFold"
                ],
                "code_snippet": null,
                "file_pattern": "**/model_selection/**/*.py",
                "function_names": [
                  "__repr__"
                ]
              },
              {
                "query": "BaseEstimator __repr__",
                "class_names": [
                  "BaseEstimator"
                ],
                "code_snippet": null,
                "file_pattern": "**/base.py",
                "function_names": [
                  "__repr__"
                ]
              }
            ]
          },
          "input_tokens": 3497,
          "output_tokens": 312,
          "retry_message": null,
          "completion_cost": 0.015171
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 458,
            "span_id": "RepeatedKFold",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 0,
            "tokens": 437,
            "span_id": "RepeatedStratifiedKFold",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 0,
            "tokens": 11,
            "span_id": "BaseCrossValidator.__repr__",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 0,
            "tokens": 11,
            "span_id": "BaseShuffleSplit.__repr__",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 0,
            "tokens": 471,
            "span_id": "BaseEstimator.__repr__",
            "file_path": "sklearn/base.py"
          },
          {
            "rank": 1,
            "tokens": 69,
            "span_id": "BaseEstimator",
            "file_path": "sklearn/base.py"
          },
          {
            "rank": 1,
            "tokens": 220,
            "span_id": "BaseEstimator._get_param_names",
            "file_path": "sklearn/base.py"
          },
          {
            "rank": 3,
            "tokens": 196,
            "span_id": "BaseEstimator.get_params",
            "file_path": "sklearn/base.py"
          },
          {
            "rank": 4,
            "tokens": 98,
            "span_id": "BaseEstimator._get_tags",
            "file_path": "sklearn/base.py"
          },
          {
            "rank": 4,
            "tokens": 9,
            "span_id": "BaseEstimator._more_tags",
            "file_path": "sklearn/base.py"
          },
          {
            "rank": 6,
            "tokens": 236,
            "span_id": "BaseEstimator.set_params",
            "file_path": "sklearn/base.py"
          },
          {
            "rank": 8,
            "tokens": 55,
            "span_id": "BaseEstimator.__getstate__",
            "file_path": "sklearn/base.py"
          },
          {
            "rank": 8,
            "tokens": 130,
            "span_id": "BaseEstimator.__setstate__",
            "file_path": "sklearn/base.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue focuses on the incorrect __repr__ string for `RepeatedKFold` and `RepeatedStratifiedKFold`. Upon examining the search results, it is evident that neither `RepeatedKFold` nor `RepeatedStratifiedKFold` classes have their own __repr__ method. They inherit it from the `BaseCrossValidator` class, which uses the `_build_repr` function to generate the representation. The provided code spans include the `BaseCrossValidator.__repr__` and `_build_repr` function, which are crucial for understanding how the representation is currently generated. Additionally, the initializers of `RepeatedKFold` and `RepeatedStratifiedKFold` are relevant as they define the parameters that should be included in the representation. Given this analysis, the identified relevant code spans include the `BaseCrossValidator.__repr__`, `_build_repr`, `RepeatedKFold.__init__`, and `RepeatedStratifiedKFold.__init__`. These spans collectively provide the context needed to address the issue of the incorrect __repr__ string.",
            "identified_spans": [
              {
                "span_ids": [
                  "BaseCrossValidator.__repr__",
                  "RepeatedKFold.__init__",
                  "RepeatedStratifiedKFold.__init__"
                ],
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "span_ids": [
                  "_build_repr"
                ],
                "file_path": "sklearn/base.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3887,
          "output_tokens": 357,
          "retry_message": null,
          "completion_cost": 0.017016
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The relevant classes RepeatedKFold and RepeatedStratifiedKFold are found in the file context, and they inherit from _RepeatedSplits which doesn't override the __repr__ method. The __repr__ method for these classes is expected to be handled by the BaseCrossValidator class, which uses _build_repr. The _build_repr function appears to be appropriately implemented to generate the desired __repr__ output based on the class's parameters. However, the actual results indicate that the expected __repr__ strings are not being generated, suggesting a potential issue with how the parameters are accessed or passed in the RepeatedKFold and RepeatedStratifiedKFold classes or their base classes. Further investigation into how parameters are handled and passed down the inheritance hierarchy might be necessary to identify the exact issue.",
            "search_suggestions": "Look into the _RepeatedSplits base class and how the parameters for RepeatedKFold and RepeatedStratifiedKFold are being initialized and passed to the _build_repr function. Also, check if there are any other classes in the inheritance hierarchy that might influence the __repr__ method behavior."
          },
          "output": {
            "message": "Look into the _RepeatedSplits base class and how the parameters for RepeatedKFold and RepeatedStratifiedKFold are being initialized and passed to the _build_repr function. Also, check if there are any other classes in the inheritance hierarchy that might influence the __repr__ method behavior."
          },
          "input_tokens": 2057,
          "output_tokens": 268,
          "retry_message": null,
          "completion_cost": 0.010191
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look into the _RepeatedSplits base class and how the parameters for RepeatedKFold and RepeatedStratifiedKFold are being initialized and passed to the _build_repr function. Also, check if there are any other classes in the inheritance hierarchy that might influence the __repr__ method behavior.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "scratch_pad": "The analysis of `sklearn/model_selection/_split.py` reveals that both `RepeatedKFold` and `RepeatedStratifiedKFold` inherit from `_RepeatedSplits`. The `__repr__` method in these classes is handled through the `_build_repr` function, which is called in the `__repr__` method of `BaseCrossValidator`. The issue might stem from inconsistencies in how parameters are handled or passed to the `_build_repr` function. Additionally, the initialization of parameters in `RepeatedKFold` and `RepeatedStratifiedKFold` seems straightforward, so the problem might lie in the `_build_repr` function itself or how parameters are accessed in it.",
            "search_requests": [
              {
                "query": "RepeatedKFold RepeatedStratifiedKFold _build_repr parameters",
                "class_names": [
                  "RepeatedKFold",
                  "RepeatedStratifiedKFold"
                ],
                "code_snippet": null,
                "file_pattern": "**/model_selection/**/*.py",
                "function_names": [
                  "_build_repr"
                ]
              }
            ]
          },
          "output": {
            "message": "The analysis of `sklearn/model_selection/_split.py` reveals that both `RepeatedKFold` and `RepeatedStratifiedKFold` inherit from `_RepeatedSplits`. The `__repr__` method in these classes is handled through the `_build_repr` function, which is called in the `__repr__` method of `BaseCrossValidator`. The issue might stem from inconsistencies in how parameters are handled or passed to the `_build_repr` function. Additionally, the initialization of parameters in `RepeatedKFold` and `RepeatedStratifiedKFold` seems straightforward, so the problem might lie in the `_build_repr` function itself or how parameters are accessed in it."
          },
          "input_tokens": 4507,
          "output_tokens": 281,
          "retry_message": null,
          "completion_cost": 0.017736000000000002
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "The analysis of `sklearn/model_selection/_split.py` reveals that both `RepeatedKFold` and `RepeatedStratifiedKFold` inherit from `_RepeatedSplits`. The `__repr__` method in these classes is handled through the `_build_repr` function, which is called in the `__repr__` method of `BaseCrossValidator`. The issue might stem from inconsistencies in how parameters are handled or passed to the `_build_repr` function. Additionally, the initialization of parameters in `RepeatedKFold` and `RepeatedStratifiedKFold` seems straightforward, so the problem might lie in the `_build_repr` function itself or how parameters are accessed in it.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "_build_repr",
            "file_path": "sklearn/model_selection/_split.py",
            "scratch_pad": "Based on the issue description and the provided file context, it appears that the `__repr__` method for `RepeatedKFold` and `RepeatedStratifiedKFold` is not displaying the expected string representation. This might be due to the way parameters are being accessed or passed within the `_build_repr` function. I will start by focusing on the `_build_repr` function and ensure that it correctly handles the parameters for `RepeatedKFold` and `RepeatedStratifiedKFold`.",
            "instructions": "Update the `_build_repr` function to correctly handle and display the parameters for `RepeatedKFold` and `RepeatedStratifiedKFold`. Ensure that the parameters `n_splits`, `n_repeats`, and `random_state` are included in the string representation."
          },
          "output": {
            "span_id": "_build_repr",
            "end_line": 2168,
            "file_path": "sklearn/model_selection/_split.py",
            "start_line": 2138,
            "instructions": "Update the `_build_repr` function to correctly handle and display the parameters for `RepeatedKFold` and `RepeatedStratifiedKFold`. Ensure that the parameters `n_splits`, `n_repeats`, and `random_state` are included in the string representation."
          },
          "input_tokens": 2916,
          "output_tokens": 208,
          "retry_message": null,
          "completion_cost": 0.011868
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "_build_repr",
        "end_line": 2168,
        "file_path": "sklearn/model_selection/_split.py",
        "max_tokens": 1000,
        "start_line": 2138,
        "temperature": 1.6,
        "instructions": "Update the `_build_repr` function to correctly handle and display the parameters for `RepeatedKFold` and `RepeatedStratifiedKFold`. Ensure that the parameters `n_splits`, `n_repeats`, and `random_state` are included in the string representation.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\ndef _build_repr(self):\n    # XXX This is copied from BaseEstimator's get_params\n    cls = self.__class__\n    init = getattr(cls.__init__, 'deprecated_original', cls.__init__)\n    # Ignore varargs, kw and default values and pop self\n    init_signature = signature(init)\n    # Consider the constructor parameters excluding 'self'\n    if init is object.__init__:\n        args = []\n    else:\n        args = sorted([p.name for p in init_signature.parameters.values()\n                       if p.name != 'self' and p.kind != p.VAR_KEYWORD])\n    class_name = self.__class__.__name__\n    params = dict()\n    for key in args:\n        # We need deprecation warnings to always be on in order to\n        # catch deprecated param values.\n        # This is set in utils/__init__.py but it gets overwritten\n        # when running under python3 somehow.\n        warnings.simplefilter(\"always\", DeprecationWarning)\n        try:\n            with warnings.catch_warnings(record=True) as w:\n                value = getattr(self, key, None)\n            if len(w) and w[0].category == DeprecationWarning:\n                # if the parameter is deprecated, don't show it\n                continue\n        finally:\n            warnings.filters.pop(0)\n        params[key] = value\n\n    # Include n_splits, n_repeats, and random_state for RepeatedKFold and RepeatedStratifiedKFold\n    if class_name in ['RepeatedKFold', 'RepeatedStratifiedKFold']:\n        if 'n_splits' not in params:\n            params['n_splits'] = getattr(self, 'n_splits', None)\n        if 'n_repeats' not in params:\n            params['n_repeats'] = getattr(self, 'n_repeats', None)\n        if 'random_state' not in params:\n            params['random_state'] = getattr(self, 'random_state', None)\n\n    return '%s(%s)' % (class_name, _pprint(params, offset=len(class_name)))\n</replace>"
          },
          "output": {
            "diff": "--- sklearn/model_selection/_split.py\n+++ sklearn/model_selection/_split.py\n@@ -2165,4 +2165,13 @@\n             warnings.filters.pop(0)\n         params[key] = value\n \n+    # Include n_splits, n_repeats, and random_state for RepeatedKFold and RepeatedStratifiedKFold\n+    if class_name in ['RepeatedKFold', 'RepeatedStratifiedKFold']:\n+        if 'n_splits' not in params:\n+            params['n_splits'] = getattr(self, 'n_splits', None)\n+        if 'n_repeats' not in params:\n+            params['n_repeats'] = getattr(self, 'n_repeats', None)\n+        if 'random_state' not in params:\n+            params['random_state'] = getattr(self, 'random_state', None)\n+\n     return '%s(%s)' % (class_name, _pprint(params, offset=len(class_name)))",
            "message": "Applied the change to sklearn/model_selection/_split.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 6157,
          "output_tokens": 524,
          "retry_message": null,
          "completion_cost": 0.026331
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sklearn/model_selection/_split.py\n+++ sklearn/model_selection/_split.py\n@@ -2165,4 +2165,13 @@\n             warnings.filters.pop(0)\n         params[key] = value\n \n+    # Include n_splits, n_repeats, and random_state for RepeatedKFold and RepeatedStratifiedKFold\n+    if class_name in ['RepeatedKFold', 'RepeatedStratifiedKFold']:\n+        if 'n_splits' not in params:\n+            params['n_splits'] = getattr(self, 'n_splits', None)\n+        if 'n_repeats' not in params:\n+            params['n_repeats'] = getattr(self, 'n_repeats', None)\n+        if 'random_state' not in params:\n+            params['random_state'] = getattr(self, 'random_state', None)\n+\n     return '%s(%s)' % (class_name, _pprint(params, offset=len(class_name)))",
        "model": "deepseek-coder",
        "message": "Applied the change to sklearn/model_selection/_split.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The change has been applied to update the `_build_repr` function to correctly handle the parameters for `RepeatedKFold` and `RepeatedStratifiedKFold`. This should resolve the issue of incorrect string representation.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The applied change seems to address the issue by ensuring that the `_build_repr` function correctly includes the parameters `n_splits`, `n_repeats`, and `random_state` for `RepeatedKFold` and `RepeatedStratifiedKFold`. This should resolve the problem of incorrect string representation for these classes.",
            "instructions": null
          },
          "output": {
            "message": "The change has been applied to update the `_build_repr` function to correctly handle the parameters for `RepeatedKFold` and `RepeatedStratifiedKFold`. This should resolve the issue of incorrect string representation."
          },
          "input_tokens": 4058,
          "output_tokens": 177,
          "retry_message": null,
          "completion_cost": 0.014829000000000002
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The change has been applied to update the `_build_repr` function to correctly handle the parameters for `RepeatedKFold` and `RepeatedStratifiedKFold`. This should resolve the issue of incorrect string representation.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "RepeatedKFold and RepeatedStratifiedKFold do not show correct __repr__ string\n#### Description\r\n\r\n`RepeatedKFold` and `RepeatedStratifiedKFold` do not show correct \\_\\_repr\\_\\_ string.\r\n\r\n#### Steps/Code to Reproduce\r\n\r\n```python\r\n>>> from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\r\n>>> repr(RepeatedKFold())\r\n>>> repr(RepeatedStratifiedKFold())\r\n```\r\n\r\n#### Expected Results\r\n\r\n```python\r\n>>> repr(RepeatedKFold())\r\nRepeatedKFold(n_splits=5, n_repeats=10, random_state=None)\r\n>>> repr(RepeatedStratifiedKFold())\r\nRepeatedStratifiedKFold(n_splits=5, n_repeats=10, random_state=None)\r\n```\r\n\r\n#### Actual Results\r\n\r\n```python\r\n>>> repr(RepeatedKFold())\r\n'<sklearn.model_selection._split.RepeatedKFold object at 0x0000016421AA4288>'\r\n>>> repr(RepeatedStratifiedKFold())\r\n'<sklearn.model_selection._split.RepeatedStratifiedKFold object at 0x0000016420E115C8>'\r\n```\r\n\r\n#### Versions\r\n```\r\nSystem:\r\n    python: 3.7.4 (default, Aug  9 2019, 18:34:13) [MSC v.1915 64 bit (AMD64)]\r\nexecutable: D:\\anaconda3\\envs\\xyz\\python.exe\r\n   machine: Windows-10-10.0.16299-SP0\r\n\r\nBLAS:\r\n    macros:\r\n  lib_dirs:\r\ncblas_libs: cblas\r\n\r\nPython deps:\r\n       pip: 19.2.2\r\nsetuptools: 41.0.1\r\n   sklearn: 0.21.2\r\n     numpy: 1.16.4\r\n     scipy: 1.3.1\r\n    Cython: None\r\n    pandas: 0.24.2\r\n```\n"
}