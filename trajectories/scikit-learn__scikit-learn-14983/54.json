{
  "info": {
    "duration": 223.04513716697693,
    "submission": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex c49a3ce6a..c89417203 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1102,6 +1102,8 @@ class _RepeatedSplits(metaclass=ABCMeta):\n         self.n_repeats = n_repeats\n         self.random_state = random_state\n         self.cvargs = cvargs\n+        for key, value in cvargs.items():\n+            setattr(self, key, value)\n \n     def split(self, X, y=None, groups=None):\n         \"\"\"Generates indices to split data into training and test set.\n@@ -2163,6 +2165,11 @@ def _build_repr(self):\n                 continue\n         finally:\n             warnings.filters.pop(0)\n-        params[key] = value\n+        if key == 'n_splits' and isinstance(self, (_RepeatedSplits, RepeatedKFold, RepeatedStratifiedKFold)):\n+            params['n_splits'] = getattr(self, 'n_splits', None)\n+            params['n_repeats'] = getattr(self, 'n_repeats', None)\n+            params['random_state'] = getattr(self, 'random_state', None)\n+        else:\n+            params[key] = value\n \n     return '%s(%s)' % (class_name, _pprint(params, offset=len(class_name)))\n",
    "total_cost": 0.14502,
    "instance_id": "scikit-learn__scikit-learn-14983",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue indicates that the `__repr__` method for `RepeatedKFold` and `RepeatedStratifiedKFold` classes is not producing the expected output. By examining the provided file context, it is clear that these classes are defined in the `sklearn/model_selection/_split.py` file. Additionally, the `_build_repr` function mentioned in the same file might be relevant for the `__repr__` method. Therefore, it is likely that the issue lies within the `__repr__` method implementation or related helper functions in this file. A more detailed search focusing on the `__repr__` method and `_build_repr` function within `sklearn/model_selection/_split.py` should help pinpoint the exact location of the problem.",
            "search_requests": [
              {
                "query": "Incorrect __repr__ string",
                "class_names": [
                  "RepeatedKFold",
                  "RepeatedStratifiedKFold"
                ],
                "code_snippet": null,
                "file_pattern": "sklearn/model_selection/_split.py",
                "function_names": [
                  "__repr__",
                  "_build_repr"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 458,
                "span_id": "RepeatedKFold",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 0,
                "tokens": 437,
                "span_id": "RepeatedStratifiedKFold",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 0,
                "tokens": 11,
                "span_id": "BaseCrossValidator.__repr__",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 0,
                "tokens": 11,
                "span_id": "BaseShuffleSplit.__repr__",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 0,
                "tokens": 269,
                "span_id": "_build_repr",
                "file_path": "sklearn/model_selection/_split.py"
              }
            ],
            "search_requests": [
              {
                "query": "Incorrect __repr__ string",
                "class_names": [
                  "RepeatedKFold",
                  "RepeatedStratifiedKFold"
                ],
                "code_snippet": null,
                "file_pattern": "sklearn/model_selection/_split.py",
                "function_names": [
                  "__repr__",
                  "_build_repr"
                ]
              }
            ]
          },
          "input_tokens": 3497,
          "output_tokens": 293,
          "retry_message": null,
          "completion_cost": 0.014886
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 458,
            "span_id": "RepeatedKFold",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 0,
            "tokens": 437,
            "span_id": "RepeatedStratifiedKFold",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 0,
            "tokens": 11,
            "span_id": "BaseCrossValidator.__repr__",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 0,
            "tokens": 11,
            "span_id": "BaseShuffleSplit.__repr__",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 0,
            "tokens": 269,
            "span_id": "_build_repr",
            "file_path": "sklearn/model_selection/_split.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue mentions that `RepeatedKFold` and `RepeatedStratifiedKFold` do not show the correct `__repr__` string when called. The provided search results contain relevant code spans that can help address this issue. Specifically, the `__repr__` method in the `BaseCrossValidator` class and the `_build_repr` function are critical for determining how the representation of these classes is built. Additionally, the initialization methods (`__init__`) of `RepeatedKFold` and `RepeatedStratifiedKFold` show how their parameters are set, which is important for constructing the correct `__repr__` string. Therefore, these spans are relevant to the issue and should be considered for fixing the `__repr__` functionality.",
            "identified_spans": [
              {
                "span_ids": [
                  "BaseCrossValidator",
                  "BaseCrossValidator.__repr__",
                  "RepeatedKFold",
                  "RepeatedKFold.__init__",
                  "RepeatedStratifiedKFold",
                  "RepeatedStratifiedKFold.__init__",
                  "_build_repr"
                ],
                "file_path": "sklearn/model_selection/_split.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 2408,
          "output_tokens": 284,
          "retry_message": null,
          "completion_cost": 0.011484000000000001
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The issue indicates that the `__repr__` method for `RepeatedKFold` and `RepeatedStratifiedKFold` classes is not producing the expected output. By examining the provided file context, it is clear that these classes are defined in the `sklearn/model_selection/_split.py` file. Additionally, the `_build_repr` function mentioned in the same file might be relevant for the `__repr__` method. Therefore, it is likely that the issue lies within the `__repr__` method implementation or related helper functions in this file. A more detailed search focusing on the `__repr__` method and `_build_repr` function within `sklearn/model_selection/_split.py` should help pinpoint the exact location of the problem.",
            "search_suggestions": "Focus on examining the `__repr__` method implementation and the `_build_repr` function within `sklearn/model_selection/_split.py` to identify why the expected `__repr__` string is not being generated for `RepeatedKFold` and `RepeatedStratifiedKFold` classes."
          },
          "output": {
            "message": "Focus on examining the `__repr__` method implementation and the `_build_repr` function within `sklearn/model_selection/_split.py` to identify why the expected `__repr__` string is not being generated for `RepeatedKFold` and `RepeatedStratifiedKFold` classes."
          },
          "input_tokens": 2223,
          "output_tokens": 266,
          "retry_message": null,
          "completion_cost": 0.010659000000000002
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Focus on examining the `__repr__` method implementation and the `_build_repr` function within `sklearn/model_selection/_split.py` to identify why the expected `__repr__` string is not being generated for `RepeatedKFold` and `RepeatedStratifiedKFold` classes.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "scratch_pad": "Upon examining the `__repr__` method implementation and the `_build_repr` function within `sklearn/model_selection/_split.py`, it appears that both `RepeatedKFold` and `RepeatedStratifiedKFold` classes inherit their `__repr__` method from the `_RepeatedSplits` class, which in turn uses the `_build_repr` function. The `_build_repr` function constructs the `__repr__` string by extracting the parameters of the class's `__init__` method and their current values. The issue seems to be related to the way these parameters are being extracted or displayed. Specifically, the `_build_repr` function might not be capturing all the necessary parameters, such as `n_splits` and `n_repeats`, for the `RepeatedKFold` and `RepeatedStratifiedKFold` classes. This discrepancy needs to be addressed to ensure the correct `__repr__` string is generated.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "RepeatedKFold",
                  "RepeatedStratifiedKFold"
                ],
                "code_snippet": null,
                "file_pattern": "sklearn/model_selection/_split.py",
                "function_names": [
                  "__repr__",
                  "_build_repr"
                ]
              }
            ]
          },
          "output": {
            "message": "Upon examining the `__repr__` method implementation and the `_build_repr` function within `sklearn/model_selection/_split.py`, it appears that both `RepeatedKFold` and `RepeatedStratifiedKFold` classes inherit their `__repr__` method from the `_RepeatedSplits` class, which in turn uses the `_build_repr` function. The `_build_repr` function constructs the `__repr__` string by extracting the parameters of the class's `__init__` method and their current values. The issue seems to be related to the way these parameters are being extracted or displayed. Specifically, the `_build_repr` function might not be capturing all the necessary parameters, such as `n_splits` and `n_repeats`, for the `RepeatedKFold` and `RepeatedStratifiedKFold` classes. This discrepancy needs to be addressed to ensure the correct `__repr__` string is generated."
          },
          "input_tokens": 4602,
          "output_tokens": 333,
          "retry_message": null,
          "completion_cost": 0.018801000000000002
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "Upon examining the `__repr__` method implementation and the `_build_repr` function within `sklearn/model_selection/_split.py`, it appears that both `RepeatedKFold` and `RepeatedStratifiedKFold` classes inherit their `__repr__` method from the `_RepeatedSplits` class, which in turn uses the `_build_repr` function. The `_build_repr` function constructs the `__repr__` string by extracting the parameters of the class's `__init__` method and their current values. The issue seems to be related to the way these parameters are being extracted or displayed. Specifically, the `_build_repr` function might not be capturing all the necessary parameters, such as `n_splits` and `n_repeats`, for the `RepeatedKFold` and `RepeatedStratifiedKFold` classes. This discrepancy needs to be addressed to ensure the correct `__repr__` string is generated.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "_RepeatedSplits.__init__",
            "file_path": "sklearn/model_selection/_split.py",
            "scratch_pad": "The issue lies in the `_build_repr` function not properly capturing the parameters for the `RepeatedKFold` and `RepeatedStratifiedKFold` classes, particularly `n_splits` and `n_repeats`. We need to ensure these parameters are correctly included in the `__repr__` string.",
            "instructions": "Update the `_RepeatedSplits.__init__` method to ensure `n_splits` is treated as an attribute directly, and the `_build_repr` function to correctly capture and display all relevant parameters, including `n_splits` and `n_repeats`."
          },
          "output": {
            "span_id": "_RepeatedSplits.__init__",
            "end_line": 1104,
            "file_path": "sklearn/model_selection/_split.py",
            "start_line": 1090,
            "instructions": "Update the `_RepeatedSplits.__init__` method to ensure `n_splits` is treated as an attribute directly, and the `_build_repr` function to correctly capture and display all relevant parameters, including `n_splits` and `n_repeats`."
          },
          "input_tokens": 3163,
          "output_tokens": 193,
          "retry_message": null,
          "completion_cost": 0.012384000000000001
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "_RepeatedSplits.__init__",
        "end_line": 1104,
        "file_path": "sklearn/model_selection/_split.py",
        "max_tokens": 1000,
        "start_line": 1090,
        "temperature": 1.6,
        "instructions": "Update the `_RepeatedSplits.__init__` method to ensure `n_splits` is treated as an attribute directly, and the `_build_repr` function to correctly capture and display all relevant parameters, including `n_splits` and `n_repeats`.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\n    def __init__(self, cv, n_repeats=10, random_state=None, **cvargs):\n        if not isinstance(n_repeats, numbers.Integral):\n            raise ValueError(\"Number of repetitions must be of Integral type.\")\n\n        if n_repeats <= 0:\n            raise ValueError(\"Number of repetitions must be greater than 0.\")\n\n        if any(key in cvargs for key in ('random_state', 'shuffle')):\n            raise ValueError(\n                \"cvargs must not contain random_state or shuffle.\")\n\n        self.cv = cv\n        self.n_repeats = n_repeats\n        self.random_state = random_state\n        self.cvargs = cvargs\n        for key, value in cvargs.items():\n            setattr(self, key, value)\n</replace>"
          },
          "output": {
            "diff": "--- sklearn/model_selection/_split.py\n+++ sklearn/model_selection/_split.py\n@@ -1102,6 +1102,8 @@\n         self.n_repeats = n_repeats\n         self.random_state = random_state\n         self.cvargs = cvargs\n+        for key, value in cvargs.items():\n+            setattr(self, key, value)\n \n     def split(self, X, y=None, groups=None):\n         \"\"\"Generates indices to split data into training and test set.\n",
            "message": "Applied the change to sklearn/model_selection/_split.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 6189,
          "output_tokens": 206,
          "retry_message": null,
          "completion_cost": 0.021657
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sklearn/model_selection/_split.py\n+++ sklearn/model_selection/_split.py\n@@ -1102,6 +1102,8 @@\n         self.n_repeats = n_repeats\n         self.random_state = random_state\n         self.cvargs = cvargs\n+        for key, value in cvargs.items():\n+            setattr(self, key, value)\n \n     def split(self, X, y=None, groups=None):\n         \"\"\"Generates indices to split data into training and test set.\n",
        "model": "deepseek-coder",
        "message": "Applied the change to sklearn/model_selection/_split.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "_build_repr",
            "file_path": "sklearn/model_selection/_split.py",
            "scratch_pad": "The initial change added a loop to set attributes from the `cvargs` dictionary in the `_RepeatedSplits.__init__` method. This ensures that the `n_splits` parameter, which is passed via `cvargs`, is set as an attribute. However, the `_build_repr` function still needs to be updated to ensure it includes `n_splits` in its representation.",
            "instructions": "Update the `_build_repr` function to ensure it correctly captures and displays the `n_splits` parameter for the `RepeatedKFold` and `RepeatedStratifiedKFold` classes."
          },
          "output": {
            "span_id": "_build_repr",
            "end_line": 2170,
            "file_path": "sklearn/model_selection/_split.py",
            "start_line": 2140,
            "instructions": "Update the `_build_repr` function to ensure it correctly captures and displays the `n_splits` parameter for the `RepeatedKFold` and `RepeatedStratifiedKFold` classes."
          },
          "input_tokens": 3577,
          "output_tokens": 200,
          "retry_message": null,
          "completion_cost": 0.013731
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "_build_repr",
        "end_line": 2170,
        "file_path": "sklearn/model_selection/_split.py",
        "max_tokens": 1000,
        "start_line": 2140,
        "temperature": 1.6,
        "instructions": "Update the `_build_repr` function to ensure it correctly captures and displays the `n_splits` parameter for the `RepeatedKFold` and `RepeatedStratifiedKFold` classes.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```python\n<replace>\ndef _build_repr(self):\n    # XXX This is copied from BaseEstimator's get_params\n    cls = self.__class__\n    init = getattr(cls.__init__, 'deprecated_original', cls.__init__)\n    # Ignore varargs, kw and default values and pop self\n    init_signature = signature(init)\n    # Consider the constructor parameters excluding 'self'\n    if init is object.__init__:\n        args = []\n    else:\n        args = sorted([p.name for p in init_signature.parameters.values()\n                       if p.name != 'self' and p.kind != p.VAR_KEYWORD])\n    class_name = self.__class__.__name__\n    params = dict()\n    for key in args:\n        # We need deprecation warnings to always be on in order to\n        # catch deprecated param values.\n        # This is set in utils/__init__.py but it gets overwritten\n        # when running under python3 somehow.\n        warnings.simplefilter(\"always\", DeprecationWarning)\n        try:\n            with warnings.catch_warnings(record=True) as w:\n                value = getattr(self, key, None)\n            if len(w) and w[0].category == DeprecationWarning:\n                # if the parameter is deprecated, don't show it\n                continue\n        finally:\n            warnings.filters.pop(0)\n        if key == 'n_splits' and isinstance(self, (_RepeatedSplits, RepeatedKFold, RepeatedStratifiedKFold)):\n            params['n_splits'] = getattr(self, 'n_splits', None)\n            params['n_repeats'] = getattr(self, 'n_repeats', None)\n            params['random_state'] = getattr(self, 'random_state', None)\n        else:\n            params[key] = value\n\n    return '%s(%s)' % (class_name, _pprint(params, offset=len(class_name)))\n</replace>"
          },
          "output": {
            "diff": "--- sklearn/model_selection/_split.py\n+++ sklearn/model_selection/_split.py\n@@ -2165,6 +2165,11 @@\n                 continue\n         finally:\n             warnings.filters.pop(0)\n-        params[key] = value\n+        if key == 'n_splits' and isinstance(self, (_RepeatedSplits, RepeatedKFold, RepeatedStratifiedKFold)):\n+            params['n_splits'] = getattr(self, 'n_splits', None)\n+            params['n_repeats'] = getattr(self, 'n_repeats', None)\n+            params['random_state'] = getattr(self, 'random_state', None)\n+        else:\n+            params[key] = value\n \n     return '%s(%s)' % (class_name, _pprint(params, offset=len(class_name)))",
            "message": "Applied the change to sklearn/model_selection/_split.py.\n\n<scratch_pad>\n```python\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 6377,
          "output_tokens": 470,
          "retry_message": null,
          "completion_cost": 0.026181000000000003
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sklearn/model_selection/_split.py\n+++ sklearn/model_selection/_split.py\n@@ -2165,6 +2165,11 @@\n                 continue\n         finally:\n             warnings.filters.pop(0)\n-        params[key] = value\n+        if key == 'n_splits' and isinstance(self, (_RepeatedSplits, RepeatedKFold, RepeatedStratifiedKFold)):\n+            params['n_splits'] = getattr(self, 'n_splits', None)\n+            params['n_repeats'] = getattr(self, 'n_repeats', None)\n+            params['random_state'] = getattr(self, 'random_state', None)\n+        else:\n+            params[key] = value\n \n     return '%s(%s)' % (class_name, _pprint(params, offset=len(class_name)))",
        "model": "deepseek-coder",
        "message": "Applied the change to sklearn/model_selection/_split.py.\n\n<scratch_pad>\n```python\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The fixes implemented address the issue by ensuring that `n_splits`, `n_repeats`, and `random_state` are correctly included in the `__repr__` string for `RepeatedKFold` and `RepeatedStratifiedKFold`.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The second change updated the `_build_repr` function to specifically handle the `n_splits`, `n_repeats`, and `random_state` parameters for `RepeatedKFold` and `RepeatedStratifiedKFold`. This ensures that these parameters are included in the `__repr__` string for these classes.",
            "instructions": null
          },
          "output": {
            "message": "The fixes implemented address the issue by ensuring that `n_splits`, `n_repeats`, and `random_state` are correctly included in the `__repr__` string for `RepeatedKFold` and `RepeatedStratifiedKFold`."
          },
          "input_tokens": 4144,
          "output_tokens": 187,
          "retry_message": null,
          "completion_cost": 0.015237
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The fixes implemented address the issue by ensuring that `n_splits`, `n_repeats`, and `random_state` are correctly included in the `__repr__` string for `RepeatedKFold` and `RepeatedStratifiedKFold`.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "RepeatedKFold and RepeatedStratifiedKFold do not show correct __repr__ string\n#### Description\r\n\r\n`RepeatedKFold` and `RepeatedStratifiedKFold` do not show correct \\_\\_repr\\_\\_ string.\r\n\r\n#### Steps/Code to Reproduce\r\n\r\n```python\r\n>>> from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\r\n>>> repr(RepeatedKFold())\r\n>>> repr(RepeatedStratifiedKFold())\r\n```\r\n\r\n#### Expected Results\r\n\r\n```python\r\n>>> repr(RepeatedKFold())\r\nRepeatedKFold(n_splits=5, n_repeats=10, random_state=None)\r\n>>> repr(RepeatedStratifiedKFold())\r\nRepeatedStratifiedKFold(n_splits=5, n_repeats=10, random_state=None)\r\n```\r\n\r\n#### Actual Results\r\n\r\n```python\r\n>>> repr(RepeatedKFold())\r\n'<sklearn.model_selection._split.RepeatedKFold object at 0x0000016421AA4288>'\r\n>>> repr(RepeatedStratifiedKFold())\r\n'<sklearn.model_selection._split.RepeatedStratifiedKFold object at 0x0000016420E115C8>'\r\n```\r\n\r\n#### Versions\r\n```\r\nSystem:\r\n    python: 3.7.4 (default, Aug  9 2019, 18:34:13) [MSC v.1915 64 bit (AMD64)]\r\nexecutable: D:\\anaconda3\\envs\\xyz\\python.exe\r\n   machine: Windows-10-10.0.16299-SP0\r\n\r\nBLAS:\r\n    macros:\r\n  lib_dirs:\r\ncblas_libs: cblas\r\n\r\nPython deps:\r\n       pip: 19.2.2\r\nsetuptools: 41.0.1\r\n   sklearn: 0.21.2\r\n     numpy: 1.16.4\r\n     scipy: 1.3.1\r\n    Cython: None\r\n    pandas: 0.24.2\r\n```\n"
}