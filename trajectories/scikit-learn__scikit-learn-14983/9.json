{
  "info": {
    "duration": 217.42322516441345,
    "submission": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex c49a3ce6a..fd714452e 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1136,6 +1136,9 @@ class _RepeatedSplits(metaclass=ABCMeta):\n             for train_index, test_index in cv.split(X, y, groups):\n                 yield train_index, test_index\n \n+    def __repr__(self):\n+        return _build_repr(self)\n+\n     def get_n_splits(self, X=None, y=None, groups=None):\n         \"\"\"Returns the number of splitting iterations in the cross-validator\n \n",
    "total_cost": 0.146673,
    "instance_id": "scikit-learn__scikit-learn-14983",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue pertains to incorrect __repr__ strings for `RepeatedKFold` and `RepeatedStratifiedKFold`. According to the provided context, both classes are derived from `_RepeatedSplits`, which itself is a base class. It's likely that the `__repr__` method needs to be adjusted or may not be implemented properly in these classes. Additionally, the `BaseShuffleSplit` class has a `__repr__` method, which could serve as a reference for how to implement or correct the `__repr__` method in `_RepeatedSplits` derived classes.",
            "search_requests": [
              {
                "query": "incorrect __repr__ string in RepeatedKFold and RepeatedStratifiedKFold",
                "class_names": [
                  "RepeatedKFold",
                  "RepeatedStratifiedKFold"
                ],
                "code_snippet": null,
                "file_pattern": "**/model_selection/_split.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 437,
                "span_id": "RepeatedStratifiedKFold",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 1,
                "tokens": 458,
                "span_id": "RepeatedKFold",
                "file_path": "sklearn/model_selection/_split.py"
              }
            ],
            "search_requests": [
              {
                "query": "incorrect __repr__ string in RepeatedKFold and RepeatedStratifiedKFold",
                "class_names": [
                  "RepeatedKFold",
                  "RepeatedStratifiedKFold"
                ],
                "code_snippet": null,
                "file_pattern": "**/model_selection/_split.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 3497,
          "output_tokens": 223,
          "retry_message": null,
          "completion_cost": 0.013836000000000001
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 437,
            "span_id": "RepeatedStratifiedKFold",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 1,
            "tokens": 458,
            "span_id": "RepeatedKFold",
            "file_path": "sklearn/model_selection/_split.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue states that the `__repr__` method for `RepeatedKFold` and `RepeatedStratifiedKFold` does not display the expected string. The search results show definitions for these classes and their initializers. The initializer for both classes is calling `super().__init__` which might be pointing to the correct setup for these classes. However, there is no explicit definition of the `__repr__` method within these spans. The expected behavior is not directly addressed in the provided spans, so it's not clear if these spans alone are sufficient to correct the issue. Further investigation into how the `__repr__` method is inherited or defined higher up the class hierarchy might be necessary to fully resolve the issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "RepeatedKFold.__init__",
                  "RepeatedStratifiedKFold.__init__"
                ],
                "file_path": "sklearn/model_selection/_split.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 1814,
          "output_tokens": 237,
          "retry_message": null,
          "completion_cost": 0.008997
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The issue pertains to incorrect __repr__ strings for `RepeatedKFold` and `RepeatedStratifiedKFold`. According to the provided context, both classes are derived from `_RepeatedSplits`, which itself is a base class. It's likely that the `__repr__` method needs to be adjusted or may not be implemented properly in these classes. Additionally, the `BaseShuffleSplit` class has a `__repr__` method, which could serve as a reference for how to implement or correct the `__repr__` method in `_RepeatedSplits` derived classes.",
            "search_suggestions": "Look for the `_RepeatedSplits` class definition and check if it has an implementation for the `__repr__` method. If not, consider adding or correcting it similar to the `__repr__` method in the `BaseShuffleSplit` class."
          },
          "output": {
            "message": "Look for the `_RepeatedSplits` class definition and check if it has an implementation for the `__repr__` method. If not, consider adding or correcting it similar to the `__repr__` method in the `BaseShuffleSplit` class."
          },
          "input_tokens": 1672,
          "output_tokens": 215,
          "retry_message": null,
          "completion_cost": 0.008241
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look for the `_RepeatedSplits` class definition and check if it has an implementation for the `__repr__` method. If not, consider adding or correcting it similar to the `__repr__` method in the `BaseShuffleSplit` class.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The investigation into the `_RepeatedSplits` class definition in the `_split.py` file revealed that the class neither has a `__repr__` method nor an obvious reference to it in the provided excerpt. It is crucial to include a `__repr__` method in `_RepeatedSplits` similar to the `__repr__` method in `BaseShuffleSplit`. This would ensure that all derived classes like `RepeatedKFold` and `RepeatedStratifiedKFold` display the correct representation string when the `repr()` function is called on them. Therefore, searching for the complete definition of the `_RepeatedSplits` class in the `_split.py` file should continue, focusing on adding the `__repr__` method to this class.",
            "search_requests": [
              {
                "query": "definition of _RepeatedSplits class to include or correct __repr__ method",
                "class_names": [
                  "_RepeatedSplits"
                ],
                "code_snippet": null,
                "file_pattern": "**/model_selection/_split.py",
                "function_names": [
                  "__repr__"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 174,
                "span_id": "_RepeatedSplits",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 0,
                "tokens": 11,
                "span_id": "BaseCrossValidator.__repr__",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 0,
                "tokens": 11,
                "span_id": "BaseShuffleSplit.__repr__",
                "file_path": "sklearn/model_selection/_split.py"
              }
            ],
            "search_requests": [
              {
                "query": "definition of _RepeatedSplits class to include or correct __repr__ method",
                "class_names": [
                  "_RepeatedSplits"
                ],
                "code_snippet": null,
                "file_pattern": "**/model_selection/_split.py",
                "function_names": [
                  "__repr__"
                ]
              }
            ]
          },
          "input_tokens": 4035,
          "output_tokens": 282,
          "retry_message": null,
          "completion_cost": 0.016335
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 174,
            "span_id": "_RepeatedSplits",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 0,
            "tokens": 11,
            "span_id": "BaseCrossValidator.__repr__",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 0,
            "tokens": 11,
            "span_id": "BaseShuffleSplit.__repr__",
            "file_path": "sklearn/model_selection/_split.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The issue reported is about the incorrect `__repr__` string for `RepeatedKFold` and `RepeatedStratifiedKFold`. The provided context and search results help in identifying the relevant parts of the codebase. The context includes the class definitions for `RepeatedKFold` and `RepeatedStratifiedKFold` and their constructors. The search results contain the `BaseCrossValidator` class with a `__repr__` method that calls `_build_repr`, and `_RepeatedSplits` class that initializes the repeated splits. Notably, the `_build_repr` function builds the representation string for the classes. Given this, the relevant code spans are those related to the `BaseCrossValidator`, `_RepeatedSplits`, and `_build_repr` as they directly influence how the `RepeatedKFold` and `RepeatedStratifiedKFold` classes are represented.",
            "identified_spans": [
              {
                "span_ids": [
                  "BaseCrossValidator",
                  "BaseCrossValidator.__repr__",
                  "_RepeatedSplits",
                  "_RepeatedSplits.__init__",
                  "_build_repr"
                ],
                "file_path": "sklearn/model_selection/_split.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 2594,
          "output_tokens": 289,
          "retry_message": null,
          "completion_cost": 0.012117
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The investigation into the `_RepeatedSplits` class definition in the `_split.py` file revealed that the class neither has a `__repr__` method nor an obvious reference to it in the provided excerpt. It is crucial to include a `__repr__` method in `_RepeatedSplits` similar to the `__repr__` method in `BaseShuffleSplit`. This would ensure that all derived classes like `RepeatedKFold` and `RepeatedStratifiedKFold` display the correct representation string when the `repr()` function is called on them. Therefore, searching for the complete definition of the `_RepeatedSplits` class in the `_split.py` file should continue, focusing on adding the `__repr__` method to this class.",
            "search_suggestions": "Look for the complete definition of the `_RepeatedSplits` class in the `_split.py` file to add the `__repr__` method to this class."
          },
          "output": {
            "message": "Look for the complete definition of the `_RepeatedSplits` class in the `_split.py` file to add the `__repr__` method to this class."
          },
          "input_tokens": 2686,
          "output_tokens": 235,
          "retry_message": null,
          "completion_cost": 0.011583000000000001
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look for the complete definition of the `_RepeatedSplits` class in the `_split.py` file to add the `__repr__` method to this class.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "scratch_pad": "The `_RepeatedSplits` class does not currently have a `__repr__` method. It can be added by extending the class definition as shown below. This ensures that `RepeatedKFold` and `RepeatedStratifiedKFold` will have an appropriate representation string when the `repr()` function is used on them.",
            "search_requests": [
              {
                "query": "add __repr__ method to _RepeatedSplits class",
                "class_names": [
                  "_RepeatedSplits"
                ],
                "code_snippet": "class _RepeatedSplits(metaclass=ABCMeta):\n    def __init__(self, cv, n_repeats=10, random_state=None, **cvargs):\n        # ... rest of the code\n\n    def __repr__(self):\n        return _build_repr(self)",
                "file_pattern": "**/model_selection/_split.py",
                "function_names": [
                  "__repr__"
                ]
              }
            ]
          },
          "output": {
            "message": "The `_RepeatedSplits` class does not currently have a `__repr__` method. It can be added by extending the class definition as shown below. This ensures that `RepeatedKFold` and `RepeatedStratifiedKFold` will have an appropriate representation string when the `repr()` function is used on them."
          },
          "input_tokens": 5336,
          "output_tokens": 256,
          "retry_message": null,
          "completion_cost": 0.019848
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "The `_RepeatedSplits` class does not currently have a `__repr__` method. It can be added by extending the class definition as shown below. This ensures that `RepeatedKFold` and `RepeatedStratifiedKFold` will have an appropriate representation string when the `repr()` function is used on them.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "_RepeatedSplits",
            "file_path": "sklearn/model_selection/_split.py",
            "scratch_pad": "Adding a `__repr__` method to the `_RepeatedSplits` class will ensure that `RepeatedKFold` and `RepeatedStratifiedKFold` have an appropriate representation string. This method can be similar to the one found in `BaseCrossValidator` to ensure consistency.",
            "instructions": "Add a `__repr__` method to the `_RepeatedSplits` class that returns the result of `_build_repr(self)`, similar to the `__repr__` method in `BaseCrossValidator`."
          },
          "output": {
            "span_id": "_RepeatedSplits",
            "file_path": "sklearn/model_selection/_split.py",
            "instructions": "Add a `__repr__` method to the `_RepeatedSplits` class that returns the result of `_build_repr(self)`, similar to the `__repr__` method in `BaseCrossValidator`."
          },
          "input_tokens": 3374,
          "output_tokens": 180,
          "retry_message": null,
          "completion_cost": 0.012822
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "_RepeatedSplits",
        "end_line": null,
        "file_path": "sklearn/model_selection/_split.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Add a `__repr__` method to the `_RepeatedSplits` class that returns the result of `_build_repr(self)`, similar to the `__repr__` method in `BaseCrossValidator`.\n\nThe instruction requires adding a `__repr__` method to the `_RepeatedSplits` class. The `__repr__` method should return the result of `_build_repr(self)`, which is similar to the implementation in `BaseCrossValidator`. The best location to add this method is directly after the `get_n_splits` method, which is line 1140 in the provided code.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 1140,
            "start_line": 1140,
            "scratch_pad": "The instruction requires adding a `__repr__` method to the `_RepeatedSplits` class. The `__repr__` method should return the result of `_build_repr(self)`, which is similar to the implementation in `BaseCrossValidator`. The best location to add this method is directly after the `get_n_splits` method, which is line 1140 in the provided code."
          },
          "output": {
            "span_id": "_RepeatedSplits",
            "end_line": 1164,
            "file_path": "sklearn/model_selection/_split.py",
            "start_line": 1139,
            "instructions": "Add a `__repr__` method to the `_RepeatedSplits` class that returns the result of `_build_repr(self)`, similar to the `__repr__` method in `BaseCrossValidator`.\n\nThe instruction requires adding a `__repr__` method to the `_RepeatedSplits` class. The `__repr__` method should return the result of `_build_repr(self)`, which is similar to the implementation in `BaseCrossValidator`. The best location to add this method is directly after the `get_n_splits` method, which is line 1140 in the provided code."
          },
          "input_tokens": 933,
          "output_tokens": 136,
          "retry_message": null,
          "completion_cost": 0.004839
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "_RepeatedSplits",
        "end_line": 1164,
        "file_path": "sklearn/model_selection/_split.py",
        "max_tokens": 1000,
        "start_line": 1139,
        "temperature": 1.6,
        "instructions": "Add a `__repr__` method to the `_RepeatedSplits` class that returns the result of `_build_repr(self)`, similar to the `__repr__` method in `BaseCrossValidator`.\n\nThe instruction requires adding a `__repr__` method to the `_RepeatedSplits` class. The `__repr__` method should return the result of `_build_repr(self)`, which is similar to the implementation in `BaseCrossValidator`. The best location to add this method is directly after the `get_n_splits` method, which is line 1140 in the provided code.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n    def __repr__(self):\n        return _build_repr(self)\n\n    def get_n_splits(self, X=None, y=None, groups=None):\n        \"\"\"Returns the number of splitting iterations in the cross-validator\n\n        Parameters\n        ----------\n        X : object\n            Always ignored, exists for compatibility.\n            ``np.zeros(n_samples)`` may be used as a placeholder.\n\n        y : object\n            Always ignored, exists for compatibility.\n            ``np.zeros(n_samples)`` may be used as a placeholder.\n\n        groups : array-like, with shape (n_samples,), optional\n            Group labels for the samples used while splitting the dataset into\n            train/test set.\n\n        Returns\n        -------\n        n_splits : int\n            Returns the number of splitting iterations in the cross-validator.\n        \"\"\"\n        rng = check_random_state(self.random_state)\n        cv = self.cv(random_state=rng, shuffle=True,\n                     **self.cvargs)\n        return cv.get_n_splits(X, y, groups) * self.n_repeats\n</replace>"
          },
          "output": {
            "diff": "--- sklearn/model_selection/_split.py\n+++ sklearn/model_selection/_split.py\n@@ -1135,6 +1135,9 @@\n                          **self.cvargs)\n             for train_index, test_index in cv.split(X, y, groups):\n                 yield train_index, test_index\n+\n+    def __repr__(self):\n+        return _build_repr(self)\n \n     def get_n_splits(self, X=None, y=None, groups=None):\n         \"\"\"Returns the number of splitting iterations in the cross-validator\n",
            "message": "Applied the change to sklearn/model_selection/_split.py.",
            "verification_errors": []
          },
          "input_tokens": 6593,
          "output_tokens": 277,
          "retry_message": null,
          "completion_cost": 0.023934
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sklearn/model_selection/_split.py\n+++ sklearn/model_selection/_split.py\n@@ -1135,6 +1135,9 @@\n                          **self.cvargs)\n             for train_index, test_index in cv.split(X, y, groups):\n                 yield train_index, test_index\n+\n+    def __repr__(self):\n+        return _build_repr(self)\n \n     def get_n_splits(self, X=None, y=None, groups=None):\n         \"\"\"Returns the number of splitting iterations in the cross-validator\n",
        "model": "deepseek-coder",
        "message": "Applied the change to sklearn/model_selection/_split.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue of incorrect `__repr__` string for `RepeatedKFold` and `RepeatedStratifiedKFold` has been resolved by adding the `__repr__` method to the `_RepeatedSplits` class. This method was implemented in a manner consistent with other classes in the module, ensuring uniformity and correctness of the representation.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The `__repr__` method has been successfully added to the `_RepeatedSplits` class, ensuring that `RepeatedKFold` and `RepeatedStratifiedKFold` will now display the correct representation string when the `repr()` function is used on them.",
            "instructions": null
          },
          "output": {
            "message": "The issue of incorrect `__repr__` string for `RepeatedKFold` and `RepeatedStratifiedKFold` has been resolved by adding the `__repr__` method to the `_RepeatedSplits` class. This method was implemented in a manner consistent with other classes in the module, ensuring uniformity and correctness of the representation."
          },
          "input_tokens": 3772,
          "output_tokens": 187,
          "retry_message": null,
          "completion_cost": 0.014121
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue of incorrect `__repr__` string for `RepeatedKFold` and `RepeatedStratifiedKFold` has been resolved by adding the `__repr__` method to the `_RepeatedSplits` class. This method was implemented in a manner consistent with other classes in the module, ensuring uniformity and correctness of the representation.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "RepeatedKFold and RepeatedStratifiedKFold do not show correct __repr__ string\n#### Description\r\n\r\n`RepeatedKFold` and `RepeatedStratifiedKFold` do not show correct \\_\\_repr\\_\\_ string.\r\n\r\n#### Steps/Code to Reproduce\r\n\r\n```python\r\n>>> from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\r\n>>> repr(RepeatedKFold())\r\n>>> repr(RepeatedStratifiedKFold())\r\n```\r\n\r\n#### Expected Results\r\n\r\n```python\r\n>>> repr(RepeatedKFold())\r\nRepeatedKFold(n_splits=5, n_repeats=10, random_state=None)\r\n>>> repr(RepeatedStratifiedKFold())\r\nRepeatedStratifiedKFold(n_splits=5, n_repeats=10, random_state=None)\r\n```\r\n\r\n#### Actual Results\r\n\r\n```python\r\n>>> repr(RepeatedKFold())\r\n'<sklearn.model_selection._split.RepeatedKFold object at 0x0000016421AA4288>'\r\n>>> repr(RepeatedStratifiedKFold())\r\n'<sklearn.model_selection._split.RepeatedStratifiedKFold object at 0x0000016420E115C8>'\r\n```\r\n\r\n#### Versions\r\n```\r\nSystem:\r\n    python: 3.7.4 (default, Aug  9 2019, 18:34:13) [MSC v.1915 64 bit (AMD64)]\r\nexecutable: D:\\anaconda3\\envs\\xyz\\python.exe\r\n   machine: Windows-10-10.0.16299-SP0\r\n\r\nBLAS:\r\n    macros:\r\n  lib_dirs:\r\ncblas_libs: cblas\r\n\r\nPython deps:\r\n       pip: 19.2.2\r\nsetuptools: 41.0.1\r\n   sklearn: 0.21.2\r\n     numpy: 1.16.4\r\n     scipy: 1.3.1\r\n    Cython: None\r\n    pandas: 0.24.2\r\n```\n"
}