{
  "info": {
    "duration": 153.61956930160522,
    "submission": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex c49a3ce6a..3e16b67cb 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -1103,6 +1103,9 @@ class _RepeatedSplits(metaclass=ABCMeta):\n         self.random_state = random_state\n         self.cvargs = cvargs\n \n+    def __repr__(self):\n+        params = f\"n_splits={self.cvargs.get('n_splits', 5)}, n_repeats={self.n_repeats}, random_state={self.random_state}\"\n+        return f\"{self.__class__.__name__}({params})\"\n     def split(self, X, y=None, groups=None):\n         \"\"\"Generates indices to split data into training and test set.\n \n",
    "total_cost": 0.11420400000000001,
    "instance_id": "scikit-learn__scikit-learn-14983",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue indicates that the __repr__ method for RepeatedKFold and RepeatedStratifiedKFold classes is not returning the expected string representation. This problem seems to be specific to these two classes and their methods. Therefore, the search should focus on these classes within the sklearn.model_selection module to locate the __repr__ method or the related code that constructs the string representation for these classes.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "RepeatedKFold",
                  "RepeatedStratifiedKFold"
                ],
                "code_snippet": null,
                "file_pattern": "sklearn/model_selection/_split.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 458,
                "span_id": "RepeatedKFold",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 0,
                "tokens": 41,
                "span_id": "RepeatedKFold.__init__",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 0,
                "tokens": 437,
                "span_id": "RepeatedStratifiedKFold",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 0,
                "tokens": 43,
                "span_id": "RepeatedStratifiedKFold.__init__",
                "file_path": "sklearn/model_selection/_split.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "RepeatedKFold",
                  "RepeatedStratifiedKFold"
                ],
                "code_snippet": null,
                "file_pattern": "sklearn/model_selection/_split.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 3497,
          "output_tokens": 169,
          "retry_message": null,
          "completion_cost": 0.013026
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 458,
            "span_id": "RepeatedKFold",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 0,
            "tokens": 41,
            "span_id": "RepeatedKFold.__init__",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 0,
            "tokens": 437,
            "span_id": "RepeatedStratifiedKFold",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 0,
            "tokens": 43,
            "span_id": "RepeatedStratifiedKFold.__init__",
            "file_path": "sklearn/model_selection/_split.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about the `__repr__` method for `RepeatedKFold` and `RepeatedStratifiedKFold` not showing the correct string representation. The current representation only shows the object's memory location rather than the detailed information about `n_splits`, `n_repeats`, and `random_state`. The search results show the classes and their `__init__` methods, but do not include the `__repr__` method or how the base class `_RepeatedSplits` might be handling this. To address the issue, it's necessary to find where the `__repr__` method is implemented or should be implemented for these classes. Since the search results did not directly include the `__repr__` method, it's likely that either the `__repr__` method is not overridden in these classes, or it is defined but not shown in the search results. For now, I'll mark this task as incomplete as we haven't found the relevant code for the `__repr__` method and need to conduct further searches for overlooked `__repr__` methods or related base class implementations.",
            "identified_spans": null
          },
          "output": {
            "message": "The search returned 4 results. But unfortunately, I didn\u2019t find any of the search results relevant to the query.\n\nThe reported issue is about the `__repr__` method for `RepeatedKFold` and `RepeatedStratifiedKFold` not showing the correct string representation. The current representation only shows the object's memory location rather than the detailed information about `n_splits`, `n_repeats`, and `random_state`. The search results show the classes and their `__init__` methods, but do not include the `__repr__` method or how the base class `_RepeatedSplits` might be handling this. To address the issue, it's necessary to find where the `__repr__` method is implemented or should be implemented for these classes. Since the search results did not directly include the `__repr__` method, it's likely that either the `__repr__` method is not overridden in these classes, or it is defined but not shown in the search results. For now, I'll mark this task as incomplete as we haven't found the relevant code for the `__repr__` method and need to conduct further searches for overlooked `__repr__` methods or related base class implementations."
          },
          "input_tokens": 1814,
          "output_tokens": 262,
          "retry_message": null,
          "completion_cost": 0.009372
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "The search returned 4 results. But unfortunately, I didn\u2019t find any of the search results relevant to the query.\n\nThe reported issue is about the `__repr__` method for `RepeatedKFold` and `RepeatedStratifiedKFold` not showing the correct string representation. The current representation only shows the object's memory location rather than the detailed information about `n_splits`, `n_repeats`, and `random_state`. The search results show the classes and their `__init__` methods, but do not include the `__repr__` method or how the base class `_RepeatedSplits` might be handling this. To address the issue, it's necessary to find where the `__repr__` method is implemented or should be implemented for these classes. Since the search results did not directly include the `__repr__` method, it's likely that either the `__repr__` method is not overridden in these classes, or it is defined but not shown in the search results. For now, I'll mark this task as incomplete as we haven't found the relevant code for the `__repr__` method and need to conduct further searches for overlooked `__repr__` methods or related base class implementations.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The initial search focused on the `sklearn.model_selection._split` module did not yield the `__repr__` method for `RepeatedKFold` and `RepeatedStratifiedKFold`. Since these classes might inherit their `__repr__` method from a base class, the next step is to broaden the search to include base classes such as `_RepeatedSplits` and possibly other modules like `sklearn.base` which often contains foundational code for estimators.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "_RepeatedSplits"
                ],
                "code_snippet": null,
                "file_pattern": "sklearn/model_selection/_split.py",
                "function_names": []
              },
              {
                "query": null,
                "class_names": [
                  "BaseEstimator"
                ],
                "code_snippet": null,
                "file_pattern": "sklearn/base.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 174,
                "span_id": "_RepeatedSplits",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 0,
                "tokens": 122,
                "span_id": "_RepeatedSplits.__init__",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 0,
                "tokens": 220,
                "span_id": "_RepeatedSplits.split",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 0,
                "tokens": 188,
                "span_id": "_RepeatedSplits.get_n_splits",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 0,
                "tokens": 69,
                "span_id": "BaseEstimator",
                "file_path": "sklearn/base.py"
              },
              {
                "rank": 0,
                "tokens": 220,
                "span_id": "BaseEstimator._get_param_names",
                "file_path": "sklearn/base.py"
              },
              {
                "rank": 0,
                "tokens": 196,
                "span_id": "BaseEstimator.get_params",
                "file_path": "sklearn/base.py"
              },
              {
                "rank": 0,
                "tokens": 236,
                "span_id": "BaseEstimator.set_params",
                "file_path": "sklearn/base.py"
              },
              {
                "rank": 0,
                "tokens": 471,
                "span_id": "BaseEstimator.__repr__",
                "file_path": "sklearn/base.py"
              },
              {
                "rank": 0,
                "tokens": 55,
                "span_id": "BaseEstimator.__getstate__",
                "file_path": "sklearn/base.py"
              },
              {
                "rank": 0,
                "tokens": 130,
                "span_id": "BaseEstimator.__setstate__",
                "file_path": "sklearn/base.py"
              },
              {
                "rank": 0,
                "tokens": 9,
                "span_id": "BaseEstimator._more_tags",
                "file_path": "sklearn/base.py"
              },
              {
                "rank": 0,
                "tokens": 98,
                "span_id": "BaseEstimator._get_tags",
                "file_path": "sklearn/base.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "_RepeatedSplits"
                ],
                "code_snippet": null,
                "file_pattern": "sklearn/model_selection/_split.py",
                "function_names": []
              },
              {
                "query": null,
                "class_names": [
                  "BaseEstimator"
                ],
                "code_snippet": null,
                "file_pattern": "sklearn/base.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 3961,
          "output_tokens": 261,
          "retry_message": null,
          "completion_cost": 0.015798
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 174,
            "span_id": "_RepeatedSplits",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 0,
            "tokens": 122,
            "span_id": "_RepeatedSplits.__init__",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 0,
            "tokens": 220,
            "span_id": "_RepeatedSplits.split",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 0,
            "tokens": 188,
            "span_id": "_RepeatedSplits.get_n_splits",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 0,
            "tokens": 69,
            "span_id": "BaseEstimator",
            "file_path": "sklearn/base.py"
          },
          {
            "rank": 0,
            "tokens": 220,
            "span_id": "BaseEstimator._get_param_names",
            "file_path": "sklearn/base.py"
          },
          {
            "rank": 0,
            "tokens": 196,
            "span_id": "BaseEstimator.get_params",
            "file_path": "sklearn/base.py"
          },
          {
            "rank": 0,
            "tokens": 236,
            "span_id": "BaseEstimator.set_params",
            "file_path": "sklearn/base.py"
          },
          {
            "rank": 0,
            "tokens": 471,
            "span_id": "BaseEstimator.__repr__",
            "file_path": "sklearn/base.py"
          },
          {
            "rank": 0,
            "tokens": 55,
            "span_id": "BaseEstimator.__getstate__",
            "file_path": "sklearn/base.py"
          },
          {
            "rank": 0,
            "tokens": 130,
            "span_id": "BaseEstimator.__setstate__",
            "file_path": "sklearn/base.py"
          },
          {
            "rank": 0,
            "tokens": 9,
            "span_id": "BaseEstimator._more_tags",
            "file_path": "sklearn/base.py"
          },
          {
            "rank": 0,
            "tokens": 98,
            "span_id": "BaseEstimator._get_tags",
            "file_path": "sklearn/base.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue mentions that the `__repr__` method for `RepeatedKFold` and `RepeatedStratifiedKFold` classes do not show the correct representation string. These classes are derived from `_RepeatedSplits`, which in turn does not override the `__repr__` method from `BaseEstimator`. The `__repr__` method in `BaseEstimator` is responsible for generating the string representation for all estimator classes. Given the issue, the relevant code spans are from `BaseEstimator` in `base.py` where the `__repr__` method is defined and from `_RepeatedSplits` in `_split.py` where the derived classes `RepeatedKFold` and `RepeatedStratifiedKFold` are declared. Further investigation may be needed to determine if the issue lies in how `_RepeatedSplits` passes information to the `BaseEstimator`'s `__repr__` method or if `BaseEstimator`'s method needs to be adjusted to correctly represent these derived classes.",
            "identified_spans": [
              {
                "span_ids": [
                  "RepeatedKFold",
                  "RepeatedStratifiedKFold",
                  "_RepeatedSplits",
                  "_RepeatedSplits.__init__"
                ],
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "span_ids": [
                  "BaseEstimator",
                  "BaseEstimator.__repr__"
                ],
                "file_path": "sklearn/base.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3702,
          "output_tokens": 362,
          "retry_message": null,
          "completion_cost": 0.016536
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "Although the search initially focused on the `sklearn.model_selection._split` module which did not yield the `__repr__` method for `RepeatedKFold` and `RepeatedStratifiedKFold`, the broader search including the base class `_RepeatedSplits` and the `sklearn.base` module did reveal the `__repr__` method in the `BaseEstimator` class, which is likely to be inherited by these classes. Thus, considering the inheritance structure and the presence of the `__repr__` method in the base class, it can be concluded that all relevant file context has been identified to address the issue.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 2315,
          "output_tokens": 172,
          "retry_message": null,
          "completion_cost": 0.009525
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "_RepeatedSplits",
            "file_path": "sklearn/model_selection/_split.py",
            "scratch_pad": "The __repr__ method for RepeatedKFold and RepeatedStratifiedKFold does not show the correct string representation. This is because the _RepeatedSplits class does not implement a __repr__ method, and the BaseEstimator's __repr__ method is being used instead.",
            "instructions": "Implement the __repr__ method in the _RepeatedSplits class to correctly display the parameters of RepeatedKFold and RepeatedStratifiedKFold."
          },
          "output": {
            "span_id": "_RepeatedSplits",
            "file_path": "sklearn/model_selection/_split.py",
            "instructions": "Implement the __repr__ method in the _RepeatedSplits class to correctly display the parameters of RepeatedKFold and RepeatedStratifiedKFold."
          },
          "input_tokens": 2972,
          "output_tokens": 153,
          "retry_message": null,
          "completion_cost": 0.011211
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "_RepeatedSplits",
        "end_line": null,
        "file_path": "sklearn/model_selection/_split.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Implement the __repr__ method in the _RepeatedSplits class to correctly display the parameters of RepeatedKFold and RepeatedStratifiedKFold.\n\nThe __repr__ method is missing in the _RepeatedSplits class. This method should be implemented between lines 1091 and 1105 to ensure that the parameters of RepeatedKFold and RepeatedStratifiedKFold are correctly displayed.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 1105,
            "start_line": 1091,
            "scratch_pad": "The __repr__ method is missing in the _RepeatedSplits class. This method should be implemented between lines 1091 and 1105 to ensure that the parameters of RepeatedKFold and RepeatedStratifiedKFold are correctly displayed."
          },
          "output": {
            "span_id": "_RepeatedSplits",
            "end_line": 1105,
            "file_path": "sklearn/model_selection/_split.py",
            "start_line": 1091,
            "instructions": "Implement the __repr__ method in the _RepeatedSplits class to correctly display the parameters of RepeatedKFold and RepeatedStratifiedKFold.\n\nThe __repr__ method is missing in the _RepeatedSplits class. This method should be implemented between lines 1091 and 1105 to ensure that the parameters of RepeatedKFold and RepeatedStratifiedKFold are correctly displayed."
          },
          "input_tokens": 919,
          "output_tokens": 96,
          "retry_message": null,
          "completion_cost": 0.004197
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "_RepeatedSplits",
        "end_line": 1105,
        "file_path": "sklearn/model_selection/_split.py",
        "max_tokens": 1000,
        "start_line": 1091,
        "temperature": 1.6,
        "instructions": "Implement the __repr__ method in the _RepeatedSplits class to correctly display the parameters of RepeatedKFold and RepeatedStratifiedKFold.\n\nThe __repr__ method is missing in the _RepeatedSplits class. This method should be implemented between lines 1091 and 1105 to ensure that the parameters of RepeatedKFold and RepeatedStratifiedKFold are correctly displayed.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```\n<replace>\n        if not isinstance(n_repeats, numbers.Integral):\n            raise ValueError(\"Number of repetitions must be of Integral type.\")\n\n        if n_repeats <= 0:\n            raise ValueError(\"Number of repetitions must be greater than 0.\")\n\n        if any(key in cvargs for key in ('random_state', 'shuffle')):\n            raise ValueError(\n                \"cvargs must not contain random_state or shuffle.\")\n\n        self.cv = cv\n        self.n_repeats = n_repeats\n        self.random_state = random_state\n        self.cvargs = cvargs\n\n    def __repr__(self):\n        params = f\"n_splits={self.cvargs.get('n_splits', 5)}, n_repeats={self.n_repeats}, random_state={self.random_state}\"\n        return f\"{self.__class__.__name__}({params})\"\n</replace>"
          },
          "output": {
            "diff": "--- sklearn/model_selection/_split.py\n+++ sklearn/model_selection/_split.py\n@@ -1103,6 +1103,9 @@\n         self.random_state = random_state\n         self.cvargs = cvargs\n \n+    def __repr__(self):\n+        params = f\"n_splits={self.cvargs.get('n_splits', 5)}, n_repeats={self.n_repeats}, random_state={self.random_state}\"\n+        return f\"{self.__class__.__name__}({params})\"\n     def split(self, X, y=None, groups=None):\n         \"\"\"Generates indices to split data into training and test set.\n \n",
            "message": "Applied the change to sklearn/model_selection/_split.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 5836,
          "output_tokens": 228,
          "retry_message": null,
          "completion_cost": 0.020928
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sklearn/model_selection/_split.py\n+++ sklearn/model_selection/_split.py\n@@ -1103,6 +1103,9 @@\n         self.random_state = random_state\n         self.cvargs = cvargs\n \n+    def __repr__(self):\n+        params = f\"n_splits={self.cvargs.get('n_splits', 5)}, n_repeats={self.n_repeats}, random_state={self.random_state}\"\n+        return f\"{self.__class__.__name__}({params})\"\n     def split(self, X, y=None, groups=None):\n         \"\"\"Generates indices to split data into training and test set.\n \n",
        "model": "deepseek-coder",
        "message": "Applied the change to sklearn/model_selection/_split.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue has been resolved and the changes have been applied to the _RepeatedSplits class. The __repr__ method now correctly displays the parameters for RepeatedKFold and RepeatedStratifiedKFold.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The __repr__ method has been updated in the _RepeatedSplits class to correctly display the parameters of RepeatedKFold and RepeatedStratifiedKFold. This change ensures that the string representation of these classes includes the n_splits, n_repeats, and random_state parameters.",
            "instructions": null
          },
          "output": {
            "message": "The issue has been resolved and the changes have been applied to the _RepeatedSplits class. The __repr__ method now correctly displays the parameters for RepeatedKFold and RepeatedStratifiedKFold."
          },
          "input_tokens": 3697,
          "output_tokens": 168,
          "retry_message": null,
          "completion_cost": 0.013611
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue has been resolved and the changes have been applied to the _RepeatedSplits class. The __repr__ method now correctly displays the parameters for RepeatedKFold and RepeatedStratifiedKFold.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "RepeatedKFold and RepeatedStratifiedKFold do not show correct __repr__ string\n#### Description\r\n\r\n`RepeatedKFold` and `RepeatedStratifiedKFold` do not show correct \\_\\_repr\\_\\_ string.\r\n\r\n#### Steps/Code to Reproduce\r\n\r\n```python\r\n>>> from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\r\n>>> repr(RepeatedKFold())\r\n>>> repr(RepeatedStratifiedKFold())\r\n```\r\n\r\n#### Expected Results\r\n\r\n```python\r\n>>> repr(RepeatedKFold())\r\nRepeatedKFold(n_splits=5, n_repeats=10, random_state=None)\r\n>>> repr(RepeatedStratifiedKFold())\r\nRepeatedStratifiedKFold(n_splits=5, n_repeats=10, random_state=None)\r\n```\r\n\r\n#### Actual Results\r\n\r\n```python\r\n>>> repr(RepeatedKFold())\r\n'<sklearn.model_selection._split.RepeatedKFold object at 0x0000016421AA4288>'\r\n>>> repr(RepeatedStratifiedKFold())\r\n'<sklearn.model_selection._split.RepeatedStratifiedKFold object at 0x0000016420E115C8>'\r\n```\r\n\r\n#### Versions\r\n```\r\nSystem:\r\n    python: 3.7.4 (default, Aug  9 2019, 18:34:13) [MSC v.1915 64 bit (AMD64)]\r\nexecutable: D:\\anaconda3\\envs\\xyz\\python.exe\r\n   machine: Windows-10-10.0.16299-SP0\r\n\r\nBLAS:\r\n    macros:\r\n  lib_dirs:\r\ncblas_libs: cblas\r\n\r\nPython deps:\r\n       pip: 19.2.2\r\nsetuptools: 41.0.1\r\n   sklearn: 0.21.2\r\n     numpy: 1.16.4\r\n     scipy: 1.3.1\r\n    Cython: None\r\n    pandas: 0.24.2\r\n```\n"
}