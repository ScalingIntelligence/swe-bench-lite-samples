{
  "info": {
    "duration": 150.91124057769775,
    "submission": "",
    "total_cost": 0.137601,
    "instance_id": "scikit-learn__scikit-learn-14983",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue is about the incorrect `__repr__` string for `RepeatedKFold` and `RepeatedStratifiedKFold` classes. The provided context indicates that these classes are located in `sklearn.model_selection._split`. Since the issue specifically mentions incorrect representation, the main focus should be on the `__repr__` method in these classes or in any base class they inherit from. Additionally, there is a mention of `_build_repr` in one of the provided files, which might also be relevant. Since the issue is focused on the `__repr__` method, the search should prioritize finding the code that defines or overrides this method for the mentioned classes.",
            "search_requests": [
              {
                "query": "RepeatedKFold",
                "class_names": [],
                "code_snippet": "def __repr__(self):",
                "file_pattern": "**/model_selection/_split.py",
                "function_names": []
              },
              {
                "query": "RepeatedStratifiedKFold",
                "class_names": [],
                "code_snippet": "def __repr__(self):",
                "file_pattern": "**/model_selection/_split.py",
                "function_names": []
              },
              {
                "query": "_build_repr",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/model_selection/_split.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 11,
                "span_id": "BaseShuffleSplit.__repr__",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 0,
                "tokens": 100,
                "span_id": "BaseShuffleSplit.get_n_splits",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 0,
                "tokens": 27,
                "span_id": "BaseShuffleSplit._iter_indices",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 1,
                "tokens": 28,
                "span_id": "BaseCrossValidator._iter_test_indices",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 1,
                "tokens": 238,
                "span_id": "BaseCrossValidator.split",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 1,
                "tokens": 11,
                "span_id": "BaseCrossValidator.__repr__",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 1,
                "tokens": 31,
                "span_id": "BaseCrossValidator.get_n_splits",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 1,
                "tokens": 83,
                "span_id": "BaseCrossValidator._iter_test_masks",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 0,
                "tokens": 11,
                "span_id": "BaseShuffleSplit.__repr__",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 0,
                "tokens": 100,
                "span_id": "BaseShuffleSplit.get_n_splits",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 0,
                "tokens": 27,
                "span_id": "BaseShuffleSplit._iter_indices",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 1,
                "tokens": 28,
                "span_id": "BaseCrossValidator._iter_test_indices",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 1,
                "tokens": 238,
                "span_id": "BaseCrossValidator.split",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 1,
                "tokens": 11,
                "span_id": "BaseCrossValidator.__repr__",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 1,
                "tokens": 31,
                "span_id": "BaseCrossValidator.get_n_splits",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 1,
                "tokens": 83,
                "span_id": "BaseCrossValidator._iter_test_masks",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 0,
                "tokens": 1071,
                "span_id": "train_test_split",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 0,
                "tokens": 269,
                "span_id": "_build_repr",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 0,
                "tokens": 8,
                "span_id": "impl:3",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 1,
                "tokens": 11,
                "span_id": "BaseShuffleSplit.__repr__",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 1,
                "tokens": 100,
                "span_id": "BaseShuffleSplit.get_n_splits",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 1,
                "tokens": 27,
                "span_id": "BaseShuffleSplit._iter_indices",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 4,
                "tokens": 113,
                "span_id": "ShuffleSplit._iter_indices",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 4,
                "tokens": 765,
                "span_id": "ShuffleSplit",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 5,
                "tokens": 316,
                "span_id": "docstring",
                "file_path": "sklearn/model_selection/_split.py"
              }
            ],
            "search_requests": [
              {
                "query": "RepeatedKFold",
                "class_names": [],
                "code_snippet": "def __repr__(self):",
                "file_pattern": "**/model_selection/_split.py",
                "function_names": []
              },
              {
                "query": "RepeatedStratifiedKFold",
                "class_names": [],
                "code_snippet": "def __repr__(self):",
                "file_pattern": "**/model_selection/_split.py",
                "function_names": []
              },
              {
                "query": "_build_repr",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/model_selection/_split.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 3497,
          "output_tokens": 305,
          "retry_message": null,
          "completion_cost": 0.015066
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 11,
            "span_id": "BaseShuffleSplit.__repr__",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 0,
            "tokens": 100,
            "span_id": "BaseShuffleSplit.get_n_splits",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 0,
            "tokens": 27,
            "span_id": "BaseShuffleSplit._iter_indices",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 1,
            "tokens": 28,
            "span_id": "BaseCrossValidator._iter_test_indices",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 1,
            "tokens": 238,
            "span_id": "BaseCrossValidator.split",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 1,
            "tokens": 11,
            "span_id": "BaseCrossValidator.__repr__",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 1,
            "tokens": 31,
            "span_id": "BaseCrossValidator.get_n_splits",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 1,
            "tokens": 83,
            "span_id": "BaseCrossValidator._iter_test_masks",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 0,
            "tokens": 11,
            "span_id": "BaseShuffleSplit.__repr__",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 0,
            "tokens": 100,
            "span_id": "BaseShuffleSplit.get_n_splits",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 0,
            "tokens": 27,
            "span_id": "BaseShuffleSplit._iter_indices",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 1,
            "tokens": 28,
            "span_id": "BaseCrossValidator._iter_test_indices",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 1,
            "tokens": 238,
            "span_id": "BaseCrossValidator.split",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 1,
            "tokens": 11,
            "span_id": "BaseCrossValidator.__repr__",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 1,
            "tokens": 31,
            "span_id": "BaseCrossValidator.get_n_splits",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 1,
            "tokens": 83,
            "span_id": "BaseCrossValidator._iter_test_masks",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 0,
            "tokens": 1071,
            "span_id": "train_test_split",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 0,
            "tokens": 269,
            "span_id": "_build_repr",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 0,
            "tokens": 8,
            "span_id": "impl:3",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 1,
            "tokens": 11,
            "span_id": "BaseShuffleSplit.__repr__",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 1,
            "tokens": 100,
            "span_id": "BaseShuffleSplit.get_n_splits",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 1,
            "tokens": 27,
            "span_id": "BaseShuffleSplit._iter_indices",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 4,
            "tokens": 113,
            "span_id": "ShuffleSplit._iter_indices",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 4,
            "tokens": 765,
            "span_id": "ShuffleSplit",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 5,
            "tokens": 316,
            "span_id": "docstring",
            "file_path": "sklearn/model_selection/_split.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue pertains to the `RepeatedKFold` and `RepeatedStratifiedKFold` classes not displaying the correct `__repr__` string. The expected behavior is that calling `repr()` on these classes should return a string detailing their parameters (n_splits, n_repeats, random_state), but instead, they return a string representing the object's memory address. This discrepancy suggests an issue with the `__repr__` method in these classes.\n\nThe provided context and search results demonstrate that both `RepeatedKFold` and `RepeatedStratifiedKFold` inherit from `BaseCrossValidator`, which itself has a `__repr__` method that uses a helper function `_build_repr`. This helper function constructs the representation string based on the class parameters. However, with the issue at hand, it appears that the actual parameters are not being correctly captured or formatted in the `repr` string for `RepeatedKFold` and `RepeatedStratifiedKFold`.\n\nThe search results reveal the implementation of the `BaseCrossValidator` class, including the `__repr__` method and the `_build_repr` function. The `_build_repr` function tries to construct a string representation based on the class's initial parameters, but it seems to be missing or not correctly applied in the case of `RepeatedKFold` and `RepeatedStratifiedKFold`. Therefore, the immediate course of action should focus on reviewing and possibly modifying the `__repr__` method implementations for these specific classes or tweaking the `_build_repr` to ensure it accurately captures and displays their unique parameters (n_splits, n_repeats, random_state).\n\nGiven the direction from the search results, the relevant code spans would involve the `BaseCrossValidator` class and its `__repr__` method, specifically looking at the `_build_repr` function's implementation within `sklearn/model_selection/_split.py`. For effective resolution, one should investigate how the `_build_repr` function is used or whether there are overrides in `RepeatedKFold` and `RepeatedStratifiedKFold` that lead to this unexpected behavior.",
            "identified_spans": [
              {
                "span_ids": [
                  "BaseCrossValidator",
                  "BaseCrossValidator.__repr__",
                  "_build_repr"
                ],
                "file_path": "sklearn/model_selection/_split.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3591,
          "output_tokens": 550,
          "retry_message": null,
          "completion_cost": 0.019022999999999998
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The provided file context includes the `sklearn.model_selection._split` module, which contains the `BaseCrossValidator` class with a `__repr__` method that uses `_build_repr`. This method constructs the representation string based on the class's `__init__` parameters. This suggests that the `__repr__` method of `RepeatedKFold` and `RepeatedStratifiedKFold` inherits from `BaseCrossValidator`, which should be sufficient to resolve the issue. The problem might be related to missing or incorrect parameters in these classes' `__init__` methods or issues in the representation logic. Since the relevant base class and utility function are identified, the task can be considered complete.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 2065,
          "output_tokens": 187,
          "retry_message": null,
          "completion_cost": 0.009000000000000001
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "BaseCrossValidator.__repr__",
            "file_path": "sklearn/model_selection/_split.py",
            "scratch_pad": "Reviewing the issue and the provided context, it is clear that the `RepeatedKFold` and `RepeatedStratifiedKFold` classes do not implement their own `__repr__` method and rely on the inherited `__repr__` from `BaseCrossValidator`. This results in the default object representation being displayed instead of the expected string representation. To fix this, we need to implement the `__repr__` method specifically for these classes.",
            "instructions": "Implement the `__repr__` method for `RepeatedKFold` and `RepeatedStratifiedKFold` classes to display the correct string representation, including `n_splits`, `n_repeats`, and `random_state`."
          },
          "output": {
            "span_id": "BaseCrossValidator.__repr__",
            "end_line": 106,
            "file_path": "sklearn/model_selection/_split.py",
            "start_line": 105,
            "instructions": "Implement the `__repr__` method for `RepeatedKFold` and `RepeatedStratifiedKFold` classes to display the correct string representation, including `n_splits`, `n_repeats`, and `random_state`."
          },
          "input_tokens": 3023,
          "output_tokens": 208,
          "retry_message": null,
          "completion_cost": 0.012189
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "BaseCrossValidator.__repr__",
        "end_line": 106,
        "file_path": "sklearn/model_selection/_split.py",
        "max_tokens": 1000,
        "start_line": 105,
        "temperature": 1.6,
        "instructions": "Implement the `__repr__` method for `RepeatedKFold` and `RepeatedStratifiedKFold` classes to display the correct string representation, including `n_splits`, `n_repeats`, and `random_state`.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```json\n{\n  \"<replace>\": \"def __repr__(self):\\n        class_name = self.__class__.__name__\\n        params = {'n_splits': self.n_splits, 'n_repeats': self.n_repeats, 'random_state': self.random_state}\\n        return f'{class_name}({_pprint(params, offset=len(class_name))})'\\n\"\n}\n```"
          },
          "output": null,
          "input_tokens": 6105,
          "output_tokens": 106,
          "retry_message": "The following diff was not applied:\n --- sklearn/model_selection/_split.py\n+++ sklearn/model_selection/_split.py\n@@ -102,8 +102,9 @@\n     def get_n_splits(self, X=None, y=None, groups=None):\n         \"\"\"Returns the number of splitting iterations in the cross-validator\"\"\"\n \n-    def __repr__(self):\n-        return _build_repr(self)\n+\": \"def __repr__(self):\\n        class_name = self.__class__.__name__\\n        params = {'n_splits': self.n_splits, 'n_repeats': self.n_repeats, 'random_state': self.random_state}\\n        return f'{class_name}({_pprint(params, offset=len(class_name))})'\\n\"\n+}\n+```\n \n \n class LeaveOneOut(BaseCrossValidator):\n. \nErrors:\nThe updated code is invalid.\nMake sure that you return the unchanged code in the replace tag exactly as it is. If you want to reject the instructions, use the reject function.",
          "completion_cost": 0.019905000000000003
        },
        {
          "action": {
            "content": "<reject>\nThe provided code for `__repr__` method does not correctly handle the class names and parameters for `RepeatedKFold` and `RepeatedStratifiedKFold` classes directly, which causes the update to be invalid.\n</reject>"
          },
          "output": {
            "message": "\nThe provided code for `__repr__` method does not correctly handle the class names and parameters for `RepeatedKFold` and `RepeatedStratifiedKFold` classes directly, which causes the update to be invalid.\n"
          },
          "input_tokens": 6483,
          "output_tokens": 53,
          "retry_message": null,
          "completion_cost": 0.020244
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "\nThe provided code for `__repr__` method does not correctly handle the class names and parameters for `RepeatedKFold` and `RepeatedStratifiedKFold` classes directly, which causes the update to be invalid.\n",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "RepeatedKFold",
            "file_path": "sklearn/model_selection/_split.py",
            "scratch_pad": "The initial suggestion to modify the `__repr__` method under `BaseCrossValidator` was incorrect as it would not handle the specific parameters for `RepeatedKFold` and `RepeatedStratifiedKFold` correctly. These classes require their own `__repr__` implementations to ensure the correct display of `n_splits`, `n_repeats`, and `random_state`.",
            "instructions": "Implement the `__repr__` method for `RepeatedKFold` and `RepeatedStratifiedKFold` classes directly to display the correct string representation, including `n_splits`, `n_repeats`, and `random_state`."
          },
          "output": null,
          "input_tokens": 3371,
          "output_tokens": 209,
          "retry_message": "Span not found: RepeatedKFold. Available spans: BaseCrossValidator, _build_repr, BaseCrossValidator.__repr__, LeaveOneOut, _CVIterableWrapper, PredefinedSplit, LeavePOut, _BaseKFold, LeaveOneGroupOut, LeavePGroupsOut, BaseShuffleSplit.__repr__, _CVIterableWrapper.__init__, _BaseKFold.__init__, PredefinedSplit.__init__, LeavePOut.__init__, LeavePGroupsOut.__init__, check_cv, TimeSeriesSplit, TimeSeriesSplit.__init__",
          "completion_cost": 0.013248000000000001
        },
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": null,
            "file_path": "sklearn/model_selection/_split.py",
            "scratch_pad": "It seems that the `RepeatedKFold` and `RepeatedStratifiedKFold` classes are not present in the provided context. However, based on the issue, we know these classes should exist or need to be created. I will request to add these classes with their respective `__repr__` methods to properly handle the display of `n_splits`, `n_repeats`, and `random_state`.",
            "instructions": "Add new classes `RepeatedKFold` and `RepeatedStratifiedKFold` with their respective `__repr__` methods to display the correct string representation, including `n_splits`, `n_repeats`, and `random_state`."
          },
          "output": null,
          "input_tokens": 3700,
          "output_tokens": 213,
          "retry_message": "You must either provide an apply_change action or finish.",
          "completion_cost": 0.014295
        },
        {
          "action": {
            "action": "finish",
            "finish": "The required classes and methods for the implementation are not available in the provided context.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "Given the context and the available spans, it appears there is no direct way to implement `RepeatedKFold` and `RepeatedStratifiedKFold` as they do not exist within the provided file context. The best approach would be to conclude that the necessary classes are not present for modification in this context.",
            "instructions": "The necessary classes `RepeatedKFold` and `RepeatedStratifiedKFold` and their `__repr__` methods are not present in the provided file context, thus it is not possible to implement the required change based on the given inputs."
          },
          "output": {
            "message": "The required classes and methods for the implementation are not available in the provided context."
          },
          "input_tokens": 3932,
          "output_tokens": 189,
          "retry_message": null,
          "completion_cost": 0.014631000000000002
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The required classes and methods for the implementation are not available in the provided context.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "RepeatedKFold and RepeatedStratifiedKFold do not show correct __repr__ string\n#### Description\r\n\r\n`RepeatedKFold` and `RepeatedStratifiedKFold` do not show correct \\_\\_repr\\_\\_ string.\r\n\r\n#### Steps/Code to Reproduce\r\n\r\n```python\r\n>>> from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\r\n>>> repr(RepeatedKFold())\r\n>>> repr(RepeatedStratifiedKFold())\r\n```\r\n\r\n#### Expected Results\r\n\r\n```python\r\n>>> repr(RepeatedKFold())\r\nRepeatedKFold(n_splits=5, n_repeats=10, random_state=None)\r\n>>> repr(RepeatedStratifiedKFold())\r\nRepeatedStratifiedKFold(n_splits=5, n_repeats=10, random_state=None)\r\n```\r\n\r\n#### Actual Results\r\n\r\n```python\r\n>>> repr(RepeatedKFold())\r\n'<sklearn.model_selection._split.RepeatedKFold object at 0x0000016421AA4288>'\r\n>>> repr(RepeatedStratifiedKFold())\r\n'<sklearn.model_selection._split.RepeatedStratifiedKFold object at 0x0000016420E115C8>'\r\n```\r\n\r\n#### Versions\r\n```\r\nSystem:\r\n    python: 3.7.4 (default, Aug  9 2019, 18:34:13) [MSC v.1915 64 bit (AMD64)]\r\nexecutable: D:\\anaconda3\\envs\\xyz\\python.exe\r\n   machine: Windows-10-10.0.16299-SP0\r\n\r\nBLAS:\r\n    macros:\r\n  lib_dirs:\r\ncblas_libs: cblas\r\n\r\nPython deps:\r\n       pip: 19.2.2\r\nsetuptools: 41.0.1\r\n   sklearn: 0.21.2\r\n     numpy: 1.16.4\r\n     scipy: 1.3.1\r\n    Cython: None\r\n    pandas: 0.24.2\r\n```\n"
}