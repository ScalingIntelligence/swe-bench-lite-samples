{
  "info": {
    "duration": 234.36908721923828,
    "submission": "diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py\nindex c49a3ce6a..0c32023ce 100644\n--- a/sklearn/model_selection/_split.py\n+++ b/sklearn/model_selection/_split.py\n@@ -2165,4 +2165,8 @@ def _build_repr(self):\n             warnings.filters.pop(0)\n         params[key] = value\n \n+    if isinstance(self, (RepeatedKFold, RepeatedStratifiedKFold)):\n+        params['n_repeats'] = self.n_repeats\n+        params['random_state'] = self.random_state\n+\n     return '%s(%s)' % (class_name, _pprint(params, offset=len(class_name)))\n",
    "total_cost": 0.14358300000000002,
    "instance_id": "scikit-learn__scikit-learn-14983",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves incorrect __repr__ strings for `RepeatedKFold` and `RepeatedStratifiedKFold` classes in the `sklearn.model_selection` module. To address this, I need to locate the __repr__ methods for these classes. Given the provided file context, it seems that the `__repr__` methods for these classes might not be implemented correctly or are missing. Therefore, I will perform a search focusing on the `_split.py` file within the `sklearn/model_selection` directory, targeting the `RepeatedKFold` and `RepeatedStratifiedKFold` classes specifically.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "RepeatedKFold",
                  "RepeatedStratifiedKFold"
                ],
                "code_snippet": null,
                "file_pattern": "sklearn/model_selection/_split.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 458,
                "span_id": "RepeatedKFold",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 0,
                "tokens": 41,
                "span_id": "RepeatedKFold.__init__",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 0,
                "tokens": 437,
                "span_id": "RepeatedStratifiedKFold",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 0,
                "tokens": 43,
                "span_id": "RepeatedStratifiedKFold.__init__",
                "file_path": "sklearn/model_selection/_split.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "RepeatedKFold",
                  "RepeatedStratifiedKFold"
                ],
                "code_snippet": null,
                "file_pattern": "sklearn/model_selection/_split.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 3497,
          "output_tokens": 201,
          "retry_message": null,
          "completion_cost": 0.013506
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 458,
            "span_id": "RepeatedKFold",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 0,
            "tokens": 41,
            "span_id": "RepeatedKFold.__init__",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 0,
            "tokens": 437,
            "span_id": "RepeatedStratifiedKFold",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 0,
            "tokens": 43,
            "span_id": "RepeatedStratifiedKFold.__init__",
            "file_path": "sklearn/model_selection/_split.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "Analyzing the reported issue, it's clear that the problem lies in the `__repr__` method of the `RepeatedKFold` and `RepeatedStratifiedKFold` classes, which are expected to provide a meaningful string representation of their instances but currently do not. The search results show the definitions of these classes and their `__init__` methods but do not include the `__repr__` method. This indicates that while I have found the classes of interest, the specific issue related to the `__repr__` method remains unresolved. Further search or checking within the codebase for the missing `__repr__` method is necessary to resolve the issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "RepeatedKFold",
                  "RepeatedKFold.__init__",
                  "RepeatedStratifiedKFold",
                  "RepeatedStratifiedKFold.__init__"
                ],
                "file_path": "sklearn/model_selection/_split.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 1814,
          "output_tokens": 241,
          "retry_message": null,
          "completion_cost": 0.009056999999999999
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The issue involves incorrect __repr__ strings for `RepeatedKFold` and `RepeatedStratifiedKFold` classes in the `sklearn.model_selection` module. The file context provided contains the classes `RepeatedKFold` and `RepeatedStratifiedKFold` but does not show any implementation of the `__repr__` method for them. Therefore, it is likely that the `__repr__` methods for these classes need to be implemented or corrected. Based on the context provided, I can't confirm if the relevant code for that fix is included.",
            "search_suggestions": "Look for implementations of the `__repr__` method in the `_split.py` file within the `sklearn/model_selection` directory, focusing on the `RepeatedKFold` and `RepeatedStratifiedKFold` classes specifically."
          },
          "output": {
            "message": "Look for implementations of the `__repr__` method in the `_split.py` file within the `sklearn/model_selection` directory, focusing on the `RepeatedKFold` and `RepeatedStratifiedKFold` classes specifically."
          },
          "input_tokens": 1704,
          "output_tokens": 209,
          "retry_message": null,
          "completion_cost": 0.008247
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look for implementations of the `__repr__` method in the `_split.py` file within the `sklearn/model_selection` directory, focusing on the `RepeatedKFold` and `RepeatedStratifiedKFold` classes specifically.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The provided context within the `_split.py` file shows that the `RepeatedKFold` and `RepeatedStratifiedKFold` classes have `__init__` methods but do not explicitly show implementations of the `__repr__` method. It's possible that these classes inherit the `__repr__` method from their parent classes or that they do not have a custom `__repr__` method at all. To confirm the absence or presence of a specific `__repr__` method within these classes, further investigation in the context of their parent classes or within the same `_split.py` file is needed.",
            "search_requests": [
              {
                "query": "implementation of __repr__ method in RepeatedKFold and RepeatedStratifiedKFold",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sklearn/model_selection/_split.py",
                "function_names": [
                  "__repr__"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 6,
                "tokens": 11,
                "span_id": "BaseShuffleSplit.__repr__",
                "file_path": "sklearn/model_selection/_split.py"
              },
              {
                "rank": 22,
                "tokens": 11,
                "span_id": "BaseCrossValidator.__repr__",
                "file_path": "sklearn/model_selection/_split.py"
              }
            ],
            "search_requests": [
              {
                "query": "implementation of __repr__ method in RepeatedKFold and RepeatedStratifiedKFold",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sklearn/model_selection/_split.py",
                "function_names": [
                  "__repr__"
                ]
              }
            ]
          },
          "input_tokens": 4049,
          "output_tokens": 248,
          "retry_message": null,
          "completion_cost": 0.015867
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 6,
            "tokens": 11,
            "span_id": "BaseShuffleSplit.__repr__",
            "file_path": "sklearn/model_selection/_split.py"
          },
          {
            "rank": 22,
            "tokens": 11,
            "span_id": "BaseCrossValidator.__repr__",
            "file_path": "sklearn/model_selection/_split.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about the incorrect __repr__ strings for RepeatedKFold and RepeatedStratifiedKFold. The current implementation of RepeatedKFold and RepeatedStratifiedKFold classes does not override the __repr__ method, so it defaults to the base class's __repr__ method, which leads to an uninformative string representation. The search results show that the BaseCrossValidator and BaseShuffleSplit classes have a __repr__ method implemented using _build_repr, which generates a string representation based on the class's initialization parameters. This method is likely to be what is needed for RepeatedKFold and RepeatedStratifiedKFold as well. Therefore, the relevant code spans to address the issue are the implementations of __repr__ in BaseCrossValidator and BaseShuffleSplit, and the _build_repr function. These code spans provide a template for how to implement the __repr__ method in RepeatedKFold and RepeatedStratifiedKFold to produce the expected results.",
            "identified_spans": [
              {
                "span_ids": [
                  "BaseCrossValidator.__repr__",
                  "BaseShuffleSplit.__repr__",
                  "_build_repr"
                ],
                "file_path": "sklearn/model_selection/_split.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 2336,
          "output_tokens": 303,
          "retry_message": null,
          "completion_cost": 0.011553
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The provided context within the `_split.py` file shows that the `RepeatedKFold` and `RepeatedStratifiedKFold` classes have `__init__` methods but do not explicitly show implementations of the `__repr__` method. It's possible that these classes inherit the `__repr__` method from their parent classes or that they do not have a custom `__repr__` method at all. To confirm the absence or presence of a specific `__repr__` method within these classes, further investigation in the context of their parent classes or within the same `_split.py` file is needed.",
            "search_suggestions": "Look into the inheritance hierarchy of `RepeatedKFold` and `RepeatedStratifiedKFold` to determine if they inherit a `__repr__` method from their parent classes, or check if any customization for `__repr__` is present in the subclasses or parent classes within the same `_split.py` file."
          },
          "output": {
            "message": "Look into the inheritance hierarchy of `RepeatedKFold` and `RepeatedStratifiedKFold` to determine if they inherit a `__repr__` method from their parent classes, or check if any customization for `__repr__` is present in the subclasses or parent classes within the same `_split.py` file."
          },
          "input_tokens": 2712,
          "output_tokens": 236,
          "retry_message": null,
          "completion_cost": 0.011676
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look into the inheritance hierarchy of `RepeatedKFold` and `RepeatedStratifiedKFold` to determine if they inherit a `__repr__` method from their parent classes, or check if any customization for `__repr__` is present in the subclasses or parent classes within the same `_split.py` file.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "scratch_pad": "In the provided `_split.py` file context, the `RepeatedKFold` and `RepeatedStratifiedKFold` classes do not override the `__repr__` method directly. They inherit from the `_RepeatedSplits` class, which itself does not define a `__repr__` method. However, the `BaseCrossValidator` class, which is a parent class for `_BaseKFold`, defines a `__repr__` method that employs the `_build_repr` function. Consequently, `RepeatedKFold` and `RepeatedStratifiedKFold` indirectly inherit this representation through their ancestor classes, suggesting that the `__repr__` method of `BaseCrossValidator` is what is currently used for these classes. Given this inheritance chain, the `__repr__` method found in `BaseCrossValidator` controls the representation for `RepeatedKFold` and `RepeatedStratifiedKFold`. Therefore, to fix the issue of incorrect `__repr__` strings, we need to examine or modify the `_build_repr` function in order to ensure it properly represents the attributes of `RepeatedKFold` and `RepeatedStratifiedKFold`, including `n_splits`, `n_repeats`, and `random_state`.",
            "search_requests": []
          },
          "output": {
            "message": "In the provided `_split.py` file context, the `RepeatedKFold` and `RepeatedStratifiedKFold` classes do not override the `__repr__` method directly. They inherit from the `_RepeatedSplits` class, which itself does not define a `__repr__` method. However, the `BaseCrossValidator` class, which is a parent class for `_BaseKFold`, defines a `__repr__` method that employs the `_build_repr` function. Consequently, `RepeatedKFold` and `RepeatedStratifiedKFold` indirectly inherit this representation through their ancestor classes, suggesting that the `__repr__` method of `BaseCrossValidator` is what is currently used for these classes. Given this inheritance chain, the `__repr__` method found in `BaseCrossValidator` controls the representation for `RepeatedKFold` and `RepeatedStratifiedKFold`. Therefore, to fix the issue of incorrect `__repr__` strings, we need to examine or modify the `_build_repr` function in order to ensure it properly represents the attributes of `RepeatedKFold` and `RepeatedStratifiedKFold`, including `n_splits`, `n_repeats`, and `random_state`."
          },
          "input_tokens": 5378,
          "output_tokens": 296,
          "retry_message": null,
          "completion_cost": 0.020574
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "In the provided `_split.py` file context, the `RepeatedKFold` and `RepeatedStratifiedKFold` classes do not override the `__repr__` method directly. They inherit from the `_RepeatedSplits` class, which itself does not define a `__repr__` method. However, the `BaseCrossValidator` class, which is a parent class for `_BaseKFold`, defines a `__repr__` method that employs the `_build_repr` function. Consequently, `RepeatedKFold` and `RepeatedStratifiedKFold` indirectly inherit this representation through their ancestor classes, suggesting that the `__repr__` method of `BaseCrossValidator` is what is currently used for these classes. Given this inheritance chain, the `__repr__` method found in `BaseCrossValidator` controls the representation for `RepeatedKFold` and `RepeatedStratifiedKFold`. Therefore, to fix the issue of incorrect `__repr__` strings, we need to examine or modify the `_build_repr` function in order to ensure it properly represents the attributes of `RepeatedKFold` and `RepeatedStratifiedKFold`, including `n_splits`, `n_repeats`, and `random_state`.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "_build_repr",
            "file_path": "sklearn/model_selection/_split.py",
            "scratch_pad": "The issue involves the `__repr__` method for `RepeatedKFold` and `RepeatedStratifiedKFold`. These classes do not currently show the correct representation string, missing parameters like `n_repeats`. To resolve this, we need to modify the `_build_repr` function to correctly handle the attributes of these classes, including `n_repeats` and `random_state`.",
            "instructions": "Update the `_build_repr` function to ensure it includes `n_repeats` and `random_state` for instances of `RepeatedKFold` and `RepeatedStratifiedKFold`."
          },
          "output": {
            "span_id": "_build_repr",
            "end_line": 2168,
            "file_path": "sklearn/model_selection/_split.py",
            "start_line": 2138,
            "instructions": "Update the `_build_repr` function to ensure it includes `n_repeats` and `random_state` for instances of `RepeatedKFold` and `RepeatedStratifiedKFold`."
          },
          "input_tokens": 3585,
          "output_tokens": 204,
          "retry_message": null,
          "completion_cost": 0.013815000000000001
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "_build_repr",
        "end_line": 2168,
        "file_path": "sklearn/model_selection/_split.py",
        "max_tokens": 1000,
        "start_line": 2138,
        "temperature": 1.6,
        "instructions": "Update the `_build_repr` function to ensure it includes `n_repeats` and `random_state` for instances of `RepeatedKFold` and `RepeatedStratifiedKFold`.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\ndef _build_repr(self):\n    # XXX This is copied from BaseEstimator's get_params\n    cls = self.__class__\n    init = getattr(cls.__init__, 'deprecated_original', cls.__init__)\n    # Ignore varargs, kw and default values and pop self\n    init_signature = signature(init)\n    # Consider the constructor parameters excluding 'self'\n    if init is object.__init__:\n        args = []\n    else:\n        args = sorted([p.name for p in init_signature.parameters.values()\n                       if p.name != 'self' and p.kind != p.VAR_KEYWORD])\n    class_name = self.__class__.__name__\n    params = dict()\n    for key in args:\n        # We need deprecation warnings to always be on in order to\n        # catch deprecated param values.\n        # This is set in utils/__init__.py but it gets overwritten\n        # when running under python3 somehow.\n        warnings.simplefilter(\"always\", DeprecationWarning)\n        try:\n            with warnings.catch_warnings(record=True) as w:\n                value = getattr(self, key, None)\n            if len(w) and w[0].category == DeprecationWarning:\n                # if the parameter is deprecated, don't show it\n                continue\n        finally:\n            warnings.filters.pop(0)\n        params[key] = value\n\n    if isinstance(self, (RepeatedKFold, RepeatedStratifiedKFold)):\n        params['n_repeats'] = self.n_repeats\n        params['random_state'] = self.random_state\n\n    return '%s(%s)' % (class_name, _pprint(params, offset=len(class_name)))\n</replace>"
          },
          "output": {
            "diff": "--- sklearn/model_selection/_split.py\n+++ sklearn/model_selection/_split.py\n@@ -2165,4 +2165,8 @@\n             warnings.filters.pop(0)\n         params[key] = value\n \n+    if isinstance(self, (RepeatedKFold, RepeatedStratifiedKFold)):\n+        params['n_repeats'] = self.n_repeats\n+        params['random_state'] = self.random_state\n+\n     return '%s(%s)' % (class_name, _pprint(params, offset=len(class_name)))",
            "message": "Applied the change to sklearn/model_selection/_split.py.",
            "verification_errors": []
          },
          "input_tokens": 6130,
          "output_tokens": 416,
          "retry_message": null,
          "completion_cost": 0.02463
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sklearn/model_selection/_split.py\n+++ sklearn/model_selection/_split.py\n@@ -2165,4 +2165,8 @@\n             warnings.filters.pop(0)\n         params[key] = value\n \n+    if isinstance(self, (RepeatedKFold, RepeatedStratifiedKFold)):\n+        params['n_repeats'] = self.n_repeats\n+        params['random_state'] = self.random_state\n+\n     return '%s(%s)' % (class_name, _pprint(params, offset=len(class_name)))",
        "model": "deepseek-coder",
        "message": "Applied the change to sklearn/model_selection/_split.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The changes have been implemented as required. The `_build_repr` function now correctly handles the `n_repeats` and `random_state` attributes for `RepeatedKFold` and `RepeatedStratifiedKFold`.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The change applied to the `_build_repr` function successfully includes `n_repeats` and `random_state` for instances of `RepeatedKFold` and `RepeatedStratifiedKFold`. This should resolve the issue of incorrect `__repr__` strings for these classes.",
            "instructions": null
          },
          "output": {
            "message": "The changes have been implemented as required. The `_build_repr` function now correctly handles the `n_repeats` and `random_state` attributes for `RepeatedKFold` and `RepeatedStratifiedKFold`."
          },
          "input_tokens": 4021,
          "output_tokens": 173,
          "retry_message": null,
          "completion_cost": 0.014658000000000001
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The changes have been implemented as required. The `_build_repr` function now correctly handles the `n_repeats` and `random_state` attributes for `RepeatedKFold` and `RepeatedStratifiedKFold`.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "RepeatedKFold and RepeatedStratifiedKFold do not show correct __repr__ string\n#### Description\r\n\r\n`RepeatedKFold` and `RepeatedStratifiedKFold` do not show correct \\_\\_repr\\_\\_ string.\r\n\r\n#### Steps/Code to Reproduce\r\n\r\n```python\r\n>>> from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold\r\n>>> repr(RepeatedKFold())\r\n>>> repr(RepeatedStratifiedKFold())\r\n```\r\n\r\n#### Expected Results\r\n\r\n```python\r\n>>> repr(RepeatedKFold())\r\nRepeatedKFold(n_splits=5, n_repeats=10, random_state=None)\r\n>>> repr(RepeatedStratifiedKFold())\r\nRepeatedStratifiedKFold(n_splits=5, n_repeats=10, random_state=None)\r\n```\r\n\r\n#### Actual Results\r\n\r\n```python\r\n>>> repr(RepeatedKFold())\r\n'<sklearn.model_selection._split.RepeatedKFold object at 0x0000016421AA4288>'\r\n>>> repr(RepeatedStratifiedKFold())\r\n'<sklearn.model_selection._split.RepeatedStratifiedKFold object at 0x0000016420E115C8>'\r\n```\r\n\r\n#### Versions\r\n```\r\nSystem:\r\n    python: 3.7.4 (default, Aug  9 2019, 18:34:13) [MSC v.1915 64 bit (AMD64)]\r\nexecutable: D:\\anaconda3\\envs\\xyz\\python.exe\r\n   machine: Windows-10-10.0.16299-SP0\r\n\r\nBLAS:\r\n    macros:\r\n  lib_dirs:\r\ncblas_libs: cblas\r\n\r\nPython deps:\r\n       pip: 19.2.2\r\nsetuptools: 41.0.1\r\n   sklearn: 0.21.2\r\n     numpy: 1.16.4\r\n     scipy: 1.3.1\r\n    Cython: None\r\n    pandas: 0.24.2\r\n```\n"
}