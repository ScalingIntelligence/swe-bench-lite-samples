{
  "info": {
    "error": "Traceback (most recent call last):\n  File \"/workspace/moatless/moatless-tools/driver/run_moatless.py\", line 89, in run_moatless_core\n    response = loop.run(problem_statement)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/workspace/moatless/moatless-tools/moatless/loop.py\", line 179, in run\n    self._run()\n  File \"/workspace/moatless/moatless-tools/moatless/loop.py\", line 378, in _run\n    action, cost, input_tokens, output_tokens = self._next_action()\n                                                ^^^^^^^^^^^^^^^^^^^\n  File \"/workspace/moatless/moatless-tools/moatless/loop.py\", line 601, in _next_action\n    raise e\n  File \"/workspace/moatless/moatless-tools/moatless/loop.py\", line 587, in _next_action\n    client.chat.completions.create_with_completion(\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/client.py\", line 223, in create_with_completion\n    model = self.create_fn(\n            ^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/patch.py\", line 143, in new_create_sync\n    response = retry_sync(\n               ^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/retry.py\", line 151, in retry_sync\n    for attempt in max_retries:\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/tenacity/__init__.py\", line 443, in __iter__\n    do = self.iter(retry_state=retry_state)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/tenacity/__init__.py\", line 376, in iter\n    result = action(retry_state)\n             ^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/tenacity/__init__.py\", line 418, in exc_check\n    raise retry_exc.reraise()\n          ^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/tenacity/__init__.py\", line 185, in reraise\n    raise self.last_attempt.result()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/concurrent/futures/_base.py\", line 449, in result\n    return self.__get_result()\n           ^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/concurrent/futures/_base.py\", line 401, in __get_result\n    raise self._exception\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/retry.py\", line 175, in retry_sync\n    raise e\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/retry.py\", line 157, in retry_sync\n    return process_response(\n           ^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/process_response.py\", line 144, in process_response\n    model = response_model.from_response(\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/function_calls.py\", line 125, in from_response\n    return cls.parse_json(completion, validation_context, strict)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/function_calls.py\", line 273, in parse_json\n    return cls.model_validate_json(\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/pydantic/main.py\", line 580, in model_validate_json\n    return cls.__pydantic_validator__.validate_json(json_data, strict=strict, context=context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\npydantic_core._pydantic_core.ValidationError: 2 validation errors for LineNumberClarification\nstart_line\n  Input should be a valid integer [type=int_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.7/v/int_type\nend_line\n  Input should be a valid integer [type=int_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.7/v/int_type\n",
    "duration": 166.27954411506653,
    "submission": "",
    "total_cost": 0.15165599999999999,
    "instance_id": "django__django-16408",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves a `FilteredRelation` with `select_related()` causing incorrect related object setting. This could be due to how relations are handled in the SQL compilation, query construction, or during object population. The test case fails because the tournament objects do not match. Investigating the `get_related_selections` method in `SQLCompiler`, `get_prefetch_queryset` in `ForwardManyToOneDescriptor`, and `add_filtered_relation` in `Query` might provide insights into how relations are being processed and why they might be misaligned.",
            "search_requests": [
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "django/db/models/sql/compiler.py",
                "function_names": [
                  "get_related_selections"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "django/db/models/fields/related_descriptors.py",
                "function_names": [
                  "get_prefetch_queryset",
                  "get_object"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "django/db/models/sql/query.py",
                "function_names": [
                  "add_filtered_relation"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 1500,
                "span_id": "SQLCompiler.get_related_selections",
                "file_path": "django/db/models/sql/compiler.py"
              },
              {
                "rank": 0,
                "tokens": 338,
                "span_id": "ForwardManyToOneDescriptor.get_prefetch_queryset",
                "file_path": "django/db/models/fields/related_descriptors.py"
              },
              {
                "rank": 0,
                "tokens": 175,
                "span_id": "ReverseOneToOneDescriptor.get_prefetch_queryset",
                "file_path": "django/db/models/fields/related_descriptors.py"
              },
              {
                "rank": 0,
                "tokens": 2029,
                "span_id": "create_reverse_many_to_one_manager",
                "file_path": "django/db/models/fields/related_descriptors.py"
              },
              {
                "rank": 0,
                "tokens": 3726,
                "span_id": "create_forward_many_to_many_manager",
                "file_path": "django/db/models/fields/related_descriptors.py"
              },
              {
                "rank": 0,
                "tokens": 41,
                "span_id": "ForwardManyToOneDescriptor.get_object",
                "file_path": "django/db/models/fields/related_descriptors.py"
              },
              {
                "rank": 0,
                "tokens": 175,
                "span_id": "ForwardOneToOneDescriptor.get_object",
                "file_path": "django/db/models/fields/related_descriptors.py"
              },
              {
                "rank": 0,
                "tokens": 262,
                "span_id": "Query.add_filtered_relation",
                "file_path": "django/db/models/sql/query.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "django/db/models/sql/compiler.py",
                "function_names": [
                  "get_related_selections"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "django/db/models/fields/related_descriptors.py",
                "function_names": [
                  "get_prefetch_queryset",
                  "get_object"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "django/db/models/sql/query.py",
                "function_names": [
                  "add_filtered_relation"
                ]
              }
            ]
          },
          "input_tokens": 2358,
          "output_tokens": 279,
          "retry_message": null,
          "completion_cost": 0.011259000000000002
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 1500,
            "span_id": "SQLCompiler.get_related_selections",
            "file_path": "django/db/models/sql/compiler.py"
          },
          {
            "rank": 0,
            "tokens": 338,
            "span_id": "ForwardManyToOneDescriptor.get_prefetch_queryset",
            "file_path": "django/db/models/fields/related_descriptors.py"
          },
          {
            "rank": 0,
            "tokens": 175,
            "span_id": "ReverseOneToOneDescriptor.get_prefetch_queryset",
            "file_path": "django/db/models/fields/related_descriptors.py"
          },
          {
            "rank": 0,
            "tokens": 2029,
            "span_id": "create_reverse_many_to_one_manager",
            "file_path": "django/db/models/fields/related_descriptors.py"
          },
          {
            "rank": 0,
            "tokens": 3726,
            "span_id": "create_forward_many_to_many_manager",
            "file_path": "django/db/models/fields/related_descriptors.py"
          },
          {
            "rank": 0,
            "tokens": 41,
            "span_id": "ForwardManyToOneDescriptor.get_object",
            "file_path": "django/db/models/fields/related_descriptors.py"
          },
          {
            "rank": 0,
            "tokens": 175,
            "span_id": "ForwardOneToOneDescriptor.get_object",
            "file_path": "django/db/models/fields/related_descriptors.py"
          },
          {
            "rank": 0,
            "tokens": 262,
            "span_id": "Query.add_filtered_relation",
            "file_path": "django/db/models/sql/query.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves a Multi-level FilteredRelation with select_related() setting the wrong related object. The test case provided in the issue is examining the interaction between PoolStyle, Tournament, and Pool objects. The search results include several Django ORM related files and spans. The 'django/db/models/sql/compiler.py' file contains the SQLCompiler class which is responsible for compiling SQL queries, including methods that handle related selections. The 'django/db/models/fields/related_descriptors.py' file contains descriptors for related fields, including ForwardManyToOneDescriptor and ForwardOneToOneDescriptor classes that manage the related objects. Lastly, the 'django/db/models/sql/query.py' file contains the Query class which includes a method for adding filtered relations. These files and their relevant methods are likely places to look for the cause of the issue as they directly handle the SQL compilation and management of related objects.",
            "identified_spans": [
              {
                "span_ids": [
                  "SQLCompiler.get_related_selections"
                ],
                "file_path": "django/db/models/sql/compiler.py"
              },
              {
                "span_ids": [
                  "ForwardManyToOneDescriptor.get_prefetch_queryset",
                  "ForwardManyToOneDescriptor.get_object",
                  "ForwardOneToOneDescriptor.get_object"
                ],
                "file_path": "django/db/models/fields/related_descriptors.py"
              },
              {
                "span_ids": [
                  "Query.add_filtered_relation"
                ],
                "file_path": "django/db/models/sql/query.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4844,
          "output_tokens": 402,
          "retry_message": null,
          "completion_cost": 0.020562
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context includes key components such as the `get_related_selections` method in `SQLCompiler`, which is crucial for handling related selections and joins. It also includes methods from `ForwardManyToOneDescriptor` that handle prefetching related querysets. Additionally, the `Query` class includes methods for managing filtered relations which are likely relevant to the issue at hand. These components suggest that the file context is likely complete for addressing the reported issue concerning `FilteredRelation` with `select_related()`. However, the specific method causing the incorrect related object setting might need further inspection within these broader contexts.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 5420,
          "output_tokens": 164,
          "retry_message": null,
          "completion_cost": 0.01872
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "SQLCompiler.get_related_selections",
            "file_path": "django/db/models/sql/compiler.py",
            "scratch_pad": "The issue reported involves a multi-level `FilteredRelation` with `select_related()` incorrectly setting the related object. The current code in `SQLCompiler.get_related_selections` does not handle the case where `FilteredRelation` is nested within multi-level relations correctly, causing the wrong related object to be set. We should update the logic in `get_related_selections` to ensure that the correct related object is set for nested `FilteredRelation` cases.",
            "instructions": "Update the `get_related_selections` method in `SQLCompiler` to correctly handle nested `FilteredRelation` within multi-level relations. Specifically, ensure that the correct related object is set by adjusting the way `klass_info` is appended to `related_klass_infos`."
          },
          "output": {
            "span_id": "SQLCompiler.get_related_selections",
            "file_path": "django/db/models/sql/compiler.py",
            "instructions": "Update the `get_related_selections` method in `SQLCompiler` to correctly handle nested `FilteredRelation` within multi-level relations. Specifically, ensure that the correct related object is set by adjusting the way `klass_info` is appended to `related_klass_infos`."
          },
          "input_tokens": 5899,
          "output_tokens": 239,
          "retry_message": null,
          "completion_cost": 0.021282000000000002
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "SQLCompiler.get_related_selections",
        "end_line": null,
        "file_path": "django/db/models/sql/compiler.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Update the `get_related_selections` method in `SQLCompiler` to correctly handle nested `FilteredRelation` within multi-level relations. Specifically, ensure that the correct related object is set by adjusting the way `klass_info` is appended to `related_klass_infos`.\n\nThe instruction requires adjusting the way `klass_info` is appended to `related_klass_infos` to correctly handle nested `FilteredRelation` within multi-level relations. This involves modifying the logic around line 1213 where `klass_info` is appended to `related_klass_infos` and when `get_related_klass_infos` is called to manage nested relations.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": false,
            "end_line": 1194,
            "start_line": 1193,
            "scratch_pad": "The instruction requires adjusting the way `klass_info` is appended to `related_klass_infos` to correctly handle nested `FilteredRelation` within multi-level relations. This involves modifying the logic around line 1213 where `klass_info` is appended to `related_klass_infos` and when `get_related_klass_infos` is called to manage nested relations."
          },
          "output": {
            "span_id": "SQLCompiler.get_related_selections",
            "end_line": 1198,
            "file_path": "django/db/models/sql/compiler.py",
            "start_line": 1189,
            "instructions": "Update the `get_related_selections` method in `SQLCompiler` to correctly handle nested `FilteredRelation` within multi-level relations. Specifically, ensure that the correct related object is set by adjusting the way `klass_info` is appended to `related_klass_infos`.\n\nThe instruction requires adjusting the way `klass_info` is appended to `related_klass_infos` to correctly handle nested `FilteredRelation` within multi-level relations. This involves modifying the logic around line 1213 where `klass_info` is appended to `related_klass_infos` and when `get_related_klass_infos` is called to manage nested relations."
          },
          "input_tokens": 3624,
          "output_tokens": 129,
          "retry_message": null,
          "completion_cost": 0.012806999999999999
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "SQLCompiler.get_related_selections",
        "end_line": 1198,
        "file_path": "django/db/models/sql/compiler.py",
        "max_tokens": 1000,
        "start_line": 1189,
        "temperature": 1.6,
        "instructions": "Update the `get_related_selections` method in `SQLCompiler` to correctly handle nested `FilteredRelation` within multi-level relations. Specifically, ensure that the correct related object is set by adjusting the way `klass_info` is appended to `related_klass_infos`.\n\nThe instruction requires adjusting the way `klass_info` is appended to `related_klass_infos` to correctly handle nested `FilteredRelation` within multi-level relations. This involves modifying the logic around line 1213 where `klass_info` is appended to `related_klass_infos` and when `get_related_klass_infos` is called to manage nested relations.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```yaml\n<replace>\n                if f.unique\n                else lambda x, y: None,\n                \"from_parent\": False,\n            }\n            related_klass_infos.append(klass_info)\n            select_fields = []\n            _, _, _, joins, _, _ = self.query.setup_joins([f.name], opts, root_alias)\n            alias = joins[-1]\n            columns = self.get_default_columns(\n                related_select_mask, start_alias=alias, opts=f.remote_field.model._meta\n</replace>"
          },
          "output": null,
          "input_tokens": 6595,
          "output_tokens": 133,
          "retry_message": "The code in the replace tag is the same as in the search. Use the reject function if you can't do any changes and want to reject the instructions.",
          "completion_cost": 0.02178
        },
        {
          "action": {
            "content": "<reject>\nThe provided code does not contain any changes that would affect the handling of nested `FilteredRelation` within multi-level relations as specified in the instructions. The changes requested would need to be made in the logic surrounding the appending of `klass_info` to `related_klass_infos` and the management of nested relations when `get_related_klass_infos` is called. Specifically, adjustments in the management of `klass_info` and `related_klass_infos` to ensure correct related object setting are required, but no such modifications were found in the code provided.\n</reject>"
          },
          "output": {
            "message": "\nThe provided code does not contain any changes that would affect the handling of nested `FilteredRelation` within multi-level relations as specified in the instructions. The changes requested would need to be made in the logic surrounding the appending of `klass_info` to `related_klass_infos` and the management of nested relations when `get_related_klass_infos` is called. Specifically, adjustments in the management of `klass_info` and `related_klass_infos` to ensure correct related object setting are required, but no such modifications were found in the code provided.\n"
          },
          "input_tokens": 6768,
          "output_tokens": 126,
          "retry_message": null,
          "completion_cost": 0.022194
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "\nThe provided code does not contain any changes that would affect the handling of nested `FilteredRelation` within multi-level relations as specified in the instructions. The changes requested would need to be made in the logic surrounding the appending of `klass_info` to `related_klass_infos` and the management of nested relations when `get_related_klass_infos` is called. Specifically, adjustments in the management of `klass_info` and `related_klass_infos` to ensure correct related object setting are required, but no such modifications were found in the code provided.\n",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "SQLCompiler.get_related_selections",
            "file_path": "django/db/models/sql/compiler.py",
            "scratch_pad": "The requested changes involve ensuring that the `get_related_selections` method in `SQLCompiler` correctly handles nested `FilteredRelation` within multi-level relations. The current implementation does not sufficiently address the management of `klass_info` and `related_klass_infos` to ensure the correct related object is set for nested cases. We need to adjust the logic for appending `klass_info` to `related_klass_infos` and ensure that nested relations are managed correctly when `get_related_klass_infos` is called.",
            "instructions": "Modify the `get_related_selections` method in `SQLCompiler` to correctly handle nested `FilteredRelation` within multi-level relations. Specifically, enhance the logic for appending `klass_info` to `related_klass_infos` and ensure that nested relations are managed correctly. This includes adjustments in the loop that processes fields and related fields, ensuring that `klass_info` is correctly set up for nested relations and appended accordingly."
          },
          "output": {
            "span_id": "SQLCompiler.get_related_selections",
            "file_path": "django/db/models/sql/compiler.py",
            "instructions": "Modify the `get_related_selections` method in `SQLCompiler` to correctly handle nested `FilteredRelation` within multi-level relations. Specifically, enhance the logic for appending `klass_info` to `related_klass_infos` and ensure that nested relations are managed correctly. This includes adjustments in the loop that processes fields and related fields, ensuring that `klass_info` is correctly set up for nested relations and appended accordingly."
          },
          "input_tokens": 6264,
          "output_tokens": 284,
          "retry_message": null,
          "completion_cost": 0.023052
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "SQLCompiler.get_related_selections",
        "end_line": null,
        "file_path": "django/db/models/sql/compiler.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Modify the `get_related_selections` method in `SQLCompiler` to correctly handle nested `FilteredRelation` within multi-level relations. Specifically, enhance the logic for appending `klass_info` to `related_klass_infos` and ensure that nested relations are managed correctly. This includes adjustments in the loop that processes fields and related fields, ensuring that `klass_info` is correctly set up for nested relations and appended accordingly.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 1326,
            "start_line": 1170,
            "scratch_pad": "The instruction requires enhancing the logic for appending 'klass_info' to 'related_klass_infos' and ensuring that nested relations are managed correctly. This involves adjustments in the loop that processes fields and related fields. The identified section of code handles the processing of fields and related fields where 'klass_info' is set up and appended. This section needs modification to correctly manage nested relations."
          },
          "output": null,
          "input_tokens": 3656,
          "output_tokens": 120,
          "retry_message": "Lines 1170 - 1326 has 1128 tokens, which is higher than the maximum allowed 500 tokens in completion. You need to specify the exact part of the code that needs to be updated to fulfill the change. If this is not possible you should reject the request.",
          "completion_cost": 0.012768
        }
      ]
    }
  ],
  "initial_message": "Multi-level FilteredRelation with select_related() may set wrong related object.\nDescription\n\t\ntest case:\n# add to known_related_objects.tests.ExistingRelatedInstancesTests\n\tdef test_wrong_select_related(self):\n\t\twith self.assertNumQueries(3):\n\t\t\tp = list(PoolStyle.objects.annotate(\n\t\t\t\ttournament_pool=FilteredRelation('pool__tournament__pool'),\n\t\t\t\t).select_related('tournament_pool'))\n\t\t\tself.assertEqual(p[0].pool.tournament, p[0].tournament_pool.tournament)\nresult:\n======================================================================\nFAIL: test_wrong_select_related (known_related_objects.tests.ExistingRelatedInstancesTests.test_wrong_select_related)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n File \"D:\\Work\\django\\tests\\known_related_objects\\tests.py\", line 171, in test_wrong_select_related\n\tself.assertEqual(p[0].pool.tournament, p[0].tournament_pool.tournament)\nAssertionError: <Tournament: Tournament object (1)> != <PoolStyle: PoolStyle object (1)>\n----------------------------------------------------------------------\n"
}