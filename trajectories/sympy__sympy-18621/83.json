{
  "info": {
    "duration": 174.7472641468048,
    "submission": "diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py\nindex 11aebbc59f..2a058b0085 100644\n--- a/sympy/matrices/expressions/blockmatrix.py\n+++ b/sympy/matrices/expressions/blockmatrix.py\n@@ -288,6 +288,8 @@ class BlockDiagMatrix(BlockMatrix):\n     sympy.matrices.dense.diag\n     \"\"\"\n     def __new__(cls, *mats):\n+        if len(mats) == 1:\n+            return mats[0]\n         return Basic.__new__(BlockDiagMatrix, *mats)\n \n     @property\n",
    "total_cost": 0.18059400000000003,
    "instance_id": "sympy__sympy-18621",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves converting a BlockDiagMatrix with one Matrix element to a regular Matrix, which raises a TypeError. Focusing on the BlockDiagMatrix class and related matrix conversion functions and properties is crucial. The relevant files and functions to search for include BlockDiagMatrix, as_explicit, and _entry. Additionally, the error traceback points to specific methods that should be investigated such as __new__, _handle_creation_inputs, and as_explicit.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "BlockDiagMatrix"
                ],
                "code_snippet": null,
                "file_pattern": "sympy/matrices/expressions/**/*.py",
                "function_names": [
                  "as_explicit",
                  "_entry"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sympy/matrices/dense.py",
                "function_names": [
                  "__new__",
                  "_handle_creation_inputs"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 22,
                "span_id": "MutableDenseMatrix.__new__",
                "file_path": "sympy/matrices/dense.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "BlockDiagMatrix"
                ],
                "code_snippet": null,
                "file_pattern": "sympy/matrices/expressions/**/*.py",
                "function_names": [
                  "as_explicit",
                  "_entry"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sympy/matrices/dense.py",
                "function_names": [
                  "__new__",
                  "_handle_creation_inputs"
                ]
              }
            ]
          },
          "input_tokens": 3787,
          "output_tokens": 239,
          "retry_message": null,
          "completion_cost": 0.014946
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 22,
            "span_id": "MutableDenseMatrix.__new__",
            "file_path": "sympy/matrices/dense.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about BlockDiagMatrix not converting correctly to a regular Matrix when it contains only one element. This problem seems to be related to the handling of BlockDiagMatrix or the conversion process in the sympy.matrices module. Upon examining the provided search results, the relevant classes and methods are `DenseMatrix` and `MutableDenseMatrix` in the `dense.py` file. The 'MutableDenseMatrix.__new__' span is particularly interesting as it appears to be a constructor where the matrix might be instantiated or converted. This span should be further investigated to determine if it's directly related to the reported issue. Since the context initially provided does not contain any relevant code, it is crucial to proceed by examining the identified 'MutableDenseMatrix.__new__' span in detail to decide if it is related to the issue of converting a BlockDiagMatrix with one element to a regular Matrix.",
            "identified_spans": [
              {
                "span_ids": [
                  "MutableDenseMatrix.__new__"
                ],
                "file_path": "sympy/matrices/dense.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 2217,
          "output_tokens": 254,
          "retry_message": null,
          "completion_cost": 0.010461
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": false,
            "scratch_pad": "The file context provided does not contain any of the methods or classes that are directly related to the issue, such as BlockDiagMatrix, as_explicit, or _entry. The code provided is more general and does not specifically address the issue with converting a BlockDiagMatrix with one Matrix element to a regular Matrix.",
            "search_suggestions": "Look for files and methods that include BlockDiagMatrix, as_explicit, and _entry. Specifically, the blockmatrix.py file might contain the BlockDiagMatrix class and related methods. Investigate the implementation of these methods for the necessary changes to handle the conversion correctly when only one Matrix element is used."
          },
          "output": {
            "message": "Look for files and methods that include BlockDiagMatrix, as_explicit, and _entry. Specifically, the blockmatrix.py file might contain the BlockDiagMatrix class and related methods. Investigate the implementation of these methods for the necessary changes to handle the conversion correctly when only one Matrix element is used."
          },
          "input_tokens": 2091,
          "output_tokens": 164,
          "retry_message": null,
          "completion_cost": 0.008733
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look for files and methods that include BlockDiagMatrix, as_explicit, and _entry. Specifically, the blockmatrix.py file might contain the BlockDiagMatrix class and related methods. Investigate the implementation of these methods for the necessary changes to handle the conversion correctly when only one Matrix element is used.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The task is to find files and methods related to the BlockDiagMatrix class, specifically looking for the implementation of the as_explicit and _entry methods. The blockmatrix.py file was identified as a likely location for the BlockDiagMatrix class and related methods. Additionally, the dense.py file contains relevant code for matrix handling and conversion, which may also interact with BlockDiagMatrix. The process involves thoroughly examining the blockmatrix.py file for the BlockDiagMatrix class and relevant methods, and potentially modifying them to handle the conversion correctly when BlockDiagMatrix contains only one Matrix element.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "BlockDiagMatrix"
                ],
                "code_snippet": null,
                "file_pattern": "sympy/matrices/expressions/blockmatrix.py",
                "function_names": [
                  "as_explicit",
                  "_entry"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 127,
                "span_id": "BlockDiagMatrix",
                "file_path": "sympy/matrices/expressions/blockmatrix.py"
              },
              {
                "rank": 0,
                "tokens": 89,
                "span_id": "BlockMatrix._entry",
                "file_path": "sympy/matrices/expressions/blockmatrix.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "BlockDiagMatrix"
                ],
                "code_snippet": null,
                "file_pattern": "sympy/matrices/expressions/blockmatrix.py",
                "function_names": [
                  "as_explicit",
                  "_entry"
                ]
              }
            ]
          },
          "input_tokens": 4530,
          "output_tokens": 234,
          "retry_message": null,
          "completion_cost": 0.0171
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 127,
            "span_id": "BlockDiagMatrix",
            "file_path": "sympy/matrices/expressions/blockmatrix.py"
          },
          {
            "rank": 0,
            "tokens": 89,
            "span_id": "BlockMatrix._entry",
            "file_path": "sympy/matrices/expressions/blockmatrix.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue pertains to the conversion of a BlockDiagMatrix with a single element to a regular Matrix, which raises a TypeError. The issue is specific to the BlockDiagMatrix class and its handling of single elements during conversion. Based on the provided search results, the BlockDiagMatrix class and its methods are indeed relevant to the issue. The '_entry' method of the BlockDiagMatrix class is particularly relevant as it is the method responsible for accessing elements during the conversion process. Given the context of the error (a 'One' object not being subscriptable), it suggests that the code might not handle the case of a single element Matrix correctly, leading to the TypeError. Therefore, the relevant code spans include the entire BlockDiagMatrix class definition and its methods, especially the '_entry' method.",
            "identified_spans": [
              {
                "span_ids": [
                  "BlockMatrix",
                  "BlockMatrix._entry",
                  "BlockDiagMatrix",
                  "BlockDiagMatrix.__new__",
                  "BlockDiagMatrix._eval_inverse",
                  "BlockDiagMatrix._eval_transpose",
                  "BlockDiagMatrix._blockmul",
                  "BlockDiagMatrix._blockadd"
                ],
                "file_path": "sympy/matrices/expressions/blockmatrix.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3280,
          "output_tokens": 298,
          "retry_message": null,
          "completion_cost": 0.01431
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The task is to find files and methods related to the BlockDiagMatrix class, specifically looking for the implementation of the as_explicit and _entry methods. The blockmatrix.py file was identified as a likely location for the BlockDiagMatrix class and related methods. Additionally, the dense.py file contains relevant code for matrix handling and conversion, which may also interact with BlockDiagMatrix. The process involves thoroughly examining the blockmatrix.py file for the BlockDiagMatrix class and relevant methods, and potentially modifying them to handle the conversion correctly when BlockDiagMatrix contains only one Matrix element.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 4192,
          "output_tokens": 157,
          "retry_message": null,
          "completion_cost": 0.014931
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "BlockDiagMatrix",
            "file_path": "sympy/matrices/expressions/blockmatrix.py",
            "scratch_pad": "The issue arises due to the handling of BlockDiagMatrix with a single element, which is not properly converted to a regular Matrix. We need to ensure that when converting a BlockDiagMatrix to a regular Matrix, it correctly handles the case with a single element by directly using that element as the Matrix.",
            "instructions": "Update the BlockDiagMatrix class to handle the conversion to a regular Matrix correctly when it contains only one element. Specifically, when converting to a regular Matrix, if the BlockDiagMatrix contains only one element, use that element directly."
          },
          "output": {
            "span_id": "BlockDiagMatrix",
            "file_path": "sympy/matrices/expressions/blockmatrix.py",
            "instructions": "Update the BlockDiagMatrix class to handle the conversion to a regular Matrix correctly when it contains only one element. Specifically, when converting to a regular Matrix, if the BlockDiagMatrix contains only one element, use that element directly."
          },
          "input_tokens": 5070,
          "output_tokens": 168,
          "retry_message": null,
          "completion_cost": 0.01773
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "BlockDiagMatrix",
        "end_line": null,
        "file_path": "sympy/matrices/expressions/blockmatrix.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Update the BlockDiagMatrix class to handle the conversion to a regular Matrix correctly when it contains only one element. Specifically, when converting to a regular Matrix, if the BlockDiagMatrix contains only one element, use that element directly.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": true,
            "end_line": 291,
            "start_line": 290,
            "scratch_pad": "The instruction requires modifying the conversion to a regular Matrix when the BlockDiagMatrix contains only one element. This implies changes in the constructor (__new__) or a method directly related to conversion (if such a method exists). However, based on the provided code, there isn't a direct method titled 'to_Matrix' or similar, but rather existing methods may need modification or new methods might need to be added in proximity to __new__ or related properties. Given the code structure, modifications might be needed in __new__ or around methods like eval_inverse or block operations which could influence the conversion process."
          },
          "output": {
            "message": "The instruction requires modifying the conversion to a regular Matrix when the BlockDiagMatrix contains only one element. This implies changes in the constructor (__new__) or a method directly related to conversion (if such a method exists). However, based on the provided code, there isn't a direct method titled 'to_Matrix' or similar, but rather existing methods may need modification or new methods might need to be added in proximity to __new__ or related properties. Given the code structure, modifications might be needed in __new__ or around methods like eval_inverse or block operations which could influence the conversion process."
          },
          "input_tokens": 1027,
          "output_tokens": 158,
          "retry_message": null,
          "completion_cost": 0.005451
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "The instruction requires modifying the conversion to a regular Matrix when the BlockDiagMatrix contains only one element. This implies changes in the constructor (__new__) or a method directly related to conversion (if such a method exists). However, based on the provided code, there isn't a direct method titled 'to_Matrix' or similar, but rather existing methods may need modification or new methods might need to be added in proximity to __new__ or related properties. Given the code structure, modifications might be needed in __new__ or around methods like eval_inverse or block operations which could influence the conversion process.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "BlockDiagMatrix._entry",
            "file_path": "sympy/matrices/expressions/blockmatrix.py",
            "scratch_pad": "The issue is related to the conversion of BlockDiagMatrix to a regular Matrix when it contains a single element. The BlockDiagMatrix class needs to handle this specific case by directly using the single element as the Matrix, avoiding the need for subscripting or additional block handling.",
            "instructions": "Modify the BlockDiagMatrix class to handle the conversion to a regular Matrix correctly when it contains only one element. Implement a check in the _entry method or a new method that explicitly handles the single-element case during conversion."
          },
          "output": null,
          "input_tokens": 5380,
          "output_tokens": 176,
          "retry_message": "Span not found: BlockDiagMatrix._entry. Available spans: BlockMatrix._entry, BlockMatrix, BlockDiagMatrix._blockmul, BlockDiagMatrix, BlockDiagMatrix.__new__, BlockDiagMatrix._blockadd, BlockDiagMatrix._eval_inverse, BlockDiagMatrix._eval_transpose, imports, BlockMatrix._eval_transpose, bc_dist, BlockMatrix.equals, reblock_2x2, blockinverse_1x1, BlockMatrix._blockmul, bc_matadd, deblock, blockinverse_2x2, BlockMatrix._blockadd, blockcut, bc_block_plus_ident, block_collapse, bc_inverse, bounds",
          "completion_cost": 0.01878
        },
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "BlockDiagMatrix.__new__",
            "file_path": "sympy/matrices/expressions/blockmatrix.py",
            "scratch_pad": "The span 'BlockDiagMatrix._entry' was not found. Instead, we can focus on the '__new__' method and ensure that it handles single-element cases correctly during the creation of BlockDiagMatrix instances, potentially adjusting how it processes and stores the matrix elements to facilitate smoother conversion to a regular Matrix later.",
            "instructions": "Update the '__new__' method in the BlockDiagMatrix class to handle single-element instances appropriately. Ensure that during the creation of a BlockDiagMatrix, if it is made from a single matrix element, this is processed in a way that it can be directly used as a Matrix without the need for subscripting or additional block handling."
          },
          "output": {
            "span_id": "BlockDiagMatrix.__new__",
            "end_line": 291,
            "file_path": "sympy/matrices/expressions/blockmatrix.py",
            "start_line": 290,
            "instructions": "Update the '__new__' method in the BlockDiagMatrix class to handle single-element instances appropriately. Ensure that during the creation of a BlockDiagMatrix, if it is made from a single matrix element, this is processed in a way that it can be directly used as a Matrix without the need for subscripting or additional block handling."
          },
          "input_tokens": 5705,
          "output_tokens": 210,
          "retry_message": null,
          "completion_cost": 0.020265000000000002
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "BlockDiagMatrix.__new__",
        "end_line": 291,
        "file_path": "sympy/matrices/expressions/blockmatrix.py",
        "max_tokens": 1000,
        "start_line": 290,
        "temperature": 1.6,
        "instructions": "Update the '__new__' method in the BlockDiagMatrix class to handle single-element instances appropriately. Ensure that during the creation of a BlockDiagMatrix, if it is made from a single matrix element, this is processed in a way that it can be directly used as a Matrix without the need for subscripting or additional block handling.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n    def __new__(cls, *mats):\n        if len(mats) == 1:\n            return mats[0]\n        return Basic.__new__(BlockDiagMatrix, *mats)\n</replace>"
          },
          "output": {
            "diff": "--- sympy/matrices/expressions/blockmatrix.py\n+++ sympy/matrices/expressions/blockmatrix.py\n@@ -288,6 +288,8 @@\n     sympy.matrices.dense.diag\n     \"\"\"\n     def __new__(cls, *mats):\n+        if len(mats) == 1:\n+            return mats[0]\n         return Basic.__new__(BlockDiagMatrix, *mats)\n \n     @property\n",
            "message": "Applied the change to sympy/matrices/expressions/blockmatrix.py.",
            "verification_errors": []
          },
          "input_tokens": 5494,
          "output_tokens": 53,
          "retry_message": null,
          "completion_cost": 0.017277
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sympy/matrices/expressions/blockmatrix.py\n+++ sympy/matrices/expressions/blockmatrix.py\n@@ -288,6 +288,8 @@\n     sympy.matrices.dense.diag\n     \"\"\"\n     def __new__(cls, *mats):\n+        if len(mats) == 1:\n+            return mats[0]\n         return Basic.__new__(BlockDiagMatrix, *mats)\n \n     @property\n",
        "model": "deepseek-coder",
        "message": "Applied the change to sympy/matrices/expressions/blockmatrix.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The modification directly addresses the issue where a BlockDiagMatrix with a single element could not be converted to a regular Matrix by immediately returning the single element, thereby bypassing the need for block handling. This resolution is consistent with the expected behavior specified in the issue and should remedy the reported problem.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The initial modification to '__new__' in the BlockDiagMatrix class was correctly applied, directly returning the single element instead of creating a new BlockDiagMatrix instance. This change ensures that when a BlockDiagMatrix is created with a single element, it is immediately converted to a regular Matrix. Given the context and the applied change, it appears that this resolves the issue without the need for further modification to other methods or spans within the provided files. The functionality should now align with the expected behavior as described in the issue.",
            "instructions": null
          },
          "output": {
            "message": "The modification directly addresses the issue where a BlockDiagMatrix with a single element could not be converted to a regular Matrix by immediately returning the single element, thereby bypassing the need for block handling. This resolution is consistent with the expected behavior specified in the issue and should remedy the reported problem."
          },
          "input_tokens": 5750,
          "output_tokens": 224,
          "retry_message": null,
          "completion_cost": 0.020610000000000003
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The modification directly addresses the issue where a BlockDiagMatrix with a single element could not be converted to a regular Matrix by immediately returning the single element, thereby bypassing the need for block handling. This resolution is consistent with the expected behavior specified in the issue and should remedy the reported problem.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "BlockDiagMatrix with one element cannot be converted to regular Matrix\nCreating a BlockDiagMatrix with one Matrix element will raise if trying to convert it back to a regular Matrix:\r\n\r\n```python\r\nM = sympy.Matrix([[1, 2], [3, 4]])\r\nD = sympy.BlockDiagMatrix(M)\r\nB = sympy.Matrix(D)\r\n```\r\n\r\n```\r\nTraceback (most recent call last):\r\n\r\n  File \"<ipython-input-37-5b65c1f8f23e>\", line 3, in <module>\r\n    B = sympy.Matrix(D)\r\n\r\n  File \"/home/rikard/.local/lib/python3.7/site-packages/sympy/matrices/dense.py\", line 430, in __new__\r\n    return cls._new(*args, **kwargs)\r\n\r\n  File \"/home/rikard/.local/lib/python3.7/site-packages/sympy/matrices/dense.py\", line 442, in _new\r\n    rows, cols, flat_list = cls._handle_creation_inputs(*args, **kwargs)\r\n\r\n  File \"/home/rikard/.local/lib/python3.7/site-packages/sympy/matrices/matrices.py\", line 2528, in _handle_creation_inputs\r\n    return args[0].rows, args[0].cols, args[0].as_explicit()._mat\r\n\r\n  File \"/home/rikard/.local/lib/python3.7/site-packages/sympy/matrices/expressions/matexpr.py\", line 340, in as_explicit\r\n    for i in range(self.rows)])\r\n\r\n  File \"/home/rikard/.local/lib/python3.7/site-packages/sympy/matrices/expressions/matexpr.py\", line 340, in <listcomp>\r\n    for i in range(self.rows)])\r\n\r\n  File \"/home/rikard/.local/lib/python3.7/site-packages/sympy/matrices/expressions/matexpr.py\", line 339, in <listcomp>\r\n    for j in range(self.cols)]\r\n\r\n  File \"/home/rikard/.local/lib/python3.7/site-packages/sympy/matrices/expressions/matexpr.py\", line 289, in __getitem__\r\n    return self._entry(i, j)\r\n\r\n  File \"/home/rikard/.local/lib/python3.7/site-packages/sympy/matrices/expressions/blockmatrix.py\", line 248, in _entry\r\n    return self.blocks[row_block, col_block][i, j]\r\n\r\nTypeError: 'One' object is not subscriptable\r\n```\r\n\r\nInstead having two elements will work as expected:\r\n\r\n```python\r\nM = sympy.Matrix([[1, 2], [3, 4]])\r\nD = sympy.BlockDiagMatrix(M, M)\r\nB = sympy.Matrix(D)\r\n```\r\n\r\n```\r\nMatrix([\r\n[1, 2, 0, 0],\r\n[3, 4, 0, 0],\r\n[0, 0, 1, 2],\r\n[0, 0, 3, 4]])\r\n```\r\nThis issue exists for sympy 1.5.1 but not for sympy 1.4\n"
}