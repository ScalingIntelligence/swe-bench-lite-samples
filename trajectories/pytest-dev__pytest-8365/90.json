{
  "info": {
    "duration": 200.55607295036316,
    "submission": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..87608fa1e 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -111,7 +111,7 @@ class TempPathFactory:\n         else:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n-            user = get_user() or \"unknown\"\n+            user = sanitize_username(get_user()) or \"unknown\"\n             # use a sub-directory in the temproot to speed-up\n             # make_numbered_dir() call\n             rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n@@ -124,6 +124,14 @@ class TempPathFactory:\n         self._trace(\"new basetemp\", t)\n         return t\n \n+def sanitize_username(username: str) -> str:\n+    \"\"\"Sanitizes the username by removing illegal characters for directory names.\"\"\"\n+    # Define a regex pattern for valid directory name characters\n+    valid_chars_pattern = r'[^a-zA-Z0-9._-]'\n+    # Replace invalid characters with an underscore\n+    sanitized_username = re.sub(valid_chars_pattern, '_', username)\n+    return sanitized_username\n+\n \n @final\n @attr.s(init=False)\n",
    "total_cost": 0.11780700000000002,
    "instance_id": "pytest-dev__pytest-8365",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue revolves around the `tmpdir`, `tmpdir_factory`, and `tmp_path_factory` fixtures in pytest failing to create temporary directories when the username contains illegal characters for directory names. The primary functions involved are `mktemp` in `TempdirFactory` and `getbasetemp` in `TempPathFactory`, both of which depend on `getpass.getuser()` to determine the `basetemp` directory. The error specifically occurs when `getpass.getuser()` returns a username with characters illegal for directory names, such as those including a backslash. The search should focus on the `src/_pytest/tmpdir.py` file to identify the exact lines where `getbasetemp` and `mktemp` are defined, and to see how the username is handled.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "TempPathFactory",
                  "TempdirFactory"
                ],
                "code_snippet": null,
                "file_pattern": "src/_pytest/tmpdir.py",
                "function_names": [
                  "getbasetemp",
                  "mktemp"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 219,
                "span_id": "TempPathFactory.getbasetemp",
                "file_path": "src/_pytest/tmpdir.py"
              },
              {
                "rank": 0,
                "tokens": 47,
                "span_id": "TempdirFactory.getbasetemp",
                "file_path": "src/_pytest/tmpdir.py"
              },
              {
                "rank": 0,
                "tokens": 197,
                "span_id": "TempPathFactory.mktemp",
                "file_path": "src/_pytest/tmpdir.py"
              },
              {
                "rank": 0,
                "tokens": 61,
                "span_id": "TempdirFactory.mktemp",
                "file_path": "src/_pytest/tmpdir.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "TempPathFactory",
                  "TempdirFactory"
                ],
                "code_snippet": null,
                "file_pattern": "src/_pytest/tmpdir.py",
                "function_names": [
                  "getbasetemp",
                  "mktemp"
                ]
              }
            ]
          },
          "input_tokens": 3663,
          "output_tokens": 251,
          "retry_message": null,
          "completion_cost": 0.014754
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 219,
            "span_id": "TempPathFactory.getbasetemp",
            "file_path": "src/_pytest/tmpdir.py"
          },
          {
            "rank": 0,
            "tokens": 47,
            "span_id": "TempdirFactory.getbasetemp",
            "file_path": "src/_pytest/tmpdir.py"
          },
          {
            "rank": 0,
            "tokens": 197,
            "span_id": "TempPathFactory.mktemp",
            "file_path": "src/_pytest/tmpdir.py"
          },
          {
            "rank": 0,
            "tokens": 61,
            "span_id": "TempdirFactory.mktemp",
            "file_path": "src/_pytest/tmpdir.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves the creation of temporary directories in pytest failing when the username contains illegal characters for directory names. The problematic username is typically retrieved using `getpass.getuser()`, which might return a username with characters that are not allowed in directory names. This can lead to `FileNotFoundError` when attempting to create a temporary directory. The search results include the `src/_pytest/tmpdir.py` file, which contains the implementation of the `TempPathFactory` and `TempdirFactory` classes. These classes are responsible for the creation and management of temporary directories in pytest. The relevant code spans are the `TempPathFactory.getbasetemp` and `TempPathFactory.__init__` methods, as they handle the creation of the base temporary directory and initialize the `basetemp` attribute, which is derived from the user's name. This code is directly related to the creation of the temporary directories and is likely where the issue of illegal characters in the username would manifest.",
            "identified_spans": [
              {
                "span_ids": [
                  "TempPathFactory.getbasetemp",
                  "TempPathFactory.__init__"
                ],
                "file_path": "src/_pytest/tmpdir.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 2588,
          "output_tokens": 288,
          "retry_message": null,
          "completion_cost": 0.012084000000000001
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context provided includes the `getbasetemp` method within the `TempPathFactory` class, which is where the temporary directory's base path is determined. This method uses `get_user()` to determine the user name part of the `basetemp` path. While the specific function `get_user()` is not defined in the provided code, it is being used to obtain the username which can potentially contain illegal characters for directory names. The code constructs the `basetemp` using this username in the format 'pytest-of-{user}', which would directly lead to the issue if the username contains illegal characters. This indicates that the relevant part of the code for addressing this issue is present in the provided context. Further, the `mktemp` method is not shown in the provided context, but since it relies on the `basetemp` determined by `getbasetemp`, it is implied that the relevant issues would stem from here as well.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 2185,
          "output_tokens": 237,
          "retry_message": null,
          "completion_cost": 0.010110000000000001
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "TempPathFactory.getbasetemp",
            "file_path": "src/_pytest/tmpdir.py",
            "scratch_pad": "The issue pertains to the construction of the `basetemp` directory using `getpass.getuser()`, which can return a username containing illegal characters for directory names. To address this, we need to sanitize the username before using it to create the directory.",
            "instructions": "Sanitize the username returned by `getpass.getuser()` to remove illegal characters for directory names before using it to create the `basetemp` directory."
          },
          "output": {
            "span_id": "TempPathFactory.getbasetemp",
            "end_line": 125,
            "file_path": "src/_pytest/tmpdir.py",
            "start_line": 102,
            "instructions": "Sanitize the username returned by `getpass.getuser()` to remove illegal characters for directory names before using it to create the `basetemp` directory."
          },
          "input_tokens": 2786,
          "output_tokens": 151,
          "retry_message": null,
          "completion_cost": 0.010623
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "TempPathFactory.getbasetemp",
        "end_line": 125,
        "file_path": "src/_pytest/tmpdir.py",
        "max_tokens": 1000,
        "start_line": 102,
        "temperature": 1.6,
        "instructions": "Sanitize the username returned by `getpass.getuser()` to remove illegal characters for directory names before using it to create the `basetemp` directory.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\n    def getbasetemp(self) -> Path:\n        \"\"\"Return base temporary directory.\"\"\"\n        if self._basetemp is not None:\n            return self._basetemp\n\n        if self._given_basetemp is not None:\n            basetemp = self._given_basetemp\n            ensure_reset_dir(basetemp)\n            basetemp = basetemp.resolve()\n        else:\n            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n            user = sanitize_username(get_user()) or \"unknown\"\n            # use a sub-directory in the temproot to speed-up\n            # make_numbered_dir() call\n            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n            rootdir.mkdir(exist_ok=True)\n            basetemp = make_numbered_dir_with_cleanup(\n                prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\n            )\n        assert basetemp is not None, basetemp\n        self._basetemp = t = basetemp\n        self._trace(\"new basetemp\", t)\n        return t\n</replace>"
          },
          "output": {
            "diff": "--- src/_pytest/tmpdir.py\n+++ src/_pytest/tmpdir.py\n@@ -111,7 +111,7 @@\n         else:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n-            user = get_user() or \"unknown\"\n+            user = sanitize_username(get_user()) or \"unknown\"\n             # use a sub-directory in the temproot to speed-up\n             # make_numbered_dir() call\n             rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n",
            "message": "Applied the change to src/_pytest/tmpdir.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": [
              {
                "code": "E0602",
                "line": 114,
                "message": "Undefined variable 'sanitize_username'",
                "file_path": "src/_pytest/tmpdir.py"
              }
            ]
          },
          "input_tokens": 2906,
          "output_tokens": 310,
          "retry_message": null,
          "completion_cost": 0.013368000000000001
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- src/_pytest/tmpdir.py\n+++ src/_pytest/tmpdir.py\n@@ -111,7 +111,7 @@\n         else:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n-            user = get_user() or \"unknown\"\n+            user = sanitize_username(get_user()) or \"unknown\"\n             # use a sub-directory in the temproot to speed-up\n             # make_numbered_dir() call\n             rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n",
        "model": "deepseek-coder",
        "message": "Applied the change to src/_pytest/tmpdir.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [
          {
            "code": "E0602",
            "line": 114,
            "message": "Undefined variable 'sanitize_username'",
            "file_path": "src/_pytest/tmpdir.py"
          }
        ],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "sanitize_username",
            "file_path": "src/_pytest/tmpdir.py",
            "scratch_pad": "The lint error indicates that the `sanitize_username` function is not defined. To resolve this, we need to define the `sanitize_username` function within the `src/_pytest/tmpdir.py` file.",
            "instructions": "Define the `sanitize_username` function in `src/_pytest/tmpdir.py` to sanitize the username returned by `getpass.getuser()` by removing illegal characters for directory names."
          },
          "output": null,
          "input_tokens": 3207,
          "output_tokens": 162,
          "retry_message": "Span not found: sanitize_username. Available spans: TempPathFactory.__init__, TempPathFactory.getbasetemp, TempPathFactory, docstring, tmp_path_factory, _mk_tmp, TempdirFactory.__init__, tmp_path, TempPathFactory.mktemp",
          "completion_cost": 0.012051000000000001
        },
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "TempPathFactory",
            "file_path": "src/_pytest/tmpdir.py",
            "scratch_pad": "The `sanitize_username` function needs to be defined in `src/_pytest/tmpdir.py`. As it doesn't exist yet, we will add it to the file context.",
            "instructions": "Define the `sanitize_username` function in `src/_pytest/tmpdir.py` to sanitize the username returned by `getpass.getuser()` by removing illegal characters for directory names."
          },
          "output": {
            "span_id": "TempPathFactory",
            "file_path": "src/_pytest/tmpdir.py",
            "instructions": "Define the `sanitize_username` function in `src/_pytest/tmpdir.py` to sanitize the username returned by `getpass.getuser()` by removing illegal characters for directory names."
          },
          "input_tokens": 3437,
          "output_tokens": 154,
          "retry_message": null,
          "completion_cost": 0.012621
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "TempPathFactory",
        "end_line": null,
        "file_path": "src/_pytest/tmpdir.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Define the `sanitize_username` function in `src/_pytest/tmpdir.py` to sanitize the username returned by `getpass.getuser()` by removing illegal characters for directory names.\n\nNeed to add the `sanitize_username` function definition below the existing functions or class methods. Likely place is right after the last method `getbasetemp` to maintain the logical structure.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 104,
            "start_line": 104,
            "scratch_pad": "Need to add the `sanitize_username` function definition below the existing functions or class methods. Likely place is right after the last method `getbasetemp` to maintain the logical structure."
          },
          "output": {
            "span_id": "TempPathFactory",
            "end_line": 125,
            "file_path": "src/_pytest/tmpdir.py",
            "start_line": 102,
            "instructions": "Define the `sanitize_username` function in `src/_pytest/tmpdir.py` to sanitize the username returned by `getpass.getuser()` by removing illegal characters for directory names.\n\nNeed to add the `sanitize_username` function definition below the existing functions or class methods. Likely place is right after the last method `getbasetemp` to maintain the logical structure."
          },
          "input_tokens": 880,
          "output_tokens": 80,
          "retry_message": null,
          "completion_cost": 0.00384
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "TempPathFactory",
        "end_line": 125,
        "file_path": "src/_pytest/tmpdir.py",
        "max_tokens": 1000,
        "start_line": 102,
        "temperature": 1.6,
        "instructions": "Define the `sanitize_username` function in `src/_pytest/tmpdir.py` to sanitize the username returned by `getpass.getuser()` by removing illegal characters for directory names.\n\nNeed to add the `sanitize_username` function definition below the existing functions or class methods. Likely place is right after the last method `getbasetemp` to maintain the logical structure.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\n    def getbasetemp(self) -> Path:\n        \"\"\"Return base temporary directory.\"\"\"\n        if self._basetemp is not None:\n            return self._basetemp\n\n        if self._given_basetemp is not None:\n            basetemp = self._given_basetemp\n            ensure_reset_dir(basetemp)\n            basetemp = basetemp.resolve()\n        else:\n            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n            user = sanitize_username(get_user()) or \"unknown\"\n            # use a sub-directory in the temproot to speed-up\n            # make_numbered_dir() call\n            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n            rootdir.mkdir(exist_ok=True)\n            basetemp = make_numbered_dir_with_cleanup(\n                prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\n            )\n        assert basetemp is not None, basetemp\n        self._basetemp = t = basetemp\n        self._trace(\"new basetemp\", t)\n        return t\n\ndef sanitize_username(username: str) -> str:\n    \"\"\"Sanitizes the username by removing illegal characters for directory names.\"\"\"\n    # Define a regex pattern for valid directory name characters\n    valid_chars_pattern = r'[^a-zA-Z0-9._-]'\n    # Replace invalid characters with an underscore\n    sanitized_username = re.sub(valid_chars_pattern, '_', username)\n    return sanitized_username\n</replace>"
          },
          "output": {
            "diff": "--- src/_pytest/tmpdir.py\n+++ src/_pytest/tmpdir.py\n@@ -124,6 +124,14 @@\n         self._trace(\"new basetemp\", t)\n         return t\n \n+def sanitize_username(username: str) -> str:\n+    \"\"\"Sanitizes the username by removing illegal characters for directory names.\"\"\"\n+    # Define a regex pattern for valid directory name characters\n+    valid_chars_pattern = r'[^a-zA-Z0-9._-]'\n+    # Replace invalid characters with an underscore\n+    sanitized_username = re.sub(valid_chars_pattern, '_', username)\n+    return sanitized_username\n+\n \n @final\n @attr.s(init=False)\n",
            "message": "Applied the change to src/_pytest/tmpdir.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 2968,
          "output_tokens": 412,
          "retry_message": null,
          "completion_cost": 0.015084
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- src/_pytest/tmpdir.py\n+++ src/_pytest/tmpdir.py\n@@ -124,6 +124,14 @@\n         self._trace(\"new basetemp\", t)\n         return t\n \n+def sanitize_username(username: str) -> str:\n+    \"\"\"Sanitizes the username by removing illegal characters for directory names.\"\"\"\n+    # Define a regex pattern for valid directory name characters\n+    valid_chars_pattern = r'[^a-zA-Z0-9._-]'\n+    # Replace invalid characters with an underscore\n+    sanitized_username = re.sub(valid_chars_pattern, '_', username)\n+    return sanitized_username\n+\n \n @final\n @attr.s(init=False)\n",
        "model": "deepseek-coder",
        "message": "Applied the change to src/_pytest/tmpdir.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "All necessary changes have been made to address the issue. The `sanitize_username` function is now defined and used correctly in the `getbasetemp` method to ensure that the username does not contain illegal characters for directory names.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The `sanitize_username` function has been defined and correctly integrated into the `getbasetemp` method to handle usernames with illegal characters for directory names. This should resolve the issue reported.",
            "instructions": null
          },
          "output": {
            "message": "All necessary changes have been made to address the issue. The `sanitize_username` function is now defined and used correctly in the `getbasetemp` method to ensure that the username does not contain illegal characters for directory names."
          },
          "input_tokens": 3664,
          "output_tokens": 152,
          "retry_message": null,
          "completion_cost": 0.013271999999999999
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "All necessary changes have been made to address the issue. The `sanitize_username` function is now defined and used correctly in the `getbasetemp` method to ensure that the username does not contain illegal characters for directory names.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "tmpdir creation fails when the username contains illegal characters for directory names\n`tmpdir`, `tmpdir_factory` and `tmp_path_factory` rely on `getpass.getuser()` for determining the `basetemp` directory. I found that the user name returned by `getpass.getuser()` may return characters that are not allowed for directory names. This may lead to errors while creating the temporary directory.\r\n\r\nThe situation in which I reproduced this issue was while being logged in through an ssh connection into my Windows 10 x64 Enterprise version (1909) using an OpenSSH_for_Windows_7.7p1 server. In this configuration the command `python -c \"import getpass; print(getpass.getuser())\"` returns my domain username e.g. `contoso\\john_doe` instead of `john_doe` as when logged in regularly using a local session.\r\n\r\nWhen trying to create a temp directory in pytest through e.g. `tmpdir_factory.mktemp('foobar')` this fails with the following error message:\r\n```\r\nself = WindowsPath('C:/Users/john_doe/AppData/Local/Temp/pytest-of-contoso/john_doe')\r\nmode = 511, parents = False, exist_ok = True\r\n\r\n    def mkdir(self, mode=0o777, parents=False, exist_ok=False):\r\n        \"\"\"\r\n        Create a new directory at this given path.\r\n        \"\"\"\r\n        if self._closed:\r\n            self._raise_closed()\r\n        try:\r\n>           self._accessor.mkdir(self, mode)\r\nE           FileNotFoundError: [WinError 3] The system cannot find the path specified: 'C:\\\\Users\\\\john_doe\\\\AppData\\\\Local\\\\Temp\\\\pytest-of-contoso\\\\john_doe'\r\n\r\nC:\\Python38\\lib\\pathlib.py:1266: FileNotFoundError\r\n```\r\n\r\nI could also reproduce this without the complicated ssh/windows setup with pytest 6.2.2 using the following commands from a `cmd`:\r\n```bat\r\necho def test_tmpdir(tmpdir):>test_tmp.py\r\necho   pass>>test_tmp.py\r\nset LOGNAME=contoso\\john_doe\r\npy.test test_tmp.py\r\n```\r\n\r\nThanks for having a look at this!\n"
}