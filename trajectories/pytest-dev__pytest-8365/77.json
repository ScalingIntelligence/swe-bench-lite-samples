{
  "info": {
    "duration": 149.40831661224365,
    "submission": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..c966f7394 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -112,6 +112,8 @@ class TempPathFactory:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n             user = get_user() or \"unknown\"\n+            # Sanitize the username to remove or replace characters that are not allowed in directory names\n+            user = re.sub(r'[\\\\/:*?\"<>|]', \"_\", user)\n             # use a sub-directory in the temproot to speed-up\n             # make_numbered_dir() call\n             rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n",
    "total_cost": 0.145404,
    "instance_id": "pytest-dev__pytest-8365",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue revolves around the creation of temporary directories with illegal characters in usernames. The primary focus should be on the `get_user` function in `tmpdir.py` and any related functions handling directory path creation. Additionally, examining the handling of illegal characters in directory names across the codebase is crucial. The `FileNotFoundError` indicates a failure to create the directory due to illegal characters in the username. Thus, searching for functions related to temporary directory creation and user info extraction is necessary.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "TempPathFactory",
                  "TempdirFactory"
                ],
                "code_snippet": null,
                "file_pattern": "**/tmpdir.py",
                "function_names": [
                  "get_user",
                  "mktemp",
                  "getbasetemp",
                  "pytest_configure",
                  "tmpdir_factory",
                  "tmp_path_factory",
                  "tmpdir",
                  "tmp_path"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pathlib.py",
                "function_names": [
                  "ensure_extended_length_path",
                  "get_extended_length_path_str",
                  "find_prefixed",
                  "extract_suffixes",
                  "find_suffixes",
                  "parse_num",
                  "maybe_delete_a_numbered_dir",
                  "cleanup_candidates",
                  "resolve_from_str",
                  "bestrelpath"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/main.py",
                "function_names": [
                  "validate_basetemp"
                ]
              },
              {
                "query": null,
                "class_names": [
                  "Cache"
                ],
                "code_snippet": null,
                "file_pattern": "**/cacheprovider.py",
                "function_names": [
                  "makedir"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/assertion/rewrite.py",
                "function_names": [
                  "get_cache_dir"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/config/__init__.py",
                "function_names": [
                  "_iter_rewritable_modules",
                  "_args_converter"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 197,
                "span_id": "TempPathFactory.mktemp",
                "file_path": "src/_pytest/tmpdir.py"
              },
              {
                "rank": 0,
                "tokens": 61,
                "span_id": "TempdirFactory.mktemp",
                "file_path": "src/_pytest/tmpdir.py"
              },
              {
                "rank": 0,
                "tokens": 219,
                "span_id": "TempPathFactory.getbasetemp",
                "file_path": "src/_pytest/tmpdir.py"
              },
              {
                "rank": 0,
                "tokens": 47,
                "span_id": "TempdirFactory.getbasetemp",
                "file_path": "src/_pytest/tmpdir.py"
              },
              {
                "rank": 0,
                "tokens": 159,
                "span_id": "ensure_extended_length_path",
                "file_path": "src/_pytest/pathlib.py"
              },
              {
                "rank": 0,
                "tokens": 82,
                "span_id": "get_extended_length_path_str",
                "file_path": "src/_pytest/pathlib.py"
              },
              {
                "rank": 0,
                "tokens": 56,
                "span_id": "find_prefixed",
                "file_path": "src/_pytest/pathlib.py"
              },
              {
                "rank": 0,
                "tokens": 71,
                "span_id": "extract_suffixes",
                "file_path": "src/_pytest/pathlib.py"
              },
              {
                "rank": 0,
                "tokens": 39,
                "span_id": "find_suffixes",
                "file_path": "src/_pytest/pathlib.py"
              },
              {
                "rank": 0,
                "tokens": 37,
                "span_id": "parse_num",
                "file_path": "src/_pytest/pathlib.py"
              },
              {
                "rank": 0,
                "tokens": 179,
                "span_id": "maybe_delete_a_numbered_dir",
                "file_path": "src/_pytest/pathlib.py"
              },
              {
                "rank": 0,
                "tokens": 111,
                "span_id": "cleanup_candidates",
                "file_path": "src/_pytest/pathlib.py"
              },
              {
                "rank": 0,
                "tokens": 46,
                "span_id": "resolve_from_str",
                "file_path": "src/_pytest/pathlib.py"
              },
              {
                "rank": 0,
                "tokens": 201,
                "span_id": "bestrelpath",
                "file_path": "src/_pytest/pathlib.py"
              },
              {
                "rank": 0,
                "tokens": 155,
                "span_id": "validate_basetemp",
                "file_path": "src/_pytest/main.py"
              },
              {
                "rank": 0,
                "tokens": 163,
                "span_id": "Cache.makedir",
                "file_path": "src/_pytest/cacheprovider.py"
              },
              {
                "rank": 0,
                "tokens": 132,
                "span_id": "get_cache_dir",
                "file_path": "src/_pytest/assertion/rewrite.py"
              },
              {
                "rank": 0,
                "tokens": 502,
                "span_id": "_iter_rewritable_modules",
                "file_path": "src/_pytest/config/__init__.py"
              },
              {
                "rank": 0,
                "tokens": 19,
                "span_id": "_args_converter",
                "file_path": "src/_pytest/config/__init__.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "TempPathFactory",
                  "TempdirFactory"
                ],
                "code_snippet": null,
                "file_pattern": "**/tmpdir.py",
                "function_names": [
                  "get_user",
                  "mktemp",
                  "getbasetemp",
                  "pytest_configure",
                  "tmpdir_factory",
                  "tmp_path_factory",
                  "tmpdir",
                  "tmp_path"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pathlib.py",
                "function_names": [
                  "ensure_extended_length_path",
                  "get_extended_length_path_str",
                  "find_prefixed",
                  "extract_suffixes",
                  "find_suffixes",
                  "parse_num",
                  "maybe_delete_a_numbered_dir",
                  "cleanup_candidates",
                  "resolve_from_str",
                  "bestrelpath"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/main.py",
                "function_names": [
                  "validate_basetemp"
                ]
              },
              {
                "query": null,
                "class_names": [
                  "Cache"
                ],
                "code_snippet": null,
                "file_pattern": "**/cacheprovider.py",
                "function_names": [
                  "makedir"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/assertion/rewrite.py",
                "function_names": [
                  "get_cache_dir"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/config/__init__.py",
                "function_names": [
                  "_iter_rewritable_modules",
                  "_args_converter"
                ]
              }
            ]
          },
          "input_tokens": 3663,
          "output_tokens": 473,
          "retry_message": null,
          "completion_cost": 0.018084000000000003
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 197,
            "span_id": "TempPathFactory.mktemp",
            "file_path": "src/_pytest/tmpdir.py"
          },
          {
            "rank": 0,
            "tokens": 61,
            "span_id": "TempdirFactory.mktemp",
            "file_path": "src/_pytest/tmpdir.py"
          },
          {
            "rank": 0,
            "tokens": 219,
            "span_id": "TempPathFactory.getbasetemp",
            "file_path": "src/_pytest/tmpdir.py"
          },
          {
            "rank": 0,
            "tokens": 47,
            "span_id": "TempdirFactory.getbasetemp",
            "file_path": "src/_pytest/tmpdir.py"
          },
          {
            "rank": 0,
            "tokens": 159,
            "span_id": "ensure_extended_length_path",
            "file_path": "src/_pytest/pathlib.py"
          },
          {
            "rank": 0,
            "tokens": 82,
            "span_id": "get_extended_length_path_str",
            "file_path": "src/_pytest/pathlib.py"
          },
          {
            "rank": 0,
            "tokens": 56,
            "span_id": "find_prefixed",
            "file_path": "src/_pytest/pathlib.py"
          },
          {
            "rank": 0,
            "tokens": 71,
            "span_id": "extract_suffixes",
            "file_path": "src/_pytest/pathlib.py"
          },
          {
            "rank": 0,
            "tokens": 39,
            "span_id": "find_suffixes",
            "file_path": "src/_pytest/pathlib.py"
          },
          {
            "rank": 0,
            "tokens": 37,
            "span_id": "parse_num",
            "file_path": "src/_pytest/pathlib.py"
          },
          {
            "rank": 0,
            "tokens": 179,
            "span_id": "maybe_delete_a_numbered_dir",
            "file_path": "src/_pytest/pathlib.py"
          },
          {
            "rank": 0,
            "tokens": 111,
            "span_id": "cleanup_candidates",
            "file_path": "src/_pytest/pathlib.py"
          },
          {
            "rank": 0,
            "tokens": 46,
            "span_id": "resolve_from_str",
            "file_path": "src/_pytest/pathlib.py"
          },
          {
            "rank": 0,
            "tokens": 201,
            "span_id": "bestrelpath",
            "file_path": "src/_pytest/pathlib.py"
          },
          {
            "rank": 0,
            "tokens": 155,
            "span_id": "validate_basetemp",
            "file_path": "src/_pytest/main.py"
          },
          {
            "rank": 0,
            "tokens": 163,
            "span_id": "Cache.makedir",
            "file_path": "src/_pytest/cacheprovider.py"
          },
          {
            "rank": 0,
            "tokens": 132,
            "span_id": "get_cache_dir",
            "file_path": "src/_pytest/assertion/rewrite.py"
          },
          {
            "rank": 0,
            "tokens": 502,
            "span_id": "_iter_rewritable_modules",
            "file_path": "src/_pytest/config/__init__.py"
          },
          {
            "rank": 0,
            "tokens": 19,
            "span_id": "_args_converter",
            "file_path": "src/_pytest/config/__init__.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves the creation of temporary directories using `tmpdir`, `tmpdir_factory`, and `tmp_path_factory` in pytest, which fail when the username contains illegal characters for directory names. Specifically, the issue arises due to the use of `getpass.getuser()` to determine the `basetemp` directory, which can return usernames with characters that are not allowed in directory names. \n\nI will analyze the provided search results to identify the relevant code spans that deal with the creation and management of temporary directories. The focus will be on the `TempPathFactory` and `TempdirFactory` classes in `src/_pytest/tmpdir.py`, as well as any utility functions used by these classes, such as those for creating numbered directories or managing paths in `src/_pytest/pathlib.py`. I will also look for any validation or sanitization of usernames or paths that could help address the issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "TempPathFactory",
                  "TempPathFactory.__init__",
                  "TempPathFactory.mktemp",
                  "TempPathFactory.getbasetemp",
                  "TempdirFactory",
                  "TempdirFactory.__init__",
                  "TempdirFactory.mktemp",
                  "TempdirFactory.getbasetemp"
                ],
                "file_path": "src/_pytest/tmpdir.py"
              },
              {
                "span_ids": [
                  "make_numbered_dir",
                  "make_numbered_dir_with_cleanup"
                ],
                "file_path": "src/_pytest/pathlib.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 5727,
          "output_tokens": 394,
          "retry_message": null,
          "completion_cost": 0.023091
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The file context provided includes the `TempPathFactory` and `TempdirFactory` classes which are relevant to the temporary directory creation. The `mktemp` and `getbasetemp` methods within these classes handle the creation of temporary directories and the retrieval of the base temporary directory, respectively. The `getbasetemp` method uses `get_user()` to determine the user for the temporary directory path. This directly relates to the issue of illegal characters in usernames causing the `FileNotFoundError`. The provided code does handle the creation of temporary directories and the relevant parts seem to be present. However, the `get_user()` function itself is not included in the context provided, which is essential for understanding how the username is fetched and potentially sanitized. More context on `get_user()` could be helpful to ensure all relevant code is identified.",
            "search_suggestions": "Search for the implementation of the `get_user()` function and any related utility functions or modules that handle user information extraction and sanitization for directory names."
          },
          "output": {
            "message": "Search for the implementation of the `get_user()` function and any related utility functions or modules that handle user information extraction and sanitization for directory names."
          },
          "input_tokens": 4166,
          "output_tokens": 245,
          "retry_message": null,
          "completion_cost": 0.016173
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Search for the implementation of the `get_user()` function and any related utility functions or modules that handle user information extraction and sanitization for directory names.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "scratch_pad": "The provided context already includes the `get_user` function and related utility functions in the `src/_pytest/tmpdir.py` file. This function is used within the `TempPathFactory` class to determine the temporary directory path based on the user. The function and its usage seem to be directly related to the issue of handling user information extraction and sanitization for directory names. Given the context, I propose to finish the search with the identified relevant code.",
            "search_requests": []
          },
          "output": {
            "message": "The provided context already includes the `get_user` function and related utility functions in the `src/_pytest/tmpdir.py` file. This function is used within the `TempPathFactory` class to determine the temporary directory path based on the user. The function and its usage seem to be directly related to the issue of handling user information extraction and sanitization for directory names. Given the context, I propose to finish the search with the identified relevant code."
          },
          "input_tokens": 7121,
          "output_tokens": 124,
          "retry_message": null,
          "completion_cost": 0.023223
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "The provided context already includes the `get_user` function and related utility functions in the `src/_pytest/tmpdir.py` file. This function is used within the `TempPathFactory` class to determine the temporary directory path based on the user. The function and its usage seem to be directly related to the issue of handling user information extraction and sanitization for directory names. Given the context, I propose to finish the search with the identified relevant code.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "TempPathFactory.getbasetemp",
            "file_path": "src/_pytest/tmpdir.py",
            "scratch_pad": "The issue arises from the use of `getpass.getuser()` which may return characters that are not allowed for directory names. To resolve this, we need to sanitize the username extracted using `getpass.getuser()`. The sanitization should replace invalid characters with underscores or remove them entirely.",
            "instructions": "Sanitize the username returned by `getpass.getuser()` to remove or replace characters that are not allowed in directory names. This should be done in the `get_user()` function within `src/_pytest/tmpdir.py`."
          },
          "output": {
            "span_id": "TempPathFactory.getbasetemp",
            "end_line": 125,
            "file_path": "src/_pytest/tmpdir.py",
            "start_line": 102,
            "instructions": "Sanitize the username returned by `getpass.getuser()` to remove or replace characters that are not allowed in directory names. This should be done in the `get_user()` function within `src/_pytest/tmpdir.py`."
          },
          "input_tokens": 5744,
          "output_tokens": 176,
          "retry_message": null,
          "completion_cost": 0.019872
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "TempPathFactory.getbasetemp",
        "end_line": 125,
        "file_path": "src/_pytest/tmpdir.py",
        "max_tokens": 1000,
        "start_line": 102,
        "temperature": 1.6,
        "instructions": "Sanitize the username returned by `getpass.getuser()` to remove or replace characters that are not allowed in directory names. This should be done in the `get_user()` function within `src/_pytest/tmpdir.py`.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```html\n<replace>\n    def getbasetemp(self) -> Path:\n        \"\"\"Return base temporary directory.\"\"\"\n        if self._basetemp is not None:\n            return self._basetemp\n\n        if self._given_basetemp is not None:\n            basetemp = self._given_basetemp\n            ensure_reset_dir(basetemp)\n            basetemp = basetemp.resolve()\n        else:\n            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n            user = get_user() or \"unknown\"\n            # Sanitize the username to remove or replace characters that are not allowed in directory names\n            user = re.sub(r'[\\\\/:*?\"<>|]', \"_\", user)\n            # use a sub-directory in the temproot to speed-up\n            # make_numbered_dir() call\n            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n            rootdir.mkdir(exist_ok=True)\n            basetemp = make_numbered_dir_with_cleanup(\n                prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\n            )\n        assert basetemp is not None, basetemp\n        self._basetemp = t = basetemp\n        self._trace(\"new basetemp\", t)\n        return t\n</replace>"
          },
          "output": {
            "diff": "--- src/_pytest/tmpdir.py\n+++ src/_pytest/tmpdir.py\n@@ -112,6 +112,8 @@\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n             user = get_user() or \"unknown\"\n+            # Sanitize the username to remove or replace characters that are not allowed in directory names\n+            user = re.sub(r'[\\\\/:*?\"<>|]', \"_\", user)\n             # use a sub-directory in the temproot to speed-up\n             # make_numbered_dir() call\n             rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n",
            "message": "Applied the change to src/_pytest/tmpdir.py.\n\n<scratch_pad>\n```html\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 6213,
          "output_tokens": 345,
          "retry_message": null,
          "completion_cost": 0.023814
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- src/_pytest/tmpdir.py\n+++ src/_pytest/tmpdir.py\n@@ -112,6 +112,8 @@\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n             user = get_user() or \"unknown\"\n+            # Sanitize the username to remove or replace characters that are not allowed in directory names\n+            user = re.sub(r'[\\\\/:*?\"<>|]', \"_\", user)\n             # use a sub-directory in the temproot to speed-up\n             # make_numbered_dir() call\n             rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n",
        "model": "deepseek-coder",
        "message": "Applied the change to src/_pytest/tmpdir.py.\n\n<scratch_pad>\n```html\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue has been fixed by adding sanitation of the username to prevent invalid characters in the directory name. This ensures that the temporary directory can be created successfully regardless of the characters in the username.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The change to sanitize the username in the `getbasetemp` method of the `TempPathFactory` class has been successfully applied. The username is now sanitized by replacing invalid characters with underscores to ensure that the temporary directory can be created without errors. This solution addresses the issue reported where the username might contain characters that are not allowed in directory names.",
            "instructions": null
          },
          "output": {
            "message": "The issue has been fixed by adding sanitation of the username to prevent invalid characters in the directory name. This ensures that the temporary directory can be created successfully regardless of the characters in the username."
          },
          "input_tokens": 6179,
          "output_tokens": 174,
          "retry_message": null,
          "completion_cost": 0.021147000000000003
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue has been fixed by adding sanitation of the username to prevent invalid characters in the directory name. This ensures that the temporary directory can be created successfully regardless of the characters in the username.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "tmpdir creation fails when the username contains illegal characters for directory names\n`tmpdir`, `tmpdir_factory` and `tmp_path_factory` rely on `getpass.getuser()` for determining the `basetemp` directory. I found that the user name returned by `getpass.getuser()` may return characters that are not allowed for directory names. This may lead to errors while creating the temporary directory.\r\n\r\nThe situation in which I reproduced this issue was while being logged in through an ssh connection into my Windows 10 x64 Enterprise version (1909) using an OpenSSH_for_Windows_7.7p1 server. In this configuration the command `python -c \"import getpass; print(getpass.getuser())\"` returns my domain username e.g. `contoso\\john_doe` instead of `john_doe` as when logged in regularly using a local session.\r\n\r\nWhen trying to create a temp directory in pytest through e.g. `tmpdir_factory.mktemp('foobar')` this fails with the following error message:\r\n```\r\nself = WindowsPath('C:/Users/john_doe/AppData/Local/Temp/pytest-of-contoso/john_doe')\r\nmode = 511, parents = False, exist_ok = True\r\n\r\n    def mkdir(self, mode=0o777, parents=False, exist_ok=False):\r\n        \"\"\"\r\n        Create a new directory at this given path.\r\n        \"\"\"\r\n        if self._closed:\r\n            self._raise_closed()\r\n        try:\r\n>           self._accessor.mkdir(self, mode)\r\nE           FileNotFoundError: [WinError 3] The system cannot find the path specified: 'C:\\\\Users\\\\john_doe\\\\AppData\\\\Local\\\\Temp\\\\pytest-of-contoso\\\\john_doe'\r\n\r\nC:\\Python38\\lib\\pathlib.py:1266: FileNotFoundError\r\n```\r\n\r\nI could also reproduce this without the complicated ssh/windows setup with pytest 6.2.2 using the following commands from a `cmd`:\r\n```bat\r\necho def test_tmpdir(tmpdir):>test_tmp.py\r\necho   pass>>test_tmp.py\r\nset LOGNAME=contoso\\john_doe\r\npy.test test_tmp.py\r\n```\r\n\r\nThanks for having a look at this!\n"
}