{
  "info": {
    "duration": 176.8333957195282,
    "submission": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..1267f73ad 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -111,7 +111,7 @@ class TempPathFactory:\n         else:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n-            user = get_user() or \"unknown\"\n+            user = get_sanitized_user() or \"unknown\"\n             # use a sub-directory in the temproot to speed-up\n             # make_numbered_dir() call\n             rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n",
    "total_cost": 0.109899,
    "instance_id": "pytest-dev__pytest-8365",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue is related to the creation of temporary directories using various pytest fixtures (`tmpdir`, `tmpdir_factory`, `tmp_path_factory`) when the username contains illegal characters for directory names. These fixtures rely on `getpass.getuser()` to determine the `basetemp` directory. Given the errors during temp directory creation, especially when the username includes characters like '\\', it is crucial to find the relevant parts of the code where the temporary directories are managed. This includes both the creation logic and the dependencies on `getpass.getuser()`. The file patterns are set to include potential files related to temp directory management within pytest.",
            "search_requests": [
              {
                "query": "temp directory creation",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/tmpdir.py",
                "function_names": []
              },
              {
                "query": "directory creation",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pathlib.py",
                "function_names": []
              },
              {
                "query": "validate basetemp",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/main.py",
                "function_names": []
              },
              {
                "query": "makedir",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/cacheprovider.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 108,
                "span_id": "docstring",
                "file_path": "src/_pytest/tmpdir.py"
              },
              {
                "rank": 1,
                "tokens": 150,
                "span_id": "tmpdir",
                "file_path": "src/_pytest/tmpdir.py"
              },
              {
                "rank": 2,
                "tokens": 219,
                "span_id": "TempPathFactory.getbasetemp",
                "file_path": "src/_pytest/tmpdir.py"
              },
              {
                "rank": 3,
                "tokens": 61,
                "span_id": "TempdirFactory.mktemp",
                "file_path": "src/_pytest/tmpdir.py"
              },
              {
                "rank": 3,
                "tokens": 47,
                "span_id": "TempdirFactory.getbasetemp",
                "file_path": "src/_pytest/tmpdir.py"
              },
              {
                "rank": 3,
                "tokens": 54,
                "span_id": "TempdirFactory",
                "file_path": "src/_pytest/tmpdir.py"
              },
              {
                "rank": 4,
                "tokens": 60,
                "span_id": "tmpdir_factory",
                "file_path": "src/_pytest/tmpdir.py"
              },
              {
                "rank": 0,
                "tokens": 285,
                "span_id": "imports",
                "file_path": "src/_pytest/pathlib.py"
              },
              {
                "rank": 0,
                "tokens": 44,
                "span_id": "_ignore_error",
                "file_path": "src/_pytest/pathlib.py"
              },
              {
                "rank": 0,
                "tokens": 24,
                "span_id": "get_lock_path",
                "file_path": "src/_pytest/pathlib.py"
              },
              {
                "rank": 0,
                "tokens": 32,
                "span_id": "ensure_reset_dir",
                "file_path": "src/_pytest/pathlib.py"
              },
              {
                "rank": 1,
                "tokens": 78,
                "span_id": "commonpath",
                "file_path": "src/_pytest/pathlib.py"
              },
              {
                "rank": 1,
                "tokens": 66,
                "span_id": "absolutepath",
                "file_path": "src/_pytest/pathlib.py"
              },
              {
                "rank": 2,
                "tokens": 156,
                "span_id": "make_numbered_dir",
                "file_path": "src/_pytest/pathlib.py"
              },
              {
                "rank": 0,
                "tokens": 155,
                "span_id": "validate_basetemp",
                "file_path": "src/_pytest/main.py"
              },
              {
                "rank": 1,
                "tokens": 1122,
                "span_id": "pytest_addoption",
                "file_path": "src/_pytest/main.py"
              },
              {
                "rank": 0,
                "tokens": 163,
                "span_id": "Cache.makedir",
                "file_path": "src/_pytest/cacheprovider.py"
              },
              {
                "rank": 1,
                "tokens": 327,
                "span_id": "docstring",
                "file_path": "src/_pytest/cacheprovider.py"
              },
              {
                "rank": 2,
                "tokens": 76,
                "span_id": "Cache",
                "file_path": "src/_pytest/cacheprovider.py"
              },
              {
                "rank": 3,
                "tokens": 316,
                "span_id": "cacheshow",
                "file_path": "src/_pytest/cacheprovider.py"
              },
              {
                "rank": 4,
                "tokens": 118,
                "span_id": "Cache._ensure_supporting_files",
                "file_path": "src/_pytest/cacheprovider.py"
              },
              {
                "rank": 5,
                "tokens": 105,
                "span_id": "Cache.for_config",
                "file_path": "src/_pytest/cacheprovider.py"
              },
              {
                "rank": 6,
                "tokens": 219,
                "span_id": "Cache.set",
                "file_path": "src/_pytest/cacheprovider.py"
              }
            ],
            "search_requests": [
              {
                "query": "temp directory creation",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/tmpdir.py",
                "function_names": []
              },
              {
                "query": "directory creation",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pathlib.py",
                "function_names": []
              },
              {
                "query": "validate basetemp",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/main.py",
                "function_names": []
              },
              {
                "query": "makedir",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/cacheprovider.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 3663,
          "output_tokens": 284,
          "retry_message": null,
          "completion_cost": 0.015249
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 108,
            "span_id": "docstring",
            "file_path": "src/_pytest/tmpdir.py"
          },
          {
            "rank": 1,
            "tokens": 150,
            "span_id": "tmpdir",
            "file_path": "src/_pytest/tmpdir.py"
          },
          {
            "rank": 2,
            "tokens": 219,
            "span_id": "TempPathFactory.getbasetemp",
            "file_path": "src/_pytest/tmpdir.py"
          },
          {
            "rank": 3,
            "tokens": 61,
            "span_id": "TempdirFactory.mktemp",
            "file_path": "src/_pytest/tmpdir.py"
          },
          {
            "rank": 3,
            "tokens": 47,
            "span_id": "TempdirFactory.getbasetemp",
            "file_path": "src/_pytest/tmpdir.py"
          },
          {
            "rank": 3,
            "tokens": 54,
            "span_id": "TempdirFactory",
            "file_path": "src/_pytest/tmpdir.py"
          },
          {
            "rank": 4,
            "tokens": 60,
            "span_id": "tmpdir_factory",
            "file_path": "src/_pytest/tmpdir.py"
          },
          {
            "rank": 0,
            "tokens": 285,
            "span_id": "imports",
            "file_path": "src/_pytest/pathlib.py"
          },
          {
            "rank": 0,
            "tokens": 44,
            "span_id": "_ignore_error",
            "file_path": "src/_pytest/pathlib.py"
          },
          {
            "rank": 0,
            "tokens": 24,
            "span_id": "get_lock_path",
            "file_path": "src/_pytest/pathlib.py"
          },
          {
            "rank": 0,
            "tokens": 32,
            "span_id": "ensure_reset_dir",
            "file_path": "src/_pytest/pathlib.py"
          },
          {
            "rank": 1,
            "tokens": 78,
            "span_id": "commonpath",
            "file_path": "src/_pytest/pathlib.py"
          },
          {
            "rank": 1,
            "tokens": 66,
            "span_id": "absolutepath",
            "file_path": "src/_pytest/pathlib.py"
          },
          {
            "rank": 2,
            "tokens": 156,
            "span_id": "make_numbered_dir",
            "file_path": "src/_pytest/pathlib.py"
          },
          {
            "rank": 0,
            "tokens": 155,
            "span_id": "validate_basetemp",
            "file_path": "src/_pytest/main.py"
          },
          {
            "rank": 1,
            "tokens": 1122,
            "span_id": "pytest_addoption",
            "file_path": "src/_pytest/main.py"
          },
          {
            "rank": 0,
            "tokens": 163,
            "span_id": "Cache.makedir",
            "file_path": "src/_pytest/cacheprovider.py"
          },
          {
            "rank": 1,
            "tokens": 327,
            "span_id": "docstring",
            "file_path": "src/_pytest/cacheprovider.py"
          },
          {
            "rank": 2,
            "tokens": 76,
            "span_id": "Cache",
            "file_path": "src/_pytest/cacheprovider.py"
          },
          {
            "rank": 3,
            "tokens": 316,
            "span_id": "cacheshow",
            "file_path": "src/_pytest/cacheprovider.py"
          },
          {
            "rank": 4,
            "tokens": 118,
            "span_id": "Cache._ensure_supporting_files",
            "file_path": "src/_pytest/cacheprovider.py"
          },
          {
            "rank": 5,
            "tokens": 105,
            "span_id": "Cache.for_config",
            "file_path": "src/_pytest/cacheprovider.py"
          },
          {
            "rank": 6,
            "tokens": 219,
            "span_id": "Cache.set",
            "file_path": "src/_pytest/cacheprovider.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves the creation of temporary directories using pytest's `tmpdir`, `tmpdir_factory`, and `tmp_path_factory` fixtures, which rely on `getpass.getuser()` to determine the `basetemp` directory. The issue arises when the username returned by `getpass.getuser()` contains illegal characters for directory names. This leads to errors when creating the temporary directory. The search results provide relevant code spans that handle the creation of temporary directories and the determination of the `basetemp` directory. Specifically, the `getbasetemp` method in `TempPathFactory` class and the related `TempdirFactory` class are relevant. Additionally, the `make_numbered_dir_with_cleanup` function in `src/_pytest/pathlib.py` is likely involved in the creation process. Further review of these sections will help identify the exact spots where the username handling is done and where adjustments may be needed.",
            "identified_spans": [
              {
                "span_ids": [
                  "TempPathFactory",
                  "TempPathFactory.getbasetemp",
                  "TempdirFactory",
                  "TempdirFactory.__init__",
                  "TempdirFactory.mktemp",
                  "TempdirFactory.getbasetemp"
                ],
                "file_path": "src/_pytest/tmpdir.py"
              },
              {
                "span_ids": [
                  "make_numbered_dir_with_cleanup"
                ],
                "file_path": "src/_pytest/pathlib.py"
              },
              {
                "span_ids": [
                  "pytest_addoption",
                  "validate_basetemp"
                ],
                "file_path": "src/_pytest/main.py"
              },
              {
                "span_ids": [
                  "Cache",
                  "Cache.__init__",
                  "Cache.for_config",
                  "Cache.makedir",
                  "Cache.set",
                  "Cache._ensure_supporting_files"
                ],
                "file_path": "src/_pytest/cacheprovider.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 6516,
          "output_tokens": 498,
          "retry_message": null,
          "completion_cost": 0.027018
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The relevant parts of the code where temporary directories are managed are present in the file context. This includes the creation logic and dependencies on `getpass.getuser()` in the `TempPathFactory` class within `src/_pytest/tmpdir.py`. The `getbasetemp` method explicitly uses `get_user()` to determine the `basetemp` directory, which is critical for understanding the issue. Additionally, the `pytest_addoption` function in `src/_pytest/main.py` shows how the `--basetemp` option is handled, which could be relevant if an alternative basetemp is manually specified. However, there is no explicit method provided for sanitizing or handling illegal characters in usernames, which is the core issue here. Despite this, all relevant areas for modification are identified based on the provided context.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 5954,
          "output_tokens": 213,
          "retry_message": null,
          "completion_cost": 0.021057
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "TempPathFactory.getbasetemp",
            "file_path": "src/_pytest/tmpdir.py",
            "scratch_pad": "To address the issue of illegal characters in the username returned by `getpass.getuser()`, we need to create a function to sanitize the username by removing or replacing invalid characters for directory names. This function will be used in the `TempPathFactory.getbasetemp` method to ensure that the temporary directory path is valid.",
            "instructions": "Modify the `get_user` function to sanitize the username returned by `getpass.getuser()` to remove or replace invalid characters for directory names."
          },
          "output": {
            "span_id": "TempPathFactory.getbasetemp",
            "end_line": 125,
            "file_path": "src/_pytest/tmpdir.py",
            "start_line": 102,
            "instructions": "Modify the `get_user` function to sanitize the username returned by `getpass.getuser()` to remove or replace invalid characters for directory names."
          },
          "input_tokens": 6392,
          "output_tokens": 165,
          "retry_message": null,
          "completion_cost": 0.021651000000000004
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "TempPathFactory.getbasetemp",
        "end_line": 125,
        "file_path": "src/_pytest/tmpdir.py",
        "max_tokens": 1000,
        "start_line": 102,
        "temperature": 1.6,
        "instructions": "Modify the `get_user` function to sanitize the username returned by `getpass.getuser()` to remove or replace invalid characters for directory names.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```python\n<replace>\n    def getbasetemp(self) -> Path:\n        \"\"\"Return base temporary directory.\"\"\"\n        if self._basetemp is not None:\n            return self._basetemp\n\n        if self._given_basetemp is not None:\n            basetemp = self._given_basetemp\n            ensure_reset_dir(basetemp)\n            basetemp = basetemp.resolve()\n        else:\n            from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n            temproot = Path(from_env or tempfile.gettempdir()).resolve()\n            user = get_sanitized_user() or \"unknown\"\n            # use a sub-directory in the temproot to speed-up\n            # make_numbered_dir() call\n            rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n            rootdir.mkdir(exist_ok=True)\n            basetemp = make_numbered_dir_with_cleanup(\n                prefix=\"pytest-\", root=rootdir, keep=3, lock_timeout=LOCK_TIMEOUT\n            )\n        assert basetemp is not None, basetemp\n        self._basetemp = t = basetemp\n        self._trace(\"new basetemp\", t)\n        return t\n</replace>"
          },
          "output": {
            "diff": "--- src/_pytest/tmpdir.py\n+++ src/_pytest/tmpdir.py\n@@ -111,7 +111,7 @@\n         else:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n-            user = get_user() or \"unknown\"\n+            user = get_sanitized_user() or \"unknown\"\n             # use a sub-directory in the temproot to speed-up\n             # make_numbered_dir() call\n             rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n",
            "message": "Applied the change to src/_pytest/tmpdir.py.\n\n<scratch_pad>\n```python\n</scratch_pad>",
            "verification_errors": [
              {
                "code": "E0602",
                "line": 114,
                "message": "Undefined variable 'get_sanitized_user'",
                "file_path": "src/_pytest/tmpdir.py"
              }
            ]
          },
          "input_tokens": 6763,
          "output_tokens": 309,
          "retry_message": null,
          "completion_cost": 0.024924
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- src/_pytest/tmpdir.py\n+++ src/_pytest/tmpdir.py\n@@ -111,7 +111,7 @@\n         else:\n             from_env = os.environ.get(\"PYTEST_DEBUG_TEMPROOT\")\n             temproot = Path(from_env or tempfile.gettempdir()).resolve()\n-            user = get_user() or \"unknown\"\n+            user = get_sanitized_user() or \"unknown\"\n             # use a sub-directory in the temproot to speed-up\n             # make_numbered_dir() call\n             rootdir = temproot.joinpath(f\"pytest-of-{user}\")\n",
        "model": "deepseek-coder",
        "message": "Applied the change to src/_pytest/tmpdir.py.\n\n<scratch_pad>\n```python\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [
          {
            "code": "E0602",
            "line": 114,
            "message": "Undefined variable 'get_sanitized_user'",
            "file_path": "src/_pytest/tmpdir.py"
          }
        ],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "get_sanitized_user",
            "file_path": "src/_pytest/tmpdir.py",
            "scratch_pad": "The lint error indicates that the `get_sanitized_user` function is not defined. We need to introduce the `get_sanitized_user` function to sanitize the username and ensure it doesn't contain illegal characters for directory names.",
            "instructions": "Introduce the `get_sanitized_user` function in `src/_pytest/tmpdir.py` to sanitize the username. This function will take the result of `getpass.getuser()` and replace or remove invalid characters, ensuring the username is safe for directory creation."
          },
          "output": null,
          "input_tokens": 6828,
          "output_tokens": 188,
          "retry_message": "Span not found: get_sanitized_user. Available spans: TempdirFactory.getbasetemp, TempdirFactory.mktemp, TempPathFactory, TempdirFactory, TempdirFactory.__init__, TempPathFactory.getbasetemp, TempPathFactory.__init__, tmp_path_factory, _mk_tmp, tmp_path, tmpdir_factory, pytest_configure, docstring",
          "completion_cost": 0.023304000000000002
        },
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "get_sanitized_user",
            "file_path": "src/_pytest/tmpdir.py",
            "scratch_pad": "Since the `get_sanitized_user` span is not found, it should be created at the appropriate location in `src/_pytest/tmpdir.py` to define the function and any necessary helper functions or imports associated with it.",
            "instructions": "Create a new span named `get_sanitized_user` within `src/_pytest/tmpdir.py` to define the function. This function will sanitize the username to ensure it does not contain illegal characters for directory names. The function should be placed at the top level of the file, outside of other class definitions."
          },
          "output": null,
          "input_tokens": 7109,
          "output_tokens": 194,
          "retry_message": "Span not found: get_sanitized_user. Available spans: TempdirFactory.getbasetemp, TempdirFactory.mktemp, TempPathFactory, TempdirFactory, TempdirFactory.__init__, TempPathFactory.getbasetemp, TempPathFactory.__init__, tmp_path_factory, _mk_tmp, tmp_path, tmpdir_factory, pytest_configure, docstring",
          "completion_cost": 0.024237
        },
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": null,
            "file_path": "src/_pytest/tmpdir.py",
            "scratch_pad": "It seems there was a misunderstanding. The `get_sanitized_user` function needs to be defined in `src/_pytest/tmpdir.py`, but it was requested as a span, which is not applicable for function definitions. We need to request the modification directly, specifying that we need to define a new function in the file.",
            "instructions": "Define a new function named `get_sanitized_user` in `src/_pytest/tmpdir.py`. This function should sanitize the username returned by `getpass.getuser()` to remove or replace any characters that are not allowed in directory names. Do not wrap this request as a span request but as a direct instruction to add new function code."
          },
          "output": null,
          "input_tokens": 7396,
          "output_tokens": 214,
          "retry_message": "You must either provide an apply_change action or finish.",
          "completion_cost": 0.025398
        }
      ]
    }
  ],
  "initial_message": "tmpdir creation fails when the username contains illegal characters for directory names\n`tmpdir`, `tmpdir_factory` and `tmp_path_factory` rely on `getpass.getuser()` for determining the `basetemp` directory. I found that the user name returned by `getpass.getuser()` may return characters that are not allowed for directory names. This may lead to errors while creating the temporary directory.\r\n\r\nThe situation in which I reproduced this issue was while being logged in through an ssh connection into my Windows 10 x64 Enterprise version (1909) using an OpenSSH_for_Windows_7.7p1 server. In this configuration the command `python -c \"import getpass; print(getpass.getuser())\"` returns my domain username e.g. `contoso\\john_doe` instead of `john_doe` as when logged in regularly using a local session.\r\n\r\nWhen trying to create a temp directory in pytest through e.g. `tmpdir_factory.mktemp('foobar')` this fails with the following error message:\r\n```\r\nself = WindowsPath('C:/Users/john_doe/AppData/Local/Temp/pytest-of-contoso/john_doe')\r\nmode = 511, parents = False, exist_ok = True\r\n\r\n    def mkdir(self, mode=0o777, parents=False, exist_ok=False):\r\n        \"\"\"\r\n        Create a new directory at this given path.\r\n        \"\"\"\r\n        if self._closed:\r\n            self._raise_closed()\r\n        try:\r\n>           self._accessor.mkdir(self, mode)\r\nE           FileNotFoundError: [WinError 3] The system cannot find the path specified: 'C:\\\\Users\\\\john_doe\\\\AppData\\\\Local\\\\Temp\\\\pytest-of-contoso\\\\john_doe'\r\n\r\nC:\\Python38\\lib\\pathlib.py:1266: FileNotFoundError\r\n```\r\n\r\nI could also reproduce this without the complicated ssh/windows setup with pytest 6.2.2 using the following commands from a `cmd`:\r\n```bat\r\necho def test_tmpdir(tmpdir):>test_tmp.py\r\necho   pass>>test_tmp.py\r\nset LOGNAME=contoso\\john_doe\r\npy.test test_tmp.py\r\n```\r\n\r\nThanks for having a look at this!\n"
}