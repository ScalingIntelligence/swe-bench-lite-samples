{
  "info": {
    "duration": 255.34585642814636,
    "submission": "diff --git a/src/_pytest/tmpdir.py b/src/_pytest/tmpdir.py\nindex 29c7e19d7..89a0b37b0 100644\n--- a/src/_pytest/tmpdir.py\n+++ b/src/_pytest/tmpdir.py\n@@ -154,7 +154,8 @@ def get_user() -> Optional[str]:\n     import getpass\n \n     try:\n-        return getpass.getuser()\n+        user = getpass.getuser()\n+        return user.replace('\\\\', '_')\n     except (ImportError, KeyError):\n         return None\n \n",
    "total_cost": 0.15496500000000002,
    "instance_id": "pytest-dev__pytest-8365",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves the creation of temporary directories failing when the username contains illegal characters for directory names. The problem seems to be centered around the `getpass.getuser()` function and its usage in determining the `basetemp` directory. Relevant code can be found in files managing temporary directories and user-related functions in pytest's source code. The specific error message indicates a failure in creating a directory due to incorrect user name handling, suggesting that the `pytest_configure`, `get_user`, and `mktemp` functions might be directly involved. ",
            "search_requests": [
              {
                "query": "temp directory creation using getpass.getuser()",
                "class_names": [],
                "code_snippet": "def get_user()",
                "file_pattern": "**/src/_pytest/**/*.py",
                "function_names": [
                  "pytest_configure",
                  "mktemp"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 141,
                "span_id": "pytest_configure",
                "file_path": "src/_pytest/tmpdir.py"
              }
            ],
            "search_requests": [
              {
                "query": "temp directory creation using getpass.getuser()",
                "class_names": [],
                "code_snippet": "def get_user()",
                "file_pattern": "**/src/_pytest/**/*.py",
                "function_names": [
                  "pytest_configure",
                  "mktemp"
                ]
              }
            ]
          },
          "input_tokens": 3663,
          "output_tokens": 224,
          "retry_message": null,
          "completion_cost": 0.014349
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 141,
            "span_id": "pytest_configure",
            "file_path": "src/_pytest/tmpdir.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue relates to the failure of creating temporary directories due to usernames containing illegal characters for directory names. This issue is particularly evident when using pytest's `tmpdir`, `tmpdir_factory`, and `tmp_path_factory`, which use `getpass.getuser()` to determine the `basetemp` directory. The username may contain characters that are not allowed in directory names, leading to errors during the creation of temporary directories.\n\nAnalyzing the provided search results, the relevant code spans are directly related to the creation and configuration of temporary directories in pytest. Specifically, the `TempPathFactory.from_config` and `TempdirFactory` spans involve the initialization and configuration of temporary directory handlers based on pytest's configuration. This setup directly influences how and where temporary directories are created, making these code spans highly relevant to the reported issue.\n\nThe `pytest_configure` span also plays a crucial role as it is responsible for configuring the pytest environment, including setting up the temporary directory handlers. This initialization process can directly lead to the observed error if the username contains illegal characters for directory names.\n\nThus, the identified code spans are essential for understanding and potentially fixing the issue caused by illegal characters in usernames during the creation of temporary directories in pytest.",
            "identified_spans": [
              {
                "span_ids": [
                  "TempPathFactory.from_config",
                  "TempdirFactory",
                  "pytest_configure"
                ],
                "file_path": "src/_pytest/tmpdir.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 1854,
          "output_tokens": 354,
          "retry_message": null,
          "completion_cost": 0.010872
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The issue involves the creation of temporary directories failing when the username contains illegal characters for directory names. The problem seems to be centered around the `getpass.getuser()` function and its usage in determining the `basetemp` directory. Relevant code can be found in files managing temporary directories and user-related functions in pytest's source code. The specific error message indicates a failure in creating a directory due to incorrect user name handling, suggesting that the `pytest_configure`, `get_user`, and `mktemp` functions might be directly involved.",
            "search_suggestions": "Look into the implementation of `getpass.getuser()` and how it is used in the context of determining the `basetemp` directory in the `TempPathFactory` and `TempdirFactory` classes. Additionally, check if there are specific handling or sanitization steps for user names that should be implemented."
          },
          "output": {
            "message": "Look into the implementation of `getpass.getuser()` and how it is used in the context of determining the `basetemp` directory in the `TempPathFactory` and `TempdirFactory` classes. Additionally, check if there are specific handling or sanitization steps for user names that should be implemented."
          },
          "input_tokens": 2116,
          "output_tokens": 216,
          "retry_message": null,
          "completion_cost": 0.009588000000000001
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look into the implementation of `getpass.getuser()` and how it is used in the context of determining the `basetemp` directory in the `TempPathFactory` and `TempdirFactory` classes. Additionally, check if there are specific handling or sanitization steps for user names that should be implemented.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The initial analysis of the `TempPathFactory` and `TempdirFactory` classes shows that they indeed initialize with a `given_basetemp`, potentially derived from the config option `basetemp`. The `pytest_configure` function sets up these factories by injecting them into the config object. However, the exact method to determine or sanitize the username from `getpass.getuser()` and its integration into these factory setups is not entirely clear from the provided context. It's crucial to identify where and how the username is retrieved and processed to prevent errors due to illegal characters. Further investigation into the `get_user` function and its usage within these factory classes or elsewhere in the codebase is necessary.",
            "search_requests": [
              {
                "query": "sanitization of username or getpass.getuser() usage",
                "class_names": [
                  "TempPathFactory",
                  "TempdirFactory"
                ],
                "code_snippet": "def get_user()",
                "file_pattern": "**/src/_pytest/**/*.py",
                "function_names": [
                  "get_user"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 75,
                "span_id": "TempPathFactory",
                "file_path": "src/_pytest/tmpdir.py"
              },
              {
                "rank": 0,
                "tokens": 54,
                "span_id": "TempdirFactory",
                "file_path": "src/_pytest/tmpdir.py"
              },
              {
                "rank": 0,
                "tokens": 57,
                "span_id": "get_user",
                "file_path": "src/_pytest/tmpdir.py"
              }
            ],
            "search_requests": [
              {
                "query": "sanitization of username or getpass.getuser() usage",
                "class_names": [
                  "TempPathFactory",
                  "TempdirFactory"
                ],
                "code_snippet": "def get_user()",
                "file_pattern": "**/src/_pytest/**/*.py",
                "function_names": [
                  "get_user"
                ]
              }
            ]
          },
          "input_tokens": 4640,
          "output_tokens": 264,
          "retry_message": null,
          "completion_cost": 0.01788
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 75,
            "span_id": "TempPathFactory",
            "file_path": "src/_pytest/tmpdir.py"
          },
          {
            "rank": 0,
            "tokens": 54,
            "span_id": "TempdirFactory",
            "file_path": "src/_pytest/tmpdir.py"
          },
          {
            "rank": 0,
            "tokens": 57,
            "span_id": "get_user",
            "file_path": "src/_pytest/tmpdir.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue revolves around the creation of temporary directories failing when the username contains illegal characters for directory names. This occurs because functions like `getpass.getuser()` can return usernames with characters that are not allowed in directory names, leading to errors when creating the temporary directory. The `TempPathFactory` and `TempdirFactory` classes are responsible for handling the creation of temporary directories and are key to resolving this issue. The `get_user()` function, which uses `getpass.getuser()`, is the source of the problematic usernames. By analyzing the provided code spans, it's clear that the `TempPathFactory` class initializes the base temporary directory based on the given `basetemp` argument, which is derived from the user configuration. This is directly related to the issue at hand. Additionally, the `pytest_configure` function sets up the configuration for temporary directories, making it a crucial part of the context. The `tmpdir_factory` and `tmp_path_factory` fixtures are also important as they provide access to the `TempdirFactory` and `TempPathFactory` objects respectively, which are used to create temporary directories.",
            "identified_spans": [
              {
                "span_ids": [
                  "TempPathFactory",
                  "TempPathFactory.__init__",
                  "TempdirFactory",
                  "TempdirFactory.__init__",
                  "get_user",
                  "pytest_configure",
                  "tmpdir_factory",
                  "tmp_path_factory",
                  "tmp_path"
                ],
                "file_path": "src/_pytest/tmpdir.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3141,
          "output_tokens": 376,
          "retry_message": null,
          "completion_cost": 0.015063
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The analysis shows that TempPathFactory and TempdirFactory classes are initialized with a given_basetemp, potentially derived from the config option basetemp. The pytest_configure function sets these factories up by injecting them into the config object. However, the exact method to determine or sanitize the username from getpass.getuser() and its integration into these factories is not entirely clear. The get_user function is present and uses getpass.getuser(), but its integration into the factory setups needs further inspection. Additional context or code related to how the basetemp is set or modified, possibly using the output of get_user, is needed to fully conclude if the file context is complete.",
            "search_suggestions": "Look for where the basetemp is set or modified, especially in relation to the output of get_user(). Also, check if there are any sanitization steps for the username before it's used to form directory paths."
          },
          "output": {
            "message": "Look for where the basetemp is set or modified, especially in relation to the output of get_user(). Also, check if there are any sanitization steps for the username before it's used to form directory paths."
          },
          "input_tokens": 2392,
          "output_tokens": 227,
          "retry_message": null,
          "completion_cost": 0.010581
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look for where the basetemp is set or modified, especially in relation to the output of get_user(). Also, check if there are any sanitization steps for the username before it's used to form directory paths.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "In the `TempPathFactory` class, the `given_basetemp` is initialized using the `basetemp` option from the config. The `pytest_configure` function sets up the `TempPathFactory` and `TempdirFactory` with this `basetemp`. However, the current context does not show how this `basetemp` is determined or if it involves the output of `get_user()`. Additionally, there seems to be no evidence of sanitization of the username immediately before forming directory paths. This indicates a potential spot for improvement\u2014the username derived from `get_user()` could be sanitized to ensure it does not contain characters that would cause issues when used in file paths.",
            "search_requests": [
              {
                "query": "how is basetemp determined or set in relation to get_user()",
                "class_names": [],
                "code_snippet": "given_basetemp=config.option.basetemp",
                "file_pattern": "**/src/_pytest/**/*.py",
                "function_names": [
                  "pytest_configure",
                  "from_config"
                ]
              },
              {
                "query": "sanitization of username in directory paths",
                "class_names": [
                  "TempPathFactory",
                  "TempdirFactory"
                ],
                "code_snippet": "def get_user()",
                "file_pattern": "**/src/_pytest/**/*.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 89,
                "span_id": "TempPathFactory.from_config",
                "file_path": "src/_pytest/tmpdir.py"
              }
            ],
            "search_requests": [
              {
                "query": "how is basetemp determined or set in relation to get_user()",
                "class_names": [],
                "code_snippet": "given_basetemp=config.option.basetemp",
                "file_pattern": "**/src/_pytest/**/*.py",
                "function_names": [
                  "pytest_configure",
                  "from_config"
                ]
              },
              {
                "query": "sanitization of username in directory paths",
                "class_names": [
                  "TempPathFactory",
                  "TempdirFactory"
                ],
                "code_snippet": "def get_user()",
                "file_pattern": "**/src/_pytest/**/*.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 5215,
          "output_tokens": 363,
          "retry_message": null,
          "completion_cost": 0.021089999999999998
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 89,
            "span_id": "TempPathFactory.from_config",
            "file_path": "src/_pytest/tmpdir.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue pertains to the creation of temporary directories in pytest when the username contains illegal characters for directory names, specifically when `getpass.getuser()` returns a username that includes characters not allowed in pathnames. The provided context and search results focus on the `TempPathFactory` and `TempdirFactory` classes, which are central to the handling of temporary directories in pytest. The initialization and configuration of these classes, along with the use of `getpass.getuser()`, are relevant to addressing the issue. Specifically, the `TempPathFactory.__init__` and `TempPathFactory.from_config` methods are used to set up the temporary path factory based on the configuration, potentially using the `basetemp` option which might include the username obtained from `getpass.getuser()`. The `pytest_configure` function is also significant as it orchestrates the setup of the temporary directory handling during the pytest configuration phase. Given this understanding, the identified spans point to the core functionalities that need to be addressed to handle or sanitize usernames for directory creation purposes.",
            "identified_spans": [
              {
                "span_ids": [
                  "TempPathFactory.__init__",
                  "TempPathFactory.from_config",
                  "pytest_configure"
                ],
                "file_path": "src/_pytest/tmpdir.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3120,
          "output_tokens": 312,
          "retry_message": null,
          "completion_cost": 0.01404
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "In the `TempPathFactory` class, the `given_basetemp` is initialized using the `basetemp` option from the config. The `pytest_configure` function sets up the `TempPathFactory` and `TempdirFactory` with this `basetemp`. However, the current context does not show how this `basetemp` is determined or if it involves the output of `get_user()`. Additionally, there seems to be no evidence of sanitization of the username immediately before forming directory paths. This indicates a potential spot for improvement\u2014the username derived from `get_user()` could be sanitized to ensure it does not contain characters that would cause issues when used in file paths.",
            "search_suggestions": "Look for how the `basetemp` is determined from the configuration and whether it involves the output of `get_user()`. Additionally, ensure that there is sanitization of usernames used in paths to avoid illegal characters."
          },
          "output": {},
          "input_tokens": 2393,
          "output_tokens": 233,
          "retry_message": null,
          "completion_cost": 0.010674000000000001
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "get_user",
            "file_path": "src/_pytest/tmpdir.py",
            "scratch_pad": "The issue pertains to `getpass.getuser()` sometimes returning a username that contains illegal characters for directory names, such as a Windows domain name with a backslash. To fix this issue, we should sanitize the user name before using it to create directories. The function `get_user()` should be updated to replace illegal characters, such as replacing backslashes with underscores.",
            "instructions": "Update the `get_user()` function to sanitize the username by replacing illegal characters for directory names, such as backslashes with underscores."
          },
          "output": {
            "span_id": "get_user",
            "end_line": 159,
            "file_path": "src/_pytest/tmpdir.py",
            "start_line": 151,
            "instructions": "Update the `get_user()` function to sanitize the username by replacing illegal characters for directory names, such as backslashes with underscores."
          },
          "input_tokens": 2644,
          "output_tokens": 167,
          "retry_message": null,
          "completion_cost": 0.010437
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "get_user",
        "end_line": 159,
        "file_path": "src/_pytest/tmpdir.py",
        "max_tokens": 1000,
        "start_line": 151,
        "temperature": 1.6,
        "instructions": "Update the `get_user()` function to sanitize the username by replacing illegal characters for directory names, such as backslashes with underscores.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\ndef get_user() -> Optional[str]:\n    \"\"\"Return the current user name, or None if getuser() does not work\n    in the current environment (see #1010).\"\"\"\n    import getpass\n\n    try:\n        user = getpass.getuser()\n        return user.replace('\\\\', '_')\n    except (ImportError, KeyError):\n        return None\n</replace>"
          },
          "output": {
            "diff": "--- src/_pytest/tmpdir.py\n+++ src/_pytest/tmpdir.py\n@@ -154,7 +154,8 @@\n     import getpass\n \n     try:\n-        return getpass.getuser()\n+        user = getpass.getuser()\n+        return user.replace('\\\\', '_')\n     except (ImportError, KeyError):\n         return None\n \n",
            "message": "Applied the change to src/_pytest/tmpdir.py.",
            "verification_errors": []
          },
          "input_tokens": 2686,
          "output_tokens": 96,
          "retry_message": null,
          "completion_cost": 0.009498000000000001
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- src/_pytest/tmpdir.py\n+++ src/_pytest/tmpdir.py\n@@ -154,7 +154,8 @@\n     import getpass\n \n     try:\n-        return getpass.getuser()\n+        user = getpass.getuser()\n+        return user.replace('\\\\', '_')\n     except (ImportError, KeyError):\n         return None\n \n",
        "model": "deepseek-coder",
        "message": "Applied the change to src/_pytest/tmpdir.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The initial change has been applied correctly, addressing the issue of creating temporary directories with illegal characters in the username by sanitizing the username.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The initial change has been applied correctly. The `get_user()` function now sanitizes the username by replacing backslashes with underscores. This should resolve the issue of creating temporary directories with illegal characters in the username.",
            "instructions": null
          },
          "output": {
            "message": "The initial change has been applied correctly, addressing the issue of creating temporary directories with illegal characters in the username by sanitizing the username."
          },
          "input_tokens": 2961,
          "output_tokens": 134,
          "retry_message": null,
          "completion_cost": 0.010893
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The initial change has been applied correctly, addressing the issue of creating temporary directories with illegal characters in the username by sanitizing the username.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "tmpdir creation fails when the username contains illegal characters for directory names\n`tmpdir`, `tmpdir_factory` and `tmp_path_factory` rely on `getpass.getuser()` for determining the `basetemp` directory. I found that the user name returned by `getpass.getuser()` may return characters that are not allowed for directory names. This may lead to errors while creating the temporary directory.\r\n\r\nThe situation in which I reproduced this issue was while being logged in through an ssh connection into my Windows 10 x64 Enterprise version (1909) using an OpenSSH_for_Windows_7.7p1 server. In this configuration the command `python -c \"import getpass; print(getpass.getuser())\"` returns my domain username e.g. `contoso\\john_doe` instead of `john_doe` as when logged in regularly using a local session.\r\n\r\nWhen trying to create a temp directory in pytest through e.g. `tmpdir_factory.mktemp('foobar')` this fails with the following error message:\r\n```\r\nself = WindowsPath('C:/Users/john_doe/AppData/Local/Temp/pytest-of-contoso/john_doe')\r\nmode = 511, parents = False, exist_ok = True\r\n\r\n    def mkdir(self, mode=0o777, parents=False, exist_ok=False):\r\n        \"\"\"\r\n        Create a new directory at this given path.\r\n        \"\"\"\r\n        if self._closed:\r\n            self._raise_closed()\r\n        try:\r\n>           self._accessor.mkdir(self, mode)\r\nE           FileNotFoundError: [WinError 3] The system cannot find the path specified: 'C:\\\\Users\\\\john_doe\\\\AppData\\\\Local\\\\Temp\\\\pytest-of-contoso\\\\john_doe'\r\n\r\nC:\\Python38\\lib\\pathlib.py:1266: FileNotFoundError\r\n```\r\n\r\nI could also reproduce this without the complicated ssh/windows setup with pytest 6.2.2 using the following commands from a `cmd`:\r\n```bat\r\necho def test_tmpdir(tmpdir):>test_tmp.py\r\necho   pass>>test_tmp.py\r\nset LOGNAME=contoso\\john_doe\r\npy.test test_tmp.py\r\n```\r\n\r\nThanks for having a look at this!\n"
}