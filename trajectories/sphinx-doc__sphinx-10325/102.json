{
  "info": {
    "duration": 186.3025062084198,
    "submission": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 62631f7ff..c5f7a19bd 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -319,7 +319,8 @@ class Documenter:\n     titles_allowed = False\n \n     option_spec: OptionSpec = {\n-        'noindex': bool_option\n+        'noindex': bool_option,\n+        'inherited-members': inherited_members_option\n     }\n \n     def get_attr(self, obj: Any, name: str, *defargs: Any) -> Any:\n",
    "total_cost": 0.14958000000000002,
    "instance_id": "sphinx-doc__sphinx-10325",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue pertains to enhancing the 'inherited-members' option in Sphinx autodoc to support multiple classes for filtering inherited members. This involves modifying or extending the functionality in the ModuleDocumenter and ClassDocumenter classes, particularly the methods related to member filtering and documentation. The search should focus on these classes and related methods.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "ModuleDocumenter",
                  "ClassDocumenter"
                ],
                "code_snippet": null,
                "file_pattern": "sphinx/ext/autodoc/__init__.py",
                "function_names": [
                  "get_object_members",
                  "filter_members",
                  "document_members"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 180,
                "span_id": "ModuleDocumenter.get_object_members",
                "file_path": "sphinx/ext/autodoc/__init__.py"
              },
              {
                "rank": 0,
                "tokens": 153,
                "span_id": "ClassDocumenter.get_object_members",
                "file_path": "sphinx/ext/autodoc/__init__.py"
              },
              {
                "rank": 0,
                "tokens": 29,
                "span_id": "ClassDocumenter.document_members",
                "file_path": "sphinx/ext/autodoc/__init__.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "ModuleDocumenter",
                  "ClassDocumenter"
                ],
                "code_snippet": null,
                "file_pattern": "sphinx/ext/autodoc/__init__.py",
                "function_names": [
                  "get_object_members",
                  "filter_members",
                  "document_members"
                ]
              }
            ]
          },
          "input_tokens": 3420,
          "output_tokens": 164,
          "retry_message": null,
          "completion_cost": 0.01272
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 180,
            "span_id": "ModuleDocumenter.get_object_members",
            "file_path": "sphinx/ext/autodoc/__init__.py"
          },
          {
            "rank": 0,
            "tokens": 153,
            "span_id": "ClassDocumenter.get_object_members",
            "file_path": "sphinx/ext/autodoc/__init__.py"
          },
          {
            "rank": 0,
            "tokens": 29,
            "span_id": "ClassDocumenter.document_members",
            "file_path": "sphinx/ext/autodoc/__init__.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue requires enhancing the :inherited-members: option in the automodule directive to support a list of classes to be ignored when documenting inherited members. Upon reviewing the search results, the relevant code spans are found in the `ModuleDocumenter` and `ClassDocumenter` classes within the `sphinx/ext/autodoc/__init__.py` file. Specifically, the `ModuleDocumenter.get_object_members` and `ClassDocumenter.get_object_members` methods are responsible for handling the members of modules and classes, respectively. These methods currently do not support filtering based on a list of classes to ignore during the documentation of inherited members. Therefore, these are the areas where modifications are likely necessary to implement the desired functionality of ignoring specific inherited classes as specified in the :inherited-members: option. Nonetheless, the search seems complete as these spans encapsulate critical functionalities of module and class documentation where the core changes are likely to be implemented.",
            "identified_spans": [
              {
                "span_ids": [
                  "ModuleDocumenter",
                  "ModuleDocumenter.__init__",
                  "ModuleDocumenter.get_object_members",
                  "ClassDocumenter",
                  "ClassDocumenter.__init__",
                  "ClassDocumenter.get_object_members",
                  "ClassDocumenter.document_members"
                ],
                "file_path": "sphinx/ext/autodoc/__init__.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 2126,
          "output_tokens": 333,
          "retry_message": null,
          "completion_cost": 0.011373000000000001
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The issue pertains to enhancing the 'inherited-members' option in Sphinx autodoc to support multiple classes for filtering inherited members. This involves modifying or extending the functionality in the ModuleDocumenter and ClassDocumenter classes, particularly the methods related to member filtering and documentation. The search should focus on these classes and related methods. The provided file context includes the relevant parts of the Sphinx autodoc extension, specifically the ModuleDocumenter and ClassDocumenter classes, which are central to the feature request. The methods within these classes, such as 'get_object_members' and the handling of options like 'inherited-members', are directly related to the functionality to be enhanced. It appears that the necessary codebase context for addressing the issue is provided.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 3195,
          "output_tokens": 188,
          "retry_message": null,
          "completion_cost": 0.012405
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "Documenter",
            "file_path": "sphinx/ext/autodoc/__init__.py",
            "scratch_pad": "The current implementation of `inherited-members` supports only a single class or `None`. To address the issue, we need to modify `inherited_members_option` to accept a list of classes. Additionally, we need to update the relevant documenters to process this list appropriately.",
            "instructions": "Update the `inherited_members_option` to accept a list of classes and modify the relevant documenters to handle this list correctly."
          },
          "output": {
            "span_id": "Documenter",
            "file_path": "sphinx/ext/autodoc/__init__.py",
            "instructions": "Update the `inherited_members_option` to accept a list of classes and modify the relevant documenters to handle this list correctly."
          },
          "input_tokens": 4591,
          "output_tokens": 145,
          "retry_message": null,
          "completion_cost": 0.015948
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "Documenter",
        "end_line": null,
        "file_path": "sphinx/ext/autodoc/__init__.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Update the `inherited_members_option` to accept a list of classes and modify the relevant documenters to handle this list correctly.\n\nThe `Documenter` class contains the `option_spec` attribute which defines the options that can be used with the autodoc directive. The instruction is to update the `inherited_members_option` to accept a list of classes, which likely means modifying the `option_spec` dictionary to include this new option. The relevant lines are from line 321 where the `option_spec` dictionary is defined up to line 323 where its current definition ends.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 323,
            "start_line": 321,
            "scratch_pad": "The `Documenter` class contains the `option_spec` attribute which defines the options that can be used with the autodoc directive. The instruction is to update the `inherited_members_option` to accept a list of classes, which likely means modifying the `option_spec` dictionary to include this new option. The relevant lines are from line 321 where the `option_spec` dictionary is defined up to line 323 where its current definition ends."
          },
          "output": {
            "span_id": "Documenter",
            "end_line": 327,
            "file_path": "sphinx/ext/autodoc/__init__.py",
            "start_line": 317,
            "instructions": "Update the `inherited_members_option` to accept a list of classes and modify the relevant documenters to handle this list correctly.\n\nThe `Documenter` class contains the `option_spec` attribute which defines the options that can be used with the autodoc directive. The instruction is to update the `inherited_members_option` to accept a list of classes, which likely means modifying the `option_spec` dictionary to include this new option. The relevant lines are from line 321 where the `option_spec` dictionary is defined up to line 323 where its current definition ends."
          },
          "input_tokens": 1886,
          "output_tokens": 137,
          "retry_message": null,
          "completion_cost": 0.007712999999999999
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "Documenter",
        "end_line": 327,
        "file_path": "sphinx/ext/autodoc/__init__.py",
        "max_tokens": 1000,
        "start_line": 317,
        "temperature": 1.6,
        "instructions": "Update the `inherited_members_option` to accept a list of classes and modify the relevant documenters to handle this list correctly.\n\nThe `Documenter` class contains the `option_spec` attribute which defines the options that can be used with the autodoc directive. The instruction is to update the `inherited_members_option` to accept a list of classes, which likely means modifying the `option_spec` dictionary to include this new option. The relevant lines are from line 321 where the `option_spec` dictionary is defined up to line 323 where its current definition ends.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\n    member_order = 0\n    #: true if the generated content may contain titles\n    titles_allowed = False\n\n    option_spec: OptionSpec = {\n        'noindex': bool_option,\n        'inherited-members': inherited_members_option\n    }\n\n    def get_attr(self, obj: Any, name: str, *defargs: Any) -> Any:\n        \"\"\"getattr() override for types such as Zope interfaces.\"\"\"\n        return autodoc_attrgetter(self.env.app, obj, name, *defargs)\n</replace>"
          },
          "output": {
            "diff": "--- sphinx/ext/autodoc/__init__.py\n+++ sphinx/ext/autodoc/__init__.py\n@@ -319,7 +319,8 @@\n     titles_allowed = False\n \n     option_spec: OptionSpec = {\n-        'noindex': bool_option\n+        'noindex': bool_option,\n+        'inherited-members': inherited_members_option\n     }\n \n     def get_attr(self, obj: Any, name: str, *defargs: Any) -> Any:\n",
            "message": "Applied the change to sphinx/ext/autodoc/__init__.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 4819,
          "output_tokens": 137,
          "retry_message": null,
          "completion_cost": 0.016512000000000002
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sphinx/ext/autodoc/__init__.py\n+++ sphinx/ext/autodoc/__init__.py\n@@ -319,7 +319,8 @@\n     titles_allowed = False\n \n     option_spec: OptionSpec = {\n-        'noindex': bool_option\n+        'noindex': bool_option,\n+        'inherited-members': inherited_members_option\n     }\n \n     def get_attr(self, obj: Any, name: str, *defargs: Any) -> Any:\n",
        "model": "deepseek-coder",
        "message": "Applied the change to sphinx/ext/autodoc/__init__.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "inherited_members_option",
            "file_path": "sphinx/ext/autodoc/__init__.py",
            "scratch_pad": "The initial change to the Documenter class has been applied, but the inherited_members_option function still needs to be updated to handle a list of classes. This involves modifying the function to check if the inherited-members option is a list and then processing each item in the list accordingly.",
            "instructions": "Update the inherited_members_option function to accept and process a list of classes."
          },
          "output": null,
          "input_tokens": 4939,
          "output_tokens": 152,
          "retry_message": "Span not found: inherited_members_option. Available spans: ModuleDocumenter.__init__, ModuleDocumenter.get_object_members, ClassDocumenter.__init__, ClassDocumenter.get_object_members, ClassDocumenter.document_members, ModuleDocumenter, ClassDocumenter, merge_members_option, setup, Documenter, ExceptionDocumenter, Documenter.__init__, AttributeDocumenter, NewTypeAttributeDocumenter, DecoratorDocumenter, FunctionDocumenter, PropertyDocumenter, MethodDocumenter, migrate_autodoc_member_order, NewTypeDataDocumenter, DataDocumenter, ModuleLevelDocumenter, ClassLevelDocumenter",
          "completion_cost": 0.017097
        },
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "ModuleDocumenter",
            "file_path": "sphinx/ext/autodoc/__init__.py",
            "scratch_pad": "It appears that the 'inherited_members_option' function was not included in the provided file context. Since the function is crucial for handling the inherited-members option, we need to define it. The function should parse the option to determine if it's a single class or a list of classes, and then handle the classes accordingly.",
            "instructions": "Define the 'inherited_members_option' function to handle parsing of the inherited-members option, which may be a single class or a list of classes."
          },
          "output": {
            "span_id": "ModuleDocumenter",
            "file_path": "sphinx/ext/autodoc/__init__.py",
            "instructions": "Define the 'inherited_members_option' function to handle parsing of the inherited-members option, which may be a single class or a list of classes."
          },
          "input_tokens": 5235,
          "output_tokens": 175,
          "retry_message": null,
          "completion_cost": 0.01833
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "ModuleDocumenter",
        "end_line": null,
        "file_path": "sphinx/ext/autodoc/__init__.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Define the 'inherited_members_option' function to handle parsing of the inherited-members option, which may be a single class or a list of classes.\n\nThe 'inherited_members_option' function should be defined and used in the option_spec dictionary. The necessary lines to modify are those that define the option_spec dictionary.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 1002,
            "start_line": 993,
            "scratch_pad": "The 'inherited_members_option' function should be defined and used in the option_spec dictionary. The necessary lines to modify are those that define the option_spec dictionary."
          },
          "output": {
            "span_id": "ModuleDocumenter",
            "end_line": 1002,
            "file_path": "sphinx/ext/autodoc/__init__.py",
            "start_line": 993,
            "instructions": "Define the 'inherited_members_option' function to handle parsing of the inherited-members option, which may be a single class or a list of classes.\n\nThe 'inherited_members_option' function should be defined and used in the option_spec dictionary. The necessary lines to modify are those that define the option_spec dictionary."
          },
          "input_tokens": 1175,
          "output_tokens": 76,
          "retry_message": null,
          "completion_cost": 0.004665
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "ModuleDocumenter",
        "end_line": 1002,
        "file_path": "sphinx/ext/autodoc/__init__.py",
        "max_tokens": 1000,
        "start_line": 993,
        "temperature": 1.6,
        "instructions": "Define the 'inherited_members_option' function to handle parsing of the inherited-members option, which may be a single class or a list of classes.\n\nThe 'inherited_members_option' function should be defined and used in the option_spec dictionary. The necessary lines to modify are those that define the option_spec dictionary.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```\n<replace>\n    option_spec: OptionSpec = {\n        'members': members_option, 'undoc-members': bool_option,\n        'noindex': bool_option, 'inherited-members': inherited_members_option,\n        'show-inheritance': bool_option, 'synopsis': identity,\n        'platform': identity, 'deprecated': bool_option,\n        'member-order': member_order_option, 'exclude-members': exclude_members_option,\n        'private-members': members_option, 'special-members': members_option,\n        'imported-members': bool_option, 'ignore-module-all': bool_option,\n        'no-value': bool_option,\n    }\n</replace>"
          },
          "output": null,
          "input_tokens": 4822,
          "output_tokens": 170,
          "retry_message": "The code in the replace tag is the same as in the search. Use the reject function if you can't do any changes and want to reject the instructions.",
          "completion_cost": 0.017016
        },
        {
          "action": {
            "content": "<reject>\nThe provided task does not specify how the 'inherited_members_option' function should be implemented or modified to support a list of classes. Without this information, I cannot implement the requested change.\n</reject>"
          },
          "output": {
            "message": "\nThe provided task does not specify how the 'inherited_members_option' function should be implemented or modified to support a list of classes. Without this information, I cannot implement the requested change.\n"
          },
          "input_tokens": 5032,
          "output_tokens": 47,
          "retry_message": null,
          "completion_cost": 0.015801
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "\nThe provided task does not specify how the 'inherited_members_option' function should be implemented or modified to support a list of classes. Without this information, I cannot implement the requested change.\n",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "inherited_members_option",
            "file_path": "sphinx/ext/autodoc/__init__.py",
            "scratch_pad": "The 'inherited_members_option' function needs to be defined to parse the 'inherited-members' option. This function should be able to handle both a single class and a list of classes. It should check if the option is a string or a list, parse accordingly, and return the appropriate structure. This will enable the documenters to properly ignore the specified base classes when documenting inherited members.",
            "instructions": "Define the 'inherited_members_option' function to handle parsing of the 'inherited-members' option, which may be a single class or a list of classes. Parse the input to determine if it's a single class or a list, handle the parsing appropriately, and return the result."
          },
          "output": null,
          "input_tokens": 5161,
          "output_tokens": 217,
          "retry_message": "Span not found: inherited_members_option. Available spans: ModuleDocumenter.__init__, ModuleDocumenter.get_object_members, ClassDocumenter.__init__, ClassDocumenter.get_object_members, ClassDocumenter.document_members, ModuleDocumenter, ClassDocumenter, merge_members_option, setup, Documenter, ExceptionDocumenter, Documenter.__init__, AttributeDocumenter, NewTypeAttributeDocumenter, DecoratorDocumenter, FunctionDocumenter, PropertyDocumenter, MethodDocumenter, migrate_autodoc_member_order, NewTypeDataDocumenter, DataDocumenter, ModuleLevelDocumenter, ClassLevelDocumenter",
          "completion_cost": 0.018738
        },
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "inherited_members_option",
            "file_path": "sphinx/ext/autodoc/__init__.py",
            "scratch_pad": "Since the 'inherited_members_option' function does not currently exist in the file context, we need to add it to the appropriate location within 'sphinx/ext/autodoc/__init__.py'. This function will be responsible for parsing the 'inherited-members' option to support either a single class or a list of classes.",
            "instructions": "Add the 'inherited_members_option' function to 'sphinx/ext/autodoc/__init__.py'. This function should be designed to parse the 'inherited-members' option, determining if it is a single class or a list of classes, and handle these cases appropriately."
          },
          "output": null,
          "input_tokens": 5522,
          "output_tokens": 203,
          "retry_message": "Span not found: inherited_members_option. Available spans: ModuleDocumenter.__init__, ModuleDocumenter.get_object_members, ClassDocumenter.__init__, ClassDocumenter.get_object_members, ClassDocumenter.document_members, ModuleDocumenter, ClassDocumenter, merge_members_option, setup, Documenter, ExceptionDocumenter, Documenter.__init__, AttributeDocumenter, NewTypeAttributeDocumenter, DecoratorDocumenter, FunctionDocumenter, PropertyDocumenter, MethodDocumenter, migrate_autodoc_member_order, NewTypeDataDocumenter, DataDocumenter, ModuleLevelDocumenter, ClassLevelDocumenter",
          "completion_cost": 0.019611
        },
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "module_level",
            "file_path": "sphinx/ext/autodoc/__init__.py",
            "scratch_pad": "Given that 'inherited_members_option' does not currently exist in the file context and is referenced in multiple places, we need to add this function in a location that makes it accessible to all relevant parts of the module. Since it involves an option specification for various documenters, it would be sensible to add it near the definition of 'Documenter' or at the module level to ensure it can be used throughout the module as needed.",
            "instructions": "Add the 'inherited_members_option' function at the module level in 'sphinx/ext/autodoc/__init__.py'. Ensure this function is defined to parse and handle the 'inherited-members' option appropriately, allowing for a single class or a list of classes."
          },
          "output": null,
          "input_tokens": 5869,
          "output_tokens": 220,
          "retry_message": "Span not found: module_level. Available spans: ModuleDocumenter.__init__, ModuleDocumenter.get_object_members, ClassDocumenter.__init__, ClassDocumenter.get_object_members, ClassDocumenter.document_members, ModuleDocumenter, ClassDocumenter, merge_members_option, setup, Documenter, ExceptionDocumenter, Documenter.__init__, AttributeDocumenter, NewTypeAttributeDocumenter, DecoratorDocumenter, FunctionDocumenter, PropertyDocumenter, MethodDocumenter, migrate_autodoc_member_order, NewTypeDataDocumenter, DataDocumenter, ModuleLevelDocumenter, ClassLevelDocumenter",
          "completion_cost": 0.020907000000000002
        }
      ]
    }
  ],
  "initial_message": "inherited-members should support more than one class\n**Is your feature request related to a problem? Please describe.**\r\nI have two situations:\r\n- A class inherits from multiple other classes. I want to document members from some of the base classes but ignore some of the base classes\r\n- A module contains several class definitions that inherit from different classes that should all be ignored (e.g., classes that inherit from list or set or tuple). I want to ignore members from list, set, and tuple while documenting all other inherited members in classes in the module.\r\n\r\n**Describe the solution you'd like**\r\nThe :inherited-members: option to automodule should accept a list of classes. If any of these classes are encountered as base classes when instantiating autoclass documentation, they should be ignored.\r\n\r\n**Describe alternatives you've considered**\r\nThe alternative is to not use automodule, but instead manually enumerate several autoclass blocks for a module. This only addresses the second bullet in the problem description and not the first. It is also tedious for modules containing many class definitions.\r\n\r\n\n"
}