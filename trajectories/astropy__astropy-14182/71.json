{
  "info": {
    "duration": 226.8368375301361,
    "submission": "",
    "total_cost": 0.19838400000000003,
    "instance_id": "astropy__astropy-14182",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue appears to be that the 'ascii.rst' format of the table does not support the 'header_rows' parameter, leading to a TypeError when attempting to write the table with header rows specified. To resolve this, it is necessary to investigate and potentially modify the RST class and related functions in the astropy/io/ascii/rst.py file to support the 'header_rows' parameter. Additionally, it would be beneficial to check the write functions in other relevant files such as astropy/io/ascii/fixedwidth.py and astropy/io/ascii/ui.py to ensure consistency and proper handling of the 'header_rows' parameter.",
            "search_requests": [
              {
                "query": "ascii.rst format header_rows",
                "class_names": [
                  "RST"
                ],
                "code_snippet": "tbl.write(sys.stdout, format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])",
                "file_pattern": "**/astropy/io/ascii/**/*.py",
                "function_names": [
                  "write"
                ]
              }
            ]
          },
          "output": null,
          "input_tokens": 3532,
          "output_tokens": 266,
          "retry_message": "\n\nUnfortunately, I didn\u2019t find any relevant results.",
          "completion_cost": 0.014586
        },
        {
          "action": {
            "complete": false,
            "scratch_pad": "Given the initial search did not yield any relevant results, it suggests that the implementation of the 'header_rows' feature may not exist in the current codebase or is not straightforwardly referenced in the specified files. The next step is to widen the search to include the broader 'ascii' module and the core functionalities that handle table writing operations. Additionally, exploring related classes and functions which might influence the output of ASCII formats, such as those handling fixed-width formats or basic data outputs, may provide clues or necessary modifications to support the 'header_rows' parameter.",
            "search_requests": [
              {
                "query": "support for handling additional table headers",
                "class_names": [
                  "FixedWidthHeader",
                  "FixedWidthData",
                  "FixedWidth",
                  "BasicData",
                  "Basic",
                  "BaseHeader",
                  "BaseReader"
                ],
                "code_snippet": null,
                "file_pattern": "**/astropy/io/ascii/**/*.py",
                "function_names": [
                  "write",
                  "get_fixedwidth_params"
                ]
              },
              {
                "query": "implementation of ASCII format writing, considering headers",
                "class_names": [
                  "RST",
                  "FixedWidth",
                  "FastBasic",
                  "FastNoHeader",
                  "FastCommentedHeader",
                  "FastRdb"
                ],
                "code_snippet": "def write(self, table):",
                "file_pattern": "**/astropy/io/ascii/**/*.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 320,
                "span_id": "FixedWidthData.write",
                "file_path": "astropy/io/ascii/fixedwidth.py"
              },
              {
                "rank": 0,
                "tokens": 41,
                "span_id": "FixedWidthData",
                "file_path": "astropy/io/ascii/fixedwidth.py"
              },
              {
                "rank": 3,
                "tokens": 88,
                "span_id": "FixedWidthHeader",
                "file_path": "astropy/io/ascii/fixedwidth.py"
              },
              {
                "rank": 3,
                "tokens": 49,
                "span_id": "FixedWidthHeader.get_line",
                "file_path": "astropy/io/ascii/fixedwidth.py"
              },
              {
                "rank": 4,
                "tokens": 212,
                "span_id": "FixedWidth",
                "file_path": "astropy/io/ascii/fixedwidth.py"
              },
              {
                "rank": 15,
                "tokens": 35,
                "span_id": "FixedWidthHeader.write",
                "file_path": "astropy/io/ascii/fixedwidth.py"
              },
              {
                "rank": 15,
                "tokens": 565,
                "span_id": "FixedWidthHeader.get_fixedwidth_params",
                "file_path": "astropy/io/ascii/fixedwidth.py"
              },
              {
                "rank": 6,
                "tokens": 111,
                "span_id": "BaseHeader",
                "file_path": "astropy/io/ascii/core.py"
              },
              {
                "rank": 6,
                "tokens": 22,
                "span_id": "BaseHeader._set_cols_from_names",
                "file_path": "astropy/io/ascii/core.py"
              },
              {
                "rank": 9,
                "tokens": 40,
                "span_id": "IpacData.write",
                "file_path": "astropy/io/ascii/ipac.py"
              },
              {
                "rank": 10,
                "tokens": 62,
                "span_id": "BasicData",
                "file_path": "astropy/io/ascii/basic.py"
              },
              {
                "rank": 12,
                "tokens": 44,
                "span_id": "SimpleRSTHeader.get_fixedwidth_params",
                "file_path": "astropy/io/ascii/rst.py"
              },
              {
                "rank": 13,
                "tokens": 44,
                "span_id": "FastCommentedHeader.write",
                "file_path": "astropy/io/ascii/fastbasic.py"
              }
            ],
            "search_requests": [
              {
                "query": "support for handling additional table headers",
                "class_names": [
                  "FixedWidthHeader",
                  "FixedWidthData",
                  "FixedWidth",
                  "BasicData",
                  "Basic",
                  "BaseHeader",
                  "BaseReader"
                ],
                "code_snippet": null,
                "file_pattern": "**/astropy/io/ascii/**/*.py",
                "function_names": [
                  "write",
                  "get_fixedwidth_params"
                ]
              },
              {
                "query": "implementation of ASCII format writing, considering headers",
                "class_names": [
                  "RST",
                  "FixedWidth",
                  "FastBasic",
                  "FastNoHeader",
                  "FastCommentedHeader",
                  "FastRdb"
                ],
                "code_snippet": "def write(self, table):",
                "file_pattern": "**/astropy/io/ascii/**/*.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 3828,
          "output_tokens": 372,
          "retry_message": null,
          "completion_cost": 0.017064000000000003
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 320,
            "span_id": "FixedWidthData.write",
            "file_path": "astropy/io/ascii/fixedwidth.py"
          },
          {
            "rank": 0,
            "tokens": 41,
            "span_id": "FixedWidthData",
            "file_path": "astropy/io/ascii/fixedwidth.py"
          },
          {
            "rank": 3,
            "tokens": 88,
            "span_id": "FixedWidthHeader",
            "file_path": "astropy/io/ascii/fixedwidth.py"
          },
          {
            "rank": 3,
            "tokens": 49,
            "span_id": "FixedWidthHeader.get_line",
            "file_path": "astropy/io/ascii/fixedwidth.py"
          },
          {
            "rank": 4,
            "tokens": 212,
            "span_id": "FixedWidth",
            "file_path": "astropy/io/ascii/fixedwidth.py"
          },
          {
            "rank": 15,
            "tokens": 35,
            "span_id": "FixedWidthHeader.write",
            "file_path": "astropy/io/ascii/fixedwidth.py"
          },
          {
            "rank": 15,
            "tokens": 565,
            "span_id": "FixedWidthHeader.get_fixedwidth_params",
            "file_path": "astropy/io/ascii/fixedwidth.py"
          },
          {
            "rank": 6,
            "tokens": 111,
            "span_id": "BaseHeader",
            "file_path": "astropy/io/ascii/core.py"
          },
          {
            "rank": 6,
            "tokens": 22,
            "span_id": "BaseHeader._set_cols_from_names",
            "file_path": "astropy/io/ascii/core.py"
          },
          {
            "rank": 9,
            "tokens": 40,
            "span_id": "IpacData.write",
            "file_path": "astropy/io/ascii/ipac.py"
          },
          {
            "rank": 10,
            "tokens": 62,
            "span_id": "BasicData",
            "file_path": "astropy/io/ascii/basic.py"
          },
          {
            "rank": 12,
            "tokens": 44,
            "span_id": "SimpleRSTHeader.get_fixedwidth_params",
            "file_path": "astropy/io/ascii/rst.py"
          },
          {
            "rank": 13,
            "tokens": 44,
            "span_id": "FastCommentedHeader.write",
            "file_path": "astropy/io/ascii/fastbasic.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves adding support for header rows in the RestructuredText (RST) output format for an `astropy.table.QTable`. The issue indicates that the current implementation raises a `TypeError` when the `header_rows` keyword argument is used with the `ascii.rst` format. This suggests that the RST writer does not currently accept the `header_rows` parameter. By examining the search results, it's apparent that the `ascii.rst` format is not directly represented in the provided code spans, which primarily focus on fixed-width formats and other ASCII formats. However, the relevant code spans for `FixedWidth` and its related classes (`FixedWidthHeader`, `FixedWidthData`, etc.) demonstrate how header rows are handled and written. These classes could provide a model for how to extend support for `header_rows` to the RST format. The `FixedWidth` class constructor (__init__) and the `FixedWidthData.write` method are particularly relevant as they deal with column headers and data writing, including handling optional `header_rows`. To support the feature requested in the issue, the RST writer would need to be extended to accept and process the `header_rows` parameter similarly to how it's done in the fixed-width format classes. The provided code spans do not directly include the RST-specific implementation, but they offer valuable insights into how the feature might be implemented by adapting the logic found in the `FixedWidth` class and its methods to a new or existing `RST` class.",
            "identified_spans": [
              {
                "span_ids": [
                  "FixedWidthSplitter",
                  "FixedWidthHeaderSplitter",
                  "FixedWidthHeader",
                  "FixedWidthHeader.get_line",
                  "FixedWidthHeader.get_fixedwidth_params",
                  "FixedWidthHeader.write",
                  "FixedWidthData",
                  "FixedWidthData.write",
                  "FixedWidth",
                  "FixedWidth.__init__"
                ],
                "file_path": "astropy/io/ascii/fixedwidth.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4607,
          "output_tokens": 475,
          "retry_message": null,
          "completion_cost": 0.020946
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The file context provided focuses on the 'fixed_width' class and its related components within the 'ascii' module, specifically addressing header and data writing for fixed-width formats. While it shows how 'header_rows' is handled within these classes, notably in the 'FixedWidth' and 'FixedWidthData' classes, there is no direct mention or implementation of 'header_rows' for the RestructuredText (RST) output, which is the focus of the issue. This suggests that the implementation for the RST output is either not present or not included in the provided context. Further investigation is needed in the broader context of the 'ascii.rst' writer or related modules handling RST output.",
            "search_suggestions": "Explore the 'ascii.rst' writer within the 'astropy.io.ascii' module or related classes that handle the RestructuredText output. Additionally, look into how other similar formats handle header rows or additional metadata, as this could offer insight into how 'header_rows' could be integrated into the RST output."
          },
          "output": {
            "message": "Explore the 'ascii.rst' writer within the 'astropy.io.ascii' module or related classes that handle the RestructuredText output. Additionally, look into how other similar formats handle header rows or additional metadata, as this could offer insight into how 'header_rows' could be integrated into the RST output."
          },
          "input_tokens": 3177,
          "output_tokens": 251,
          "retry_message": null,
          "completion_cost": 0.013295999999999999
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Explore the 'ascii.rst' writer within the 'astropy.io.ascii' module or related classes that handle the RestructuredText output. Additionally, look into how other similar formats handle header rows or additional metadata, as this could offer insight into how 'header_rows' could be integrated into the RST output.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "scratch_pad": "The current file context provides insight into how the 'FixedWidth' class in the 'astropy.io.ascii' module handles table writing, including the potential integration of 'header_rows'. This suggests that similar functionality could be added to the 'RST' class to handle 'header_rows' for RestructuredText output. Additionally, examining how 'header_rows' or similar parameters are handled in other ASCII formats like 'fixed_width' can guide modifications needed in the 'RST' class. Thus, the next search focuses on the 'RST' class and related files within the 'astropy.io.ascii' module to look for spots where these modifications could be made.",
            "search_requests": [
              {
                "query": "implementation of RestructuredText output handling in the RST class",
                "class_names": [
                  "RST"
                ],
                "code_snippet": null,
                "file_pattern": "**/astropy/io/ascii/rst.py",
                "function_names": [
                  "write"
                ]
              }
            ]
          },
          "output": {
            "message": "The current file context provides insight into how the 'FixedWidth' class in the 'astropy.io.ascii' module handles table writing, including the potential integration of 'header_rows'. This suggests that similar functionality could be added to the 'RST' class to handle 'header_rows' for RestructuredText output. Additionally, examining how 'header_rows' or similar parameters are handled in other ASCII formats like 'fixed_width' can guide modifications needed in the 'RST' class. Thus, the next search focuses on the 'RST' class and related files within the 'astropy.io.ascii' module to look for spots where these modifications could be made."
          },
          "input_tokens": 5620,
          "output_tokens": 251,
          "retry_message": null,
          "completion_cost": 0.020625
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "The current file context provides insight into how the 'FixedWidth' class in the 'astropy.io.ascii' module handles table writing, including the potential integration of 'header_rows'. This suggests that similar functionality could be added to the 'RST' class to handle 'header_rows' for RestructuredText output. Additionally, examining how 'header_rows' or similar parameters are handled in other ASCII formats like 'fixed_width' can guide modifications needed in the 'RST' class. Thus, the next search focuses on the 'RST' class and related files within the 'astropy.io.ascii' module to look for spots where these modifications could be made.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "__init__",
            "file_path": "astropy/io/ascii/rst.py",
            "scratch_pad": "The issue requires adding support for 'header_rows' in the RST format within the astropy.io.ascii module. The provided file context for 'FixedWidth' provides a model for how 'header_rows' is handled in the 'fixed_width' format. We should mimic this approach in the 'RST' class to achieve similar functionality. We begin by updating the '__init__' method of the 'RST' class to accept and store the 'header_rows' argument.",
            "instructions": "Update the '__init__' method of the 'RST' class to accept the 'header_rows' argument and store it for later use."
          },
          "output": null,
          "input_tokens": 3971,
          "output_tokens": 192,
          "retry_message": "File astropy/io/ascii/rst.py is not found in the file context. You can only request changes to files that are in file context:\n * astropy/io/ascii/fixedwidth.py\n",
          "completion_cost": 0.014793
        },
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "__init__",
            "file_path": "astropy/io/ascii/fixedwidth.py",
            "scratch_pad": "Since the 'RST' file is not provided in the file context, I cannot directly modify it to add support for the 'header_rows' argument. However, we can examine the 'FixedWidth' class in 'astropy/io/ascii/fixedwidth.py' to see how 'header_rows' is handled and use that as a guide for what needs to be implemented in the 'RST' class if it were available.",
            "instructions": "Review the 'FixedWidth' class in 'astropy/io/ascii/fixedwidth.py' to understand how 'header_rows' is integrated and prepared for implementation. Focus on how 'header_rows' is integrated into the class's methods such as 'write' and '__init__'."
          },
          "output": null,
          "input_tokens": 4228,
          "output_tokens": 228,
          "retry_message": "Span not found: __init__. Available spans: FixedWidthHeader.get_fixedwidth_params, FixedWidthData, FixedWidthHeader, FixedWidthSplitter, FixedWidthData.write, FixedWidthHeader.write, FixedWidth.__init__, FixedWidthHeaderSplitter, FixedWidthHeader.get_line, FixedWidth, FixedWidthNoHeaderData, FixedWidthTwoLineData, FixedWidthNoHeaderHeader, FixedWidthTwoLineHeader, FixedWidthTwoLineDataSplitter, docstring, FixedWidthTwoLine, FixedWidthNoHeader, FixedWidthTwoLine.__init__, FixedWidthNoHeader.__init__",
          "completion_cost": 0.016104
        },
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "FixedWidth.__init__",
            "file_path": "astropy/io/ascii/fixedwidth.py",
            "scratch_pad": "Apologies for the confusion. Let's focus on reviewing the 'FixedWidth.__init__' method to understand how 'header_rows' is initially accepted and stored. This will help us understand how to potentially implement something similar in the 'RST' class.",
            "instructions": "Review the 'FixedWidth.__init__' method in 'astropy/io/ascii/fixedwidth.py' to see how 'header_rows' is handled and stored. Use this information to guide the potential implementation of 'header_rows' in the 'RST' class if it were to be available."
          },
          "output": {
            "span_id": "FixedWidth.__init__",
            "end_line": 357,
            "file_path": "astropy/io/ascii/fixedwidth.py",
            "start_line": 339,
            "instructions": "Review the 'FixedWidth.__init__' method in 'astropy/io/ascii/fixedwidth.py' to see how 'header_rows' is handled and stored. Use this information to guide the potential implementation of 'header_rows' in the 'RST' class if it were to be available."
          },
          "input_tokens": 4590,
          "output_tokens": 196,
          "retry_message": null,
          "completion_cost": 0.016710000000000003
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "FixedWidth.__init__",
        "end_line": 357,
        "file_path": "astropy/io/ascii/fixedwidth.py",
        "max_tokens": 1000,
        "start_line": 339,
        "temperature": 1.6,
        "instructions": "Review the 'FixedWidth.__init__' method in 'astropy/io/ascii/fixedwidth.py' to see how 'header_rows' is handled and stored. Use this information to guide the potential implementation of 'header_rows' in the 'RST' class if it were to be available.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n    def __init__(\n        self,\n        col_starts=None,\n        col_ends=None,\n        delimiter_pad=\" \",\n        bookend=True,\n        header_rows=None,\n    ):\n        if header_rows is None:\n            header_rows = [\"name\"]\n        super().__init__()\n        self.data.splitter.delimiter_pad = delimiter_pad\n        self.data.splitter.bookend = bookend\n        self.header.col_starts = col_starts\n        self.header.col_ends = col_ends\n        self.header.header_rows = header_rows\n        self.data.header_rows = header_rows\n        if self.data.start_line is None:\n            self.data.start_line = len(header_rows)\n</replace>"
          },
          "output": null,
          "input_tokens": 4835,
          "output_tokens": 195,
          "retry_message": "The code in the replace tag is the same as in the search. Use the reject function if you can't do any changes and want to reject the instructions.",
          "completion_cost": 0.01743
        },
        {
          "action": {
            "content": "<reject>\nNo changes needed as the code already handles the 'header_rows' parameter as specified.\n</reject>"
          },
          "output": {
            "message": "\nNo changes needed as the code already handles the 'header_rows' parameter as specified.\n"
          },
          "input_tokens": 5070,
          "output_tokens": 26,
          "retry_message": null,
          "completion_cost": 0.0156
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "\nNo changes needed as the code already handles the 'header_rows' parameter as specified.\n",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "RST.__init__",
            "file_path": "astropy/io/ascii/rst.py",
            "scratch_pad": "The 'FixedWidth.__init__' method already handles the 'header_rows' parameter by accepting it as an argument and passing it to the 'super().__init__()' call. This information can guide us on how to implement similar functionality in the 'RST' class.",
            "instructions": "Implement the 'header_rows' parameter in the 'RST.__init__' method to accept 'header_rows' and pass it down appropriately to ensure the 'RST' class can handle additional header rows as specified in the issue."
          },
          "output": null,
          "input_tokens": 4195,
          "output_tokens": 183,
          "retry_message": "File astropy/io/ascii/rst.py is not found in the file context. You can only request changes to files that are in file context:\n * astropy/io/ascii/fixedwidth.py\n",
          "completion_cost": 0.01533
        },
        {
          "action": {
            "action": "finish",
            "finish": "The requested changes involve modifying the 'RST' class to accept and handle the 'header_rows' parameter. However, the 'RST' class is not present in the provided file context, making it impossible to implement the required changes. Therefore, the task must be concluded without any modifications.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "Given that the 'RST' class is not available in the current file context, there is no direct action that can be taken to update it or its methods as requested. The task cannot be completed without access to the 'RST' class source file.",
            "instructions": null
          },
          "output": {
            "message": "The requested changes involve modifying the 'RST' class to accept and handle the 'header_rows' parameter. However, the 'RST' class is not present in the provided file context, making it impossible to implement the required changes. Therefore, the task must be concluded without any modifications."
          },
          "input_tokens": 4430,
          "output_tokens": 174,
          "retry_message": null,
          "completion_cost": 0.0159
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The requested changes involve modifying the 'RST' class to accept and handle the 'header_rows' parameter. However, the 'RST' class is not present in the provided file context, making it impossible to implement the required changes. Therefore, the task must be concluded without any modifications.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Please support header rows in RestructuredText output\n### Description\r\n\r\nIt would be great if the following would work:\r\n\r\n```Python\r\n>>> from astropy.table import QTable\r\n>>> import astropy.units as u\r\n>>> import sys\r\n>>> tbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})\r\n>>> tbl.write(sys.stdout,  format=\"ascii.rst\")\r\n===== ========\r\n wave response\r\n===== ========\r\n350.0      0.7\r\n950.0      1.2\r\n===== ========\r\n>>> tbl.write(sys.stdout,  format=\"ascii.fixed_width\", header_rows=[\"name\", \"unit\"])\r\n|  wave | response |\r\n|    nm |       ct |\r\n| 350.0 |      0.7 |\r\n| 950.0 |      1.2 |\r\n>>> tbl.write(sys.stdout,  format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/lib/python3/dist-packages/astropy/table/connect.py\", line 129, in __call__\r\n    self.registry.write(instance, *args, **kwargs)\r\n  File \"/usr/lib/python3/dist-packages/astropy/io/registry/core.py\", line 369, in write\r\n    return writer(data, *args, **kwargs)\r\n  File \"/usr/lib/python3/dist-packages/astropy/io/ascii/connect.py\", line 26, in io_write\r\n    return write(table, filename, **kwargs)\r\n  File \"/usr/lib/python3/dist-packages/astropy/io/ascii/ui.py\", line 856, in write\r\n    writer = get_writer(Writer=Writer, fast_writer=fast_writer, **kwargs)\r\n  File \"/usr/lib/python3/dist-packages/astropy/io/ascii/ui.py\", line 800, in get_writer\r\n    writer = core._get_writer(Writer, fast_writer, **kwargs)\r\n  File \"/usr/lib/python3/dist-packages/astropy/io/ascii/core.py\", line 1719, in _get_writer\r\n    writer = Writer(**writer_kwargs)\r\nTypeError: RST.__init__() got an unexpected keyword argument 'header_rows'\r\n```\r\n\r\n\r\n### Additional context\r\n\r\nRestructuredText output is a great way to fill autogenerated documentation with content, so having this flexible makes the life easier `:-)`\r\n\r\n\n"
}