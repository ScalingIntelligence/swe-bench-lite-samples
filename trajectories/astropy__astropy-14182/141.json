{
  "info": {
    "duration": 240.4126410484314,
    "submission": "diff --git a/astropy/io/ascii/rst.py b/astropy/io/ascii/rst.py\nindex abdeba8ef..3e1be6f92 100644\n--- a/astropy/io/ascii/rst.py\n+++ b/astropy/io/ascii/rst.py\n@@ -57,10 +57,15 @@ class RST(FixedWidth):\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n+    def __init__(self, header_rows=None):\n         super().__init__(delimiter_pad=None, bookend=False)\n+        self.header_rows = header_rows if header_rows else []\n \n     def write(self, lines):\n         lines = super().write(lines)\n-        lines = [lines[1]] + lines + [lines[1]]\n+        if self.header_rows:\n+            header_lines = [self.header_class.splitter_class().join(row) for row in self.header_rows]\n+            lines = [lines[1]] + header_lines + lines + [lines[1]]\n+        else:\n+            lines = [lines[1]] + lines + [lines[1]]\n         return lines\n",
    "total_cost": 0.122106,
    "instance_id": "astropy__astropy-14182",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue is requesting support for header rows in RestructuredText (RST) output in the astropy library. The traceback indicates that the `RST.__init__()` function does not accept the 'header_rows' keyword argument, suggesting that the RST writer class needs to be updated to handle this new feature. The primary focus should be on the `astropy/io/ascii/rst.py` file where the `RST` class is defined, and possibly also looking into the `astropy/io/ascii/core.py` file which defines the `BaseReader` and `BaseHeader` classes that might influence how writers are initialized and handle keyword arguments.",
            "search_requests": [
              {
                "query": "support for header rows in RST output",
                "class_names": [
                  "RST"
                ],
                "code_snippet": null,
                "file_pattern": "**/rst.py",
                "function_names": []
              },
              {
                "query": "how writers are initialized and handle keyword arguments",
                "class_names": [
                  "BaseReader",
                  "BaseHeader"
                ],
                "code_snippet": null,
                "file_pattern": "**/core.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 155,
                "span_id": "RST",
                "file_path": "astropy/io/ascii/rst.py"
              },
              {
                "rank": 0,
                "tokens": 30,
                "span_id": "RST.write",
                "file_path": "astropy/io/ascii/rst.py"
              },
              {
                "rank": 2,
                "tokens": 218,
                "span_id": "BaseReader",
                "file_path": "astropy/io/ascii/core.py"
              },
              {
                "rank": 4,
                "tokens": 111,
                "span_id": "BaseHeader",
                "file_path": "astropy/io/ascii/core.py"
              },
              {
                "rank": 4,
                "tokens": 22,
                "span_id": "BaseHeader._set_cols_from_names",
                "file_path": "astropy/io/ascii/core.py"
              },
              {
                "rank": 6,
                "tokens": 85,
                "span_id": "BaseReader.comment_lines",
                "file_path": "astropy/io/ascii/core.py"
              },
              {
                "rank": 6,
                "tokens": 22,
                "span_id": "BaseReader.write_header",
                "file_path": "astropy/io/ascii/core.py"
              },
              {
                "rank": 6,
                "tokens": 106,
                "span_id": "BaseReader.update_table_data",
                "file_path": "astropy/io/ascii/core.py"
              },
              {
                "rank": 10,
                "tokens": 311,
                "span_id": "BaseReader.write",
                "file_path": "astropy/io/ascii/core.py"
              },
              {
                "rank": 11,
                "tokens": 86,
                "span_id": "BaseHeader.remove_columns",
                "file_path": "astropy/io/ascii/core.py"
              },
              {
                "rank": 11,
                "tokens": 41,
                "span_id": "BaseHeader.colnames",
                "file_path": "astropy/io/ascii/core.py"
              },
              {
                "rank": 11,
                "tokens": 60,
                "span_id": "BaseHeader.write",
                "file_path": "astropy/io/ascii/core.py"
              },
              {
                "rank": 11,
                "tokens": 60,
                "span_id": "BaseHeader.process_lines",
                "file_path": "astropy/io/ascii/core.py"
              },
              {
                "rank": 11,
                "tokens": 38,
                "span_id": "BaseHeader.write_comments",
                "file_path": "astropy/io/ascii/core.py"
              },
              {
                "rank": 13,
                "tokens": 140,
                "span_id": "BaseHeader.update_meta",
                "file_path": "astropy/io/ascii/core.py"
              }
            ],
            "search_requests": [
              {
                "query": "support for header rows in RST output",
                "class_names": [
                  "RST"
                ],
                "code_snippet": null,
                "file_pattern": "**/rst.py",
                "function_names": []
              },
              {
                "query": "how writers are initialized and handle keyword arguments",
                "class_names": [
                  "BaseReader",
                  "BaseHeader"
                ],
                "code_snippet": null,
                "file_pattern": "**/core.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 3532,
          "output_tokens": 298,
          "retry_message": null,
          "completion_cost": 0.015066
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 155,
            "span_id": "RST",
            "file_path": "astropy/io/ascii/rst.py"
          },
          {
            "rank": 0,
            "tokens": 30,
            "span_id": "RST.write",
            "file_path": "astropy/io/ascii/rst.py"
          },
          {
            "rank": 2,
            "tokens": 218,
            "span_id": "BaseReader",
            "file_path": "astropy/io/ascii/core.py"
          },
          {
            "rank": 4,
            "tokens": 111,
            "span_id": "BaseHeader",
            "file_path": "astropy/io/ascii/core.py"
          },
          {
            "rank": 4,
            "tokens": 22,
            "span_id": "BaseHeader._set_cols_from_names",
            "file_path": "astropy/io/ascii/core.py"
          },
          {
            "rank": 6,
            "tokens": 85,
            "span_id": "BaseReader.comment_lines",
            "file_path": "astropy/io/ascii/core.py"
          },
          {
            "rank": 6,
            "tokens": 22,
            "span_id": "BaseReader.write_header",
            "file_path": "astropy/io/ascii/core.py"
          },
          {
            "rank": 6,
            "tokens": 106,
            "span_id": "BaseReader.update_table_data",
            "file_path": "astropy/io/ascii/core.py"
          },
          {
            "rank": 10,
            "tokens": 311,
            "span_id": "BaseReader.write",
            "file_path": "astropy/io/ascii/core.py"
          },
          {
            "rank": 11,
            "tokens": 86,
            "span_id": "BaseHeader.remove_columns",
            "file_path": "astropy/io/ascii/core.py"
          },
          {
            "rank": 11,
            "tokens": 41,
            "span_id": "BaseHeader.colnames",
            "file_path": "astropy/io/ascii/core.py"
          },
          {
            "rank": 11,
            "tokens": 60,
            "span_id": "BaseHeader.write",
            "file_path": "astropy/io/ascii/core.py"
          },
          {
            "rank": 11,
            "tokens": 60,
            "span_id": "BaseHeader.process_lines",
            "file_path": "astropy/io/ascii/core.py"
          },
          {
            "rank": 11,
            "tokens": 38,
            "span_id": "BaseHeader.write_comments",
            "file_path": "astropy/io/ascii/core.py"
          },
          {
            "rank": 13,
            "tokens": 140,
            "span_id": "BaseHeader.update_meta",
            "file_path": "astropy/io/ascii/core.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "To support header rows in the RestructuredText (RST) output, we need to identify where the RST writer is implemented and how it handles headers. The reported issue suggests that the current implementation of the RST writer in the `astropy` package does not support a `header_rows` keyword argument, leading to a `TypeError`.\n\nBy analyzing the provided search results, we can see that the `RST` class is defined in `astropy/io/ascii/rst.py`, which extends from `FixedWidth`. The `RST.__init__` method does not accept any keyword arguments other than the standard ones, which is why the `header_rows` argument causes an error. This is confirmed by the absence of `header_rows` in the `__init__` method.\n\nThe relevant spans of code include the `RST` class and the `SimpleRSTHeader` and `SimpleRSTData` classes that it uses. These classes need to be modified to accept and handle `header_rows`. Additionally, other relevant files such as `astropy/io/ascii/core.py` could be useful for understanding the base classes and methods that the RST writer inherits from. This includes the `BaseHeader` and `BaseData` classes.\n\nIt appears that the initial analysis is complete, and the identified code spans cover the necessary areas to implement the feature to support header rows in the RST output. Further development would involve extending these classes to accept the `header_rows` keyword and integrating the functionality to write these rows into the output.",
            "identified_spans": [
              {
                "span_ids": [
                  "SimpleRSTHeader",
                  "SimpleRSTData",
                  "RST",
                  "RST.__init__",
                  "RST.write"
                ],
                "file_path": "astropy/io/ascii/rst.py"
              },
              {
                "span_ids": [
                  "BaseHeader",
                  "BaseHeader.__init__",
                  "BaseHeader._set_cols_from_names",
                  "BaseHeader.update_meta",
                  "BaseHeader.process_lines",
                  "BaseHeader.write_comments",
                  "BaseHeader.write",
                  "BaseHeader.colnames",
                  "BaseHeader.remove_columns",
                  "BaseData"
                ],
                "file_path": "astropy/io/ascii/core.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 5382,
          "output_tokens": 581,
          "retry_message": null,
          "completion_cost": 0.024861
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The issue is requesting support for header rows in RestructuredText (RST) output. The traceback indicates that the RST writer class does not accept the 'header_rows' keyword argument. The relevant code for the RST writer is located in the 'astropy/io/ascii/rst.py' file, specifically within the 'RST' class. Additionally, the 'BaseHeader' and 'BaseData' classes in the 'astropy/io/ascii/core.py' file should be examined for any potential interactions or modifications needed to implement this feature. The provided file context includes the necessary classes and methods, but the 'RST' class specifically lacks the ability to handle 'header_rows'. Hence, the relevant code for modifying the 'RST' class to support 'header_rows' is not fully present.",
            "search_suggestions": "Look into the integration of 'BaseHeader' and 'BaseData' classes with the 'RST' class to understand how to properly pass and handle the 'header_rows' keyword argument. Also, consider how 'header_rows' should interact with the existing 'write' method in the 'RST' class."
          },
          "output": {
            "message": "Look into the integration of 'BaseHeader' and 'BaseData' classes with the 'RST' class to understand how to properly pass and handle the 'header_rows' keyword argument. Also, consider how 'header_rows' should interact with the existing 'write' method in the 'RST' class."
          },
          "input_tokens": 2851,
          "output_tokens": 277,
          "retry_message": null,
          "completion_cost": 0.012708
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look into the integration of 'BaseHeader' and 'BaseData' classes with the 'RST' class to understand how to properly pass and handle the 'header_rows' keyword argument. Also, consider how 'header_rows' should interact with the existing 'write' method in the 'RST' class.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "scratch_pad": "To integrate 'header_rows' with the 'RST' class, we need to understand how it can interact with both the 'BaseHeader' and 'BaseData' classes, especially in the context of the 'write' method in 'RST'. The 'BaseHeader' class currently lacks support for handling additional rows of header information, which might necessitate an update or extension. Additionally, the 'RST' class's 'write' method must be adjusted to incorporate these header rows correctly into the output. Given the current structure, it seems like adding a 'header_rows' parameter to the 'RST' class's '__init__' method and modifying the 'write' method to use this parameter would be a logical approach.",
            "search_requests": [
              {
                "query": "modifications to support header_rows",
                "class_names": [
                  "RST"
                ],
                "code_snippet": null,
                "file_pattern": "**/rst.py",
                "function_names": [
                  "__init__",
                  "write"
                ]
              },
              {
                "query": "enhancements to handle additional header rows",
                "class_names": [
                  "BaseHeader",
                  "BaseData"
                ],
                "code_snippet": null,
                "file_pattern": "**/core.py",
                "function_names": [
                  "write",
                  "process_lines"
                ]
              }
            ]
          },
          "output": {
            "message": "To integrate 'header_rows' with the 'RST' class, we need to understand how it can interact with both the 'BaseHeader' and 'BaseData' classes, especially in the context of the 'write' method in 'RST'. The 'BaseHeader' class currently lacks support for handling additional rows of header information, which might necessitate an update or extension. Additionally, the 'RST' class's 'write' method must be adjusted to incorporate these header rows correctly into the output. Given the current structure, it seems like adding a 'header_rows' parameter to the 'RST' class's '__init__' method and modifying the 'write' method to use this parameter would be a logical approach."
          },
          "input_tokens": 5192,
          "output_tokens": 355,
          "retry_message": null,
          "completion_cost": 0.020901
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "To integrate 'header_rows' with the 'RST' class, we need to understand how it can interact with both the 'BaseHeader' and 'BaseData' classes, especially in the context of the 'write' method in 'RST'. The 'BaseHeader' class currently lacks support for handling additional rows of header information, which might necessitate an update or extension. Additionally, the 'RST' class's 'write' method must be adjusted to incorporate these header rows correctly into the output. Given the current structure, it seems like adding a 'header_rows' parameter to the 'RST' class's '__init__' method and modifying the 'write' method to use this parameter would be a logical approach.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "RST",
            "file_path": "astropy/io/ascii/rst.py",
            "scratch_pad": "To support 'header_rows' in the 'RST' class, we need to update the '__init__' method to accept this parameter and store it. Additionally, we need to modify the 'write' method to incorporate these header rows into the output. The 'BaseHeader' class currently lacks support for handling additional rows of header information, so we will extend it within the 'SimpleRSTHeader' subclass to accommodate 'header_rows'.",
            "instructions": "Add a 'header_rows' parameter to the '__init__' method of the 'RST' class and store it as an instance variable. Modify the 'write' method of the 'RST' class to insert these additional header rows into the output."
          },
          "output": {
            "span_id": "RST",
            "end_line": 66,
            "file_path": "astropy/io/ascii/rst.py",
            "start_line": 35,
            "instructions": "Add a 'header_rows' parameter to the '__init__' method of the 'RST' class and store it as an instance variable. Modify the 'write' method of the 'RST' class to insert these additional header rows into the output."
          },
          "input_tokens": 3635,
          "output_tokens": 192,
          "retry_message": null,
          "completion_cost": 0.013785
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "RST",
        "end_line": 66,
        "file_path": "astropy/io/ascii/rst.py",
        "max_tokens": 1000,
        "start_line": 35,
        "temperature": 1.6,
        "instructions": "Add a 'header_rows' parameter to the '__init__' method of the 'RST' class and store it as an instance variable. Modify the 'write' method of the 'RST' class to insert these additional header rows into the output.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\nclass RST(FixedWidth):\n    \"\"\"reStructuredText simple format table.\n\n    See: https://docutils.sourceforge.io/docs/ref/rst/restructuredtext.html#simple-tables\n\n    Example::\n\n        ==== ===== ======\n        Col1  Col2  Col3\n        ==== ===== ======\n          1    2.3  Hello\n          2    4.5  Worlds\n        ==== ===== ======\n\n    Currently there is no support for reading tables which utilize continuation lines,\n    or for ones which define column spans through the use of an additional\n    line of dashes in the header.\n\n    \"\"\"\n\n    _format_name = \"rst\"\n    _description = \"reStructuredText simple table\"\n    data_class = SimpleRSTData\n    header_class = SimpleRSTHeader\n\n    def __init__(self, header_rows=None):\n        super().__init__(delimiter_pad=None, bookend=False)\n        self.header_rows = header_rows if header_rows else []\n\n    def write(self, lines):\n        lines = super().write(lines)\n        if self.header_rows:\n            header_lines = [self.header_class.splitter_class().join(row) for row in self.header_rows]\n            lines = [lines[1]] + header_lines + lines + [lines[1]]\n        else:\n            lines = [lines[1]] + lines + [lines[1]]\n        return lines\n</replace>"
          },
          "output": {
            "diff": "--- astropy/io/ascii/rst.py\n+++ astropy/io/ascii/rst.py\n@@ -57,10 +57,15 @@\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n+    def __init__(self, header_rows=None):\n         super().__init__(delimiter_pad=None, bookend=False)\n+        self.header_rows = header_rows if header_rows else []\n \n     def write(self, lines):\n         lines = super().write(lines)\n-        lines = [lines[1]] + lines + [lines[1]]\n+        if self.header_rows:\n+            header_lines = [self.header_class.splitter_class().join(row) for row in self.header_rows]\n+            lines = [lines[1]] + header_lines + lines + [lines[1]]\n+        else:\n+            lines = [lines[1]] + lines + [lines[1]]\n         return lines",
            "message": "Applied the change to astropy/io/ascii/rst.py.",
            "verification_errors": []
          },
          "input_tokens": 4275,
          "output_tokens": 354,
          "retry_message": null,
          "completion_cost": 0.018135
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- astropy/io/ascii/rst.py\n+++ astropy/io/ascii/rst.py\n@@ -57,10 +57,15 @@\n     data_class = SimpleRSTData\n     header_class = SimpleRSTHeader\n \n-    def __init__(self):\n+    def __init__(self, header_rows=None):\n         super().__init__(delimiter_pad=None, bookend=False)\n+        self.header_rows = header_rows if header_rows else []\n \n     def write(self, lines):\n         lines = super().write(lines)\n-        lines = [lines[1]] + lines + [lines[1]]\n+        if self.header_rows:\n+            header_lines = [self.header_class.splitter_class().join(row) for row in self.header_rows]\n+            lines = [lines[1]] + header_lines + lines + [lines[1]]\n+        else:\n+            lines = [lines[1]] + lines + [lines[1]]\n         return lines",
        "model": "deepseek-coder",
        "message": "Applied the change to astropy/io/ascii/rst.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The changes necessary to support 'header_rows' in the 'RST' class have been implemented successfully. The '__init__' method now accepts 'header_rows' as a parameter and the 'write' method utilizes this parameter to insert additional header rows into the output. The modifications adhere to the requirements and should resolve the reported issue.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The changes made to the 'RST' class's '__init__' and 'write' methods appear to handle the 'header_rows' parameter correctly. The '__init__' method now initializes 'header_rows' to an empty list if it's not provided and stores it as an instance variable. The 'write' method has been updated to insert these additional header rows into the output if they exist. Additionally, the 'SimpleRSTHeader' class's 'splitter_class' is used to format the header rows correctly. These changes should now allow the 'RST' class to support 'header_rows' as required.",
            "instructions": null
          },
          "output": {
            "message": "The changes necessary to support 'header_rows' in the 'RST' class have been implemented successfully. The '__init__' method now accepts 'header_rows' as a parameter and the 'write' method utilizes this parameter to insert additional header rows into the output. The modifications adhere to the requirements and should resolve the reported issue."
          },
          "input_tokens": 4225,
          "output_tokens": 265,
          "retry_message": null,
          "completion_cost": 0.01665
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The changes necessary to support 'header_rows' in the 'RST' class have been implemented successfully. The '__init__' method now accepts 'header_rows' as a parameter and the 'write' method utilizes this parameter to insert additional header rows into the output. The modifications adhere to the requirements and should resolve the reported issue.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Please support header rows in RestructuredText output\n### Description\r\n\r\nIt would be great if the following would work:\r\n\r\n```Python\r\n>>> from astropy.table import QTable\r\n>>> import astropy.units as u\r\n>>> import sys\r\n>>> tbl = QTable({'wave': [350,950]*u.nm, 'response': [0.7, 1.2]*u.count})\r\n>>> tbl.write(sys.stdout,  format=\"ascii.rst\")\r\n===== ========\r\n wave response\r\n===== ========\r\n350.0      0.7\r\n950.0      1.2\r\n===== ========\r\n>>> tbl.write(sys.stdout,  format=\"ascii.fixed_width\", header_rows=[\"name\", \"unit\"])\r\n|  wave | response |\r\n|    nm |       ct |\r\n| 350.0 |      0.7 |\r\n| 950.0 |      1.2 |\r\n>>> tbl.write(sys.stdout,  format=\"ascii.rst\", header_rows=[\"name\", \"unit\"])\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/usr/lib/python3/dist-packages/astropy/table/connect.py\", line 129, in __call__\r\n    self.registry.write(instance, *args, **kwargs)\r\n  File \"/usr/lib/python3/dist-packages/astropy/io/registry/core.py\", line 369, in write\r\n    return writer(data, *args, **kwargs)\r\n  File \"/usr/lib/python3/dist-packages/astropy/io/ascii/connect.py\", line 26, in io_write\r\n    return write(table, filename, **kwargs)\r\n  File \"/usr/lib/python3/dist-packages/astropy/io/ascii/ui.py\", line 856, in write\r\n    writer = get_writer(Writer=Writer, fast_writer=fast_writer, **kwargs)\r\n  File \"/usr/lib/python3/dist-packages/astropy/io/ascii/ui.py\", line 800, in get_writer\r\n    writer = core._get_writer(Writer, fast_writer, **kwargs)\r\n  File \"/usr/lib/python3/dist-packages/astropy/io/ascii/core.py\", line 1719, in _get_writer\r\n    writer = Writer(**writer_kwargs)\r\nTypeError: RST.__init__() got an unexpected keyword argument 'header_rows'\r\n```\r\n\r\n\r\n### Additional context\r\n\r\nRestructuredText output is a great way to fill autogenerated documentation with content, so having this flexible makes the life easier `:-)`\r\n\r\n\n"
}