{
  "info": {
    "duration": 198.82895612716675,
    "submission": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 7649c39262..687b773587 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -353,7 +353,8 @@ class SQLCompiler:\n             # not taken into account so we strip it. When this entire method\n             # is refactored into expressions, then we can check each part as we\n             # generate it.\n-            without_ordering = self.ordering_parts.search(sql).group(1)\n+            sql_oneline = ' '.join(sql.split('\\n'))\n+            without_ordering = self.ordering_parts.search(sql_oneline).group(1)\n             params_hash = make_hashable(params)\n             if (without_ordering, params_hash) in seen:\n                 continue\n",
    "total_cost": 0.093966,
    "instance_id": "django__django-11001",
    "evaluation_name": "temperature_sweep_250_samples_50_problems_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves the SQLCompiler class in Django's ORM, specifically in the method get_order_by(). The problem is that the method is not correctly handling multiline RawSQL expressions when identifying duplicate 'order by' clauses. The provided files suggest that the SQLCompiler class is located in 'django/db/models/sql/compiler.py'. To address the issue, we need to focus on the get_order_by method and the handling of RawSQL expressions. Given the provided context, we should search for the SQLCompiler class and the get_order_by method within the specified file.",
            "search_requests": [
              {
                "query": "SQLCompiler get_order_by multiline RawSQL",
                "class_names": [
                  "SQLCompiler"
                ],
                "code_snippet": null,
                "file_pattern": "django/db/models/sql/compiler.py",
                "function_names": [
                  "get_order_by"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 839,
                "span_id": "SQLCompiler.get_order_by",
                "file_path": "django/db/models/sql/compiler.py"
              },
              {
                "rank": 2,
                "tokens": 105,
                "span_id": "SQLCompiler.get_extra_select",
                "file_path": "django/db/models/sql/compiler.py"
              },
              {
                "rank": 3,
                "tokens": 735,
                "span_id": "SQLCompiler.get_group_by",
                "file_path": "django/db/models/sql/compiler.py"
              },
              {
                "rank": 4,
                "tokens": 126,
                "span_id": "SQLCompiler.pre_sql_setup",
                "file_path": "django/db/models/sql/compiler.py"
              },
              {
                "rank": 6,
                "tokens": 138,
                "span_id": "SQLCompiler._setup_joins",
                "file_path": "django/db/models/sql/compiler.py"
              },
              {
                "rank": 7,
                "tokens": 4,
                "span_id": "SQLCompiler",
                "file_path": "django/db/models/sql/compiler.py"
              },
              {
                "rank": 7,
                "tokens": 56,
                "span_id": "SQLCompiler.setup_query",
                "file_path": "django/db/models/sql/compiler.py"
              },
              {
                "rank": 8,
                "tokens": 1358,
                "span_id": "SQLCompiler.as_sql",
                "file_path": "django/db/models/sql/compiler.py"
              },
              {
                "rank": 9,
                "tokens": 494,
                "span_id": "SQLCompiler.get_select",
                "file_path": "django/db/models/sql/compiler.py"
              },
              {
                "rank": 10,
                "tokens": 491,
                "span_id": "SQLCompiler.get_combinator_sql",
                "file_path": "django/db/models/sql/compiler.py"
              },
              {
                "rank": 11,
                "tokens": 324,
                "span_id": "SQLCompiler.find_ordering_name",
                "file_path": "django/db/models/sql/compiler.py"
              },
              {
                "rank": 13,
                "tokens": 70,
                "span_id": "SQLCompiler.explain_query",
                "file_path": "django/db/models/sql/compiler.py"
              },
              {
                "rank": 13,
                "tokens": 115,
                "span_id": "SQLCompiler.as_subquery_condition",
                "file_path": "django/db/models/sql/compiler.py"
              },
              {
                "rank": 14,
                "tokens": 165,
                "span_id": "SQLCompiler.get_distinct",
                "file_path": "django/db/models/sql/compiler.py"
              },
              {
                "rank": 15,
                "tokens": 137,
                "span_id": "SQLCompiler.quote_name_unless_alias",
                "file_path": "django/db/models/sql/compiler.py"
              },
              {
                "rank": 15,
                "tokens": 87,
                "span_id": "SQLCompiler.compile",
                "file_path": "django/db/models/sql/compiler.py"
              },
              {
                "rank": 16,
                "tokens": 303,
                "span_id": "SQLCompiler.get_from_clause",
                "file_path": "django/db/models/sql/compiler.py"
              },
              {
                "rank": 17,
                "tokens": 397,
                "span_id": "SQLCompiler.get_select_for_update_of_arguments",
                "file_path": "django/db/models/sql/compiler.py"
              },
              {
                "rank": 20,
                "tokens": 459,
                "span_id": "SQLCompiler.collapse_group_by",
                "file_path": "django/db/models/sql/compiler.py"
              },
              {
                "rank": 23,
                "tokens": 1368,
                "span_id": "SQLCompiler.get_related_selections",
                "file_path": "django/db/models/sql/compiler.py"
              },
              {
                "rank": 24,
                "tokens": 127,
                "span_id": "SQLCompiler.results_iter",
                "file_path": "django/db/models/sql/compiler.py"
              },
              {
                "rank": 24,
                "tokens": 88,
                "span_id": "SQLCompiler.has_results",
                "file_path": "django/db/models/sql/compiler.py"
              },
              {
                "rank": 25,
                "tokens": 69,
                "span_id": "SQLCompiler.apply_converters",
                "file_path": "django/db/models/sql/compiler.py"
              },
              {
                "rank": 25,
                "tokens": 77,
                "span_id": "SQLCompiler.get_converters",
                "file_path": "django/db/models/sql/compiler.py"
              },
              {
                "rank": 25,
                "tokens": 63,
                "span_id": "SQLCompiler.deferred_to_columns",
                "file_path": "django/db/models/sql/compiler.py"
              },
              {
                "rank": 29,
                "tokens": 423,
                "span_id": "SQLCompiler.get_default_columns",
                "file_path": "django/db/models/sql/compiler.py"
              }
            ],
            "search_requests": [
              {
                "query": "SQLCompiler get_order_by multiline RawSQL",
                "class_names": [
                  "SQLCompiler"
                ],
                "code_snippet": null,
                "file_pattern": "django/db/models/sql/compiler.py",
                "function_names": [
                  "get_order_by"
                ]
              }
            ]
          },
          "input_tokens": 3442,
          "output_tokens": 238,
          "retry_message": null,
          "completion_cost": 0.013896
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 839,
            "span_id": "SQLCompiler.get_order_by",
            "file_path": "django/db/models/sql/compiler.py"
          },
          {
            "rank": 2,
            "tokens": 105,
            "span_id": "SQLCompiler.get_extra_select",
            "file_path": "django/db/models/sql/compiler.py"
          },
          {
            "rank": 3,
            "tokens": 735,
            "span_id": "SQLCompiler.get_group_by",
            "file_path": "django/db/models/sql/compiler.py"
          },
          {
            "rank": 4,
            "tokens": 126,
            "span_id": "SQLCompiler.pre_sql_setup",
            "file_path": "django/db/models/sql/compiler.py"
          },
          {
            "rank": 6,
            "tokens": 138,
            "span_id": "SQLCompiler._setup_joins",
            "file_path": "django/db/models/sql/compiler.py"
          },
          {
            "rank": 7,
            "tokens": 4,
            "span_id": "SQLCompiler",
            "file_path": "django/db/models/sql/compiler.py"
          },
          {
            "rank": 7,
            "tokens": 56,
            "span_id": "SQLCompiler.setup_query",
            "file_path": "django/db/models/sql/compiler.py"
          },
          {
            "rank": 8,
            "tokens": 1358,
            "span_id": "SQLCompiler.as_sql",
            "file_path": "django/db/models/sql/compiler.py"
          },
          {
            "rank": 9,
            "tokens": 494,
            "span_id": "SQLCompiler.get_select",
            "file_path": "django/db/models/sql/compiler.py"
          },
          {
            "rank": 10,
            "tokens": 491,
            "span_id": "SQLCompiler.get_combinator_sql",
            "file_path": "django/db/models/sql/compiler.py"
          },
          {
            "rank": 11,
            "tokens": 324,
            "span_id": "SQLCompiler.find_ordering_name",
            "file_path": "django/db/models/sql/compiler.py"
          },
          {
            "rank": 13,
            "tokens": 70,
            "span_id": "SQLCompiler.explain_query",
            "file_path": "django/db/models/sql/compiler.py"
          },
          {
            "rank": 13,
            "tokens": 115,
            "span_id": "SQLCompiler.as_subquery_condition",
            "file_path": "django/db/models/sql/compiler.py"
          },
          {
            "rank": 14,
            "tokens": 165,
            "span_id": "SQLCompiler.get_distinct",
            "file_path": "django/db/models/sql/compiler.py"
          },
          {
            "rank": 15,
            "tokens": 137,
            "span_id": "SQLCompiler.quote_name_unless_alias",
            "file_path": "django/db/models/sql/compiler.py"
          },
          {
            "rank": 15,
            "tokens": 87,
            "span_id": "SQLCompiler.compile",
            "file_path": "django/db/models/sql/compiler.py"
          },
          {
            "rank": 16,
            "tokens": 303,
            "span_id": "SQLCompiler.get_from_clause",
            "file_path": "django/db/models/sql/compiler.py"
          },
          {
            "rank": 17,
            "tokens": 397,
            "span_id": "SQLCompiler.get_select_for_update_of_arguments",
            "file_path": "django/db/models/sql/compiler.py"
          },
          {
            "rank": 20,
            "tokens": 459,
            "span_id": "SQLCompiler.collapse_group_by",
            "file_path": "django/db/models/sql/compiler.py"
          },
          {
            "rank": 23,
            "tokens": 1368,
            "span_id": "SQLCompiler.get_related_selections",
            "file_path": "django/db/models/sql/compiler.py"
          },
          {
            "rank": 24,
            "tokens": 127,
            "span_id": "SQLCompiler.results_iter",
            "file_path": "django/db/models/sql/compiler.py"
          },
          {
            "rank": 24,
            "tokens": 88,
            "span_id": "SQLCompiler.has_results",
            "file_path": "django/db/models/sql/compiler.py"
          },
          {
            "rank": 25,
            "tokens": 69,
            "span_id": "SQLCompiler.apply_converters",
            "file_path": "django/db/models/sql/compiler.py"
          },
          {
            "rank": 25,
            "tokens": 77,
            "span_id": "SQLCompiler.get_converters",
            "file_path": "django/db/models/sql/compiler.py"
          },
          {
            "rank": 25,
            "tokens": 63,
            "span_id": "SQLCompiler.deferred_to_columns",
            "file_path": "django/db/models/sql/compiler.py"
          },
          {
            "rank": 29,
            "tokens": 423,
            "span_id": "SQLCompiler.get_default_columns",
            "file_path": "django/db/models/sql/compiler.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue pertains to the incorrect handling of 'order by' clauses in multiline RawSQL expressions within the SQLCompiler.get_order_by() method. The problem arises from the regular expression self.ordering_parts.search(sql).group(1) which mistakenly identifies lines containing 'ASC' or 'DESC' as part of the 'order by' clause, leading to incorrect removal of subsequent 'order by' clauses with identical last lines. This is evident in the provided example where the second RawSQL with 'else null end' part is mistakenly removed. The search results contain several key sections in the SQLCompiler class that are relevant to this issue. The SQLCompiler.__init__ method initializes self.ordering_parts with a regular expression that likely contributes to the bug. The SQLCompiler.get_order_by method includes the logic for processing 'order by' clauses, and the SQLCompiler.get_extra_select method also involves dealing with ordering parts. Given the issue description, these sections are highly relevant to addressing the bug related to handling multiline RawSQL expressions in 'order by' clauses. However, the search results do not directly include the exact line causing the issue within SQLCompiler.get_order_by(). To address the bug, further inspection or addition of debug statements might be required in this method to pinpoint the exact line or logic causing the incorrect removal of 'order by' clauses.",
            "identified_spans": [
              {
                "span_ids": [
                  "imports",
                  "SQLCompiler",
                  "SQLCompiler.__init__",
                  "SQLCompiler.get_order_by",
                  "SQLCompiler.get_extra_select"
                ],
                "file_path": "django/db/models/sql/compiler.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 5956,
          "output_tokens": 398,
          "retry_message": null,
          "completion_cost": 0.023838
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The SQLCompiler class and the get_order_by method are identified in the provided file context. These elements are crucial for addressing the reported issue, which involves handling multiline RawSQL expressions correctly in the 'order by' clause to avoid incorrect removal of duplicates. The context also includes the relevant regular expression 'ordering_parts' and details about how the 'order by' clause is processed. This should be sufficient to start fixing the issue.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 3041,
          "output_tokens": 128,
          "retry_message": null,
          "completion_cost": 0.011043
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "SQLCompiler.get_order_by",
            "file_path": "django/db/models/sql/compiler.py",
            "scratch_pad": "The issue is related to the incorrect removal of order_by clauses when using multiline RawSQL expressions. This happens because the regular expression `ordering_parts` is operating on multiline SQL, causing it to identify duplicate clauses based on partial matches. A suggested fix is to clean the SQL of newline characters before applying the regular expression.",
            "instructions": "Update the `get_order_by` method to replace newline characters with spaces in the SQL string before applying the `ordering_parts` regular expression."
          },
          "output": {
            "span_id": "SQLCompiler.get_order_by",
            "file_path": "django/db/models/sql/compiler.py",
            "instructions": "Update the `get_order_by` method to replace newline characters with spaces in the SQL string before applying the `ordering_parts` regular expression."
          },
          "input_tokens": 3280,
          "output_tokens": 165,
          "retry_message": null,
          "completion_cost": 0.012315
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "SQLCompiler.get_order_by",
        "end_line": null,
        "file_path": "django/db/models/sql/compiler.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Update the `get_order_by` method to replace newline characters with spaces in the SQL string before applying the `ordering_parts` regular expression.\n\nThe instruction asks to replace newline characters with spaces in the SQL string before applying the `ordering_parts` regular expression. This change should be made within the `get_order_by` method, specifically where the SQL string is compiled and processed. This modification is necessary at line 356 to ensure that newlines are removed from the SQL string before it is processed by the regular expression.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 356,
            "start_line": 350,
            "scratch_pad": "The instruction asks to replace newline characters with spaces in the SQL string before applying the `ordering_parts` regular expression. This change should be made within the `get_order_by` method, specifically where the SQL string is compiled and processed. This modification is necessary at line 356 to ensure that newlines are removed from the SQL string before it is processed by the regular expression."
          },
          "output": {
            "span_id": "SQLCompiler.get_order_by",
            "end_line": 356,
            "file_path": "django/db/models/sql/compiler.py",
            "start_line": 350,
            "instructions": "Update the `get_order_by` method to replace newline characters with spaces in the SQL string before applying the `ordering_parts` regular expression.\n\nThe instruction asks to replace newline characters with spaces in the SQL string before applying the `ordering_parts` regular expression. This change should be made within the `get_order_by` method, specifically where the SQL string is compiled and processed. This modification is necessary at line 356 to ensure that newlines are removed from the SQL string before it is processed by the regular expression."
          },
          "input_tokens": 2031,
          "output_tokens": 119,
          "retry_message": null,
          "completion_cost": 0.007878
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "SQLCompiler.get_order_by",
        "end_line": 356,
        "file_path": "django/db/models/sql/compiler.py",
        "max_tokens": 1000,
        "start_line": 350,
        "temperature": 1.6,
        "instructions": "Update the `get_order_by` method to replace newline characters with spaces in the SQL string before applying the `ordering_parts` regular expression.\n\nThe instruction asks to replace newline characters with spaces in the SQL string before applying the `ordering_parts` regular expression. This change should be made within the `get_order_by` method, specifically where the SQL string is compiled and processed. This modification is necessary at line 356 to ensure that newlines are removed from the SQL string before it is processed by the regular expression.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```plaintext\n<replace>\n                    raise DatabaseError('ORDER BY term does not match any column in the result set.')\n            sql, params = self.compile(resolved)\n            # Don't add the same column twice, but the order direction is\n            # not taken into account so we strip it. When this entire method\n            # is refactored into expressions, then we can check each part as we\n            # generate it.\n            sql_oneline = ' '.join(sql.split('\\n'))\n            without_ordering = self.ordering_parts.search(sql_oneline).group(1)\n</replace>"
          },
          "output": {
            "diff": "--- django/db/models/sql/compiler.py\n+++ django/db/models/sql/compiler.py\n@@ -353,7 +353,8 @@\n             # not taken into account so we strip it. When this entire method\n             # is refactored into expressions, then we can check each part as we\n             # generate it.\n-            without_ordering = self.ordering_parts.search(sql).group(1)\n+            sql_oneline = ' '.join(sql.split('\\n'))\n+            without_ordering = self.ordering_parts.search(sql_oneline).group(1)\n             params_hash = make_hashable(params)\n             if (without_ordering, params_hash) in seen:\n                 continue\n",
            "message": "Applied the change to django/db/models/sql/compiler.py.\n\n<scratch_pad>\n```plaintext\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 3194,
          "output_tokens": 139,
          "retry_message": null,
          "completion_cost": 0.011667
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- django/db/models/sql/compiler.py\n+++ django/db/models/sql/compiler.py\n@@ -353,7 +353,8 @@\n             # not taken into account so we strip it. When this entire method\n             # is refactored into expressions, then we can check each part as we\n             # generate it.\n-            without_ordering = self.ordering_parts.search(sql).group(1)\n+            sql_oneline = ' '.join(sql.split('\\n'))\n+            without_ordering = self.ordering_parts.search(sql_oneline).group(1)\n             params_hash = make_hashable(params)\n             if (without_ordering, params_hash) in seen:\n                 continue\n",
        "model": "deepseek-coder",
        "message": "Applied the change to django/db/models/sql/compiler.py.\n\n<scratch_pad>\n```plaintext\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The changes have been applied as requested, resolving the issue with incorrect removal of order_by clauses in multiline RawSQL expressions.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The suggested change has been successfully applied. The `get_order_by` method now processes the SQL string by replacing newline characters with spaces before applying the `ordering_parts` regular expression. This should resolve the issue of incorrect removal of order_by clauses when using multiline RawSQL expressions.",
            "instructions": null
          },
          "output": {
            "message": "The changes have been applied as requested, resolving the issue with incorrect removal of order_by clauses in multiline RawSQL expressions."
          },
          "input_tokens": 3703,
          "output_tokens": 148,
          "retry_message": null,
          "completion_cost": 0.013329
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The changes have been applied as requested, resolving the issue with incorrect removal of order_by clauses in multiline RawSQL expressions.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Incorrect removal of order_by clause created as multiline RawSQL\nDescription\n\t\nHi.\nThe SQLCompiler is ripping off one of my \"order by\" clause, because he \"thinks\" the clause was already \"seen\" (in SQLCompiler.get_order_by()). I'm using expressions written as multiline RawSQLs, which are similar but not the same. \nThe bug is located in SQLCompiler.get_order_by(), somewhere around line computing part of SQL query without ordering:\nwithout_ordering = self.ordering_parts.search(sql).group(1)\nThe sql variable contains multiline sql. As a result, the self.ordering_parts regular expression is returning just a line containing ASC or DESC words. This line is added to seen set, and because my raw queries have identical last lines, only the first clasue is returing from SQLCompiler.get_order_by().\nAs a quick/temporal fix I can suggest making sql variable clean of newline characters, like this:\nsql_oneline = ' '.join(sql.split('\\n'))\nwithout_ordering = self.ordering_parts.search(sql_oneline).group(1)\nNote: beware of unicode (Py2.x u'') and EOL dragons (\\r).\nExample of my query:\n\treturn MyModel.objects.all().order_by(\n\t\tRawSQL('''\n\t\t\tcase when status in ('accepted', 'verification')\n\t\t\t\t then 2 else 1 end''', []).desc(),\n\t\tRawSQL('''\n\t\t\tcase when status in ('accepted', 'verification')\n\t\t\t\t then (accepted_datetime, preferred_datetime)\n\t\t\t\t else null end''', []).asc(),\n\t\tRawSQL('''\n\t\t\tcase when status not in ('accepted', 'verification')\n\t\t\t\t then (accepted_datetime, preferred_datetime, created_at)\n\t\t\t\t else null end''', []).desc())\nThe ordering_parts.search is returing accordingly:\n'\t\t\t\t then 2 else 1 end)'\n'\t\t\t\t else null end'\n'\t\t\t\t else null end'\nSecond RawSQL with a\t\t\t\t else null end part is removed from query.\nThe fun thing is that the issue can be solved by workaround by adding a space or any other char to the last line. \nSo in case of RawSQL I can just say, that current implementation of avoiding duplicates in order by clause works only for special/rare cases (or does not work in all cases). \nThe bug filed here is about wrong identification of duplicates (because it compares only last line of SQL passed to order by clause).\nHope my notes will help you fixing the issue. Sorry for my english.\n"
}