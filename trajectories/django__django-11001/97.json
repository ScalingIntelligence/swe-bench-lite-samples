{
  "info": {
    "duration": 252.7235291004181,
    "submission": "diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py\nindex 7649c39262..687b773587 100644\n--- a/django/db/models/sql/compiler.py\n+++ b/django/db/models/sql/compiler.py\n@@ -353,7 +353,8 @@ class SQLCompiler:\n             # not taken into account so we strip it. When this entire method\n             # is refactored into expressions, then we can check each part as we\n             # generate it.\n-            without_ordering = self.ordering_parts.search(sql).group(1)\n+            sql_oneline = ' '.join(sql.split('\\n'))\n+            without_ordering = self.ordering_parts.search(sql_oneline).group(1)\n             params_hash = make_hashable(params)\n             if (without_ordering, params_hash) in seen:\n                 continue\n",
    "total_cost": 0.12699300000000002,
    "instance_id": "django__django-11001",
    "evaluation_name": "temperature_sweep_250_samples_50_problems_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue pertains to the incorrect removal of the 'order by' clause in the SQLCompiler, specifically in the 'get_order_by' method. The problem arises when handling multiline RawSQL queries, where the regular expression used to identify ordering parts mistakenly identifies duplicate clauses based on the last line of the SQL passed to the 'order by' clause. To address this, the search should focus on the SQLCompiler class within the 'django/db/models/sql/compiler.py' file, specifically targeting the 'get_order_by' method. Additionally, the 'django/db/models/expressions.py' file may contain related logic involving 'RawSQL' and 'OrderBy' classes.",
            "search_requests": [
              {
                "query": "SQLCompiler.get_order_by() handling multiline RawSQL",
                "class_names": [],
                "code_snippet": "without_ordering = self.ordering_parts.search(sql).group(1)",
                "file_pattern": "django/db/models/sql/compiler.py",
                "function_names": []
              },
              {
                "query": "RawSQL and OrderBy handling in multiline SQL",
                "class_names": [
                  "RawSQL",
                  "OrderBy"
                ],
                "code_snippet": null,
                "file_pattern": "django/db/models/expressions.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 839,
                "span_id": "SQLCompiler.get_order_by",
                "file_path": "django/db/models/sql/compiler.py"
              },
              {
                "rank": 1,
                "tokens": 105,
                "span_id": "SQLCompiler.get_extra_select",
                "file_path": "django/db/models/sql/compiler.py"
              },
              {
                "rank": 0,
                "tokens": 9,
                "span_id": "OrderBy.desc",
                "file_path": "django/db/models/expressions.py"
              },
              {
                "rank": 0,
                "tokens": 81,
                "span_id": "OrderBy.as_mysql",
                "file_path": "django/db/models/expressions.py"
              },
              {
                "rank": 0,
                "tokens": 32,
                "span_id": "OrderBy.get_group_by_cols",
                "file_path": "django/db/models/expressions.py"
              },
              {
                "rank": 0,
                "tokens": 9,
                "span_id": "OrderBy.asc",
                "file_path": "django/db/models/expressions.py"
              },
              {
                "rank": 0,
                "tokens": 47,
                "span_id": "OrderBy.reverse_ordering",
                "file_path": "django/db/models/expressions.py"
              },
              {
                "rank": 0,
                "tokens": 69,
                "span_id": "OrderBy.as_sqlite",
                "file_path": "django/db/models/expressions.py"
              },
              {
                "rank": 1,
                "tokens": 126,
                "span_id": "OrderBy.as_sql",
                "file_path": "django/db/models/expressions.py"
              },
              {
                "rank": 2,
                "tokens": 11,
                "span_id": "OrderBy.get_source_expressions",
                "file_path": "django/db/models/expressions.py"
              },
              {
                "rank": 2,
                "tokens": 18,
                "span_id": "OrderBy.set_source_expressions",
                "file_path": "django/db/models/expressions.py"
              },
              {
                "rank": 2,
                "tokens": 15,
                "span_id": "OrderBy",
                "file_path": "django/db/models/expressions.py"
              },
              {
                "rank": 2,
                "tokens": 30,
                "span_id": "OrderBy.__repr__",
                "file_path": "django/db/models/expressions.py"
              },
              {
                "rank": 3,
                "tokens": 5,
                "span_id": "RawSQL",
                "file_path": "django/db/models/expressions.py"
              },
              {
                "rank": 3,
                "tokens": 13,
                "span_id": "RawSQL.get_group_by_cols",
                "file_path": "django/db/models/expressions.py"
              }
            ],
            "search_requests": [
              {
                "query": "SQLCompiler.get_order_by() handling multiline RawSQL",
                "class_names": [],
                "code_snippet": "without_ordering = self.ordering_parts.search(sql).group(1)",
                "file_pattern": "django/db/models/sql/compiler.py",
                "function_names": []
              },
              {
                "query": "RawSQL and OrderBy handling in multiline SQL",
                "class_names": [
                  "RawSQL",
                  "OrderBy"
                ],
                "code_snippet": null,
                "file_pattern": "django/db/models/expressions.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 3442,
          "output_tokens": 305,
          "retry_message": null,
          "completion_cost": 0.014901000000000001
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 839,
            "span_id": "SQLCompiler.get_order_by",
            "file_path": "django/db/models/sql/compiler.py"
          },
          {
            "rank": 1,
            "tokens": 105,
            "span_id": "SQLCompiler.get_extra_select",
            "file_path": "django/db/models/sql/compiler.py"
          },
          {
            "rank": 0,
            "tokens": 9,
            "span_id": "OrderBy.desc",
            "file_path": "django/db/models/expressions.py"
          },
          {
            "rank": 0,
            "tokens": 81,
            "span_id": "OrderBy.as_mysql",
            "file_path": "django/db/models/expressions.py"
          },
          {
            "rank": 0,
            "tokens": 32,
            "span_id": "OrderBy.get_group_by_cols",
            "file_path": "django/db/models/expressions.py"
          },
          {
            "rank": 0,
            "tokens": 9,
            "span_id": "OrderBy.asc",
            "file_path": "django/db/models/expressions.py"
          },
          {
            "rank": 0,
            "tokens": 47,
            "span_id": "OrderBy.reverse_ordering",
            "file_path": "django/db/models/expressions.py"
          },
          {
            "rank": 0,
            "tokens": 69,
            "span_id": "OrderBy.as_sqlite",
            "file_path": "django/db/models/expressions.py"
          },
          {
            "rank": 1,
            "tokens": 126,
            "span_id": "OrderBy.as_sql",
            "file_path": "django/db/models/expressions.py"
          },
          {
            "rank": 2,
            "tokens": 11,
            "span_id": "OrderBy.get_source_expressions",
            "file_path": "django/db/models/expressions.py"
          },
          {
            "rank": 2,
            "tokens": 18,
            "span_id": "OrderBy.set_source_expressions",
            "file_path": "django/db/models/expressions.py"
          },
          {
            "rank": 2,
            "tokens": 15,
            "span_id": "OrderBy",
            "file_path": "django/db/models/expressions.py"
          },
          {
            "rank": 2,
            "tokens": 30,
            "span_id": "OrderBy.__repr__",
            "file_path": "django/db/models/expressions.py"
          },
          {
            "rank": 3,
            "tokens": 5,
            "span_id": "RawSQL",
            "file_path": "django/db/models/expressions.py"
          },
          {
            "rank": 3,
            "tokens": 13,
            "span_id": "RawSQL.get_group_by_cols",
            "file_path": "django/db/models/expressions.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue concerns the incorrect removal of the 'order by' clause in SQL queries where the clause is expressed as multiline RawSQL. The issue is specifically located in the 'SQLCompiler.get_order_by()' method, where the 'self.ordering_parts' regular expression is failing to properly identify the full 'order by' clause due to the presence of newline characters. The search results provide a comprehensive view of the relevant code, including the 'SQLCompiler' class and its 'get_order_by' method. This method is crucial as it processes the 'order by' clauses and uses the 'ordering_parts' regular expression to parse the SQL query. The 'RawSQL' class, which is used to inject raw SQL strings into queries, is also present in the search results, confirming its relevance to the issue. Given the detailed context provided in the search results, it seems that the identified code spans are relevant to the reported issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "SQLCompiler",
                  "SQLCompiler.get_order_by"
                ],
                "file_path": "django/db/models/sql/compiler.py"
              },
              {
                "span_ids": [
                  "RawSQL"
                ],
                "file_path": "django/db/models/expressions.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4568,
          "output_tokens": 319,
          "retry_message": null,
          "completion_cost": 0.018489000000000002
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The file context provided includes the SQLCompiler class which contains the get_order_by method. This method is directly related to the issue described, focusing on the incorrect identification of duplicate 'order by' clauses in multiline RawSQL queries. The provided code snippet in SQLCompiler.get_order_by demonstrates the use of a regular expression (self.ordering_parts) to search and identify ordering parts within SQL queries. This matches the described problem where the regular expression incorrectly identifies duplicates based on the last line of the SQL passed. However, the specific line of code noted in the issue description (without_ordering = self.ordering_parts.search(sql).group(1)) is not directly provided in the file context, which is essential for understanding and directly addressing the issue. The other file context, django/db/models/expressions.py, does include the RawSQL class, which is related to the execution of RawSQL queries, essential for the issue but not specifically the method where the bug occurs.",
            "search_suggestions": "Look for the specific line mentioned in the issue description within the SQLCompiler class, particularly within the get_order_by method. This line (without_ordering = self.ordering_parts.search(sql).group(1)) is crucial as it directly relates to the regular expression used for identifying 'order by' clauses, which is the root of the problem described."
          },
          "output": {
            "message": "Look for the specific line mentioned in the issue description within the SQLCompiler class, particularly within the get_order_by method. This line (without_ordering = self.ordering_parts.search(sql).group(1)) is crucial as it directly relates to the regular expression used for identifying 'order by' clauses, which is the root of the problem described."
          },
          "input_tokens": 3148,
          "output_tokens": 319,
          "retry_message": null,
          "completion_cost": 0.014229000000000002
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look for the specific line mentioned in the issue description within the SQLCompiler class, particularly within the get_order_by method. This line (without_ordering = self.ordering_parts.search(sql).group(1)) is crucial as it directly relates to the regular expression used for identifying 'order by' clauses, which is the root of the problem described.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "scratch_pad": "The specific line mentioned in the issue description ('without_ordering = self.ordering_parts.search(sql).group(1)') has been found within the 'get_order_by' method of the SQLCompiler class in the 'django/db/models/sql/compiler.py' file. This line is the focus of the issue as it is related to the regular expression used for identifying 'order by' clauses, which is leading to the problem of incorrect removal of the 'order by' clause when handling multiline RawSQL queries. The search can now be considered complete as the relevant code has been located.",
            "search_requests": []
          },
          "output": {
            "message": "The specific line mentioned in the issue description ('without_ordering = self.ordering_parts.search(sql).group(1)') has been found within the 'get_order_by' method of the SQLCompiler class in the 'django/db/models/sql/compiler.py' file. This line is the focus of the issue as it is related to the regular expression used for identifying 'order by' clauses, which is leading to the problem of incorrect removal of the 'order by' clause when handling multiline RawSQL queries. The search can now be considered complete as the relevant code has been located."
          },
          "input_tokens": 5528,
          "output_tokens": 156,
          "retry_message": null,
          "completion_cost": 0.018924000000000003
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "The specific line mentioned in the issue description ('without_ordering = self.ordering_parts.search(sql).group(1)') has been found within the 'get_order_by' method of the SQLCompiler class in the 'django/db/models/sql/compiler.py' file. This line is the focus of the issue as it is related to the regular expression used for identifying 'order by' clauses, which is leading to the problem of incorrect removal of the 'order by' clause when handling multiline RawSQL queries. The search can now be considered complete as the relevant code has been located.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "SQLCompiler.get_order_by",
            "file_path": "django/db/models/sql/compiler.py",
            "scratch_pad": "The issue involves the incorrect removal of the 'order by' clause when handling multiline RawSQL queries. This is due to the regular expression used in SQLCompiler.get_order_by() which incorrectly identifies 'order by' clauses. The proposed solution involves removing newline characters from the SQL string before applying the regular expression. This should ensure that the entire SQL string is considered, preventing the removal of valid 'order by' clauses.",
            "instructions": "Rewrite the line 'without_ordering = self.ordering_parts.search(sql).group(1)' to first clean the SQL string of newline characters by replacing them with spaces. This ensures that the regular expression processes the entire SQL string and not just individual lines. The updated line should be 'sql_oneline = ' '.join(sql.split('\n'))' followed by 'without_ordering = self.ordering_parts.search(sql_oneline).group(1)'."
          },
          "output": {
            "span_id": "SQLCompiler.get_order_by",
            "file_path": "django/db/models/sql/compiler.py",
            "instructions": "Rewrite the line 'without_ordering = self.ordering_parts.search(sql).group(1)' to first clean the SQL string of newline characters by replacing them with spaces. This ensures that the regular expression processes the entire SQL string and not just individual lines. The updated line should be 'sql_oneline = ' '.join(sql.split('\n'))' followed by 'without_ordering = self.ordering_parts.search(sql_oneline).group(1)'."
          },
          "input_tokens": 4258,
          "output_tokens": 255,
          "retry_message": null,
          "completion_cost": 0.016599000000000003
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "SQLCompiler.get_order_by",
        "end_line": null,
        "file_path": "django/db/models/sql/compiler.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Rewrite the line 'without_ordering = self.ordering_parts.search(sql).group(1)' to first clean the SQL string of newline characters by replacing them with spaces. This ensures that the regular expression processes the entire SQL string and not just individual lines. The updated line should be 'sql_oneline = ' '.join(sql.split('\n'))' followed by 'without_ordering = self.ordering_parts.search(sql_oneline).group(1)'.\n\nThe line to be modified is on line 356, which needs to be replaced by two new lines as specified in the instructions to clean the SQL string and then process it.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 356,
            "start_line": 356,
            "scratch_pad": "The line to be modified is on line 356, which needs to be replaced by two new lines as specified in the instructions to clean the SQL string and then process it."
          },
          "output": {
            "span_id": "SQLCompiler.get_order_by",
            "end_line": 360,
            "file_path": "django/db/models/sql/compiler.py",
            "start_line": 352,
            "instructions": "Rewrite the line 'without_ordering = self.ordering_parts.search(sql).group(1)' to first clean the SQL string of newline characters by replacing them with spaces. This ensures that the regular expression processes the entire SQL string and not just individual lines. The updated line should be 'sql_oneline = ' '.join(sql.split('\n'))' followed by 'without_ordering = self.ordering_parts.search(sql_oneline).group(1)'.\n\nThe line to be modified is on line 356, which needs to be replaced by two new lines as specified in the instructions to clean the SQL string and then process it."
          },
          "input_tokens": 2101,
          "output_tokens": 76,
          "retry_message": null,
          "completion_cost": 0.007443
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "SQLCompiler.get_order_by",
        "end_line": 360,
        "file_path": "django/db/models/sql/compiler.py",
        "max_tokens": 1000,
        "start_line": 352,
        "temperature": 1.6,
        "instructions": "Rewrite the line 'without_ordering = self.ordering_parts.search(sql).group(1)' to first clean the SQL string of newline characters by replacing them with spaces. This ensures that the regular expression processes the entire SQL string and not just individual lines. The updated line should be 'sql_oneline = ' '.join(sql.split('\n'))' followed by 'without_ordering = self.ordering_parts.search(sql_oneline).group(1)'.\n\nThe line to be modified is on line 356, which needs to be replaced by two new lines as specified in the instructions to clean the SQL string and then process it.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n            # Don't add the same column twice, but the order direction is\n            # not taken into account so we strip it. When this entire method\n            # is refactored into expressions, then we can check each part as we\n            # generate it.\n            sql_oneline = ' '.join(sql.split('\\n'))\n            without_ordering = self.ordering_parts.search(sql_oneline).group(1)\n            params_hash = make_hashable(params)\n            if (without_ordering, params_hash) in seen:\n                continue\n            seen.add((without_ordering, params_hash))\n</replace>"
          },
          "output": {
            "diff": "--- django/db/models/sql/compiler.py\n+++ django/db/models/sql/compiler.py\n@@ -353,7 +353,8 @@\n             # not taken into account so we strip it. When this entire method\n             # is refactored into expressions, then we can check each part as we\n             # generate it.\n-            without_ordering = self.ordering_parts.search(sql).group(1)\n+            sql_oneline = ' '.join(sql.split('\\n'))\n+            without_ordering = self.ordering_parts.search(sql_oneline).group(1)\n             params_hash = make_hashable(params)\n             if (without_ordering, params_hash) in seen:\n                 continue\n",
            "message": "Applied the change to django/db/models/sql/compiler.py.",
            "verification_errors": []
          },
          "input_tokens": 4416,
          "output_tokens": 149,
          "retry_message": null,
          "completion_cost": 0.015483
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- django/db/models/sql/compiler.py\n+++ django/db/models/sql/compiler.py\n@@ -353,7 +353,8 @@\n             # not taken into account so we strip it. When this entire method\n             # is refactored into expressions, then we can check each part as we\n             # generate it.\n-            without_ordering = self.ordering_parts.search(sql).group(1)\n+            sql_oneline = ' '.join(sql.split('\\n'))\n+            without_ordering = self.ordering_parts.search(sql_oneline).group(1)\n             params_hash = make_hashable(params)\n             if (without_ordering, params_hash) in seen:\n                 continue\n",
        "model": "deepseek-coder",
        "message": "Applied the change to django/db/models/sql/compiler.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The change has been applied as intended, addressing the issue of incorrect 'order by' clause removal when handling multiline RawSQL queries. The solution involves ensuring that the entire SQL string is processed rather than just individual lines, which aligns with the reported issue and the provided file context.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The initial change has been successfully applied by removing newline characters from the SQL string before applying the regular expression. This ensures that the entire SQL string is considered, preventing the removal of valid 'order by' clauses. Based on the issue description and the provided context, this change should resolve the problem of incorrect 'order by' clause removal when handling multiline RawSQL queries.",
            "instructions": null
          },
          "output": {
            "message": "The change has been applied as intended, addressing the issue of incorrect 'order by' clause removal when handling multiline RawSQL queries. The solution involves ensuring that the entire SQL string is processed rather than just individual lines, which aligns with the reported issue and the provided file context."
          },
          "input_tokens": 6015,
          "output_tokens": 192,
          "retry_message": null,
          "completion_cost": 0.020925000000000003
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The change has been applied as intended, addressing the issue of incorrect 'order by' clause removal when handling multiline RawSQL queries. The solution involves ensuring that the entire SQL string is processed rather than just individual lines, which aligns with the reported issue and the provided file context.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Incorrect removal of order_by clause created as multiline RawSQL\nDescription\n\t\nHi.\nThe SQLCompiler is ripping off one of my \"order by\" clause, because he \"thinks\" the clause was already \"seen\" (in SQLCompiler.get_order_by()). I'm using expressions written as multiline RawSQLs, which are similar but not the same. \nThe bug is located in SQLCompiler.get_order_by(), somewhere around line computing part of SQL query without ordering:\nwithout_ordering = self.ordering_parts.search(sql).group(1)\nThe sql variable contains multiline sql. As a result, the self.ordering_parts regular expression is returning just a line containing ASC or DESC words. This line is added to seen set, and because my raw queries have identical last lines, only the first clasue is returing from SQLCompiler.get_order_by().\nAs a quick/temporal fix I can suggest making sql variable clean of newline characters, like this:\nsql_oneline = ' '.join(sql.split('\\n'))\nwithout_ordering = self.ordering_parts.search(sql_oneline).group(1)\nNote: beware of unicode (Py2.x u'') and EOL dragons (\\r).\nExample of my query:\n\treturn MyModel.objects.all().order_by(\n\t\tRawSQL('''\n\t\t\tcase when status in ('accepted', 'verification')\n\t\t\t\t then 2 else 1 end''', []).desc(),\n\t\tRawSQL('''\n\t\t\tcase when status in ('accepted', 'verification')\n\t\t\t\t then (accepted_datetime, preferred_datetime)\n\t\t\t\t else null end''', []).asc(),\n\t\tRawSQL('''\n\t\t\tcase when status not in ('accepted', 'verification')\n\t\t\t\t then (accepted_datetime, preferred_datetime, created_at)\n\t\t\t\t else null end''', []).desc())\nThe ordering_parts.search is returing accordingly:\n'\t\t\t\t then 2 else 1 end)'\n'\t\t\t\t else null end'\n'\t\t\t\t else null end'\nSecond RawSQL with a\t\t\t\t else null end part is removed from query.\nThe fun thing is that the issue can be solved by workaround by adding a space or any other char to the last line. \nSo in case of RawSQL I can just say, that current implementation of avoiding duplicates in order by clause works only for special/rare cases (or does not work in all cases). \nThe bug filed here is about wrong identification of duplicates (because it compares only last line of SQL passed to order by clause).\nHope my notes will help you fixing the issue. Sorry for my english.\n"
}