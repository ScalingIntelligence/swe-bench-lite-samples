{
  "info": {
    "duration": 217.9183166027069,
    "submission": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ce18098fd2..9ad140206d 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1255,7 +1255,7 @@ class Query(BaseExpression):\n             raise FieldError(\"Cannot parse keyword query %r\" % arg)\n         lookups, parts, reffed_expression = self.solve_lookup_type(arg)\n \n-        if check_filterable:\n+        if check_filterable and hasattr(reffed_expression, 'field') and reffed_expression.field.filterable:\n             self.check_filterable(reffed_expression)\n \n         if not allow_joins and len(parts) > 1:\n@@ -1265,7 +1265,7 @@ class Query(BaseExpression):\n         value = self.resolve_lookup_value(value, can_reuse, allow_joins)\n         used_joins = {k for k, v in self.alias_refcount.items() if v > pre_joins.get(k, 0)}\n \n-        if check_filterable:\n+        if check_filterable and (hasattr(value, 'field') and value.field.filterable):\n             self.check_filterable(value)\n \n         clause = self.where_class()\n",
    "total_cost": 0.17219099999999998,
    "instance_id": "django__django-13028",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves a NotSupportedError triggered when filtering a queryset with a 'filterable=False' attribute in the ProductMetaDataType model. The error traces back to the `build_filter` method in django/db/models/sql/query.py, which is responsible for adding filters to the query. The problematic attribute 'filterable' leads to this error. Several files in Django's ORM are likely involved, focusing on the query building and filtering mechanisms. Key files in Django's ORM that need inspection include django/db/models/sql/query.py, django/db/models/base.py, and django/db/models/fields/related.py. Additionally, the ProductMetaDataType and ProductMetaData models in the adminpricing app should be reviewed for the 'filterable' attribute handling.",
            "search_requests": [
              {
                "query": "filterable=False attribute",
                "class_names": [
                  "ProductMetaDataType",
                  "ProductMetaData"
                ],
                "code_snippet": null,
                "file_pattern": "**/adminpricing/**/*.py",
                "function_names": []
              },
              {
                "query": "filter clause error",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/django/db/models/**/*.py",
                "function_names": [
                  "build_filter"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 1289,
                "span_id": "Query.build_filter",
                "file_path": "django/db/models/sql/query.py"
              }
            ],
            "search_requests": [
              {
                "query": "filterable=False attribute",
                "class_names": [
                  "ProductMetaDataType",
                  "ProductMetaData"
                ],
                "code_snippet": null,
                "file_pattern": "**/adminpricing/**/*.py",
                "function_names": []
              },
              {
                "query": "filter clause error",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/django/db/models/**/*.py",
                "function_names": [
                  "build_filter"
                ]
              }
            ]
          },
          "input_tokens": 3765,
          "output_tokens": 317,
          "retry_message": null,
          "completion_cost": 0.016050000000000002
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 1289,
            "span_id": "Query.build_filter",
            "file_path": "django/db/models/sql/query.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "To identify the relevant code spans for the issue described, I looked at the code related to the Query class in Django's ORM. The error traceback pointed to a 'NotSupportedError' being raised in the 'build_filter' method of the 'Query' class. This error occurs when the 'check_filterable' method is called, suggesting that the issue is with how filterable fields are handled. Specifically, the 'build_filter' method constructs filters for querysets, and it checks if the fields being filtered on are 'filterable'. The traceback indicates that the 'ProductMetaDataType' model's 'filterable' field is causing the issue, which aligns with the user's description of changing 'label' to 'filterable_test' fixing the issue. I selected the relevant spans of code from the 'Query.__init__' and 'Query.build_filter' methods to address the reported issue since these methods directly relate to the error traceback and the functionality of filtering in Django's ORM.",
            "identified_spans": [
              {
                "span_ids": [
                  "Query.__init__",
                  "Query.build_filter"
                ],
                "file_path": "django/db/models/sql/query.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3764,
          "output_tokens": 295,
          "retry_message": null,
          "completion_cost": 0.015717000000000002
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The provided file context includes the relevant code snippet from django/db/models/sql/query.py, which is crucial for understanding and addressing the issue. The `build_filter` method, where the error traceback leads, is found in the file context, indicating that the key area of code related to the reported issue is provided. This method includes the `check_filterable` function call, which is likely to raise the `NotSupportedError`, as mentioned in the error traceback. Given the context, it appears that the necessary code to further investigate and potentially resolve the issue is available. However, the specific handling of the 'filterable' attribute within the ProductMetaDataType and ProductMetaData models is not directly shown in this context, but the key Django ORM processing code is present.",
            "search_suggestions": "Review the ProductMetaDataType and ProductMetaData models in the adminpricing app for the exact handling of the 'filterable' attribute and how it interacts with the Django ORM. Additionally, inspect any custom methods or overridden functions related to model querying within these models or the Django ORM that could impact the filterability of fields."
          },
          "output": {
            "message": "Review the ProductMetaDataType and ProductMetaData models in the adminpricing app for the exact handling of the 'filterable' attribute and how it interacts with the Django ORM. Additionally, inspect any custom methods or overridden functions related to model querying within these models or the Django ORM that could impact the filterability of fields."
          },
          "input_tokens": 3751,
          "output_tokens": 266,
          "retry_message": null,
          "completion_cost": 0.015243000000000001
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Review the ProductMetaDataType and ProductMetaData models in the adminpricing app for the exact handling of the 'filterable' attribute and how it interacts with the Django ORM. Additionally, inspect any custom methods or overridden functions related to model querying within these models or the Django ORM that could impact the filterability of fields.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The provided context gives insights into Django's Query class, focusing on the `build_filter` method. This method is central to how Django constructs database queries and handles filtering conditions. The method is designed to process filter expressions, either as Q objects or as key-value pairs, and build corresponding SQL conditions. It also checks the 'filterable' attribute of fields, which suggests that the issue might be related to how the ORM handles model fields marked with 'filterable=False'. The traceback indicates that the error occurs when the ORM tries to add a filter involving a field with 'filterable=False', leading to a NotSupportedError. Given this information, the next step should focus on inspecting the ProductMetaDataType and ProductMetaData models in the adminpricing app to understand exactly how the 'filterable' attribute is handled and how it interacts with Django's ORM. Additionally, any custom methods or overridden functions related to model querying within these models or within Django's ORM that could impact the filterability of fields should be inspected.",
            "search_requests": [
              {
                "query": "filterable attribute",
                "class_names": [
                  "ProductMetaDataType",
                  "ProductMetaData"
                ],
                "code_snippet": null,
                "file_pattern": "**/adminpricing/**/*.py",
                "function_names": []
              },
              {
                "query": "filter clause handling",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/django/db/models/**/*.py",
                "function_names": [
                  "build_filter"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 1289,
                "span_id": "Query.build_filter",
                "file_path": "django/db/models/sql/query.py"
              }
            ],
            "search_requests": [
              {
                "query": "filterable attribute",
                "class_names": [
                  "ProductMetaDataType",
                  "ProductMetaData"
                ],
                "code_snippet": null,
                "file_pattern": "**/adminpricing/**/*.py",
                "function_names": []
              },
              {
                "query": "filter clause handling",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/django/db/models/**/*.py",
                "function_names": [
                  "build_filter"
                ]
              }
            ]
          },
          "input_tokens": 6082,
          "output_tokens": 390,
          "retry_message": null,
          "completion_cost": 0.024096000000000003
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 1289,
            "span_id": "Query.build_filter",
            "file_path": "django/db/models/sql/query.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue describes a NotSupportedError when filtering a queryset where the RHS has a filterable=False attribute. This error appears to be triggered in the build_filter method of the Query class in django/db/models/sql/query.py. The provided search results confirm the presence of this method in the same file. By examining the build_filter method, it's clear that it performs checks for the filterable attribute via the check_filterable method. The method's logic includes raising a FieldError if a certain condition is not met, which might be related to the reported issue. Based on the reported issue and the search results, it's reasonable to conclude that the relevant code spans are within the build_filter method as it directly handles the filter expressions and checks for filterability. This method also interacts with other parts of the codebase that could potentially be involved in the error, such as the resolve_lookup_value and setup_joins methods. Further investigation into the check_filterable method and its usage might be necessary to fully understand the cause, but for now, the relevant code spans have been identified as the ones within the build_filter method.",
            "identified_spans": [
              {
                "span_ids": [
                  "Query.build_filter"
                ],
                "file_path": "django/db/models/sql/query.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 5692,
          "output_tokens": 316,
          "retry_message": null,
          "completion_cost": 0.021816000000000002
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context provided focuses on Django's Query class, specifically the `build_filter` method. This method is crucial for understanding how Django processes filters and what checks are applied during this process. The context includes details about handling filter expressions, resolving values, and checking the 'filterable' attribute. Given the reported issue, where a NotSupportedError occurs when filtering on a field with 'filterable=False', the `check_filterable` method is a key area of focus in the provided context. This method ensures that fields involved in filtering are 'filterable', which directly relates to the error encountered in the issue description. The context offers insights into the internal workings of Django's filter handling, including checks on filterability and the construction of SQL conditions, which are directly relevant to the reported problem. As the error traceback suggests, the issue arises from trying to filter on a non-filterable field, and the provided context clearly outlines how Django manages this aspect, making it relevant and useful for addressing the issue. Therefore, based on the provided context, it is reasonable to consider the task complete, as the relevant code and method for handling this specific issue are identified.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 4301,
          "output_tokens": 278,
          "retry_message": null,
          "completion_cost": 0.017072999999999998
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "Query.build_filter",
            "file_path": "django/db/models/sql/query.py",
            "scratch_pad": "The issue arises due to the 'filterable' attribute in the ProductMetaDataType model. The check_filterable method in the Query class is raising a NotSupportedError when it encounters this attribute during filtering. We need to modify the build_filter method to bypass the check_filterable method when the related model field has a 'filterable' attribute set to False.",
            "instructions": "Modify the build_filter method to include a check for the 'filterable' attribute in the related model field. If the 'filterable' attribute is False, bypass the check_filterable method."
          },
          "output": {
            "span_id": "Query.build_filter",
            "file_path": "django/db/models/sql/query.py",
            "instructions": "Modify the build_filter method to include a check for the 'filterable' attribute in the related model field. If the 'filterable' attribute is False, bypass the check_filterable method."
          },
          "input_tokens": 4386,
          "output_tokens": 180,
          "retry_message": null,
          "completion_cost": 0.015858
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "Query.build_filter",
        "end_line": null,
        "file_path": "django/db/models/sql/query.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Modify the build_filter method to include a check for the 'filterable' attribute in the related model field. If the 'filterable' attribute is False, bypass the check_filterable method.\n\nThe build_filter method needs to be modified to check the 'filterable' attribute before calling self.check_filterable(). This check should be done for both reffed_expression and value, but only if check_filterable is True. The relevant lines to modify are the lines where self.check_filterable() is called.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 1269,
            "start_line": 1258,
            "scratch_pad": "The build_filter method needs to be modified to check the 'filterable' attribute before calling self.check_filterable(). This check should be done for both reffed_expression and value, but only if check_filterable is True. The relevant lines to modify are the lines where self.check_filterable() is called."
          },
          "output": {
            "span_id": "Query.build_filter",
            "end_line": 1269,
            "file_path": "django/db/models/sql/query.py",
            "start_line": 1258,
            "instructions": "Modify the build_filter method to include a check for the 'filterable' attribute in the related model field. If the 'filterable' attribute is False, bypass the check_filterable method.\n\nThe build_filter method needs to be modified to check the 'filterable' attribute before calling self.check_filterable(). This check should be done for both reffed_expression and value, but only if check_filterable is True. The relevant lines to modify are the lines where self.check_filterable() is called."
          },
          "input_tokens": 2817,
          "output_tokens": 111,
          "retry_message": null,
          "completion_cost": 0.010116
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "Query.build_filter",
        "end_line": 1269,
        "file_path": "django/db/models/sql/query.py",
        "max_tokens": 1000,
        "start_line": 1258,
        "temperature": 1.6,
        "instructions": "Modify the build_filter method to include a check for the 'filterable' attribute in the related model field. If the 'filterable' attribute is False, bypass the check_filterable method.\n\nThe build_filter method needs to be modified to check the 'filterable' attribute before calling self.check_filterable(). This check should be done for both reffed_expression and value, but only if check_filterable is True. The relevant lines to modify are the lines where self.check_filterable() is called.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\n        if check_filterable and hasattr(reffed_expression, 'field') and reffed_expression.field.filterable:\n            self.check_filterable(reffed_expression)\n\n        if not allow_joins and len(parts) > 1:\n            raise FieldError(\"Joined field references are not permitted in this query\")\n\n        pre_joins = self.alias_refcount.copy()\n        value = self.resolve_lookup_value(value, can_reuse, allow_joins)\n        used_joins = {k for k, v in self.alias_refcount.items() if v > pre_joins.get(k, 0)}\n\n        if check_filterable and (hasattr(value, 'field') and value.field.filterable):\n            self.check_filterable(value)\n</replace>"
          },
          "output": {
            "diff": "--- django/db/models/sql/query.py\n+++ django/db/models/sql/query.py\n@@ -1255,7 +1255,7 @@\n             raise FieldError(\"Cannot parse keyword query %r\" % arg)\n         lookups, parts, reffed_expression = self.solve_lookup_type(arg)\n \n-        if check_filterable:\n+        if check_filterable and hasattr(reffed_expression, 'field') and reffed_expression.field.filterable:\n             self.check_filterable(reffed_expression)\n \n         if not allow_joins and len(parts) > 1:\n@@ -1265,7 +1265,7 @@\n         value = self.resolve_lookup_value(value, can_reuse, allow_joins)\n         used_joins = {k for k, v in self.alias_refcount.items() if v > pre_joins.get(k, 0)}\n \n-        if check_filterable:\n+        if check_filterable and (hasattr(value, 'field') and value.field.filterable):\n             self.check_filterable(value)\n \n         clause = self.where_class()\n",
            "message": "Applied the change to django/db/models/sql/query.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 5448,
          "output_tokens": 203,
          "retry_message": null,
          "completion_cost": 0.019389
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- django/db/models/sql/query.py\n+++ django/db/models/sql/query.py\n@@ -1255,7 +1255,7 @@\n             raise FieldError(\"Cannot parse keyword query %r\" % arg)\n         lookups, parts, reffed_expression = self.solve_lookup_type(arg)\n \n-        if check_filterable:\n+        if check_filterable and hasattr(reffed_expression, 'field') and reffed_expression.field.filterable:\n             self.check_filterable(reffed_expression)\n \n         if not allow_joins and len(parts) > 1:\n@@ -1265,7 +1265,7 @@\n         value = self.resolve_lookup_value(value, can_reuse, allow_joins)\n         used_joins = {k for k, v in self.alias_refcount.items() if v > pre_joins.get(k, 0)}\n \n-        if check_filterable:\n+        if check_filterable and (hasattr(value, 'field') and value.field.filterable):\n             self.check_filterable(value)\n \n         clause = self.where_class()\n",
        "model": "deepseek-coder",
        "message": "Applied the change to django/db/models/sql/query.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The changes have been applied as requested. The build_filter method now includes checks for the 'filterable' attribute, and it bypasses the check_filterable method when the attribute is set to False.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The initial change has been applied. Now, let's confirm the changes and ensure they match the requirements specified in the issue.",
            "instructions": null
          },
          "output": {
            "message": "The changes have been applied as requested. The build_filter method now includes checks for the 'filterable' attribute, and it bypasses the check_filterable method when the attribute is set to False."
          },
          "input_tokens": 4961,
          "output_tokens": 130,
          "retry_message": null,
          "completion_cost": 0.016833
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The changes have been applied as requested. The build_filter method now includes checks for the 'filterable' attribute, and it bypasses the check_filterable method when the attribute is set to False.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Queryset raises NotSupportedError when RHS has filterable=False attribute.\nDescription\n\t \n\t\t(last modified by Nicolas Baccelli)\n\t \nI'm migrating my app to django 3.0.7 and I hit a strange behavior using a model class with a field labeled filterable\nclass ProductMetaDataType(models.Model):\n\tlabel = models.CharField(max_length=255, unique=True, blank=False, null=False)\n\tfilterable = models.BooleanField(default=False, verbose_name=_(\"filterable\"))\n\tclass Meta:\n\t\tapp_label = \"adminpricing\"\n\t\tverbose_name = _(\"product meta data type\")\n\t\tverbose_name_plural = _(\"product meta data types\")\n\tdef __str__(self):\n\t\treturn self.label\nclass ProductMetaData(models.Model):\n\tid = models.BigAutoField(primary_key=True)\n\tproduct = models.ForeignKey(\n\t\tProduit, null=False, blank=False, on_delete=models.CASCADE\n\t)\n\tvalue = models.TextField(null=False, blank=False)\n\tmarketplace = models.ForeignKey(\n\t\tPlateforme, null=False, blank=False, on_delete=models.CASCADE\n\t)\n\tdate_created = models.DateTimeField(null=True, default=timezone.now)\n\tmetadata_type = models.ForeignKey(\n\t\tProductMetaDataType, null=False, blank=False, on_delete=models.CASCADE\n\t)\n\tclass Meta:\n\t\tapp_label = \"adminpricing\"\n\t\tverbose_name = _(\"product meta data\")\n\t\tverbose_name_plural = _(\"product meta datas\")\nError happened when filtering ProductMetaData with a metadata_type :\nProductMetaData.objects.filter(value=\"Dark Vador\", metadata_type=self.brand_metadata)\nError traceback :\nTraceback (most recent call last):\n File \"/backoffice/backoffice/adminpricing/tests/test_pw.py\", line 481, in test_checkpolicywarning_by_fields\n\tfor p in ProductMetaData.objects.filter(\n File \"/usr/local/lib/python3.8/site-packages/django/db/models/manager.py\", line 82, in manager_method\n\treturn getattr(self.get_queryset(), name)(*args, **kwargs)\n File \"/usr/local/lib/python3.8/site-packages/django/db/models/query.py\", line 904, in filter\n\treturn self._filter_or_exclude(False, *args, **kwargs)\n File \"/usr/local/lib/python3.8/site-packages/django/db/models/query.py\", line 923, in _filter_or_exclude\n\tclone.query.add_q(Q(*args, **kwargs))\n File \"/usr/local/lib/python3.8/site-packages/django/db/models/sql/query.py\", line 1351, in add_q\n\tclause, _ = self._add_q(q_object, self.used_aliases)\n File \"/usr/local/lib/python3.8/site-packages/django/db/models/sql/query.py\", line 1378, in _add_q\n\tchild_clause, needed_inner = self.build_filter(\n File \"/usr/local/lib/python3.8/site-packages/django/db/models/sql/query.py\", line 1264, in build_filter\n\tself.check_filterable(value)\n File \"/usr/local/lib/python3.8/site-packages/django/db/models/sql/query.py\", line 1131, in check_filterable\n\traise NotSupportedError(\ndjango.db.utils.NotSupportedError: ProductMetaDataType is disallowed in the filter clause.\nI changed label to filterable_test and it fixed this issue\nThis should be documented or fix.\n"
}