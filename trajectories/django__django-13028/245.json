{
  "info": {
    "duration": 223.67694568634033,
    "submission": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ce18098fd2..db2576c312 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1254,8 +1254,7 @@ class Query(BaseExpression):\n         if not arg:\n             raise FieldError(\"Cannot parse keyword query %r\" % arg)\n         lookups, parts, reffed_expression = self.solve_lookup_type(arg)\n-\n-        if check_filterable:\n+        if check_filterable and getattr(reffed_expression, 'filterable', True):\n             self.check_filterable(reffed_expression)\n \n         if not allow_joins and len(parts) > 1:\n@@ -1265,7 +1264,7 @@ class Query(BaseExpression):\n         value = self.resolve_lookup_value(value, can_reuse, allow_joins)\n         used_joins = {k for k, v in self.alias_refcount.items() if v > pre_joins.get(k, 0)}\n \n-        if check_filterable:\n+        if check_filterable and getattr(value, 'filterable', True):\n             self.check_filterable(value)\n \n         clause = self.where_class()\n",
    "total_cost": 0.169398,
    "instance_id": "django__django-13028",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue describes a NotSupportedError raised when using a queryset filter with a field labeled 'filterable' in a model class. The error occurs specifically when filtering the ProductMetaData with a metadata_type that has the 'filterable' attribute set to False. This issue seems to be related to how Django handles filtering on fields that are not meant to be filterable. The provided file context suggests that the error might be originating from the 'check_filterable' method in the 'django/db/models/sql/query.py' file, as well as potential related methods and classes in other files. A focused search on these specific parts of the Django ORM logic would be appropriate.",
            "search_requests": [
              {
                "query": "filterable field in model class",
                "class_names": [
                  "ProductMetaDataType",
                  "ProductMetaData"
                ],
                "code_snippet": "ProductMetaData.objects.filter(value=\"Dark Vador\", metadata_type=self.brand_metadata)",
                "file_pattern": "**/django/db/models/**/*.py",
                "function_names": [
                  "check_filterable",
                  "build_filter",
                  "add_q"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 85,
                "span_id": "Query.check_filterable",
                "file_path": "django/db/models/sql/query.py"
              },
              {
                "rank": 0,
                "tokens": 1289,
                "span_id": "Query.build_filter",
                "file_path": "django/db/models/sql/query.py"
              },
              {
                "rank": 0,
                "tokens": 178,
                "span_id": "Query.add_q",
                "file_path": "django/db/models/sql/query.py"
              }
            ],
            "search_requests": [
              {
                "query": "filterable field in model class",
                "class_names": [
                  "ProductMetaDataType",
                  "ProductMetaData"
                ],
                "code_snippet": "ProductMetaData.objects.filter(value=\"Dark Vador\", metadata_type=self.brand_metadata)",
                "file_pattern": "**/django/db/models/**/*.py",
                "function_names": [
                  "check_filterable",
                  "build_filter",
                  "add_q"
                ]
              }
            ]
          },
          "input_tokens": 3765,
          "output_tokens": 299,
          "retry_message": null,
          "completion_cost": 0.01578
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 85,
            "span_id": "Query.check_filterable",
            "file_path": "django/db/models/sql/query.py"
          },
          {
            "rank": 0,
            "tokens": 1289,
            "span_id": "Query.build_filter",
            "file_path": "django/db/models/sql/query.py"
          },
          {
            "rank": 0,
            "tokens": 178,
            "span_id": "Query.add_q",
            "file_path": "django/db/models/sql/query.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves a `NotSupportedError` when filtering a queryset with a field that has the `filterable=False` attribute. This error occurs in the `django/db/models/sql/query.py` file. By analyzing the search results, we find that the relevant code spans are those that deal with the `check_filterable` and `build_filter` methods in the `Query` class. These methods are directly responsible for checking the filterability of expressions and building filters, respectively. The `Query.__init__` method is also included to provide context on the initialization of the `Query` object. These code spans are highly relevant as they are directly implicated in the reported issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "Query.__init__",
                  "Query.build_filter",
                  "Query.check_filterable"
                ],
                "file_path": "django/db/models/sql/query.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4003,
          "output_tokens": 227,
          "retry_message": null,
          "completion_cost": 0.015414
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The issue describes a NotSupportedError raised when using a queryset filter with a field labeled 'filterable' in a model class. The error occurs specifically when filtering the ProductMetaData with a metadata_type that has the 'filterable' attribute set to False. This issue seems to be related to how Django handles filtering on fields that are not meant to be filterable. The provided file context suggests that the error might be originating from the 'check_filterable' method in the 'django/db/models/sql/query.py' file, as well as potential related methods and classes in other files. A focused search on these specific parts of the Django ORM logic would be appropriate.",
            "search_suggestions": "Look for additional methods and classes in the Django ORM related to queryset filtering and field attributes, especially those interacting with the 'check_filterable' method and handling BooleanField attributes like 'filterable'."
          },
          "output": {
            "message": "Look for additional methods and classes in the Django ORM related to queryset filtering and field attributes, especially those interacting with the 'check_filterable' method and handling BooleanField attributes like 'filterable'."
          },
          "input_tokens": 3826,
          "output_tokens": 222,
          "retry_message": null,
          "completion_cost": 0.014808
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look for additional methods and classes in the Django ORM related to queryset filtering and field attributes, especially those interacting with the 'check_filterable' method and handling BooleanField attributes like 'filterable'.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "Reviewing the provided file context in 'django/db/models/sql/query.py', it is clear that the 'check_filterable' method and the 'build_filter' method are central to the issue at hand. The 'check_filterable' method is responsible for raising a NotSupportedError if the expression is not filterable. The 'build_filter' method uses 'check_filterable' to ensure that any referenced expression is filterable before constructing the filter clause. It is also noteworthy that 'build_filter' handles various types of filter expressions and joins, which could be relevant depending on how 'filterable' fields are integrated into complex queries. Given this context, it is worthwhile to expand the search to include methods and classes interacting directly with 'build_filter' and 'check_filterable', as well as any methods managing BooleanField attributes, particularly those that might influence the filterability of fields.",
            "search_requests": [
              {
                "query": "methods and classes interacting with build_filter and check_filterable",
                "class_names": [
                  "Query"
                ],
                "code_snippet": "def check_filterable(self, expression)",
                "file_pattern": "**/django/db/models/**/*.py",
                "function_names": [
                  "build_filter",
                  "check_filterable"
                ]
              },
              {
                "query": "handling BooleanField attributes like filterable",
                "class_names": [
                  "BooleanField"
                ],
                "code_snippet": "filterable = models.BooleanField(default=False, verbose_name=_(\"filterable\"))",
                "file_pattern": "**/django/db/models/**/*.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 217,
                "span_id": "Query.check_related_objects",
                "file_path": "django/db/models/sql/query.py"
              },
              {
                "rank": 0,
                "tokens": 85,
                "span_id": "Query.check_filterable",
                "file_path": "django/db/models/sql/query.py"
              }
            ],
            "search_requests": [
              {
                "query": "methods and classes interacting with build_filter and check_filterable",
                "class_names": [
                  "Query"
                ],
                "code_snippet": "def check_filterable(self, expression)",
                "file_pattern": "**/django/db/models/**/*.py",
                "function_names": [
                  "build_filter",
                  "check_filterable"
                ]
              },
              {
                "query": "handling BooleanField attributes like filterable",
                "class_names": [
                  "BooleanField"
                ],
                "code_snippet": "filterable = models.BooleanField(default=False, verbose_name=_(\"filterable\"))",
                "file_pattern": "**/django/db/models/**/*.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 6114,
          "output_tokens": 421,
          "retry_message": null,
          "completion_cost": 0.024657000000000002
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 217,
            "span_id": "Query.check_related_objects",
            "file_path": "django/db/models/sql/query.py"
          },
          {
            "rank": 0,
            "tokens": 85,
            "span_id": "Query.check_filterable",
            "file_path": "django/db/models/sql/query.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about a NotSupportedError being raised when the RHS of a queryset has a filterable=False attribute. The traceback points to the 'check_filterable' method in the 'Query' class within the 'django/db/models/sql/query.py' file. This method checks if an expression is filterable and raises a NotSupportedError if it is not. The provided file context and search results both contain the 'check_filterable' method, confirming that this is the relevant code span. The method's logic directly relates to the issue described, making it highly relevant. Additionally, the 'build_filter' method, which calls 'check_filterable', is also present in the context, further reinforcing the relevance. Therefore, the search results are indeed relevant to the reported issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "Query.check_filterable"
                ],
                "file_path": "django/db/models/sql/query.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4846,
          "output_tokens": 244,
          "retry_message": null,
          "completion_cost": 0.018198
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The analysis of the issue reveals that the problem stems from the 'check_filterable' method in the 'django/db/models/sql/query.py' file, where a NotSupportedError is raised if an expression is not filterable. This method is correctly identified in the file context. Additionally, the 'build_filter' method is also pertinent, as it uses 'check_filterable' to add filters to the query, ensuring that expressions are filterable before proceeding. Given that these key methods are prominently featured in the provided file context, it is reasonable to conclude that the relevant code for addressing the reported issue is indeed present in the file context. No further search suggestions are needed as the critical elements are already identified.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 4382,
          "output_tokens": 188,
          "retry_message": null,
          "completion_cost": 0.015966
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "Query.build_filter",
            "file_path": "django/db/models/sql/query.py",
            "scratch_pad": "To address the issue, we need to ensure that the 'filterable' attribute is respected when building filters in the queryset. The issue arises when the 'filterable' attribute is set to False, causing the query to raise a NotSupportedError. The current implementation in 'build_filter' calls 'check_filterable' without considering the 'filterable' attribute of the related model fields. We should avoid calling 'check_filterable' for fields that are explicitly marked as non-filterable.",
            "instructions": "Update the 'build_filter' method to check if the field being filtered is filterable before calling 'check_filterable'. If the field is not filterable, we should skip the call to 'check_filterable' to avoid raising the NotSupportedError."
          },
          "output": {
            "span_id": "Query.build_filter",
            "file_path": "django/db/models/sql/query.py",
            "instructions": "Update the 'build_filter' method to check if the field being filtered is filterable before calling 'check_filterable'. If the field is not filterable, we should skip the call to 'check_filterable' to avoid raising the NotSupportedError."
          },
          "input_tokens": 4506,
          "output_tokens": 221,
          "retry_message": null,
          "completion_cost": 0.016833
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "Query.build_filter",
        "end_line": null,
        "file_path": "django/db/models/sql/query.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Update the 'build_filter' method to check if the field being filtered is filterable before calling 'check_filterable'. If the field is not filterable, we should skip the call to 'check_filterable' to avoid raising the NotSupportedError.\n\nThe 'check_filterable' parameter should be used to determine if the field being filtered is filterable before calling 'check_filterable'. This logic needs to be implemented around lines 1258 and 1268 where 'check_filterable' is currently used without any precondition checks.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": false,
            "end_line": 1268,
            "start_line": 1257,
            "scratch_pad": "The 'check_filterable' parameter should be used to determine if the field being filtered is filterable before calling 'check_filterable'. This logic needs to be implemented around lines 1258 and 1268 where 'check_filterable' is currently used without any precondition checks."
          },
          "output": {
            "span_id": "Query.build_filter",
            "end_line": 1268,
            "file_path": "django/db/models/sql/query.py",
            "start_line": 1257,
            "instructions": "Update the 'build_filter' method to check if the field being filtered is filterable before calling 'check_filterable'. If the field is not filterable, we should skip the call to 'check_filterable' to avoid raising the NotSupportedError.\n\nThe 'check_filterable' parameter should be used to determine if the field being filtered is filterable before calling 'check_filterable'. This logic needs to be implemented around lines 1258 and 1268 where 'check_filterable' is currently used without any precondition checks."
          },
          "input_tokens": 2830,
          "output_tokens": 112,
          "retry_message": null,
          "completion_cost": 0.010170000000000002
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "Query.build_filter",
        "end_line": 1268,
        "file_path": "django/db/models/sql/query.py",
        "max_tokens": 1000,
        "start_line": 1257,
        "temperature": 1.6,
        "instructions": "Update the 'build_filter' method to check if the field being filtered is filterable before calling 'check_filterable'. If the field is not filterable, we should skip the call to 'check_filterable' to avoid raising the NotSupportedError.\n\nThe 'check_filterable' parameter should be used to determine if the field being filtered is filterable before calling 'check_filterable'. This logic needs to be implemented around lines 1258 and 1268 where 'check_filterable' is currently used without any precondition checks.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```\n<replace>\n\n        if check_filterable and getattr(reffed_expression, 'filterable', True):\n            self.check_filterable(reffed_expression)\n\n        if not allow_joins and len(parts) > 1:\n            raise FieldError(\"Joined field references are not permitted in this query\")\n\n        pre_joins = self.alias_refcount.copy()\n        value = self.resolve_lookup_value(value, can_reuse, allow_joins)\n        used_joins = {k for k, v in self.alias_refcount.items() if v > pre_joins.get(k, 0)}\n\n        if check_filterable and getattr(value, 'filterable', True):\n</replace>"
          },
          "output": {
            "diff": "--- django/db/models/sql/query.py\n+++ django/db/models/sql/query.py\n@@ -1254,8 +1254,7 @@\n         if not arg:\n             raise FieldError(\"Cannot parse keyword query %r\" % arg)\n         lookups, parts, reffed_expression = self.solve_lookup_type(arg)\n-\n-        if check_filterable:\n+        if check_filterable and getattr(reffed_expression, 'filterable', True):\n             self.check_filterable(reffed_expression)\n \n         if not allow_joins and len(parts) > 1:\n@@ -1265,7 +1264,7 @@\n         value = self.resolve_lookup_value(value, can_reuse, allow_joins)\n         used_joins = {k for k, v in self.alias_refcount.items() if v > pre_joins.get(k, 0)}\n \n-        if check_filterable:\n+        if check_filterable and getattr(value, 'filterable', True):\n             self.check_filterable(value)\n \n         clause = self.where_class()\n",
            "message": "Applied the change to django/db/models/sql/query.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 5565,
          "output_tokens": 176,
          "retry_message": null,
          "completion_cost": 0.019335
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- django/db/models/sql/query.py\n+++ django/db/models/sql/query.py\n@@ -1254,8 +1254,7 @@\n         if not arg:\n             raise FieldError(\"Cannot parse keyword query %r\" % arg)\n         lookups, parts, reffed_expression = self.solve_lookup_type(arg)\n-\n-        if check_filterable:\n+        if check_filterable and getattr(reffed_expression, 'filterable', True):\n             self.check_filterable(reffed_expression)\n \n         if not allow_joins and len(parts) > 1:\n@@ -1265,7 +1264,7 @@\n         value = self.resolve_lookup_value(value, can_reuse, allow_joins)\n         used_joins = {k for k, v in self.alias_refcount.items() if v > pre_joins.get(k, 0)}\n \n-        if check_filterable:\n+        if check_filterable and getattr(value, 'filterable', True):\n             self.check_filterable(value)\n \n         clause = self.where_class()\n",
        "model": "deepseek-coder",
        "message": "Applied the change to django/db/models/sql/query.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue reported has been addressed by modifying the 'build_filter' method to respect the 'filterable' attribute before calling 'check_filterable'. This change prevents the NotSupportedError from being raised when the 'filterable' attribute is False.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The change applied to 'build_filter' method in 'django/db/models/sql/query.py' ensures that 'check_filterable' is only called if the 'filterable' attribute is True. This addresses the issue where the queryset raises a NotSupportedError when the 'filterable' attribute is False. The change was verified in the provided git diff and appears to be correctly implemented.",
            "instructions": null
          },
          "output": {
            "message": "The issue reported has been addressed by modifying the 'build_filter' method to respect the 'filterable' attribute before calling 'check_filterable'. This change prevents the NotSupportedError from being raised when the 'filterable' attribute is False."
          },
          "input_tokens": 5094,
          "output_tokens": 197,
          "retry_message": null,
          "completion_cost": 0.018237
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue reported has been addressed by modifying the 'build_filter' method to respect the 'filterable' attribute before calling 'check_filterable'. This change prevents the NotSupportedError from being raised when the 'filterable' attribute is False.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Queryset raises NotSupportedError when RHS has filterable=False attribute.\nDescription\n\t \n\t\t(last modified by Nicolas Baccelli)\n\t \nI'm migrating my app to django 3.0.7 and I hit a strange behavior using a model class with a field labeled filterable\nclass ProductMetaDataType(models.Model):\n\tlabel = models.CharField(max_length=255, unique=True, blank=False, null=False)\n\tfilterable = models.BooleanField(default=False, verbose_name=_(\"filterable\"))\n\tclass Meta:\n\t\tapp_label = \"adminpricing\"\n\t\tverbose_name = _(\"product meta data type\")\n\t\tverbose_name_plural = _(\"product meta data types\")\n\tdef __str__(self):\n\t\treturn self.label\nclass ProductMetaData(models.Model):\n\tid = models.BigAutoField(primary_key=True)\n\tproduct = models.ForeignKey(\n\t\tProduit, null=False, blank=False, on_delete=models.CASCADE\n\t)\n\tvalue = models.TextField(null=False, blank=False)\n\tmarketplace = models.ForeignKey(\n\t\tPlateforme, null=False, blank=False, on_delete=models.CASCADE\n\t)\n\tdate_created = models.DateTimeField(null=True, default=timezone.now)\n\tmetadata_type = models.ForeignKey(\n\t\tProductMetaDataType, null=False, blank=False, on_delete=models.CASCADE\n\t)\n\tclass Meta:\n\t\tapp_label = \"adminpricing\"\n\t\tverbose_name = _(\"product meta data\")\n\t\tverbose_name_plural = _(\"product meta datas\")\nError happened when filtering ProductMetaData with a metadata_type :\nProductMetaData.objects.filter(value=\"Dark Vador\", metadata_type=self.brand_metadata)\nError traceback :\nTraceback (most recent call last):\n File \"/backoffice/backoffice/adminpricing/tests/test_pw.py\", line 481, in test_checkpolicywarning_by_fields\n\tfor p in ProductMetaData.objects.filter(\n File \"/usr/local/lib/python3.8/site-packages/django/db/models/manager.py\", line 82, in manager_method\n\treturn getattr(self.get_queryset(), name)(*args, **kwargs)\n File \"/usr/local/lib/python3.8/site-packages/django/db/models/query.py\", line 904, in filter\n\treturn self._filter_or_exclude(False, *args, **kwargs)\n File \"/usr/local/lib/python3.8/site-packages/django/db/models/query.py\", line 923, in _filter_or_exclude\n\tclone.query.add_q(Q(*args, **kwargs))\n File \"/usr/local/lib/python3.8/site-packages/django/db/models/sql/query.py\", line 1351, in add_q\n\tclause, _ = self._add_q(q_object, self.used_aliases)\n File \"/usr/local/lib/python3.8/site-packages/django/db/models/sql/query.py\", line 1378, in _add_q\n\tchild_clause, needed_inner = self.build_filter(\n File \"/usr/local/lib/python3.8/site-packages/django/db/models/sql/query.py\", line 1264, in build_filter\n\tself.check_filterable(value)\n File \"/usr/local/lib/python3.8/site-packages/django/db/models/sql/query.py\", line 1131, in check_filterable\n\traise NotSupportedError(\ndjango.db.utils.NotSupportedError: ProductMetaDataType is disallowed in the filter clause.\nI changed label to filterable_test and it fixed this issue\nThis should be documented or fix.\n"
}