{
  "info": {
    "duration": 178.98897075653076,
    "submission": "diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py\nindex ce18098fd2..f57f2157a4 100644\n--- a/django/db/models/sql/query.py\n+++ b/django/db/models/sql/query.py\n@@ -1255,7 +1255,7 @@ class Query(BaseExpression):\n             raise FieldError(\"Cannot parse keyword query %r\" % arg)\n         lookups, parts, reffed_expression = self.solve_lookup_type(arg)\n \n-        if check_filterable:\n+        if check_filterable and not self.has_filterable_false_field(reffed_expression):\n             self.check_filterable(reffed_expression)\n \n         if not allow_joins and len(parts) > 1:\n@@ -1265,7 +1265,7 @@ class Query(BaseExpression):\n         value = self.resolve_lookup_value(value, can_reuse, allow_joins)\n         used_joins = {k for k, v in self.alias_refcount.items() if v > pre_joins.get(k, 0)}\n \n-        if check_filterable:\n+        if check_filterable and not self.has_filterable_false_field(value):\n             self.check_filterable(value)\n \n         clause = self.where_class()\n@@ -2277,6 +2277,16 @@ class Query(BaseExpression):\n         self.set_select([f.get_col(select_alias) for f in select_fields])\n         return trimmed_prefix, contains_louter\n \n+    def has_filterable_false_field(self, expression):\n+        \"\"\"Check if the expression has a field with 'filterable=False'.\"\"\"\n+        if hasattr(expression, 'field') and hasattr(expression.field, 'filterable') and not expression.field.filterable:\n+            return True\n+        if hasattr(expression, 'get_source_expressions'):\n+            for expr in expression.get_source_expressions():\n+                if self.has_filterable_false_field(expr):\n+                    return True\n+        return False\n+\n     def is_nullable(self, field):\n         \"\"\"\n         Check if the given field should be treated as nullable.\n",
    "total_cost": 0.162777,
    "instance_id": "django__django-13028",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves a NotSupportedError raised when trying to filter a queryset with a field marked 'filterable=False'. This suggests a need to identify the specific handling of 'filterable' attributes within the query building process in Django's ORM. Given the traceback and the change that fixed the issue by renaming 'filterable' to 'filterable_test', it's crucial to review the 'build_filter' and 'check_filterable' methods in Django's query.py to understand how 'filterable' attributes are managed and why they might cause errors. Additionally, the related models 'ProductMetaDataType' and 'ProductMetaData' should be checked to ensure they conform to expected behavior.",
            "search_requests": [
              {
                "query": "filterable attribute handling",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/query.py",
                "function_names": [
                  "build_filter",
                  "check_filterable"
                ]
              },
              {
                "query": "ProductMetaDataType or ProductMetaData",
                "class_names": [
                  "ProductMetaDataType",
                  "ProductMetaData"
                ],
                "code_snippet": null,
                "file_pattern": "**/models.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 1289,
                "span_id": "Query.build_filter",
                "file_path": "django/db/models/sql/query.py"
              },
              {
                "rank": 2,
                "tokens": 85,
                "span_id": "Query.check_filterable",
                "file_path": "django/db/models/sql/query.py"
              }
            ],
            "search_requests": [
              {
                "query": "filterable attribute handling",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/query.py",
                "function_names": [
                  "build_filter",
                  "check_filterable"
                ]
              },
              {
                "query": "ProductMetaDataType or ProductMetaData",
                "class_names": [
                  "ProductMetaDataType",
                  "ProductMetaData"
                ],
                "code_snippet": null,
                "file_pattern": "**/models.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 3765,
          "output_tokens": 307,
          "retry_message": null,
          "completion_cost": 0.015899999999999997
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 1289,
            "span_id": "Query.build_filter",
            "file_path": "django/db/models/sql/query.py"
          },
          {
            "rank": 2,
            "tokens": 85,
            "span_id": "Query.check_filterable",
            "file_path": "django/db/models/sql/query.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves a NotSupportedError being raised when filtering a queryset with a field that has 'filterable=False'. This is relevant to the 'check_filterable' method in the 'Query' class within the 'query.py' file, as this method is responsible for checking if an expression is filterable and raising a NotSupportedError if it is not. Additionally, the 'build_filter' method calls 'check_filterable', making it also relevant to the issue. These methods are instrumental in understanding the conditions under which the NotSupportedError is triggered and how to mitigate or handle it. Given that no relevant code has been identified yet, these code spans are critical in addressing the reported issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "Query.check_filterable",
                  "Query.build_filter"
                ],
                "file_path": "django/db/models/sql/query.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3884,
          "output_tokens": 230,
          "retry_message": null,
          "completion_cost": 0.015102
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The provided file context includes the 'build_filter' and 'check_filterable' methods from Django's query.py, which are directly related to the reported issue concerning the 'filterable' attribute. These methods handle the filtering process and the checking of whether a field is filterable, aligning with the description of the issue. The code in the file context is sufficient to understand how the 'filterable' attribute could cause a NotSupportedError, as the 'check_filterable' method explicitly raises this error if the 'filterable' attribute is set to False. Therefore, the relevant part of the code base is present to complete the analysis of the issue.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 3831,
          "output_tokens": 175,
          "retry_message": null,
          "completion_cost": 0.014118
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "Query.build_filter",
            "file_path": "django/db/models/sql/query.py",
            "scratch_pad": "The issue involves a `NotSupportedError` being raised when trying to filter using a model field with `filterable=False`. This is happening in the `build_filter` method of the `Query` class. A potential fix is to disable the check for filterable if the filter expression involves a field with `filterable=False`.",
            "instructions": "Disable the filterable check if the filter expression involves a field with `filterable=False`."
          },
          "output": {
            "span_id": "Query.build_filter",
            "file_path": "django/db/models/sql/query.py",
            "instructions": "Disable the filterable check if the filter expression involves a field with `filterable=False`."
          },
          "input_tokens": 4506,
          "output_tokens": 153,
          "retry_message": null,
          "completion_cost": 0.015813
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "Query.build_filter",
        "end_line": null,
        "file_path": "django/db/models/sql/query.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Disable the filterable check if the filter expression involves a field with `filterable=False`.\n\nThe instruction requires disabling the filterable check if the filter expression involves a field with `filterable=False`. The relevant code segment where this check is performed and possibly disabled is around line 1258, where the `check_filterable` parameter is used. It is necessary to modify this part of the code to include the condition to check for `filterable=False`.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 1269,
            "start_line": 1258,
            "scratch_pad": "The instruction requires disabling the filterable check if the filter expression involves a field with `filterable=False`. The relevant code segment where this check is performed and possibly disabled is around line 1258, where the `check_filterable` parameter is used. It is necessary to modify this part of the code to include the condition to check for `filterable=False`."
          },
          "output": {
            "span_id": "Query.build_filter",
            "end_line": 1269,
            "file_path": "django/db/models/sql/query.py",
            "start_line": 1258,
            "instructions": "Disable the filterable check if the filter expression involves a field with `filterable=False`.\n\nThe instruction requires disabling the filterable check if the filter expression involves a field with `filterable=False`. The relevant code segment where this check is performed and possibly disabled is around line 1258, where the `check_filterable` parameter is used. It is necessary to modify this part of the code to include the condition to check for `filterable=False`."
          },
          "input_tokens": 2795,
          "output_tokens": 120,
          "retry_message": null,
          "completion_cost": 0.010185
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "Query.build_filter",
        "end_line": 1269,
        "file_path": "django/db/models/sql/query.py",
        "max_tokens": 1000,
        "start_line": 1258,
        "temperature": 1.6,
        "instructions": "Disable the filterable check if the filter expression involves a field with `filterable=False`.\n\nThe instruction requires disabling the filterable check if the filter expression involves a field with `filterable=False`. The relevant code segment where this check is performed and possibly disabled is around line 1258, where the `check_filterable` parameter is used. It is necessary to modify this part of the code to include the condition to check for `filterable=False`.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```html\n<replace>\n        if check_filterable and not self.has_filterable_false_field(reffed_expression):\n            self.check_filterable(reffed_expression)\n\n        if not allow_joins and len(parts) > 1:\n            raise FieldError(\"Joined field references are not permitted in this query\")\n\n        pre_joins = self.alias_refcount.copy()\n        value = self.resolve_lookup_value(value, can_reuse, allow_joins)\n        used_joins = {k for k, v in self.alias_refcount.items() if v > pre_joins.get(k, 0)}\n\n        if check_filterable and not self.has_filterable_false_field(value):\n            self.check_filterable(value)\n</replace>"
          },
          "output": {
            "diff": "--- django/db/models/sql/query.py\n+++ django/db/models/sql/query.py\n@@ -1255,7 +1255,7 @@\n             raise FieldError(\"Cannot parse keyword query %r\" % arg)\n         lookups, parts, reffed_expression = self.solve_lookup_type(arg)\n \n-        if check_filterable:\n+        if check_filterable and not self.has_filterable_false_field(reffed_expression):\n             self.check_filterable(reffed_expression)\n \n         if not allow_joins and len(parts) > 1:\n@@ -1265,7 +1265,7 @@\n         value = self.resolve_lookup_value(value, can_reuse, allow_joins)\n         used_joins = {k for k, v in self.alias_refcount.items() if v > pre_joins.get(k, 0)}\n \n-        if check_filterable:\n+        if check_filterable and not self.has_filterable_false_field(value):\n             self.check_filterable(value)\n \n         clause = self.where_class()\n",
            "message": "Applied the change to django/db/models/sql/query.py.\n\n<scratch_pad>\n```html\n</scratch_pad>",
            "verification_errors": [
              {
                "code": "E1101",
                "line": 1258,
                "message": "Instance of 'Query' has no 'has_filterable_false_field' member",
                "file_path": "django/db/models/sql/query.py"
              },
              {
                "code": "E1101",
                "line": 1268,
                "message": "Instance of 'Query' has no 'has_filterable_false_field' member",
                "file_path": "django/db/models/sql/query.py"
              }
            ]
          },
          "input_tokens": 5554,
          "output_tokens": 195,
          "retry_message": null,
          "completion_cost": 0.019587
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- django/db/models/sql/query.py\n+++ django/db/models/sql/query.py\n@@ -1255,7 +1255,7 @@\n             raise FieldError(\"Cannot parse keyword query %r\" % arg)\n         lookups, parts, reffed_expression = self.solve_lookup_type(arg)\n \n-        if check_filterable:\n+        if check_filterable and not self.has_filterable_false_field(reffed_expression):\n             self.check_filterable(reffed_expression)\n \n         if not allow_joins and len(parts) > 1:\n@@ -1265,7 +1265,7 @@\n         value = self.resolve_lookup_value(value, can_reuse, allow_joins)\n         used_joins = {k for k, v in self.alias_refcount.items() if v > pre_joins.get(k, 0)}\n \n-        if check_filterable:\n+        if check_filterable and not self.has_filterable_false_field(value):\n             self.check_filterable(value)\n \n         clause = self.where_class()\n",
        "model": "deepseek-coder",
        "message": "Applied the change to django/db/models/sql/query.py.\n\n<scratch_pad>\n```html\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [
          {
            "code": "E1101",
            "line": 1258,
            "message": "Instance of 'Query' has no 'has_filterable_false_field' member",
            "file_path": "django/db/models/sql/query.py"
          },
          {
            "code": "E1101",
            "line": 1268,
            "message": "Instance of 'Query' has no 'has_filterable_false_field' member",
            "file_path": "django/db/models/sql/query.py"
          }
        ],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "Query",
            "file_path": "django/db/models/sql/query.py",
            "scratch_pad": "The lint errors indicate that the 'Query' class does not have a 'has_filterable_false_field' method. To resolve this, we need to add the missing method to the 'Query' class.",
            "instructions": "Add the 'has_filterable_false_field' method to the 'Query' class to check if the expression has a field with 'filterable=False'."
          },
          "output": {
            "span_id": "Query",
            "file_path": "django/db/models/sql/query.py",
            "instructions": "Add the 'has_filterable_false_field' method to the 'Query' class to check if the expression has a field with 'filterable=False'."
          },
          "input_tokens": 5131,
          "output_tokens": 152,
          "retry_message": null,
          "completion_cost": 0.017673
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "Query",
        "end_line": null,
        "file_path": "django/db/models/sql/query.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Add the 'has_filterable_false_field' method to the 'Query' class to check if the expression has a field with 'filterable=False'.\n\nThe 'has_filterable_false_field' method needs to be added to the 'Query' class. The code should be added after the existing methods, possibly near the end of the class definition to maintain logical order.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": false,
            "end_line": 2282,
            "start_line": 2282,
            "scratch_pad": "The 'has_filterable_false_field' method needs to be added to the 'Query' class. The code should be added after the existing methods, possibly near the end of the class definition to maintain logical order."
          },
          "output": {
            "span_id": "Query",
            "end_line": 2296,
            "file_path": "django/db/models/sql/query.py",
            "start_line": 2280,
            "instructions": "Add the 'has_filterable_false_field' method to the 'Query' class to check if the expression has a field with 'filterable=False'.\n\nThe 'has_filterable_false_field' method needs to be added to the 'Query' class. The code should be added after the existing methods, possibly near the end of the class definition to maintain logical order."
          },
          "input_tokens": 3721,
          "output_tokens": 94,
          "retry_message": null,
          "completion_cost": 0.012573
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "Query",
        "end_line": 2296,
        "file_path": "django/db/models/sql/query.py",
        "max_tokens": 1000,
        "start_line": 2280,
        "temperature": 1.6,
        "instructions": "Add the 'has_filterable_false_field' method to the 'Query' class to check if the expression has a field with 'filterable=False'.\n\nThe 'has_filterable_false_field' method needs to be added to the 'Query' class. The code should be added after the existing methods, possibly near the end of the class definition to maintain logical order.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\n    def has_filterable_false_field(self, expression):\n        \"\"\"Check if the expression has a field with 'filterable=False'.\"\"\"\n        if hasattr(expression, 'field') and hasattr(expression.field, 'filterable') and not expression.field.filterable:\n            return True\n        if hasattr(expression, 'get_source_expressions'):\n            for expr in expression.get_source_expressions():\n                if self.has_filterable_false_field(expr):\n                    return True\n        return False\n\n    def is_nullable(self, field):\n        \"\"\"\n        Check if the given field should be treated as nullable.\n\n        Some backends treat '' as null and Django treats such fields as\n        nullable for those backends. In such situations field.null can be\n        False even if we should treat the field as nullable.\n        \"\"\"\n        # We need to use DEFAULT_DB_ALIAS here, as QuerySet does not have\n        # (nor should it have) knowledge of which connection is going to be\n        # used. The proper fix would be to defer all decisions where\n        # is_nullable() is needed to the compiler stage, but that is not easy\n        # to do currently.\n        return (\n            connections[DEFAULT_DB_ALIAS].features.interprets_empty_strings_as_nulls and\n            field.empty_strings_allowed\n        ) or field.null\n</replace>"
          },
          "output": {
            "diff": "--- django/db/models/sql/query.py\n+++ django/db/models/sql/query.py\n@@ -2277,6 +2277,16 @@\n         self.set_select([f.get_col(select_alias) for f in select_fields])\n         return trimmed_prefix, contains_louter\n \n+    def has_filterable_false_field(self, expression):\n+        \"\"\"Check if the expression has a field with 'filterable=False'.\"\"\"\n+        if hasattr(expression, 'field') and hasattr(expression.field, 'filterable') and not expression.field.filterable:\n+            return True\n+        if hasattr(expression, 'get_source_expressions'):\n+            for expr in expression.get_source_expressions():\n+                if self.has_filterable_false_field(expr):\n+                    return True\n+        return False\n+\n     def is_nullable(self, field):\n         \"\"\"\n         Check if the given field should be treated as nullable.\n",
            "message": "Applied the change to django/db/models/sql/query.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 5613,
          "output_tokens": 329,
          "retry_message": null,
          "completion_cost": 0.021774
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- django/db/models/sql/query.py\n+++ django/db/models/sql/query.py\n@@ -2277,6 +2277,16 @@\n         self.set_select([f.get_col(select_alias) for f in select_fields])\n         return trimmed_prefix, contains_louter\n \n+    def has_filterable_false_field(self, expression):\n+        \"\"\"Check if the expression has a field with 'filterable=False'.\"\"\"\n+        if hasattr(expression, 'field') and hasattr(expression.field, 'filterable') and not expression.field.filterable:\n+            return True\n+        if hasattr(expression, 'get_source_expressions'):\n+            for expr in expression.get_source_expressions():\n+                if self.has_filterable_false_field(expr):\n+                    return True\n+        return False\n+\n     def is_nullable(self, field):\n         \"\"\"\n         Check if the given field should be treated as nullable.\n",
        "model": "deepseek-coder",
        "message": "Applied the change to django/db/models/sql/query.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue has been addressed by adding the 'has_filterable_false_field' method and integrating it into the 'build_filter' method to ensure that the filterable check is bypassed when a field with 'filterable=False' is involved in the filter expression.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The changes made to the Query class have successfully added the method 'has_filterable_false_field' to check for fields with 'filterable=False'. This method is now being used in the 'build_filter' method to bypass the filterable check if such a field is involved in the expression. The lint errors have been resolved, and the necessary functionality has been implemented.",
            "instructions": null
          },
          "output": {
            "message": "The issue has been addressed by adding the 'has_filterable_false_field' method and integrating it into the 'build_filter' method to ensure that the filterable check is bypassed when a field with 'filterable=False' is involved in the filter expression."
          },
          "input_tokens": 5699,
          "output_tokens": 197,
          "retry_message": null,
          "completion_cost": 0.020052
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue has been addressed by adding the 'has_filterable_false_field' method and integrating it into the 'build_filter' method to ensure that the filterable check is bypassed when a field with 'filterable=False' is involved in the filter expression.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Queryset raises NotSupportedError when RHS has filterable=False attribute.\nDescription\n\t \n\t\t(last modified by Nicolas Baccelli)\n\t \nI'm migrating my app to django 3.0.7 and I hit a strange behavior using a model class with a field labeled filterable\nclass ProductMetaDataType(models.Model):\n\tlabel = models.CharField(max_length=255, unique=True, blank=False, null=False)\n\tfilterable = models.BooleanField(default=False, verbose_name=_(\"filterable\"))\n\tclass Meta:\n\t\tapp_label = \"adminpricing\"\n\t\tverbose_name = _(\"product meta data type\")\n\t\tverbose_name_plural = _(\"product meta data types\")\n\tdef __str__(self):\n\t\treturn self.label\nclass ProductMetaData(models.Model):\n\tid = models.BigAutoField(primary_key=True)\n\tproduct = models.ForeignKey(\n\t\tProduit, null=False, blank=False, on_delete=models.CASCADE\n\t)\n\tvalue = models.TextField(null=False, blank=False)\n\tmarketplace = models.ForeignKey(\n\t\tPlateforme, null=False, blank=False, on_delete=models.CASCADE\n\t)\n\tdate_created = models.DateTimeField(null=True, default=timezone.now)\n\tmetadata_type = models.ForeignKey(\n\t\tProductMetaDataType, null=False, blank=False, on_delete=models.CASCADE\n\t)\n\tclass Meta:\n\t\tapp_label = \"adminpricing\"\n\t\tverbose_name = _(\"product meta data\")\n\t\tverbose_name_plural = _(\"product meta datas\")\nError happened when filtering ProductMetaData with a metadata_type :\nProductMetaData.objects.filter(value=\"Dark Vador\", metadata_type=self.brand_metadata)\nError traceback :\nTraceback (most recent call last):\n File \"/backoffice/backoffice/adminpricing/tests/test_pw.py\", line 481, in test_checkpolicywarning_by_fields\n\tfor p in ProductMetaData.objects.filter(\n File \"/usr/local/lib/python3.8/site-packages/django/db/models/manager.py\", line 82, in manager_method\n\treturn getattr(self.get_queryset(), name)(*args, **kwargs)\n File \"/usr/local/lib/python3.8/site-packages/django/db/models/query.py\", line 904, in filter\n\treturn self._filter_or_exclude(False, *args, **kwargs)\n File \"/usr/local/lib/python3.8/site-packages/django/db/models/query.py\", line 923, in _filter_or_exclude\n\tclone.query.add_q(Q(*args, **kwargs))\n File \"/usr/local/lib/python3.8/site-packages/django/db/models/sql/query.py\", line 1351, in add_q\n\tclause, _ = self._add_q(q_object, self.used_aliases)\n File \"/usr/local/lib/python3.8/site-packages/django/db/models/sql/query.py\", line 1378, in _add_q\n\tchild_clause, needed_inner = self.build_filter(\n File \"/usr/local/lib/python3.8/site-packages/django/db/models/sql/query.py\", line 1264, in build_filter\n\tself.check_filterable(value)\n File \"/usr/local/lib/python3.8/site-packages/django/db/models/sql/query.py\", line 1131, in check_filterable\n\traise NotSupportedError(\ndjango.db.utils.NotSupportedError: ProductMetaDataType is disallowed in the filter clause.\nI changed label to filterable_test and it fixed this issue\nThis should be documented or fix.\n"
}