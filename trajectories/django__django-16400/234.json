{
  "info": {
    "duration": 142.48584914207458,
    "submission": "diff --git a/django/contrib/auth/models.py b/django/contrib/auth/models.py\nindex 85330e2c0e..3ae5a5130e 100644\n--- a/django/contrib/auth/models.py\n+++ b/django/contrib/auth/models.py\n@@ -26,10 +26,11 @@ def update_last_login(sender, user, **kwargs):\n class PermissionManager(models.Manager):\n     use_in_migrations = True\n \n-    def get_by_natural_key(self, codename, app_label, model):\n-        return self.get(\n+    def get_by_natural_key(self, codename, app_label, model, using=None):\n+        db = using if using is not None else self.db\n+        return self.using(db).get(\n             codename=codename,\n-            content_type=ContentType.objects.db_manager(self.db).get_by_natural_key(\n+            content_type=ContentType.objects.db_manager(db).get_by_natural_key(\n                 app_label, model\n             ),\n         )\n",
    "total_cost": 0.20035800000000004,
    "instance_id": "django__django-16400",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue indicates a problem with the 'migrate' management command not respecting the database parameter when dealing with permissions. The error seems to be related to DB read requests not adhering to the specified database, potentially involving the custom DB router and middleware. The relevant files and functions to investigate include those related to the 'migrate' command, database routers, and possibly middleware implementations. I will set up a search to find code related to database routing and middleware handling.",
            "search_requests": [
              {
                "query": "database parameter",
                "class_names": [],
                "code_snippet": "self.migration_progress_callback",
                "file_pattern": "**/management/commands/migrate.py",
                "function_names": []
              },
              {
                "query": null,
                "class_names": [
                  "ConnectionRouter"
                ],
                "code_snippet": null,
                "file_pattern": "**/db/utils.py",
                "function_names": [
                  "db_for_read",
                  "allow_migrate"
                ]
              },
              {
                "query": null,
                "class_names": [
                  "TenantSubdomainMiddleware",
                  "TenantDatabaseRouter"
                ],
                "code_snippet": null,
                "file_pattern": "**/tenant_db_router.py",
                "function_names": [
                  "__call__",
                  "db_for_read",
                  "db_for_write"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 2164,
                "span_id": "Command.handle",
                "file_path": "django/core/management/commands/migrate.py"
              },
              {
                "rank": 0,
                "tokens": 71,
                "span_id": "ConnectionRouter.allow_migrate",
                "file_path": "django/db/utils.py"
              }
            ],
            "search_requests": [
              {
                "query": "database parameter",
                "class_names": [],
                "code_snippet": "self.migration_progress_callback",
                "file_pattern": "**/management/commands/migrate.py",
                "function_names": []
              },
              {
                "query": null,
                "class_names": [
                  "ConnectionRouter"
                ],
                "code_snippet": null,
                "file_pattern": "**/db/utils.py",
                "function_names": [
                  "db_for_read",
                  "allow_migrate"
                ]
              },
              {
                "query": null,
                "class_names": [
                  "TenantSubdomainMiddleware",
                  "TenantDatabaseRouter"
                ],
                "code_snippet": null,
                "file_pattern": "**/tenant_db_router.py",
                "function_names": [
                  "__call__",
                  "db_for_read",
                  "db_for_write"
                ]
              }
            ]
          },
          "input_tokens": 3454,
          "output_tokens": 289,
          "retry_message": null,
          "completion_cost": 0.014697
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 2164,
            "span_id": "Command.handle",
            "file_path": "django/core/management/commands/migrate.py"
          },
          {
            "rank": 0,
            "tokens": 71,
            "span_id": "ConnectionRouter.allow_migrate",
            "file_path": "django/db/utils.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue suggests that the 'migrate' management command in Django does not respect the 'database' parameter when it comes to certain DB read requests, potentially involving a custom DB router. This could indicate an issue where the specified database is not consistently used in all contexts during the migration process.\n\nThe provided search results include code from 'migrate.py' within the Django core management commands. The 'Command.handle' span is particularly relevant as it encompasses the main logic of the 'migrate' command, including handling of the 'database' parameter and the execution of migrations. This span includes the setting up of the connection to the specified database and the execution of the migration plan. It provides the context where the database parameter is expected to be used, which is crucial for addressing the issue.\n\nAnother relevant file is 'utils.py' with the 'ConnectionRouter' class, which includes the 'allow_migrate' method. This method is part of the logic that determines which database operations are allowed under specific conditions during migrations. Although this method does not directly address the 'database' parameter handling issue reported, understanding how it interacts with database operations could be crucial to identifying where the specified database parameter might not be respected.\n\nBased on the reported issue and the search results, the identified spans seem relevant to understanding and potentially addressing the issue. However, further detail might be needed in the search results context, especially regarding how the custom DB router integrates with these systems and how it might affect the handling of database parameters during migrations.",
            "identified_spans": [
              {
                "span_ids": [
                  "Command",
                  "Command.handle"
                ],
                "file_path": "django/core/management/commands/migrate.py"
              },
              {
                "span_ids": [
                  "ConnectionRouter",
                  "ConnectionRouter.allow_migrate"
                ],
                "file_path": "django/db/utils.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4813,
          "output_tokens": 421,
          "retry_message": null,
          "completion_cost": 0.020754
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "Upon analyzing the provided file context, it appears that the code related to the 'migrate' management command is present, specifically in the 'django/core/management/commands/migrate.py' file. However, while the code for handling migrations is detailed, there are no explicit references to permissions or database parameters within these files. This suggests that while the management command infrastructure is available, the direct handling of database parameters during permission assignments might be spread across other parts of the Django codebase not provided here. To fully address the issue, a deeper inspection into other Django modules related to permissions and database parameter handling would be necessary.",
            "search_suggestions": "Look for additional modules within the Django project that handle permissions and database parameter specifics, focusing on areas that interact with the database router and the middleware components. Specifically, exploring 'django/contrib/auth/migrations/' and any associated models might provide further insight into how permissions are managed and how database parameters are respected during these operations."
          },
          "output": {
            "message": "Look for additional modules within the Django project that handle permissions and database parameter specifics, focusing on areas that interact with the database router and the middleware components. Specifically, exploring 'django/contrib/auth/migrations/' and any associated models might provide further insight into how permissions are managed and how database parameters are respected during these operations."
          },
          "input_tokens": 4699,
          "output_tokens": 230,
          "retry_message": null,
          "completion_cost": 0.017547
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look for additional modules within the Django project that handle permissions and database parameter specifics, focusing on areas that interact with the database router and the middleware components. Specifically, exploring 'django/contrib/auth/migrations/' and any associated models might provide further insight into how permissions are managed and how database parameters are respected during these operations.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "Considering the additional context and the emphasis on permissions and database parameter handling, it's crucial to explore Django's auth module migrations and associated models to understand how permissions are handled in relation to database parameters. We should focus on files within 'django/contrib/auth/migrations/' and any relevant models that deal with database interactions through the custom middleware and router.",
            "search_requests": [
              {
                "query": "permissions",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/auth/migrations/*.py",
                "function_names": []
              },
              {
                "query": "database",
                "class_names": [
                  "Permission"
                ],
                "code_snippet": null,
                "file_pattern": "**/auth/models.py",
                "function_names": [
                  "db_for_read",
                  "db_for_write"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 23,
                "span_id": "imports",
                "file_path": "django/contrib/auth/migrations/0001_initial.py"
              },
              {
                "rank": 0,
                "tokens": 978,
                "span_id": "Migration",
                "file_path": "django/contrib/auth/migrations/0001_initial.py"
              },
              {
                "rank": 1,
                "tokens": 7,
                "span_id": "imports",
                "file_path": "django/contrib/auth/migrations/0002_alter_permission_name_max_length.py"
              },
              {
                "rank": 1,
                "tokens": 58,
                "span_id": "Migration",
                "file_path": "django/contrib/auth/migrations/0002_alter_permission_name_max_length.py"
              },
              {
                "rank": 2,
                "tokens": 47,
                "span_id": "revert_proxy_model_permissions",
                "file_path": "django/contrib/auth/migrations/0011_update_proxy_permissions.py"
              },
              {
                "rank": 2,
                "tokens": 62,
                "span_id": "Migration",
                "file_path": "django/contrib/auth/migrations/0011_update_proxy_permissions.py"
              },
              {
                "rank": 3,
                "tokens": 80,
                "span_id": "imports",
                "file_path": "django/contrib/auth/migrations/0011_update_proxy_permissions.py"
              },
              {
                "rank": 3,
                "tokens": 340,
                "span_id": "update_proxy_model_permissions",
                "file_path": "django/contrib/auth/migrations/0011_update_proxy_permissions.py"
              },
              {
                "rank": 4,
                "tokens": 7,
                "span_id": "imports",
                "file_path": "django/contrib/auth/migrations/0012_alter_user_first_name_max_length.py"
              },
              {
                "rank": 4,
                "tokens": 69,
                "span_id": "Migration",
                "file_path": "django/contrib/auth/migrations/0012_alter_user_first_name_max_length.py"
              },
              {
                "rank": 5,
                "tokens": 7,
                "span_id": "imports",
                "file_path": "django/contrib/auth/migrations/0003_alter_user_email_max_length.py"
              },
              {
                "rank": 5,
                "tokens": 72,
                "span_id": "Migration",
                "file_path": "django/contrib/auth/migrations/0003_alter_user_email_max_length.py"
              },
              {
                "rank": 6,
                "tokens": 7,
                "span_id": "imports",
                "file_path": "django/contrib/auth/migrations/0009_alter_user_last_name_max_length.py"
              },
              {
                "rank": 0,
                "tokens": 289,
                "span_id": "Permission",
                "file_path": "django/contrib/auth/models.py"
              }
            ],
            "search_requests": [
              {
                "query": "permissions",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/auth/migrations/*.py",
                "function_names": []
              },
              {
                "query": "database",
                "class_names": [
                  "Permission"
                ],
                "code_snippet": null,
                "file_pattern": "**/auth/models.py",
                "function_names": [
                  "db_for_read",
                  "db_for_write"
                ]
              }
            ]
          },
          "input_tokens": 7091,
          "output_tokens": 230,
          "retry_message": null,
          "completion_cost": 0.024723000000000002
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 23,
            "span_id": "imports",
            "file_path": "django/contrib/auth/migrations/0001_initial.py"
          },
          {
            "rank": 0,
            "tokens": 978,
            "span_id": "Migration",
            "file_path": "django/contrib/auth/migrations/0001_initial.py"
          },
          {
            "rank": 1,
            "tokens": 7,
            "span_id": "imports",
            "file_path": "django/contrib/auth/migrations/0002_alter_permission_name_max_length.py"
          },
          {
            "rank": 1,
            "tokens": 58,
            "span_id": "Migration",
            "file_path": "django/contrib/auth/migrations/0002_alter_permission_name_max_length.py"
          },
          {
            "rank": 2,
            "tokens": 47,
            "span_id": "revert_proxy_model_permissions",
            "file_path": "django/contrib/auth/migrations/0011_update_proxy_permissions.py"
          },
          {
            "rank": 2,
            "tokens": 62,
            "span_id": "Migration",
            "file_path": "django/contrib/auth/migrations/0011_update_proxy_permissions.py"
          },
          {
            "rank": 3,
            "tokens": 80,
            "span_id": "imports",
            "file_path": "django/contrib/auth/migrations/0011_update_proxy_permissions.py"
          },
          {
            "rank": 3,
            "tokens": 340,
            "span_id": "update_proxy_model_permissions",
            "file_path": "django/contrib/auth/migrations/0011_update_proxy_permissions.py"
          },
          {
            "rank": 4,
            "tokens": 7,
            "span_id": "imports",
            "file_path": "django/contrib/auth/migrations/0012_alter_user_first_name_max_length.py"
          },
          {
            "rank": 4,
            "tokens": 69,
            "span_id": "Migration",
            "file_path": "django/contrib/auth/migrations/0012_alter_user_first_name_max_length.py"
          },
          {
            "rank": 5,
            "tokens": 7,
            "span_id": "imports",
            "file_path": "django/contrib/auth/migrations/0003_alter_user_email_max_length.py"
          },
          {
            "rank": 5,
            "tokens": 72,
            "span_id": "Migration",
            "file_path": "django/contrib/auth/migrations/0003_alter_user_email_max_length.py"
          },
          {
            "rank": 6,
            "tokens": 7,
            "span_id": "imports",
            "file_path": "django/contrib/auth/migrations/0009_alter_user_last_name_max_length.py"
          },
          {
            "rank": 0,
            "tokens": 289,
            "span_id": "Permission",
            "file_path": "django/contrib/auth/models.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about the migrate management command not respecting the database parameter when adding Permissions. The issue arises due to a DB read request that does not consider the database parameter during the migration process. This is evidenced by the custom middleware and DB router setup in the user's example. The search results include multiple migration files and the models file from django.contrib.auth, which deal with creating and altering Permissions, Groups, and Users. The most relevant files and spans seem to be those dealing directly with these models and migrations, particularly the initial migration and the model definitions for Permission and Group.",
            "identified_spans": [
              {
                "span_ids": [
                  "imports",
                  "Migration"
                ],
                "file_path": "django/contrib/auth/migrations/0001_initial.py"
              },
              {
                "span_ids": [
                  "PermissionManager",
                  "Permission",
                  "Permission.Meta",
                  "Group"
                ],
                "file_path": "django/contrib/auth/models.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 8501,
          "output_tokens": 259,
          "retry_message": null,
          "completion_cost": 0.029388
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context provided includes relevant code from Django's core migration handling, specifically in 'django/core/management/commands/migrate.py', which is crucial for understanding how the migrate command processes database operations. Additionally, 'django/db/utils.py' contains the base logic for routing database interactions, integrating with the custom DB router mentioned in the issue. The migrations files and models in 'django/contrib/auth/' further detail the creation and management of permissions, which is central to the reported issue. Given this coverage, it appears that all relevant code for addressing the issue regarding the database parameter in the migrate command has been identified.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 6570,
          "output_tokens": 169,
          "retry_message": null,
          "completion_cost": 0.022245
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "PermissionManager",
            "file_path": "django/contrib/auth/models.py",
            "scratch_pad": "The issue arises because the Permission model's manager does not specify the database to use during its operations. This can lead to the manager using the default database instead of the one specified during the migrate command. To fix this, we need to ensure that the Permission model's manager respects the database parameter.",
            "instructions": "Modify the `PermissionManager` class to handle the database parameter correctly. This can be achieved by passing the `using` parameter to the manager's methods and ensuring that these methods respect this parameter."
          },
          "output": {
            "span_id": "PermissionManager",
            "end_line": 35,
            "file_path": "django/contrib/auth/models.py",
            "start_line": 26,
            "instructions": "Modify the `PermissionManager` class to handle the database parameter correctly. This can be achieved by passing the `using` parameter to the manager's methods and ensuring that these methods respect this parameter."
          },
          "input_tokens": 6910,
          "output_tokens": 173,
          "retry_message": null,
          "completion_cost": 0.023325000000000002
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "PermissionManager",
        "end_line": 35,
        "file_path": "django/contrib/auth/models.py",
        "max_tokens": 1000,
        "start_line": 26,
        "temperature": 1.6,
        "instructions": "Modify the `PermissionManager` class to handle the database parameter correctly. This can be achieved by passing the `using` parameter to the manager's methods and ensuring that these methods respect this parameter.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```plaintext\n<replace>\nclass PermissionManager(models.Manager):\n    use_in_migrations = True\n\n    def get_by_natural_key(self, codename, app_label, model, using=None):\n        db = using if using is not None else self.db\n        return self.using(db).get(\n            codename=codename,\n            content_type=ContentType.objects.db_manager(db).get_by_natural_key(\n                app_label, model\n            ),\n        )\n</replace>"
          },
          "output": {
            "diff": "--- django/contrib/auth/models.py\n+++ django/contrib/auth/models.py\n@@ -26,10 +26,11 @@\n class PermissionManager(models.Manager):\n     use_in_migrations = True\n \n-    def get_by_natural_key(self, codename, app_label, model):\n-        return self.get(\n+    def get_by_natural_key(self, codename, app_label, model, using=None):\n+        db = using if using is not None else self.db\n+        return self.using(db).get(\n             codename=codename,\n-            content_type=ContentType.objects.db_manager(self.db).get_by_natural_key(\n+            content_type=ContentType.objects.db_manager(db).get_by_natural_key(\n                 app_label, model\n             ),\n         )\n",
            "message": "Applied the change to django/contrib/auth/models.py.\n\n<scratch_pad>\n```plaintext\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 7226,
          "output_tokens": 127,
          "retry_message": null,
          "completion_cost": 0.023583
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- django/contrib/auth/models.py\n+++ django/contrib/auth/models.py\n@@ -26,10 +26,11 @@\n class PermissionManager(models.Manager):\n     use_in_migrations = True\n \n-    def get_by_natural_key(self, codename, app_label, model):\n-        return self.get(\n+    def get_by_natural_key(self, codename, app_label, model, using=None):\n+        db = using if using is not None else self.db\n+        return self.using(db).get(\n             codename=codename,\n-            content_type=ContentType.objects.db_manager(self.db).get_by_natural_key(\n+            content_type=ContentType.objects.db_manager(db).get_by_natural_key(\n                 app_label, model\n             ),\n         )\n",
        "model": "deepseek-coder",
        "message": "Applied the change to django/contrib/auth/models.py.\n\n<scratch_pad>\n```plaintext\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The modifications to the `PermissionManager` class ensure that the database parameter is respected, resolving the issue where the migrate command did not use the specified database for Permission operations.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The changes applied to the `PermissionManager` class are correct and ensure that the manager respects the database parameter. This should address the issue of the migrate command not respecting the database parameter when dealing with Permissions.",
            "instructions": null
          },
          "output": {
            "message": "The modifications to the `PermissionManager` class ensure that the database parameter is respected, resolving the issue where the migrate command did not use the specified database for Permission operations."
          },
          "input_tokens": 7347,
          "output_tokens": 137,
          "retry_message": null,
          "completion_cost": 0.024096000000000003
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The modifications to the `PermissionManager` class ensure that the database parameter is respected, resolving the issue where the migrate command did not use the specified database for Permission operations.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "migrate management command does not respect database parameter when adding Permissions.\nDescription\n\t \n\t\t(last modified by Vasanth)\n\t \nWhen invoking migrate with a database parameter, the migration runs successfully. However, there seems to be a DB read request that runs after the migration. This call does not respect the db param and invokes the db router .\nWhen naming the db as a parameter, all DB calls in the context of the migrate command are expected to use the database specified.\nI came across this as I am currently using a thread-local variable to get the active DB with a custom DB router for a multi-tenant service .\nMinimal example \nSetup the custom middleware and custom DB Router as show below. Then run any DB migration. We see that \"read {}\" is being printed before the exception message.\nIdeally none of this code must be called as the DB was specified during management command.\nfrom threading import local\nfrom django.conf import settings\nlocal_state = local()\nclass InvalidTenantException(Exception):\n\tpass\nclass TenantSubdomainMiddleware:\n\tdef __init__(self, get_response):\n\t\tself.get_response = get_response\n\tdef __call__(self, request):\n\t\t## Get Subdomain\n\t\thost = request.get_host().split(\":\")[0]\n\t\tlocal_state.subdomain = (\n\t\t\t# We assume single level of subdomain : app.service.com \n\t\t\t# HOST_IP : used to for local dev. \n\t\t\thost if host in settings.HOST_IP else host.split(\".\")[0]\n\t\t)\n\t\tresponse = self.get_response(request)\n\t\treturn response\nclass TenantDatabaseRouter:\n\tdef _default_db(self):\n\t\tsubdomain = getattr(local_state, \"subdomain\", None)\n\t\tif subdomain is not None and subdomain in settings.TENANT_MAP:\n\t\t\tdb_name = settings.TENANT_MAP[local_state.subdomain]\n\t\t\treturn db_name\n\t\telse:\n\t\t\traise InvalidTenantException()\n\tdef db_for_read(self, model, **hints):\n\t\tprint(\"read\", hints)\n\t\treturn self._default_db()\n\tdef db_for_write(self, model, **hints):\n\t\tprint(\"write\", hints)\n\t\treturn self._default_db()\n\tdef allow_relation(self, obj1, obj2, **hints):\n\t\treturn None\n\tdef allow_migrate(self, db, app_label, model_name=None, **hints):\n\t\treturn None\n## settings.py\nMIDDLEWARE = [\n\t\"utils.tenant_db_router.TenantSubdomainMiddleware\",\n\t\"django.middleware.security.SecurityMiddleware\",\n\t...\n]\nTENANT_MAP = {\"localhost\":\"default\", \"tenant_1\":\"default\"}\nDATABASE_ROUTERS = [\"utils.tenant_db_router.TenantDatabaseRouter\"]\n"
}