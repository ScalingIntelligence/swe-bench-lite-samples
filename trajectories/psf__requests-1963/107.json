{
  "info": {
    "duration": 165.6564383506775,
    "submission": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 425db22c..ff255004 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -86,9 +86,10 @@ class SessionRedirectMixin(object):\n         \"\"\"Receives a Response. Returns a generator of Responses.\"\"\"\n \n         i = 0\n+        prepared_request = req.copy()  # Initialize prepared_request before entering the loop\n \n         while resp.is_redirect:\n-            prepared_request = req.copy()\n+            prepared_request = prepared_request.copy()\n \n             resp.content  # Consume socket so it can be released\n \n",
    "total_cost": 0.15261599999999997,
    "instance_id": "psf__requests-1963",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue indicates that the `Session.resolve_redirects` method copies the original request object for each iteration, which causes the original HTTP method to be used instead of the method determined by the redirection status code. This leads to incorrect method selection, such as issuing a POST instead of a GET after a 303 See Other redirection. To address this, it's necessary to find the `Session.resolve_redirects` method and any related methods or classes that handle redirection logic, particularly where the original request is being copied or where the method is being determined.",
            "search_requests": [
              {
                "query": "Session.resolve_redirects",
                "class_names": [
                  "Session",
                  "SessionRedirectMixin"
                ],
                "code_snippet": null,
                "file_pattern": "**/sessions.py",
                "function_names": [
                  "resolve_redirects",
                  "request",
                  "get",
                  "post"
                ]
              },
              {
                "query": null,
                "class_names": [
                  "PreparedRequest"
                ],
                "code_snippet": null,
                "file_pattern": "**/models.py",
                "function_names": [
                  "prepare",
                  "copy",
                  "prepare_method"
                ]
              },
              {
                "query": null,
                "class_names": [
                  "HTTPAdapter"
                ],
                "code_snippet": null,
                "file_pattern": "**/adapters.py",
                "function_names": [
                  "request_url"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 683,
                "span_id": "SessionRedirectMixin.resolve_redirects",
                "file_path": "requests/sessions.py"
              },
              {
                "rank": 0,
                "tokens": 6,
                "span_id": "SessionRedirectMixin",
                "file_path": "requests/sessions.py"
              },
              {
                "rank": 1,
                "tokens": 103,
                "span_id": "Session.post",
                "file_path": "requests/sessions.py"
              },
              {
                "rank": 2,
                "tokens": 78,
                "span_id": "Session.get",
                "file_path": "requests/sessions.py"
              },
              {
                "rank": 2,
                "tokens": 78,
                "span_id": "Session.options",
                "file_path": "requests/sessions.py"
              },
              {
                "rank": 2,
                "tokens": 78,
                "span_id": "Session.head",
                "file_path": "requests/sessions.py"
              },
              {
                "rank": 3,
                "tokens": 425,
                "span_id": "Session.send",
                "file_path": "requests/sessions.py"
              },
              {
                "rank": 4,
                "tokens": 24,
                "span_id": "Session.__setstate__",
                "file_path": "requests/sessions.py"
              },
              {
                "rank": 4,
                "tokens": 25,
                "span_id": "Session.close",
                "file_path": "requests/sessions.py"
              },
              {
                "rank": 0,
                "tokens": 125,
                "span_id": "PreparedRequest.prepare",
                "file_path": "requests/models.py"
              },
              {
                "rank": 0,
                "tokens": 50,
                "span_id": "PreparedRequest.copy",
                "file_path": "requests/models.py"
              },
              {
                "rank": 0,
                "tokens": 34,
                "span_id": "PreparedRequest.prepare_method",
                "file_path": "requests/models.py"
              },
              {
                "rank": 0,
                "tokens": 178,
                "span_id": "HTTPAdapter.request_url",
                "file_path": "requests/adapters.py"
              }
            ],
            "search_requests": [
              {
                "query": "Session.resolve_redirects",
                "class_names": [
                  "Session",
                  "SessionRedirectMixin"
                ],
                "code_snippet": null,
                "file_pattern": "**/sessions.py",
                "function_names": [
                  "resolve_redirects",
                  "request",
                  "get",
                  "post"
                ]
              },
              {
                "query": null,
                "class_names": [
                  "PreparedRequest"
                ],
                "code_snippet": null,
                "file_pattern": "**/models.py",
                "function_names": [
                  "prepare",
                  "copy",
                  "prepare_method"
                ]
              },
              {
                "query": null,
                "class_names": [
                  "HTTPAdapter"
                ],
                "code_snippet": null,
                "file_pattern": "**/adapters.py",
                "function_names": [
                  "request_url"
                ]
              }
            ]
          },
          "input_tokens": 3049,
          "output_tokens": 309,
          "retry_message": null,
          "completion_cost": 0.013782
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 683,
            "span_id": "SessionRedirectMixin.resolve_redirects",
            "file_path": "requests/sessions.py"
          },
          {
            "rank": 0,
            "tokens": 6,
            "span_id": "SessionRedirectMixin",
            "file_path": "requests/sessions.py"
          },
          {
            "rank": 1,
            "tokens": 103,
            "span_id": "Session.post",
            "file_path": "requests/sessions.py"
          },
          {
            "rank": 2,
            "tokens": 78,
            "span_id": "Session.get",
            "file_path": "requests/sessions.py"
          },
          {
            "rank": 2,
            "tokens": 78,
            "span_id": "Session.options",
            "file_path": "requests/sessions.py"
          },
          {
            "rank": 2,
            "tokens": 78,
            "span_id": "Session.head",
            "file_path": "requests/sessions.py"
          },
          {
            "rank": 3,
            "tokens": 425,
            "span_id": "Session.send",
            "file_path": "requests/sessions.py"
          },
          {
            "rank": 4,
            "tokens": 24,
            "span_id": "Session.__setstate__",
            "file_path": "requests/sessions.py"
          },
          {
            "rank": 4,
            "tokens": 25,
            "span_id": "Session.close",
            "file_path": "requests/sessions.py"
          },
          {
            "rank": 0,
            "tokens": 125,
            "span_id": "PreparedRequest.prepare",
            "file_path": "requests/models.py"
          },
          {
            "rank": 0,
            "tokens": 50,
            "span_id": "PreparedRequest.copy",
            "file_path": "requests/models.py"
          },
          {
            "rank": 0,
            "tokens": 34,
            "span_id": "PreparedRequest.prepare_method",
            "file_path": "requests/models.py"
          },
          {
            "rank": 0,
            "tokens": 178,
            "span_id": "HTTPAdapter.request_url",
            "file_path": "requests/adapters.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue pertains to the `Session.resolve_redirects` method, which copies the original request for all subsequent requests, potentially causing incorrect method selection during redirection. This issue is particularly critical for HTTP status codes like 303 See Other, which should convert a POST to a GET but preserve the method for other status codes like 307 Temporary Redirect. Analyzing the provided code, the most relevant part is the `SessionRedirectMixin` class, specifically its `resolve_redirects` method. This method handles redirection by copying the original request at the start of each iteration, which is the root cause of the issue. The method then adjusts the request method based on the status code but fails to account for preserving the correct method across different status codes, leading to the described problem. Additional relevant parts include the `Session` class, which inherits from `SessionRedirectMixin`, and the `PreparedRequest` class, which is used to handle the request copying. These sections are crucial for understanding the full context of the redirection handling and the potential modifications needed to fix the reported issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "SessionRedirectMixin",
                  "SessionRedirectMixin.resolve_redirects",
                  "Session",
                  "Session.send"
                ],
                "file_path": "requests/sessions.py"
              },
              {
                "span_ids": [
                  "PreparedRequest",
                  "PreparedRequest.copy"
                ],
                "file_path": "requests/models.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3838,
          "output_tokens": 355,
          "retry_message": null,
          "completion_cost": 0.016839
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The provided file context includes the `Session.resolve_redirects` method and related functionality that address the issue. The method `Session.resolve_redirects` is found in the `requests/sessions.py` file, and it includes logic that copies the original request object at the beginning, which is the core issue mentioned. Additionally, the method checks for specific status codes like 303 See Other and adjusts the method accordingly. The reference to copying the original request object and the handling of status codes like 303 See Other suggests that the relevant part of the codebase to address the issue is fully represented in the provided context. There is a clear indication of where modifications need to be made to address the specific issue of the original request method being used instead of the method determined by the redirection status code. There are also related methods such as `PreparedRequest.copy()` in `requests/models.py` that are involved in the process.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 3391,
          "output_tokens": 233,
          "retry_message": null,
          "completion_cost": 0.013668
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "SessionRedirectMixin.resolve_redirects",
            "file_path": "requests/sessions.py",
            "scratch_pad": "The issue identified involves the method selection during redirection handling. Specifically, the current implementation of `Session.resolve_redirects` always copies the original request, which can lead to incorrect method selection after a change (e.g., after a 303 status code changing a POST to a GET). To fix this, we need to modify the `resolve_redirects` method to start each iteration by copying the `prepared_request` from the previous iteration, not the original request.",
            "instructions": "Update the `resolve_redirects` method to ensure that each iteration starts by copying the `prepared_request` from the previous iteration, not the original request."
          },
          "output": {
            "span_id": "SessionRedirectMixin.resolve_redirects",
            "file_path": "requests/sessions.py",
            "instructions": "Update the `resolve_redirects` method to ensure that each iteration starts by copying the `prepared_request` from the previous iteration, not the original request."
          },
          "input_tokens": 4638,
          "output_tokens": 193,
          "retry_message": null,
          "completion_cost": 0.016809
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "SessionRedirectMixin.resolve_redirects",
        "end_line": null,
        "file_path": "requests/sessions.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Update the `resolve_redirects` method to ensure that each iteration starts by copying the `prepared_request` from the previous iteration, not the original request.\n\nThe instruction requires modifying the loop to ensure each iteration starts by copying the `prepared_request` from the previous iteration. The lines that need to be changed are those where `prepared_request` is currently being set to a copy of `req`. The modification should ensure that `prepared_request` is copied from itself in the subsequent iteration.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 91,
            "start_line": 91,
            "scratch_pad": "The instruction requires modifying the loop to ensure each iteration starts by copying the `prepared_request` from the previous iteration. The lines that need to be changed are those where `prepared_request` is currently being set to a copy of `req`. The modification should ensure that `prepared_request` is copied from itself in the subsequent iteration."
          },
          "output": {
            "span_id": "SessionRedirectMixin.resolve_redirects",
            "end_line": 95,
            "file_path": "requests/sessions.py",
            "start_line": 88,
            "instructions": "Update the `resolve_redirects` method to ensure that each iteration starts by copying the `prepared_request` from the previous iteration, not the original request.\n\nThe instruction requires modifying the loop to ensure each iteration starts by copying the `prepared_request` from the previous iteration. The lines that need to be changed are those where `prepared_request` is currently being set to a copy of `req`. The modification should ensure that `prepared_request` is copied from itself in the subsequent iteration."
          },
          "input_tokens": 1793,
          "output_tokens": 106,
          "retry_message": null,
          "completion_cost": 0.006969
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "SessionRedirectMixin.resolve_redirects",
        "end_line": 95,
        "file_path": "requests/sessions.py",
        "max_tokens": 1000,
        "start_line": 88,
        "temperature": 1.6,
        "instructions": "Update the `resolve_redirects` method to ensure that each iteration starts by copying the `prepared_request` from the previous iteration, not the original request.\n\nThe instruction requires modifying the loop to ensure each iteration starts by copying the `prepared_request` from the previous iteration. The lines that need to be changed are those where `prepared_request` is currently being set to a copy of `req`. The modification should ensure that `prepared_request` is copied from itself in the subsequent iteration.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```html\n<replace>\n        i = 0\n\n        while resp.is_redirect:\n            prepared_request = prepared_request.copy()\n\n            resp.content  # Consume socket so it can be released\n\n            if i >= self.max_redirects:\n</replace>"
          },
          "output": {
            "diff": "--- requests/sessions.py\n+++ requests/sessions.py\n@@ -88,7 +88,7 @@\n         i = 0\n \n         while resp.is_redirect:\n-            prepared_request = req.copy()\n+            prepared_request = prepared_request.copy()\n \n             resp.content  # Consume socket so it can be released\n \n",
            "message": "Applied the change to requests/sessions.py.\n\n<scratch_pad>\n```html\n</scratch_pad>",
            "verification_errors": [
              {
                "code": "E0601",
                "line": 91,
                "message": "Using variable 'prepared_request' before assignment",
                "file_path": "requests/sessions.py"
              }
            ]
          },
          "input_tokens": 6190,
          "output_tokens": 67,
          "retry_message": null,
          "completion_cost": 0.019575
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- requests/sessions.py\n+++ requests/sessions.py\n@@ -88,7 +88,7 @@\n         i = 0\n \n         while resp.is_redirect:\n-            prepared_request = req.copy()\n+            prepared_request = prepared_request.copy()\n \n             resp.content  # Consume socket so it can be released\n \n",
        "model": "deepseek-coder",
        "message": "Applied the change to requests/sessions.py.\n\n<scratch_pad>\n```html\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [
          {
            "code": "E0601",
            "line": 91,
            "message": "Using variable 'prepared_request' before assignment",
            "file_path": "requests/sessions.py"
          }
        ],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "SessionRedirectMixin.resolve_redirects",
            "file_path": "requests/sessions.py",
            "scratch_pad": "The lint error indicates that the variable 'prepared_request' is used before it is assigned. This is likely because 'prepared_request' is not being initialized before the loop starts. To fix this, we need to initialize 'prepared_request' at the beginning of the method using the original request object before entering the loop.",
            "instructions": "Initialize 'prepared_request' with the original request object before entering the loop in the `resolve_redirects` method to avoid the 'used before assignment' lint error."
          },
          "output": {
            "span_id": "SessionRedirectMixin.resolve_redirects",
            "file_path": "requests/sessions.py",
            "instructions": "Initialize 'prepared_request' with the original request object before entering the loop in the `resolve_redirects` method to avoid the 'used before assignment' lint error."
          },
          "input_tokens": 5253,
          "output_tokens": 175,
          "retry_message": null,
          "completion_cost": 0.018383999999999998
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "SessionRedirectMixin.resolve_redirects",
        "end_line": null,
        "file_path": "requests/sessions.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Initialize 'prepared_request' with the original request object before entering the loop in the `resolve_redirects` method to avoid the 'used before assignment' lint error.\n\nThe 'prepared_request' variable is used before assignment at line 91. To fix the 'used before assignment' lint error, 'prepared_request' should be initialized before entering the loop.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 90,
            "start_line": 90,
            "scratch_pad": "The 'prepared_request' variable is used before assignment at line 91. To fix the 'used before assignment' lint error, 'prepared_request' should be initialized before entering the loop."
          },
          "output": {
            "span_id": "SessionRedirectMixin.resolve_redirects",
            "end_line": 93,
            "file_path": "requests/sessions.py",
            "start_line": 86,
            "instructions": "Initialize 'prepared_request' with the original request object before entering the loop in the `resolve_redirects` method to avoid the 'used before assignment' lint error.\n\nThe 'prepared_request' variable is used before assignment at line 91. To fix the 'used before assignment' lint error, 'prepared_request' should be initialized before entering the loop."
          },
          "input_tokens": 1797,
          "output_tokens": 78,
          "retry_message": null,
          "completion_cost": 0.006561
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "SessionRedirectMixin.resolve_redirects",
        "end_line": 93,
        "file_path": "requests/sessions.py",
        "max_tokens": 1000,
        "start_line": 86,
        "temperature": 1.6,
        "instructions": "Initialize 'prepared_request' with the original request object before entering the loop in the `resolve_redirects` method to avoid the 'used before assignment' lint error.\n\nThe 'prepared_request' variable is used before assignment at line 91. To fix the 'used before assignment' lint error, 'prepared_request' should be initialized before entering the loop.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```html\n<replace>\n        \"\"\"Receives a Response. Returns a generator of Responses.\"\"\"\n\n        i = 0\n        prepared_request = req.copy()  # Initialize prepared_request before entering the loop\n\n        while resp.is_redirect:\n            prepared_request = prepared_request.copy()\n\n            resp.content  # Consume socket so it can be released\n</replace>"
          },
          "output": {
            "diff": "--- requests/sessions.py\n+++ requests/sessions.py\n@@ -86,6 +86,7 @@\n         \"\"\"Receives a Response. Returns a generator of Responses.\"\"\"\n \n         i = 0\n+        prepared_request = req.copy()  # Initialize prepared_request before entering the loop\n \n         while resp.is_redirect:\n             prepared_request = prepared_request.copy()\n",
            "message": "Applied the change to requests/sessions.py.\n\n<scratch_pad>\n```html\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 6399,
          "output_tokens": 89,
          "retry_message": null,
          "completion_cost": 0.020531999999999998
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- requests/sessions.py\n+++ requests/sessions.py\n@@ -86,6 +86,7 @@\n         \"\"\"Receives a Response. Returns a generator of Responses.\"\"\"\n \n         i = 0\n+        prepared_request = req.copy()  # Initialize prepared_request before entering the loop\n \n         while resp.is_redirect:\n             prepared_request = prepared_request.copy()\n",
        "model": "deepseek-coder",
        "message": "Applied the change to requests/sessions.py.\n\n<scratch_pad>\n```html\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The modifications to the `resolve_redirects` method address the issue by initializing `prepared_request` with the original request and then updating it with the previous iteration's `prepared_request` during each subsequent loop. This approach ensures that the correct HTTP method is preserved throughout the redirection process.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The changes implemented should resolve the issue with incorrect method selection during redirection handling. The initial assignment of `prepared_request` before the loop ensures that it is properly initialized, and subsequent iterations use the `prepared_request` from the previous iteration to update accordingly. This should maintain the correct method throughout the redirection chain.",
            "instructions": null
          },
          "output": {
            "message": "The modifications to the `resolve_redirects` method address the issue by initializing `prepared_request` with the original request and then updating it with the previous iteration's `prepared_request` during each subsequent loop. This approach ensures that the correct HTTP method is preserved throughout the redirection process."
          },
          "input_tokens": 5574,
          "output_tokens": 185,
          "retry_message": null,
          "completion_cost": 0.019497
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The modifications to the `resolve_redirects` method address the issue by initializing `prepared_request` with the original request and then updating it with the previous iteration's `prepared_request` during each subsequent loop. This approach ensures that the correct HTTP method is preserved throughout the redirection process.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "`Session.resolve_redirects` copies the original request for all subsequent requests, can cause incorrect method selection\nConsider the following redirection chain:\n\n```\nPOST /do_something HTTP/1.1\nHost: server.example.com\n...\n\nHTTP/1.1 303 See Other\nLocation: /new_thing_1513\n\nGET /new_thing_1513\nHost: server.example.com\n...\n\nHTTP/1.1 307 Temporary Redirect\nLocation: //failover.example.com/new_thing_1513\n```\n\nThe intermediate 303 See Other has caused the POST to be converted to\na GET.  The subsequent 307 should preserve the GET.  However, because\n`Session.resolve_redirects` starts each iteration by copying the _original_\nrequest object, Requests will issue a POST!\n\n"
}