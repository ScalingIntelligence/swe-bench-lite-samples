{
  "info": {
    "duration": 144.44516777992249,
    "submission": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 425db22c..82c2fb2e 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -88,7 +88,7 @@ class SessionRedirectMixin(object):\n         i = 0\n \n         while resp.is_redirect:\n-            prepared_request = req.copy()\n+            prepared_request = req\n \n             resp.content  # Consume socket so it can be released\n \n",
    "total_cost": 0.11993400000000001,
    "instance_id": "psf__requests-1963",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves the `Session.resolve_redirects` method incorrectly preserving the original request method throughout a redirection chain. This can lead to incorrect method selection, such as a POST request being issued instead of a GET after a 303 See Other redirect. To address this, we should focus our search on the `Session` class and its `resolve_redirects` method to identify where the original request is being copied and potentially modify this behavior to update the request method appropriately based on the redirection status code. Additionally, we should consider relevant methods and classes in the `requests` library that interact with or are affected by the `Session` class and its redirection handling, such as `PreparedRequest`, `HTTPAdapter`, and potentially `urllib3` components like `PoolManager` and `HTTPConnectionPool`.",
            "search_requests": [
              {
                "query": "Session.resolve_redirects method preserving original request",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/requests/**/*.py",
                "function_names": [
                  "resolve_redirects",
                  "prepare_request",
                  "request",
                  "send"
                ]
              },
              {
                "query": "handling of HTTP redirection status codes",
                "class_names": [
                  "PreparedRequest",
                  "HTTPAdapter",
                  "Session"
                ],
                "code_snippet": null,
                "file_pattern": "**/requests/**/*.py",
                "function_names": []
              },
              {
                "query": "interaction with Session class during redirections",
                "class_names": [
                  "PoolManager",
                  "HTTPConnectionPool"
                ],
                "code_snippet": null,
                "file_pattern": "**/requests/packages/urllib3/**/*.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 425,
                "span_id": "Session.send",
                "file_path": "requests/sessions.py"
              },
              {
                "rank": 1,
                "tokens": 683,
                "span_id": "SessionRedirectMixin.resolve_redirects",
                "file_path": "requests/sessions.py"
              },
              {
                "rank": 3,
                "tokens": 711,
                "span_id": "Session.request",
                "file_path": "requests/sessions.py"
              },
              {
                "rank": 5,
                "tokens": 272,
                "span_id": "Session.prepare_request",
                "file_path": "requests/sessions.py"
              },
              {
                "rank": 14,
                "tokens": 409,
                "span_id": "request",
                "file_path": "requests/api.py"
              },
              {
                "rank": 23,
                "tokens": 6,
                "span_id": "BaseAdapter.send",
                "file_path": "requests/adapters.py"
              },
              {
                "rank": 30,
                "tokens": 593,
                "span_id": "HTTPAdapter.send",
                "file_path": "requests/adapters.py"
              },
              {
                "rank": 32,
                "tokens": 185,
                "span_id": "RequestMethods.request",
                "file_path": "requests/packages/urllib3/request.py"
              },
              {
                "rank": 2,
                "tokens": 425,
                "span_id": "Session.send",
                "file_path": "requests/sessions.py"
              },
              {
                "rank": 4,
                "tokens": 78,
                "span_id": "Session.get",
                "file_path": "requests/sessions.py"
              },
              {
                "rank": 4,
                "tokens": 78,
                "span_id": "Session.options",
                "file_path": "requests/sessions.py"
              },
              {
                "rank": 4,
                "tokens": 78,
                "span_id": "Session.head",
                "file_path": "requests/sessions.py"
              },
              {
                "rank": 6,
                "tokens": 34,
                "span_id": "PreparedRequest.prepare_method",
                "file_path": "requests/models.py"
              },
              {
                "rank": 6,
                "tokens": 20,
                "span_id": "PreparedRequest.__repr__",
                "file_path": "requests/models.py"
              },
              {
                "rank": 6,
                "tokens": 50,
                "span_id": "PreparedRequest.copy",
                "file_path": "requests/models.py"
              },
              {
                "rank": 8,
                "tokens": 97,
                "span_id": "PreparedRequest.prepare_content_length",
                "file_path": "requests/models.py"
              },
              {
                "rank": 8,
                "tokens": 137,
                "span_id": "PreparedRequest.prepare_auth",
                "file_path": "requests/models.py"
              },
              {
                "rank": 0,
                "tokens": 298,
                "span_id": "PoolManager.urlopen",
                "file_path": "requests/packages/urllib3/poolmanager.py"
              },
              {
                "rank": 4,
                "tokens": 184,
                "span_id": "PoolManager",
                "file_path": "requests/packages/urllib3/poolmanager.py"
              },
              {
                "rank": 6,
                "tokens": 125,
                "span_id": "PoolManager._new_pool",
                "file_path": "requests/packages/urllib3/poolmanager.py"
              },
              {
                "rank": 6,
                "tokens": 46,
                "span_id": "PoolManager.clear",
                "file_path": "requests/packages/urllib3/poolmanager.py"
              },
              {
                "rank": 1,
                "tokens": 1350,
                "span_id": "HTTPConnectionPool.urlopen",
                "file_path": "requests/packages/urllib3/connectionpool.py"
              },
              {
                "rank": 9,
                "tokens": 75,
                "span_id": "HTTPConnectionPool._get_timeout",
                "file_path": "requests/packages/urllib3/connectionpool.py"
              },
              {
                "rank": 9,
                "tokens": 190,
                "span_id": "HTTPConnectionPool._put_conn",
                "file_path": "requests/packages/urllib3/connectionpool.py"
              },
              {
                "rank": 10,
                "tokens": 59,
                "span_id": "HTTPConnectionPool.close",
                "file_path": "requests/packages/urllib3/connectionpool.py"
              },
              {
                "rank": 10,
                "tokens": 126,
                "span_id": "HTTPConnectionPool.is_same_host",
                "file_path": "requests/packages/urllib3/connectionpool.py"
              }
            ],
            "search_requests": [
              {
                "query": "Session.resolve_redirects method preserving original request",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/requests/**/*.py",
                "function_names": [
                  "resolve_redirects",
                  "prepare_request",
                  "request",
                  "send"
                ]
              },
              {
                "query": "handling of HTTP redirection status codes",
                "class_names": [
                  "PreparedRequest",
                  "HTTPAdapter",
                  "Session"
                ],
                "code_snippet": null,
                "file_pattern": "**/requests/**/*.py",
                "function_names": []
              },
              {
                "query": "interaction with Session class during redirections",
                "class_names": [
                  "PoolManager",
                  "HTTPConnectionPool"
                ],
                "code_snippet": null,
                "file_pattern": "**/requests/packages/urllib3/**/*.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 3049,
          "output_tokens": 367,
          "retry_message": null,
          "completion_cost": 0.014652000000000002
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 425,
            "span_id": "Session.send",
            "file_path": "requests/sessions.py"
          },
          {
            "rank": 0,
            "tokens": 298,
            "span_id": "PoolManager.urlopen",
            "file_path": "requests/packages/urllib3/poolmanager.py"
          },
          {
            "rank": 1,
            "tokens": 683,
            "span_id": "SessionRedirectMixin.resolve_redirects",
            "file_path": "requests/sessions.py"
          },
          {
            "rank": 1,
            "tokens": 1350,
            "span_id": "HTTPConnectionPool.urlopen",
            "file_path": "requests/packages/urllib3/connectionpool.py"
          },
          {
            "rank": 2,
            "tokens": 425,
            "span_id": "Session.send",
            "file_path": "requests/sessions.py"
          },
          {
            "rank": 3,
            "tokens": 711,
            "span_id": "Session.request",
            "file_path": "requests/sessions.py"
          },
          {
            "rank": 4,
            "tokens": 78,
            "span_id": "Session.get",
            "file_path": "requests/sessions.py"
          },
          {
            "rank": 4,
            "tokens": 78,
            "span_id": "Session.options",
            "file_path": "requests/sessions.py"
          },
          {
            "rank": 4,
            "tokens": 78,
            "span_id": "Session.head",
            "file_path": "requests/sessions.py"
          },
          {
            "rank": 4,
            "tokens": 184,
            "span_id": "PoolManager",
            "file_path": "requests/packages/urllib3/poolmanager.py"
          },
          {
            "rank": 5,
            "tokens": 272,
            "span_id": "Session.prepare_request",
            "file_path": "requests/sessions.py"
          },
          {
            "rank": 6,
            "tokens": 34,
            "span_id": "PreparedRequest.prepare_method",
            "file_path": "requests/models.py"
          },
          {
            "rank": 6,
            "tokens": 20,
            "span_id": "PreparedRequest.__repr__",
            "file_path": "requests/models.py"
          },
          {
            "rank": 6,
            "tokens": 50,
            "span_id": "PreparedRequest.copy",
            "file_path": "requests/models.py"
          },
          {
            "rank": 6,
            "tokens": 125,
            "span_id": "PoolManager._new_pool",
            "file_path": "requests/packages/urllib3/poolmanager.py"
          },
          {
            "rank": 6,
            "tokens": 46,
            "span_id": "PoolManager.clear",
            "file_path": "requests/packages/urllib3/poolmanager.py"
          },
          {
            "rank": 8,
            "tokens": 97,
            "span_id": "PreparedRequest.prepare_content_length",
            "file_path": "requests/models.py"
          },
          {
            "rank": 8,
            "tokens": 137,
            "span_id": "PreparedRequest.prepare_auth",
            "file_path": "requests/models.py"
          },
          {
            "rank": 9,
            "tokens": 75,
            "span_id": "HTTPConnectionPool._get_timeout",
            "file_path": "requests/packages/urllib3/connectionpool.py"
          },
          {
            "rank": 9,
            "tokens": 190,
            "span_id": "HTTPConnectionPool._put_conn",
            "file_path": "requests/packages/urllib3/connectionpool.py"
          },
          {
            "rank": 10,
            "tokens": 59,
            "span_id": "HTTPConnectionPool.close",
            "file_path": "requests/packages/urllib3/connectionpool.py"
          },
          {
            "rank": 10,
            "tokens": 126,
            "span_id": "HTTPConnectionPool.is_same_host",
            "file_path": "requests/packages/urllib3/connectionpool.py"
          },
          {
            "rank": 14,
            "tokens": 409,
            "span_id": "request",
            "file_path": "requests/api.py"
          },
          {
            "rank": 23,
            "tokens": 6,
            "span_id": "BaseAdapter.send",
            "file_path": "requests/adapters.py"
          },
          {
            "rank": 30,
            "tokens": 593,
            "span_id": "HTTPAdapter.send",
            "file_path": "requests/adapters.py"
          },
          {
            "rank": 32,
            "tokens": 185,
            "span_id": "RequestMethods.request",
            "file_path": "requests/packages/urllib3/request.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "To address the reported issue regarding `Session.resolve_redirects` copying the original request for all subsequent requests and causing incorrect method selection, we specifically need to focus on the `SessionRedirectMixin.resolve_redirects` method. This method is responsible for handling the redirection logic. The issue suggests that during each iteration of redirection, the method starts by copying the original request object instead of the current request, which leads to incorrect method preservation through the redirection chain. From the search results, we can pinpoint two crucial code spans: the `SessionRedirectMixin` class that contains the `resolve_redirects` method, and inside it, the line where the original request is copied (`prepared_request = req.copy()`). The other relevant code spans include the `Session` class which inherits from `SessionRedirectMixin`, and methods like `request`, `get`, `options`, and `head` that are typically used to initiate requests and might involve redirection handling. These methods might set default behaviors for redirection which, when not correctly handled, could lead to the observed behavior. Understanding the scope and impact of changes in `resolve_redirects` on these methods is crucial for ensuring that any modifications fix the current issue without introducing new ones.",
            "identified_spans": [
              {
                "span_ids": [
                  "SessionRedirectMixin",
                  "SessionRedirectMixin.resolve_redirects",
                  "Session",
                  "Session.prepare_request",
                  "Session.request",
                  "Session.get",
                  "Session.options",
                  "Session.head"
                ],
                "file_path": "requests/sessions.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4523,
          "output_tokens": 369,
          "retry_message": null,
          "completion_cost": 0.019104000000000003
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The file context provides the relevant method `Session.resolve_redirects` and the associated logic where the original request is copied. The code handles various redirection status codes such as 303, 307, and others, and modifies the request method accordingly. However, the current logic starts each iteration by copying the original request object, which is likely causing the issue where the original request method is preserved through all redirections, leading to incorrect method selections. Given the context provided, it appears we have found the area in the code where the problem might lie. Further details on how to modify this behavior specifically to address the issue (e.g., ensuring that the request method is updated not based on the original request but on the last received response) would require deeper code modification discussions, but the relevant part of the code that needs to be addressed has been identified.",
            "search_suggestions": null
          },
          "output": {
            "message": null
          },
          "input_tokens": 3418,
          "output_tokens": 215,
          "retry_message": null,
          "completion_cost": 0.013479000000000001
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "scratch_pad": "The relevant code responsible for handling redirection and preserving or modifying the request method based on redirection status codes has been identified within the SessionRedirectMixin class and its resolve_redirects method. This method ensures that the request method is appropriately updated from POST to GET when encountering a 303 See Other or other relevant status codes, and it seems to handle other status codes as well for preservation of the method. With this context, we can conclude that all necessary files and methods for addressing the issue have been identified.",
            "search_requests": []
          },
          "output": {
            "message": "The relevant code responsible for handling redirection and preserving or modifying the request method based on redirection status codes has been identified within the SessionRedirectMixin class and its resolve_redirects method. This method ensures that the request method is appropriately updated from POST to GET when encountering a 303 See Other or other relevant status codes, and it seems to handle other status codes as well for preservation of the method. With this context, we can conclude that all necessary files and methods for addressing the issue have been identified."
          },
          "input_tokens": 5784,
          "output_tokens": 266,
          "retry_message": null,
          "completion_cost": 0.021342
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "The relevant code responsible for handling redirection and preserving or modifying the request method based on redirection status codes has been identified within the SessionRedirectMixin class and its resolve_redirects method. This method ensures that the request method is appropriately updated from POST to GET when encountering a 303 See Other or other relevant status codes, and it seems to handle other status codes as well for preservation of the method. With this context, we can conclude that all necessary files and methods for addressing the issue have been identified.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "SessionRedirectMixin.resolve_redirects",
            "file_path": "requests/sessions.py",
            "scratch_pad": "To address the issue where `Session.resolve_redirects` copies the original request for all subsequent requests, which can cause incorrect method selection, we need to ensure that during each iteration, the method is appropriately updated based on the redirection status codes. Specifically, the method should be changed from POST to GET upon encountering a 303 See Other, while being preserved for other status codes like 307 Temporary Redirect.",
            "instructions": "Update the `SessionRedirectMixin.resolve_redirects` method to not copy the original request but instead start each iteration with the most recently prepared request. This ensures that the method is correctly updated from POST to GET upon encountering a 303 See Other, and preserved for other status codes."
          },
          "output": {
            "span_id": "SessionRedirectMixin.resolve_redirects",
            "file_path": "requests/sessions.py",
            "instructions": "Update the `SessionRedirectMixin.resolve_redirects` method to not copy the original request but instead start each iteration with the most recently prepared request. This ensures that the method is correctly updated from POST to GET upon encountering a 303 See Other, and preserved for other status codes."
          },
          "input_tokens": 3754,
          "output_tokens": 220,
          "retry_message": null,
          "completion_cost": 0.014561999999999999
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "SessionRedirectMixin.resolve_redirects",
        "end_line": null,
        "file_path": "requests/sessions.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Update the `SessionRedirectMixin.resolve_redirects` method to not copy the original request but instead start each iteration with the most recently prepared request. This ensures that the method is correctly updated from POST to GET upon encountering a 303 See Other, and preserved for other status codes.\n\nThe instruction requires modifying the `resolve_redirects` method to avoid copying the original request each iteration, instead using the most recently prepared request. This change is mainly needed in the lines that involve copying the original request and potentially reinitializing it.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 91,
            "start_line": 91,
            "scratch_pad": "The instruction requires modifying the `resolve_redirects` method to avoid copying the original request each iteration, instead using the most recently prepared request. This change is mainly needed in the lines that involve copying the original request and potentially reinitializing it."
          },
          "output": {
            "span_id": "SessionRedirectMixin.resolve_redirects",
            "end_line": 95,
            "file_path": "requests/sessions.py",
            "start_line": 88,
            "instructions": "Update the `SessionRedirectMixin.resolve_redirects` method to not copy the original request but instead start each iteration with the most recently prepared request. This ensures that the method is correctly updated from POST to GET upon encountering a 303 See Other, and preserved for other status codes.\n\nThe instruction requires modifying the `resolve_redirects` method to avoid copying the original request each iteration, instead using the most recently prepared request. This change is mainly needed in the lines that involve copying the original request and potentially reinitializing it."
          },
          "input_tokens": 1820,
          "output_tokens": 94,
          "retry_message": null,
          "completion_cost": 0.00687
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "SessionRedirectMixin.resolve_redirects",
        "end_line": 95,
        "file_path": "requests/sessions.py",
        "max_tokens": 1000,
        "start_line": 88,
        "temperature": 1.6,
        "instructions": "Update the `SessionRedirectMixin.resolve_redirects` method to not copy the original request but instead start each iteration with the most recently prepared request. This ensures that the method is correctly updated from POST to GET upon encountering a 303 See Other, and preserved for other status codes.\n\nThe instruction requires modifying the `resolve_redirects` method to avoid copying the original request each iteration, instead using the most recently prepared request. This change is mainly needed in the lines that involve copying the original request and potentially reinitializing it.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n        i = 0\n\n        while resp.is_redirect:\n            prepared_request = req\n\n            resp.content  # Consume socket so it can be released\n\n            if i >= self.max_redirects:\n</replace>"
          },
          "output": {
            "diff": "--- requests/sessions.py\n+++ requests/sessions.py\n@@ -88,7 +88,7 @@\n         i = 0\n \n         while resp.is_redirect:\n-            prepared_request = req.copy()\n+            prepared_request = req\n \n             resp.content  # Consume socket so it can be released\n \n",
            "message": "Applied the change to requests/sessions.py.",
            "verification_errors": []
          },
          "input_tokens": 4793,
          "output_tokens": 59,
          "retry_message": null,
          "completion_cost": 0.015264000000000002
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- requests/sessions.py\n+++ requests/sessions.py\n@@ -88,7 +88,7 @@\n         i = 0\n \n         while resp.is_redirect:\n-            prepared_request = req.copy()\n+            prepared_request = req\n \n             resp.content  # Consume socket so it can be released\n \n",
        "model": "deepseek-coder",
        "message": "Applied the change to requests/sessions.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The change ensures that the method is appropriately updated based on the redirection status codes, thereby resolving the issue of incorrect method selection during redirects.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The initial change was to start each iteration with the most recently prepared request instead of copying the original request. This addresses the issue of potentially incorrect method selection during redirects. As the method is now correctly updated from POST to GET upon encountering a 303 See Other, and preserved for other status codes, the issue is resolved. No further changes are needed.",
            "instructions": null
          },
          "output": {
            "message": "The change ensures that the method is appropriately updated based on the redirection status codes, thereby resolving the issue of incorrect method selection during redirects."
          },
          "input_tokens": 4082,
          "output_tokens": 161,
          "retry_message": null,
          "completion_cost": 0.014661
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The change ensures that the method is appropriately updated based on the redirection status codes, thereby resolving the issue of incorrect method selection during redirects.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "`Session.resolve_redirects` copies the original request for all subsequent requests, can cause incorrect method selection\nConsider the following redirection chain:\n\n```\nPOST /do_something HTTP/1.1\nHost: server.example.com\n...\n\nHTTP/1.1 303 See Other\nLocation: /new_thing_1513\n\nGET /new_thing_1513\nHost: server.example.com\n...\n\nHTTP/1.1 307 Temporary Redirect\nLocation: //failover.example.com/new_thing_1513\n```\n\nThe intermediate 303 See Other has caused the POST to be converted to\na GET.  The subsequent 307 should preserve the GET.  However, because\n`Session.resolve_redirects` starts each iteration by copying the _original_\nrequest object, Requests will issue a POST!\n\n"
}