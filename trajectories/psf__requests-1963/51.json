{
  "info": {
    "duration": 225.22691917419434,
    "submission": "diff --git a/requests/sessions.py b/requests/sessions.py\nindex 425db22c..956988e6 100644\n--- a/requests/sessions.py\n+++ b/requests/sessions.py\n@@ -85,10 +85,12 @@ class SessionRedirectMixin(object):\n                           verify=True, cert=None, proxies=None):\n         \"\"\"Receives a Response. Returns a generator of Responses.\"\"\"\n \n+        prepared_request = req.copy()\n         i = 0\n \n         while resp.is_redirect:\n-            prepared_request = req.copy()\n+            # Copy the current prepared request instead of the original request\n+            prepared_request = prepared_request.copy()\n \n             resp.content  # Consume socket so it can be released\n \n",
    "total_cost": 0.157848,
    "instance_id": "psf__requests-1963",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue specifically mentions `Session.resolve_redirects` copying the original request for all subsequent requests, which causes incorrect method selection during redirects. The relevant code spans are likely in the `Session` or `SessionRedirectMixin` classes where `resolve_redirects` is defined. Given the context, it seems that `requests/sessions.py` is the primary place to focus the search.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "SessionRedirectMixin",
                  "Session"
                ],
                "code_snippet": null,
                "file_pattern": "**/sessions.py",
                "function_names": [
                  "resolve_redirects"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 683,
                "span_id": "SessionRedirectMixin.resolve_redirects",
                "file_path": "requests/sessions.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "SessionRedirectMixin",
                  "Session"
                ],
                "code_snippet": null,
                "file_pattern": "**/sessions.py",
                "function_names": [
                  "resolve_redirects"
                ]
              }
            ]
          },
          "input_tokens": 3049,
          "output_tokens": 160,
          "retry_message": null,
          "completion_cost": 0.011547000000000002
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 683,
            "span_id": "SessionRedirectMixin.resolve_redirects",
            "file_path": "requests/sessions.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue concerns the `Session.resolve_redirects` method that incorrectly copies the original request, leading to incorrect method selection during redirection. In the provided search results, the `SessionRedirectMixin.resolve_redirects` method directly addresses this issue. The method iterates over redirect responses and prepares a new request for each redirect. It copies the original request (`req.copy()`) at the start of each iteration, which is the problematic behavior mentioned in the issue. The method then changes the method to 'GET' under specific status codes like 303 and updates the URL for the next request. This method is relevant as it shows how the original request is being copied and how the method might change during the redirection process.",
            "identified_spans": [
              {
                "span_ids": [
                  "SessionRedirectMixin.resolve_redirects"
                ],
                "file_path": "requests/sessions.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 2076,
          "output_tokens": 219,
          "retry_message": null,
          "completion_cost": 0.009513
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The issue describes a problem with the `Session.resolve_redirects` method copying the original request object, which leads to incorrect method selection during redirects. The provided file context includes the `SessionRedirectMixin` class containing the `resolve_redirects` method. This method handles the redirection logic, including copying the original request object at the beginning of each redirection iteration. The code also includes conditions for handling different redirection status codes like 303 See Other. The current implementation correctly changes the method to GET for 303 redirects but does not handle the scenario where a subsequent 307 Temporary Redirect should preserve the method. Therefore, all relevant code spans for resolving redirects are identified, but the implementation does not fully address the reported issue.",
            "search_suggestions": "To fully address the issue, review the handling of status codes within the `resolve_redirects` method to ensure that the method is correctly preserved for subsequent redirects like 307 Temporary Redirect. This might involve modifying the conditionals that adjust the request method based on the redirection status code."
          },
          "output": {
            "message": "To fully address the issue, review the handling of status codes within the `resolve_redirects` method to ensure that the method is correctly preserved for subsequent redirects like 307 Temporary Redirect. This might involve modifying the conditionals that adjust the request method based on the redirection status code."
          },
          "input_tokens": 1971,
          "output_tokens": 249,
          "retry_message": null,
          "completion_cost": 0.009648
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "To fully address the issue, review the handling of status codes within the `resolve_redirects` method to ensure that the method is correctly preserved for subsequent redirects like 307 Temporary Redirect. This might involve modifying the conditionals that adjust the request method based on the redirection status code.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "To address the issue of method preservation during redirects, particularly for status codes like 307 Temporary Redirect, it's necessary to inspect and potentially adjust the logic within the `resolve_redirects` method in `requests/sessions.py`. The current implementation has specific conditionals that modify the request method based on the status code of the redirect response. These need to be reviewed to ensure that methods are not incorrectly altered when they should be preserved. Specifically, the conditionals dealing with status codes 307 should be examined to confirm they correctly handle method preservation as per HTTP specification.",
            "search_requests": [
              {
                "query": "handle status codes within resolve_redirects",
                "class_names": [
                  "SessionRedirectMixin"
                ],
                "code_snippet": null,
                "file_pattern": "**/sessions.py",
                "function_names": [
                  "resolve_redirects"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 683,
                "span_id": "SessionRedirectMixin.resolve_redirects",
                "file_path": "requests/sessions.py"
              },
              {
                "rank": 0,
                "tokens": 6,
                "span_id": "SessionRedirectMixin",
                "file_path": "requests/sessions.py"
              }
            ],
            "search_requests": [
              {
                "query": "handle status codes within resolve_redirects",
                "class_names": [
                  "SessionRedirectMixin"
                ],
                "code_snippet": null,
                "file_pattern": "**/sessions.py",
                "function_names": [
                  "resolve_redirects"
                ]
              }
            ]
          },
          "input_tokens": 4226,
          "output_tokens": 220,
          "retry_message": null,
          "completion_cost": 0.015978
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 683,
            "span_id": "SessionRedirectMixin.resolve_redirects",
            "file_path": "requests/sessions.py"
          },
          {
            "rank": 0,
            "tokens": 6,
            "span_id": "SessionRedirectMixin",
            "file_path": "requests/sessions.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue highlights a problem in `Session.resolve_redirects` where the original request is copied for all subsequent requests, leading to incorrect method selection. This behavior is particularly problematic in a redirection chain that involves status codes like 303 (See Other) and 307 (Temporary Redirect). The provided code spans in the `requests/sessions.py` file clearly show the implementation of the `resolve_redirects` method within the `SessionRedirectMixin` class. The method iterates through redirection responses, copying the original request at each step. This approach causes the method to remain the same as the original request, even when the status code indicates a change in the method (e.g., 303 status code should convert POST to GET). Therefore, the identified spans directly relate to the reported issue, showcasing the problematic code section that needs to be addressed.",
            "identified_spans": [
              {
                "span_ids": [
                  "SessionRedirectMixin",
                  "SessionRedirectMixin.resolve_redirects"
                ],
                "file_path": "requests/sessions.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3123,
          "output_tokens": 257,
          "retry_message": null,
          "completion_cost": 0.013224
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context includes the `resolve_redirects` method in the `SessionRedirectMixin` class, which handles the logic for redirect resolution. The method contains logic for maintaining or altering the request method based on the status code of the redirect response. This directly addresses the issue concerning the preservation of request methods during redirects, especially for status codes like 307. The method's logic should be carefully reviewed to ensure it adheres to HTTP specification, which is necessary to address the problem described in the issue. Therefore, the relevant code to address the issue is present in the file context.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 3145,
          "output_tokens": 159,
          "retry_message": null,
          "completion_cost": 0.01182
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "SessionRedirectMixin.resolve_redirects",
            "file_path": "requests/sessions.py",
            "scratch_pad": "The issue is that during redirects, the method of the original request is preserved instead of being updated based on the redirection status codes like 303. This can cause the method to be incorrect for subsequent requests. The proposed change is to modify the `resolve_redirects` method to start each iteration by copying the _current_ request object rather than the original request object.",
            "instructions": "Update the `resolve_redirects` method to copy the current prepared request at the start of each iteration, rather than copying the original request. This will allow the method to correctly handle redirection status codes that change the method type (e.g., 303)."
          },
          "output": {
            "span_id": "SessionRedirectMixin.resolve_redirects",
            "file_path": "requests/sessions.py",
            "instructions": "Update the `resolve_redirects` method to copy the current prepared request at the start of each iteration, rather than copying the original request. This will allow the method to correctly handle redirection status codes that change the method type (e.g., 303)."
          },
          "input_tokens": 3493,
          "output_tokens": 199,
          "retry_message": null,
          "completion_cost": 0.013464
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "SessionRedirectMixin.resolve_redirects",
        "end_line": null,
        "file_path": "requests/sessions.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Update the `resolve_redirects` method to copy the current prepared request at the start of each iteration, rather than copying the original request. This will allow the method to correctly handle redirection status codes that change the method type (e.g., 303).\n\nNeed to change the line where the prepared_request is copied to use the current prepared_request instead of the original request at the start of each iteration.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 91,
            "start_line": 91,
            "scratch_pad": "Need to change the line where the prepared_request is copied to use the current prepared_request instead of the original request at the start of each iteration."
          },
          "output": {
            "span_id": "SessionRedirectMixin.resolve_redirects",
            "end_line": 95,
            "file_path": "requests/sessions.py",
            "start_line": 88,
            "instructions": "Update the `resolve_redirects` method to copy the current prepared request at the start of each iteration, rather than copying the original request. This will allow the method to correctly handle redirection status codes that change the method type (e.g., 303).\n\nNeed to change the line where the prepared_request is copied to use the current prepared_request instead of the original request at the start of each iteration."
          },
          "input_tokens": 1815,
          "output_tokens": 68,
          "retry_message": null,
          "completion_cost": 0.006465
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "SessionRedirectMixin.resolve_redirects",
        "end_line": 95,
        "file_path": "requests/sessions.py",
        "max_tokens": 1000,
        "start_line": 88,
        "temperature": 1.6,
        "instructions": "Update the `resolve_redirects` method to copy the current prepared request at the start of each iteration, rather than copying the original request. This will allow the method to correctly handle redirection status codes that change the method type (e.g., 303).\n\nNeed to change the line where the prepared_request is copied to use the current prepared_request instead of the original request at the start of each iteration.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\n        i = 0\n\n        while resp.is_redirect:\n            # Copy the current prepared request instead of the original request\n            prepared_request = prepared_request.copy()\n\n            resp.content  # Consume socket so it can be released\n\n            if i >= self.max_redirects:\n</replace>"
          },
          "output": {
            "diff": "--- requests/sessions.py\n+++ requests/sessions.py\n@@ -88,7 +88,8 @@\n         i = 0\n \n         while resp.is_redirect:\n-            prepared_request = req.copy()\n+            # Copy the current prepared request instead of the original request\n+            prepared_request = prepared_request.copy()\n \n             resp.content  # Consume socket so it can be released\n \n",
            "message": "Applied the change to requests/sessions.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": [
              {
                "code": "E0601",
                "line": 92,
                "message": "Using variable 'prepared_request' before assignment",
                "file_path": "requests/sessions.py"
              }
            ]
          },
          "input_tokens": 4477,
          "output_tokens": 80,
          "retry_message": null,
          "completion_cost": 0.014631
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- requests/sessions.py\n+++ requests/sessions.py\n@@ -88,7 +88,8 @@\n         i = 0\n \n         while resp.is_redirect:\n-            prepared_request = req.copy()\n+            # Copy the current prepared request instead of the original request\n+            prepared_request = prepared_request.copy()\n \n             resp.content  # Consume socket so it can be released\n \n",
        "model": "deepseek-coder",
        "message": "Applied the change to requests/sessions.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [
          {
            "code": "E0601",
            "line": 92,
            "message": "Using variable 'prepared_request' before assignment",
            "file_path": "requests/sessions.py"
          }
        ],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "SessionRedirectMixin.resolve_redirects",
            "file_path": "requests/sessions.py",
            "scratch_pad": "The lint error indicates that the variable 'prepared_request' is used before it is assigned in the line where we attempted to copy it. This is because 'prepared_request' is not initialized in the method before the first use. To fix this, we need to initialize 'prepared_request' with the original request at the start of the method.",
            "instructions": "Initialize 'prepared_request' with the original request at the beginning of the 'resolve_redirects' method to ensure it is assigned before any attempt to copy it."
          },
          "output": {
            "span_id": "SessionRedirectMixin.resolve_redirects",
            "file_path": "requests/sessions.py",
            "instructions": "Initialize 'prepared_request' with the original request at the beginning of the 'resolve_redirects' method to ensure it is assigned before any attempt to copy it."
          },
          "input_tokens": 3906,
          "output_tokens": 179,
          "retry_message": null,
          "completion_cost": 0.014403000000000001
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "SessionRedirectMixin.resolve_redirects",
        "end_line": null,
        "file_path": "requests/sessions.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Initialize 'prepared_request' with the original request at the beginning of the 'resolve_redirects' method to ensure it is assigned before any attempt to copy it.\n\nThe instruction requires initializing 'prepared_request' with the original request at the beginning of the 'resolve_redirects' method. This should be done before any attempt to copy it, which currently happens on line 92. Therefore, the initialization should be added right after the method definition.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 85,
            "start_line": 85,
            "scratch_pad": "The instruction requires initializing 'prepared_request' with the original request at the beginning of the 'resolve_redirects' method. This should be done before any attempt to copy it, which currently happens on line 92. Therefore, the initialization should be added right after the method definition."
          },
          "output": {
            "span_id": "SessionRedirectMixin.resolve_redirects",
            "end_line": 88,
            "file_path": "requests/sessions.py",
            "start_line": 84,
            "instructions": "Initialize 'prepared_request' with the original request at the beginning of the 'resolve_redirects' method to ensure it is assigned before any attempt to copy it.\n\nThe instruction requires initializing 'prepared_request' with the original request at the beginning of the 'resolve_redirects' method. This should be done before any attempt to copy it, which currently happens on line 92. Therefore, the initialization should be added right after the method definition."
          },
          "input_tokens": 1812,
          "output_tokens": 103,
          "retry_message": null,
          "completion_cost": 0.006980999999999999
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "SessionRedirectMixin.resolve_redirects",
        "end_line": 88,
        "file_path": "requests/sessions.py",
        "max_tokens": 1000,
        "start_line": 84,
        "temperature": 1.6,
        "instructions": "Initialize 'prepared_request' with the original request at the beginning of the 'resolve_redirects' method to ensure it is assigned before any attempt to copy it.\n\nThe instruction requires initializing 'prepared_request' with the original request at the beginning of the 'resolve_redirects' method. This should be done before any attempt to copy it, which currently happens on line 92. Therefore, the initialization should be added right after the method definition.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n    def resolve_redirects(self, resp, req, stream=False, timeout=None,\n                          verify=True, cert=None, proxies=None):\n        \"\"\"Receives a Response. Returns a generator of Responses.\"\"\"\n\n        prepared_request = req.copy()\n        i = 0\n</replace>"
          },
          "output": {
            "diff": "--- requests/sessions.py\n+++ requests/sessions.py\n@@ -85,6 +85,7 @@\n                           verify=True, cert=None, proxies=None):\n         \"\"\"Receives a Response. Returns a generator of Responses.\"\"\"\n \n+        prepared_request = req.copy()\n         i = 0\n \n         while resp.is_redirect:\n",
            "message": "Applied the change to requests/sessions.py.",
            "verification_errors": []
          },
          "input_tokens": 4501,
          "output_tokens": 74,
          "retry_message": null,
          "completion_cost": 0.014613000000000001
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- requests/sessions.py\n+++ requests/sessions.py\n@@ -85,6 +85,7 @@\n                           verify=True, cert=None, proxies=None):\n         \"\"\"Receives a Response. Returns a generator of Responses.\"\"\"\n \n+        prepared_request = req.copy()\n         i = 0\n \n         while resp.is_redirect:\n",
        "model": "deepseek-coder",
        "message": "Applied the change to requests/sessions.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue of incorrect method selection during redirection has been addressed by ensuring that each iteration of the redirection loop starts with a copy of the current prepared request, not the original request. This change maintains the correct method through redirection chains, ensuring that a 303 status code, for example, can change the method to GET as intended, while subsequent redirects preserve the updated method.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The changes have been successfully applied. The lint error has been resolved by initializing the 'prepared_request' variable with the original request at the beginning of the 'resolve_redirects' method. Now, the 'prepared_request' is always assigned and used, ensuring the method works correctly.",
            "instructions": null
          },
          "output": {
            "message": "The issue of incorrect method selection during redirection has been addressed by ensuring that each iteration of the redirection loop starts with a copy of the current prepared request, not the original request. This change maintains the correct method through redirection chains, ensuring that a 303 status code, for example, can change the method to GET as intended, while subsequent redirects preserve the updated method."
          },
          "input_tokens": 4207,
          "output_tokens": 196,
          "retry_message": null,
          "completion_cost": 0.015561
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue of incorrect method selection during redirection has been addressed by ensuring that each iteration of the redirection loop starts with a copy of the current prepared request, not the original request. This change maintains the correct method through redirection chains, ensuring that a 303 status code, for example, can change the method to GET as intended, while subsequent redirects preserve the updated method.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "`Session.resolve_redirects` copies the original request for all subsequent requests, can cause incorrect method selection\nConsider the following redirection chain:\n\n```\nPOST /do_something HTTP/1.1\nHost: server.example.com\n...\n\nHTTP/1.1 303 See Other\nLocation: /new_thing_1513\n\nGET /new_thing_1513\nHost: server.example.com\n...\n\nHTTP/1.1 307 Temporary Redirect\nLocation: //failover.example.com/new_thing_1513\n```\n\nThe intermediate 303 See Other has caused the POST to be converted to\na GET.  The subsequent 307 should preserve the GET.  However, because\n`Session.resolve_redirects` starts each iteration by copying the _original_\nrequest object, Requests will issue a POST!\n\n"
}