{
  "info": {
    "duration": 158.04176425933838,
    "submission": "",
    "total_cost": 0.14442300000000002,
    "instance_id": "matplotlib__matplotlib-26011",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue pertains to the '_base.py' file within the matplotlib library, specifically the 'set_xlim' method inside the '_AxesBase' class. The problem arises because the 'xlim_changed' callbacks are not being triggered when the change is induced by a shared axis. This is due to the 'emit=False' parameter in the 'set_xlim' method that prevents the callbacks from being processed. To address this, we should investigate the '_base.py' file for the 'set_xlim' method and its related functionalities involving shared axes. Additionally, considering the suggestion from the issue, we should look into the possibility of moving the callback call outside the 'if emit:' statement to handle the changes appropriately.",
            "search_requests": [
              {
                "query": "set_xlim with emit=False",
                "class_names": [],
                "code_snippet": "def set_xlim(...)\n/.../\nif emit:\n    self.callbacks.process('xlim_changed', self)\n    for other in self._shared_x_axes.get_siblings(self):\n        if other is not self:\n            other.set_xlim(self.viewLim.intervalx,\n                            emit=False, auto=auto)",
                "file_pattern": "**/matplotlib/axes/_base.py",
                "function_names": []
              }
            ]
          },
          "output": null,
          "input_tokens": 3399,
          "output_tokens": 318,
          "retry_message": "\n\nUnfortunately, I didn\u2019t find any relevant results.",
          "completion_cost": 0.014967
        },
        {
          "action": {
            "complete": false,
            "scratch_pad": "Given that the initial search for the '_base.py' file and the 'set_xlim' method with 'emit=False' did not yield any results, it might be beneficial to broaden the search to include other files and methods related to axis sharing and limit setting. Specifically, we can look into the 'Axis' class and its subclasses within the 'matplotlib/axis.py' file, as well as the 'Axes3D' class in 'mpl_toolkits/mplot3d/axes3d.py' for any similar issues with axis limits when shared. Additionally, we can explore the 'SecondaryAxis' class in 'matplotlib/axes/_secondary_axes.py' for any relevant methods that might be affected by this issue.",
            "search_requests": [
              {
                "query": "axis limit setting with emit parameter",
                "class_names": [
                  "Axis",
                  "XAxis",
                  "YAxis"
                ],
                "code_snippet": "",
                "file_pattern": "**/matplotlib/axis.py",
                "function_names": [
                  "_set_lim"
                ]
              },
              {
                "query": "3D axis limit setting with emit parameter",
                "class_names": [
                  "Axes3D"
                ],
                "code_snippet": "",
                "file_pattern": "**/mpl_toolkits/mplot3d/axes3d.py",
                "function_names": []
              },
              {
                "query": "secondary axis limit setting with emit parameter",
                "class_names": [
                  "SecondaryAxis"
                ],
                "code_snippet": "",
                "file_pattern": "**/matplotlib/axes/_secondary_axes.py",
                "function_names": [
                  "_set_lims"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 714,
                "span_id": "Axis._set_lim",
                "file_path": "lib/matplotlib/axis.py"
              },
              {
                "rank": 1,
                "tokens": 133,
                "span_id": "Axis.set_default_intervals",
                "file_path": "lib/matplotlib/axis.py"
              },
              {
                "rank": 2,
                "tokens": 63,
                "span_id": "Axis.set_clip_path",
                "file_path": "lib/matplotlib/axis.py"
              },
              {
                "rank": 2,
                "tokens": 165,
                "span_id": "Axis.set_view_interval",
                "file_path": "lib/matplotlib/axis.py"
              },
              {
                "rank": 2,
                "tokens": 28,
                "span_id": "Axis.get_view_interval",
                "file_path": "lib/matplotlib/axis.py"
              },
              {
                "rank": 3,
                "tokens": 139,
                "span_id": "Axis.set_data_interval",
                "file_path": "lib/matplotlib/axis.py"
              },
              {
                "rank": 3,
                "tokens": 28,
                "span_id": "Axis.get_data_interval",
                "file_path": "lib/matplotlib/axis.py"
              },
              {
                "rank": 4,
                "tokens": 50,
                "span_id": "Axis._reset_minor_tick_kw",
                "file_path": "lib/matplotlib/axis.py"
              },
              {
                "rank": 4,
                "tokens": 52,
                "span_id": "Axis._set_autoscale_on",
                "file_path": "lib/matplotlib/axis.py"
              },
              {
                "rank": 0,
                "tokens": 81,
                "span_id": "Axes3D.get_w_lims",
                "file_path": "lib/mpl_toolkits/mplot3d/axes3d.py"
              },
              {
                "rank": 0,
                "tokens": 148,
                "span_id": "Axes3D.set_zlim",
                "file_path": "lib/mpl_toolkits/mplot3d/axes3d.py"
              },
              {
                "rank": 1,
                "tokens": 38,
                "span_id": "Axes3D.update_datalim",
                "file_path": "lib/mpl_toolkits/mplot3d/axes3d.py"
              },
              {
                "rank": 1,
                "tokens": 42,
                "span_id": "Axes3D:21",
                "file_path": "lib/mpl_toolkits/mplot3d/axes3d.py"
              },
              {
                "rank": 1,
                "tokens": 83,
                "span_id": "Axes3D.get_axis_position",
                "file_path": "lib/mpl_toolkits/mplot3d/axes3d.py"
              },
              {
                "rank": 2,
                "tokens": 147,
                "span_id": "Axes3D.auto_scale_xyz",
                "file_path": "lib/mpl_toolkits/mplot3d/axes3d.py"
              },
              {
                "rank": 3,
                "tokens": 392,
                "span_id": "Axes3D:31",
                "file_path": "lib/mpl_toolkits/mplot3d/axes3d.py"
              },
              {
                "rank": 3,
                "tokens": 18,
                "span_id": "Axes3D.get_xlim",
                "file_path": "lib/mpl_toolkits/mplot3d/axes3d.py"
              },
              {
                "rank": 3,
                "tokens": 23,
                "span_id": "Axes3D.get_zlim",
                "file_path": "lib/mpl_toolkits/mplot3d/axes3d.py"
              },
              {
                "rank": 0,
                "tokens": 150,
                "span_id": "SecondaryAxis._set_lims",
                "file_path": "lib/matplotlib/axes/_secondary_axes.py"
              },
              {
                "rank": 1,
                "tokens": 25,
                "span_id": "SecondaryAxis.apply_aspect",
                "file_path": "lib/matplotlib/axes/_secondary_axes.py"
              },
              {
                "rank": 1,
                "tokens": 60,
                "span_id": "SecondaryAxis.set_ticks",
                "file_path": "lib/matplotlib/axes/_secondary_axes.py"
              },
              {
                "rank": 1,
                "tokens": 234,
                "span_id": "SecondaryAxis.set_functions",
                "file_path": "lib/matplotlib/axes/_secondary_axes.py"
              },
              {
                "rank": 2,
                "tokens": 201,
                "span_id": "SecondaryAxis._set_scale",
                "file_path": "lib/matplotlib/axes/_secondary_axes.py"
              },
              {
                "rank": 2,
                "tokens": 87,
                "span_id": "SecondaryAxis.draw",
                "file_path": "lib/matplotlib/axes/_secondary_axes.py"
              },
              {
                "rank": 3,
                "tokens": 21,
                "span_id": "SecondaryAxis",
                "file_path": "lib/matplotlib/axes/_secondary_axes.py"
              },
              {
                "rank": 4,
                "tokens": 46,
                "span_id": "SecondaryAxis.set_aspect",
                "file_path": "lib/matplotlib/axes/_secondary_axes.py"
              },
              {
                "rank": 4,
                "tokens": 75,
                "span_id": "SecondaryAxis.set_color",
                "file_path": "lib/matplotlib/axes/_secondary_axes.py"
              }
            ],
            "search_requests": [
              {
                "query": "axis limit setting with emit parameter",
                "class_names": [
                  "Axis",
                  "XAxis",
                  "YAxis"
                ],
                "code_snippet": "",
                "file_pattern": "**/matplotlib/axis.py",
                "function_names": [
                  "_set_lim"
                ]
              },
              {
                "query": "3D axis limit setting with emit parameter",
                "class_names": [
                  "Axes3D"
                ],
                "code_snippet": "",
                "file_pattern": "**/mpl_toolkits/mplot3d/axes3d.py",
                "function_names": []
              },
              {
                "query": "secondary axis limit setting with emit parameter",
                "class_names": [
                  "SecondaryAxis"
                ],
                "code_snippet": "",
                "file_pattern": "**/matplotlib/axes/_secondary_axes.py",
                "function_names": [
                  "_set_lims"
                ]
              }
            ]
          },
          "input_tokens": 3751,
          "output_tokens": 413,
          "retry_message": null,
          "completion_cost": 0.017448
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 714,
            "span_id": "Axis._set_lim",
            "file_path": "lib/matplotlib/axis.py"
          },
          {
            "rank": 1,
            "tokens": 133,
            "span_id": "Axis.set_default_intervals",
            "file_path": "lib/matplotlib/axis.py"
          },
          {
            "rank": 2,
            "tokens": 63,
            "span_id": "Axis.set_clip_path",
            "file_path": "lib/matplotlib/axis.py"
          },
          {
            "rank": 2,
            "tokens": 165,
            "span_id": "Axis.set_view_interval",
            "file_path": "lib/matplotlib/axis.py"
          },
          {
            "rank": 2,
            "tokens": 28,
            "span_id": "Axis.get_view_interval",
            "file_path": "lib/matplotlib/axis.py"
          },
          {
            "rank": 3,
            "tokens": 139,
            "span_id": "Axis.set_data_interval",
            "file_path": "lib/matplotlib/axis.py"
          },
          {
            "rank": 3,
            "tokens": 28,
            "span_id": "Axis.get_data_interval",
            "file_path": "lib/matplotlib/axis.py"
          },
          {
            "rank": 4,
            "tokens": 50,
            "span_id": "Axis._reset_minor_tick_kw",
            "file_path": "lib/matplotlib/axis.py"
          },
          {
            "rank": 4,
            "tokens": 52,
            "span_id": "Axis._set_autoscale_on",
            "file_path": "lib/matplotlib/axis.py"
          },
          {
            "rank": 0,
            "tokens": 81,
            "span_id": "Axes3D.get_w_lims",
            "file_path": "lib/mpl_toolkits/mplot3d/axes3d.py"
          },
          {
            "rank": 0,
            "tokens": 148,
            "span_id": "Axes3D.set_zlim",
            "file_path": "lib/mpl_toolkits/mplot3d/axes3d.py"
          },
          {
            "rank": 1,
            "tokens": 38,
            "span_id": "Axes3D.update_datalim",
            "file_path": "lib/mpl_toolkits/mplot3d/axes3d.py"
          },
          {
            "rank": 1,
            "tokens": 42,
            "span_id": "Axes3D:21",
            "file_path": "lib/mpl_toolkits/mplot3d/axes3d.py"
          },
          {
            "rank": 1,
            "tokens": 83,
            "span_id": "Axes3D.get_axis_position",
            "file_path": "lib/mpl_toolkits/mplot3d/axes3d.py"
          },
          {
            "rank": 2,
            "tokens": 147,
            "span_id": "Axes3D.auto_scale_xyz",
            "file_path": "lib/mpl_toolkits/mplot3d/axes3d.py"
          },
          {
            "rank": 3,
            "tokens": 392,
            "span_id": "Axes3D:31",
            "file_path": "lib/mpl_toolkits/mplot3d/axes3d.py"
          },
          {
            "rank": 3,
            "tokens": 18,
            "span_id": "Axes3D.get_xlim",
            "file_path": "lib/mpl_toolkits/mplot3d/axes3d.py"
          },
          {
            "rank": 3,
            "tokens": 23,
            "span_id": "Axes3D.get_zlim",
            "file_path": "lib/mpl_toolkits/mplot3d/axes3d.py"
          },
          {
            "rank": 0,
            "tokens": 150,
            "span_id": "SecondaryAxis._set_lims",
            "file_path": "lib/matplotlib/axes/_secondary_axes.py"
          },
          {
            "rank": 1,
            "tokens": 25,
            "span_id": "SecondaryAxis.apply_aspect",
            "file_path": "lib/matplotlib/axes/_secondary_axes.py"
          },
          {
            "rank": 1,
            "tokens": 60,
            "span_id": "SecondaryAxis.set_ticks",
            "file_path": "lib/matplotlib/axes/_secondary_axes.py"
          },
          {
            "rank": 1,
            "tokens": 234,
            "span_id": "SecondaryAxis.set_functions",
            "file_path": "lib/matplotlib/axes/_secondary_axes.py"
          },
          {
            "rank": 2,
            "tokens": 201,
            "span_id": "SecondaryAxis._set_scale",
            "file_path": "lib/matplotlib/axes/_secondary_axes.py"
          },
          {
            "rank": 2,
            "tokens": 87,
            "span_id": "SecondaryAxis.draw",
            "file_path": "lib/matplotlib/axes/_secondary_axes.py"
          },
          {
            "rank": 3,
            "tokens": 21,
            "span_id": "SecondaryAxis",
            "file_path": "lib/matplotlib/axes/_secondary_axes.py"
          },
          {
            "rank": 4,
            "tokens": 46,
            "span_id": "SecondaryAxis.set_aspect",
            "file_path": "lib/matplotlib/axes/_secondary_axes.py"
          },
          {
            "rank": 4,
            "tokens": 75,
            "span_id": "SecondaryAxis.set_color",
            "file_path": "lib/matplotlib/axes/_secondary_axes.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue refers to the 'xlim_changed' callback not being emitted when an axis is shared via 'sharex'. The provided search results include code spans that are relevant to axis manipulation and callback processing. In 'lib/matplotlib/axis.py', the '_set_lim' method handles setting axis limits and includes 'emit' parameter to control whether the 'xlim_changed' callback is processed. This method is crucial as it involves shared axis handling and callback triggering, which directly relate to the reported issue. Furthermore, in 'lib/mpl_toolkits/mplot3d/axes3d.py', the 'set_zlim' method also uses the 'emit' parameter similarly, though it's specifically for the z-axis and not directly related to the issue but shows a consistent pattern in how Matplotlib handles axis limit changes and callbacks. These methods and their handling of the 'emit' parameter are central to the issue at hand, indicating that adjusting the 'emit' parameter in '_set_lim' for shared axes could resolve the issue without introducing new problems like recursion. Therefore, these code spans are highly relevant to resolving the reported issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "Axis",
                  "Axis.__init__",
                  "Axis._set_autoscale_on",
                  "Axis._reset_minor_tick_kw",
                  "Axis.set_clip_path",
                  "Axis.get_view_interval",
                  "Axis.set_view_interval",
                  "Axis.get_data_interval",
                  "Axis.set_data_interval",
                  "Axis.set_default_intervals",
                  "Axis._set_lim",
                  "Axis._set_lim"
                ],
                "file_path": "lib/matplotlib/axis.py"
              },
              {
                "span_ids": [
                  "Axes3D",
                  "Axes3D.get_axis_position",
                  "Axes3D.update_datalim",
                  "Axes3D:21",
                  "Axes3D.auto_scale_xyz",
                  "Axes3D.get_w_lims",
                  "Axes3D.set_zlim",
                  "Axes3D.get_xlim",
                  "Axes3D.get_zlim",
                  "Axes3D:31"
                ],
                "file_path": "lib/mpl_toolkits/mplot3d/axes3d.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 5848,
          "output_tokens": 543,
          "retry_message": null,
          "completion_cost": 0.025689
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The provided file context focuses on the 'Axis' class and 'Axes3D' class, exploring methods related to axis limits and sharing, such as 'set_xlim', 'set_view_interval', and '_set_lim'. These are pertinent to the issue reported, particularly regarding 'xlim_changed' not being emitted on shared axes. However, the specific section of code in '_base.py' that was referenced in the issue is not provided in the context. This indicates that while relevant methods and classes are touched upon, the exact issue context is not fully covered.",
            "search_suggestions": "Review 'lib/matplotlib/_base.py' file for the 'set_xlim' method to identify the specific code block where 'emit=False' is set and how this affects callbacks for shared axes."
          },
          "output": {
            "message": "Review 'lib/matplotlib/_base.py' file for the 'set_xlim' method to identify the specific code block where 'emit=False' is set and how this affects callbacks for shared axes."
          },
          "input_tokens": 4957,
          "output_tokens": 203,
          "retry_message": null,
          "completion_cost": 0.017916
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Review 'lib/matplotlib/_base.py' file for the 'set_xlim' method to identify the specific code block where 'emit=False' is set and how this affects callbacks for shared axes.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "scratch_pad": "The initial search request for 'lib/matplotlib/_base.py' did not yield any results, as the file was not found in the context provided. The analysis of the context focuses on 'lib/matplotlib/axis.py' and 'lib/mpl_toolkits/mplot3d/axes3d.py', where '_set_lim' methods contain an 'emit' parameter. However, the specific code block where 'emit=False' is set inside a loop for shared axes was not delineated in the provided context. Given the detailed methods in these files, it's evidence that further search in the context for 'set_xlim' with 'emit' parameter and in files or methods related to axis sharing is necessary to precisely locate the specific code block where 'emit=False' is set for shared axes.",
            "search_requests": [
              {
                "query": "setting emit to False in shared axis context",
                "class_names": [
                  "Axis",
                  "XAxis",
                  "YAxis"
                ],
                "code_snippet": "",
                "file_pattern": "**/matplotlib/axis.py",
                "function_names": [
                  "_set_lim"
                ]
              },
              {
                "query": "emit False shared 3D axes",
                "class_names": [
                  "Axes3D"
                ],
                "code_snippet": "",
                "file_pattern": "**/mpl_toolkits/mplot3d/axes3d.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "message": "The initial search request for 'lib/matplotlib/_base.py' did not yield any results, as the file was not found in the context provided. The analysis of the context focuses on 'lib/matplotlib/axis.py' and 'lib/mpl_toolkits/mplot3d/axes3d.py', where '_set_lim' methods contain an 'emit' parameter. However, the specific code block where 'emit=False' is set inside a loop for shared axes was not delineated in the provided context. Given the detailed methods in these files, it's evidence that further search in the context for 'set_xlim' with 'emit' parameter and in files or methods related to axis sharing is necessary to precisely locate the specific code block where 'emit=False' is set for shared axes."
          },
          "input_tokens": 7488,
          "output_tokens": 378,
          "retry_message": null,
          "completion_cost": 0.028134000000000003
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "The initial search request for 'lib/matplotlib/_base.py' did not yield any results, as the file was not found in the context provided. The analysis of the context focuses on 'lib/matplotlib/axis.py' and 'lib/mpl_toolkits/mplot3d/axes3d.py', where '_set_lim' methods contain an 'emit' parameter. However, the specific code block where 'emit=False' is set inside a loop for shared axes was not delineated in the provided context. Given the detailed methods in these files, it's evidence that further search in the context for 'set_xlim' with 'emit' parameter and in files or methods related to axis sharing is necessary to precisely locate the specific code block where 'emit=False' is set for shared axes.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "set_xlim",
            "file_path": "lib/matplotlib/axes/_base.py",
            "scratch_pad": "The issue reported is about the 'xlim_changed' event not being emitted when an axis is shared via 'sharex'. The current implementation calls 'set_xlim' with 'emit=False' for the sibling axes, which prevents the callbacks from being triggered. The suggestion is to move the callback call outside the 'if emit:' statement to ensure callbacks are triggered even when 'emit=False'.",
            "instructions": "Move the callback call for 'xlim_changed' outside the 'if emit:' statement in the 'set_xlim' method to ensure it gets triggered even when 'emit=False'."
          },
          "output": null,
          "input_tokens": 5563,
          "output_tokens": 185,
          "retry_message": "File lib/matplotlib/axes/_base.py is not found in the file context. You can only request changes to files that are in file context:\n * lib/matplotlib/axis.py\n * lib/mpl_toolkits/mplot3d/axes3d.py\n",
          "completion_cost": 0.019464
        },
        {
          "action": {
            "action": "reject",
            "finish": null,
            "reject": "The file containing the code block where the 'emit=False' logic is set for shared axes is not present in the provided context. Thus, it's not possible to make the required changes.",
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The file mentioned in the issue, lib/matplotlib/axes/_base.py, is not available in the context provided for modifications. The available context includes lib/matplotlib/axis.py and lib/mpl_toolkits/mplot3d/axes3d.py. Based on the issue description, the relevant logic might be present in the '_set_lim' method of the Axis class in lib/matplotlib/axis.py, but the exact location where 'emit=False' is set within a loop for shared axes is not clear from the given context.",
            "instructions": null
          },
          "output": {
            "message": "The file containing the code block where the 'emit=False' logic is set for shared axes is not present in the provided context. Thus, it's not possible to make the required changes."
          },
          "input_tokens": 5830,
          "output_tokens": 221,
          "retry_message": null,
          "completion_cost": 0.020805000000000004
        }
      ]
    },
    {
      "name": "Rejected",
      "state": {
        "model": "gpt-4o",
        "message": "The file containing the code block where the 'emit=False' logic is set for shared axes is not present in the provided context. Thus, it's not possible to make the required changes.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "xlim_changed not emitted on shared axis\n<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->\r\n<!--You can feel free to delete the sections that do not apply.-->\r\n\r\n### Bug report\r\n\r\n**Bug summary**\r\n\r\nWhen an axis is shared with another its registered \"xlim_changed\" callbacks does not get called when the change is induced by a shared axis (via sharex=). \r\n\r\nIn _base.py the set_xlim for sibling axis are called with emit=False:\r\n\r\n```\r\nmatplotlib/lib/matplotlib/axes/_base.py:\r\n\r\n/.../\r\ndef set_xlim(...)\r\n/.../\r\n        if emit:\r\n            self.callbacks.process('xlim_changed', self)\r\n            # Call all of the other x-axes that are shared with this one\r\n            for other in self._shared_x_axes.get_siblings(self):\r\n                if other is not self:\r\n                    other.set_xlim(self.viewLim.intervalx,\r\n                                   emit=False, auto=auto)\r\n```\r\n\r\nI'm very new to matplotlib, so perhaps there is a good reason for this? emit=False seems to disable both continued \"inheritance\" of axis (why?) and triggering of change callbacks (looking at the code above).\r\n\r\nIt seems like one would at least want to trigger the xlim_changed callbacks as they would be intended to react to any change in axis limits.\r\n\r\nEdit: Setting emit=True seems to introduce a recursion issue (not sure why but as inheritance seems to be passed along anyway it doesn't really matter). Moving the callback call to outside of the \"if emit:\"-statement seems to solve the issue as far as I can see when trying it out. Any reason to keep it inside the if-statement? \r\n\n"
}