{
  "info": {
    "duration": 249.69172716140747,
    "submission": "",
    "total_cost": 0.166947,
    "instance_id": "scikit-learn__scikit-learn-10297",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue is about the lack of support for the 'store_cv_values' parameter in 'RidgeClassifierCV' from the sklearn.linear_model module. The goal is to locate the relevant code for this class and potentially the parent classes or any related methods that handle cross-validation values. This will help understand why the parameter is not recognized and how it can be potentially added.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "RidgeClassifierCV",
                  "_BaseRidgeCV"
                ],
                "code_snippet": null,
                "file_pattern": "**/sklearn/linear_model/**/*.py",
                "function_names": [
                  "fit"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 315,
                "span_id": "_BaseRidgeCV.fit",
                "file_path": "sklearn/linear_model/ridge.py"
              },
              {
                "rank": 0,
                "tokens": 263,
                "span_id": "RidgeClassifierCV.fit",
                "file_path": "sklearn/linear_model/ridge.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "RidgeClassifierCV",
                  "_BaseRidgeCV"
                ],
                "code_snippet": null,
                "file_pattern": "**/sklearn/linear_model/**/*.py",
                "function_names": [
                  "fit"
                ]
              }
            ]
          },
          "input_tokens": 3662,
          "output_tokens": 169,
          "retry_message": null,
          "completion_cost": 0.013521000000000002
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 315,
            "span_id": "_BaseRidgeCV.fit",
            "file_path": "sklearn/linear_model/ridge.py"
          },
          {
            "rank": 0,
            "tokens": 263,
            "span_id": "RidgeClassifierCV.fit",
            "file_path": "sklearn/linear_model/ridge.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves the 'store_cv_values' parameter in the 'RidgeClassifierCV' class, which is said to be non-existent or not working as expected. The search results indicate that the 'RidgeClassifierCV' class indeed lacks the 'store_cv_values' parameter in its '__init__' method, despite its use in the documentation. The 'store_cv_values' parameter is present in the parent class '_BaseRidgeCV', but it is not propagated to the 'RidgeClassifierCV' class. This discrepancy could be the root cause of the issue. To resolve this, the 'RidgeClassifierCV' class should be modified to include the 'store_cv_values' parameter, allowing it to be passed to the '_BaseRidgeCV' parent class similarly to how other parameters like 'fit_intercept', 'normalize', 'scoring', and 'cv' are handled. Additionally, the 'fit' method in 'RidgeClassifierCV' should be checked to ensure that it correctly handles the 'store_cv_values' parameter if it is used.",
            "identified_spans": [
              {
                "span_ids": [
                  "_BaseRidgeCV.__init__",
                  "RidgeClassifierCV.__init__",
                  "RidgeClassifierCV.fit"
                ],
                "file_path": "sklearn/linear_model/ridge.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 2657,
          "output_tokens": 329,
          "retry_message": null,
          "completion_cost": 0.012906
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The file context provided contains the `RidgeClassifierCV` class, which is relevant to the issue at hand. However, the `store_cv_values` parameter is not directly present in the `RidgeClassifierCV` class's `__init__` method. Instead, this parameter is inherited from the `_BaseRidgeCV` class, which is a parent class of `RidgeClassifierCV`. The file context is sufficient to identify that `store_cv_values` is intended to be a supported parameter but is not directly available in `RidgeClassifierCV`. Furthermore, the context suggests that using `store_cv_values` with `cv=None` could potentially work, but any other `cv` setting raises an incompatibility error. Therefore, the file context is relevant but might need further details about how `_BaseRidgeCV` handles this parameter.",
            "search_suggestions": "Look for the implementation of the `_RidgeGCV` class or any methods it uses to handle the `store_cv_values` parameter. Also, evaluate how parameters are handled in child classes like `RidgeClassifierCV` to determine why `store_cv_values` isn't available or functional as expected."
          },
          "output": {
            "message": "Look for the implementation of the `_RidgeGCV` class or any methods it uses to handle the `store_cv_values` parameter. Also, evaluate how parameters are handled in child classes like `RidgeClassifierCV` to determine why `store_cv_values` isn't available or functional as expected."
          },
          "input_tokens": 2418,
          "output_tokens": 291,
          "retry_message": null,
          "completion_cost": 0.011619
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look for the implementation of the `_RidgeGCV` class or any methods it uses to handle the `store_cv_values` parameter. Also, evaluate how parameters are handled in child classes like `RidgeClassifierCV` to determine why `store_cv_values` isn't available or functional as expected.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The 'store_cv_values' parameter exists in the '_BaseRidgeCV' class but is not being passed down to or recognized by the 'RidgeClassifierCV' class, which extends '_BaseRidgeCV'. This discrepancy explains the 'TypeError' encountered, as the 'store_cv_values' argument is not expected in the 'RidgeClassifierCV' constructor. To resolve this, the 'store_cv_values' parameter should be added to the 'RidgeClassifierCV' class's constructor and properly handled. Additionally, it's worth investigating how this parameter is used or should be used in the context of classification, as it may require specific implementation details different from those of regression models.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "_BaseRidgeCV",
                  "RidgeClassifierCV"
                ],
                "code_snippet": "_BaseRidgeCV, RidgeClassifierCV",
                "file_pattern": "**/sklearn/linear_model/**/*.py",
                "function_names": [
                  "__init__"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 10,
                "span_id": "_BaseRidgeCV",
                "file_path": "sklearn/linear_model/ridge.py"
              },
              {
                "rank": 0,
                "tokens": 802,
                "span_id": "RidgeClassifierCV",
                "file_path": "sklearn/linear_model/ridge.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "_BaseRidgeCV",
                  "RidgeClassifierCV"
                ],
                "code_snippet": "_BaseRidgeCV, RidgeClassifierCV",
                "file_pattern": "**/sklearn/linear_model/**/*.py",
                "function_names": [
                  "__init__"
                ]
              }
            ]
          },
          "input_tokens": 4985,
          "output_tokens": 265,
          "retry_message": null,
          "completion_cost": 0.01893
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 10,
            "span_id": "_BaseRidgeCV",
            "file_path": "sklearn/linear_model/ridge.py"
          },
          {
            "rank": 0,
            "tokens": 802,
            "span_id": "RidgeClassifierCV",
            "file_path": "sklearn/linear_model/ridge.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about the parameter 'store_cv_values' in the 'RidgeClassifierCV' class. According to the issue, the 'RidgeClassifierCV' class does not have a 'store_cv_values' parameter, even though the documentation suggests it should. This discrepancy leads to a TypeError when attempting to use it. The current context shows that the 'RidgeClassifierCV' class inherits from '_BaseRidgeCV', which does have a 'store_cv_values' parameter. However, the constructor of 'RidgeClassifierCV' does not include this parameter. This mismatch is the root cause of the issue. The new search results confirm the same structure and the discrepancy remains, with 'RidgeClassifierCV' not having 'store_cv_values'. Therefore, the solution involves modifying the 'RidgeClassifierCV' class to include and handle the 'store_cv_values' parameter correctly.",
            "identified_spans": [
              {
                "span_ids": [
                  "RidgeClassifierCV.__init__"
                ],
                "file_path": "sklearn/linear_model/ridge.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3190,
          "output_tokens": 271,
          "retry_message": null,
          "completion_cost": 0.013635000000000001
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The 'store_cv_values' parameter exists in the '_BaseRidgeCV' class but is not being passed down to or recognized by the 'RidgeClassifierCV' class, which extends '_BaseRidgeCV'. This discrepancy explains the 'TypeError' encountered, as the 'store_cv_values' argument is not expected in the 'RidgeClassifierCV' constructor. To resolve this, the 'store_cv_values' parameter should be added to the 'RidgeClassifierCV' class's constructor and properly handled. Additionally, it's worth investigating how this parameter is used or should be used in the context of classification, as it may require specific implementation details different from those of regression models.",
            "search_suggestions": "Look for how 'store_cv_values' is implemented and used in the '_BaseRidgeCV' class. Also, check for any similar implementations or handling of similar parameters in other classifiers within the sklearn.linear_model package to understand best practices for implementing 'store_cv_values' in 'RidgeClassifierCV'."
          },
          "output": {
            "message": "Look for how 'store_cv_values' is implemented and used in the '_BaseRidgeCV' class. Also, check for any similar implementations or handling of similar parameters in other classifiers within the sklearn.linear_model package to understand best practices for implementing 'store_cv_values' in 'RidgeClassifierCV'."
          },
          "input_tokens": 3578,
          "output_tokens": 257,
          "retry_message": null,
          "completion_cost": 0.014589000000000001
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look for how 'store_cv_values' is implemented and used in the '_BaseRidgeCV' class. Also, check for any similar implementations or handling of similar parameters in other classifiers within the sklearn.linear_model package to understand best practices for implementing 'store_cv_values' in 'RidgeClassifierCV'.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The investigation into the 'store_cv_values' parameter reveals that it's defined in the '_BaseRidgeCV' class and is intended to store cross-validation values during model fitting. However, this parameter is not passed to the 'RidgeClassifierCV' class, which is why it is not recognized in that context. The 'RidgeClassifierCV' class inherits from '_BaseRidgeCV' but does not include 'store_cv_values' in its constructor, nor does it handle this attribute during its fit method. To resolve this issue, 'store_cv_values' should be added as a parameter to 'RidgeClassifierCV' and handled appropriately, possibly leveraging the same mechanisms employed by '_BaseRidgeCV'. Additionally, since 'store_cv_values' would affect how cv_values_ are stored and used, these aspects need careful review and potential adjustments specific to classification tasks, which might differ from regression tasks due to different performance metrics and the nature of predictions.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "_BaseRidgeCV"
                ],
                "code_snippet": "store_cv_values",
                "file_pattern": "**/sklearn/linear_model/**/*.py",
                "function_names": [
                  "fit",
                  "__init__"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 315,
                "span_id": "_BaseRidgeCV.fit",
                "file_path": "sklearn/linear_model/ridge.py"
              },
              {
                "rank": 0,
                "tokens": 10,
                "span_id": "_BaseRidgeCV",
                "file_path": "sklearn/linear_model/ridge.py"
              },
              {
                "rank": 3,
                "tokens": 826,
                "span_id": "_RidgeGCV.fit",
                "file_path": "sklearn/linear_model/ridge.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "_BaseRidgeCV"
                ],
                "code_snippet": "store_cv_values",
                "file_pattern": "**/sklearn/linear_model/**/*.py",
                "function_names": [
                  "fit",
                  "__init__"
                ]
              }
            ]
          },
          "input_tokens": 6430,
          "output_tokens": 327,
          "retry_message": null,
          "completion_cost": 0.024195
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 315,
            "span_id": "_BaseRidgeCV.fit",
            "file_path": "sklearn/linear_model/ridge.py"
          },
          {
            "rank": 0,
            "tokens": 10,
            "span_id": "_BaseRidgeCV",
            "file_path": "sklearn/linear_model/ridge.py"
          },
          {
            "rank": 3,
            "tokens": 826,
            "span_id": "_RidgeGCV.fit",
            "file_path": "sklearn/linear_model/ridge.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about the parameter 'store_cv_values' in 'RidgeClassifierCV' which is causing a TypeError due to it not being a recognized parameter, even though the documentation suggests it should be supported. The task is to identify code spans relevant to this parameter and the class 'RidgeClassifierCV', and to decide if the search task is complete.\n\n1. Analyzing the <issue>: The issue is clear - the 'store_cv_values' parameter is not recognized in 'RidgeClassifierCV' but is documented to be supported. This discrepancy needs to be addressed.\n\n2. Reviewing the <file_context>: The context provided includes several spans of code related to Ridge and RidgeClassifierCV, but it does not include the __init__ method for RidgeClassifierCV where 'store_cv_values' should ideally be recognized if implemented.\n\n3. Processing New Search Results:\n3.1. The new search results are consistent with the context provided earlier, confirming that 'store_cv_values' is correctly handled in other classes but missing in 'RidgeClassifierCV'.\n3.2. The '__init__' method of 'RidgeClassifierCV' does not include 'store_cv_values', which is the root cause of the TypeError. This lack of inclusion aligns with the reported issue.\n3.3. The relevant spans are the '__init__' methods for both '_BaseRidgeCV' and 'RidgeClassifierCV'. The latter is missing 'store_cv_values', and this gap should be bridged to resolve the issue.\n3.4. If 'store_cv_values' were to be added to 'RidgeClassifierCV', it should be passed up to '_BaseRidgeCV' by calling 'super().__init__' correctly.\n\n4. The task is complete in terms of identifying the relevant code. The solution likely involves adding 'store_cv_values' to 'RidgeClassifierCV' and ensuring it is passed appropriately to '_BaseRidgeCV'. This change should fix the TypeError.",
            "identified_spans": [
              {
                "span_ids": [
                  "RidgeClassifierCV.__init__",
                  "_BaseRidgeCV.__init__"
                ],
                "file_path": "sklearn/linear_model/ridge.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 5874,
          "output_tokens": 504,
          "retry_message": null,
          "completion_cost": 0.025182
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The investigation into the 'store_cv_values' parameter reveals that it's defined in the '_BaseRidgeCV' class and is intended to store cross-validation values during model fitting. However, this parameter is not passed to the 'RidgeClassifierCV' class, which is why it is not recognized in that context. The 'RidgeClassifierCV' class inherits from '_BaseRidgeCV' but does not include 'store_cv_values' in its constructor, nor does it handle this attribute during its fit method. To resolve this issue, 'store_cv_values' should be added as a parameter to 'RidgeClassifierCV' and handled appropriately, possibly leveraging the same mechanisms employed by '_BaseRidgeCV'. Additionally, since 'store_cv_values' would affect how cv_values_ are stored and used, these aspects need careful review and potential adjustments specific to classification tasks, which might differ from regression tasks due to different performance metrics and the nature of predictions.",
            "search_suggestions": "Look for the implementation of 'store_cv_values' in the '_BaseRidgeCV' class and how it affects or interacts with the methods and attributes in the 'RidgeClassifierCV' class. Specifically, identify how cv_values are stored and used in the classification context to ensure alignment with the regression handling when 'store_cv_values' is True."
          },
          "output": {},
          "input_tokens": 3760,
          "output_tokens": 322,
          "retry_message": null,
          "completion_cost": 0.01611
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "RidgeClassifierCV.__init__",
            "file_path": "sklearn/linear_model/ridge.py",
            "scratch_pad": "To address the issue where the RidgeClassifierCV class does not support the 'store_cv_values' parameter, the change will involve adding 'store_cv_values' as an optional parameter to the RidgeClassifierCV class's __init__ method. This is analogous to its inclusion in the _BaseRidgeCV class from which RidgeClassifierCV inherits. The __init__ method of RidgeClassifierCV will gain the ability to set a self.store_cv_values attribute, which can be later accessed within the fit method to determine whether to store cross-validation values. This entails refactoring of the __init__ method in RidgeClassifierCV class, without altering any other features or behavior in the class or its superclasses.",
            "instructions": "Add 'store_cv_values' as an optional parameter to the '__init__' method of the 'RidgeClassifierCV' class, defaulting to False. This parameter should be passed to the '__init__' method of the superclass '_BaseRidgeCV', allowing for the storage of cross-validation values if the flag is set to True."
          },
          "output": {
            "span_id": "RidgeClassifierCV.__init__",
            "end_line": 1340,
            "file_path": "sklearn/linear_model/ridge.py",
            "start_line": 1335,
            "instructions": "Add 'store_cv_values' as an optional parameter to the '__init__' method of the 'RidgeClassifierCV' class, defaulting to False. This parameter should be passed to the '__init__' method of the superclass '_BaseRidgeCV', allowing for the storage of cross-validation values if the flag is set to True."
          },
          "input_tokens": 3955,
          "output_tokens": 293,
          "retry_message": null,
          "completion_cost": 0.01626
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "RidgeClassifierCV.__init__",
        "end_line": 1340,
        "file_path": "sklearn/linear_model/ridge.py",
        "max_tokens": 1000,
        "start_line": 1335,
        "temperature": 1.6,
        "instructions": "Add 'store_cv_values' as an optional parameter to the '__init__' method of the 'RidgeClassifierCV' class, defaulting to False. This parameter should be passed to the '__init__' method of the superclass '_BaseRidgeCV', allowing for the storage of cross-validation values if the flag is set to True.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```json\n{\n  \"replace\": \"    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\\n                 normalize=False, scoring=None, cv=None, class_weight=None,\\n                 store_cv_values=False):\\n        super(RidgeClassifierCV, self).__init__(\\n            alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\\n            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\\n        self.class_weight = class_weight\"\n}\n```"
          },
          "output": null,
          "input_tokens": 6378,
          "output_tokens": 144,
          "retry_message": "You did not provide any code in the replace tag. If you want to reject the instructions, use the reject function.",
          "completion_cost": 0.021294
        },
        {
          "action": {
            "content": "```json\n{\n  \"reject\": \"The provided instructions do not conform to the original format and cannot be executed directly within the JSON structure.\"\n}\n```"
          },
          "output": null,
          "input_tokens": 6553,
          "output_tokens": 34,
          "retry_message": "You did not provide any code in the replace tag. If you want to reject the instructions, use the reject function.",
          "completion_cost": 0.020169
        },
        {
          "action": {
            "content": "```json\n{\n  \"reject\": \"The provided instructions do not conform to the original format and cannot be executed directly within the JSON structure.\"\n}\n```"
          },
          "output": null,
          "input_tokens": 6618,
          "output_tokens": 34,
          "retry_message": "You did not provide any code in the replace tag. If you want to reject the instructions, use the reject function.",
          "completion_cost": 0.020364
        }
      ]
    }
  ],
  "initial_message": "linear_model.RidgeClassifierCV's Parameter store_cv_values issue\n#### Description\r\nParameter store_cv_values error on sklearn.linear_model.RidgeClassifierCV\r\n\r\n#### Steps/Code to Reproduce\r\nimport numpy as np\r\nfrom sklearn import linear_model as lm\r\n\r\n#test database\r\nn = 100\r\nx = np.random.randn(n, 30)\r\ny = np.random.normal(size = n)\r\n\r\nrr = lm.RidgeClassifierCV(alphas = np.arange(0.1, 1000, 0.1), normalize = True, \r\n                                         store_cv_values = True).fit(x, y)\r\n\r\n#### Expected Results\r\nExpected to get the usual ridge regression model output, keeping the cross validation predictions as attribute.\r\n\r\n#### Actual Results\r\nTypeError: __init__() got an unexpected keyword argument 'store_cv_values'\r\n\r\nlm.RidgeClassifierCV actually has no parameter store_cv_values, even though some attributes depends on it.\r\n\r\n#### Versions\r\nWindows-10-10.0.14393-SP0\r\nPython 3.6.3 |Anaconda, Inc.| (default, Oct 15 2017, 03:27:45) [MSC v.1900 64 bit (AMD64)]\r\nNumPy 1.13.3\r\nSciPy 0.19.1\r\nScikit-Learn 0.19.1\r\n\r\n\nAdd store_cv_values boolean flag support to RidgeClassifierCV\nAdd store_cv_values support to RidgeClassifierCV - documentation claims that usage of this flag is possible:\n\n> cv_values_ : array, shape = [n_samples, n_alphas] or shape = [n_samples, n_responses, n_alphas], optional\n> Cross-validation values for each alpha (if **store_cv_values**=True and `cv=None`).\n\nWhile actually usage of this flag gives \n\n> TypeError: **init**() got an unexpected keyword argument 'store_cv_values'\n\n"
}