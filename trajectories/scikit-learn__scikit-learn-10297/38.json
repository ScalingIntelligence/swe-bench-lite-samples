{
  "info": {
    "duration": 141.24189734458923,
    "submission": "diff --git a/sklearn/linear_model/ridge.py b/sklearn/linear_model/ridge.py\nindex 911c74ae3..b1fccc2e9 100644\n--- a/sklearn/linear_model/ridge.py\n+++ b/sklearn/linear_model/ridge.py\n@@ -1333,10 +1333,11 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n-            scoring=scoring, cv=cv)\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n         self.class_weight = class_weight\n \n     def fit(self, X, y, sample_weight=None):\n",
    "total_cost": 0.114552,
    "instance_id": "scikit-learn__scikit-learn-10297",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue is about the missing 'store_cv_values' parameter in the RidgeClassifierCV class. This parameter is expected to store cross-validation values but is causing a TypeError due to the unexpected keyword argument. The task is to locate the RidgeClassifierCV class in the sklearn library, focusing on the fit method and the initialization parameters.",
            "search_requests": [
              {
                "query": "RidgeClassifierCV store_cv_values",
                "class_names": [
                  "RidgeClassifierCV"
                ],
                "code_snippet": null,
                "file_pattern": "**/sklearn/**/*.py",
                "function_names": [
                  "fit"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 315,
                "span_id": "_BaseRidgeCV.fit",
                "file_path": "sklearn/linear_model/ridge.py"
              },
              {
                "rank": 2,
                "tokens": 802,
                "span_id": "RidgeClassifierCV",
                "file_path": "sklearn/linear_model/ridge.py"
              },
              {
                "rank": 3,
                "tokens": 263,
                "span_id": "RidgeClassifierCV.fit",
                "file_path": "sklearn/linear_model/ridge.py"
              },
              {
                "rank": 3,
                "tokens": 17,
                "span_id": "RidgeClassifierCV.classes_",
                "file_path": "sklearn/linear_model/ridge.py"
              },
              {
                "rank": 4,
                "tokens": 826,
                "span_id": "_RidgeGCV.fit",
                "file_path": "sklearn/linear_model/ridge.py"
              },
              {
                "rank": 10,
                "tokens": 125,
                "span_id": "Ridge.fit",
                "file_path": "sklearn/linear_model/ridge.py"
              },
              {
                "rank": 25,
                "tokens": 301,
                "span_id": "RidgeClassifier.fit",
                "file_path": "sklearn/linear_model/ridge.py"
              },
              {
                "rank": 30,
                "tokens": 353,
                "span_id": "_BaseRidge.fit",
                "file_path": "sklearn/linear_model/ridge.py"
              },
              {
                "rank": 6,
                "tokens": 1791,
                "span_id": "BaseSearchCV.fit",
                "file_path": "sklearn/model_selection/_search.py"
              },
              {
                "rank": 11,
                "tokens": 1729,
                "span_id": "LogisticRegressionCV.fit",
                "file_path": "sklearn/linear_model/logistic.py"
              },
              {
                "rank": 83,
                "tokens": 1092,
                "span_id": "LogisticRegression.fit",
                "file_path": "sklearn/linear_model/logistic.py"
              },
              {
                "rank": 13,
                "tokens": 1506,
                "span_id": "LinearModelCV.fit",
                "file_path": "sklearn/linear_model/coordinate_descent.py"
              },
              {
                "rank": 78,
                "tokens": 860,
                "span_id": "ElasticNet.fit",
                "file_path": "sklearn/linear_model/coordinate_descent.py"
              },
              {
                "rank": 16,
                "tokens": 1120,
                "span_id": "GraphLassoCV.fit",
                "file_path": "sklearn/covariance/graph_lasso_.py"
              },
              {
                "rank": 36,
                "tokens": 988,
                "span_id": "BayesianRidge.fit",
                "file_path": "sklearn/linear_model/bayes.py"
              },
              {
                "rank": 33,
                "tokens": 710,
                "span_id": "LarsCV.fit",
                "file_path": "sklearn/linear_model/least_angle.py"
              },
              {
                "rank": 128,
                "tokens": 247,
                "span_id": "Lars.fit",
                "file_path": "sklearn/linear_model/least_angle.py"
              },
              {
                "rank": 130,
                "tokens": 570,
                "span_id": "LassoLarsIC.fit",
                "file_path": "sklearn/linear_model/least_angle.py"
              },
              {
                "rank": 40,
                "tokens": 118,
                "span_id": "GridSearchCV.fit",
                "file_path": "sklearn/grid_search.py"
              },
              {
                "rank": 48,
                "tokens": 139,
                "span_id": "RandomizedSearchCV.fit",
                "file_path": "sklearn/grid_search.py"
              },
              {
                "rank": 51,
                "tokens": 281,
                "span_id": "KernelRidge.fit",
                "file_path": "sklearn/kernel_ridge.py"
              },
              {
                "rank": 54,
                "tokens": 1771,
                "span_id": "RANSACRegressor.fit",
                "file_path": "sklearn/linear_model/ransac.py"
              },
              {
                "rank": 99,
                "tokens": 670,
                "span_id": "RFECV.fit",
                "file_path": "sklearn/feature_selection/rfe.py"
              },
              {
                "rank": 61,
                "tokens": 661,
                "span_id": "CalibratedClassifierCV.fit",
                "file_path": "sklearn/calibration.py"
              },
              {
                "rank": 63,
                "tokens": 390,
                "span_id": "OrthogonalMatchingPursuitCV.fit",
                "file_path": "sklearn/linear_model/omp.py"
              },
              {
                "rank": 112,
                "tokens": 131,
                "span_id": "AdditiveChi2Sampler.fit",
                "file_path": "sklearn/kernel_approximation.py"
              }
            ],
            "search_requests": [
              {
                "query": "RidgeClassifierCV store_cv_values",
                "class_names": [
                  "RidgeClassifierCV"
                ],
                "code_snippet": null,
                "file_pattern": "**/sklearn/**/*.py",
                "function_names": [
                  "fit"
                ]
              }
            ]
          },
          "input_tokens": 3662,
          "output_tokens": 166,
          "retry_message": null,
          "completion_cost": 0.013476000000000002
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 315,
            "span_id": "_BaseRidgeCV.fit",
            "file_path": "sklearn/linear_model/ridge.py"
          },
          {
            "rank": 2,
            "tokens": 802,
            "span_id": "RidgeClassifierCV",
            "file_path": "sklearn/linear_model/ridge.py"
          },
          {
            "rank": 3,
            "tokens": 263,
            "span_id": "RidgeClassifierCV.fit",
            "file_path": "sklearn/linear_model/ridge.py"
          },
          {
            "rank": 3,
            "tokens": 17,
            "span_id": "RidgeClassifierCV.classes_",
            "file_path": "sklearn/linear_model/ridge.py"
          },
          {
            "rank": 4,
            "tokens": 826,
            "span_id": "_RidgeGCV.fit",
            "file_path": "sklearn/linear_model/ridge.py"
          },
          {
            "rank": 6,
            "tokens": 1791,
            "span_id": "BaseSearchCV.fit",
            "file_path": "sklearn/model_selection/_search.py"
          },
          {
            "rank": 10,
            "tokens": 125,
            "span_id": "Ridge.fit",
            "file_path": "sklearn/linear_model/ridge.py"
          },
          {
            "rank": 11,
            "tokens": 1729,
            "span_id": "LogisticRegressionCV.fit",
            "file_path": "sklearn/linear_model/logistic.py"
          },
          {
            "rank": 13,
            "tokens": 1506,
            "span_id": "LinearModelCV.fit",
            "file_path": "sklearn/linear_model/coordinate_descent.py"
          },
          {
            "rank": 16,
            "tokens": 1120,
            "span_id": "GraphLassoCV.fit",
            "file_path": "sklearn/covariance/graph_lasso_.py"
          },
          {
            "rank": 25,
            "tokens": 301,
            "span_id": "RidgeClassifier.fit",
            "file_path": "sklearn/linear_model/ridge.py"
          },
          {
            "rank": 30,
            "tokens": 353,
            "span_id": "_BaseRidge.fit",
            "file_path": "sklearn/linear_model/ridge.py"
          },
          {
            "rank": 33,
            "tokens": 710,
            "span_id": "LarsCV.fit",
            "file_path": "sklearn/linear_model/least_angle.py"
          },
          {
            "rank": 36,
            "tokens": 988,
            "span_id": "BayesianRidge.fit",
            "file_path": "sklearn/linear_model/bayes.py"
          },
          {
            "rank": 40,
            "tokens": 118,
            "span_id": "GridSearchCV.fit",
            "file_path": "sklearn/grid_search.py"
          },
          {
            "rank": 48,
            "tokens": 139,
            "span_id": "RandomizedSearchCV.fit",
            "file_path": "sklearn/grid_search.py"
          },
          {
            "rank": 51,
            "tokens": 281,
            "span_id": "KernelRidge.fit",
            "file_path": "sklearn/kernel_ridge.py"
          },
          {
            "rank": 54,
            "tokens": 1771,
            "span_id": "RANSACRegressor.fit",
            "file_path": "sklearn/linear_model/ransac.py"
          },
          {
            "rank": 61,
            "tokens": 661,
            "span_id": "CalibratedClassifierCV.fit",
            "file_path": "sklearn/calibration.py"
          },
          {
            "rank": 63,
            "tokens": 390,
            "span_id": "OrthogonalMatchingPursuitCV.fit",
            "file_path": "sklearn/linear_model/omp.py"
          },
          {
            "rank": 78,
            "tokens": 860,
            "span_id": "ElasticNet.fit",
            "file_path": "sklearn/linear_model/coordinate_descent.py"
          },
          {
            "rank": 83,
            "tokens": 1092,
            "span_id": "LogisticRegression.fit",
            "file_path": "sklearn/linear_model/logistic.py"
          },
          {
            "rank": 99,
            "tokens": 670,
            "span_id": "RFECV.fit",
            "file_path": "sklearn/feature_selection/rfe.py"
          },
          {
            "rank": 112,
            "tokens": 131,
            "span_id": "AdditiveChi2Sampler.fit",
            "file_path": "sklearn/kernel_approximation.py"
          },
          {
            "rank": 128,
            "tokens": 247,
            "span_id": "Lars.fit",
            "file_path": "sklearn/linear_model/least_angle.py"
          },
          {
            "rank": 130,
            "tokens": 570,
            "span_id": "LassoLarsIC.fit",
            "file_path": "sklearn/linear_model/least_angle.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about the parameter 'store_cv_values' in 'RidgeClassifierCV', which is documented to be supported but results in a TypeError when used. To address this, we need to identify where 'store_cv_values' is handled in the codebase and how it interacts with 'RidgeClassifierCV'. Given the search results, it appears that 'store_cv_values' is managed in the '_BaseRidgeCV' class, which 'RidgeClassifierCV' inherits from. The '_BaseRidgeCV' class has a 'fit' method that includes logic for handling 'store_cv_values', but there is no direct mention of 'store_cv_values' in the '__init__' method of 'RidgeClassifierCV', which might explain the TypeError. This discrepancy suggests that the issue might be due to 'RidgeClassifierCV' not properly initializing or passing the 'store_cv_values' parameter to its superclass '_BaseRidgeCV'. Therefore, the relevant code spans to address this issue are in 'sklearn/linear_model/ridge.py', specifically the '__init__' and 'fit' methods of 'RidgeClassifierCV' and the 'fit' method of '_BaseRidgeCV'.",
            "identified_spans": [
              {
                "span_ids": [
                  "RidgeClassifierCV.__init__",
                  "RidgeClassifierCV.fit",
                  "_BaseRidgeCV.fit"
                ],
                "file_path": "sklearn/linear_model/ridge.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 6962,
          "output_tokens": 364,
          "retry_message": null,
          "completion_cost": 0.026346
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The issue is about the missing 'store_cv_values' parameter in the RidgeClassifierCV class. This parameter is expected to store cross-validation values but is causing a TypeError due to the unexpected keyword argument. The task is to locate the RidgeClassifierCV class in the sklearn library, focusing on the fit method and the initialization parameters. In the provided file context, RidgeClassifierCV does exist but lacks the 'store_cv_values' parameter in its initialization method, which matches the reported issue regarding the missing parameter. There is a related class, _BaseRidgeCV, which includes the 'store_cv_values' parameter, suggesting an oversight in RidgeClassifierCV in not passing this parameter up to its parent class during initialization.",
            "search_suggestions": "Look in the parent class '_BaseRidgeCV' and the related '_RidgeGCV' for the implementation of 'store_cv_values' and how it interacts with the fit method. Specifically, check how 'store_cv_values' could be integrated into RidgeClassifierCV, possibly by modifying its __init__ method to accept and pass this parameter to its superclass."
          },
          "output": {
            "message": "Look in the parent class '_BaseRidgeCV' and the related '_RidgeGCV' for the implementation of 'store_cv_values' and how it interacts with the fit method. Specifically, check how 'store_cv_values' could be integrated into RidgeClassifierCV, possibly by modifying its __init__ method to accept and pass this parameter to its superclass."
          },
          "input_tokens": 2459,
          "output_tokens": 272,
          "retry_message": null,
          "completion_cost": 0.011457
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look in the parent class '_BaseRidgeCV' and the related '_RidgeGCV' for the implementation of 'store_cv_values' and how it interacts with the fit method. Specifically, check how 'store_cv_values' could be integrated into RidgeClassifierCV, possibly by modifying its __init__ method to accept and pass this parameter to its superclass.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "scratch_pad": "The 'store_cv_values' parameter is defined in the parent class '_BaseRidgeCV' but is not being passed through the RidgeClassifierCV's __init__ method. This causes the issue when trying to use 'store_cv_values' in RidgeClassifierCV. To resolve this, we need to modify the RidgeClassifierCV's __init__ method to accept 'store_cv_values' and pass it to the superclass's __init__ method.",
            "search_requests": [
              {
                "query": "RidgeClassifierCV store_cv_values",
                "class_names": [
                  "RidgeClassifierCV"
                ],
                "code_snippet": "store_cv_values=True",
                "file_pattern": "**/sklearn/linear_model/ridge.py",
                "function_names": [
                  "__init__"
                ]
              }
            ]
          },
          "output": {
            "message": "The 'store_cv_values' parameter is defined in the parent class '_BaseRidgeCV' but is not being passed through the RidgeClassifierCV's __init__ method. This causes the issue when trying to use 'store_cv_values' in RidgeClassifierCV. To resolve this, we need to modify the RidgeClassifierCV's __init__ method to accept 'store_cv_values' and pass it to the superclass's __init__ method."
          },
          "input_tokens": 5035,
          "output_tokens": 231,
          "retry_message": null,
          "completion_cost": 0.01857
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "The 'store_cv_values' parameter is defined in the parent class '_BaseRidgeCV' but is not being passed through the RidgeClassifierCV's __init__ method. This causes the issue when trying to use 'store_cv_values' in RidgeClassifierCV. To resolve this, we need to modify the RidgeClassifierCV's __init__ method to accept 'store_cv_values' and pass it to the superclass's __init__ method.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "RidgeClassifierCV.__init__",
            "file_path": "sklearn/linear_model/ridge.py",
            "scratch_pad": "To resolve the issue, we need to modify the RidgeClassifierCV's __init__ method to accept 'store_cv_values' and pass it to the superclass _BaseRidgeCV's __init__ method. This will ensure that the 'store_cv_values' parameter is recognized and used correctly.",
            "instructions": "Modify the RidgeClassifierCV's __init__ method to accept 'store_cv_values' and pass it to the superclass's __init__ method."
          },
          "output": {
            "span_id": "RidgeClassifierCV.__init__",
            "end_line": 1340,
            "file_path": "sklearn/linear_model/ridge.py",
            "start_line": 1335,
            "instructions": "Modify the RidgeClassifierCV's __init__ method to accept 'store_cv_values' and pass it to the superclass's __init__ method."
          },
          "input_tokens": 3164,
          "output_tokens": 168,
          "retry_message": null,
          "completion_cost": 0.012012
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "RidgeClassifierCV.__init__",
        "end_line": 1340,
        "file_path": "sklearn/linear_model/ridge.py",
        "max_tokens": 1000,
        "start_line": 1335,
        "temperature": 1.6,
        "instructions": "Modify the RidgeClassifierCV's __init__ method to accept 'store_cv_values' and pass it to the superclass's __init__ method.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n                 normalize=False, scoring=None, cv=None, class_weight=None,\n                 store_cv_values=False):\n        super(RidgeClassifierCV, self).__init__(\n            alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n        self.class_weight = class_weight\n</replace>"
          },
          "output": {
            "diff": "--- sklearn/linear_model/ridge.py\n+++ sklearn/linear_model/ridge.py\n@@ -1333,10 +1333,11 @@\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n-            scoring=scoring, cv=cv)\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n         self.class_weight = class_weight\n \n     def fit(self, X, y, sample_weight=None):\n",
            "message": "Applied the change to sklearn/linear_model/ridge.py.",
            "verification_errors": []
          },
          "input_tokens": 5678,
          "output_tokens": 136,
          "retry_message": null,
          "completion_cost": 0.019074
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sklearn/linear_model/ridge.py\n+++ sklearn/linear_model/ridge.py\n@@ -1333,10 +1333,11 @@\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n-            scoring=scoring, cv=cv)\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n         self.class_weight = class_weight\n \n     def fit(self, X, y, sample_weight=None):\n",
        "model": "deepseek-coder",
        "message": "Applied the change to sklearn/linear_model/ridge.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue regarding the 'store_cv_values' parameter in RidgeClassifierCV has been resolved by ensuring the parameter is accepted and passed to the superclass's constructor. This aligns with the documentation and should prevent the TypeError from occurring.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The initial change has been successfully applied, and the RidgeClassifierCV's __init__ method now correctly accepts and passes the 'store_cv_values' parameter to the superclass _BaseRidgeCV's __init__ method. This aligns with the expected behavior as described in the documentation and should resolve the reported TypeError.",
            "instructions": null
          },
          "output": {
            "message": "The issue regarding the 'store_cv_values' parameter in RidgeClassifierCV has been resolved by ensuring the parameter is accepted and passed to the superclass's constructor. This aligns with the documentation and should prevent the TypeError from occurring."
          },
          "input_tokens": 3644,
          "output_tokens": 179,
          "retry_message": null,
          "completion_cost": 0.013617
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue regarding the 'store_cv_values' parameter in RidgeClassifierCV has been resolved by ensuring the parameter is accepted and passed to the superclass's constructor. This aligns with the documentation and should prevent the TypeError from occurring.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "linear_model.RidgeClassifierCV's Parameter store_cv_values issue\n#### Description\r\nParameter store_cv_values error on sklearn.linear_model.RidgeClassifierCV\r\n\r\n#### Steps/Code to Reproduce\r\nimport numpy as np\r\nfrom sklearn import linear_model as lm\r\n\r\n#test database\r\nn = 100\r\nx = np.random.randn(n, 30)\r\ny = np.random.normal(size = n)\r\n\r\nrr = lm.RidgeClassifierCV(alphas = np.arange(0.1, 1000, 0.1), normalize = True, \r\n                                         store_cv_values = True).fit(x, y)\r\n\r\n#### Expected Results\r\nExpected to get the usual ridge regression model output, keeping the cross validation predictions as attribute.\r\n\r\n#### Actual Results\r\nTypeError: __init__() got an unexpected keyword argument 'store_cv_values'\r\n\r\nlm.RidgeClassifierCV actually has no parameter store_cv_values, even though some attributes depends on it.\r\n\r\n#### Versions\r\nWindows-10-10.0.14393-SP0\r\nPython 3.6.3 |Anaconda, Inc.| (default, Oct 15 2017, 03:27:45) [MSC v.1900 64 bit (AMD64)]\r\nNumPy 1.13.3\r\nSciPy 0.19.1\r\nScikit-Learn 0.19.1\r\n\r\n\nAdd store_cv_values boolean flag support to RidgeClassifierCV\nAdd store_cv_values support to RidgeClassifierCV - documentation claims that usage of this flag is possible:\n\n> cv_values_ : array, shape = [n_samples, n_alphas] or shape = [n_samples, n_responses, n_alphas], optional\n> Cross-validation values for each alpha (if **store_cv_values**=True and `cv=None`).\n\nWhile actually usage of this flag gives \n\n> TypeError: **init**() got an unexpected keyword argument 'store_cv_values'\n\n"
}