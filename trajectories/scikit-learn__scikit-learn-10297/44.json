{
  "info": {
    "duration": 180.2284471988678,
    "submission": "diff --git a/sklearn/linear_model/ridge.py b/sklearn/linear_model/ridge.py\nindex 911c74ae3..b1fccc2e9 100644\n--- a/sklearn/linear_model/ridge.py\n+++ b/sklearn/linear_model/ridge.py\n@@ -1333,10 +1333,11 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n-            scoring=scoring, cv=cv)\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n         self.class_weight = class_weight\n \n     def fit(self, X, y, sample_weight=None):\n",
    "total_cost": 0.137916,
    "instance_id": "scikit-learn__scikit-learn-10297",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue pertains to the 'store_cv_values' parameter in the RidgeClassifierCV class of the sklearn.linear_model module, which is causing a TypeError due to an unexpected keyword argument. The documentation suggests that the 'store_cv_values' parameter is available for this class, but the actual implementation lacks this support. The initial search should focus on the RidgeClassifierCV class within the sklearn/linear_model/ridge.py file to identify where the 'store_cv_values' parameter handling might be missing or incorrectly implemented.",
            "search_requests": [
              {
                "query": "RidgeClassifierCV store_cv_values",
                "class_names": [
                  "RidgeClassifierCV"
                ],
                "code_snippet": null,
                "file_pattern": "sklearn/linear_model/ridge.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 802,
                "span_id": "RidgeClassifierCV",
                "file_path": "sklearn/linear_model/ridge.py"
              },
              {
                "rank": 3,
                "tokens": 263,
                "span_id": "RidgeClassifierCV.fit",
                "file_path": "sklearn/linear_model/ridge.py"
              },
              {
                "rank": 3,
                "tokens": 17,
                "span_id": "RidgeClassifierCV.classes_",
                "file_path": "sklearn/linear_model/ridge.py"
              }
            ],
            "search_requests": [
              {
                "query": "RidgeClassifierCV store_cv_values",
                "class_names": [
                  "RidgeClassifierCV"
                ],
                "code_snippet": null,
                "file_pattern": "sklearn/linear_model/ridge.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 3662,
          "output_tokens": 203,
          "retry_message": null,
          "completion_cost": 0.014031000000000002
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 802,
            "span_id": "RidgeClassifierCV",
            "file_path": "sklearn/linear_model/ridge.py"
          },
          {
            "rank": 3,
            "tokens": 263,
            "span_id": "RidgeClassifierCV.fit",
            "file_path": "sklearn/linear_model/ridge.py"
          },
          {
            "rank": 3,
            "tokens": 17,
            "span_id": "RidgeClassifierCV.classes_",
            "file_path": "sklearn/linear_model/ridge.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue pertains to the absence of the 'store_cv_values' parameter in the RidgeClassifierCV class in scikit-learn. The search results show that RidgeClassifierCV inherits from _BaseRidgeCV, which does have the 'store_cv_values' parameter and uses it in its 'fit' method. However, RidgeClassifierCV does not include this parameter in its constructor (__init__ method), leading to the TypeError reported by the user. The relevancy of these code spans lies in their connection to the RidgeClassifierCV class and its inheritance structure, which directly addresses the issue at hand.",
            "identified_spans": [
              {
                "span_ids": [
                  "RidgeClassifierCV",
                  "RidgeClassifierCV.__init__",
                  "_BaseRidgeCV",
                  "_BaseRidgeCV.fit"
                ],
                "file_path": "sklearn/linear_model/ridge.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 2479,
          "output_tokens": 232,
          "retry_message": null,
          "completion_cost": 0.010917
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The file context provided focuses on the sklearn/linear_model/ridge.py file which is relevant to the issue at hand. It reveals that the _BaseRidgeCV class, from which RidgeCV and RidgeClassifierCV inherit, indeed has the 'store_cv_values' parameter in its __init__ method. However, in RidgeClassifierCV, the __init__ method does not pass the 'store_cv_values' parameter to its superclass _BaseRidgeCV.__init__, possibly causing the TypeError due to the missing argument. Thus, while the parameter exists in the superclass, it isn't being correctly handled in RidgeClassifierCV.",
            "search_suggestions": "Further inspection is needed within the RidgeClassifierCV class and possibly its interactions with _BaseRidgeCV to ensure all expected parameters including 'store_cv_values' are correctly passed and handled. Specifically, looking more into the inheritance and parameter passing might provide more context on why the 'store_cv_values' parameter isn't recognized by RidgeClassifierCV."
          },
          "output": {
            "message": "Further inspection is needed within the RidgeClassifierCV class and possibly its interactions with _BaseRidgeCV to ensure all expected parameters including 'store_cv_values' are correctly passed and handled. Specifically, looking more into the inheritance and parameter passing might provide more context on why the 'store_cv_values' parameter isn't recognized by RidgeClassifierCV."
          },
          "input_tokens": 2266,
          "output_tokens": 252,
          "retry_message": null,
          "completion_cost": 0.010578
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Further inspection is needed within the RidgeClassifierCV class and possibly its interactions with _BaseRidgeCV to ensure all expected parameters including 'store_cv_values' are correctly passed and handled. Specifically, looking more into the inheritance and parameter passing might provide more context on why the 'store_cv_values' parameter isn't recognized by RidgeClassifierCV.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "Upon initial inspection of the code, it appears that the 'store_cv_values' parameter is indeed defined in the _BaseRidgeCV class, which is inherited by both RidgeCV and RidgeClassifierCV. However, RidgeClassifierCV's constructor doesn't include 'store_cv_values' as an argument, which might be why it's not being recognized. To address this, we should look into modifying RidgeClassifierCV's constructor to accept 'store_cv_values' and pass it correctly to its superclass _BaseRidgeCV. This appears to be a straightforward omission in the constructor parameters, and adjusting this should resolve the issue.",
            "search_requests": [
              {
                "query": "RidgeClassifierCV __init__ store_cv_values",
                "class_names": [
                  "RidgeClassifierCV"
                ],
                "code_snippet": null,
                "file_pattern": "sklearn/linear_model/ridge.py",
                "function_names": [
                  "__init__"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 802,
                "span_id": "RidgeClassifierCV",
                "file_path": "sklearn/linear_model/ridge.py"
              }
            ],
            "search_requests": [
              {
                "query": "RidgeClassifierCV __init__ store_cv_values",
                "class_names": [
                  "RidgeClassifierCV"
                ],
                "code_snippet": null,
                "file_pattern": "sklearn/linear_model/ridge.py",
                "function_names": [
                  "__init__"
                ]
              }
            ]
          },
          "input_tokens": 4834,
          "output_tokens": 262,
          "retry_message": null,
          "completion_cost": 0.018432
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 802,
            "span_id": "RidgeClassifierCV",
            "file_path": "sklearn/linear_model/ridge.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about the parameter `store_cv_values` in `RidgeClassifierCV`. This parameter is mentioned in the documentation but not implemented in the `RidgeClassifierCV` class, leading to a `TypeError`. The goal is to add support for this parameter in `RidgeClassifierCV`. The current file context and search results show that `RidgeClassifierCV` inherits from `_BaseRidgeCV`, which has `store_cv_values` in its `__init__` method. However, `RidgeClassifierCV` does not pass this parameter to its superclass `_BaseRidgeCV` in its own `__init__`. This discrepancy is likely the cause of the error. To fix this, the `RidgeClassifierCV` class should be modified to include `store_cv_values` in its `__init__` method and pass it to the superclass. The relevant code spans to identify are those that define and utilize `RidgeClassifierCV` and `_BaseRidgeCV`, specifically the `__init__` methods for both classes.",
            "identified_spans": [
              {
                "span_ids": [
                  "RidgeClassifierCV.__init__",
                  "_BaseRidgeCV.__init__"
                ],
                "file_path": "sklearn/linear_model/ridge.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 2840,
          "output_tokens": 319,
          "retry_message": null,
          "completion_cost": 0.013305
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "Upon initial inspection of the code, it appears that the 'store_cv_values' parameter is indeed defined in the _BaseRidgeCV class, which is inherited by both RidgeCV and RidgeClassifierCV. However, RidgeClassifierCV's constructor doesn't include 'store_cv_values' as an argument, which might be why it's not being recognized. To address this, we should look into modifying RidgeClassifierCV's constructor to accept 'store_cv_values' and pass it correctly to its superclass _BaseRidgeCV. This appears to be a straightforward omission in the constructor parameters, and adjusting this should resolve the issue.",
            "search_suggestions": "Check the RidgeClassifierCV constructor and how it initializes its superclass _BaseRidgeCV. Ensure that 'store_cv_values' is properly passed as an argument to _BaseRidgeCV's constructor."
          },
          "output": {
            "message": "Check the RidgeClassifierCV constructor and how it initializes its superclass _BaseRidgeCV. Ensure that 'store_cv_values' is properly passed as an argument to _BaseRidgeCV's constructor."
          },
          "input_tokens": 2437,
          "output_tokens": 223,
          "retry_message": null,
          "completion_cost": 0.010655999999999999
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Check the RidgeClassifierCV constructor and how it initializes its superclass _BaseRidgeCV. Ensure that 'store_cv_values' is properly passed as an argument to _BaseRidgeCV's constructor.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "scratch_pad": "Upon examining the RidgeClassifierCV constructor and its interaction with its superclass _BaseRidgeCV, it's evident that the 'store_cv_values' parameter is not being passed through correctly. The RidgeClassifierCV's init method does not include 'store_cv_values' among its arguments, nor does it pass this parameter to the superclass initialization. This is the root cause of the issue, causing RidgeClassifierCV to not recognize 'store_cv_values' as a valid parameter. To fix this, RidgeClassifierCV's init method must be updated to accept 'store_cv_values' and pass it to the superclass _BaseRidgeCV. This will involve a straightforward adjustment by adding 'store_cv_values' to RidgeClassifierCV's parameter list and then ensuring it gets passed on when calling the superclass's init method. After this adjustment, the problem should be solved and the RidgeClassifierCV class will properly handle the 'store_cv_values' parameter as intended.",
            "search_requests": []
          },
          "output": {
            "message": "Upon examining the RidgeClassifierCV constructor and its interaction with its superclass _BaseRidgeCV, it's evident that the 'store_cv_values' parameter is not being passed through correctly. The RidgeClassifierCV's init method does not include 'store_cv_values' among its arguments, nor does it pass this parameter to the superclass initialization. This is the root cause of the issue, causing RidgeClassifierCV to not recognize 'store_cv_values' as a valid parameter. To fix this, RidgeClassifierCV's init method must be updated to accept 'store_cv_values' and pass it to the superclass _BaseRidgeCV. This will involve a straightforward adjustment by adding 'store_cv_values' to RidgeClassifierCV's parameter list and then ensuring it gets passed on when calling the superclass's init method. After this adjustment, the problem should be solved and the RidgeClassifierCV class will properly handle the 'store_cv_values' parameter as intended."
          },
          "input_tokens": 5296,
          "output_tokens": 245,
          "retry_message": null,
          "completion_cost": 0.019563
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "Upon examining the RidgeClassifierCV constructor and its interaction with its superclass _BaseRidgeCV, it's evident that the 'store_cv_values' parameter is not being passed through correctly. The RidgeClassifierCV's init method does not include 'store_cv_values' among its arguments, nor does it pass this parameter to the superclass initialization. This is the root cause of the issue, causing RidgeClassifierCV to not recognize 'store_cv_values' as a valid parameter. To fix this, RidgeClassifierCV's init method must be updated to accept 'store_cv_values' and pass it to the superclass _BaseRidgeCV. This will involve a straightforward adjustment by adding 'store_cv_values' to RidgeClassifierCV's parameter list and then ensuring it gets passed on when calling the superclass's init method. After this adjustment, the problem should be solved and the RidgeClassifierCV class will properly handle the 'store_cv_values' parameter as intended.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "RidgeClassifierCV.__init__",
            "file_path": "sklearn/linear_model/ridge.py",
            "scratch_pad": "The current implementation of RidgeClassifierCV does not accept the 'store_cv_values' parameter, which is essential for storing cross-validation values. This parameter is handled by the superclass _BaseRidgeCV, so it should be included in the RidgeClassifierCV constructor and passed to the superclass to resolve the reported issue.",
            "instructions": "Add the 'store_cv_values' parameter to the RidgeClassifierCV constructor and pass it to the superclass _BaseRidgeCV constructor."
          },
          "output": {
            "span_id": "RidgeClassifierCV.__init__",
            "end_line": 1340,
            "file_path": "sklearn/linear_model/ridge.py",
            "start_line": 1335,
            "instructions": "Add the 'store_cv_values' parameter to the RidgeClassifierCV constructor and pass it to the superclass _BaseRidgeCV constructor."
          },
          "input_tokens": 2890,
          "output_tokens": 166,
          "retry_message": null,
          "completion_cost": 0.01116
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "RidgeClassifierCV.__init__",
        "end_line": 1340,
        "file_path": "sklearn/linear_model/ridge.py",
        "max_tokens": 1000,
        "start_line": 1335,
        "temperature": 1.6,
        "instructions": "Add the 'store_cv_values' parameter to the RidgeClassifierCV constructor and pass it to the superclass _BaseRidgeCV constructor.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n                 normalize=False, scoring=None, cv=None, class_weight=None,\n                 store_cv_values=False):\n        super(RidgeClassifierCV, self).__init__(\n            alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n        self.class_weight = class_weight\n</replace>"
          },
          "output": {
            "diff": "--- sklearn/linear_model/ridge.py\n+++ sklearn/linear_model/ridge.py\n@@ -1333,10 +1333,11 @@\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n-            scoring=scoring, cv=cv)\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n         self.class_weight = class_weight\n \n     def fit(self, X, y, sample_weight=None):\n",
            "message": "Applied the change to sklearn/linear_model/ridge.py.",
            "verification_errors": []
          },
          "input_tokens": 4710,
          "output_tokens": 136,
          "retry_message": null,
          "completion_cost": 0.01617
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sklearn/linear_model/ridge.py\n+++ sklearn/linear_model/ridge.py\n@@ -1333,10 +1333,11 @@\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n-            scoring=scoring, cv=cv)\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n         self.class_weight = class_weight\n \n     def fit(self, X, y, sample_weight=None):\n",
        "model": "deepseek-coder",
        "message": "Applied the change to sklearn/linear_model/ridge.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue reported regarding the 'store_cv_values' parameter in RidgeClassifierCV has been fully addressed. The necessary adjustment has been made to accept and pass this parameter correctly to the superclass, ensuring proper functionality as per the expected behavior.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The change to the RidgeClassifierCV constructor has been successfully applied to include the 'store_cv_values' parameter and pass it to the superclass _BaseRidgeCV. This modification directly addresses the reported issue, ensuring that RidgeClassifierCV can now accept and process the 'store_cv_values' parameter as expected. The additional parameter and the correct passing to the superclass resolve the TypeError regarding the unexpected keyword argument.",
            "instructions": null
          },
          "output": {
            "message": "The issue reported regarding the 'store_cv_values' parameter in RidgeClassifierCV has been fully addressed. The necessary adjustment has been made to accept and pass this parameter correctly to the superclass, ensuring proper functionality as per the expected behavior."
          },
          "input_tokens": 3368,
          "output_tokens": 200,
          "retry_message": null,
          "completion_cost": 0.013104000000000001
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue reported regarding the 'store_cv_values' parameter in RidgeClassifierCV has been fully addressed. The necessary adjustment has been made to accept and pass this parameter correctly to the superclass, ensuring proper functionality as per the expected behavior.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "linear_model.RidgeClassifierCV's Parameter store_cv_values issue\n#### Description\r\nParameter store_cv_values error on sklearn.linear_model.RidgeClassifierCV\r\n\r\n#### Steps/Code to Reproduce\r\nimport numpy as np\r\nfrom sklearn import linear_model as lm\r\n\r\n#test database\r\nn = 100\r\nx = np.random.randn(n, 30)\r\ny = np.random.normal(size = n)\r\n\r\nrr = lm.RidgeClassifierCV(alphas = np.arange(0.1, 1000, 0.1), normalize = True, \r\n                                         store_cv_values = True).fit(x, y)\r\n\r\n#### Expected Results\r\nExpected to get the usual ridge regression model output, keeping the cross validation predictions as attribute.\r\n\r\n#### Actual Results\r\nTypeError: __init__() got an unexpected keyword argument 'store_cv_values'\r\n\r\nlm.RidgeClassifierCV actually has no parameter store_cv_values, even though some attributes depends on it.\r\n\r\n#### Versions\r\nWindows-10-10.0.14393-SP0\r\nPython 3.6.3 |Anaconda, Inc.| (default, Oct 15 2017, 03:27:45) [MSC v.1900 64 bit (AMD64)]\r\nNumPy 1.13.3\r\nSciPy 0.19.1\r\nScikit-Learn 0.19.1\r\n\r\n\nAdd store_cv_values boolean flag support to RidgeClassifierCV\nAdd store_cv_values support to RidgeClassifierCV - documentation claims that usage of this flag is possible:\n\n> cv_values_ : array, shape = [n_samples, n_alphas] or shape = [n_samples, n_responses, n_alphas], optional\n> Cross-validation values for each alpha (if **store_cv_values**=True and `cv=None`).\n\nWhile actually usage of this flag gives \n\n> TypeError: **init**() got an unexpected keyword argument 'store_cv_values'\n\n"
}