{
  "info": {
    "duration": 135.2924199104309,
    "submission": "diff --git a/sklearn/linear_model/ridge.py b/sklearn/linear_model/ridge.py\nindex 911c74ae3..b1fccc2e9 100644\n--- a/sklearn/linear_model/ridge.py\n+++ b/sklearn/linear_model/ridge.py\n@@ -1333,10 +1333,11 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n-            scoring=scoring, cv=cv)\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n         self.class_weight = class_weight\n \n     def fit(self, X, y, sample_weight=None):\n",
    "total_cost": 0.211791,
    "instance_id": "scikit-learn__scikit-learn-10297",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue pertains to the `RidgeClassifierCV` class in the `sklearn.linear_model` module, specifically the lack of support for the 'store_cv_values' parameter as mentioned in the documentation. This parameter is expected to store cross-validation values but is resulting in a TypeError. The task is to locate the relevant code in the `sklearn.linear_model.ridge.py` file where the `RidgeClassifierCV` class is defined and possibly its base classes to understand why the parameter is not recognized.",
            "search_requests": [
              {
                "query": "RidgeClassifierCV class and store_cv_values parameter",
                "class_names": [
                  "RidgeClassifierCV",
                  "_BaseRidgeCV"
                ],
                "code_snippet": null,
                "file_pattern": "sklearn/linear_model/ridge.py",
                "function_names": [
                  "fit"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 315,
                "span_id": "_BaseRidgeCV.fit",
                "file_path": "sklearn/linear_model/ridge.py"
              },
              {
                "rank": 0,
                "tokens": 10,
                "span_id": "_BaseRidgeCV",
                "file_path": "sklearn/linear_model/ridge.py"
              },
              {
                "rank": 1,
                "tokens": 802,
                "span_id": "RidgeClassifierCV",
                "file_path": "sklearn/linear_model/ridge.py"
              },
              {
                "rank": 2,
                "tokens": 263,
                "span_id": "RidgeClassifierCV.fit",
                "file_path": "sklearn/linear_model/ridge.py"
              },
              {
                "rank": 2,
                "tokens": 17,
                "span_id": "RidgeClassifierCV.classes_",
                "file_path": "sklearn/linear_model/ridge.py"
              },
              {
                "rank": 5,
                "tokens": 826,
                "span_id": "_RidgeGCV.fit",
                "file_path": "sklearn/linear_model/ridge.py"
              },
              {
                "rank": 8,
                "tokens": 125,
                "span_id": "Ridge.fit",
                "file_path": "sklearn/linear_model/ridge.py"
              },
              {
                "rank": 10,
                "tokens": 301,
                "span_id": "RidgeClassifier.fit",
                "file_path": "sklearn/linear_model/ridge.py"
              },
              {
                "rank": 12,
                "tokens": 353,
                "span_id": "_BaseRidge.fit",
                "file_path": "sklearn/linear_model/ridge.py"
              }
            ],
            "search_requests": [
              {
                "query": "RidgeClassifierCV class and store_cv_values parameter",
                "class_names": [
                  "RidgeClassifierCV",
                  "_BaseRidgeCV"
                ],
                "code_snippet": null,
                "file_pattern": "sklearn/linear_model/ridge.py",
                "function_names": [
                  "fit"
                ]
              }
            ]
          },
          "input_tokens": 3662,
          "output_tokens": 220,
          "retry_message": null,
          "completion_cost": 0.014286
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 315,
            "span_id": "_BaseRidgeCV.fit",
            "file_path": "sklearn/linear_model/ridge.py"
          },
          {
            "rank": 0,
            "tokens": 10,
            "span_id": "_BaseRidgeCV",
            "file_path": "sklearn/linear_model/ridge.py"
          },
          {
            "rank": 1,
            "tokens": 802,
            "span_id": "RidgeClassifierCV",
            "file_path": "sklearn/linear_model/ridge.py"
          },
          {
            "rank": 2,
            "tokens": 263,
            "span_id": "RidgeClassifierCV.fit",
            "file_path": "sklearn/linear_model/ridge.py"
          },
          {
            "rank": 2,
            "tokens": 17,
            "span_id": "RidgeClassifierCV.classes_",
            "file_path": "sklearn/linear_model/ridge.py"
          },
          {
            "rank": 5,
            "tokens": 826,
            "span_id": "_RidgeGCV.fit",
            "file_path": "sklearn/linear_model/ridge.py"
          },
          {
            "rank": 8,
            "tokens": 125,
            "span_id": "Ridge.fit",
            "file_path": "sklearn/linear_model/ridge.py"
          },
          {
            "rank": 10,
            "tokens": 301,
            "span_id": "RidgeClassifier.fit",
            "file_path": "sklearn/linear_model/ridge.py"
          },
          {
            "rank": 12,
            "tokens": 353,
            "span_id": "_BaseRidge.fit",
            "file_path": "sklearn/linear_model/ridge.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue indicates that the parameter `store_cv_values` is not recognized in `RidgeClassifierCV`, despite being documented as a valid parameter. The search results reveal relevant pieces of code within the `sklearn/linear_model/ridge.py` file. Specifically, the `__init__` method of `_BaseRidgeCV` accepts `store_cv_values` as a parameter, and its implementation in `_BaseRidgeCV.fit` uses this parameter. However, the subclass `RidgeClassifierCV` does not include `store_cv_values` in its `__init__` method, which is likely the cause of the error. This discrepancy in parameter handling between the base class and its subclass needs to be addressed to resolve the issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "docstring",
                  "_BaseRidge",
                  "_BaseRidge.fit",
                  "Ridge",
                  "Ridge.fit",
                  "RidgeClassifier",
                  "RidgeClassifier.fit",
                  "_RidgeGCV",
                  "_RidgeGCV.fit",
                  "_BaseRidgeCV",
                  "_BaseRidgeCV.__init__",
                  "_BaseRidgeCV.fit",
                  "RidgeClassifierCV",
                  "RidgeClassifierCV.__init__",
                  "RidgeClassifierCV.fit"
                ],
                "file_path": "sklearn/linear_model/ridge.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4655,
          "output_tokens": 360,
          "retry_message": null,
          "completion_cost": 0.019365
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context provided contains the definition for the `RidgeClassifierCV` class and its base classes in the `sklearn.linear_model.ridge.py` file. It appears that the `RidgeClassifierCV` class inherits from `_BaseRidgeCV`, which in turn uses `_RidgeGCV` for cross-validation. The `store_cv_values` parameter is declared in the `_RidgeGCV` class but is not present in the `RidgeClassifierCV` class itself. This confirms the issue that the `store_cv_values` parameter is not recognized by `RidgeClassifierCV` due to it not being included in its constructor. However, the relevant class structure and parameter definition in the base classes are identified, indicating the issue's relevance.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 4914,
          "output_tokens": 208,
          "retry_message": null,
          "completion_cost": 0.017862
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "RidgeClassifierCV.__init__",
            "file_path": "sklearn/linear_model/ridge.py",
            "scratch_pad": "To fix the issue reported, we need to add support for the 'store_cv_values' parameter in the 'RidgeClassifierCV' class. This involves modifying the '__init__' method of the class to accept 'store_cv_values' as an argument and passing it to the superclass '_BaseRidgeCV'. The span to be updated is the '__init__' method of 'RidgeClassifierCV'.",
            "instructions": "Add 'store_cv_values' parameter to the 'RidgeClassifierCV' class's '__init__' method and pass it to the superclass '_BaseRidgeCV'. The parameter should be set to 'False' by default to maintain backward compatibility."
          },
          "output": {
            "span_id": "RidgeClassifierCV.__init__",
            "end_line": 1340,
            "file_path": "sklearn/linear_model/ridge.py",
            "start_line": 1335,
            "instructions": "Add 'store_cv_values' parameter to the 'RidgeClassifierCV' class's '__init__' method and pass it to the superclass '_BaseRidgeCV'. The parameter should be set to 'False' by default to maintain backward compatibility."
          },
          "input_tokens": 5314,
          "output_tokens": 224,
          "retry_message": null,
          "completion_cost": 0.019302
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "RidgeClassifierCV.__init__",
        "end_line": 1340,
        "file_path": "sklearn/linear_model/ridge.py",
        "max_tokens": 1000,
        "start_line": 1335,
        "temperature": 1.6,
        "instructions": "Add 'store_cv_values' parameter to the 'RidgeClassifierCV' class's '__init__' method and pass it to the superclass '_BaseRidgeCV'. The parameter should be set to 'False' by default to maintain backward compatibility.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n                 normalize=False, scoring=None, cv=None, class_weight=None,\n                 store_cv_values=False):\n        super(RidgeClassifierCV, self).__init__(\n            alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n        self.class_weight = class_weight\n</replace>"
          },
          "output": {
            "diff": "--- sklearn/linear_model/ridge.py\n+++ sklearn/linear_model/ridge.py\n@@ -1333,10 +1333,11 @@\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n-            scoring=scoring, cv=cv)\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n         self.class_weight = class_weight\n \n     def fit(self, X, y, sample_weight=None):\n",
            "message": "Applied the change to sklearn/linear_model/ridge.py.",
            "verification_errors": []
          },
          "input_tokens": 9390,
          "output_tokens": 136,
          "retry_message": null,
          "completion_cost": 0.03021
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sklearn/linear_model/ridge.py\n+++ sklearn/linear_model/ridge.py\n@@ -1333,10 +1333,11 @@\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n-            scoring=scoring, cv=cv)\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n         self.class_weight = class_weight\n \n     def fit(self, X, y, sample_weight=None):\n",
        "model": "deepseek-coder",
        "message": "Applied the change to sklearn/linear_model/ridge.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "_RidgeGCV.fit",
            "file_path": "sklearn/linear_model/ridge.py",
            "scratch_pad": "The initial change has been successfully applied, adding the 'store_cv_values' parameter to the 'RidgeClassifierCV' class. This parameter is now correctly passed to the superclass '_BaseRidgeCV'. The next step is to ensure that the 'store_cv_values' flag is handled appropriately within the 'fit' method of 'RidgeClassifierCV', especially when 'cv=None' and 'store_cv_values=True'. This involves modifying the '_RidgeGCV' class and its 'fit' method to store the cross-validation values if the flag is set to True.",
            "instructions": "Update the '_RidgeGCV' class's 'fit' method to handle the 'store_cv_values' parameter. Specifically, ensure that if 'store_cv_values' is True, the cross-validation values are stored in the 'cv_values_' attribute of the class instance."
          },
          "output": {
            "span_id": "_RidgeGCV.fit",
            "file_path": "sklearn/linear_model/ridge.py",
            "instructions": "Update the '_RidgeGCV' class's 'fit' method to handle the 'store_cv_values' parameter. Specifically, ensure that if 'store_cv_values' is True, the cross-validation values are stored in the 'cv_values_' attribute of the class instance."
          },
          "input_tokens": 5835,
          "output_tokens": 266,
          "retry_message": null,
          "completion_cost": 0.021495
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "_RidgeGCV.fit",
        "end_line": null,
        "file_path": "sklearn/linear_model/ridge.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Update the '_RidgeGCV' class's 'fit' method to handle the 'store_cv_values' parameter. Specifically, ensure that if 'store_cv_values' is True, the cross-validation values are stored in the 'cv_values_' attribute of the class instance.\n\nThe 'fit' method needs to be updated to handle the 'store_cv_values' parameter. Specifically, if 'store_cv_values' is True, the cross-validation values should be stored in the 'cv_values_' attribute. The lines related to storing 'cv_values_' are already present in the code but need to ensure they are executed based on the 'store_cv_values' parameter.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 1082,
            "start_line": 1077,
            "scratch_pad": "The 'fit' method needs to be updated to handle the 'store_cv_values' parameter. Specifically, if 'store_cv_values' is True, the cross-validation values should be stored in the 'cv_values_' attribute. The lines related to storing 'cv_values_' are already present in the code but need to ensure they are executed based on the 'store_cv_values' parameter."
          },
          "output": {
            "span_id": "_RidgeGCV.fit",
            "end_line": 1082,
            "file_path": "sklearn/linear_model/ridge.py",
            "start_line": 1077,
            "instructions": "Update the '_RidgeGCV' class's 'fit' method to handle the 'store_cv_values' parameter. Specifically, ensure that if 'store_cv_values' is True, the cross-validation values are stored in the 'cv_values_' attribute of the class instance.\n\nThe 'fit' method needs to be updated to handle the 'store_cv_values' parameter. Specifically, if 'store_cv_values' is True, the cross-validation values should be stored in the 'cv_values_' attribute. The lines related to storing 'cv_values_' are already present in the code but need to ensure they are executed based on the 'store_cv_values' parameter."
          },
          "input_tokens": 2122,
          "output_tokens": 134,
          "retry_message": null,
          "completion_cost": 0.008376
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "_RidgeGCV.fit",
        "end_line": 1082,
        "file_path": "sklearn/linear_model/ridge.py",
        "max_tokens": 1000,
        "start_line": 1077,
        "temperature": 1.6,
        "instructions": "Update the '_RidgeGCV' class's 'fit' method to handle the 'store_cv_values' parameter. Specifically, ensure that if 'store_cv_values' is True, the cross-validation values are stored in the 'cv_values_' attribute of the class instance.\n\nThe 'fit' method needs to be updated to handle the 'store_cv_values' parameter. Specifically, if 'store_cv_values' is True, the cross-validation values should be stored in the 'cv_values_' attribute. The lines related to storing 'cv_values_' are already present in the code but need to ensure they are executed based on the 'store_cv_values' parameter.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n        if self.store_cv_values:\n            if len(y.shape) == 1:\n                cv_values_shape = n_samples, len(self.alphas)\n            else:\n                cv_values_shape = n_samples, n_y, len(self.alphas)\n            self.cv_values_ = cv_values.reshape(cv_values_shape)\n</replace>"
          },
          "output": null,
          "input_tokens": 9491,
          "output_tokens": 98,
          "retry_message": "The code in the replace tag is the same as in the search. Use the reject function if you can't do any changes and want to reject the instructions.",
          "completion_cost": 0.029943
        },
        {
          "action": {
            "content": "<reject>\nThe provided code already correctly handles the storage of cross-validation values when the 'store_cv_values' parameter is True. No modifications are needed as the functionality is already implemented as per the instructions.\n</reject>"
          },
          "output": {
            "message": "\nThe provided code already correctly handles the storage of cross-validation values when the 'store_cv_values' parameter is True. No modifications are needed as the functionality is already implemented as per the instructions.\n"
          },
          "input_tokens": 9629,
          "output_tokens": 49,
          "retry_message": null,
          "completion_cost": 0.029622
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "\nThe provided code already correctly handles the storage of cross-validation values when the 'store_cv_values' parameter is True. No modifications are needed as the functionality is already implemented as per the instructions.\n",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The 'store_cv_values' parameter is correctly handled in the '_RidgeGCV' class's 'fit' method, and the cross-validation values are stored as required when the parameter is set to True.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The provided file context confirms that the 'store_cv_values' functionality is already correctly implemented in the 'fit' method of the '_RidgeGCV' class. The parameter is handled appropriately, and if 'store_cv_values' is set to True, the cross-validation values are stored in the 'cv_values_' attribute. Therefore, no further modifications are necessary to address the reported issue.",
            "instructions": null
          },
          "output": {
            "message": "The 'store_cv_values' parameter is correctly handled in the '_RidgeGCV' class's 'fit' method, and the cross-validation values are stored as required when the parameter is set to True."
          },
          "input_tokens": 6150,
          "output_tokens": 192,
          "retry_message": null,
          "completion_cost": 0.021330000000000002
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The 'store_cv_values' parameter is correctly handled in the '_RidgeGCV' class's 'fit' method, and the cross-validation values are stored as required when the parameter is set to True.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "linear_model.RidgeClassifierCV's Parameter store_cv_values issue\n#### Description\r\nParameter store_cv_values error on sklearn.linear_model.RidgeClassifierCV\r\n\r\n#### Steps/Code to Reproduce\r\nimport numpy as np\r\nfrom sklearn import linear_model as lm\r\n\r\n#test database\r\nn = 100\r\nx = np.random.randn(n, 30)\r\ny = np.random.normal(size = n)\r\n\r\nrr = lm.RidgeClassifierCV(alphas = np.arange(0.1, 1000, 0.1), normalize = True, \r\n                                         store_cv_values = True).fit(x, y)\r\n\r\n#### Expected Results\r\nExpected to get the usual ridge regression model output, keeping the cross validation predictions as attribute.\r\n\r\n#### Actual Results\r\nTypeError: __init__() got an unexpected keyword argument 'store_cv_values'\r\n\r\nlm.RidgeClassifierCV actually has no parameter store_cv_values, even though some attributes depends on it.\r\n\r\n#### Versions\r\nWindows-10-10.0.14393-SP0\r\nPython 3.6.3 |Anaconda, Inc.| (default, Oct 15 2017, 03:27:45) [MSC v.1900 64 bit (AMD64)]\r\nNumPy 1.13.3\r\nSciPy 0.19.1\r\nScikit-Learn 0.19.1\r\n\r\n\nAdd store_cv_values boolean flag support to RidgeClassifierCV\nAdd store_cv_values support to RidgeClassifierCV - documentation claims that usage of this flag is possible:\n\n> cv_values_ : array, shape = [n_samples, n_alphas] or shape = [n_samples, n_responses, n_alphas], optional\n> Cross-validation values for each alpha (if **store_cv_values**=True and `cv=None`).\n\nWhile actually usage of this flag gives \n\n> TypeError: **init**() got an unexpected keyword argument 'store_cv_values'\n\n"
}