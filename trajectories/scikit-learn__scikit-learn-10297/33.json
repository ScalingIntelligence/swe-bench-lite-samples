{
  "info": {
    "duration": 177.55806183815002,
    "submission": "diff --git a/sklearn/linear_model/ridge.py b/sklearn/linear_model/ridge.py\nindex 911c74ae3..b1fccc2e9 100644\n--- a/sklearn/linear_model/ridge.py\n+++ b/sklearn/linear_model/ridge.py\n@@ -1333,10 +1333,11 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n-            scoring=scoring, cv=cv)\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n         self.class_weight = class_weight\n \n     def fit(self, X, y, sample_weight=None):\n",
    "total_cost": 0.14690999999999999,
    "instance_id": "scikit-learn__scikit-learn-10297",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves the RidgeClassifierCV class in the sklearn.linear_model module, specifically related to the store_cv_values parameter. The error indicates that the RidgeClassifierCV's __init__ method does not recognize the store_cv_values keyword argument, even though the documentation suggests it should be supported. To address this, focus the search on the RidgeClassifierCV class within the sklearn.linear_model.ridge module. Additionally, look for any related methods or attributes that might interact with store_cv_values.",
            "search_requests": [
              {
                "query": "store_cv_values",
                "class_names": [
                  "RidgeClassifierCV"
                ],
                "code_snippet": null,
                "file_pattern": "sklearn/linear_model/ridge.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 1,
                "tokens": 802,
                "span_id": "RidgeClassifierCV",
                "file_path": "sklearn/linear_model/ridge.py"
              },
              {
                "rank": 4,
                "tokens": 263,
                "span_id": "RidgeClassifierCV.fit",
                "file_path": "sklearn/linear_model/ridge.py"
              },
              {
                "rank": 4,
                "tokens": 17,
                "span_id": "RidgeClassifierCV.classes_",
                "file_path": "sklearn/linear_model/ridge.py"
              }
            ],
            "search_requests": [
              {
                "query": "store_cv_values",
                "class_names": [
                  "RidgeClassifierCV"
                ],
                "code_snippet": null,
                "file_pattern": "sklearn/linear_model/ridge.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 3662,
          "output_tokens": 196,
          "retry_message": null,
          "completion_cost": 0.013926000000000001
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 1,
            "tokens": 802,
            "span_id": "RidgeClassifierCV",
            "file_path": "sklearn/linear_model/ridge.py"
          },
          {
            "rank": 4,
            "tokens": 263,
            "span_id": "RidgeClassifierCV.fit",
            "file_path": "sklearn/linear_model/ridge.py"
          },
          {
            "rank": 4,
            "tokens": 17,
            "span_id": "RidgeClassifierCV.classes_",
            "file_path": "sklearn/linear_model/ridge.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue indicates that the parameter 'store_cv_values' is not recognized in the 'RidgeClassifierCV' class despite being mentioned in the documentation. This suggests that the parameter needs to be added to the class's initialization method or the documentation needs to be corrected. Upon reviewing the search results, it appears that 'store_cv_values' is indeed used in the '_BaseRidgeCV' class but not passed through to the 'RidgeClassifierCV' class initialization method. Specifically, the '_BaseRidgeCV' class's 'fit' method handles 'store_cv_values' appropriately, but this parameter is not included in the '__init__' method of 'RidgeClassifierCV'. This omission likely causes the observed TypeError. Therefore, the relevant code spans are those related to the '__init__' method of 'RidgeClassifierCV' and the 'fit' method of '_BaseRidgeCV', as these will need to be updated to include 'store_cv_values' to resolve the issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "RidgeClassifierCV.__init__",
                  "_BaseRidgeCV.fit"
                ],
                "file_path": "sklearn/linear_model/ridge.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 2479,
          "output_tokens": 302,
          "retry_message": null,
          "completion_cost": 0.011967
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The provided file context includes the RidgeClassifierCV class within the sklearn.linear_model.ridge module. However, the context shows that the __init__ method of RidgeClassifierCV does not include the 'store_cv_values' parameter, which is why the TypeError occurs. The parent class _BaseRidgeCV does include this parameter, but it is not passed through from the RidgeClassifierCV class. This suggests that the code in the file context is incomplete for addressing the issue.",
            "search_suggestions": "Look for the inheritance chain of RidgeClassifierCV and check how the parameters from the parent class _BaseRidgeCV are being handled, specifically why 'store_cv_values' is not being passed through during initialization."
          },
          "output": {
            "message": "Look for the inheritance chain of RidgeClassifierCV and check how the parameters from the parent class _BaseRidgeCV are being handled, specifically why 'store_cv_values' is not being passed through during initialization."
          },
          "input_tokens": 2500,
          "output_tokens": 186,
          "retry_message": null,
          "completion_cost": 0.01029
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look for the inheritance chain of RidgeClassifierCV and check how the parameters from the parent class _BaseRidgeCV are being handled, specifically why 'store_cv_values' is not being passed through during initialization.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The RidgeClassifierCV class inheriting from _BaseRidgeCV does not include the store_cv_values parameter in its __init__ method. This mismatch is likely the cause of the 'TypeError: __init__() got an unexpected keyword argument 'store_cv_values'' error since the parameter is not passed down the inheritance chain as expected. Further investigation should focus on updating RidgeClassifierCV to accommodate store_cv_values or clarifying its absence from the class definition.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "RidgeClassifierCV"
                ],
                "code_snippet": null,
                "file_pattern": "sklearn/linear_model/ridge.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 802,
                "span_id": "RidgeClassifierCV",
                "file_path": "sklearn/linear_model/ridge.py"
              },
              {
                "rank": 0,
                "tokens": 85,
                "span_id": "RidgeClassifierCV.__init__",
                "file_path": "sklearn/linear_model/ridge.py"
              },
              {
                "rank": 0,
                "tokens": 263,
                "span_id": "RidgeClassifierCV.fit",
                "file_path": "sklearn/linear_model/ridge.py"
              },
              {
                "rank": 0,
                "tokens": 17,
                "span_id": "RidgeClassifierCV.classes_",
                "file_path": "sklearn/linear_model/ridge.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "RidgeClassifierCV"
                ],
                "code_snippet": null,
                "file_pattern": "sklearn/linear_model/ridge.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 5033,
          "output_tokens": 195,
          "retry_message": null,
          "completion_cost": 0.018024
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 802,
            "span_id": "RidgeClassifierCV",
            "file_path": "sklearn/linear_model/ridge.py"
          },
          {
            "rank": 0,
            "tokens": 85,
            "span_id": "RidgeClassifierCV.__init__",
            "file_path": "sklearn/linear_model/ridge.py"
          },
          {
            "rank": 0,
            "tokens": 263,
            "span_id": "RidgeClassifierCV.fit",
            "file_path": "sklearn/linear_model/ridge.py"
          },
          {
            "rank": 0,
            "tokens": 17,
            "span_id": "RidgeClassifierCV.classes_",
            "file_path": "sklearn/linear_model/ridge.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue highlights that `RidgeClassifierCV` does not support the `store_cv_values` parameter, leading to a `TypeError`. Reviewing the search results and the current context, the relevant code spans are identified in the `__init__` and `fit` methods of `_BaseRidgeCV` and `RidgeClassifierCV`. Specifically, `_BaseRidgeCV.__init__` and `_BaseRidgeCV.fit` show the handling of the `store_cv_values` parameter, and `RidgeClassifierCV.__init__` lacks this parameter, causing the error. Additionally, `RidgeClassifierCV.fit` method checks and processes the `class_weight` parameter. To resolve this issue, support for `store_cv_values` should be added to `RidgeClassifierCV` similar to `_BaseRidgeCV`.",
            "identified_spans": [
              {
                "span_ids": [
                  "_BaseRidgeCV.__init__",
                  "_BaseRidgeCV.fit",
                  "RidgeClassifierCV.__init__",
                  "RidgeClassifierCV.fit"
                ],
                "file_path": "sklearn/linear_model/ridge.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3699,
          "output_tokens": 296,
          "retry_message": null,
          "completion_cost": 0.015537000000000002
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The RidgeClassifierCV class inheriting from _BaseRidgeCV does not include the store_cv_values parameter in its __init__ method. This mismatch is likely the cause of the 'TypeError: __init__() got an unexpected keyword argument 'store_cv_values'' error since the parameter is not passed down the inheritance chain as expected. Further investigation should focus on updating RidgeClassifierCV to accommodate store_cv_values or clarifying its absence from the class definition.",
            "search_suggestions": "Look for similar attributes or parameters used in other classes that may indicate how to properly implement store_cv_values in RidgeClassifierCV. Additionally, check documentation and existing issues to confirm if this is a known issue or if there are plans to address it."
          },
          "output": {
            "message": "Look for similar attributes or parameters used in other classes that may indicate how to properly implement store_cv_values in RidgeClassifierCV. Additionally, check documentation and existing issues to confirm if this is a known issue or if there are plans to address it."
          },
          "input_tokens": 2758,
          "output_tokens": 190,
          "retry_message": null,
          "completion_cost": 0.011124
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look for similar attributes or parameters used in other classes that may indicate how to properly implement store_cv_values in RidgeClassifierCV. Additionally, check documentation and existing issues to confirm if this is a known issue or if there are plans to address it.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "scratch_pad": "The current context shows that while _BaseRidgeCV includes the store_cv_values parameter in its __init__ method, RidgeClassifierCV, which inherits from _BaseRidgeCV, does not explicitly include store_cv_values in its own __init__ method. This indicates that RidgeClassifierCV isn't directly supporting the store_cv_values parameter as _BaseRidgeCV does, which is likely why it's missing when RidgeClassifierCV is instantiated, leading to the TypeError. Further, a check of other classes and methods in the file did not reveal a direct, analogous use of store_cv_values to guide its implementation in RidgeClassifierCV. This represents a clear case for addressing directly, possibly by modifying the __init__ method for RidgeClassifierCV to include store_cv_values and ensure it's properly handled down the inheritance chain.",
            "search_requests": []
          },
          "output": {
            "message": "The current context shows that while _BaseRidgeCV includes the store_cv_values parameter in its __init__ method, RidgeClassifierCV, which inherits from _BaseRidgeCV, does not explicitly include store_cv_values in its own __init__ method. This indicates that RidgeClassifierCV isn't directly supporting the store_cv_values parameter as _BaseRidgeCV does, which is likely why it's missing when RidgeClassifierCV is instantiated, leading to the TypeError. Further, a check of other classes and methods in the file did not reveal a direct, analogous use of store_cv_values to guide its implementation in RidgeClassifierCV. This represents a clear case for addressing directly, possibly by modifying the __init__ method for RidgeClassifierCV to include store_cv_values and ensure it's properly handled down the inheritance chain."
          },
          "input_tokens": 5564,
          "output_tokens": 212,
          "retry_message": null,
          "completion_cost": 0.019872
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "The current context shows that while _BaseRidgeCV includes the store_cv_values parameter in its __init__ method, RidgeClassifierCV, which inherits from _BaseRidgeCV, does not explicitly include store_cv_values in its own __init__ method. This indicates that RidgeClassifierCV isn't directly supporting the store_cv_values parameter as _BaseRidgeCV does, which is likely why it's missing when RidgeClassifierCV is instantiated, leading to the TypeError. Further, a check of other classes and methods in the file did not reveal a direct, analogous use of store_cv_values to guide its implementation in RidgeClassifierCV. This represents a clear case for addressing directly, possibly by modifying the __init__ method for RidgeClassifierCV to include store_cv_values and ensure it's properly handled down the inheritance chain.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "RidgeClassifierCV.__init__",
            "file_path": "sklearn/linear_model/ridge.py",
            "scratch_pad": "RidgeClassifierCV currently does not support the store_cv_values parameter, which is causing a TypeError. This parameter is supported in _BaseRidgeCV from which RidgeClassifierCV inherits, but it does not pass this parameter through to the superclass constructor in its own __init__ method. To fix this, RidgeClassifierCV's __init__ method needs to be updated to include store_cv_values, allowing it to be properly handled by _BaseRidgeCV.",
            "instructions": "Update RidgeClassifierCV's __init__ method to include the store_cv_values parameter and pass it to the superclass (_BaseRidgeCV) constructor. This will enable RidgeClassifierCV to support the store_cv_values parameter."
          },
          "output": {
            "span_id": "RidgeClassifierCV.__init__",
            "end_line": 1340,
            "file_path": "sklearn/linear_model/ridge.py",
            "start_line": 1335,
            "instructions": "Update RidgeClassifierCV's __init__ method to include the store_cv_values parameter and pass it to the superclass (_BaseRidgeCV) constructor. This will enable RidgeClassifierCV to support the store_cv_values parameter."
          },
          "input_tokens": 3244,
          "output_tokens": 219,
          "retry_message": null,
          "completion_cost": 0.013017
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "RidgeClassifierCV.__init__",
        "end_line": 1340,
        "file_path": "sklearn/linear_model/ridge.py",
        "max_tokens": 1000,
        "start_line": 1335,
        "temperature": 1.6,
        "instructions": "Update RidgeClassifierCV's __init__ method to include the store_cv_values parameter and pass it to the superclass (_BaseRidgeCV) constructor. This will enable RidgeClassifierCV to support the store_cv_values parameter.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\n    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n                 normalize=False, scoring=None, cv=None, class_weight=None,\n                 store_cv_values=False):\n        super(RidgeClassifierCV, self).__init__(\n            alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n        self.class_weight = class_weight\n</replace>"
          },
          "output": {
            "diff": "--- sklearn/linear_model/ridge.py\n+++ sklearn/linear_model/ridge.py\n@@ -1333,10 +1333,11 @@\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n-            scoring=scoring, cv=cv)\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n         self.class_weight = class_weight\n \n     def fit(self, X, y, sample_weight=None):\n",
            "message": "Applied the change to sklearn/linear_model/ridge.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 5695,
          "output_tokens": 139,
          "retry_message": null,
          "completion_cost": 0.01917
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sklearn/linear_model/ridge.py\n+++ sklearn/linear_model/ridge.py\n@@ -1333,10 +1333,11 @@\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n-            scoring=scoring, cv=cv)\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n         self.class_weight = class_weight\n \n     def fit(self, X, y, sample_weight=None):\n",
        "model": "deepseek-coder",
        "message": "Applied the change to sklearn/linear_model/ridge.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue has been resolved by updating RidgeClassifierCV's __init__ method to include the store_cv_values parameter and pass it to the superclass constructor. This ensures that RidgeClassifierCV now correctly supports the store_cv_values parameter, eliminating the TypeError previously encountered.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The proposed change has been successfully applied to RidgeClassifierCV's __init__ method. This update ensures that the store_cv_values parameter is now included and passed to the superclass (_BaseRidgeCV) constructor, allowing RidgeClassifierCV to properly support the store_cv_values parameter as intended. This resolves the TypeError encountered when trying to use store_cv_values with RidgeClassifierCV.",
            "instructions": null
          },
          "output": {
            "message": "The issue has been resolved by updating RidgeClassifierCV's __init__ method to include the store_cv_values parameter and pass it to the superclass constructor. This ensures that RidgeClassifierCV now correctly supports the store_cv_values parameter, eliminating the TypeError previously encountered."
          },
          "input_tokens": 3791,
          "output_tokens": 174,
          "retry_message": null,
          "completion_cost": 0.013982999999999999
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue has been resolved by updating RidgeClassifierCV's __init__ method to include the store_cv_values parameter and pass it to the superclass constructor. This ensures that RidgeClassifierCV now correctly supports the store_cv_values parameter, eliminating the TypeError previously encountered.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "linear_model.RidgeClassifierCV's Parameter store_cv_values issue\n#### Description\r\nParameter store_cv_values error on sklearn.linear_model.RidgeClassifierCV\r\n\r\n#### Steps/Code to Reproduce\r\nimport numpy as np\r\nfrom sklearn import linear_model as lm\r\n\r\n#test database\r\nn = 100\r\nx = np.random.randn(n, 30)\r\ny = np.random.normal(size = n)\r\n\r\nrr = lm.RidgeClassifierCV(alphas = np.arange(0.1, 1000, 0.1), normalize = True, \r\n                                         store_cv_values = True).fit(x, y)\r\n\r\n#### Expected Results\r\nExpected to get the usual ridge regression model output, keeping the cross validation predictions as attribute.\r\n\r\n#### Actual Results\r\nTypeError: __init__() got an unexpected keyword argument 'store_cv_values'\r\n\r\nlm.RidgeClassifierCV actually has no parameter store_cv_values, even though some attributes depends on it.\r\n\r\n#### Versions\r\nWindows-10-10.0.14393-SP0\r\nPython 3.6.3 |Anaconda, Inc.| (default, Oct 15 2017, 03:27:45) [MSC v.1900 64 bit (AMD64)]\r\nNumPy 1.13.3\r\nSciPy 0.19.1\r\nScikit-Learn 0.19.1\r\n\r\n\nAdd store_cv_values boolean flag support to RidgeClassifierCV\nAdd store_cv_values support to RidgeClassifierCV - documentation claims that usage of this flag is possible:\n\n> cv_values_ : array, shape = [n_samples, n_alphas] or shape = [n_samples, n_responses, n_alphas], optional\n> Cross-validation values for each alpha (if **store_cv_values**=True and `cv=None`).\n\nWhile actually usage of this flag gives \n\n> TypeError: **init**() got an unexpected keyword argument 'store_cv_values'\n\n"
}