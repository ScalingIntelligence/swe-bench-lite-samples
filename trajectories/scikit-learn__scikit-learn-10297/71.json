{
  "info": {
    "duration": 175.96983218193054,
    "submission": "diff --git a/sklearn/linear_model/ridge.py b/sklearn/linear_model/ridge.py\nindex 911c74ae3..b1fccc2e9 100644\n--- a/sklearn/linear_model/ridge.py\n+++ b/sklearn/linear_model/ridge.py\n@@ -1333,10 +1333,11 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n-            scoring=scoring, cv=cv)\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n         self.class_weight = class_weight\n \n     def fit(self, X, y, sample_weight=None):\n",
    "total_cost": 0.142725,
    "instance_id": "scikit-learn__scikit-learn-10297",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves the 'store_cv_values' parameter in the 'RidgeClassifierCV' class, which is raising a 'TypeError' indicating that 'store_cv_values' is not a recognized parameter. This discrepancy should be investigated within the 'RidgeClassifierCV' class definition and the 'fit' method where this parameter is expected. Since 'RidgeClassifierCV' is a part of the scikit-learn library, the search should focus on the 'linear_model' directory, specifically on the 'ridge.py' file and the 'RidgeClassifierCV' class within it.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "RidgeClassifierCV"
                ],
                "code_snippet": null,
                "file_pattern": "sklearn/linear_model/ridge.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 802,
                "span_id": "RidgeClassifierCV",
                "file_path": "sklearn/linear_model/ridge.py"
              },
              {
                "rank": 0,
                "tokens": 85,
                "span_id": "RidgeClassifierCV.__init__",
                "file_path": "sklearn/linear_model/ridge.py"
              },
              {
                "rank": 0,
                "tokens": 263,
                "span_id": "RidgeClassifierCV.fit",
                "file_path": "sklearn/linear_model/ridge.py"
              },
              {
                "rank": 0,
                "tokens": 17,
                "span_id": "RidgeClassifierCV.classes_",
                "file_path": "sklearn/linear_model/ridge.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "RidgeClassifierCV"
                ],
                "code_snippet": null,
                "file_pattern": "sklearn/linear_model/ridge.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 3662,
          "output_tokens": 199,
          "retry_message": null,
          "completion_cost": 0.013971
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 802,
            "span_id": "RidgeClassifierCV",
            "file_path": "sklearn/linear_model/ridge.py"
          },
          {
            "rank": 0,
            "tokens": 85,
            "span_id": "RidgeClassifierCV.__init__",
            "file_path": "sklearn/linear_model/ridge.py"
          },
          {
            "rank": 0,
            "tokens": 263,
            "span_id": "RidgeClassifierCV.fit",
            "file_path": "sklearn/linear_model/ridge.py"
          },
          {
            "rank": 0,
            "tokens": 17,
            "span_id": "RidgeClassifierCV.classes_",
            "file_path": "sklearn/linear_model/ridge.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue concerns the implementation and documentation of the `RidgeClassifierCV` class in the sklearn library. Specifically, the user is facing a `TypeError` when attempting to use the `store_cv_values` parameter, which is documented as a valid parameter but is not recognized by the constructor of `RidgeClassifierCV`. To address this issue, I need to identify any existing code spans that might be related to the initialization, fitting, or any attributes related to `RidgeClassifierCV`, especially focusing on the handling of cross-validation values. The provided code spans include the initialization of `RidgeClassifierCV`, which lacks the `store_cv_values` parameter, and a method in `_BaseRidgeCV` that checks and manipulates `store_cv_values`. These spans are directly relevant to the reported issue as they pertain to the class and its inheritance, which is crucial for understanding and fixing the issue. The presence of errors in handling `store_cv_values` suggests that modifications or additions will be needed in these areas to properly support the parameter.",
            "identified_spans": [
              {
                "span_ids": [
                  "docstring",
                  "_BaseRidgeCV",
                  "_BaseRidgeCV.fit",
                  "RidgeClassifierCV",
                  "RidgeClassifierCV.__init__",
                  "RidgeClassifierCV.fit",
                  "RidgeClassifierCV.classes_"
                ],
                "file_path": "sklearn/linear_model/ridge.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 2479,
          "output_tokens": 357,
          "retry_message": null,
          "completion_cost": 0.012792000000000001
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The initial assessment highlighted the discrepancy in the 'RidgeClassifierCV' class where the 'store_cv_values' parameter is mentioned in the documentation but not recognized when used. Upon reviewing the provided 'ridge.py' file, it's clear that the 'RidgeClassifierCV' class does not support the 'store_cv_values' parameter, as evidenced by the constructor which lacks this parameter. Furthermore, the base class '_BaseRidgeCV' supports 'store_cv_values', but it seems not to be properly inherited by 'RidgeClassifierCV'. Therefore, the provided file context is relevant but incomplete due to the inheritance ambiguity.",
            "search_suggestions": "Inspect the inheritance mechanism further between '_BaseRidgeCV' and 'RidgeClassifierCV' to determine if 'store_cv_values' can be properly integrated. Additionally, check how other classes like 'RidgeCV' handle this parameter to provide a consistent interface for 'RidgeClassifierCV'."
          },
          "output": {
            "message": "Inspect the inheritance mechanism further between '_BaseRidgeCV' and 'RidgeClassifierCV' to determine if 'store_cv_values' can be properly integrated. Additionally, check how other classes like 'RidgeCV' handle this parameter to provide a consistent interface for 'RidgeClassifierCV'."
          },
          "input_tokens": 2493,
          "output_tokens": 239,
          "retry_message": null,
          "completion_cost": 0.011064000000000001
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Inspect the inheritance mechanism further between '_BaseRidgeCV' and 'RidgeClassifierCV' to determine if 'store_cv_values' can be properly integrated. Additionally, check how other classes like 'RidgeCV' handle this parameter to provide a consistent interface for 'RidgeClassifierCV'.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The initial investigation revealed that the '_BaseRidgeCV' class has the 'store_cv_values' parameter in its constructor, and it passes this parameter to another estimator if 'cv' is None. The 'RidgeCV' class inherits directly from '_BaseRidgeCV' and uses this mechanism. However, the 'RidgeClassifierCV' class, while inheriting from '_BaseRidgeCV', does not explicitly include 'store_cv_values' in its constructor. This discrepancy might be why the 'store_cv_values' parameter is not recognized when used with 'RidgeClassifierCV'. Further inspection into how 'RidgeCV' handles 'store_cv_values' and its integration in 'RidgeClassifierCV' is needed to resolve this issue.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "_BaseRidgeCV",
                  "RidgeCV",
                  "RidgeClassifierCV"
                ],
                "code_snippet": "store_cv_values",
                "file_pattern": "sklearn/linear_model/ridge.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 912,
                "span_id": "RidgeCV",
                "file_path": "sklearn/linear_model/ridge.py"
              },
              {
                "rank": 1,
                "tokens": 315,
                "span_id": "_BaseRidgeCV.fit",
                "file_path": "sklearn/linear_model/ridge.py"
              },
              {
                "rank": 1,
                "tokens": 10,
                "span_id": "_BaseRidgeCV",
                "file_path": "sklearn/linear_model/ridge.py"
              },
              {
                "rank": 2,
                "tokens": 802,
                "span_id": "RidgeClassifierCV",
                "file_path": "sklearn/linear_model/ridge.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "_BaseRidgeCV",
                  "RidgeCV",
                  "RidgeClassifierCV"
                ],
                "code_snippet": "store_cv_values",
                "file_pattern": "sklearn/linear_model/ridge.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 5040,
          "output_tokens": 285,
          "retry_message": null,
          "completion_cost": 0.019395
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 912,
            "span_id": "RidgeCV",
            "file_path": "sklearn/linear_model/ridge.py"
          },
          {
            "rank": 1,
            "tokens": 315,
            "span_id": "_BaseRidgeCV.fit",
            "file_path": "sklearn/linear_model/ridge.py"
          },
          {
            "rank": 1,
            "tokens": 10,
            "span_id": "_BaseRidgeCV",
            "file_path": "sklearn/linear_model/ridge.py"
          },
          {
            "rank": 2,
            "tokens": 802,
            "span_id": "RidgeClassifierCV",
            "file_path": "sklearn/linear_model/ridge.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue highlights a discrepancy in the RidgeClassifierCV class where the 'store_cv_values' parameter is documented as available but raises a TypeError when used. This suggests that the parameter is not properly implemented or recognized in the class's __init__ method. Upon reviewing the current file context and new search results, it's clear that the RidgeClassifierCV class inherits from _BaseRidgeCV which does have the 'store_cv_values' parameter in its __init__ method, but RidgeClassifierCV itself does not pass this parameter to the superclass constructor in its __init__ method. This omission in RidgeClassifierCV is likely causing the TypeError. To resolve this issue, the identified code span in RidgeClassifierCV's __init__ method needs to be modified to pass 'store_cv_values' to the superclass. Additionally, the RidgeClassifierCV.fit method should be reviewed to ensure proper handling of 'store_cv_values' if needed.",
            "identified_spans": [
              {
                "span_ids": [
                  "_BaseRidgeCV",
                  "_BaseRidgeCV.__init__",
                  "RidgeClassifierCV.__init__",
                  "RidgeClassifierCV.fit"
                ],
                "file_path": "sklearn/linear_model/ridge.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3609,
          "output_tokens": 311,
          "retry_message": null,
          "completion_cost": 0.015491999999999999
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The initial investigation revealed that the '_BaseRidgeCV' class has the 'store_cv_values' parameter in its constructor, and it passes this parameter to another estimator if 'cv' is None. The 'RidgeCV' class inherits directly from '_BaseRidgeCV' and uses this mechanism. However, the 'RidgeClassifierCV' class, while inheriting from '_BaseRidgeCV', does not explicitly include 'store_cv_values' in its constructor. This discrepancy might be why the 'store_cv_values' parameter is not recognized when used with 'RidgeClassifierCV'. Further inspection into how 'RidgeCV' handles 'store_cv_values' and its integration in 'RidgeClassifierCV' is needed to resolve this issue.",
            "search_suggestions": "Look into how the 'store_cv_values' parameter is handled in the 'RidgeCV' class and determine its potential integration into the 'RidgeClassifierCV' class."
          },
          "output": {
            "message": "Look into how the 'store_cv_values' parameter is handled in the 'RidgeCV' class and determine its potential integration into the 'RidgeClassifierCV' class."
          },
          "input_tokens": 2529,
          "output_tokens": 240,
          "retry_message": null,
          "completion_cost": 0.011186999999999999
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look into how the 'store_cv_values' parameter is handled in the 'RidgeCV' class and determine its potential integration into the 'RidgeClassifierCV' class.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "scratch_pad": "The analysis of the code reveals that '_BaseRidgeCV' class indeed has the 'store_cv_values' parameter in its constructor, which is passed to an internal estimator if 'cv' is None. However, the 'RidgeClassifierCV' class, which inherits from '_BaseRidgeCV', does not include 'store_cv_values' in its constructor. This omission is likely the cause of the 'TypeError' regarding the unrecognized 'store_cv_values' parameter. To resolve this, 'RidgeClassifierCV' should include 'store_cv_values' in its constructor and manage it similarly to 'RidgeCV'. The integration should preserve the existing behavior of 'store_cv_values' as defined in '_BaseRidgeCV' so that cross-validation values can be stored and accessed consistently across all Ridge-related classes.",
            "search_requests": []
          },
          "output": {
            "message": "The analysis of the code reveals that '_BaseRidgeCV' class indeed has the 'store_cv_values' parameter in its constructor, which is passed to an internal estimator if 'cv' is None. However, the 'RidgeClassifierCV' class, which inherits from '_BaseRidgeCV', does not include 'store_cv_values' in its constructor. This omission is likely the cause of the 'TypeError' regarding the unrecognized 'store_cv_values' parameter. To resolve this, 'RidgeClassifierCV' should include 'store_cv_values' in its constructor and manage it similarly to 'RidgeCV'. The integration should preserve the existing behavior of 'store_cv_values' as defined in '_BaseRidgeCV' so that cross-validation values can be stored and accessed consistently across all Ridge-related classes."
          },
          "input_tokens": 5370,
          "output_tokens": 208,
          "retry_message": null,
          "completion_cost": 0.01923
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "The analysis of the code reveals that '_BaseRidgeCV' class indeed has the 'store_cv_values' parameter in its constructor, which is passed to an internal estimator if 'cv' is None. However, the 'RidgeClassifierCV' class, which inherits from '_BaseRidgeCV', does not include 'store_cv_values' in its constructor. This omission is likely the cause of the 'TypeError' regarding the unrecognized 'store_cv_values' parameter. To resolve this, 'RidgeClassifierCV' should include 'store_cv_values' in its constructor and manage it similarly to 'RidgeCV'. The integration should preserve the existing behavior of 'store_cv_values' as defined in '_BaseRidgeCV' so that cross-validation values can be stored and accessed consistently across all Ridge-related classes.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "RidgeClassifierCV.__init__",
            "file_path": "sklearn/linear_model/ridge.py",
            "scratch_pad": "Currently, the RidgeClassifierCV class does not include 'store_cv_values' in its constructor, which leads to a TypeError when attempting to use this parameter. To resolve this, we should add 'store_cv_values' to the RidgeClassifierCV constructor and ensure it is passed correctly to the superclass constructor.",
            "instructions": "Add 'store_cv_values' to the RidgeClassifierCV constructor and ensure it is passed to the superclass constructor."
          },
          "output": {
            "span_id": "RidgeClassifierCV.__init__",
            "end_line": 1340,
            "file_path": "sklearn/linear_model/ridge.py",
            "start_line": 1335,
            "instructions": "Add 'store_cv_values' to the RidgeClassifierCV constructor and ensure it is passed to the superclass constructor."
          },
          "input_tokens": 2922,
          "output_tokens": 172,
          "retry_message": null,
          "completion_cost": 0.011346
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "RidgeClassifierCV.__init__",
        "end_line": 1340,
        "file_path": "sklearn/linear_model/ridge.py",
        "max_tokens": 1000,
        "start_line": 1335,
        "temperature": 1.6,
        "instructions": "Add 'store_cv_values' to the RidgeClassifierCV constructor and ensure it is passed to the superclass constructor.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\n    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n                 normalize=False, scoring=None, cv=None, class_weight=None,\n                 store_cv_values=False):\n        super(RidgeClassifierCV, self).__init__(\n            alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n        self.class_weight = class_weight\n</replace>"
          },
          "output": {
            "diff": "--- sklearn/linear_model/ridge.py\n+++ sklearn/linear_model/ridge.py\n@@ -1333,10 +1333,11 @@\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n-            scoring=scoring, cv=cv)\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n         self.class_weight = class_weight\n \n     def fit(self, X, y, sample_weight=None):\n",
            "message": "Applied the change to sklearn/linear_model/ridge.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 4562,
          "output_tokens": 139,
          "retry_message": null,
          "completion_cost": 0.015771
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sklearn/linear_model/ridge.py\n+++ sklearn/linear_model/ridge.py\n@@ -1333,10 +1333,11 @@\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n-            scoring=scoring, cv=cv)\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n         self.class_weight = class_weight\n \n     def fit(self, X, y, sample_weight=None):\n",
        "model": "deepseek-coder",
        "message": "Applied the change to sklearn/linear_model/ridge.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue has been resolved by adding the 'store_cv_values' parameter to the RidgeClassifierCV constructor and ensuring it is passed correctly to the superclass constructor.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The change has been successfully applied. The 'store_cv_values' parameter has been added to the RidgeClassifierCV constructor and passed to the superclass constructor. This resolves the TypeError reported when attempting to use the 'store_cv_values' parameter.",
            "instructions": null
          },
          "output": {
            "message": "The issue has been resolved by adding the 'store_cv_values' parameter to the RidgeClassifierCV constructor and ensuring it is passed correctly to the superclass constructor."
          },
          "input_tokens": 3409,
          "output_tokens": 150,
          "retry_message": null,
          "completion_cost": 0.012477
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue has been resolved by adding the 'store_cv_values' parameter to the RidgeClassifierCV constructor and ensuring it is passed correctly to the superclass constructor.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "linear_model.RidgeClassifierCV's Parameter store_cv_values issue\n#### Description\r\nParameter store_cv_values error on sklearn.linear_model.RidgeClassifierCV\r\n\r\n#### Steps/Code to Reproduce\r\nimport numpy as np\r\nfrom sklearn import linear_model as lm\r\n\r\n#test database\r\nn = 100\r\nx = np.random.randn(n, 30)\r\ny = np.random.normal(size = n)\r\n\r\nrr = lm.RidgeClassifierCV(alphas = np.arange(0.1, 1000, 0.1), normalize = True, \r\n                                         store_cv_values = True).fit(x, y)\r\n\r\n#### Expected Results\r\nExpected to get the usual ridge regression model output, keeping the cross validation predictions as attribute.\r\n\r\n#### Actual Results\r\nTypeError: __init__() got an unexpected keyword argument 'store_cv_values'\r\n\r\nlm.RidgeClassifierCV actually has no parameter store_cv_values, even though some attributes depends on it.\r\n\r\n#### Versions\r\nWindows-10-10.0.14393-SP0\r\nPython 3.6.3 |Anaconda, Inc.| (default, Oct 15 2017, 03:27:45) [MSC v.1900 64 bit (AMD64)]\r\nNumPy 1.13.3\r\nSciPy 0.19.1\r\nScikit-Learn 0.19.1\r\n\r\n\nAdd store_cv_values boolean flag support to RidgeClassifierCV\nAdd store_cv_values support to RidgeClassifierCV - documentation claims that usage of this flag is possible:\n\n> cv_values_ : array, shape = [n_samples, n_alphas] or shape = [n_samples, n_responses, n_alphas], optional\n> Cross-validation values for each alpha (if **store_cv_values**=True and `cv=None`).\n\nWhile actually usage of this flag gives \n\n> TypeError: **init**() got an unexpected keyword argument 'store_cv_values'\n\n"
}