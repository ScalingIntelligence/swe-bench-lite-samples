{
  "info": {
    "duration": 141.22384214401245,
    "submission": "diff --git a/sklearn/linear_model/ridge.py b/sklearn/linear_model/ridge.py\nindex 911c74ae3..3036c231e 100644\n--- a/sklearn/linear_model/ridge.py\n+++ b/sklearn/linear_model/ridge.py\n@@ -1333,10 +1333,11 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n-            scoring=scoring, cv=cv)\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n         self.class_weight = class_weight\n \n     def fit(self, X, y, sample_weight=None):\n@@ -1373,7 +1374,7 @@ class RidgeClassifierCV(LinearClassifierMixin, _BaseRidgeCV):\n             sample_weight = (sample_weight *\n                              compute_sample_weight(self.class_weight, y))\n \n-        _BaseRidgeCV.fit(self, X, Y, sample_weight=sample_weight)\n+        _BaseRidgeCV.fit(self, X, Y, sample_weight=sample_weight, store_cv_values=self.store_cv_values)\n         return self\n \n     @property\n",
    "total_cost": 0.135744,
    "instance_id": "scikit-learn__scikit-learn-10297",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue is related to the 'store_cv_values' parameter in the 'RidgeClassifierCV' class of the sklearn.linear_model module. The documentation suggests that this parameter should be available, but it is not recognized at runtime, causing a TypeError. To resolve this, we need to identify where the 'RidgeClassifierCV' class is defined and check its __init__ method to see if 'store_cv_values' is indeed missing or misimplemented.",
            "search_requests": [
              {
                "query": "RidgeClassifierCV store_cv_values",
                "class_names": [
                  "RidgeClassifierCV"
                ],
                "code_snippet": "def fit(self, X, y, sample_weight=None):",
                "file_pattern": "sklearn/linear_model/ridge.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 1,
                "tokens": 802,
                "span_id": "RidgeClassifierCV",
                "file_path": "sklearn/linear_model/ridge.py"
              },
              {
                "rank": 1,
                "tokens": 263,
                "span_id": "RidgeClassifierCV.fit",
                "file_path": "sklearn/linear_model/ridge.py"
              },
              {
                "rank": 1,
                "tokens": 17,
                "span_id": "RidgeClassifierCV.classes_",
                "file_path": "sklearn/linear_model/ridge.py"
              }
            ],
            "search_requests": [
              {
                "query": "RidgeClassifierCV store_cv_values",
                "class_names": [
                  "RidgeClassifierCV"
                ],
                "code_snippet": "def fit(self, X, y, sample_weight=None):",
                "file_pattern": "sklearn/linear_model/ridge.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 3662,
          "output_tokens": 227,
          "retry_message": null,
          "completion_cost": 0.014391000000000001
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 1,
            "tokens": 802,
            "span_id": "RidgeClassifierCV",
            "file_path": "sklearn/linear_model/ridge.py"
          },
          {
            "rank": 1,
            "tokens": 263,
            "span_id": "RidgeClassifierCV.fit",
            "file_path": "sklearn/linear_model/ridge.py"
          },
          {
            "rank": 1,
            "tokens": 17,
            "span_id": "RidgeClassifierCV.classes_",
            "file_path": "sklearn/linear_model/ridge.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue concerns the 'store_cv_values' parameter in the 'RidgeClassifierCV' class. This parameter is documented to store cross-validation values but is not recognized by the implementation, leading to a TypeError. The analysis of the provided code reveals that the 'RidgeClassifierCV' class indeed does not have a 'store_cv_values' parameter in its initialization method, nor does it handle this parameter in its fit method. The '_BaseRidgeCV' class, which 'RidgeClassifierCV' inherits from, does have this parameter, but it is not passed through in the 'RidgeClassifierCV' initialization. This discrepancy likely explains the error. A potential solution to address this issue would involve adding the 'store_cv_values' parameter to the 'RidgeClassifierCV' class and ensuring it is appropriately passed to the 'fit' method.",
            "identified_spans": [
              {
                "span_ids": [
                  "_BaseRidgeCV",
                  "_BaseRidgeCV.fit",
                  "RidgeClassifierCV",
                  "RidgeClassifierCV.__init__",
                  "RidgeClassifierCV.fit"
                ],
                "file_path": "sklearn/linear_model/ridge.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 2479,
          "output_tokens": 298,
          "retry_message": null,
          "completion_cost": 0.011907000000000001
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The file context provided is the 'ridge.py' file within the 'sklearn.linear_model' module. The 'RidgeClassifierCV' class does not include the 'store_cv_values' parameter in its __init__ method, which is why the reported issue of a TypeError occurs when trying to use this parameter. The parent class '_BaseRidgeCV' does have this parameter, but it is not passed or handled in the 'RidgeClassifierCV' class's __init__ method. This indicates that the file context does not include the relevant code to resolve the issue directly. However, it identifies the specific class and method where the modification is needed, suggesting that with further inspection or modification of the 'RidgeClassifierCV' class, the issue could be resolved.",
            "search_suggestions": "Further investigation into how parameters are inherited and handled in the 'RidgeClassifierCV' class from its parent '_BaseRidgeCV' class would be necessary. Specifically, look into why 'store_cv_values' is not being accepted in the 'RidgeClassifierCV' initialization and whether it is being properly passed or overridden in the class hierarchy. Additionally, examining the 'fit' method in 'RidgeClassifierCV' and '_BaseRidgeCV' to ensure 'store_cv_values' is being appropriately utilized if it were to be included in 'RidgeClassifierCV' might also provide insights."
          },
          "output": {
            "message": "Further investigation into how parameters are inherited and handled in the 'RidgeClassifierCV' class from its parent '_BaseRidgeCV' class would be necessary. Specifically, look into why 'store_cv_values' is not being accepted in the 'RidgeClassifierCV' initialization and whether it is being properly passed or overridden in the class hierarchy. Additionally, examining the 'fit' method in 'RidgeClassifierCV' and '_BaseRidgeCV' to ensure 'store_cv_values' is being appropriately utilized if it were to be included in 'RidgeClassifierCV' might also provide insights."
          },
          "input_tokens": 2471,
          "output_tokens": 331,
          "retry_message": null,
          "completion_cost": 0.012378
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Further investigation into how parameters are inherited and handled in the 'RidgeClassifierCV' class from its parent '_BaseRidgeCV' class would be necessary. Specifically, look into why 'store_cv_values' is not being accepted in the 'RidgeClassifierCV' initialization and whether it is being properly passed or overridden in the class hierarchy. Additionally, examining the 'fit' method in 'RidgeClassifierCV' and '_BaseRidgeCV' to ensure 'store_cv_values' is being appropriately utilized if it were to be included in 'RidgeClassifierCV' might also provide insights.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "scratch_pad": "The investigation revealed that the 'store_cv_values' parameter is actually defined in the '_BaseRidgeCV' parent class but not in the 'RidgeClassifierCV' class. This discrepancy explains why the 'store_cv_values' parameter is not recognized when used with 'RidgeClassifierCV'. To fix this, the 'RidgeClassifierCV' class needs to include 'store_cv_values' in its __init__ method, ensuring it correctly passes this parameter to its parent class '_BaseRidgeCV'. Additionally, the 'fit' method for 'RidgeClassifierCV' should be checked to ensure it appropriately handles the 'store_cv_values' parameter if it is enabled.",
            "search_requests": []
          },
          "output": {
            "message": "The investigation revealed that the 'store_cv_values' parameter is actually defined in the '_BaseRidgeCV' parent class but not in the 'RidgeClassifierCV' class. This discrepancy explains why the 'store_cv_values' parameter is not recognized when used with 'RidgeClassifierCV'. To fix this, the 'RidgeClassifierCV' class needs to include 'store_cv_values' in its __init__ method, ensuring it correctly passes this parameter to its parent class '_BaseRidgeCV'. Additionally, the 'fit' method for 'RidgeClassifierCV' should be checked to ensure it appropriately handles the 'store_cv_values' parameter if it is enabled."
          },
          "input_tokens": 5107,
          "output_tokens": 178,
          "retry_message": null,
          "completion_cost": 0.017991
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "The investigation revealed that the 'store_cv_values' parameter is actually defined in the '_BaseRidgeCV' parent class but not in the 'RidgeClassifierCV' class. This discrepancy explains why the 'store_cv_values' parameter is not recognized when used with 'RidgeClassifierCV'. To fix this, the 'RidgeClassifierCV' class needs to include 'store_cv_values' in its __init__ method, ensuring it correctly passes this parameter to its parent class '_BaseRidgeCV'. Additionally, the 'fit' method for 'RidgeClassifierCV' should be checked to ensure it appropriately handles the 'store_cv_values' parameter if it is enabled.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "RidgeClassifierCV.__init__",
            "file_path": "sklearn/linear_model/ridge.py",
            "scratch_pad": "The 'store_cv_values' parameter is missing in the 'RidgeClassifierCV' class's __init__ method. This discrepancy is causing the reported error. To resolve this, we need to add 'store_cv_values' as a parameter in the '__init__' method of 'RidgeClassifierCV' and pass it to the parent class '_BaseRidgeCV'.",
            "instructions": "Add 'store_cv_values' as a parameter in the '__init__' method of 'RidgeClassifierCV' and pass it to the parent class '_BaseRidgeCV'."
          },
          "output": {
            "span_id": "RidgeClassifierCV.__init__",
            "end_line": 1340,
            "file_path": "sklearn/linear_model/ridge.py",
            "start_line": 1335,
            "instructions": "Add 'store_cv_values' as a parameter in the '__init__' method of 'RidgeClassifierCV' and pass it to the parent class '_BaseRidgeCV'."
          },
          "input_tokens": 3057,
          "output_tokens": 189,
          "retry_message": null,
          "completion_cost": 0.012006000000000001
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "RidgeClassifierCV.__init__",
        "end_line": 1340,
        "file_path": "sklearn/linear_model/ridge.py",
        "max_tokens": 1000,
        "start_line": 1335,
        "temperature": 1.6,
        "instructions": "Add 'store_cv_values' as a parameter in the '__init__' method of 'RidgeClassifierCV' and pass it to the parent class '_BaseRidgeCV'.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```\n<replace>\n    def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n                 normalize=False, scoring=None, cv=None, class_weight=None,\n                 store_cv_values=False):\n        super(RidgeClassifierCV, self).__init__(\n            alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n        self.class_weight = class_weight\n</replace>"
          },
          "output": {
            "diff": "--- sklearn/linear_model/ridge.py\n+++ sklearn/linear_model/ridge.py\n@@ -1333,10 +1333,11 @@\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n-            scoring=scoring, cv=cv)\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n         self.class_weight = class_weight\n \n     def fit(self, X, y, sample_weight=None):\n",
            "message": "Applied the change to sklearn/linear_model/ridge.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 5076,
          "output_tokens": 138,
          "retry_message": null,
          "completion_cost": 0.017298
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sklearn/linear_model/ridge.py\n+++ sklearn/linear_model/ridge.py\n@@ -1333,10 +1333,11 @@\n     advantage of the multi-variate response support in Ridge.\n     \"\"\"\n     def __init__(self, alphas=(0.1, 1.0, 10.0), fit_intercept=True,\n-                 normalize=False, scoring=None, cv=None, class_weight=None):\n+                 normalize=False, scoring=None, cv=None, class_weight=None,\n+                 store_cv_values=False):\n         super(RidgeClassifierCV, self).__init__(\n             alphas=alphas, fit_intercept=fit_intercept, normalize=normalize,\n-            scoring=scoring, cv=cv)\n+            scoring=scoring, cv=cv, store_cv_values=store_cv_values)\n         self.class_weight = class_weight\n \n     def fit(self, X, y, sample_weight=None):\n",
        "model": "deepseek-coder",
        "message": "Applied the change to sklearn/linear_model/ridge.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "RidgeClassifierCV.fit",
            "file_path": "sklearn/linear_model/ridge.py",
            "scratch_pad": "The initial change to add 'store_cv_values' to the '__init__' method of 'RidgeClassifierCV' was successful. Now, we need to ensure that the 'fit' method of 'RidgeClassifierCV' also handles the 'store_cv_values' parameter appropriately by passing it directly to the parent class '_BaseRidgeCV'.",
            "instructions": "Modify the 'fit' method of 'RidgeClassifierCV' to ensure it handles and passes the 'store_cv_values' parameter correctly to the '_BaseRidgeCV' class."
          },
          "output": {
            "span_id": "RidgeClassifierCV.fit",
            "end_line": 1378,
            "file_path": "sklearn/linear_model/ridge.py",
            "start_line": 1343,
            "instructions": "Modify the 'fit' method of 'RidgeClassifierCV' to ensure it handles and passes the 'store_cv_values' parameter correctly to the '_BaseRidgeCV' class."
          },
          "input_tokens": 3573,
          "output_tokens": 195,
          "retry_message": null,
          "completion_cost": 0.013644000000000002
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "RidgeClassifierCV.fit",
        "end_line": 1378,
        "file_path": "sklearn/linear_model/ridge.py",
        "max_tokens": 1000,
        "start_line": 1343,
        "temperature": 1.6,
        "instructions": "Modify the 'fit' method of 'RidgeClassifierCV' to ensure it handles and passes the 'store_cv_values' parameter correctly to the '_BaseRidgeCV' class.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```python\n<replace>\n    def fit(self, X, y, sample_weight=None):\n        \"\"\"Fit the ridge classifier.\n\n        Parameters\n        ----------\n        X : array-like, shape (n_samples, n_features)\n            Training vectors, where n_samples is the number of samples\n            and n_features is the number of features.\n\n        y : array-like, shape (n_samples,)\n            Target values. Will be cast to X's dtype if necessary\n\n        sample_weight : float or numpy array of shape (n_samples,)\n            Sample weight.\n\n        Returns\n        -------\n        self : object\n        \"\"\"\n        check_X_y(X, y, accept_sparse=['csr', 'csc', 'coo'],\n                  multi_output=True)\n\n        self._label_binarizer = LabelBinarizer(pos_label=1, neg_label=-1)\n        Y = self._label_binarizer.fit_transform(y)\n        if not self._label_binarizer.y_type_.startswith('multilabel'):\n            y = column_or_1d(y, warn=True)\n\n        if self.class_weight:\n            if sample_weight is None:\n                sample_weight = 1.\n            # modify the sample weights with the corresponding class weight\n            sample_weight = (sample_weight *\n                             compute_sample_weight(self.class_weight, y))\n\n        _BaseRidgeCV.fit(self, X, Y, sample_weight=sample_weight, store_cv_values=self.store_cv_values)\n        return self\n</replace>"
          },
          "output": {
            "diff": "--- sklearn/linear_model/ridge.py\n+++ sklearn/linear_model/ridge.py\n@@ -1374,7 +1374,7 @@\n             sample_weight = (sample_weight *\n                              compute_sample_weight(self.class_weight, y))\n \n-        _BaseRidgeCV.fit(self, X, Y, sample_weight=sample_weight)\n+        _BaseRidgeCV.fit(self, X, Y, sample_weight=sample_weight, store_cv_values=self.store_cv_values)\n         return self\n \n     @property\n",
            "message": "Applied the change to sklearn/linear_model/ridge.py.\n\n<scratch_pad>\n```python\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 5349,
          "output_tokens": 381,
          "retry_message": null,
          "completion_cost": 0.021762
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sklearn/linear_model/ridge.py\n+++ sklearn/linear_model/ridge.py\n@@ -1374,7 +1374,7 @@\n             sample_weight = (sample_weight *\n                              compute_sample_weight(self.class_weight, y))\n \n-        _BaseRidgeCV.fit(self, X, Y, sample_weight=sample_weight)\n+        _BaseRidgeCV.fit(self, X, Y, sample_weight=sample_weight, store_cv_values=self.store_cv_values)\n         return self\n \n     @property\n",
        "model": "deepseek-coder",
        "message": "Applied the change to sklearn/linear_model/ridge.py.\n\n<scratch_pad>\n```python\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The changes have been applied as required. 'store_cv_values' is now correctly handled in both the '__init__' and 'fit' methods of 'RidgeClassifierCV', ensuring compatibility with its usage as intended.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The second change to ensure the 'fit' method of 'RidgeClassifierCV' handles and passes the 'store_cv_values' parameter correctly to the '_BaseRidgeCV' class was successful. This completes the necessary adjustments to resolve the issue reported.",
            "instructions": null
          },
          "output": {
            "message": "The changes have been applied as required. 'store_cv_values' is now correctly handled in both the '__init__' and 'fit' methods of 'RidgeClassifierCV', ensuring compatibility with its usage as intended."
          },
          "input_tokens": 3974,
          "output_tokens": 163,
          "retry_message": null,
          "completion_cost": 0.014367000000000001
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The changes have been applied as required. 'store_cv_values' is now correctly handled in both the '__init__' and 'fit' methods of 'RidgeClassifierCV', ensuring compatibility with its usage as intended.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "linear_model.RidgeClassifierCV's Parameter store_cv_values issue\n#### Description\r\nParameter store_cv_values error on sklearn.linear_model.RidgeClassifierCV\r\n\r\n#### Steps/Code to Reproduce\r\nimport numpy as np\r\nfrom sklearn import linear_model as lm\r\n\r\n#test database\r\nn = 100\r\nx = np.random.randn(n, 30)\r\ny = np.random.normal(size = n)\r\n\r\nrr = lm.RidgeClassifierCV(alphas = np.arange(0.1, 1000, 0.1), normalize = True, \r\n                                         store_cv_values = True).fit(x, y)\r\n\r\n#### Expected Results\r\nExpected to get the usual ridge regression model output, keeping the cross validation predictions as attribute.\r\n\r\n#### Actual Results\r\nTypeError: __init__() got an unexpected keyword argument 'store_cv_values'\r\n\r\nlm.RidgeClassifierCV actually has no parameter store_cv_values, even though some attributes depends on it.\r\n\r\n#### Versions\r\nWindows-10-10.0.14393-SP0\r\nPython 3.6.3 |Anaconda, Inc.| (default, Oct 15 2017, 03:27:45) [MSC v.1900 64 bit (AMD64)]\r\nNumPy 1.13.3\r\nSciPy 0.19.1\r\nScikit-Learn 0.19.1\r\n\r\n\nAdd store_cv_values boolean flag support to RidgeClassifierCV\nAdd store_cv_values support to RidgeClassifierCV - documentation claims that usage of this flag is possible:\n\n> cv_values_ : array, shape = [n_samples, n_alphas] or shape = [n_samples, n_responses, n_alphas], optional\n> Cross-validation values for each alpha (if **store_cv_values**=True and `cv=None`).\n\nWhile actually usage of this flag gives \n\n> TypeError: **init**() got an unexpected keyword argument 'store_cv_values'\n\n"
}