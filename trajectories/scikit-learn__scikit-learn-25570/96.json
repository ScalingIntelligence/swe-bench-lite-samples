{
  "info": {
    "duration": 189.60981011390686,
    "submission": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex a26145117..0213d2b19 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -391,8 +391,6 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n                     ).set_output(transform=output_config[\"dense\"])\n                 elif trans == \"drop\":\n                     continue\n-                elif _is_empty_column_selection(columns):\n-                    continue\n \n             if column_as_strings:\n                 # Convert all columns to using their string labels\n",
    "total_cost": 0.117711,
    "instance_id": "scikit-learn__scikit-learn-25570",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue pertains to the ColumnTransformer when using pandas output and encountering problems with transformers that apply to 0 features. The error occurs due to steps with 0 features not being fitted and thus not appearing in `self._iter(fitted=True)`, causing issues in `_add_prefix_for_feature_names_out`. Focusing on the `ColumnTransformer` class and related functions within the `sklearn/compose/_column_transformer.py` file is crucial to debug and resolve this issue.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "ColumnTransformer"
                ],
                "code_snippet": null,
                "file_pattern": null,
                "function_names": [
                  "_iter",
                  "_add_prefix_for_feature_names_out"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 425,
                "span_id": "ColumnTransformer._iter",
                "file_path": "sklearn/compose/_column_transformer.py"
              },
              {
                "rank": 0,
                "tokens": 371,
                "span_id": "ColumnTransformer._add_prefix_for_feature_names_out",
                "file_path": "sklearn/compose/_column_transformer.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "ColumnTransformer"
                ],
                "code_snippet": null,
                "file_pattern": null,
                "function_names": [
                  "_iter",
                  "_add_prefix_for_feature_names_out"
                ]
              }
            ]
          },
          "input_tokens": 4937,
          "output_tokens": 178,
          "retry_message": null,
          "completion_cost": 0.017481
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 425,
            "span_id": "ColumnTransformer._iter",
            "file_path": "sklearn/compose/_column_transformer.py"
          },
          {
            "rank": 0,
            "tokens": 371,
            "span_id": "ColumnTransformer._add_prefix_for_feature_names_out",
            "file_path": "sklearn/compose/_column_transformer.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves the `ColumnTransformer` class not handling transformers with 0 features well when using 'pandas' as output. The problem occurs because transformers with 0 features are not fitted, leading to an error when trying to add prefixes to feature names. The traceback indicates a problem in `_column_transformer.py` at line 862, where the error arises due to a mismatch in expected axis length. The relevant code spans provided in the search results include the '__init__' method of the `ColumnTransformer` class, the '_iter' method, and the '_add_prefix_for_feature_names_out' function. These methods and function appear relevant as they deal with the initialization of the transformer, iteration over fitted transformers, and handling of feature names output, respectively. Based on the issue description, these code spans are likely to be directly involved in the problem. Therefore, these spans are marked as relevant.",
            "identified_spans": [
              {
                "span_ids": [
                  "ColumnTransformer",
                  "ColumnTransformer.__init__",
                  "ColumnTransformer._iter",
                  "ColumnTransformer._add_prefix_for_feature_names_out"
                ],
                "file_path": "sklearn/compose/_column_transformer.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4553,
          "output_tokens": 298,
          "retry_message": null,
          "completion_cost": 0.018129
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The provided file context includes the ColumnTransformer class and related methods directly related to the issue. Specifically, the _iter method is identified as a key function where steps with 0 features are not fitted, which seems critical to resolving the issue. Additionally, the _add_prefix_for_feature_names_out method is highlighted as being in the line number mentioned in the error traceback (l.859 in the error message, corresponding to the _hstack method in the file context). Therefore, the relevant class and methods for debugging the issue are clearly provided. Other functionalities such as transformer selection, handling of 'passthrough' and 'drop' transformations, and features name handling are also present, indicating that all relevant code for resolving the issue have been identified.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 4305,
          "output_tokens": 196,
          "retry_message": null,
          "completion_cost": 0.015855
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "ColumnTransformer._iter",
            "file_path": "sklearn/compose/_column_transformer.py",
            "scratch_pad": "The issue seems to be that when a transformer has no features, it doesn't appear in the fitted transformers list, causing issues with the column names output logic. We need to ensure that even transformers without features are included in the iteration logic when generating the output column names.",
            "instructions": "Modify the '_iter' method to ensure that transformers with no features are still included in the iteration when 'fitted' is True. Specifically, exclude the check for '_is_empty_column_selection(columns)' when 'fitted' is True to ensure that the transformer is included in the iteration."
          },
          "output": {
            "span_id": "ColumnTransformer._iter",
            "end_line": 408,
            "file_path": "sklearn/compose/_column_transformer.py",
            "start_line": 347,
            "instructions": "Modify the '_iter' method to ensure that transformers with no features are still included in the iteration when 'fitted' is True. Specifically, exclude the check for '_is_empty_column_selection(columns)' when 'fitted' is True to ensure that the transformer is included in the iteration."
          },
          "input_tokens": 4524,
          "output_tokens": 177,
          "retry_message": null,
          "completion_cost": 0.016227000000000002
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "ColumnTransformer._iter",
        "end_line": 408,
        "file_path": "sklearn/compose/_column_transformer.py",
        "max_tokens": 1000,
        "start_line": 347,
        "temperature": 1.6,
        "instructions": "Modify the '_iter' method to ensure that transformers with no features are still included in the iteration when 'fitted' is True. Specifically, exclude the check for '_is_empty_column_selection(columns)' when 'fitted' is True to ensure that the transformer is included in the iteration.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n    def _iter(self, fitted=False, replace_strings=False, column_as_strings=False):\n        \"\"\"\n        Generate (name, trans, column, weight) tuples.\n\n        If fitted=True, use the fitted transformers, else use the\n        user specified transformers updated with converted column names\n        and potentially appended with transformer for remainder.\n\n        \"\"\"\n        if fitted:\n            if replace_strings:\n                # Replace \"passthrough\" with the fitted version in\n                # _name_to_fitted_passthrough\n                def replace_passthrough(name, trans, columns):\n                    if name not in self._name_to_fitted_passthrough:\n                        return name, trans, columns\n                    return name, self._name_to_fitted_passthrough[name], columns\n\n                transformers = [\n                    replace_passthrough(*trans) for trans in self.transformers_\n                ]\n            else:\n                transformers = self.transformers_\n        else:\n            # interleave the validated column specifiers\n            transformers = [\n                (name, trans, column)\n                for (name, trans, _), column in zip(self.transformers, self._columns)\n            ]\n            # add transformer tuple for remainder\n            if self._remainder[2]:\n                transformers = chain(transformers, [self._remainder])\n        get_weight = (self.transformer_weights or {}).get\n\n        output_config = _get_output_config(\"transform\", self)\n        for name, trans, columns in transformers:\n            if replace_strings:\n                # replace 'passthrough' with identity transformer and\n                # skip in case of 'drop'\n                if trans == \"passthrough\":\n                    trans = FunctionTransformer(\n                        accept_sparse=True,\n                        check_inverse=False,\n                        feature_names_out=\"one-to-one\",\n                    ).set_output(transform=output_config[\"dense\"])\n                elif trans == \"drop\":\n                    continue\n\n            if column_as_strings:\n                # Convert all columns to using their string labels\n                columns_is_scalar = np.isscalar(columns)\n\n                indices = self._transformer_to_input_indices[name]\n                columns = self.feature_names_in_[indices]\n\n                if columns_is_scalar:\n                    # selection is done with one dimension\n                    columns = columns[0]\n\n            yield (name, trans, columns, get_weight(name))\n</replace>"
          },
          "output": {
            "diff": "--- sklearn/compose/_column_transformer.py\n+++ sklearn/compose/_column_transformer.py\n@@ -390,8 +390,6 @@\n                         feature_names_out=\"one-to-one\",\n                     ).set_output(transform=output_config[\"dense\"])\n                 elif trans == \"drop\":\n-                    continue\n-                elif _is_empty_column_selection(columns):\n                     continue\n \n             if column_as_strings:\n",
            "message": "Applied the change to sklearn/compose/_column_transformer.py.",
            "verification_errors": []
          },
          "input_tokens": 7865,
          "output_tokens": 574,
          "retry_message": null,
          "completion_cost": 0.032205
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sklearn/compose/_column_transformer.py\n+++ sklearn/compose/_column_transformer.py\n@@ -390,8 +390,6 @@\n                         feature_names_out=\"one-to-one\",\n                     ).set_output(transform=output_config[\"dense\"])\n                 elif trans == \"drop\":\n-                    continue\n-                elif _is_empty_column_selection(columns):\n                     continue\n \n             if column_as_strings:\n",
        "model": "deepseek-coder",
        "message": "Applied the change to sklearn/compose/_column_transformer.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "ColumnTransformer._iter",
            "file_path": "sklearn/compose/_column_transformer.py",
            "scratch_pad": "The previous change was incorrectly applied. The goal is to ensure that transformers with no features are still included in the iteration logic when 'fitted' is True. The previous change unintentionally skipped a crucial condition check. We need to refine the logic to correctly handle empty column selections during the iteration without affecting other conditions.",
            "instructions": "Modify the '_iter' method to ensure that transformers with no features are still included in the iteration when 'fitted' is True. Specifically, we should exclude the check for '_is_empty_column_selection(columns)' when 'fitted' is True to ensure that the transformer is included in the iteration, but only if it has been fitted. We need to introduce a new condition to handle this scenario appropriately."
          },
          "output": {
            "span_id": "ColumnTransformer._iter",
            "end_line": 406,
            "file_path": "sklearn/compose/_column_transformer.py",
            "start_line": 347,
            "instructions": "Modify the '_iter' method to ensure that transformers with no features are still included in the iteration when 'fitted' is True. Specifically, we should exclude the check for '_is_empty_column_selection(columns)' when 'fitted' is True to ensure that the transformer is included in the iteration, but only if it has been fitted. We need to introduce a new condition to handle this scenario appropriately."
          },
          "input_tokens": 4838,
          "output_tokens": 220,
          "retry_message": null,
          "completion_cost": 0.017814
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "ColumnTransformer._iter",
        "end_line": 406,
        "file_path": "sklearn/compose/_column_transformer.py",
        "max_tokens": 1000,
        "start_line": 347,
        "temperature": 1.6,
        "instructions": "Modify the '_iter' method to ensure that transformers with no features are still included in the iteration when 'fitted' is True. Specifically, we should exclude the check for '_is_empty_column_selection(columns)' when 'fitted' is True to ensure that the transformer is included in the iteration, but only if it has been fitted. We need to introduce a new condition to handle this scenario appropriately.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```json\n{\n  \"replace\": \"    def _iter(self, fitted=False, replace_strings=False, column_as_strings=False):\\n        \\\"\\\"\\\"\\n        Generate (name, trans, column, weight) tuples.\\n\\n        If fitted=True, use the fitted transformers, else use the\\n        user specified transformers updated with converted column names\\n        and potentially appended with transformer for remainder.\\n\\n        \\\"\\\"\\\"\\n        if fitted:\\n            if replace_strings:\\n                # Replace \\\"passthrough\\\" with the fitted version in\\n                # _name_to_fitted_passthrough\\n                def replace_passthrough(name, trans, columns):\\n                    if name not in self._name_to_fitted_passthrough:\\n                        return name, trans, columns\\n                    return name, self._name_to_fitted_passthrough[name], columns\\n\\n                transformers = [\\n                    replace_passthrough(*trans) for trans in self.transformers_\\n                ]\\n            else:\\n                transformers = self.transformers_\\n        else:\\n            # interleave the validated column specifiers\\n            transformers = [\\n                (name, trans, column)\\n                for (name, trans, _), column in zip(self.transformers, self._columns)\\n            ]\\n            # add transformer tuple for remainder\\n            if self._remainder[2]:\\n                transformers = chain(transformers, [self._remainder])\\n        get_weight = (self.transformer_weights or {}).get\\n\\n        output_config = _get_output_config(\\\"transform\\\", self)\\n        for name, trans, columns in transformers:\\n            if replace_strings:\\n                # replace 'passthrough' with identity transformer and\\n                # skip in case of 'drop'\\n                if trans == \\\"passthrough\\\":\\n                    trans = FunctionTransformer(\\n                        accept_sparse=True,\\n                        check_inverse=False,\\n                        feature_names_out=\\\"one-to-one\\\",\\n                    ).set_output(transform=output_config[\\\"dense\\\"])\\n                elif trans == \\\"drop\\\":\\n                    continue\\n\\n            if column_as_strings:\\n                # Convert all columns to using their string labels\\n                columns_is_scalar = np.isscalar(columns)\\n\\n                indices = self._transformer_to_input_indices[name]\\n                columns = self.feature_names_in_[indices]\\n\\n                if columns_is_scalar:\\n                    # selection is done with one dimension\\n                    columns = columns[0]\\n\\n            if fitted and self._is_empty_column_selection(columns):\\n                continue\\n\\n            yield (name, trans, columns, get_weight(name))\"\n}\n```"
          },
          "output": null,
          "input_tokens": 7854,
          "output_tokens": 641,
          "retry_message": "You did not provide any code in the replace tag. If you want to reject the instructions, use the reject function.",
          "completion_cost": 0.033177
        },
        {
          "action": {
            "content": "```json\n{\n  \"reject\": \"The provided instructions require modifying the '_iter' method to include transformers with no features when 'fitted' is True, but no specific details are given on how to implement the condition. The instructions also mention introducing a new condition without specifying what it should check or how it should be implemented. Without clear details on the condition to be added, I cannot proceed with the modification.\"\n}\n```"
          },
          "output": null,
          "input_tokens": 8526,
          "output_tokens": 88,
          "retry_message": "You did not provide any code in the replace tag. If you want to reject the instructions, use the reject function.",
          "completion_cost": 0.026898
        },
        {
          "action": {
            "content": "```json\n{\n  \"reject\": \"The instructions require modifying the '_iter' method to include transformers with no features when 'fitted' is True, but do not provide specific details on how to implement the condition for excluding the check for '_is_empty_column_selection(columns)' when 'fitted' is True or how to introduce a new condition to handle this scenario appropriately. Without clear details on the condition to be added, I cannot proceed with the modification.\"\n}\n```"
          },
          "output": null,
          "input_tokens": 8645,
          "output_tokens": 100,
          "retry_message": "You did not provide any code in the replace tag. If you want to reject the instructions, use the reject function.",
          "completion_cost": 0.027435
        }
      ]
    }
  ],
  "initial_message": "ColumnTransformer with pandas output can't handle transformers with no features\n### Describe the bug\r\n\r\nHi,\r\n\r\nColumnTransformer doesn't deal well with transformers that apply to 0 features (categorical_features in the example below) when using \"pandas\" as output. It seems steps with 0 features are not fitted, hence don't appear in `self._iter(fitted=True)` (_column_transformer.py l.856) and hence break the input to the `_add_prefix_for_feature_names_out` function (l.859).\r\n\r\n\r\n### Steps/Code to Reproduce\r\n\r\nHere is some code to reproduce the error. If you remove .set_output(transform=\"pandas\") on the line before last, all works fine. If you remove the (\"categorical\", ...) step, it works fine too.\r\n\r\n```python\r\nimport numpy as np\r\nimport pandas as pd\r\nfrom lightgbm import LGBMClassifier\r\nfrom sklearn.compose import ColumnTransformer\r\nfrom sklearn.impute import SimpleImputer\r\nfrom sklearn.pipeline import Pipeline\r\nfrom sklearn.preprocessing import RobustScaler\r\n\r\nX = pd.DataFrame(data=[[1.0, 2.0, 3.0, 4.0], [4, 2, 2, 5]],\r\n                 columns=[\"a\", \"b\", \"c\", \"d\"])\r\ny = np.array([0, 1])\r\ncategorical_features = []\r\nnumerical_features = [\"a\", \"b\", \"c\"]\r\nmodel_preprocessing = (\"preprocessing\",\r\n                       ColumnTransformer([\r\n                           ('categorical', 'passthrough', categorical_features),\r\n                           ('numerical', Pipeline([(\"scaler\", RobustScaler()),\r\n                                                   (\"imputer\", SimpleImputer(strategy=\"median\"))\r\n                                                   ]), numerical_features),\r\n                       ], remainder='drop'))\r\npipeline = Pipeline([model_preprocessing, (\"classifier\", LGBMClassifier())]).set_output(transform=\"pandas\")\r\npipeline.fit(X, y)\r\n```\r\n\r\n### Expected Results\r\n\r\nThe step with no features should be ignored.\r\n\r\n### Actual Results\r\n\r\nHere is the error message:\r\n```pytb\r\nTraceback (most recent call last):\r\n  File \"/home/philippe/workspace/script.py\", line 22, in <module>\r\n    pipeline.fit(X, y)\r\n  File \"/home/philippe/.anaconda3/envs/deleteme/lib/python3.9/site-packages/sklearn/pipeline.py\", line 402, in fit\r\n    Xt = self._fit(X, y, **fit_params_steps)\r\n  File \"/home/philippe/.anaconda3/envs/deleteme/lib/python3.9/site-packages/sklearn/pipeline.py\", line 360, in _fit\r\n    X, fitted_transformer = fit_transform_one_cached(\r\n  File \"/home/philippe/.anaconda3/envs/deleteme/lib/python3.9/site-packages/joblib/memory.py\", line 349, in __call__\r\n    return self.func(*args, **kwargs)\r\n  File \"/home/philippe/.anaconda3/envs/deleteme/lib/python3.9/site-packages/sklearn/pipeline.py\", line 894, in _fit_transform_one\r\n    res = transformer.fit_transform(X, y, **fit_params)\r\n  File \"/home/philippe/.anaconda3/envs/deleteme/lib/python3.9/site-packages/sklearn/utils/_set_output.py\", line 142, in wrapped\r\n    data_to_wrap = f(self, X, *args, **kwargs)\r\n  File \"/home/philippe/.anaconda3/envs/deleteme/lib/python3.9/site-packages/sklearn/compose/_column_transformer.py\", line 750, in fit_transform\r\n    return self._hstack(list(Xs))\r\n  File \"/home/philippe/.anaconda3/envs/deleteme/lib/python3.9/site-packages/sklearn/compose/_column_transformer.py\", line 862, in _hstack\r\n    output.columns = names_out\r\n  File \"/home/philippe/.anaconda3/envs/deleteme/lib/python3.9/site-packages/pandas/core/generic.py\", line 5596, in __setattr__\r\n    return object.__setattr__(self, name, value)\r\n  File \"pandas/_libs/properties.pyx\", line 70, in pandas._libs.properties.AxisProperty.__set__\r\n  File \"/home/philippe/.anaconda3/envs/deleteme/lib/python3.9/site-packages/pandas/core/generic.py\", line 769, in _set_axis\r\n    self._mgr.set_axis(axis, labels)\r\n  File \"/home/philippe/.anaconda3/envs/deleteme/lib/python3.9/site-packages/pandas/core/internals/managers.py\", line 214, in set_axis\r\n    self._validate_set_axis(axis, new_labels)\r\n  File \"/home/philippe/.anaconda3/envs/deleteme/lib/python3.9/site-packages/pandas/core/internals/base.py\", line 69, in _validate_set_axis\r\n    raise ValueError(\r\nValueError: Length mismatch: Expected axis has 3 elements, new values have 0 elements\r\n\r\nProcess finished with exit code 1\r\n```\r\n\r\n### Versions\r\n\r\n```shell\r\nSystem:\r\n    python: 3.9.15 (main, Nov 24 2022, 14:31:59)  [GCC 11.2.0]\r\nexecutable: /home/philippe/.anaconda3/envs/strategy-training/bin/python\r\n   machine: Linux-5.15.0-57-generic-x86_64-with-glibc2.31\r\n\r\nPython dependencies:\r\n      sklearn: 1.2.0\r\n          pip: 22.2.2\r\n   setuptools: 62.3.2\r\n        numpy: 1.23.5\r\n        scipy: 1.9.3\r\n       Cython: None\r\n       pandas: 1.4.1\r\n   matplotlib: 3.6.3\r\n       joblib: 1.2.0\r\nthreadpoolctl: 3.1.0\r\n\r\nBuilt with OpenMP: True\r\n\r\nthreadpoolctl info:\r\n       user_api: openmp\r\n   internal_api: openmp\r\n         prefix: libgomp\r\n       filepath: /home/philippe/.anaconda3/envs/strategy-training/lib/python3.9/site-packages/scikit_learn.libs/libgomp-a34b3233.so.1.0.0\r\n        version: None\r\n    num_threads: 12\r\n\r\n       user_api: blas\r\n   internal_api: openblas\r\n         prefix: libopenblas\r\n       filepath: /home/philippe/.anaconda3/envs/strategy-training/lib/python3.9/site-packages/numpy.libs/libopenblas64_p-r0-742d56dc.3.20.so\r\n        version: 0.3.20\r\nthreading_layer: pthreads\r\n   architecture: Haswell\r\n    num_threads: 12\r\n\r\n       user_api: blas\r\n   internal_api: openblas\r\n         prefix: libopenblas\r\n       filepath: /home/philippe/.anaconda3/envs/strategy-training/lib/python3.9/site-packages/scipy.libs/libopenblasp-r0-41284840.3.18.so\r\n        version: 0.3.18\r\nthreading_layer: pthreads\r\n   architecture: Haswell\r\n    num_threads: 12\r\n```\r\n\n"
}