{
  "info": {
    "duration": 116.04439520835876,
    "submission": "diff --git a/sklearn/compose/_column_transformer.py b/sklearn/compose/_column_transformer.py\nindex a26145117..2b3f3f2d1 100644\n--- a/sklearn/compose/_column_transformer.py\n+++ b/sklearn/compose/_column_transformer.py\n@@ -543,12 +543,19 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         feature_names_out : ndarray of shape (n_features,), dtype=str\n             Transformed feature names.\n         \"\"\"\n+        # Filter out transformers that have empty feature names output\n+        filtered_transformer_with_feature_names_out = [\n+            (name, feature_names_out)\n+            for name, feature_names_out in transformer_with_feature_names_out\n+            if feature_names_out.size > 0\n+        ]\n+\n         if self.verbose_feature_names_out:\n             # Prefix the feature names out with the transformers name\n             names = list(\n                 chain.from_iterable(\n                     (f\"{name}__{i}\" for i in feature_names_out)\n-                    for name, feature_names_out in transformer_with_feature_names_out\n+                    for name, feature_names_out in filtered_transformer_with_feature_names_out\n                 )\n             )\n             return np.asarray(names, dtype=object)\n@@ -556,7 +563,7 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n         # verbose_feature_names_out is False\n         # Check that names are all unique without a prefix\n         feature_names_count = Counter(\n-            chain.from_iterable(s for _, s in transformer_with_feature_names_out)\n+            chain.from_iterable(s for _, s in filtered_transformer_with_feature_names_out)\n         )\n         top_6_overlap = [\n             name for name, count in feature_names_count.most_common(6) if count > 1\n@@ -575,7 +582,7 @@ class ColumnTransformer(TransformerMixin, _BaseComposition):\n             )\n \n         return np.concatenate(\n-            [name for _, name in transformer_with_feature_names_out],\n+            [name for _, name in filtered_transformer_with_feature_names_out],\n         )\n \n     def _update_fitted_transformers(self, transformers):\n",
    "total_cost": 0.131445,
    "instance_id": "scikit-learn__scikit-learn-25570",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves the ColumnTransformer when using 'pandas' as the output and encountering transformers with no features. The error occurs when a step with no features is not properly handled, leading to a ValueError. The traceback indicates that the issue starts at `_column_transformer.py` line 856 and potentially involves the `_hstack` method. To address this, we should focus on the ColumnTransformer class and its methods, particularly those related to handling transformers and their features, such as `_get_feature_name_out_for_transformer` and `_add_prefix_for_feature_names_out`. We should also consider the `fit_transform` and `transform` methods in the context of handling empty feature sets.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "ColumnTransformer"
                ],
                "code_snippet": null,
                "file_pattern": null,
                "function_names": [
                  "fit_transform",
                  "transform",
                  "_hstack",
                  "_add_prefix_for_feature_names_out"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 411,
                "span_id": "ColumnTransformer.fit_transform",
                "file_path": "sklearn/compose/_column_transformer.py"
              },
              {
                "rank": 0,
                "tokens": 414,
                "span_id": "ColumnTransformer.transform",
                "file_path": "sklearn/compose/_column_transformer.py"
              },
              {
                "rank": 0,
                "tokens": 381,
                "span_id": "ColumnTransformer._hstack",
                "file_path": "sklearn/compose/_column_transformer.py"
              },
              {
                "rank": 0,
                "tokens": 371,
                "span_id": "ColumnTransformer._add_prefix_for_feature_names_out",
                "file_path": "sklearn/compose/_column_transformer.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "ColumnTransformer"
                ],
                "code_snippet": null,
                "file_pattern": null,
                "function_names": [
                  "fit_transform",
                  "transform",
                  "_hstack",
                  "_add_prefix_for_feature_names_out"
                ]
              }
            ]
          },
          "input_tokens": 4937,
          "output_tokens": 262,
          "retry_message": null,
          "completion_cost": 0.018741
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 411,
            "span_id": "ColumnTransformer.fit_transform",
            "file_path": "sklearn/compose/_column_transformer.py"
          },
          {
            "rank": 0,
            "tokens": 414,
            "span_id": "ColumnTransformer.transform",
            "file_path": "sklearn/compose/_column_transformer.py"
          },
          {
            "rank": 0,
            "tokens": 381,
            "span_id": "ColumnTransformer._hstack",
            "file_path": "sklearn/compose/_column_transformer.py"
          },
          {
            "rank": 0,
            "tokens": 371,
            "span_id": "ColumnTransformer._add_prefix_for_feature_names_out",
            "file_path": "sklearn/compose/_column_transformer.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue focuses on the ColumnTransformer's handling of transformers that apply to 0 features when the output is set to pandas. The error occurs at line 856 in `self._iter(fitted=True)` where steps with 0 features are not fitted, and at line 859 in `_add_prefix_for_feature_names_out` where it breaks due to the missing steps. The provided search results include extensive code spans from the `ColumnTransformer` class in `sklearn/compose/_column_transformer.py`, particularly covering the constructor, fit_transform, transform, and _hstack methods, as well as internal functions like _add_prefix_for_feature_names_out and _check_X. These code spans align well with the issue description, as they directly address the ColumnTransformer's behavior concerning feature handling and transformation, especially when the output is pandas. Thus, these code spans are highly relevant and should be identified as they demonstrate how ColumnTransformer processes features, transforms data, and constructs output, providing a comprehensive view of the class's functionality.",
            "identified_spans": [
              {
                "span_ids": [
                  "ColumnTransformer",
                  "ColumnTransformer.__init__",
                  "ColumnTransformer._add_prefix_for_feature_names_out",
                  "ColumnTransformer.fit_transform",
                  "ColumnTransformer.transform",
                  "ColumnTransformer._hstack",
                  "_check_X"
                ],
                "file_path": "sklearn/compose/_column_transformer.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 5248,
          "output_tokens": 359,
          "retry_message": null,
          "completion_cost": 0.021129000000000002
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The provided file context includes the ColumnTransformer class, which is directly related to the reported issue. The critical methods such as `fit_transform`, `transform`, and `_hstack` are present, which handle the transformations and stacking of column-wise results. The method `_add_prefix_for_feature_names_out` is particularly relevant as it deals with naming features after transformations, which is where the error in the issue traceback is directed. The `_hstack` method also handles the output configuration for 'pandas' as specified in the issue. Given these points, all relevant methods and functionalities needed to address the issue are present in the file context.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 5149,
          "output_tokens": 177,
          "retry_message": null,
          "completion_cost": 0.018102
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "ColumnTransformer._add_prefix_for_feature_names_out",
            "file_path": "sklearn/compose/_column_transformer.py",
            "scratch_pad": "The issue arises because when ColumnTransformer encounters a transformer with zero features, it doesn't fit the transformer and thus doesn't include it in the transformation steps. This leads to a mismatch in the expected number of output feature names when using 'pandas' output. To fix this, we need to ensure that transformers with zero features are handled gracefully and not included in the feature name generation.",
            "instructions": "Modify the _add_prefix_for_feature_names_out method to handle cases where a transformer does not produce any features (i.e., has zero features). Specifically, filter out transformers that have empty feature names output."
          },
          "output": {
            "span_id": "ColumnTransformer._add_prefix_for_feature_names_out",
            "end_line": 579,
            "file_path": "sklearn/compose/_column_transformer.py",
            "start_line": 533,
            "instructions": "Modify the _add_prefix_for_feature_names_out method to handle cases where a transformer does not produce any features (i.e., has zero features). Specifically, filter out transformers that have empty feature names output."
          },
          "input_tokens": 5353,
          "output_tokens": 198,
          "retry_message": null,
          "completion_cost": 0.019029
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "ColumnTransformer._add_prefix_for_feature_names_out",
        "end_line": 579,
        "file_path": "sklearn/compose/_column_transformer.py",
        "max_tokens": 1000,
        "start_line": 533,
        "temperature": 1.6,
        "instructions": "Modify the _add_prefix_for_feature_names_out method to handle cases where a transformer does not produce any features (i.e., has zero features). Specifically, filter out transformers that have empty feature names output.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\n    def _add_prefix_for_feature_names_out(self, transformer_with_feature_names_out):\n        \"\"\"Add prefix for feature names out that includes the transformer names.\n\n        Parameters\n        ----------\n        transformer_with_feature_names_out : list of tuples of (str, array-like of str)\n            The tuple consistent of the transformer's name and its feature names out.\n\n        Returns\n        -------\n        feature_names_out : ndarray of shape (n_features,), dtype=str\n            Transformed feature names.\n        \"\"\"\n        # Filter out transformers that have empty feature names output\n        filtered_transformer_with_feature_names_out = [\n            (name, feature_names_out)\n            for name, feature_names_out in transformer_with_feature_names_out\n            if feature_names_out.size > 0\n        ]\n\n        if self.verbose_feature_names_out:\n            # Prefix the feature names out with the transformers name\n            names = list(\n                chain.from_iterable(\n                    (f\"{name}__{i}\" for i in feature_names_out)\n                    for name, feature_names_out in filtered_transformer_with_feature_names_out\n                )\n            )\n            return np.asarray(names, dtype=object)\n\n        # verbose_feature_names_out is False\n        # Check that names are all unique without a prefix\n        feature_names_count = Counter(\n            chain.from_iterable(s for _, s in filtered_transformer_with_feature_names_out)\n        )\n        top_6_overlap = [\n            name for name, count in feature_names_count.most_common(6) if count > 1\n        ]\n        top_6_overlap.sort()\n        if top_6_overlap:\n            if len(top_6_overlap) == 6:\n                # There are more than 5 overlapping names, we only show the 5\n                # of the feature names\n                names_repr = str(top_6_overlap[:5])[:-1] + \", ...]\"\n            else:\n                names_repr = str(top_6_overlap)\n            raise ValueError(\n                f\"Output feature names: {names_repr} are not unique. Please set \"\n                \"verbose_feature_names_out=True to add prefixes to feature names\"\n            )\n\n        return np.concatenate(\n            [name for _, name in filtered_transformer_with_feature_names_out],\n        )\n</replace>"
          },
          "output": {
            "diff": "--- sklearn/compose/_column_transformer.py\n+++ sklearn/compose/_column_transformer.py\n@@ -543,12 +543,19 @@\n         feature_names_out : ndarray of shape (n_features,), dtype=str\n             Transformed feature names.\n         \"\"\"\n+        # Filter out transformers that have empty feature names output\n+        filtered_transformer_with_feature_names_out = [\n+            (name, feature_names_out)\n+            for name, feature_names_out in transformer_with_feature_names_out\n+            if feature_names_out.size > 0\n+        ]\n+\n         if self.verbose_feature_names_out:\n             # Prefix the feature names out with the transformers name\n             names = list(\n                 chain.from_iterable(\n                     (f\"{name}__{i}\" for i in feature_names_out)\n-                    for name, feature_names_out in transformer_with_feature_names_out\n+                    for name, feature_names_out in filtered_transformer_with_feature_names_out\n                 )\n             )\n             return np.asarray(names, dtype=object)\n@@ -556,7 +563,7 @@\n         # verbose_feature_names_out is False\n         # Check that names are all unique without a prefix\n         feature_names_count = Counter(\n-            chain.from_iterable(s for _, s in transformer_with_feature_names_out)\n+            chain.from_iterable(s for _, s in filtered_transformer_with_feature_names_out)\n         )\n         top_6_overlap = [\n             name for name, count in feature_names_count.most_common(6) if count > 1\n@@ -575,7 +582,7 @@\n             )\n \n         return np.concatenate(\n-            [name for _, name in transformer_with_feature_names_out],\n+            [name for _, name in filtered_transformer_with_feature_names_out],\n         )\n \n     def _update_fitted_transformers(self, transformers):\n",
            "message": "Applied the change to sklearn/compose/_column_transformer.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 8082,
          "output_tokens": 599,
          "retry_message": null,
          "completion_cost": 0.033231
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sklearn/compose/_column_transformer.py\n+++ sklearn/compose/_column_transformer.py\n@@ -543,12 +543,19 @@\n         feature_names_out : ndarray of shape (n_features,), dtype=str\n             Transformed feature names.\n         \"\"\"\n+        # Filter out transformers that have empty feature names output\n+        filtered_transformer_with_feature_names_out = [\n+            (name, feature_names_out)\n+            for name, feature_names_out in transformer_with_feature_names_out\n+            if feature_names_out.size > 0\n+        ]\n+\n         if self.verbose_feature_names_out:\n             # Prefix the feature names out with the transformers name\n             names = list(\n                 chain.from_iterable(\n                     (f\"{name}__{i}\" for i in feature_names_out)\n-                    for name, feature_names_out in transformer_with_feature_names_out\n+                    for name, feature_names_out in filtered_transformer_with_feature_names_out\n                 )\n             )\n             return np.asarray(names, dtype=object)\n@@ -556,7 +563,7 @@\n         # verbose_feature_names_out is False\n         # Check that names are all unique without a prefix\n         feature_names_count = Counter(\n-            chain.from_iterable(s for _, s in transformer_with_feature_names_out)\n+            chain.from_iterable(s for _, s in filtered_transformer_with_feature_names_out)\n         )\n         top_6_overlap = [\n             name for name, count in feature_names_count.most_common(6) if count > 1\n@@ -575,7 +582,7 @@\n             )\n \n         return np.concatenate(\n-            [name for _, name in transformer_with_feature_names_out],\n+            [name for _, name in filtered_transformer_with_feature_names_out],\n         )\n \n     def _update_fitted_transformers(self, transformers):\n",
        "model": "deepseek-coder",
        "message": "Applied the change to sklearn/compose/_column_transformer.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue has been resolved by filtering out transformers with empty feature names output in the _add_prefix_for_feature_names_out method. This ensures that such transformers do not contribute to the feature name generation, thus avoiding a mismatch in the expected number of feature names.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The change to handle transformers with zero features was successfully applied. The modification ensures that transformers with empty feature names output are filtered out, preventing a mismatch in the expected number of output feature names when using 'pandas' output. This fixes the issue where transformers with zero features were causing an error.",
            "instructions": null
          },
          "output": {
            "message": "The issue has been resolved by filtering out transformers with empty feature names output in the _add_prefix_for_feature_names_out method. This ensures that such transformers do not contribute to the feature name generation, thus avoiding a mismatch in the expected number of feature names."
          },
          "input_tokens": 6186,
          "output_tokens": 177,
          "retry_message": null,
          "completion_cost": 0.021213000000000003
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue has been resolved by filtering out transformers with empty feature names output in the _add_prefix_for_feature_names_out method. This ensures that such transformers do not contribute to the feature name generation, thus avoiding a mismatch in the expected number of feature names.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "ColumnTransformer with pandas output can't handle transformers with no features\n### Describe the bug\r\n\r\nHi,\r\n\r\nColumnTransformer doesn't deal well with transformers that apply to 0 features (categorical_features in the example below) when using \"pandas\" as output. It seems steps with 0 features are not fitted, hence don't appear in `self._iter(fitted=True)` (_column_transformer.py l.856) and hence break the input to the `_add_prefix_for_feature_names_out` function (l.859).\r\n\r\n\r\n### Steps/Code to Reproduce\r\n\r\nHere is some code to reproduce the error. If you remove .set_output(transform=\"pandas\") on the line before last, all works fine. If you remove the (\"categorical\", ...) step, it works fine too.\r\n\r\n```python\r\nimport numpy as np\r\nimport pandas as pd\r\nfrom lightgbm import LGBMClassifier\r\nfrom sklearn.compose import ColumnTransformer\r\nfrom sklearn.impute import SimpleImputer\r\nfrom sklearn.pipeline import Pipeline\r\nfrom sklearn.preprocessing import RobustScaler\r\n\r\nX = pd.DataFrame(data=[[1.0, 2.0, 3.0, 4.0], [4, 2, 2, 5]],\r\n                 columns=[\"a\", \"b\", \"c\", \"d\"])\r\ny = np.array([0, 1])\r\ncategorical_features = []\r\nnumerical_features = [\"a\", \"b\", \"c\"]\r\nmodel_preprocessing = (\"preprocessing\",\r\n                       ColumnTransformer([\r\n                           ('categorical', 'passthrough', categorical_features),\r\n                           ('numerical', Pipeline([(\"scaler\", RobustScaler()),\r\n                                                   (\"imputer\", SimpleImputer(strategy=\"median\"))\r\n                                                   ]), numerical_features),\r\n                       ], remainder='drop'))\r\npipeline = Pipeline([model_preprocessing, (\"classifier\", LGBMClassifier())]).set_output(transform=\"pandas\")\r\npipeline.fit(X, y)\r\n```\r\n\r\n### Expected Results\r\n\r\nThe step with no features should be ignored.\r\n\r\n### Actual Results\r\n\r\nHere is the error message:\r\n```pytb\r\nTraceback (most recent call last):\r\n  File \"/home/philippe/workspace/script.py\", line 22, in <module>\r\n    pipeline.fit(X, y)\r\n  File \"/home/philippe/.anaconda3/envs/deleteme/lib/python3.9/site-packages/sklearn/pipeline.py\", line 402, in fit\r\n    Xt = self._fit(X, y, **fit_params_steps)\r\n  File \"/home/philippe/.anaconda3/envs/deleteme/lib/python3.9/site-packages/sklearn/pipeline.py\", line 360, in _fit\r\n    X, fitted_transformer = fit_transform_one_cached(\r\n  File \"/home/philippe/.anaconda3/envs/deleteme/lib/python3.9/site-packages/joblib/memory.py\", line 349, in __call__\r\n    return self.func(*args, **kwargs)\r\n  File \"/home/philippe/.anaconda3/envs/deleteme/lib/python3.9/site-packages/sklearn/pipeline.py\", line 894, in _fit_transform_one\r\n    res = transformer.fit_transform(X, y, **fit_params)\r\n  File \"/home/philippe/.anaconda3/envs/deleteme/lib/python3.9/site-packages/sklearn/utils/_set_output.py\", line 142, in wrapped\r\n    data_to_wrap = f(self, X, *args, **kwargs)\r\n  File \"/home/philippe/.anaconda3/envs/deleteme/lib/python3.9/site-packages/sklearn/compose/_column_transformer.py\", line 750, in fit_transform\r\n    return self._hstack(list(Xs))\r\n  File \"/home/philippe/.anaconda3/envs/deleteme/lib/python3.9/site-packages/sklearn/compose/_column_transformer.py\", line 862, in _hstack\r\n    output.columns = names_out\r\n  File \"/home/philippe/.anaconda3/envs/deleteme/lib/python3.9/site-packages/pandas/core/generic.py\", line 5596, in __setattr__\r\n    return object.__setattr__(self, name, value)\r\n  File \"pandas/_libs/properties.pyx\", line 70, in pandas._libs.properties.AxisProperty.__set__\r\n  File \"/home/philippe/.anaconda3/envs/deleteme/lib/python3.9/site-packages/pandas/core/generic.py\", line 769, in _set_axis\r\n    self._mgr.set_axis(axis, labels)\r\n  File \"/home/philippe/.anaconda3/envs/deleteme/lib/python3.9/site-packages/pandas/core/internals/managers.py\", line 214, in set_axis\r\n    self._validate_set_axis(axis, new_labels)\r\n  File \"/home/philippe/.anaconda3/envs/deleteme/lib/python3.9/site-packages/pandas/core/internals/base.py\", line 69, in _validate_set_axis\r\n    raise ValueError(\r\nValueError: Length mismatch: Expected axis has 3 elements, new values have 0 elements\r\n\r\nProcess finished with exit code 1\r\n```\r\n\r\n### Versions\r\n\r\n```shell\r\nSystem:\r\n    python: 3.9.15 (main, Nov 24 2022, 14:31:59)  [GCC 11.2.0]\r\nexecutable: /home/philippe/.anaconda3/envs/strategy-training/bin/python\r\n   machine: Linux-5.15.0-57-generic-x86_64-with-glibc2.31\r\n\r\nPython dependencies:\r\n      sklearn: 1.2.0\r\n          pip: 22.2.2\r\n   setuptools: 62.3.2\r\n        numpy: 1.23.5\r\n        scipy: 1.9.3\r\n       Cython: None\r\n       pandas: 1.4.1\r\n   matplotlib: 3.6.3\r\n       joblib: 1.2.0\r\nthreadpoolctl: 3.1.0\r\n\r\nBuilt with OpenMP: True\r\n\r\nthreadpoolctl info:\r\n       user_api: openmp\r\n   internal_api: openmp\r\n         prefix: libgomp\r\n       filepath: /home/philippe/.anaconda3/envs/strategy-training/lib/python3.9/site-packages/scikit_learn.libs/libgomp-a34b3233.so.1.0.0\r\n        version: None\r\n    num_threads: 12\r\n\r\n       user_api: blas\r\n   internal_api: openblas\r\n         prefix: libopenblas\r\n       filepath: /home/philippe/.anaconda3/envs/strategy-training/lib/python3.9/site-packages/numpy.libs/libopenblas64_p-r0-742d56dc.3.20.so\r\n        version: 0.3.20\r\nthreading_layer: pthreads\r\n   architecture: Haswell\r\n    num_threads: 12\r\n\r\n       user_api: blas\r\n   internal_api: openblas\r\n         prefix: libopenblas\r\n       filepath: /home/philippe/.anaconda3/envs/strategy-training/lib/python3.9/site-packages/scipy.libs/libopenblasp-r0-41284840.3.18.so\r\n        version: 0.3.18\r\nthreading_layer: pthreads\r\n   architecture: Haswell\r\n    num_threads: 12\r\n```\r\n\n"
}