{
  "info": {
    "duration": 293.59131503105164,
    "submission": "diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py\nindex dad56850f..a918dab43 100644\n--- a/sklearn/utils/validation.py\n+++ b/sklearn/utils/validation.py\n@@ -459,8 +459,8 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,\n \n     if dtype_numeric:\n         if dtype_orig is not None and dtype_orig.kind == \"O\":\n-            # if input is object, convert to float.\n-            dtype = np.float64\n+            # if input is object, do not convert to float.\n+            dtype = None\n         else:\n             dtype = None\n \n",
    "total_cost": 0.221622,
    "instance_id": "scikit-learn__scikit-learn-15535",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves a regression in the input validation of clustering metrics, specifically with `mutual_info_score` and `np.array` with string data. The error suggests that there has been a change in how string data is handled, leading to different behaviors across different versions. Given the context, the focus should be on the `mutual_info_score` function in the `sklearn.metrics.cluster` module and any related validation functions in `sklearn.utils.validation`. Additionally, the deprecated `is_public_parameter` function might provide historical context.",
            "search_requests": [
              {
                "query": "regression in input validation of clustering metrics",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": null,
                "function_names": [
                  "mutual_info_score",
                  "check_array",
                  "check_X_y"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 8,
                "tokens": 813,
                "span_id": "mutual_info_score",
                "file_path": "sklearn/metrics/cluster/_supervised.py"
              },
              {
                "rank": 18,
                "tokens": 1235,
                "span_id": "check_X_y",
                "file_path": "sklearn/utils/validation.py"
              },
              {
                "rank": 66,
                "tokens": 2446,
                "span_id": "check_array",
                "file_path": "sklearn/utils/validation.py"
              }
            ],
            "search_requests": [
              {
                "query": "regression in input validation of clustering metrics",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": null,
                "function_names": [
                  "mutual_info_score",
                  "check_array",
                  "check_X_y"
                ]
              }
            ]
          },
          "input_tokens": 3652,
          "output_tokens": 224,
          "retry_message": null,
          "completion_cost": 0.014316
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 8,
            "tokens": 813,
            "span_id": "mutual_info_score",
            "file_path": "sklearn/metrics/cluster/_supervised.py"
          },
          {
            "rank": 18,
            "tokens": 1235,
            "span_id": "check_X_y",
            "file_path": "sklearn/utils/validation.py"
          },
          {
            "rank": 66,
            "tokens": 2446,
            "span_id": "check_array",
            "file_path": "sklearn/utils/validation.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves a regression in the input validation of clustering metrics, specifically around the `mutual_info_score` function from `sklearn.metrics.cluster`. The issue notes that certain operations fail or produce warnings due to the input type being string-based, which worked previously without issue. To address this, we need to identify the code spans responsible for handling input validation and the processing of inputs within the `mutual_info_score` function. The provided search results include two primary files: `sklearn/metrics/cluster/_supervised.py` and `sklearn/utils/validation.py`. In `sklearn/metrics/cluster/_supervised.py`, the relevant span is the definition of `mutual_info_score`, which includes the validation and processing of input labels and contingency matrices. In `sklearn/utils/validation.py`, the relevant spans are the definitions of `check_array` and `check_X_y`, which are utility functions extensively used in input validation across the library. These functions are likely to be involved in the input validation steps leading to the observed issue. By examining these spans, we can pinpoint where and how the input validation logic may have regressed or changed, leading to the reported behavior.",
            "identified_spans": [
              {
                "span_ids": [
                  "mutual_info_score"
                ],
                "file_path": "sklearn/metrics/cluster/_supervised.py"
              },
              {
                "span_ids": [
                  "check_array",
                  "check_X_y"
                ],
                "file_path": "sklearn/utils/validation.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 2339,
          "output_tokens": 381,
          "retry_message": null,
          "completion_cost": 0.012732
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The file context provided contains the necessary functions `mutual_info_score` and `check_array` which are central to the issue of regression in input validation of clustering metrics. However, the exact behavior when dealing with string arrays is not directly addressed in the provided snippets. There is a mention of converting object arrays to float64 in `check_array`, which may relate to the issue but doesn't explicitly handle the string conversion error as described in the issue. The `mutual_info_score` function also does not show any specific handling for string inputs. Although the general structure for handling input arrays is present, the specific regression case might require additional handling or validation not shown here.",
            "search_suggestions": "Look for any additional validation or type conversion logic related to string arrays within the `sklearn.utils.validation` module or other related modules like `sklearn.metrics.cluster._supervised` to understand how string inputs are specifically handled and to determine if any changes need to be reverted or adjustments made to address the regression."
          },
          "output": {
            "message": "Look for any additional validation or type conversion logic related to string arrays within the `sklearn.utils.validation` module or other related modules like `sklearn.metrics.cluster._supervised` to understand how string inputs are specifically handled and to determine if any changes need to be reverted or adjustments made to address the regression."
          },
          "input_tokens": 3850,
          "output_tokens": 246,
          "retry_message": null,
          "completion_cost": 0.01524
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look for any additional validation or type conversion logic related to string arrays within the `sklearn.utils.validation` module or other related modules like `sklearn.metrics.cluster._supervised` to understand how string inputs are specifically handled and to determine if any changes need to be reverted or adjustments made to address the regression.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The provided context shows how the `mutual_info_score` function handles contingency matrices and how `check_array` and `check_X_y` are used for validating arrays. However, it seems there isn't explicit validation for string arrays within these functions. Further examination is needed in the `check_array` function to see if there's specific handling or conversion logic for string arrays, as strings (dtype 'O') currently get converted to float64 when dtype is 'numeric'. Exploring additional sections of the `sklearn.utils.validation` module and the `sklearn.metrics.cluster._supervised` module might reveal more about how string data might be explicitly declared or treated to resolve this regression.",
            "search_requests": [
              {
                "query": "string array validation in sklearn",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": null,
                "function_names": [
                  "check_array",
                  "check_X_y",
                  "mutual_info_score"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 2,
                "tokens": 2446,
                "span_id": "check_array",
                "file_path": "sklearn/utils/validation.py"
              },
              {
                "rank": 3,
                "tokens": 1235,
                "span_id": "check_X_y",
                "file_path": "sklearn/utils/validation.py"
              }
            ],
            "search_requests": [
              {
                "query": "string array validation in sklearn",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": null,
                "function_names": [
                  "check_array",
                  "check_X_y",
                  "mutual_info_score"
                ]
              }
            ]
          },
          "input_tokens": 6729,
          "output_tokens": 264,
          "retry_message": null,
          "completion_cost": 0.024147000000000002
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 2,
            "tokens": 2446,
            "span_id": "check_array",
            "file_path": "sklearn/utils/validation.py"
          },
          {
            "rank": 3,
            "tokens": 1235,
            "span_id": "check_X_y",
            "file_path": "sklearn/utils/validation.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue concerns a regression in input validation for clustering metrics, specifically around the mutual_info_score function. The error occurs when passing an array of strings with the .astype(object) method. The task is to identify relevant code spans that deal with input validation and type conversion. The file_context and search_results both provide sections of code from sklearn.utils.validation.py, specifically the check_array and check_X_y functions. These functions are crucial for input validation and type conversion. The check_array function is responsible for ensuring that the input array meets certain criteria, including type conversion if necessary. The check_X_y function extends these checks to ensure consistency between X and y variables. Given the nature of the issue, these functions are highly relevant. The relevant spans are identified accordingly.",
            "identified_spans": [
              {
                "span_ids": [
                  "check_array",
                  "check_X_y"
                ],
                "file_path": "sklearn/utils/validation.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 6240,
          "output_tokens": 246,
          "retry_message": null,
          "completion_cost": 0.02241
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The provided context shows how the `mutual_info_score` function handles contingency matrices and how `check_array` and `check_X_y` are used for validating arrays. However, it seems there isn't explicit validation for string arrays within these functions. Further examination is needed in the `check_array` function to see if there's specific handling or conversion logic for string arrays, as strings (dtype 'O') currently get converted to float64 when dtype is 'numeric'. Exploring additional sections of the `sklearn.utils.validation` module and the `sklearn.metrics.cluster._supervised` module might reveal more about how string data might be explicitly declared or treated to resolve this regression.",
            "search_suggestions": "Explore the `check_array` function in `sklearn.utils.validation` and the `mutual_info_score` function in `sklearn.metrics.cluster._supervised` to find detailed handling or conversion logic for string arrays."
          },
          "output": {
            "message": "Explore the `check_array` function in `sklearn.utils.validation` and the `mutual_info_score` function in `sklearn.metrics.cluster._supervised` to find detailed handling or conversion logic for string arrays."
          },
          "input_tokens": 3881,
          "output_tokens": 238,
          "retry_message": null,
          "completion_cost": 0.015213
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Explore the `check_array` function in `sklearn.utils.validation` and the `mutual_info_score` function in `sklearn.metrics.cluster._supervised` to find detailed handling or conversion logic for string arrays.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves the handling of string arrays in the `mutual_info_score` function, which leads to a `ValueError` when strings are present. From the `mutual_info_score` implementation, it primarily checks for valid numeric contingency matrices. In the `check_array` function, there's logic to convert object arrays (which include strings) to float64 if `dtype` is set to 'numeric', which could be related to the regression. There doesn't seem to be specific checks or conversions for strings within these functions, suggesting further investigation is needed, possibly in the broader codebase or documentation for how string handling has evolved in recent versions.",
            "search_requests": [
              {
                "query": "string handling in mutual_info_score and check_array",
                "class_names": [],
                "code_snippet": "if dtype_numeric and array.dtype.kind == 'O':\n    array = array.astype(np.float64)",
                "file_pattern": null,
                "function_names": [
                  "mutual_info_score",
                  "check_array",
                  "check_X_y"
                ]
              }
            ]
          },
          "output": null,
          "input_tokens": 7050,
          "output_tokens": 288,
          "retry_message": "\n\nUnfortunately, I didn\u2019t find any relevant results.",
          "completion_cost": 0.025470000000000003
        },
        {
          "action": {
            "complete": true,
            "scratch_pad": "Despite a thorough search within the provided critical files related to the `mutual_info_score` and `check_array` functions in `sklearn.metrics.cluster` and `sklearn.utils.validation`, no additional explicit handling or conversion logic for string arrays was found. It seems that the implicit conversion of string arrays to float64 when dtype is set to 'numeric' in the `check_array` function might be the problematic logic related to the regression. This suggests the need for a deeper exploration into changes in the handling of string arrays or object dtypes across different versions of scikit-learn to pinpoint the origin of the regression and determine a resolution.",
            "search_requests": []
          },
          "output": {
            "message": "Despite a thorough search within the provided critical files related to the `mutual_info_score` and `check_array` functions in `sklearn.metrics.cluster` and `sklearn.utils.validation`, no additional explicit handling or conversion logic for string arrays was found. It seems that the implicit conversion of string arrays to float64 when dtype is set to 'numeric' in the `check_array` function might be the problematic logic related to the regression. This suggests the need for a deeper exploration into changes in the handling of string arrays or object dtypes across different versions of scikit-learn to pinpoint the origin of the regression and determine a resolution."
          },
          "input_tokens": 7356,
          "output_tokens": 167,
          "retry_message": null,
          "completion_cost": 0.024573
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "Despite a thorough search within the provided critical files related to the `mutual_info_score` and `check_array` functions in `sklearn.metrics.cluster` and `sklearn.utils.validation`, no additional explicit handling or conversion logic for string arrays was found. It seems that the implicit conversion of string arrays to float64 when dtype is set to 'numeric' in the `check_array` function might be the problematic logic related to the regression. This suggests the need for a deeper exploration into changes in the handling of string arrays or object dtypes across different versions of scikit-learn to pinpoint the origin of the regression and determine a resolution.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "check_array",
            "file_path": "sklearn/utils/validation.py",
            "scratch_pad": "The regression issue is due to the implicit conversion of string arrays to float64 when dtype is set to 'numeric' in the `check_array` function. This conversion is problematic when dealing with string arrays, as it results in a ValueError when trying to convert certain strings to float. To address this, we need to ensure that string arrays are handled appropriately without attempting to convert them to float.",
            "instructions": "Modify the `check_array` function to handle string arrays (object dtype) without converting them to float. Specifically, ensure that if the input array is of object dtype and dtype is set to 'numeric', it should not attempt to convert the array to float."
          },
          "output": {
            "span_id": "check_array",
            "file_path": "sklearn/utils/validation.py",
            "instructions": "Modify the `check_array` function to handle string arrays (object dtype) without converting them to float. Specifically, ensure that if the input array is of object dtype and dtype is set to 'numeric', it should not attempt to convert the array to float."
          },
          "input_tokens": 4160,
          "output_tokens": 192,
          "retry_message": null,
          "completion_cost": 0.01536
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "check_array",
        "end_line": null,
        "file_path": "sklearn/utils/validation.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Modify the `check_array` function to handle string arrays (object dtype) without converting them to float. Specifically, ensure that if the input array is of object dtype and dtype is set to 'numeric', it should not attempt to convert the array to float.\n\nThe code block where the conversion of object dtype to float64 is handled is within the conditional statement checking if the dtype is numeric and the original dtype is object. This specific block needs to be modified to ensure that no conversion takes place if the input array is of object dtype and dtype is set to 'numeric'.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 463,
            "start_line": 461,
            "scratch_pad": "The code block where the conversion of object dtype to float64 is handled is within the conditional statement checking if the dtype is numeric and the original dtype is object. This specific block needs to be modified to ensure that no conversion takes place if the input array is of object dtype and dtype is set to 'numeric'."
          },
          "output": {
            "span_id": "check_array",
            "end_line": 467,
            "file_path": "sklearn/utils/validation.py",
            "start_line": 457,
            "instructions": "Modify the `check_array` function to handle string arrays (object dtype) without converting them to float. Specifically, ensure that if the input array is of object dtype and dtype is set to 'numeric', it should not attempt to convert the array to float.\n\nThe code block where the conversion of object dtype to float64 is handled is within the conditional statement checking if the dtype is numeric and the original dtype is object. This specific block needs to be modified to ensure that no conversion takes place if the input array is of object dtype and dtype is set to 'numeric'."
          },
          "input_tokens": 4376,
          "output_tokens": 103,
          "retry_message": null,
          "completion_cost": 0.014673
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "check_array",
        "end_line": 467,
        "file_path": "sklearn/utils/validation.py",
        "max_tokens": 1000,
        "start_line": 457,
        "temperature": 1.6,
        "instructions": "Modify the `check_array` function to handle string arrays (object dtype) without converting them to float. Specifically, ensure that if the input array is of object dtype and dtype is set to 'numeric', it should not attempt to convert the array to float.\n\nThe code block where the conversion of object dtype to float64 is handled is within the conditional statement checking if the dtype is numeric and the original dtype is object. This specific block needs to be modified to ensure that no conversion takes place if the input array is of object dtype and dtype is set to 'numeric'.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\n        if all(isinstance(dtype, np.dtype) for dtype in dtypes_orig):\n            dtype_orig = np.result_type(*array.dtypes)\n\n    if dtype_numeric:\n        if dtype_orig is not None and dtype_orig.kind == \"O\":\n            # if input is object, do not convert to float.\n            dtype = None\n        else:\n            dtype = None\n\n    if isinstance(dtype, (list, tuple)):\n</replace>"
          },
          "output": {
            "diff": "--- sklearn/utils/validation.py\n+++ sklearn/utils/validation.py\n@@ -459,8 +459,8 @@\n \n     if dtype_numeric:\n         if dtype_orig is not None and dtype_orig.kind == \"O\":\n-            # if input is object, convert to float.\n-            dtype = np.float64\n+            # if input is object, do not convert to float.\n+            dtype = None\n         else:\n             dtype = None\n \n",
            "message": "Applied the change to sklearn/utils/validation.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 6592,
          "output_tokens": 117,
          "retry_message": null,
          "completion_cost": 0.021531
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sklearn/utils/validation.py\n+++ sklearn/utils/validation.py\n@@ -459,8 +459,8 @@\n \n     if dtype_numeric:\n         if dtype_orig is not None and dtype_orig.kind == \"O\":\n-            # if input is object, convert to float.\n-            dtype = np.float64\n+            # if input is object, do not convert to float.\n+            dtype = None\n         else:\n             dtype = None\n \n",
        "model": "deepseek-coder",
        "message": "Applied the change to sklearn/utils/validation.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The regression issue regarding the input validation of clustering metrics has been addressed by modifying the `check_array` function to prevent the conversion of string arrays to float when dtype is set to 'numeric'. This should ensure that the function behaves as expected without raising ValueErrors for string arrays.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The change made to the `check_array` function ensures that string arrays (object dtype) are not converted to float when dtype is set to 'numeric'. This should resolve the regression issue reported.",
            "instructions": null
          },
          "output": {
            "message": "The regression issue regarding the input validation of clustering metrics has been addressed by modifying the `check_array` function to prevent the conversion of string arrays to float when dtype is set to 'numeric'. This should ensure that the function behaves as expected without raising ValueErrors for string arrays."
          },
          "input_tokens": 4529,
          "output_tokens": 158,
          "retry_message": null,
          "completion_cost": 0.015957
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The regression issue regarding the input validation of clustering metrics has been addressed by modifying the `check_array` function to prevent the conversion of string arrays to float when dtype is set to 'numeric'. This should ensure that the function behaves as expected without raising ValueErrors for string arrays.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "regression in input validation of clustering metrics\n```python\r\nfrom sklearn.metrics.cluster import mutual_info_score\r\nimport numpy as np\r\n\r\nx = np.random.choice(['a', 'b'], size=20).astype(object)\r\nmutual_info_score(x, x)\r\n```\r\nValueError: could not convert string to float: 'b'\r\n\r\nwhile\r\n```python\r\nx = np.random.choice(['a', 'b'], size=20)\r\nmutual_info_score(x, x)\r\n```\r\nworks with a warning?\r\n\r\nthis worked in 0.21.1 without a warning (as I think it should)\r\n\r\n\r\nEdit by @ogrisel: I removed the `.astype(object)` in the second code snippet.\n"
}