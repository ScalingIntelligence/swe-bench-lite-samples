{
  "info": {
    "duration": 175.9321415424347,
    "submission": "diff --git a/sklearn/metrics/cluster/_supervised.py b/sklearn/metrics/cluster/_supervised.py\nindex 4bddae35c..869237f56 100644\n--- a/sklearn/metrics/cluster/_supervised.py\n+++ b/sklearn/metrics/cluster/_supervised.py\n@@ -43,10 +43,10 @@ def check_clusterings(labels_true, labels_pred):\n         The predicted labels.\n     \"\"\"\n     labels_true = check_array(\n-        labels_true, ensure_2d=False, ensure_min_samples=0\n+        labels_true, ensure_2d=False, ensure_min_samples=0, dtype=None\n     )\n     labels_pred = check_array(\n-        labels_pred, ensure_2d=False, ensure_min_samples=0\n+        labels_pred, ensure_2d=False, ensure_min_samples=0, dtype=None\n     )\n \n     # input checks\n",
    "total_cost": 0.103401,
    "instance_id": "scikit-learn__scikit-learn-15535",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves a regression in input validation of clustering metrics, specifically with the mutual_info_score function from sklearn.metrics.cluster. The error occurs when strings are present in the input data, with the error message indicating that strings cannot be converted to floats. The working snippet without .astype(object) works but with a warning, suggesting that the input validation may need adjustments for string handling. The likely relevant files are those dealing with input validation, clustering metrics, and utility functions for checking estimator inputs.",
            "search_requests": [
              {
                "query": "input validation for mutual_info_score",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sklearn/metrics/cluster/*.py",
                "function_names": []
              },
              {
                "query": "input validation for clustering metrics",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sklearn/utils/validation.py",
                "function_names": []
              },
              {
                "query": null,
                "class_names": [
                  "SpectralBiclustering",
                  "KMeans"
                ],
                "code_snippet": null,
                "file_pattern": "sklearn/cluster/*.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 917,
                "span_id": "normalized_mutual_info_score",
                "file_path": "sklearn/metrics/cluster/_supervised.py"
              },
              {
                "rank": 1,
                "tokens": 813,
                "span_id": "mutual_info_score",
                "file_path": "sklearn/metrics/cluster/_supervised.py"
              },
              {
                "rank": 2,
                "tokens": 199,
                "span_id": "check_clusterings",
                "file_path": "sklearn/metrics/cluster/_supervised.py"
              },
              {
                "rank": 3,
                "tokens": 1184,
                "span_id": "adjusted_mutual_info_score",
                "file_path": "sklearn/metrics/cluster/_supervised.py"
              },
              {
                "rank": 4,
                "tokens": 200,
                "span_id": "docstring",
                "file_path": "sklearn/metrics/cluster/_supervised.py"
              },
              {
                "rank": 4,
                "tokens": 44,
                "span_id": "_comb2",
                "file_path": "sklearn/metrics/cluster/_supervised.py"
              },
              {
                "rank": 7,
                "tokens": 942,
                "span_id": "silhouette_samples",
                "file_path": "sklearn/metrics/cluster/_unsupervised.py"
              },
              {
                "rank": 8,
                "tokens": 89,
                "span_id": "_check_rows_and_columns",
                "file_path": "sklearn/metrics/cluster/_bicluster.py"
              },
              {
                "rank": 8,
                "tokens": 32,
                "span_id": "imports",
                "file_path": "sklearn/metrics/cluster/_bicluster.py"
              },
              {
                "rank": 0,
                "tokens": 182,
                "span_id": "docstring",
                "file_path": "sklearn/utils/validation.py"
              },
              {
                "rank": 1,
                "tokens": 1235,
                "span_id": "check_X_y",
                "file_path": "sklearn/utils/validation.py"
              },
              {
                "rank": 2,
                "tokens": 2446,
                "span_id": "check_array",
                "file_path": "sklearn/utils/validation.py"
              },
              {
                "rank": 3,
                "tokens": 123,
                "span_id": "check_consistent_length",
                "file_path": "sklearn/utils/validation.py"
              },
              {
                "rank": 5,
                "tokens": 44,
                "span_id": "_is_arraylike",
                "file_path": "sklearn/utils/validation.py"
              },
              {
                "rank": 5,
                "tokens": 198,
                "span_id": "_num_samples",
                "file_path": "sklearn/utils/validation.py"
              },
              {
                "rank": 6,
                "tokens": 301,
                "span_id": "check_scalar",
                "file_path": "sklearn/utils/validation.py"
              },
              {
                "rank": 8,
                "tokens": 178,
                "span_id": "column_or_1d",
                "file_path": "sklearn/utils/validation.py"
              },
              {
                "rank": 10,
                "tokens": 411,
                "span_id": "_check_sample_weight",
                "file_path": "sklearn/utils/validation.py"
              },
              {
                "rank": 0,
                "tokens": 1121,
                "span_id": "SpectralBiclustering",
                "file_path": "sklearn/cluster/_bicluster.py"
              },
              {
                "rank": 0,
                "tokens": 122,
                "span_id": "SpectralBiclustering.__init__",
                "file_path": "sklearn/cluster/_bicluster.py"
              },
              {
                "rank": 0,
                "tokens": 241,
                "span_id": "SpectralBiclustering._check_parameters",
                "file_path": "sklearn/cluster/_bicluster.py"
              },
              {
                "rank": 0,
                "tokens": 293,
                "span_id": "SpectralBiclustering._fit",
                "file_path": "sklearn/cluster/_bicluster.py"
              },
              {
                "rank": 0,
                "tokens": 156,
                "span_id": "SpectralBiclustering._fit_best_piecewise",
                "file_path": "sklearn/cluster/_bicluster.py"
              },
              {
                "rank": 0,
                "tokens": 54,
                "span_id": "SpectralBiclustering._project_and_cluster",
                "file_path": "sklearn/cluster/_bicluster.py"
              },
              {
                "rank": 1,
                "tokens": 1318,
                "span_id": "KMeans",
                "file_path": "sklearn/cluster/_k_means.py"
              },
              {
                "rank": 1,
                "tokens": 125,
                "span_id": "KMeans.__init__",
                "file_path": "sklearn/cluster/_k_means.py"
              },
              {
                "rank": 1,
                "tokens": 87,
                "span_id": "KMeans._check_test_data",
                "file_path": "sklearn/cluster/_k_means.py"
              },
              {
                "rank": 1,
                "tokens": 1292,
                "span_id": "KMeans.fit",
                "file_path": "sklearn/cluster/_k_means.py"
              },
              {
                "rank": 1,
                "tokens": 171,
                "span_id": "KMeans.fit_predict",
                "file_path": "sklearn/cluster/_k_means.py"
              },
              {
                "rank": 1,
                "tokens": 215,
                "span_id": "KMeans.fit_transform",
                "file_path": "sklearn/cluster/_k_means.py"
              },
              {
                "rank": 1,
                "tokens": 135,
                "span_id": "KMeans.transform",
                "file_path": "sklearn/cluster/_k_means.py"
              },
              {
                "rank": 1,
                "tokens": 28,
                "span_id": "KMeans._transform",
                "file_path": "sklearn/cluster/_k_means.py"
              },
              {
                "rank": 1,
                "tokens": 211,
                "span_id": "KMeans.predict",
                "file_path": "sklearn/cluster/_k_means.py"
              },
              {
                "rank": 1,
                "tokens": 191,
                "span_id": "KMeans.score",
                "file_path": "sklearn/cluster/_k_means.py"
              }
            ],
            "search_requests": [
              {
                "query": "input validation for mutual_info_score",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sklearn/metrics/cluster/*.py",
                "function_names": []
              },
              {
                "query": "input validation for clustering metrics",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sklearn/utils/validation.py",
                "function_names": []
              },
              {
                "query": null,
                "class_names": [
                  "SpectralBiclustering",
                  "KMeans"
                ],
                "code_snippet": null,
                "file_pattern": "sklearn/cluster/*.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 3652,
          "output_tokens": 249,
          "retry_message": null,
          "completion_cost": 0.014691000000000001
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 917,
            "span_id": "normalized_mutual_info_score",
            "file_path": "sklearn/metrics/cluster/_supervised.py"
          },
          {
            "rank": 0,
            "tokens": 182,
            "span_id": "docstring",
            "file_path": "sklearn/utils/validation.py"
          },
          {
            "rank": 0,
            "tokens": 1121,
            "span_id": "SpectralBiclustering",
            "file_path": "sklearn/cluster/_bicluster.py"
          },
          {
            "rank": 0,
            "tokens": 122,
            "span_id": "SpectralBiclustering.__init__",
            "file_path": "sklearn/cluster/_bicluster.py"
          },
          {
            "rank": 0,
            "tokens": 241,
            "span_id": "SpectralBiclustering._check_parameters",
            "file_path": "sklearn/cluster/_bicluster.py"
          },
          {
            "rank": 0,
            "tokens": 293,
            "span_id": "SpectralBiclustering._fit",
            "file_path": "sklearn/cluster/_bicluster.py"
          },
          {
            "rank": 0,
            "tokens": 156,
            "span_id": "SpectralBiclustering._fit_best_piecewise",
            "file_path": "sklearn/cluster/_bicluster.py"
          },
          {
            "rank": 0,
            "tokens": 54,
            "span_id": "SpectralBiclustering._project_and_cluster",
            "file_path": "sklearn/cluster/_bicluster.py"
          },
          {
            "rank": 1,
            "tokens": 813,
            "span_id": "mutual_info_score",
            "file_path": "sklearn/metrics/cluster/_supervised.py"
          },
          {
            "rank": 1,
            "tokens": 1235,
            "span_id": "check_X_y",
            "file_path": "sklearn/utils/validation.py"
          },
          {
            "rank": 1,
            "tokens": 1318,
            "span_id": "KMeans",
            "file_path": "sklearn/cluster/_k_means.py"
          },
          {
            "rank": 1,
            "tokens": 125,
            "span_id": "KMeans.__init__",
            "file_path": "sklearn/cluster/_k_means.py"
          },
          {
            "rank": 1,
            "tokens": 87,
            "span_id": "KMeans._check_test_data",
            "file_path": "sklearn/cluster/_k_means.py"
          },
          {
            "rank": 1,
            "tokens": 1292,
            "span_id": "KMeans.fit",
            "file_path": "sklearn/cluster/_k_means.py"
          },
          {
            "rank": 1,
            "tokens": 171,
            "span_id": "KMeans.fit_predict",
            "file_path": "sklearn/cluster/_k_means.py"
          },
          {
            "rank": 1,
            "tokens": 215,
            "span_id": "KMeans.fit_transform",
            "file_path": "sklearn/cluster/_k_means.py"
          },
          {
            "rank": 1,
            "tokens": 135,
            "span_id": "KMeans.transform",
            "file_path": "sklearn/cluster/_k_means.py"
          },
          {
            "rank": 1,
            "tokens": 28,
            "span_id": "KMeans._transform",
            "file_path": "sklearn/cluster/_k_means.py"
          },
          {
            "rank": 1,
            "tokens": 211,
            "span_id": "KMeans.predict",
            "file_path": "sklearn/cluster/_k_means.py"
          },
          {
            "rank": 1,
            "tokens": 191,
            "span_id": "KMeans.score",
            "file_path": "sklearn/cluster/_k_means.py"
          },
          {
            "rank": 2,
            "tokens": 199,
            "span_id": "check_clusterings",
            "file_path": "sklearn/metrics/cluster/_supervised.py"
          },
          {
            "rank": 2,
            "tokens": 2446,
            "span_id": "check_array",
            "file_path": "sklearn/utils/validation.py"
          },
          {
            "rank": 3,
            "tokens": 1184,
            "span_id": "adjusted_mutual_info_score",
            "file_path": "sklearn/metrics/cluster/_supervised.py"
          },
          {
            "rank": 3,
            "tokens": 123,
            "span_id": "check_consistent_length",
            "file_path": "sklearn/utils/validation.py"
          },
          {
            "rank": 4,
            "tokens": 200,
            "span_id": "docstring",
            "file_path": "sklearn/metrics/cluster/_supervised.py"
          },
          {
            "rank": 4,
            "tokens": 44,
            "span_id": "_comb2",
            "file_path": "sklearn/metrics/cluster/_supervised.py"
          },
          {
            "rank": 5,
            "tokens": 44,
            "span_id": "_is_arraylike",
            "file_path": "sklearn/utils/validation.py"
          },
          {
            "rank": 5,
            "tokens": 198,
            "span_id": "_num_samples",
            "file_path": "sklearn/utils/validation.py"
          },
          {
            "rank": 6,
            "tokens": 301,
            "span_id": "check_scalar",
            "file_path": "sklearn/utils/validation.py"
          },
          {
            "rank": 7,
            "tokens": 942,
            "span_id": "silhouette_samples",
            "file_path": "sklearn/metrics/cluster/_unsupervised.py"
          },
          {
            "rank": 8,
            "tokens": 89,
            "span_id": "_check_rows_and_columns",
            "file_path": "sklearn/metrics/cluster/_bicluster.py"
          },
          {
            "rank": 8,
            "tokens": 32,
            "span_id": "imports",
            "file_path": "sklearn/metrics/cluster/_bicluster.py"
          },
          {
            "rank": 8,
            "tokens": 178,
            "span_id": "column_or_1d",
            "file_path": "sklearn/utils/validation.py"
          },
          {
            "rank": 10,
            "tokens": 411,
            "span_id": "_check_sample_weight",
            "file_path": "sklearn/utils/validation.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves a regression in the input validation of clustering metrics in `mutual_info_score`. Specifically, it mentions encountering a `ValueError` when using the function with a specific input type that worked in a previous version without warnings. The key elements to focus on from the issue are the occurrences of `mutual_info_score` and how it handles different input types, specifically strings. A detailed examination of the relevant code spans in `sklearn/metrics/cluster/_supervised.py` and `sklearn/utils/validation.py` reveals the functions and their inputs which are potentially responsible for the validation checks and the computation of mutual information scores. These functions are `check_array`, `check_clusterings`, and `mutual_info_score`. The spans involving these functions and their handling of input types ('numeric' and 'object') should be closely examined to identify where the issue might lie. The initial report does not mention the specific version change that introduced the regression, but understanding how inputs are being validated in the functions listed above and comparing it to the behavior described in the issue will help pinpoint the regression.",
            "identified_spans": [
              {
                "span_ids": [
                  "check_clusterings",
                  "mutual_info_score"
                ],
                "file_path": "sklearn/metrics/cluster/_supervised.py"
              },
              {
                "span_ids": [
                  "check_array",
                  "check_consistent_length"
                ],
                "file_path": "sklearn/utils/validation.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 5338,
          "output_tokens": 363,
          "retry_message": null,
          "completion_cost": 0.021459
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The reported issue involves a regression in input validation of clustering metrics, specifically related to the handling of string data in the mutual_info_score function. The provided file context includes the mutual_info_score function and related utility functions such as check_array, check_consistent_length, and check_clusterings. These functions are relevant as they handle input validation and data type checking, which are central to the issue at hand. The input validation functions appear to be designed to handle numeric data and do not explicitly address string data. This suggests that the relevant code for addressing the issue is indeed present, indicating that the necessary areas for modification are identified. Thus, the file context is sufficient to start addressing the issue.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 3824,
          "output_tokens": 183,
          "retry_message": null,
          "completion_cost": 0.014217
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "check_clusterings",
            "file_path": "sklearn/metrics/cluster/_supervised.py",
            "scratch_pad": "The issue involves the conversion of string inputs to a numeric type, which is causing a ValueError. The solution is to ensure that the input arrays (labels_true and labels_pred) are not forced into a numeric dtype when they contain string data. This change should be made in the check_clusterings function where the inputs are validated.",
            "instructions": "Modify the check_clusterings function to handle string inputs without attempting to convert them to a numeric dtype. Specifically, update the check_array calls to ensure that strings are not converted to numeric types."
          },
          "output": {
            "span_id": "check_clusterings",
            "end_line": 61,
            "file_path": "sklearn/metrics/cluster/_supervised.py",
            "start_line": 34,
            "instructions": "Modify the check_clusterings function to handle string inputs without attempting to convert them to a numeric dtype. Specifically, update the check_array calls to ensure that strings are not converted to numeric types."
          },
          "input_tokens": 4033,
          "output_tokens": 183,
          "retry_message": null,
          "completion_cost": 0.014844
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "check_clusterings",
        "end_line": 61,
        "file_path": "sklearn/metrics/cluster/_supervised.py",
        "max_tokens": 1000,
        "start_line": 34,
        "temperature": 1.6,
        "instructions": "Modify the check_clusterings function to handle string inputs without attempting to convert them to a numeric dtype. Specifically, update the check_array calls to ensure that strings are not converted to numeric types.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```\n<replace>\ndef check_clusterings(labels_true, labels_pred):\n    \"\"\"Check that the labels arrays are 1D and of same dimension.\n\n    Parameters\n    ----------\n    labels_true : array-like of shape (n_samples,)\n        The true labels.\n\n    labels_pred : array-like of shape (n_samples,)\n        The predicted labels.\n    \"\"\"\n    labels_true = check_array(\n        labels_true, ensure_2d=False, ensure_min_samples=0, dtype=None\n    )\n    labels_pred = check_array(\n        labels_pred, ensure_2d=False, ensure_min_samples=0, dtype=None\n    )\n\n    # input checks\n    if labels_true.ndim != 1:\n        raise ValueError(\n            \"labels_true must be 1D: shape is %r\" % (labels_true.shape,))\n    if labels_pred.ndim != 1:\n        raise ValueError(\n            \"labels_pred must be 1D: shape is %r\" % (labels_pred.shape,))\n    check_consistent_length(labels_true, labels_pred)\n\n    return labels_true, labels_pred\n</replace>"
          },
          "output": {
            "diff": "--- sklearn/metrics/cluster/_supervised.py\n+++ sklearn/metrics/cluster/_supervised.py\n@@ -43,10 +43,10 @@\n         The predicted labels.\n     \"\"\"\n     labels_true = check_array(\n-        labels_true, ensure_2d=False, ensure_min_samples=0\n+        labels_true, ensure_2d=False, ensure_min_samples=0, dtype=None\n     )\n     labels_pred = check_array(\n-        labels_pred, ensure_2d=False, ensure_min_samples=0\n+        labels_pred, ensure_2d=False, ensure_min_samples=0, dtype=None\n     )\n \n     # input checks\n",
            "message": "Applied the change to sklearn/metrics/cluster/_supervised.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 5876,
          "output_tokens": 291,
          "retry_message": null,
          "completion_cost": 0.021993000000000002
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sklearn/metrics/cluster/_supervised.py\n+++ sklearn/metrics/cluster/_supervised.py\n@@ -43,10 +43,10 @@\n         The predicted labels.\n     \"\"\"\n     labels_true = check_array(\n-        labels_true, ensure_2d=False, ensure_min_samples=0\n+        labels_true, ensure_2d=False, ensure_min_samples=0, dtype=None\n     )\n     labels_pred = check_array(\n-        labels_pred, ensure_2d=False, ensure_min_samples=0\n+        labels_pred, ensure_2d=False, ensure_min_samples=0, dtype=None\n     )\n \n     # input checks\n",
        "model": "deepseek-coder",
        "message": "Applied the change to sklearn/metrics/cluster/_supervised.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue has been resolved by modifying the check_clusterings function to handle string inputs without converting them to a numeric dtype. This change ensures that the input arrays can contain string data as expected, without causing a ValueError during input validation.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The changes implemented in the check_clusterings function have successfully addressed the issue of converting string inputs to a numeric dtype, which was causing the ValueError. The updated code now ensures that strings are not converted to numeric types by setting the dtype parameter to None in the check_array calls. This maintains the original dtype of the input arrays, allowing them to contain string data without attempting to convert them to numeric types.",
            "instructions": null
          },
          "output": {
            "message": "The issue has been resolved by modifying the check_clusterings function to handle string inputs without converting them to a numeric dtype. This change ensures that the input arrays can contain string data as expected, without causing a ValueError during input validation."
          },
          "input_tokens": 4444,
          "output_tokens": 191,
          "retry_message": null,
          "completion_cost": 0.016197
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue has been resolved by modifying the check_clusterings function to handle string inputs without converting them to a numeric dtype. This change ensures that the input arrays can contain string data as expected, without causing a ValueError during input validation.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "regression in input validation of clustering metrics\n```python\r\nfrom sklearn.metrics.cluster import mutual_info_score\r\nimport numpy as np\r\n\r\nx = np.random.choice(['a', 'b'], size=20).astype(object)\r\nmutual_info_score(x, x)\r\n```\r\nValueError: could not convert string to float: 'b'\r\n\r\nwhile\r\n```python\r\nx = np.random.choice(['a', 'b'], size=20)\r\nmutual_info_score(x, x)\r\n```\r\nworks with a warning?\r\n\r\nthis worked in 0.21.1 without a warning (as I think it should)\r\n\r\n\r\nEdit by @ogrisel: I removed the `.astype(object)` in the second code snippet.\n"
}