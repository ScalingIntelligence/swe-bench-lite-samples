{
  "info": {
    "duration": 163.94050097465515,
    "submission": "diff --git a/django/forms/models.py b/django/forms/models.py\nindex 8b8be56b3b..ab75be574d 100644\n--- a/django/forms/models.py\n+++ b/django/forms/models.py\n@@ -1241,8 +1241,9 @@ class ModelChoiceField(ChoiceField):\n                 return value.serializable_value(self.to_field_name)\n             else:\n                 return value.pk\n+        elif isinstance(value, enum.Enum):\n+            return value.value\n         return super().prepare_value(value)\n-\n     def to_python(self, value):\n         if value in self.empty_values:\n             return None\n",
    "total_cost": 0.11221500000000001,
    "instance_id": "django__django-11964",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves the type discrepancy when using TextChoices/IntegerChoices in Django models. The value returned by the getter of the field should match the type of the field itself (e.g., str for a CharField). The test illustrates that the value is not returning the expected primitive type but rather an enum value, leading to failures in string comparisons. The relevant files identified include 'django/db/models/enums.py', 'django/db/models/fields/__init__.py', 'django/forms/models.py', and others. Given this, the search should focus on these files specifically to check how values are being handled and returned in the context of enum choices.",
            "search_requests": [
              {
                "query": "TextChoices or IntegerChoices value type discrepancy",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "django/db/models/enums.py",
                "function_names": []
              },
              {
                "query": "handling of enum choices in fields",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "django/db/models/fields/__init__.py",
                "function_names": []
              },
              {
                "query": "choices in form fields",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "django/forms/models.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 34,
                "span_id": "ChoicesMeta.names",
                "file_path": "django/db/models/enums.py"
              },
              {
                "rank": 0,
                "tokens": 17,
                "span_id": "ChoicesMeta.values",
                "file_path": "django/db/models/enums.py"
              },
              {
                "rank": 0,
                "tokens": 16,
                "span_id": "IntegerChoices",
                "file_path": "django/db/models/enums.py"
              },
              {
                "rank": 0,
                "tokens": 17,
                "span_id": "TextChoices._generate_next_value_",
                "file_path": "django/db/models/enums.py"
              },
              {
                "rank": 0,
                "tokens": 42,
                "span_id": "ChoicesMeta.choices",
                "file_path": "django/db/models/enums.py"
              },
              {
                "rank": 0,
                "tokens": 46,
                "span_id": "ChoicesMeta.__contains__",
                "file_path": "django/db/models/enums.py"
              },
              {
                "rank": 0,
                "tokens": 16,
                "span_id": "ChoicesMeta.labels",
                "file_path": "django/db/models/enums.py"
              },
              {
                "rank": 0,
                "tokens": 19,
                "span_id": "Choices",
                "file_path": "django/db/models/enums.py"
              },
              {
                "rank": 0,
                "tokens": 15,
                "span_id": "TextChoices",
                "file_path": "django/db/models/enums.py"
              },
              {
                "rank": 0,
                "tokens": 415,
                "span_id": "Field._check_choices",
                "file_path": "django/db/models/fields/__init__.py"
              },
              {
                "rank": 1,
                "tokens": 213,
                "span_id": "Field.get_choices",
                "file_path": "django/db/models/fields/__init__.py"
              },
              {
                "rank": 2,
                "tokens": 41,
                "span_id": "Field.value_to_string",
                "file_path": "django/db/models/fields/__init__.py"
              },
              {
                "rank": 2,
                "tokens": 18,
                "span_id": "Field.save_form_data",
                "file_path": "django/db/models/fields/__init__.py"
              },
              {
                "rank": 2,
                "tokens": 13,
                "span_id": "Field:35",
                "file_path": "django/db/models/fields/__init__.py"
              },
              {
                "rank": 2,
                "tokens": 61,
                "span_id": "Field._get_flatchoices",
                "file_path": "django/db/models/fields/__init__.py"
              },
              {
                "rank": 3,
                "tokens": 189,
                "span_id": "_load_field",
                "file_path": "django/db/models/fields/__init__.py"
              },
              {
                "rank": 3,
                "tokens": 325,
                "span_id": "imports",
                "file_path": "django/db/models/fields/__init__.py"
              },
              {
                "rank": 3,
                "tokens": 4,
                "span_id": "Empty",
                "file_path": "django/db/models/fields/__init__.py"
              },
              {
                "rank": 0,
                "tokens": 148,
                "span_id": "ModelChoiceField._get_choices",
                "file_path": "django/forms/models.py"
              },
              {
                "rank": 1,
                "tokens": 20,
                "span_id": "ModelChoiceIterator.choice",
                "file_path": "django/forms/models.py"
              },
              {
                "rank": 1,
                "tokens": 71,
                "span_id": "ModelChoiceIterator.__len__",
                "file_path": "django/forms/models.py"
              },
              {
                "rank": 1,
                "tokens": 20,
                "span_id": "ModelChoiceIterator.__bool__",
                "file_path": "django/forms/models.py"
              },
              {
                "rank": 1,
                "tokens": 5,
                "span_id": "ModelChoiceIterator",
                "file_path": "django/forms/models.py"
              },
              {
                "rank": 1,
                "tokens": 68,
                "span_id": "ModelChoiceIterator.__iter__",
                "file_path": "django/forms/models.py"
              },
              {
                "rank": 2,
                "tokens": 50,
                "span_id": "ModelChoiceField.has_changed",
                "file_path": "django/forms/models.py"
              },
              {
                "rank": 2,
                "tokens": 13,
                "span_id": "ModelChoiceField.validate",
                "file_path": "django/forms/models.py"
              },
              {
                "rank": 2,
                "tokens": 13,
                "span_id": "ModelChoiceField:9",
                "file_path": "django/forms/models.py"
              }
            ],
            "search_requests": [
              {
                "query": "TextChoices or IntegerChoices value type discrepancy",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "django/db/models/enums.py",
                "function_names": []
              },
              {
                "query": "handling of enum choices in fields",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "django/db/models/fields/__init__.py",
                "function_names": []
              },
              {
                "query": "choices in form fields",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "django/forms/models.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 3282,
          "output_tokens": 289,
          "retry_message": null,
          "completion_cost": 0.014181000000000001
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 34,
            "span_id": "ChoicesMeta.names",
            "file_path": "django/db/models/enums.py"
          },
          {
            "rank": 0,
            "tokens": 17,
            "span_id": "ChoicesMeta.values",
            "file_path": "django/db/models/enums.py"
          },
          {
            "rank": 0,
            "tokens": 16,
            "span_id": "IntegerChoices",
            "file_path": "django/db/models/enums.py"
          },
          {
            "rank": 0,
            "tokens": 17,
            "span_id": "TextChoices._generate_next_value_",
            "file_path": "django/db/models/enums.py"
          },
          {
            "rank": 0,
            "tokens": 42,
            "span_id": "ChoicesMeta.choices",
            "file_path": "django/db/models/enums.py"
          },
          {
            "rank": 0,
            "tokens": 46,
            "span_id": "ChoicesMeta.__contains__",
            "file_path": "django/db/models/enums.py"
          },
          {
            "rank": 0,
            "tokens": 16,
            "span_id": "ChoicesMeta.labels",
            "file_path": "django/db/models/enums.py"
          },
          {
            "rank": 0,
            "tokens": 19,
            "span_id": "Choices",
            "file_path": "django/db/models/enums.py"
          },
          {
            "rank": 0,
            "tokens": 15,
            "span_id": "TextChoices",
            "file_path": "django/db/models/enums.py"
          },
          {
            "rank": 0,
            "tokens": 415,
            "span_id": "Field._check_choices",
            "file_path": "django/db/models/fields/__init__.py"
          },
          {
            "rank": 1,
            "tokens": 213,
            "span_id": "Field.get_choices",
            "file_path": "django/db/models/fields/__init__.py"
          },
          {
            "rank": 2,
            "tokens": 41,
            "span_id": "Field.value_to_string",
            "file_path": "django/db/models/fields/__init__.py"
          },
          {
            "rank": 2,
            "tokens": 18,
            "span_id": "Field.save_form_data",
            "file_path": "django/db/models/fields/__init__.py"
          },
          {
            "rank": 2,
            "tokens": 13,
            "span_id": "Field:35",
            "file_path": "django/db/models/fields/__init__.py"
          },
          {
            "rank": 2,
            "tokens": 61,
            "span_id": "Field._get_flatchoices",
            "file_path": "django/db/models/fields/__init__.py"
          },
          {
            "rank": 3,
            "tokens": 189,
            "span_id": "_load_field",
            "file_path": "django/db/models/fields/__init__.py"
          },
          {
            "rank": 3,
            "tokens": 325,
            "span_id": "imports",
            "file_path": "django/db/models/fields/__init__.py"
          },
          {
            "rank": 3,
            "tokens": 4,
            "span_id": "Empty",
            "file_path": "django/db/models/fields/__init__.py"
          },
          {
            "rank": 0,
            "tokens": 148,
            "span_id": "ModelChoiceField._get_choices",
            "file_path": "django/forms/models.py"
          },
          {
            "rank": 1,
            "tokens": 20,
            "span_id": "ModelChoiceIterator.choice",
            "file_path": "django/forms/models.py"
          },
          {
            "rank": 1,
            "tokens": 71,
            "span_id": "ModelChoiceIterator.__len__",
            "file_path": "django/forms/models.py"
          },
          {
            "rank": 1,
            "tokens": 20,
            "span_id": "ModelChoiceIterator.__bool__",
            "file_path": "django/forms/models.py"
          },
          {
            "rank": 1,
            "tokens": 5,
            "span_id": "ModelChoiceIterator",
            "file_path": "django/forms/models.py"
          },
          {
            "rank": 1,
            "tokens": 68,
            "span_id": "ModelChoiceIterator.__iter__",
            "file_path": "django/forms/models.py"
          },
          {
            "rank": 2,
            "tokens": 50,
            "span_id": "ModelChoiceField.has_changed",
            "file_path": "django/forms/models.py"
          },
          {
            "rank": 2,
            "tokens": 13,
            "span_id": "ModelChoiceField.validate",
            "file_path": "django/forms/models.py"
          },
          {
            "rank": 2,
            "tokens": 13,
            "span_id": "ModelChoiceField:9",
            "file_path": "django/forms/models.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue concerns the type of values returned by fields with choices pointing to IntegerChoices or TextChoices in Django models. The analysis of the search results provides insights into the mechanics of how choices are managed and how values are retrieved. Relevant code spans are identified in the `django/db/models/enums.py` and `django/db/models/fields/__init__.py` files. These spans include the definitions of `IntegerChoices`, `TextChoices`, and their associated methods, as well as the `Field` class which is foundational for all field types in Django models. The `ChoicesMeta` class and its methods are particularly relevant as they define how choices are processed and accessed. Additionally, the `Field.__init__` method and `Field.validate` method in `django/db/models/fields/__init__.py` are important for understanding how field initialization and validation interact with choices. The `ModelChoiceField` in `django/forms/models.py` is also relevant as it demonstrates how model choices are handled in forms. This analysis ensures a comprehensive understanding of the issue's context in the Django codebase, aiding in pinpointing the exact code spans related to the reported issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "ChoicesMeta",
                  "ChoicesMeta.__contains__",
                  "ChoicesMeta.names",
                  "ChoicesMeta.choices",
                  "ChoicesMeta.labels",
                  "ChoicesMeta.values",
                  "Choices",
                  "IntegerChoices",
                  "TextChoices",
                  "TextChoices._generate_next_value_"
                ],
                "file_path": "django/db/models/enums.py"
              },
              {
                "span_ids": [
                  "Field.__init__",
                  "Field._check_choices",
                  "Field.get_choices",
                  "Field.value_to_string",
                  "Field._get_flatchoices",
                  "Field:35",
                  "Field.save_form_data",
                  "Field.validate"
                ],
                "file_path": "django/db/models/fields/__init__.py"
              },
              {
                "span_ids": [
                  "ModelChoiceIterator",
                  "ModelChoiceIterator.__init__",
                  "ModelChoiceIterator.__iter__",
                  "ModelChoiceIterator.__len__",
                  "ModelChoiceIterator.__bool__",
                  "ModelChoiceIterator.choice",
                  "ModelChoiceField",
                  "ModelChoiceField.__init__",
                  "ModelChoiceField._get_choices",
                  "ModelChoiceField:9",
                  "ModelChoiceField.validate",
                  "ModelChoiceField.has_changed"
                ],
                "file_path": "django/forms/models.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 6375,
          "output_tokens": 661,
          "retry_message": null,
          "completion_cost": 0.02904
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context provided includes the relevant code for handling TextChoices and IntegerChoices in Django models, specifically within 'django/db/models/enums.py', 'django/db/models/fields/__init__.py', and 'django/forms/models.py'. The code includes the definitions for ChoicesMeta, Choices, IntegerChoices, and TextChoices, as well as the Field class which includes handling for choices. The relevant parts of the code that deal with the handling and validation of choices are present, suggesting that the necessary context for addressing the issue regarding type discrepancies in TextChoices/IntegerChoices has been included.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 5267,
          "output_tokens": 173,
          "retry_message": null,
          "completion_cost": 0.018396
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "ModelChoiceField",
            "file_path": "django/forms/models.py",
            "scratch_pad": "The issue involves ensuring that the value of a TextChoices/IntegerChoices field is of the correct type when retrieved from the database. Currently, the value returns as an enum member, which causes issues when comparing it to its raw database value in tests. The solution involves ensuring that the value returned is the actual raw value stored in the database, not the enum member itself.",
            "instructions": "Modify the `ModelChoiceField` class to ensure that the value returned is the actual raw value stored in the database, not the enum member itself. This involves overriding the `prepare_value` method to return the `.value` attribute of the enum member if it is an instance of the enum class."
          },
          "output": {
            "span_id": "ModelChoiceField",
            "file_path": "django/forms/models.py",
            "instructions": "Modify the `ModelChoiceField` class to ensure that the value returned is the actual raw value stored in the database, not the enum member itself. This involves overriding the `prepare_value` method to return the `.value` attribute of the enum member if it is an instance of the enum class."
          },
          "input_tokens": 7035,
          "output_tokens": 195,
          "retry_message": null,
          "completion_cost": 0.024030000000000003
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "ModelChoiceField",
        "end_line": null,
        "file_path": "django/forms/models.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Modify the `ModelChoiceField` class to ensure that the value returned is the actual raw value stored in the database, not the enum member itself. This involves overriding the `prepare_value` method to return the `.value` attribute of the enum member if it is an instance of the enum class.\n\nThe task requires modifying the `prepare_value` method to check if the value is an instance of the enum class and if so, return its `.value` attribute. The existing method is found on line 1238 through 1245.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 1245,
            "start_line": 1238,
            "scratch_pad": "The task requires modifying the `prepare_value` method to check if the value is an instance of the enum class and if so, return its `.value` attribute. The existing method is found on line 1238 through 1245."
          },
          "output": {
            "span_id": "ModelChoiceField",
            "end_line": 1245,
            "file_path": "django/forms/models.py",
            "start_line": 1238,
            "instructions": "Modify the `ModelChoiceField` class to ensure that the value returned is the actual raw value stored in the database, not the enum member itself. This involves overriding the `prepare_value` method to return the `.value` attribute of the enum member if it is an instance of the enum class.\n\nThe task requires modifying the `prepare_value` method to check if the value is an instance of the enum class and if so, return its `.value` attribute. The existing method is found on line 1238 through 1245."
          },
          "input_tokens": 1081,
          "output_tokens": 94,
          "retry_message": null,
          "completion_cost": 0.004653
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "ModelChoiceField",
        "end_line": 1245,
        "file_path": "django/forms/models.py",
        "max_tokens": 1000,
        "start_line": 1238,
        "temperature": 1.6,
        "instructions": "Modify the `ModelChoiceField` class to ensure that the value returned is the actual raw value stored in the database, not the enum member itself. This involves overriding the `prepare_value` method to return the `.value` attribute of the enum member if it is an instance of the enum class.\n\nThe task requires modifying the `prepare_value` method to check if the value is an instance of the enum class and if so, return its `.value` attribute. The existing method is found on line 1238 through 1245.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\n    def prepare_value(self, value):\n        if hasattr(value, '_meta'):\n            if self.to_field_name:\n                return value.serializable_value(self.to_field_name)\n            else:\n                return value.pk\n        elif isinstance(value, enum.Enum):\n            return value.value\n        return super().prepare_value(value)\n\n</replace>"
          },
          "output": {
            "diff": "--- django/forms/models.py\n+++ django/forms/models.py\n@@ -1241,8 +1241,9 @@\n                 return value.serializable_value(self.to_field_name)\n             else:\n                 return value.pk\n+        elif isinstance(value, enum.Enum):\n+            return value.value\n         return super().prepare_value(value)\n-\n     def to_python(self, value):\n         if value in self.empty_values:\n             return None\n",
            "message": "Applied the change to django/forms/models.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": [
              {
                "code": "E0602",
                "line": 1244,
                "message": "Undefined variable 'enum'",
                "file_path": "django/forms/models.py"
              }
            ]
          },
          "input_tokens": 6810,
          "output_tokens": 99,
          "retry_message": null,
          "completion_cost": 0.021915
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- django/forms/models.py\n+++ django/forms/models.py\n@@ -1241,8 +1241,9 @@\n                 return value.serializable_value(self.to_field_name)\n             else:\n                 return value.pk\n+        elif isinstance(value, enum.Enum):\n+            return value.value\n         return super().prepare_value(value)\n-\n     def to_python(self, value):\n         if value in self.empty_values:\n             return None\n",
        "model": "deepseek-coder",
        "message": "Applied the change to django/forms/models.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [
          {
            "code": "E0602",
            "line": 1244,
            "message": "Undefined variable 'enum'",
            "file_path": "django/forms/models.py"
          }
        ],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "imports",
            "file_path": "django/forms/models.py",
            "scratch_pad": "Lint error occurred due to an undefined variable 'enum'. This is because the 'enum' module was not imported in the file 'django/forms/models.py'. To resolve this, we need to add the import statement for 'enum' at the beginning of the file",
            "instructions": "Add an import statement for 'enum' at the beginning of 'django/forms/models.py' to resolve the undefined variable error."
          },
          "output": null,
          "input_tokens": 8325,
          "output_tokens": 154,
          "retry_message": "Span not found: imports. Available spans: ModelChoiceIterator.__iter__, ModelChoiceField, ModelChoiceIterator.__bool__, ModelChoiceField.__init__, ModelChoiceField._get_choices, ModelChoiceIterator.choice, ModelChoiceField:9, ModelChoiceIterator.__init__, ModelChoiceField.validate, ModelChoiceIterator.__len__, ModelChoiceIterator, ModelChoiceField.has_changed, ModelMultipleChoiceField, ModelMultipleChoiceField.__init__",
          "completion_cost": 0.027285
        },
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": null,
            "file_path": "django/forms/models.py",
            "scratch_pad": "The 'imports' span has been marked as unavailable. Based on the error indicating that 'enum' is an undefined variable, and the available spans listed, it seems the import needs to be added at the top of the file outside any specific span. The create the 'imports' span as it doesn't currently exist.",
            "instructions": "Add an import statement for 'enum' at the beginning of 'django/forms/models.py'."
          },
          "output": null,
          "input_tokens": 8579,
          "output_tokens": 157,
          "retry_message": "You must either provide an apply_change action or finish.",
          "completion_cost": 0.028092
        },
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": null,
            "file_path": "django/forms/models.py",
            "scratch_pad": "The error indicates that the 'enum' module is not imported in 'django/forms/models.py'. To resolve this, we need to add an 'import enum' statement at the beginning of the file outside of any existing span since the 'imports' span does not exist.",
            "instructions": "Insert 'import enum' at the beginning of 'django/forms/models.py' to resolve the undefined variable error."
          },
          "output": null,
          "input_tokens": 8755,
          "output_tokens": 151,
          "retry_message": "You must either provide an apply_change action or finish.",
          "completion_cost": 0.02853
        }
      ]
    }
  ],
  "initial_message": "The value of a TextChoices/IntegerChoices field has a differing type\nDescription\n\t\nIf we create an instance of a model having a CharField or IntegerField with the keyword choices pointing to IntegerChoices or TextChoices, the value returned by the getter of the field will be of the same type as the one created by enum.Enum (enum value).\nFor example, this model:\nfrom django.db import models\nfrom django.utils.translation import gettext_lazy as _\nclass MyChoice(models.TextChoices):\n\tFIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n\tSECOND_CHOICE = \"second\", _(\"The second choice, it is\")\nclass MyObject(models.Model):\n\tmy_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\nThen this test:\nfrom django.test import TestCase\nfrom testing.pkg.models import MyObject, MyChoice\nclass EnumTest(TestCase):\n\tdef setUp(self) -> None:\n\t\tself.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n\tdef test_created_object_is_str(self):\n\t\tmy_object = self.my_object\n\t\tself.assertIsInstance(my_object.my_str_value, str)\n\t\tself.assertEqual(str(my_object.my_str_value), \"first\")\n\tdef test_retrieved_object_is_str(self):\n\t\tmy_object = MyObject.objects.last()\n\t\tself.assertIsInstance(my_object.my_str_value, str)\n\t\tself.assertEqual(str(my_object.my_str_value), \"first\")\nAnd then the results:\n(django30-venv) \u279c django30 ./manage.py test\nCreating test database for alias 'default'...\nSystem check identified no issues (0 silenced).\nF.\n======================================================================\nFAIL: test_created_object_is_str (testing.tests.EnumTest)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n File \"/Users/mikailkocak/Development/django30/testing/tests.py\", line 14, in test_created_object_is_str\n\tself.assertEqual(str(my_object.my_str_value), \"first\")\nAssertionError: 'MyChoice.FIRST_CHOICE' != 'first'\n- MyChoice.FIRST_CHOICE\n+ first\n----------------------------------------------------------------------\nRan 2 tests in 0.002s\nFAILED (failures=1)\nWe notice when invoking __str__(...) we don't actually get the value property of the enum value which can lead to some unexpected issues, especially when communicating to an external API with a freshly created instance that will send MyEnum.MyValue, and the one that was retrieved would send my_value.\n"
}