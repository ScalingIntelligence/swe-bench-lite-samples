{
  "info": {
    "duration": 170.1051995754242,
    "submission": "diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py\nindex d610dc86f0..d0fd59f7e9 100644\n--- a/django/db/models/fields/__init__.py\n+++ b/django/db/models/fields/__init__.py\n@@ -1014,6 +1014,8 @@ class CharField(Field):\n \n     def get_prep_value(self, value):\n         value = super().get_prep_value(value)\n+        if isinstance(value, enum.Enum):\n+            value = value.value\n         return self.to_python(value)\n \n     def formfield(self, **kwargs):\n",
    "total_cost": 0.083598,
    "instance_id": "django__django-11964",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue revolves around the type inconsistency when using TextChoices/IntegerChoices in Django models. Specifically, when a CharField or IntegerField with choices pointing to IntegerChoices or TextChoices is used, the value returned by the field's getter should be of the same type as the one created by enum.Enum. This inconsistency can lead to issues, especially in external API communication. The search should focus on the implementation of these choices within the Django core to understand how the value is retrieved and processed.",
            "search_requests": [
              {
                "query": "IntegerChoices and TextChoices type inconsistency",
                "class_names": [
                  "IntegerChoices",
                  "TextChoices"
                ],
                "code_snippet": null,
                "file_pattern": "django/db/models/enums.py",
                "function_names": []
              },
              {
                "query": "CharField and IntegerField with choices pointing to IntegerChoices or TextChoices",
                "class_names": [
                  "CharField",
                  "IntegerField"
                ],
                "code_snippet": null,
                "file_pattern": "django/db/models/fields/__init__.py",
                "function_names": [
                  "get_choices",
                  "value_to_string",
                  "formfield"
                ]
              },
              {
                "query": "ModelChoiceField and ChoiceField handling of IntegerChoices or TextChoices",
                "class_names": [
                  "ModelChoiceField",
                  "ChoiceField"
                ],
                "code_snippet": null,
                "file_pattern": "django/forms/models.py",
                "function_names": [
                  "label_from_instance",
                  "_get_choices",
                  "prepare_value",
                  "to_python",
                  "validate"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 16,
                "span_id": "IntegerChoices",
                "file_path": "django/db/models/enums.py"
              },
              {
                "rank": 0,
                "tokens": 17,
                "span_id": "TextChoices._generate_next_value_",
                "file_path": "django/db/models/enums.py"
              },
              {
                "rank": 0,
                "tokens": 15,
                "span_id": "TextChoices",
                "file_path": "django/db/models/enums.py"
              },
              {
                "rank": 0,
                "tokens": 89,
                "span_id": "TextField.formfield",
                "file_path": "django/db/models/fields/__init__.py"
              },
              {
                "rank": 1,
                "tokens": 213,
                "span_id": "Field.get_choices",
                "file_path": "django/db/models/fields/__init__.py"
              },
              {
                "rank": 2,
                "tokens": 106,
                "span_id": "CharField.formfield",
                "file_path": "django/db/models/fields/__init__.py"
              },
              {
                "rank": 2,
                "tokens": 11,
                "span_id": "CharField.get_internal_type",
                "file_path": "django/db/models/fields/__init__.py"
              },
              {
                "rank": 2,
                "tokens": 23,
                "span_id": "CharField.get_prep_value",
                "file_path": "django/db/models/fields/__init__.py"
              },
              {
                "rank": 2,
                "tokens": 32,
                "span_id": "CharField.cast_db_type",
                "file_path": "django/db/models/fields/__init__.py"
              },
              {
                "rank": 2,
                "tokens": 24,
                "span_id": "CharField.to_python",
                "file_path": "django/db/models/fields/__init__.py"
              },
              {
                "rank": 3,
                "tokens": 29,
                "span_id": "IntegerField.formfield",
                "file_path": "django/db/models/fields/__init__.py"
              },
              {
                "rank": 3,
                "tokens": 47,
                "span_id": "BigIntegerField.formfield",
                "file_path": "django/db/models/fields/__init__.py"
              },
              {
                "rank": 0,
                "tokens": 50,
                "span_id": "ModelChoiceField.has_changed",
                "file_path": "django/forms/models.py"
              },
              {
                "rank": 0,
                "tokens": 13,
                "span_id": "ModelChoiceField.validate",
                "file_path": "django/forms/models.py"
              },
              {
                "rank": 0,
                "tokens": 13,
                "span_id": "ModelChoiceField:9",
                "file_path": "django/forms/models.py"
              },
              {
                "rank": 0,
                "tokens": 85,
                "span_id": "ModelChoiceField.to_python",
                "file_path": "django/forms/models.py"
              },
              {
                "rank": 0,
                "tokens": 42,
                "span_id": "ModelChoiceField.prepare_value",
                "file_path": "django/forms/models.py"
              },
              {
                "rank": 1,
                "tokens": 148,
                "span_id": "ModelChoiceField._get_choices",
                "file_path": "django/forms/models.py"
              },
              {
                "rank": 2,
                "tokens": 62,
                "span_id": "ModelMultipleChoiceField.prepare_value",
                "file_path": "django/forms/models.py"
              },
              {
                "rank": 4,
                "tokens": 50,
                "span_id": "ModelChoiceField.label_from_instance",
                "file_path": "django/forms/models.py"
              },
              {
                "rank": 4,
                "tokens": 54,
                "span_id": "ModelChoiceField.get_limit_choices_to",
                "file_path": "django/forms/models.py"
              }
            ],
            "search_requests": [
              {
                "query": "IntegerChoices and TextChoices type inconsistency",
                "class_names": [
                  "IntegerChoices",
                  "TextChoices"
                ],
                "code_snippet": null,
                "file_pattern": "django/db/models/enums.py",
                "function_names": []
              },
              {
                "query": "CharField and IntegerField with choices pointing to IntegerChoices or TextChoices",
                "class_names": [
                  "CharField",
                  "IntegerField"
                ],
                "code_snippet": null,
                "file_pattern": "django/db/models/fields/__init__.py",
                "function_names": [
                  "get_choices",
                  "value_to_string",
                  "formfield"
                ]
              },
              {
                "query": "ModelChoiceField and ChoiceField handling of IntegerChoices or TextChoices",
                "class_names": [
                  "ModelChoiceField",
                  "ChoiceField"
                ],
                "code_snippet": null,
                "file_pattern": "django/forms/models.py",
                "function_names": [
                  "label_from_instance",
                  "_get_choices",
                  "prepare_value",
                  "to_python",
                  "validate"
                ]
              }
            ]
          },
          "input_tokens": 3282,
          "output_tokens": 406,
          "retry_message": null,
          "completion_cost": 0.015936
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 16,
            "span_id": "IntegerChoices",
            "file_path": "django/db/models/enums.py"
          },
          {
            "rank": 0,
            "tokens": 17,
            "span_id": "TextChoices._generate_next_value_",
            "file_path": "django/db/models/enums.py"
          },
          {
            "rank": 0,
            "tokens": 15,
            "span_id": "TextChoices",
            "file_path": "django/db/models/enums.py"
          },
          {
            "rank": 0,
            "tokens": 89,
            "span_id": "TextField.formfield",
            "file_path": "django/db/models/fields/__init__.py"
          },
          {
            "rank": 1,
            "tokens": 213,
            "span_id": "Field.get_choices",
            "file_path": "django/db/models/fields/__init__.py"
          },
          {
            "rank": 2,
            "tokens": 106,
            "span_id": "CharField.formfield",
            "file_path": "django/db/models/fields/__init__.py"
          },
          {
            "rank": 2,
            "tokens": 11,
            "span_id": "CharField.get_internal_type",
            "file_path": "django/db/models/fields/__init__.py"
          },
          {
            "rank": 2,
            "tokens": 23,
            "span_id": "CharField.get_prep_value",
            "file_path": "django/db/models/fields/__init__.py"
          },
          {
            "rank": 2,
            "tokens": 32,
            "span_id": "CharField.cast_db_type",
            "file_path": "django/db/models/fields/__init__.py"
          },
          {
            "rank": 2,
            "tokens": 24,
            "span_id": "CharField.to_python",
            "file_path": "django/db/models/fields/__init__.py"
          },
          {
            "rank": 3,
            "tokens": 29,
            "span_id": "IntegerField.formfield",
            "file_path": "django/db/models/fields/__init__.py"
          },
          {
            "rank": 3,
            "tokens": 47,
            "span_id": "BigIntegerField.formfield",
            "file_path": "django/db/models/fields/__init__.py"
          },
          {
            "rank": 0,
            "tokens": 50,
            "span_id": "ModelChoiceField.has_changed",
            "file_path": "django/forms/models.py"
          },
          {
            "rank": 0,
            "tokens": 13,
            "span_id": "ModelChoiceField.validate",
            "file_path": "django/forms/models.py"
          },
          {
            "rank": 0,
            "tokens": 13,
            "span_id": "ModelChoiceField:9",
            "file_path": "django/forms/models.py"
          },
          {
            "rank": 0,
            "tokens": 85,
            "span_id": "ModelChoiceField.to_python",
            "file_path": "django/forms/models.py"
          },
          {
            "rank": 0,
            "tokens": 42,
            "span_id": "ModelChoiceField.prepare_value",
            "file_path": "django/forms/models.py"
          },
          {
            "rank": 1,
            "tokens": 148,
            "span_id": "ModelChoiceField._get_choices",
            "file_path": "django/forms/models.py"
          },
          {
            "rank": 2,
            "tokens": 62,
            "span_id": "ModelMultipleChoiceField.prepare_value",
            "file_path": "django/forms/models.py"
          },
          {
            "rank": 4,
            "tokens": 50,
            "span_id": "ModelChoiceField.label_from_instance",
            "file_path": "django/forms/models.py"
          },
          {
            "rank": 4,
            "tokens": 54,
            "span_id": "ModelChoiceField.get_limit_choices_to",
            "file_path": "django/forms/models.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue pertains to the differing type returned by the getter of a CharField or IntegerField when the 'choices' keyword points to IntegerChoices or TextChoices in a Django model. This issue is evident in the provided test where the value returned by the field getter is of enum type rather than the expected string or integer type.\n\nTo address this, we need to focus on the relevant parts of the Django codebase that deal with these field types and their choice handling. The provided search results include key components:\n\n1. **Enums Definition**: `django/db/models/enums.py` has definitions for `IntegerChoices` and `TextChoices`, which inherit from `enum.Enum` and handle the choice enumeration.\n\n2. **Field Initialization**: `django/db/models/fields/__init__.py` contains various field classes, including `CharField` and `IntegerField`, where the 'choices' parameter is set and processed.\n\n3. **Field Value Conversion**: The `to_python` and `get_prep_value` methods in `CharField` are crucial for ensuring that values are converted to the expected types when fetched from the database.\n\nGiven the issue is about type discrepancies in fetched values, the key spans to focus on are those in `django/db/models/fields/__init__.py` where field initialization and value conversion are handled, particularly for `CharField`.\n\nThe relevant spans are:\n- `CharField.__init__` for understanding how choices are set during field initialization.\n- `CharField.to_python` and `CharField.get_prep_value` to ensure that the value received from the database is converted to a string as expected.\n\nThese code spans directly relate to the reported problem of type inconsistency when using fields with choices.",
            "identified_spans": [
              {
                "span_ids": [
                  "CharField.__init__",
                  "CharField.to_python",
                  "CharField.get_prep_value"
                ],
                "file_path": "django/db/models/fields/__init__.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4952,
          "output_tokens": 477,
          "retry_message": null,
          "completion_cost": 0.022011000000000003
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context provides a detailed look into the CharField class within Django's model fields, which is directly relevant to the issue at hand. The methods 'to_python' and 'get_prep_value' are crucial as they handle the conversion of field values to Python objects and their preparation for database insertion, respectively. These methods are likely where the type consistency should be ensured when using fields with choices from IntegerChoices or TextChoices. Given the context provided, it appears that all relevant parts necessary to understand and address the issue are included.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 2121,
          "output_tokens": 151,
          "retry_message": null,
          "completion_cost": 0.008628
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "CharField.get_prep_value",
            "file_path": "django/db/models/fields/__init__.py",
            "scratch_pad": "The issue involves the inconsistency in the type returned by the getter of a field with choices defined by TextChoices or IntegerChoices. The expected behavior is for the getter to return the actual value of the choice, but it currently returns the enum member itself. This can lead to discrepancies when dealing with external APIs or other string/integer comparisons. The solution involves ensuring that when retrieving the value of a field with choices, we return the actual value rather than the enum member. The change should be made in the `get_prep_value` method of the `CharField` class to handle this scenario.",
            "instructions": "Update the `get_prep_value` method in the `CharField` class to ensure it returns the actual value of the choice rather than the enum member when dealing with TextChoices or IntegerChoices."
          },
          "output": {
            "span_id": "CharField.get_prep_value",
            "end_line": 1017,
            "file_path": "django/db/models/fields/__init__.py",
            "start_line": 1015,
            "instructions": "Update the `get_prep_value` method in the `CharField` class to ensure it returns the actual value of the choice rather than the enum member when dealing with TextChoices or IntegerChoices."
          },
          "input_tokens": 3054,
          "output_tokens": 229,
          "retry_message": null,
          "completion_cost": 0.012597
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "CharField.get_prep_value",
        "end_line": 1017,
        "file_path": "django/db/models/fields/__init__.py",
        "max_tokens": 1000,
        "start_line": 1015,
        "temperature": 1.6,
        "instructions": "Update the `get_prep_value` method in the `CharField` class to ensure it returns the actual value of the choice rather than the enum member when dealing with TextChoices or IntegerChoices.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\n    def get_prep_value(self, value):\n        value = super().get_prep_value(value)\n        if isinstance(value, enum.Enum):\n            value = value.value\n        return self.to_python(value)\n</replace>"
          },
          "output": {
            "diff": "--- django/db/models/fields/__init__.py\n+++ django/db/models/fields/__init__.py\n@@ -1014,6 +1014,8 @@\n \n     def get_prep_value(self, value):\n         value = super().get_prep_value(value)\n+        if isinstance(value, enum.Enum):\n+            value = value.value\n         return self.to_python(value)\n \n     def formfield(self, **kwargs):\n",
            "message": "Applied the change to django/db/models/fields/__init__.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": [
              {
                "code": "E0602",
                "line": 1017,
                "message": "Undefined variable 'enum'",
                "file_path": "django/db/models/fields/__init__.py"
              }
            ]
          },
          "input_tokens": 2836,
          "output_tokens": 66,
          "retry_message": null,
          "completion_cost": 0.009498
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- django/db/models/fields/__init__.py\n+++ django/db/models/fields/__init__.py\n@@ -1014,6 +1014,8 @@\n \n     def get_prep_value(self, value):\n         value = super().get_prep_value(value)\n+        if isinstance(value, enum.Enum):\n+            value = value.value\n         return self.to_python(value)\n \n     def formfield(self, **kwargs):\n",
        "model": "deepseek-coder",
        "message": "Applied the change to django/db/models/fields/__init__.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [
          {
            "code": "E0602",
            "line": 1017,
            "message": "Undefined variable 'enum'",
            "file_path": "django/db/models/fields/__init__.py"
          }
        ],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "imports",
            "file_path": "django/db/models/fields/__init__.py",
            "scratch_pad": "The lint error encountered is due to the undefined 'enum' variable. This issue can be resolved by importing the 'enum' module at the beginning of the file.",
            "instructions": "Add the import statement 'import enum' at the beginning of the file to resolve the undefined 'enum' variable lint error."
          },
          "output": {
            "span_id": "imports",
            "end_line": 39,
            "file_path": "django/db/models/fields/__init__.py",
            "start_line": 1,
            "instructions": "Add the import statement 'import enum' at the beginning of the file to resolve the undefined 'enum' variable lint error."
          },
          "input_tokens": 4316,
          "output_tokens": 132,
          "retry_message": null,
          "completion_cost": 0.014928
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "imports",
        "end_line": 39,
        "file_path": "django/db/models/fields/__init__.py",
        "max_tokens": 1000,
        "start_line": 1,
        "temperature": 1.6,
        "instructions": "Add the import statement 'import enum' at the beginning of the file to resolve the undefined 'enum' variable lint error.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```json\n{\n  \"replace\": \"import collections.abc\\nimport copy\\nimport datetime\\nimport decimal\\nimport operator\\nimport uuid\\nimport warnings\\nimport enum\\nfrom base64 import b64decode, b64encode\\nfrom functools import partialmethod, total_ordering\\n\\nfrom django import forms\\nfrom django.apps import apps\\nfrom django.conf import settings\\nfrom django.core import checks, exceptions, validators\\nfrom django.db import connection, connections, router\\nfrom django.db.models.constants import LOOKUP_SEP\\nfrom django.db.models.query_utils import DeferredAttribute, RegisterLookupMixin\\nfrom django.utils import timezone\\nfrom django.utils.datastructures import DictWrapper\\nfrom django.utils.dateparse import (\\n    parse_date, parse_datetime, parse_duration, parse_time,\\n)\\nfrom django.utils.duration import duration_microseconds, duration_string\\nfrom django.utils.functional import Promise, cached_property\\nfrom django.utils.ipv6 import clean_ipv6_address\\nfrom django.utils.itercompat import is_iterable\\nfrom django.utils.text import capfirst\\nfrom django.utils.translation import gettext_lazy as _\\n\\n__all__ = [\\n    'AutoField', 'BLANK_CHOICE_DASH', 'BigAutoField', 'BigIntegerField',\\n    'BinaryField', 'BooleanField', 'CharField', 'CommaSeparatedIntegerField',\\n    'DateField', 'DateTimeField', 'DecimalField', 'DurationField',\\n    'EmailField', 'Empty', 'Field', 'FilePathField', 'FloatField',\\n    'GenericIPAddressField', 'IPAddressField', 'IntegerField', 'NOT_PROVIDED',\\n    'NullBooleanField', 'PositiveIntegerField', 'PositiveSmallIntegerField',\\n    'SlugField', 'SmallAutoField', 'SmallIntegerField', 'TextField',\\n    'TimeField', 'URLField', 'UUIDField',\\n]\"\n}\n```"
          },
          "output": null,
          "input_tokens": 4030,
          "output_tokens": 459,
          "retry_message": "You did not provide any code in the replace tag. If you want to reject the instructions, use the reject function.",
          "completion_cost": 0.018975
        },
        {
          "action": {
            "content": "```json\n{\n  \"reject\": \"The task does not require modifying the existing code but rather adding an import statement at the beginning of the file context.\"\n}\n```"
          },
          "output": null,
          "input_tokens": 4520,
          "output_tokens": 37,
          "retry_message": "You did not provide any code in the replace tag. If you want to reject the instructions, use the reject function.",
          "completion_cost": 0.014115
        },
        {
          "action": {
            "content": "```json\n{\n  \"replace\": \"import enum\"\n}\n```"
          },
          "output": null,
          "input_tokens": 4588,
          "output_tokens": 17,
          "retry_message": "You did not provide any code in the replace tag. If you want to reject the instructions, use the reject function.",
          "completion_cost": 0.014019
        }
      ]
    }
  ],
  "initial_message": "The value of a TextChoices/IntegerChoices field has a differing type\nDescription\n\t\nIf we create an instance of a model having a CharField or IntegerField with the keyword choices pointing to IntegerChoices or TextChoices, the value returned by the getter of the field will be of the same type as the one created by enum.Enum (enum value).\nFor example, this model:\nfrom django.db import models\nfrom django.utils.translation import gettext_lazy as _\nclass MyChoice(models.TextChoices):\n\tFIRST_CHOICE = \"first\", _(\"The first choice, it is\")\n\tSECOND_CHOICE = \"second\", _(\"The second choice, it is\")\nclass MyObject(models.Model):\n\tmy_str_value = models.CharField(max_length=10, choices=MyChoice.choices)\nThen this test:\nfrom django.test import TestCase\nfrom testing.pkg.models import MyObject, MyChoice\nclass EnumTest(TestCase):\n\tdef setUp(self) -> None:\n\t\tself.my_object = MyObject.objects.create(my_str_value=MyChoice.FIRST_CHOICE)\n\tdef test_created_object_is_str(self):\n\t\tmy_object = self.my_object\n\t\tself.assertIsInstance(my_object.my_str_value, str)\n\t\tself.assertEqual(str(my_object.my_str_value), \"first\")\n\tdef test_retrieved_object_is_str(self):\n\t\tmy_object = MyObject.objects.last()\n\t\tself.assertIsInstance(my_object.my_str_value, str)\n\t\tself.assertEqual(str(my_object.my_str_value), \"first\")\nAnd then the results:\n(django30-venv) \u279c django30 ./manage.py test\nCreating test database for alias 'default'...\nSystem check identified no issues (0 silenced).\nF.\n======================================================================\nFAIL: test_created_object_is_str (testing.tests.EnumTest)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n File \"/Users/mikailkocak/Development/django30/testing/tests.py\", line 14, in test_created_object_is_str\n\tself.assertEqual(str(my_object.my_str_value), \"first\")\nAssertionError: 'MyChoice.FIRST_CHOICE' != 'first'\n- MyChoice.FIRST_CHOICE\n+ first\n----------------------------------------------------------------------\nRan 2 tests in 0.002s\nFAILED (failures=1)\nWe notice when invoking __str__(...) we don't actually get the value property of the enum value which can lead to some unexpected issues, especially when communicating to an external API with a freshly created instance that will send MyEnum.MyValue, and the one that was retrieved would send my_value.\n"
}