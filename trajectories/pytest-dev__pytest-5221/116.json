{
  "info": {
    "duration": 137.41445446014404,
    "submission": "diff --git a/src/_pytest/python.py b/src/_pytest/python.py\nindex 377357846..545c5f4d8 100644\n--- a/src/_pytest/python.py\n+++ b/src/_pytest/python.py\n@@ -1343,9 +1343,9 @@ def _showfixtures_main(config, session):\n         if verbose <= 0 and argname[0] == \"_\":\n             continue\n         if verbose > 0:\n-            funcargspec = \"%s -- %s\" % (argname, bestrel)\n+            funcargspec = \"%s -- %s (scope=%s)\" % (argname, bestrel, fixturedef.scope)\n         else:\n-            funcargspec = argname\n+            funcargspec = \"%s (scope=%s)\" % (argname, fixturedef.scope)\n         tw.line(funcargspec, green=True)\n         loc = getlocation(fixturedef.func, curdir)\n         doc = fixturedef.func.__doc__ or \"\"\n",
    "total_cost": 0.126639,
    "instance_id": "pytest-dev__pytest-5221",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue pertains to enhancing the `pytest --fixtures` command to display fixture scopes. The current method to learn about fixture scopes is through documentation or source code inspection. Relevant files and functions have been identified in the 'src' and 'testing' directories, particularly those involved in fixture management and testing. The search should focus on functions and classes related to fixture handling, especially those that define or interact with fixture scopes. The `pytest_cmdline_main` and `showfixtures` functions are likely points of interest, as they are involved in the command-line interface and fixture display respectively.",
            "search_requests": [
              {
                "query": "display fixture scopes with pytest --fixtures",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/src/_pytest/**/*.py",
                "function_names": [
                  "showfixtures",
                  "pytest_cmdline_main",
                  "pytest_fixture_setup",
                  "pytest_fixture_post_finalizer"
                ]
              },
              {
                "query": "test fixture scopes",
                "class_names": [
                  "TestFixtureUsages",
                  "TestFixtureMarker",
                  "TestShowFixtures",
                  "TestContextManagerFixtureFuncs",
                  "TestScopeOrdering"
                ],
                "code_snippet": null,
                "file_pattern": "**/testing/python/**/*.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 1,
                "tokens": 22,
                "span_id": "showfixtures",
                "file_path": "src/_pytest/python.py"
              },
              {
                "rank": 4,
                "tokens": 37,
                "span_id": "pytest_cmdline_main",
                "file_path": "src/_pytest/python.py"
              },
              {
                "rank": 3,
                "tokens": 28,
                "span_id": "pytest_cmdline_main",
                "file_path": "src/_pytest/setuponly.py"
              },
              {
                "rank": 5,
                "tokens": 123,
                "span_id": "pytest_fixture_setup",
                "file_path": "src/_pytest/setuponly.py"
              },
              {
                "rank": 5,
                "tokens": 58,
                "span_id": "pytest_fixture_post_finalizer",
                "file_path": "src/_pytest/setuponly.py"
              },
              {
                "rank": 28,
                "tokens": 143,
                "span_id": "pytest_fixture_setup",
                "file_path": "src/_pytest/fixtures.py"
              },
              {
                "rank": 20,
                "tokens": 34,
                "span_id": "pytest_cmdline_main",
                "file_path": "src/_pytest/setupplan.py"
              },
              {
                "rank": 20,
                "tokens": 57,
                "span_id": "pytest_fixture_setup",
                "file_path": "src/_pytest/setupplan.py"
              },
              {
                "rank": 64,
                "tokens": 31,
                "span_id": "pytest_cmdline_main",
                "file_path": "src/_pytest/cacheprovider.py"
              },
              {
                "rank": 51,
                "tokens": 40,
                "span_id": "pytest_cmdline_main",
                "file_path": "src/_pytest/helpconfig.py"
              },
              {
                "rank": 52,
                "tokens": 100,
                "span_id": "pytest_cmdline_main",
                "file_path": "src/_pytest/mark/__init__.py"
              },
              {
                "rank": 55,
                "tokens": 53,
                "span_id": "pytest_fixture_post_finalizer",
                "file_path": "src/_pytest/hookspec.py"
              },
              {
                "rank": 55,
                "tokens": 97,
                "span_id": "pytest_fixture_setup",
                "file_path": "src/_pytest/hookspec.py"
              },
              {
                "rank": 0,
                "tokens": 492,
                "span_id": "TestFixtureMarker.test_class_ordering",
                "file_path": "testing/python/fixtures.py"
              },
              {
                "rank": 1,
                "tokens": 141,
                "span_id": "TestFixtureUsages.test_usefixtures_marker",
                "file_path": "testing/python/fixtures.py"
              },
              {
                "rank": 2,
                "tokens": 153,
                "span_id": "TestFixtureMarker.test_class_scope_with_normal_tests",
                "file_path": "testing/python/fixtures.py"
              },
              {
                "rank": 3,
                "tokens": 232,
                "span_id": "TestFixtureMarker.test_class_scope_parametrization_ordering",
                "file_path": "testing/python/fixtures.py"
              },
              {
                "rank": 5,
                "tokens": 145,
                "span_id": "TestContextManagerFixtureFuncs.test_scoped",
                "file_path": "testing/python/fixtures.py"
              },
              {
                "rank": 7,
                "tokens": 258,
                "span_id": "TestScopeOrdering.test_func_closure_all_scopes_complex",
                "file_path": "testing/python/fixtures.py"
              },
              {
                "rank": 8,
                "tokens": 139,
                "span_id": "TestFixtureMarker.test_scope_module_uses_session",
                "file_path": "testing/python/fixtures.py"
              },
              {
                "rank": 9,
                "tokens": 136,
                "span_id": "TestFixtureMarker.test_scope_session",
                "file_path": "testing/python/fixtures.py"
              },
              {
                "rank": 10,
                "tokens": 47,
                "span_id": "TestFixtureUsages.test_usefixtures_seen_in_showmarkers",
                "file_path": "testing/python/fixtures.py"
              },
              {
                "rank": 10,
                "tokens": 96,
                "span_id": "TestFixtureUsages.test_request_instance_issue203",
                "file_path": "testing/python/fixtures.py"
              },
              {
                "rank": 11,
                "tokens": 100,
                "span_id": "TestScopeOrdering.test_func_closure_module",
                "file_path": "testing/python/fixtures.py"
              },
              {
                "rank": 12,
                "tokens": 200,
                "span_id": "TestScopeOrdering.test_func_closure_scopes_reordered",
                "file_path": "testing/python/fixtures.py"
              },
              {
                "rank": 13,
                "tokens": 90,
                "span_id": "TestFixtureUsages.test_invalid_scope",
                "file_path": "testing/python/fixtures.py"
              }
            ],
            "search_requests": [
              {
                "query": "display fixture scopes with pytest --fixtures",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/src/_pytest/**/*.py",
                "function_names": [
                  "showfixtures",
                  "pytest_cmdline_main",
                  "pytest_fixture_setup",
                  "pytest_fixture_post_finalizer"
                ]
              },
              {
                "query": "test fixture scopes",
                "class_names": [
                  "TestFixtureUsages",
                  "TestFixtureMarker",
                  "TestShowFixtures",
                  "TestContextManagerFixtureFuncs",
                  "TestScopeOrdering"
                ],
                "code_snippet": null,
                "file_pattern": "**/testing/python/**/*.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 2842,
          "output_tokens": 320,
          "retry_message": null,
          "completion_cost": 0.013326000000000001
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 1,
            "tokens": 22,
            "span_id": "showfixtures",
            "file_path": "src/_pytest/python.py"
          },
          {
            "rank": 4,
            "tokens": 37,
            "span_id": "pytest_cmdline_main",
            "file_path": "src/_pytest/python.py"
          },
          {
            "rank": 3,
            "tokens": 28,
            "span_id": "pytest_cmdline_main",
            "file_path": "src/_pytest/setuponly.py"
          },
          {
            "rank": 5,
            "tokens": 123,
            "span_id": "pytest_fixture_setup",
            "file_path": "src/_pytest/setuponly.py"
          },
          {
            "rank": 5,
            "tokens": 58,
            "span_id": "pytest_fixture_post_finalizer",
            "file_path": "src/_pytest/setuponly.py"
          },
          {
            "rank": 28,
            "tokens": 143,
            "span_id": "pytest_fixture_setup",
            "file_path": "src/_pytest/fixtures.py"
          },
          {
            "rank": 20,
            "tokens": 34,
            "span_id": "pytest_cmdline_main",
            "file_path": "src/_pytest/setupplan.py"
          },
          {
            "rank": 20,
            "tokens": 57,
            "span_id": "pytest_fixture_setup",
            "file_path": "src/_pytest/setupplan.py"
          },
          {
            "rank": 64,
            "tokens": 31,
            "span_id": "pytest_cmdline_main",
            "file_path": "src/_pytest/cacheprovider.py"
          },
          {
            "rank": 51,
            "tokens": 40,
            "span_id": "pytest_cmdline_main",
            "file_path": "src/_pytest/helpconfig.py"
          },
          {
            "rank": 52,
            "tokens": 100,
            "span_id": "pytest_cmdline_main",
            "file_path": "src/_pytest/mark/__init__.py"
          },
          {
            "rank": 55,
            "tokens": 53,
            "span_id": "pytest_fixture_post_finalizer",
            "file_path": "src/_pytest/hookspec.py"
          },
          {
            "rank": 55,
            "tokens": 97,
            "span_id": "pytest_fixture_setup",
            "file_path": "src/_pytest/hookspec.py"
          },
          {
            "rank": 0,
            "tokens": 492,
            "span_id": "TestFixtureMarker.test_class_ordering",
            "file_path": "testing/python/fixtures.py"
          },
          {
            "rank": 1,
            "tokens": 141,
            "span_id": "TestFixtureUsages.test_usefixtures_marker",
            "file_path": "testing/python/fixtures.py"
          },
          {
            "rank": 2,
            "tokens": 153,
            "span_id": "TestFixtureMarker.test_class_scope_with_normal_tests",
            "file_path": "testing/python/fixtures.py"
          },
          {
            "rank": 3,
            "tokens": 232,
            "span_id": "TestFixtureMarker.test_class_scope_parametrization_ordering",
            "file_path": "testing/python/fixtures.py"
          },
          {
            "rank": 5,
            "tokens": 145,
            "span_id": "TestContextManagerFixtureFuncs.test_scoped",
            "file_path": "testing/python/fixtures.py"
          },
          {
            "rank": 7,
            "tokens": 258,
            "span_id": "TestScopeOrdering.test_func_closure_all_scopes_complex",
            "file_path": "testing/python/fixtures.py"
          },
          {
            "rank": 8,
            "tokens": 139,
            "span_id": "TestFixtureMarker.test_scope_module_uses_session",
            "file_path": "testing/python/fixtures.py"
          },
          {
            "rank": 9,
            "tokens": 136,
            "span_id": "TestFixtureMarker.test_scope_session",
            "file_path": "testing/python/fixtures.py"
          },
          {
            "rank": 10,
            "tokens": 47,
            "span_id": "TestFixtureUsages.test_usefixtures_seen_in_showmarkers",
            "file_path": "testing/python/fixtures.py"
          },
          {
            "rank": 10,
            "tokens": 96,
            "span_id": "TestFixtureUsages.test_request_instance_issue203",
            "file_path": "testing/python/fixtures.py"
          },
          {
            "rank": 11,
            "tokens": 100,
            "span_id": "TestScopeOrdering.test_func_closure_module",
            "file_path": "testing/python/fixtures.py"
          },
          {
            "rank": 12,
            "tokens": 200,
            "span_id": "TestScopeOrdering.test_func_closure_scopes_reordered",
            "file_path": "testing/python/fixtures.py"
          },
          {
            "rank": 13,
            "tokens": 90,
            "span_id": "TestFixtureUsages.test_invalid_scope",
            "file_path": "testing/python/fixtures.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "To understand the requirements of the issue, it is necessary to display fixture scopes when using 'pytest --fixtures'. Currently, the only way to learn the scope of a fixture is through docs or by examining the source code. Relevant code should include parts where fixtures are defined, and their scope is determined.\n\nStarting with the 'src/_pytest/python.py' file, the 'pytest_cmdline_main' function contains options like '--showfixtures' and '--show_fixtures_per_test', which might be relevant to displaying fixture information. The 'showfixtures' function seems to collect and display available fixtures, and this might be a good starting point. The '_showfixtures_main' function also seems relevant as it processes the fixtures and writes their information. Both 'showfixtures' and '_showfixtures_main' spans are marked as relevant.\n\nIn 'src/_pytest/setuponly.py', the '_show_fixture_action' function is used to display fixture actions. This function could be utilized to showcase fixture scopes during setup and teardown, suggesting it is relevant. The '_show_fixture_action' span should be included.\n\nIn 'src/_pytest/fixtures.py', the 'pytest_fixture_setup' function is responsible for setting up a fixture, which is completed. This suggests implementation around fixture handling and setup, but without immediate relevance to scope display, it's not included.\n\nAdditional files like 'src/_pytest/setupplan.py', 'src/_pytest/cacheprovider.py', 'src/_pytest/helpconfig.py', 'src/_pytest/mark/__init__.py', and 'src/_pytest/hookspec.py' handle specific pytest features like setup plan, cache, help configuration, markers, and hook specifications, respectively. While important for pytest functionality, they do not directly contribute to displaying fixture scopes.\n\nLastly, 'testing/python/fixtures.py' contains test cases around fixture usages and scope implications, indicating they are crucial for verifying fixture scope display functioning correctly in implementation, hence relevant. Classes like 'TestFixtureUsages' that test fixtures more closely relate to scope checks.\n\nGiven these analyses, the focus should be on 'src/_pytest/python.py' for fixture display logic and 'src/_pytest/setuponly.py' for action display specifics, followed by 'testing/python/fixtures.py' for testing scope display functions.",
            "identified_spans": [
              {
                "span_ids": [
                  "pytest_cmdline_main",
                  "showfixtures",
                  "_showfixtures_main"
                ],
                "file_path": "src/_pytest/python.py"
              },
              {
                "span_ids": [
                  "_show_fixture_action"
                ],
                "file_path": "src/_pytest/setuponly.py"
              },
              {
                "span_ids": [
                  "TestFixtureUsages"
                ],
                "file_path": "testing/python/fixtures.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 7048,
          "output_tokens": 677,
          "retry_message": null,
          "completion_cost": 0.031299
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context includes the relevant functions `pytest_cmdline_main`, `showfixtures`, and `_showfixtures_main` which are involved in displaying fixture information. Additionally, the `_show_fixture_action` function in `setuponly.py` directly handles the display of fixture scopes. These functions are responsible for the command-line interface and fixture display, which directly relate to the enhancement of the `pytest --fixtures` command to display fixture scopes. Therefore, I believe all relevant code for the reported issue has been provided in the file context.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 4775,
          "output_tokens": 153,
          "retry_message": null,
          "completion_cost": 0.016620000000000003
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "_showfixtures_main",
            "file_path": "src/_pytest/python.py",
            "scratch_pad": "To display fixture scopes with `pytest --fixtures`, we need to modify the `_showfixtures_main` function within `src/_pytest/python.py`. This function is responsible for displaying the fixtures information. By adding the fixture scope to the output, we can provide users with more detailed information about the fixtures.",
            "instructions": "Add the fixture scope to the output in the `_showfixtures_main` function. This can be done by including `scope=fixturedef.scope` in the `funcargspec` string and adjusting the output format to include this information."
          },
          "output": {
            "span_id": "_showfixtures_main",
            "end_line": 1355,
            "file_path": "src/_pytest/python.py",
            "start_line": 1303,
            "instructions": "Add the fixture scope to the output in the `_showfixtures_main` function. This can be done by including `scope=fixturedef.scope` in the `funcargspec` string and adjusting the output format to include this information."
          },
          "input_tokens": 5857,
          "output_tokens": 186,
          "retry_message": null,
          "completion_cost": 0.020361
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "_showfixtures_main",
        "end_line": 1355,
        "file_path": "src/_pytest/python.py",
        "max_tokens": 1000,
        "start_line": 1303,
        "temperature": 1.6,
        "instructions": "Add the fixture scope to the output in the `_showfixtures_main` function. This can be done by including `scope=fixturedef.scope` in the `funcargspec` string and adjusting the output format to include this information.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\ndef _showfixtures_main(config, session):\n    import _pytest.config\n\n    session.perform_collect()\n    curdir = py.path.local()\n    tw = _pytest.config.create_terminal_writer(config)\n    verbose = config.getvalue(\"verbose\")\n\n    fm = session._fixturemanager\n\n    available = []\n    seen = set()\n\n    for argname, fixturedefs in fm._arg2fixturedefs.items():\n        assert fixturedefs is not None\n        if not fixturedefs:\n            continue\n        for fixturedef in fixturedefs:\n            loc = getlocation(fixturedef.func, curdir)\n            if (fixturedef.argname, loc) in seen:\n                continue\n            seen.add((fixturedef.argname, loc))\n            available.append(\n                (\n                    len(fixturedef.baseid),\n                    fixturedef.func.__module__,\n                    curdir.bestrelpath(loc),\n                    fixturedef.argname,\n                    fixturedef,\n                )\n            )\n\n    available.sort()\n    currentmodule = None\n    for baseid, module, bestrel, argname, fixturedef in available:\n        if currentmodule != module:\n            if not module.startswith(\"_pytest.\"):\n                tw.line()\n                tw.sep(\"-\", \"fixtures defined from %s\" % (module,))\n                currentmodule = module\n        if verbose <= 0 and argname[0] == \"_\":\n            continue\n        if verbose > 0:\n            funcargspec = \"%s -- %s (scope=%s)\" % (argname, bestrel, fixturedef.scope)\n        else:\n            funcargspec = \"%s (scope=%s)\" % (argname, fixturedef.scope)\n        tw.line(funcargspec, green=True)\n        loc = getlocation(fixturedef.func, curdir)\n        doc = fixturedef.func.__doc__ or \"\"\n        if doc:\n            write_docstring(tw, doc)\n        else:\n            tw.line(\"    %s: no docstring available\" % (loc,), red=True)\n</replace>"
          },
          "output": {
            "diff": "--- src/_pytest/python.py\n+++ src/_pytest/python.py\n@@ -1343,9 +1343,9 @@\n         if verbose <= 0 and argname[0] == \"_\":\n             continue\n         if verbose > 0:\n-            funcargspec = \"%s -- %s\" % (argname, bestrel)\n+            funcargspec = \"%s -- %s (scope=%s)\" % (argname, bestrel, fixturedef.scope)\n         else:\n-            funcargspec = argname\n+            funcargspec = \"%s (scope=%s)\" % (argname, fixturedef.scope)\n         tw.line(funcargspec, green=True)\n         loc = getlocation(fixturedef.func, curdir)\n         doc = fixturedef.func.__doc__ or \"\"\n",
            "message": "Applied the change to src/_pytest/python.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 5482,
          "output_tokens": 500,
          "retry_message": null,
          "completion_cost": 0.023946
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- src/_pytest/python.py\n+++ src/_pytest/python.py\n@@ -1343,9 +1343,9 @@\n         if verbose <= 0 and argname[0] == \"_\":\n             continue\n         if verbose > 0:\n-            funcargspec = \"%s -- %s\" % (argname, bestrel)\n+            funcargspec = \"%s -- %s (scope=%s)\" % (argname, bestrel, fixturedef.scope)\n         else:\n-            funcargspec = argname\n+            funcargspec = \"%s (scope=%s)\" % (argname, fixturedef.scope)\n         tw.line(funcargspec, green=True)\n         loc = getlocation(fixturedef.func, curdir)\n         doc = fixturedef.func.__doc__ or \"\"\n",
        "model": "deepseek-coder",
        "message": "Applied the change to src/_pytest/python.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The fixture scope is now correctly displayed with the `pytest --fixtures` command, fulfilling the requirement to show fixture scopes directly from the command line output.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The initial change has been applied correctly to the `_showfixtures_main` function in `src/_pytest/python.py`. This change ensures that the fixture scope is displayed when using the `pytest --fixtures` command. This solves the issue as requested.",
            "instructions": null
          },
          "output": {
            "message": "The fixture scope is now correctly displayed with the `pytest --fixtures` command, fulfilling the requirement to show fixture scopes directly from the command line output."
          },
          "input_tokens": 6304,
          "output_tokens": 145,
          "retry_message": null,
          "completion_cost": 0.021087
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The fixture scope is now correctly displayed with the `pytest --fixtures` command, fulfilling the requirement to show fixture scopes directly from the command line output.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Display fixture scope with `pytest --fixtures`\nIt would be useful to show fixture scopes with `pytest --fixtures`; currently the only way to learn the scope of a fixture is look at the docs (when that is documented) or at the source code.\n"
}