{
  "info": {
    "duration": 136.274475812912,
    "submission": "diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py\nindex c4ed961ac..977e859e4 100644\n--- a/src/_pytest/_code/code.py\n+++ b/src/_pytest/_code/code.py\n@@ -537,9 +537,7 @@ class ExceptionInfo:\n     def __str__(self):\n         if self._excinfo is None:\n             return repr(self)\n-        entry = self.traceback[-1]\n-        loc = ReprFileLocation(entry.path, entry.lineno + 1, self.exconly())\n-        return str(loc)\n+        return str(self.value)\n \n     def match(self, regexp):\n         \"\"\"\n",
    "total_cost": 0.155097,
    "instance_id": "pytest-dev__pytest-5413",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves the behavior of the `str()` function when used with the `pytest.raises` context manager. The user observed that while a normal try-except block prints the full error message, the `pytest.raises` context manager prints a truncated version. The user suggests that the behavior could be changed to eliminate this 'gotcha'. The provided context includes various pytest source files, so the focus should be on deepening the understanding of how `pytest.raises` handles exceptions and if there's a reason for the differing behaviors.",
            "search_requests": [
              {
                "query": "Behavior of str() in pytest.raises",
                "class_names": [
                  "RaisesContext"
                ],
                "code_snippet": "def raises(expected_exception, *args, **kwargs):\n",
                "file_pattern": "**/_pytest/**/*.py",
                "function_names": [
                  "__enter__",
                  "__exit__"
                ]
              }
            ]
          },
          "output": null,
          "input_tokens": 3811,
          "output_tokens": 227,
          "retry_message": "\n\nUnfortunately, I didn\u2019t find any relevant results.",
          "completion_cost": 0.014838
        },
        {
          "action": {
            "complete": false,
            "scratch_pad": "Given that the initial search did not yield relevant results, it suggests that the issue might be deeply rooted in how pytest handles the context management of exceptions. The next search will focus on more generic parts of the codebase that might be involved in handling or representation of exceptions. This includes broader search for how exceptions are captured and processed in the pytest framework to gain more insights into the behavior of `pytest.raises`.",
            "search_requests": [
              {
                "query": "How pytest captures and handles exceptions in context management",
                "class_names": [
                  "ExceptionInfo",
                  "FormattedExcinfo",
                  "TerminalRepr"
                ],
                "code_snippet": null,
                "file_pattern": "**/_pytest/**/*.py",
                "function_names": [
                  "_repr_failure_py",
                  "repr_excinfo",
                  "toterminal"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 52,
                "span_id": "ExceptionChainRepr.toterminal",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 0,
                "tokens": 27,
                "span_id": "ReprExceptionInfo.toterminal",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 2,
                "tokens": 24,
                "span_id": "TerminalRepr.__repr__",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 2,
                "tokens": 28,
                "span_id": "ExceptionRepr.toterminal",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 2,
                "tokens": 5,
                "span_id": "TerminalRepr",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 2,
                "tokens": 55,
                "span_id": "TerminalRepr.__str__",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 4,
                "tokens": 296,
                "span_id": "FormattedExcinfo.repr_excinfo",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 5,
                "tokens": 61,
                "span_id": "ExceptionInfo._getreprcrash",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 5,
                "tokens": 121,
                "span_id": "ExceptionInfo.exconly",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 5,
                "tokens": 28,
                "span_id": "ExceptionInfo.errisinstance",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 7,
                "tokens": 146,
                "span_id": "ReprEntry.toterminal",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 11,
                "tokens": 255,
                "span_id": "FormattedExcinfo.repr_traceback_entry",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 12,
                "tokens": 129,
                "span_id": "FormattedExcinfo.repr_traceback",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 12,
                "tokens": 45,
                "span_id": "FormattedExcinfo._makepath",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 13,
                "tokens": 205,
                "span_id": "FormattedExcinfo.repr_locals",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 14,
                "tokens": 188,
                "span_id": "FormattedExcinfo.get_source",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 14,
                "tokens": 87,
                "span_id": "FormattedExcinfo.get_exconly",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 15,
                "tokens": 17,
                "span_id": "ReprLocals.toterminal",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 15,
                "tokens": 73,
                "span_id": "ReprFileLocation.toterminal",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 22,
                "tokens": 179,
                "span_id": "ExceptionInfo.from_current",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 22,
                "tokens": 64,
                "span_id": "ExceptionInfo",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 26,
                "tokens": 48,
                "span_id": "FormattedExcinfo.repr_args",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 26,
                "tokens": 107,
                "span_id": "FormattedExcinfo",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 26,
                "tokens": 72,
                "span_id": "FormattedExcinfo._getindent",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 1,
                "tokens": 295,
                "span_id": "Node._repr_failure_py",
                "file_path": "src/_pytest/nodes.py"
              },
              {
                "rank": 3,
                "tokens": 133,
                "span_id": "FixtureLookupErrorRepr.toterminal",
                "file_path": "src/_pytest/fixtures.py"
              }
            ],
            "search_requests": [
              {
                "query": "How pytest captures and handles exceptions in context management",
                "class_names": [
                  "ExceptionInfo",
                  "FormattedExcinfo",
                  "TerminalRepr"
                ],
                "code_snippet": null,
                "file_pattern": "**/_pytest/**/*.py",
                "function_names": [
                  "_repr_failure_py",
                  "repr_excinfo",
                  "toterminal"
                ]
              }
            ]
          },
          "input_tokens": 4069,
          "output_tokens": 229,
          "retry_message": null,
          "completion_cost": 0.015642
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 52,
            "span_id": "ExceptionChainRepr.toterminal",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 0,
            "tokens": 27,
            "span_id": "ReprExceptionInfo.toterminal",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 2,
            "tokens": 24,
            "span_id": "TerminalRepr.__repr__",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 2,
            "tokens": 28,
            "span_id": "ExceptionRepr.toterminal",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 2,
            "tokens": 5,
            "span_id": "TerminalRepr",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 2,
            "tokens": 55,
            "span_id": "TerminalRepr.__str__",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 4,
            "tokens": 296,
            "span_id": "FormattedExcinfo.repr_excinfo",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 5,
            "tokens": 61,
            "span_id": "ExceptionInfo._getreprcrash",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 5,
            "tokens": 121,
            "span_id": "ExceptionInfo.exconly",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 5,
            "tokens": 28,
            "span_id": "ExceptionInfo.errisinstance",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 7,
            "tokens": 146,
            "span_id": "ReprEntry.toterminal",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 11,
            "tokens": 255,
            "span_id": "FormattedExcinfo.repr_traceback_entry",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 12,
            "tokens": 129,
            "span_id": "FormattedExcinfo.repr_traceback",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 12,
            "tokens": 45,
            "span_id": "FormattedExcinfo._makepath",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 13,
            "tokens": 205,
            "span_id": "FormattedExcinfo.repr_locals",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 14,
            "tokens": 188,
            "span_id": "FormattedExcinfo.get_source",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 14,
            "tokens": 87,
            "span_id": "FormattedExcinfo.get_exconly",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 15,
            "tokens": 17,
            "span_id": "ReprLocals.toterminal",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 15,
            "tokens": 73,
            "span_id": "ReprFileLocation.toterminal",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 22,
            "tokens": 179,
            "span_id": "ExceptionInfo.from_current",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 22,
            "tokens": 64,
            "span_id": "ExceptionInfo",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 26,
            "tokens": 48,
            "span_id": "FormattedExcinfo.repr_args",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 26,
            "tokens": 107,
            "span_id": "FormattedExcinfo",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 26,
            "tokens": 72,
            "span_id": "FormattedExcinfo._getindent",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 1,
            "tokens": 295,
            "span_id": "Node._repr_failure_py",
            "file_path": "src/_pytest/nodes.py"
          },
          {
            "rank": 3,
            "tokens": 133,
            "span_id": "FixtureLookupErrorRepr.toterminal",
            "file_path": "src/_pytest/fixtures.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue concerns the behavior of the `str()` function when applied to the pytest.raises context variable, which differs from its behavior when catching exceptions normally. The user provided examples demonstrating this discrepancy and suggested a potential change in behavior to eliminate the 'gotcha' factor. The search results contain several key sections in the `src/_pytest/_code/code.py` file that are particularly relevant: 1. The `ExceptionInfo` class which manages exception information. 2. The `ExceptionInfo.from_current` method which constructs an ExceptionInfo instance from the current exception. 3. The `ExceptionInfo.exconly` method which returns the exception as a string. 4. The `ExceptionInfo.getrepr` method which provides a customizable string representation of the exception. Additionally, the `FormattedExcinfo` class and related methods manage the formatting of exception information. These code sections directly relate to how exceptions are captured, processed, and represented in pytest, thereby addressing the core of the reported issue. The `Node._repr_failure_py` method in `src/_pytest/nodes.py` also plays a significant role in how pytest reports failures, which could be relevant depending on how the `str()` behavior is ultimately modified.",
            "identified_spans": [
              {
                "span_ids": [
                  "ExceptionInfo",
                  "ExceptionInfo.from_current",
                  "ExceptionInfo.exconly",
                  "ExceptionInfo.getrepr",
                  "FormattedExcinfo",
                  "FormattedExcinfo.repr_args",
                  "FormattedExcinfo.get_source",
                  "FormattedExcinfo.get_exconly",
                  "FormattedExcinfo.repr_locals",
                  "FormattedExcinfo.repr_traceback_entry",
                  "FormattedExcinfo._makepath",
                  "FormattedExcinfo.repr_traceback",
                  "FormattedExcinfo.repr_excinfo"
                ],
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "span_ids": [
                  "Node._repr_failure_py"
                ],
                "file_path": "src/_pytest/nodes.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 7366,
          "output_tokens": 509,
          "retry_message": null,
          "completion_cost": 0.029733
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The provided file context contains relevant code from the `_pytest._code.code` module that handles exception information and tracebacks. Specifically, the `ExceptionInfo` class and its methods (`exconly`, `getrepr`, etc.) are involved in capturing and formatting exception details, which could be directly related to the issue of how exceptions are represented when using `pytest.raises`. Additionally, the `FormattedExcinfo` class and its methods (`repr_excinfo`, `repr_traceback`, etc.) also play a key role in formatting the traceback and exception information. The file context provided seems sufficient to understand and analyze the behavior of `pytest.raises` regarding exception representation. The issue described about the difference in behavior between a normal exception catch and `pytest.raises` is likely addressed by these parts of the code. Therefore, the file context provided seems complete for this analysis.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 5943,
          "output_tokens": 220,
          "retry_message": null,
          "completion_cost": 0.021129000000000002
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "ExceptionInfo.__str__",
            "file_path": "src/_pytest/_code/code.py",
            "scratch_pad": "The issue is related to the behavior of the `str()` method when applied to the `pytest.raises` context variable. Currently, it doesn't match the expected behavior when compared to normal exception catching. The goal is to modify the `__str__` method in the `ExceptionInfo` class to eliminate this discrepancy by returning the full error message instead of a truncated one.",
            "instructions": "Modify the `__str__` method of the `ExceptionInfo` class to return the full error message using `str(self.value)` instead of the current implementation that uses `self.exconly()`."
          },
          "output": {
            "span_id": "ExceptionInfo.__str__",
            "end_line": 542,
            "file_path": "src/_pytest/_code/code.py",
            "start_line": 537,
            "instructions": "Modify the `__str__` method of the `ExceptionInfo` class to return the full error message using `str(self.value)` instead of the current implementation that uses `self.exconly()`."
          },
          "input_tokens": 7260,
          "output_tokens": 183,
          "retry_message": null,
          "completion_cost": 0.024525
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "ExceptionInfo.__str__",
        "end_line": 542,
        "file_path": "src/_pytest/_code/code.py",
        "max_tokens": 1000,
        "start_line": 537,
        "temperature": 1.6,
        "instructions": "Modify the `__str__` method of the `ExceptionInfo` class to return the full error message using `str(self.value)` instead of the current implementation that uses `self.exconly()`.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```python\n<replace>\n    def __str__(self):\n        if self._excinfo is None:\n            return repr(self)\n        return str(self.value)\n</replace>"
          },
          "output": {
            "diff": "--- src/_pytest/_code/code.py\n+++ src/_pytest/_code/code.py\n@@ -537,9 +537,7 @@\n     def __str__(self):\n         if self._excinfo is None:\n             return repr(self)\n-        entry = self.traceback[-1]\n-        loc = ReprFileLocation(entry.path, entry.lineno + 1, self.exconly())\n-        return str(loc)\n+        return str(self.value)\n \n     def match(self, regexp):\n         \"\"\"\n",
            "message": "Applied the change to src/_pytest/_code/code.py.\n\n<scratch_pad>\n```python\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 7345,
          "output_tokens": 44,
          "retry_message": null,
          "completion_cost": 0.022695
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- src/_pytest/_code/code.py\n+++ src/_pytest/_code/code.py\n@@ -537,9 +537,7 @@\n     def __str__(self):\n         if self._excinfo is None:\n             return repr(self)\n-        entry = self.traceback[-1]\n-        loc = ReprFileLocation(entry.path, entry.lineno + 1, self.exconly())\n-        return str(loc)\n+        return str(self.value)\n \n     def match(self, regexp):\n         \"\"\"\n",
        "model": "deepseek-coder",
        "message": "Applied the change to src/_pytest/_code/code.py.\n\n<scratch_pad>\n```python\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue regarding the discrepancy between normal exception catching and using `pytest.raises` has been resolved by modifying the `__str__` method of the `ExceptionInfo` class. The changes made ensure that `str(e)` within the `pytest.raises` context prints the full error message, aligning its behavior with standard exception handling.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The change has been successfully applied by replacing the `__str__` method in the `ExceptionInfo` class to directly return the full error message using `str(self.value)`. This aligns with the behavior observed when catching exceptions normally. The `__str__` method no longer uses `self.exconly()` or constructs a `ReprFileLocation`, ensuring that the full error message is printed as intended when using `pytest.raises`.",
            "instructions": null
          },
          "output": {
            "message": "The issue regarding the discrepancy between normal exception catching and using `pytest.raises` has been resolved by modifying the `__str__` method of the `ExceptionInfo` class. The changes made ensure that `str(e)` within the `pytest.raises` context prints the full error message, aligning its behavior with standard exception handling."
          },
          "input_tokens": 7730,
          "output_tokens": 223,
          "retry_message": null,
          "completion_cost": 0.026535000000000003
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue regarding the discrepancy between normal exception catching and using `pytest.raises` has been resolved by modifying the `__str__` method of the `ExceptionInfo` class. The changes made ensure that `str(e)` within the `pytest.raises` context prints the full error message, aligning its behavior with standard exception handling.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "str() on the pytest.raises context variable doesn't behave same as normal exception catch\nPytest 4.6.2, macOS 10.14.5\r\n\r\n```Python\r\ntry:\r\n    raise LookupError(\r\n        f\"A\\n\"\r\n        f\"B\\n\"\r\n        f\"C\"\r\n    )\r\nexcept LookupError as e:\r\n    print(str(e))\r\n```\r\nprints\r\n\r\n> A\r\n> B\r\n> C\r\n\r\nBut\r\n\r\n```Python\r\nwith pytest.raises(LookupError) as e:\r\n    raise LookupError(\r\n        f\"A\\n\"\r\n        f\"B\\n\"\r\n        f\"C\"\r\n    )\r\n\r\nprint(str(e))\r\n```\r\n\r\nprints\r\n\r\n> <console>:3: LookupError: A\r\n\r\nIn order to get the full error message, one must do `str(e.value)`, which is documented, but this is a different interaction. Any chance the behavior could be changed to eliminate this gotcha?\r\n\r\n-----\r\n\r\nPip list gives\r\n\r\n```\r\nPackage            Version  Location\r\n------------------ -------- ------------------------------------------------------\r\napipkg             1.5\r\nasn1crypto         0.24.0\r\natomicwrites       1.3.0\r\nattrs              19.1.0\r\naws-xray-sdk       0.95\r\nboto               2.49.0\r\nboto3              1.9.51\r\nbotocore           1.12.144\r\ncertifi            2019.3.9\r\ncffi               1.12.3\r\nchardet            3.0.4\r\nClick              7.0\r\ncodacy-coverage    1.3.11\r\ncolorama           0.4.1\r\ncoverage           4.5.3\r\ncryptography       2.6.1\r\ndecorator          4.4.0\r\ndocker             3.7.2\r\ndocker-pycreds     0.4.0\r\ndocutils           0.14\r\necdsa              0.13.2\r\nexecnet            1.6.0\r\nfuture             0.17.1\r\nidna               2.8\r\nimportlib-metadata 0.17\r\nipaddress          1.0.22\r\nJinja2             2.10.1\r\njmespath           0.9.4\r\njsondiff           1.1.1\r\njsonpickle         1.1\r\njsonschema         2.6.0\r\nMarkupSafe         1.1.1\r\nmock               3.0.4\r\nmore-itertools     7.0.0\r\nmoto               1.3.7\r\nneobolt            1.7.10\r\nneotime            1.7.4\r\nnetworkx           2.1\r\nnumpy              1.15.0\r\npackaging          19.0\r\npandas             0.24.2\r\npip                19.1.1\r\npluggy             0.12.0\r\nprompt-toolkit     2.0.9\r\npy                 1.8.0\r\npy2neo             4.2.0\r\npyaml              19.4.1\r\npycodestyle        2.5.0\r\npycparser          2.19\r\npycryptodome       3.8.1\r\nPygments           2.3.1\r\npyOpenSSL          19.0.0\r\npyparsing          2.4.0\r\npytest             4.6.2\r\npytest-cache       1.0\r\npytest-codestyle   1.4.0\r\npytest-cov         2.6.1\r\npytest-forked      1.0.2\r\npython-dateutil    2.7.3\r\npython-jose        2.0.2\r\npytz               2018.5\r\nPyYAML             5.1\r\nrequests           2.21.0\r\nrequests-mock      1.5.2\r\nresponses          0.10.6\r\ns3transfer         0.1.13\r\nsetuptools         41.0.1\r\nsix                1.11.0\r\nsqlite3worker      1.1.7\r\ntabulate           0.8.3\r\nurllib3            1.24.3\r\nwcwidth            0.1.7\r\nwebsocket-client   0.56.0\r\nWerkzeug           0.15.2\r\nwheel              0.33.1\r\nwrapt              1.11.1\r\nxlrd               1.1.0\r\nxmltodict          0.12.0\r\nzipp               0.5.1\r\n```\n"
}