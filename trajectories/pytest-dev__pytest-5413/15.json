{
  "info": {
    "duration": 146.3083472251892,
    "submission": "diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py\nindex c4ed961ac..62a477211 100644\n--- a/src/_pytest/_code/code.py\n+++ b/src/_pytest/_code/code.py\n@@ -538,7 +538,7 @@ class ExceptionInfo:\n         if self._excinfo is None:\n             return repr(self)\n         entry = self.traceback[-1]\n-        loc = ReprFileLocation(entry.path, entry.lineno + 1, self.exconly())\n+        loc = ReprFileLocation(entry.path, entry.lineno + 1, self.exconly(tryshort=False))\n         return str(loc)\n \n     def match(self, regexp):\n",
    "total_cost": 0.134352,
    "instance_id": "pytest-dev__pytest-5413",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves the behavior of `str()` on the `pytest.raises` context variable compared to normal exception handling. The expected output from `str(e)` differs when using `pytest.raises` versus an ordinary `try-except` block. This discrepancy can be traced to how the context manager in pytest handles exception information. To address this, we need to investigate the `RaisesContext` class and its methods, particularly `__enter__` and `__exit__`, in `src/_pytest/python_api.py`. We should also look into `src/_pytest/nodes.py`, focusing on the `Node` class and its method `_repr_failure_py`, as this might influence how exceptions are represented. Additionally, examining `src/_pytest/_code/code.py` could be useful to understand how the `ExceptionInfo` class processes exception information. Finally, checking the tests in `testing/python/raises.py` might also provide insight into expected behavior.",
            "search_requests": [
              {
                "query": "context manager exception handling",
                "class_names": [
                  "RaisesContext"
                ],
                "code_snippet": "str(e)",
                "file_pattern": "**/python_api.py",
                "function_names": [
                  "__enter__",
                  "__exit__"
                ]
              },
              {
                "query": "exception representation in pytest",
                "class_names": [
                  "Node"
                ],
                "code_snippet": null,
                "file_pattern": "**/nodes.py",
                "function_names": [
                  "_repr_failure_py"
                ]
              },
              {
                "query": "handling exception information",
                "class_names": [
                  "ExceptionInfo"
                ],
                "code_snippet": null,
                "file_pattern": "**/_code/code.py",
                "function_names": [
                  "exconly",
                  "_getreprcrash"
                ]
              },
              {
                "query": "pytest context manager exception testing",
                "class_names": [
                  "TestRaises"
                ],
                "code_snippet": null,
                "file_pattern": "**/raises.py",
                "function_names": [
                  "test_raises",
                  "test_raises_as_contextmanager"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 6,
                "span_id": "Node:3",
                "file_path": "src/_pytest/nodes.py"
              },
              {
                "rank": 0,
                "tokens": 295,
                "span_id": "Node._repr_failure_py",
                "file_path": "src/_pytest/nodes.py"
              },
              {
                "rank": 3,
                "tokens": 30,
                "span_id": "Node.ihook",
                "file_path": "src/_pytest/nodes.py"
              },
              {
                "rank": 3,
                "tokens": 26,
                "span_id": "Node",
                "file_path": "src/_pytest/nodes.py"
              },
              {
                "rank": 3,
                "tokens": 26,
                "span_id": "Node.__repr__",
                "file_path": "src/_pytest/nodes.py"
              },
              {
                "rank": 4,
                "tokens": 5,
                "span_id": "Node.teardown",
                "file_path": "src/_pytest/nodes.py"
              },
              {
                "rank": 4,
                "tokens": 50,
                "span_id": "Node.listchain",
                "file_path": "src/_pytest/nodes.py"
              },
              {
                "rank": 0,
                "tokens": 61,
                "span_id": "ExceptionInfo._getreprcrash",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 0,
                "tokens": 121,
                "span_id": "ExceptionInfo.exconly",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 0,
                "tokens": 28,
                "span_id": "ExceptionInfo.errisinstance",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 1,
                "tokens": 179,
                "span_id": "ExceptionInfo.from_current",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 1,
                "tokens": 64,
                "span_id": "ExceptionInfo",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 4,
                "tokens": 40,
                "span_id": "ExceptionInfo.traceback",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 4,
                "tokens": 18,
                "span_id": "ExceptionInfo.traceback_7",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 0,
                "tokens": 171,
                "span_id": "TestRaises.test_raises_as_contextmanager",
                "file_path": "testing/python/raises.py"
              },
              {
                "rank": 1,
                "tokens": 137,
                "span_id": "TestRaises.test_does_not_raise_does_raise",
                "file_path": "testing/python/raises.py"
              },
              {
                "rank": 3,
                "tokens": 151,
                "span_id": "TestRaises.test_does_not_raise",
                "file_path": "testing/python/raises.py"
              },
              {
                "rank": 4,
                "tokens": 42,
                "span_id": "TestRaises.test_raises_exec",
                "file_path": "testing/python/raises.py"
              },
              {
                "rank": 4,
                "tokens": 33,
                "span_id": "TestRaises.test_raises_falsey_type_error",
                "file_path": "testing/python/raises.py"
              },
              {
                "rank": 4,
                "tokens": 55,
                "span_id": "TestRaises.test_raises",
                "file_path": "testing/python/raises.py"
              },
              {
                "rank": 4,
                "tokens": 45,
                "span_id": "TestRaises.test_raises_exec_correct_filename",
                "file_path": "testing/python/raises.py"
              }
            ],
            "search_requests": [
              {
                "query": "context manager exception handling",
                "class_names": [
                  "RaisesContext"
                ],
                "code_snippet": "str(e)",
                "file_pattern": "**/python_api.py",
                "function_names": [
                  "__enter__",
                  "__exit__"
                ]
              },
              {
                "query": "exception representation in pytest",
                "class_names": [
                  "Node"
                ],
                "code_snippet": null,
                "file_pattern": "**/nodes.py",
                "function_names": [
                  "_repr_failure_py"
                ]
              },
              {
                "query": "handling exception information",
                "class_names": [
                  "ExceptionInfo"
                ],
                "code_snippet": null,
                "file_pattern": "**/_code/code.py",
                "function_names": [
                  "exconly",
                  "_getreprcrash"
                ]
              },
              {
                "query": "pytest context manager exception testing",
                "class_names": [
                  "TestRaises"
                ],
                "code_snippet": null,
                "file_pattern": "**/raises.py",
                "function_names": [
                  "test_raises",
                  "test_raises_as_contextmanager"
                ]
              }
            ]
          },
          "input_tokens": 3811,
          "output_tokens": 486,
          "retry_message": null,
          "completion_cost": 0.018723
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 6,
            "span_id": "Node:3",
            "file_path": "src/_pytest/nodes.py"
          },
          {
            "rank": 0,
            "tokens": 295,
            "span_id": "Node._repr_failure_py",
            "file_path": "src/_pytest/nodes.py"
          },
          {
            "rank": 3,
            "tokens": 30,
            "span_id": "Node.ihook",
            "file_path": "src/_pytest/nodes.py"
          },
          {
            "rank": 3,
            "tokens": 26,
            "span_id": "Node",
            "file_path": "src/_pytest/nodes.py"
          },
          {
            "rank": 3,
            "tokens": 26,
            "span_id": "Node.__repr__",
            "file_path": "src/_pytest/nodes.py"
          },
          {
            "rank": 4,
            "tokens": 5,
            "span_id": "Node.teardown",
            "file_path": "src/_pytest/nodes.py"
          },
          {
            "rank": 4,
            "tokens": 50,
            "span_id": "Node.listchain",
            "file_path": "src/_pytest/nodes.py"
          },
          {
            "rank": 0,
            "tokens": 61,
            "span_id": "ExceptionInfo._getreprcrash",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 0,
            "tokens": 121,
            "span_id": "ExceptionInfo.exconly",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 0,
            "tokens": 28,
            "span_id": "ExceptionInfo.errisinstance",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 1,
            "tokens": 179,
            "span_id": "ExceptionInfo.from_current",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 1,
            "tokens": 64,
            "span_id": "ExceptionInfo",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 4,
            "tokens": 40,
            "span_id": "ExceptionInfo.traceback",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 4,
            "tokens": 18,
            "span_id": "ExceptionInfo.traceback_7",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 0,
            "tokens": 171,
            "span_id": "TestRaises.test_raises_as_contextmanager",
            "file_path": "testing/python/raises.py"
          },
          {
            "rank": 1,
            "tokens": 137,
            "span_id": "TestRaises.test_does_not_raise_does_raise",
            "file_path": "testing/python/raises.py"
          },
          {
            "rank": 3,
            "tokens": 151,
            "span_id": "TestRaises.test_does_not_raise",
            "file_path": "testing/python/raises.py"
          },
          {
            "rank": 4,
            "tokens": 42,
            "span_id": "TestRaises.test_raises_exec",
            "file_path": "testing/python/raises.py"
          },
          {
            "rank": 4,
            "tokens": 33,
            "span_id": "TestRaises.test_raises_falsey_type_error",
            "file_path": "testing/python/raises.py"
          },
          {
            "rank": 4,
            "tokens": 55,
            "span_id": "TestRaises.test_raises",
            "file_path": "testing/python/raises.py"
          },
          {
            "rank": 4,
            "tokens": 45,
            "span_id": "TestRaises.test_raises_exec_correct_filename",
            "file_path": "testing/python/raises.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves a discrepancy in how the exception context behaves between a normal try-except block and the pytest.raises context manager. Specifically, in the pytest.raises block, the str() representation of the exception is different, requiring the use of str(e.value) to get the full error message. The key elements to focus on are the implementation of the pytest.raises context manager and the str() representation of exceptions. The search results include several relevant files and spans that might involve the handling of exceptions, especially in the _pytest/nodes.py and _pytest/_code/code.py files. The Node class and its method _repr_failure_py in _pytest/nodes.py seem particularly relevant as they handle the representation of failures/exceptions. The ExceptionInfo class in _pytest/_code/code.py also appears relevant as it deals with the formatting and representation of exceptions. Also, the TestRaises class in testing/python/raises.py contains test cases related directly to the behaviour of pytest.raises, which could be useful for understanding expected behaviour.",
            "identified_spans": [
              {
                "span_ids": [
                  "Node",
                  "Node.__init__",
                  "Node.ihook",
                  "Node.__repr__",
                  "Node.teardown",
                  "Node.listchain",
                  "Node._repr_failure_py",
                  "Node:3"
                ],
                "file_path": "src/_pytest/nodes.py"
              },
              {
                "span_ids": [
                  "ExceptionInfo",
                  "ExceptionInfo.from_current",
                  "ExceptionInfo.traceback",
                  "ExceptionInfo.exconly",
                  "ExceptionInfo.errisinstance",
                  "ExceptionInfo._getreprcrash"
                ],
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "span_ids": [
                  "TestRaises",
                  "TestRaises.test_raises",
                  "TestRaises.test_raises_exec",
                  "TestRaises.test_raises_exec_correct_filename",
                  "TestRaises.test_raises_falsey_type_error",
                  "TestRaises.test_raises_as_contextmanager",
                  "TestRaises.test_does_not_raise",
                  "TestRaises.test_does_not_raise_does_raise"
                ],
                "file_path": "testing/python/raises.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 5458,
          "output_tokens": 574,
          "retry_message": null,
          "completion_cost": 0.024984
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context provided includes relevant files and classes that are likely involved in handling exceptions during pytest. The 'Node' class in 'nodes.py' has a '_repr_failure_py' method that processes exception information, which suggests it could be part of the representation of exceptions in pytest. Additionally, the 'ExceptionInfo' class in '_code/code.py' is likely responsible for processing detailed exception information, including tracebacks. These classes and methods could be directly related to how exceptions are handled and presented in the context of pytest. Furthermore, the tests in 'testing/python/raises.py' confirm that the functionality surrounding pytest.raises is maintained and tested within the pytest framework. Given this analysis, it seems plausible that all relevant file context needed to understand or address the reported issue is provided.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 5236,
          "output_tokens": 202,
          "retry_message": null,
          "completion_cost": 0.018738
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "ExceptionInfo.__str__",
            "file_path": "src/_pytest/_code/code.py",
            "scratch_pad": "The issue reported is about the different behavior of `str()` when used on the `pytest.raises` context variable compared to a normal exception catch. To address this, we need to modify the `__str__` method in the `ExceptionInfo` class to return the full error message, similar to how it would be displayed in a normal exception catch. This should eliminate the gotcha where one must use `str(e.value)`.",
            "instructions": "Modify the `__str__` method in the `ExceptionInfo` class to return the full error message by calling `self.exconly(tryshort=False)` instead of just `self.exconly()`."
          },
          "output": {
            "span_id": "ExceptionInfo.__str__",
            "end_line": 542,
            "file_path": "src/_pytest/_code/code.py",
            "start_line": 537,
            "instructions": "Modify the `__str__` method in the `ExceptionInfo` class to return the full error message by calling `self.exconly(tryshort=False)` instead of just `self.exconly()`."
          },
          "input_tokens": 7074,
          "output_tokens": 199,
          "retry_message": null,
          "completion_cost": 0.024207000000000003
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "ExceptionInfo.__str__",
        "end_line": 542,
        "file_path": "src/_pytest/_code/code.py",
        "max_tokens": 1000,
        "start_line": 537,
        "temperature": 1.6,
        "instructions": "Modify the `__str__` method in the `ExceptionInfo` class to return the full error message by calling `self.exconly(tryshort=False)` instead of just `self.exconly()`.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\n    def __str__(self):\n        if self._excinfo is None:\n            return repr(self)\n        entry = self.traceback[-1]\n        loc = ReprFileLocation(entry.path, entry.lineno + 1, self.exconly(tryshort=False))\n        return str(loc)\n</replace>"
          },
          "output": {
            "diff": "--- src/_pytest/_code/code.py\n+++ src/_pytest/_code/code.py\n@@ -538,7 +538,7 @@\n         if self._excinfo is None:\n             return repr(self)\n         entry = self.traceback[-1]\n-        loc = ReprFileLocation(entry.path, entry.lineno + 1, self.exconly())\n+        loc = ReprFileLocation(entry.path, entry.lineno + 1, self.exconly(tryshort=False))\n         return str(loc)\n \n     def match(self, regexp):\n",
            "message": "Applied the change to src/_pytest/_code/code.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 7180,
          "output_tokens": 85,
          "retry_message": null,
          "completion_cost": 0.022815000000000002
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- src/_pytest/_code/code.py\n+++ src/_pytest/_code/code.py\n@@ -538,7 +538,7 @@\n         if self._excinfo is None:\n             return repr(self)\n         entry = self.traceback[-1]\n-        loc = ReprFileLocation(entry.path, entry.lineno + 1, self.exconly())\n+        loc = ReprFileLocation(entry.path, entry.lineno + 1, self.exconly(tryshort=False))\n         return str(loc)\n \n     def match(self, regexp):\n",
        "model": "deepseek-coder",
        "message": "Applied the change to src/_pytest/_code/code.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue regarding the differing behavior of `str()` on the `pytest.raises` context variable compared to a normal exception catch has been resolved. The `__str__` method in the `ExceptionInfo` class has been updated to ensure it returns the full error message, eliminating the need for using `str(e.value)`.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "After implementing the change to the `__str__` method in the `ExceptionInfo` class, the `str()` function now should return the full error message when used on the `pytest.raises` context variable. This aligns its behavior with that of a normal exception catch.",
            "instructions": null
          },
          "output": {
            "message": "The issue regarding the differing behavior of `str()` on the `pytest.raises` context variable compared to a normal exception catch has been resolved. The `__str__` method in the `ExceptionInfo` class has been updated to ensure it returns the full error message, eliminating the need for using `str(e.value)`."
          },
          "input_tokens": 7545,
          "output_tokens": 150,
          "retry_message": null,
          "completion_cost": 0.024884999999999997
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue regarding the differing behavior of `str()` on the `pytest.raises` context variable compared to a normal exception catch has been resolved. The `__str__` method in the `ExceptionInfo` class has been updated to ensure it returns the full error message, eliminating the need for using `str(e.value)`.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "str() on the pytest.raises context variable doesn't behave same as normal exception catch\nPytest 4.6.2, macOS 10.14.5\r\n\r\n```Python\r\ntry:\r\n    raise LookupError(\r\n        f\"A\\n\"\r\n        f\"B\\n\"\r\n        f\"C\"\r\n    )\r\nexcept LookupError as e:\r\n    print(str(e))\r\n```\r\nprints\r\n\r\n> A\r\n> B\r\n> C\r\n\r\nBut\r\n\r\n```Python\r\nwith pytest.raises(LookupError) as e:\r\n    raise LookupError(\r\n        f\"A\\n\"\r\n        f\"B\\n\"\r\n        f\"C\"\r\n    )\r\n\r\nprint(str(e))\r\n```\r\n\r\nprints\r\n\r\n> <console>:3: LookupError: A\r\n\r\nIn order to get the full error message, one must do `str(e.value)`, which is documented, but this is a different interaction. Any chance the behavior could be changed to eliminate this gotcha?\r\n\r\n-----\r\n\r\nPip list gives\r\n\r\n```\r\nPackage            Version  Location\r\n------------------ -------- ------------------------------------------------------\r\napipkg             1.5\r\nasn1crypto         0.24.0\r\natomicwrites       1.3.0\r\nattrs              19.1.0\r\naws-xray-sdk       0.95\r\nboto               2.49.0\r\nboto3              1.9.51\r\nbotocore           1.12.144\r\ncertifi            2019.3.9\r\ncffi               1.12.3\r\nchardet            3.0.4\r\nClick              7.0\r\ncodacy-coverage    1.3.11\r\ncolorama           0.4.1\r\ncoverage           4.5.3\r\ncryptography       2.6.1\r\ndecorator          4.4.0\r\ndocker             3.7.2\r\ndocker-pycreds     0.4.0\r\ndocutils           0.14\r\necdsa              0.13.2\r\nexecnet            1.6.0\r\nfuture             0.17.1\r\nidna               2.8\r\nimportlib-metadata 0.17\r\nipaddress          1.0.22\r\nJinja2             2.10.1\r\njmespath           0.9.4\r\njsondiff           1.1.1\r\njsonpickle         1.1\r\njsonschema         2.6.0\r\nMarkupSafe         1.1.1\r\nmock               3.0.4\r\nmore-itertools     7.0.0\r\nmoto               1.3.7\r\nneobolt            1.7.10\r\nneotime            1.7.4\r\nnetworkx           2.1\r\nnumpy              1.15.0\r\npackaging          19.0\r\npandas             0.24.2\r\npip                19.1.1\r\npluggy             0.12.0\r\nprompt-toolkit     2.0.9\r\npy                 1.8.0\r\npy2neo             4.2.0\r\npyaml              19.4.1\r\npycodestyle        2.5.0\r\npycparser          2.19\r\npycryptodome       3.8.1\r\nPygments           2.3.1\r\npyOpenSSL          19.0.0\r\npyparsing          2.4.0\r\npytest             4.6.2\r\npytest-cache       1.0\r\npytest-codestyle   1.4.0\r\npytest-cov         2.6.1\r\npytest-forked      1.0.2\r\npython-dateutil    2.7.3\r\npython-jose        2.0.2\r\npytz               2018.5\r\nPyYAML             5.1\r\nrequests           2.21.0\r\nrequests-mock      1.5.2\r\nresponses          0.10.6\r\ns3transfer         0.1.13\r\nsetuptools         41.0.1\r\nsix                1.11.0\r\nsqlite3worker      1.1.7\r\ntabulate           0.8.3\r\nurllib3            1.24.3\r\nwcwidth            0.1.7\r\nwebsocket-client   0.56.0\r\nWerkzeug           0.15.2\r\nwheel              0.33.1\r\nwrapt              1.11.1\r\nxlrd               1.1.0\r\nxmltodict          0.12.0\r\nzipp               0.5.1\r\n```\n"
}