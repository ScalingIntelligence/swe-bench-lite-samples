{
  "info": {
    "duration": 138.37191438674927,
    "submission": "diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py\nindex c4ed961ac..86d7463f4 100644\n--- a/src/_pytest/_code/code.py\n+++ b/src/_pytest/_code/code.py\n@@ -537,10 +537,7 @@ class ExceptionInfo:\n     def __str__(self):\n         if self._excinfo is None:\n             return repr(self)\n-        entry = self.traceback[-1]\n-        loc = ReprFileLocation(entry.path, entry.lineno + 1, self.exconly())\n-        return str(loc)\n-\n+        return self.exconly()\n     def match(self, regexp):\n         \"\"\"\n         Check whether the regular expression 'regexp' is found in the string\n",
    "total_cost": 0.16508399999999998,
    "instance_id": "pytest-dev__pytest-5413",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue is about the discrepancy in behavior between normal exception handling and the use of pytest.raises context manager. Specifically, when using pytest.raises, `str(e)` does not print the full error message as it does in a normal try-except block. This is potentially in the implementation of the RaisesContext class within the pytest module, especially considering the `_repr_failure_py` method in the Node class might also be involved in the representation of the error. I will search for the relevant classes and methods in the provided file context to pinpoint the issue.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "RaisesContext",
                  "ExceptionInfo",
                  "FormattedExcinfo",
                  "ExceptionRepr"
                ],
                "code_snippet": null,
                "file_pattern": null,
                "function_names": [
                  "_repr_failure_py",
                  "repr_excinfo",
                  "exconly",
                  "errisinstance",
                  "addsection"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 296,
                "span_id": "FormattedExcinfo.repr_excinfo",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 0,
                "tokens": 121,
                "span_id": "ExceptionInfo.exconly",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 0,
                "tokens": 28,
                "span_id": "ExceptionInfo.errisinstance",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 0,
                "tokens": 22,
                "span_id": "ExceptionRepr.addsection",
                "file_path": "src/_pytest/_code/code.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "RaisesContext",
                  "ExceptionInfo",
                  "FormattedExcinfo",
                  "ExceptionRepr"
                ],
                "code_snippet": null,
                "file_pattern": null,
                "function_names": [
                  "_repr_failure_py",
                  "repr_excinfo",
                  "exconly",
                  "errisinstance",
                  "addsection"
                ]
              }
            ]
          },
          "input_tokens": 3811,
          "output_tokens": 216,
          "retry_message": null,
          "completion_cost": 0.014673
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 296,
            "span_id": "FormattedExcinfo.repr_excinfo",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 0,
            "tokens": 121,
            "span_id": "ExceptionInfo.exconly",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 0,
            "tokens": 28,
            "span_id": "ExceptionInfo.errisinstance",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 0,
            "tokens": 22,
            "span_id": "ExceptionRepr.addsection",
            "file_path": "src/_pytest/_code/code.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves the behavior of the `str()` function when used with `pytest.raises` compared to normal exception handling. The user observed that `str(e)` in the `pytest.raises` context provides a different output than when catching an exception directly, which can be a source of confusion. To address this, it's important to look at how `ExceptionInfo` and its methods, particularly `exconly`, handle the exception details. The `exconly` method formats the exception message, which is crucial for understanding the discrepancy in output. Additionally, `FormattedExcinfo` and its method `repr_excinfo` are relevant as they deal with representing exception information, potentially influencing how exceptions are stringified. By examining these parts of the code, we can identify the source of the different behavior and determine if the implementation aligns with the observed behavior or if it needs adjustment.",
            "identified_spans": [
              {
                "span_ids": [
                  "ExceptionInfo",
                  "ExceptionInfo.exconly",
                  "FormattedExcinfo",
                  "FormattedExcinfo.repr_excinfo"
                ],
                "file_path": "src/_pytest/_code/code.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3239,
          "output_tokens": 283,
          "retry_message": null,
          "completion_cost": 0.013962
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The provided file context includes the `ExceptionInfo` and `FormattedExcinfo` classes which are potentially involved in capturing and formatting exceptions during test runs. The method `exconly` in `ExceptionInfo` and `repr_excinfo` in `FormattedExcinfo` seem to be directly related to the representation of exceptions. However, the specific issue reported about `pytest.raises` not behaving the same as normal exception catching in terms of `str(e)` output is not fully addressed due to the absence of the `RaisesContext` class and its methods or details about how `pytest.raises` is implemented. The context does not cover everything needed to resolve the reported difference, particularly the implementation of `pytest.raises` itself and how it handles and represents exceptions differently compared to traditional try-except blocks.",
            "search_suggestions": "Search for the implementation of pytest.raises, specifically the RaisesContext class and related methods to understand how exceptions are captured and represented within this context. Additionally, checking the _repr_failure_py method in the Node class within the pytest module might provide further insights into how exceptions are handled and displayed differently in testing contexts."
          },
          "output": {
            "message": "Search for the implementation of pytest.raises, specifically the RaisesContext class and related methods to understand how exceptions are captured and represented within this context. Additionally, checking the _repr_failure_py method in the Node class within the pytest module might provide further insights into how exceptions are handled and displayed differently in testing contexts."
          },
          "input_tokens": 3398,
          "output_tokens": 270,
          "retry_message": null,
          "completion_cost": 0.014244
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Search for the implementation of pytest.raises, specifically the RaisesContext class and related methods to understand how exceptions are captured and represented within this context. Additionally, checking the _repr_failure_py method in the Node class within the pytest module might provide further insights into how exceptions are handled and displayed differently in testing contexts.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The file context provided in `src/_pytest/_code/code.py` contains the `ExceptionInfo` and `FormattedExcinfo` classes, which are essential for understanding how exceptions are captured and formatted within the pytest framework. The `exconly` method in `ExceptionInfo` is particularly relevant as it formats the exception to show only its own text, which can be useful for understanding how the exception message is processed. Additionally, the `getrepr` method in `ExceptionInfo` and the `repr_excinfo` method in `FormattedExcinfo` provide comprehensive representations of the exception, which may include tracebacks and other details. This is crucial for understanding how pytest handles and displays exceptions in different contexts, such as within the `pytest.raises` context manager. It suggests that the discrepancy in behavior observed in the issue might be due to differences in how the exception is formatted for display purposes, potentially influenced by the context in which it occurs.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "RaisesContext"
                ],
                "code_snippet": "def raises(expected_exception, *args, **kwargs):",
                "file_pattern": "src/_pytest/python_api.py",
                "function_names": [
                  "__enter__",
                  "__exit__"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": "def _repr_failure_py(self, excinfo, style=None):",
                "file_pattern": "src/_pytest/nodes.py",
                "function_names": [
                  "_repr_failure_py"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 295,
                "span_id": "Node._repr_failure_py",
                "file_path": "src/_pytest/nodes.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "RaisesContext"
                ],
                "code_snippet": "def raises(expected_exception, *args, **kwargs):",
                "file_pattern": "src/_pytest/python_api.py",
                "function_names": [
                  "__enter__",
                  "__exit__"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": "def _repr_failure_py(self, excinfo, style=None):",
                "file_pattern": "src/_pytest/nodes.py",
                "function_names": [
                  "_repr_failure_py"
                ]
              }
            ]
          },
          "input_tokens": 5526,
          "output_tokens": 386,
          "retry_message": null,
          "completion_cost": 0.022368
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 295,
            "span_id": "Node._repr_failure_py",
            "file_path": "src/_pytest/nodes.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue revolves around the behavior of the `pytest.raises` context manager and how `str(e)` does not provide the full error message, unlike a standard exception catch. The provided context shows the `ExceptionInfo` class and its methods like `exconly` and `getrepr`, which seem relevant. Now, reviewing the new search results, there's a method `Node._repr_failure_py` that also deals with exception string representation. This method might encapsulate the behavior that needs adjusting to eliminate the difference observed in the reported issue between `pytest.raises` and standard exception handling. Therefore, both the `ExceptionInfo` class and the `Node._repr_failure_py` method should be considered for review and potentially modifying their behavior.\n\nStepwise considerations include:\n1. Understanding the current behavior of `ExceptionInfo` and its methods.\n2. Analyzing `Node._repr_failure_py` to see how it interacts with exceptions and their string representations.\n3. Linking potential changes/improvements in these areas to eliminate the observed difference in exception message representation.\n4. Making sure the changes maintain or improve upon the current pytest functionality and standards.",
            "identified_spans": [
              {
                "span_ids": [
                  "ExceptionInfo",
                  "ExceptionInfo.exconly",
                  "ExceptionInfo.getrepr",
                  "FormattedExcinfo",
                  "FormattedExcinfo._truncate_recursive_traceback",
                  "FormattedExcinfo.repr_excinfo",
                  "ExceptionChainRepr",
                  "ReprTracebackNative"
                ],
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "span_ids": [
                  "Node._repr_failure_py"
                ],
                "file_path": "src/_pytest/nodes.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4646,
          "output_tokens": 432,
          "retry_message": null,
          "completion_cost": 0.020418000000000002
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The provided file context includes relevant classes and methods from the pytest framework that are essential for understanding how exceptions are handled and represented. Specifically, the `ExceptionInfo` class and its methods like `exconly`, `getrepr`, and `_getreprcrash`, as well as the `FormattedExcinfo` class with its `repr_excinfo` method, are pertinent to understanding the behavior described in the issue. These elements directly address how exceptions are captured, formatted, and displayed within the pytest context. The issue's concern about the difference in behavior between standard exception handling and the `pytest.raises` context manager is directly related to these classes and methods, suggesting that the file context is relevant to the issue at hand.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 4674,
          "output_tokens": 187,
          "retry_message": null,
          "completion_cost": 0.016827
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "ExceptionInfo",
            "file_path": "src/_pytest/_code/code.py",
            "scratch_pad": "The issue here is that `str(e)` on a `pytest.raises` context variable does not behave the same way as a normal exception catch. To address this issue, we should modify the `ExceptionInfo` class to ensure that `str(e)` directly provides the full exception message, similar to handling a normal exception catch. This can be achieved by overriding the `__str__` method in the `ExceptionInfo` class.",
            "instructions": "Override the `__str__` method in the `ExceptionInfo` class to return the full exception message using `self.exconly()`."
          },
          "output": {
            "span_id": "ExceptionInfo",
            "file_path": "src/_pytest/_code/code.py",
            "instructions": "Override the `__str__` method in the `ExceptionInfo` class to return the full exception message using `self.exconly()`."
          },
          "input_tokens": 5583,
          "output_tokens": 178,
          "retry_message": null,
          "completion_cost": 0.019419
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "ExceptionInfo",
        "end_line": null,
        "file_path": "src/_pytest/_code/code.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Override the `__str__` method in the `ExceptionInfo` class to return the full exception message using `self.exconly()`.\n\nThe __str__ method in the ExceptionInfo class needs to be modified to return the full exception message using self.exconly(). This method is currently located between lines 537 and 543.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 543,
            "start_line": 537,
            "scratch_pad": "The __str__ method in the ExceptionInfo class needs to be modified to return the full exception message using self.exconly(). This method is currently located between lines 537 and 543."
          },
          "output": {
            "span_id": "ExceptionInfo",
            "end_line": 543,
            "file_path": "src/_pytest/_code/code.py",
            "start_line": 537,
            "instructions": "Override the `__str__` method in the `ExceptionInfo` class to return the full exception message using `self.exconly()`.\n\nThe __str__ method in the ExceptionInfo class needs to be modified to return the full exception message using self.exconly(). This method is currently located between lines 537 and 543."
          },
          "input_tokens": 1149,
          "output_tokens": 83,
          "retry_message": null,
          "completion_cost": 0.004692
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "ExceptionInfo",
        "end_line": 543,
        "file_path": "src/_pytest/_code/code.py",
        "max_tokens": 1000,
        "start_line": 537,
        "temperature": 1.6,
        "instructions": "Override the `__str__` method in the `ExceptionInfo` class to return the full exception message using `self.exconly()`.\n\nThe __str__ method in the ExceptionInfo class needs to be modified to return the full exception message using self.exconly(). This method is currently located between lines 537 and 543.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n    def __str__(self):\n        if self._excinfo is None:\n            return repr(self)\n        return self.exconly()\n</replace>"
          },
          "output": {
            "diff": "--- src/_pytest/_code/code.py\n+++ src/_pytest/_code/code.py\n@@ -537,10 +537,7 @@\n     def __str__(self):\n         if self._excinfo is None:\n             return repr(self)\n-        entry = self.traceback[-1]\n-        loc = ReprFileLocation(entry.path, entry.lineno + 1, self.exconly())\n-        return str(loc)\n-\n+        return self.exconly()\n     def match(self, regexp):\n         \"\"\"\n         Check whether the regular expression 'regexp' is found in the string\n",
            "message": "Applied the change to src/_pytest/_code/code.py.",
            "verification_errors": []
          },
          "input_tokens": 5813,
          "output_tokens": 41,
          "retry_message": null,
          "completion_cost": 0.018054
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- src/_pytest/_code/code.py\n+++ src/_pytest/_code/code.py\n@@ -537,10 +537,7 @@\n     def __str__(self):\n         if self._excinfo is None:\n             return repr(self)\n-        entry = self.traceback[-1]\n-        loc = ReprFileLocation(entry.path, entry.lineno + 1, self.exconly())\n-        return str(loc)\n-\n+        return self.exconly()\n     def match(self, regexp):\n         \"\"\"\n         Check whether the regular expression 'regexp' is found in the string\n",
        "model": "deepseek-coder",
        "message": "Applied the change to src/_pytest/_code/code.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue has been fixed by overriding the `__str__` method in the `ExceptionInfo` class to return the full exception message. This aligns the behavior of `pytest.raises` with normal exception handling.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The initial change has been successfully applied to the `__str__` method in the `ExceptionInfo` class. The new implementation captures the desired behavior by directly returning the full exception message using `self.exconly()`. This addresses the original issue, ensuring that `str(e)` in the context of `pytest.raises` will match the behavior of a normal exception catch.",
            "instructions": null
          },
          "output": {
            "message": "The issue has been fixed by overriding the `__str__` method in the `ExceptionInfo` class to return the full exception message. This aligns the behavior of `pytest.raises` with normal exception handling."
          },
          "input_tokens": 6054,
          "output_tokens": 151,
          "retry_message": null,
          "completion_cost": 0.020427
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue has been fixed by overriding the `__str__` method in the `ExceptionInfo` class to return the full exception message. This aligns the behavior of `pytest.raises` with normal exception handling.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "str() on the pytest.raises context variable doesn't behave same as normal exception catch\nPytest 4.6.2, macOS 10.14.5\r\n\r\n```Python\r\ntry:\r\n    raise LookupError(\r\n        f\"A\\n\"\r\n        f\"B\\n\"\r\n        f\"C\"\r\n    )\r\nexcept LookupError as e:\r\n    print(str(e))\r\n```\r\nprints\r\n\r\n> A\r\n> B\r\n> C\r\n\r\nBut\r\n\r\n```Python\r\nwith pytest.raises(LookupError) as e:\r\n    raise LookupError(\r\n        f\"A\\n\"\r\n        f\"B\\n\"\r\n        f\"C\"\r\n    )\r\n\r\nprint(str(e))\r\n```\r\n\r\nprints\r\n\r\n> <console>:3: LookupError: A\r\n\r\nIn order to get the full error message, one must do `str(e.value)`, which is documented, but this is a different interaction. Any chance the behavior could be changed to eliminate this gotcha?\r\n\r\n-----\r\n\r\nPip list gives\r\n\r\n```\r\nPackage            Version  Location\r\n------------------ -------- ------------------------------------------------------\r\napipkg             1.5\r\nasn1crypto         0.24.0\r\natomicwrites       1.3.0\r\nattrs              19.1.0\r\naws-xray-sdk       0.95\r\nboto               2.49.0\r\nboto3              1.9.51\r\nbotocore           1.12.144\r\ncertifi            2019.3.9\r\ncffi               1.12.3\r\nchardet            3.0.4\r\nClick              7.0\r\ncodacy-coverage    1.3.11\r\ncolorama           0.4.1\r\ncoverage           4.5.3\r\ncryptography       2.6.1\r\ndecorator          4.4.0\r\ndocker             3.7.2\r\ndocker-pycreds     0.4.0\r\ndocutils           0.14\r\necdsa              0.13.2\r\nexecnet            1.6.0\r\nfuture             0.17.1\r\nidna               2.8\r\nimportlib-metadata 0.17\r\nipaddress          1.0.22\r\nJinja2             2.10.1\r\njmespath           0.9.4\r\njsondiff           1.1.1\r\njsonpickle         1.1\r\njsonschema         2.6.0\r\nMarkupSafe         1.1.1\r\nmock               3.0.4\r\nmore-itertools     7.0.0\r\nmoto               1.3.7\r\nneobolt            1.7.10\r\nneotime            1.7.4\r\nnetworkx           2.1\r\nnumpy              1.15.0\r\npackaging          19.0\r\npandas             0.24.2\r\npip                19.1.1\r\npluggy             0.12.0\r\nprompt-toolkit     2.0.9\r\npy                 1.8.0\r\npy2neo             4.2.0\r\npyaml              19.4.1\r\npycodestyle        2.5.0\r\npycparser          2.19\r\npycryptodome       3.8.1\r\nPygments           2.3.1\r\npyOpenSSL          19.0.0\r\npyparsing          2.4.0\r\npytest             4.6.2\r\npytest-cache       1.0\r\npytest-codestyle   1.4.0\r\npytest-cov         2.6.1\r\npytest-forked      1.0.2\r\npython-dateutil    2.7.3\r\npython-jose        2.0.2\r\npytz               2018.5\r\nPyYAML             5.1\r\nrequests           2.21.0\r\nrequests-mock      1.5.2\r\nresponses          0.10.6\r\ns3transfer         0.1.13\r\nsetuptools         41.0.1\r\nsix                1.11.0\r\nsqlite3worker      1.1.7\r\ntabulate           0.8.3\r\nurllib3            1.24.3\r\nwcwidth            0.1.7\r\nwebsocket-client   0.56.0\r\nWerkzeug           0.15.2\r\nwheel              0.33.1\r\nwrapt              1.11.1\r\nxlrd               1.1.0\r\nxmltodict          0.12.0\r\nzipp               0.5.1\r\n```\n"
}