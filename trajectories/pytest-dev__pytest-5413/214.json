{
  "info": {
    "duration": 161.14760875701904,
    "submission": "diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py\nindex c4ed961ac..2cde65db7 100644\n--- a/src/_pytest/_code/code.py\n+++ b/src/_pytest/_code/code.py\n@@ -537,9 +537,7 @@ class ExceptionInfo:\n     def __str__(self):\n         if self._excinfo is None:\n             return repr(self)\n-        entry = self.traceback[-1]\n-        loc = ReprFileLocation(entry.path, entry.lineno + 1, self.exconly())\n-        return str(loc)\n+        return str(self._excinfo[1])\n \n     def match(self, regexp):\n         \"\"\"\n",
    "total_cost": 0.146277,
    "instance_id": "pytest-dev__pytest-5413",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves the behavior of `str()` on the `pytest.raises` context variable differing from normal exception handling. From the provided context, it seems `pytest.raises` is implemented in `src/_pytest/python_api.py` and includes a `RaisesContext` class. The issue might be related to how this context is managed or how the exception is captured. Investigating the `RaisesContext` class and related methods in the provided files would be a good starting point. Since the issue is specific to the handling of `pytest.raises`, focusing on the `RaisesContext` class and its interactions is crucial.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "RaisesContext"
                ],
                "code_snippet": null,
                "file_pattern": "**/src/_pytest/python_api.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 4,
                "span_id": "RaisesContext",
                "file_path": "src/_pytest/python_api.py"
              },
              {
                "rank": 0,
                "tokens": 35,
                "span_id": "RaisesContext.__init__",
                "file_path": "src/_pytest/python_api.py"
              },
              {
                "rank": 0,
                "tokens": 24,
                "span_id": "RaisesContext.__enter__",
                "file_path": "src/_pytest/python_api.py"
              },
              {
                "rank": 0,
                "tokens": 73,
                "span_id": "RaisesContext.__exit__",
                "file_path": "src/_pytest/python_api.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "RaisesContext"
                ],
                "code_snippet": null,
                "file_pattern": "**/src/_pytest/python_api.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 3811,
          "output_tokens": 196,
          "retry_message": null,
          "completion_cost": 0.014373
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 4,
            "span_id": "RaisesContext",
            "file_path": "src/_pytest/python_api.py"
          },
          {
            "rank": 0,
            "tokens": 35,
            "span_id": "RaisesContext.__init__",
            "file_path": "src/_pytest/python_api.py"
          },
          {
            "rank": 0,
            "tokens": 24,
            "span_id": "RaisesContext.__enter__",
            "file_path": "src/_pytest/python_api.py"
          },
          {
            "rank": 0,
            "tokens": 73,
            "span_id": "RaisesContext.__exit__",
            "file_path": "src/_pytest/python_api.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue highlights a difference in behavior between normal exception handling and using `pytest.raises`. The key focus is on how `str(e)` behaves differently in these contexts. In the normal `try-except` block, `str(e)` provides the full error message, but when using `pytest.raises`, `str(e)` provides a different output, and one must use `str(e.value)` to get the full error message. The provided search results include the `RaisesContext` class and its methods, which are crucial for understanding and potentially addressing this behavior. The `RaisesContext` class includes methods for entering and exiting the context, handling exceptions, and matching expressions. This class and its methods are directly related to the behavior described in the issue, making them highly relevant for addressing the discrepancy. Therefore, the identified spans from the `RaisesContext` class are relevant to the reported issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "RaisesContext.__init__",
                  "RaisesContext.__enter__",
                  "RaisesContext.__exit__"
                ],
                "file_path": "src/_pytest/python_api.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 2909,
          "output_tokens": 275,
          "retry_message": null,
          "completion_cost": 0.012852
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The `pytest.raises` context is implemented through the `RaisesContext` class in the provided file context. This class handles the capturing and behavior of exceptions raised during the `with pytest.raises(...)` block. The issue mentioned in the report pertains to the difference in behavior of `str()` on the `pytest.raises` context variable compared to normal exception handling, which suggests that the specific issue is about how the exception is captured and presented in the `RaisesContext`. From the provided file context, the `RaisesContext` class is indeed handling the exception capture and could be the source of the reported issue. However, the specific behavior change requested (to eliminate the gotcha by making `str(e)` print the full error message directly) would need further detailed investigation within this class and its usage in the broader pytest framework. The provided file context is relevant to the issue but may not cover all necessary implementations that could affect this behavior.",
            "search_suggestions": "Look into additional methods and properties of the `RaisesContext` class that could affect the string representation of the captured exception. Also, examine how `_pytest._code.ExceptionInfo` is used within `RaisesContext` and how its `__str__` or `__repr__` methods might affect the output."
          },
          "output": {
            "message": "Look into additional methods and properties of the `RaisesContext` class that could affect the string representation of the captured exception. Also, examine how `_pytest._code.ExceptionInfo` is used within `RaisesContext` and how its `__str__` or `__repr__` methods might affect the output."
          },
          "input_tokens": 2378,
          "output_tokens": 292,
          "retry_message": null,
          "completion_cost": 0.011514
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look into additional methods and properties of the `RaisesContext` class that could affect the string representation of the captured exception. Also, examine how `_pytest._code.ExceptionInfo` is used within `RaisesContext` and how its `__str__` or `__repr__` methods might affect the output.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "Having reviewed the `RaisesContext` class in `src/_pytest/python_api.py`, it's clear that the context is designed to capture an exception and determine if it matches the expected type. However, the specific handling of the string representation of the captured exception isn't directly addressed here. To understand this behavior, we need to investigate `_pytest._code.ExceptionInfo`, which is responsible for managing the exception information. This class likely overrides `__str__` or `__repr__` methods that influence how the exception is represented as a string. By examining `ExceptionInfo` and its methods, we can pinpoint the discrepancy in string representation between normal exception handling and the context provided by `pytest.raises`.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "ExceptionInfo"
                ],
                "code_snippet": null,
                "file_pattern": "**/src/_pytest/_code/code.py",
                "function_names": [
                  "__str__",
                  "__repr__"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 51,
                "span_id": "ExceptionInfo.__str__",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 0,
                "tokens": 45,
                "span_id": "ExceptionInfo.__repr__",
                "file_path": "src/_pytest/_code/code.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "ExceptionInfo"
                ],
                "code_snippet": null,
                "file_pattern": "**/src/_pytest/_code/code.py",
                "function_names": [
                  "__str__",
                  "__repr__"
                ]
              }
            ]
          },
          "input_tokens": 4454,
          "output_tokens": 263,
          "retry_message": null,
          "completion_cost": 0.017307
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 51,
            "span_id": "ExceptionInfo.__str__",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 0,
            "tokens": 45,
            "span_id": "ExceptionInfo.__repr__",
            "file_path": "src/_pytest/_code/code.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue pertains to the behavior of `str()` when applied to the context variable `e` in `pytest.raises`. The user observes that `str(e)` in the `pytest.raises` context manager does not yield the same output as `str(e)` when using a typical `try-except` block. The expected behavior is to print the entire error message, but `pytest.raises` only prints the first line followed by the error type. This discrepancy is problematic and the user suggests that the behavior could be changed to eliminate this 'gotcha'.\n\nAnalyzing the code spans provided, the main difference in behavior could be attributed to the `__repr__` and `__str__` methods in the `ExceptionInfo` class. In the typical `try-except` block, `str(e)` directly returns the error message, but in the context of `pytest.raises`, `str(e)` might be getting intercepted or differently processed. Specifically, reviewing the `__str__` method of `ExceptionInfo` shows that it returns a string representation that includes the file location and line number, instead of the full error message. This method seems to be responsible for the different behavior observed by the user when using `pytest.raises`.\n\nGiven this analysis, the relevant code spans are those that define the `__str__` method in the `ExceptionInfo` class. These spans contain the logic that determines what `str(e)` returns during a `pytest.raises` context, and thus are key to understanding and potentially modifying the behavior to align with user expectations.",
            "identified_spans": [
              {
                "span_ids": [
                  "ExceptionInfo.__str__"
                ],
                "file_path": "src/_pytest/_code/code.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3008,
          "output_tokens": 403,
          "retry_message": null,
          "completion_cost": 0.015069
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The analysis of the `RaisesContext` class in `src/_pytest/python_api.py` indicates its role in capturing and handling exceptions, albeit without addressing the string representation specifics. The `ExceptionInfo` class within `src/_pytest/_code/code.py` contains methods (`__str__` and `__repr__`) influencing the exception's string representation, which need closer examination to clarify discrepancies compared to standard exception handling. The file context provided does not directly contain the exact method or code implementing the different behaviors observed, but it points to where further investigation should be focused.",
            "search_suggestions": "Consider investigating the methods in `ExceptionInfo` class such as `__str__` and `__repr__` for details impacting the string representation of exceptions, and how they are influenced by the context from `pytest.raises`. Additionally, examine any additional methods or attributes within `ExceptionInfo` that might shape this behavior."
          },
          "output": {
            "message": "Consider investigating the methods in `ExceptionInfo` class such as `__str__` and `__repr__` for details impacting the string representation of exceptions, and how they are influenced by the context from `pytest.raises`. Additionally, examine any additional methods or attributes within `ExceptionInfo` that might shape this behavior."
          },
          "input_tokens": 2990,
          "output_tokens": 224,
          "retry_message": null,
          "completion_cost": 0.01233
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Consider investigating the methods in `ExceptionInfo` class such as `__str__` and `__repr__` for details impacting the string representation of exceptions, and how they are influenced by the context from `pytest.raises`. Additionally, examine any additional methods or attributes within `ExceptionInfo` that might shape this behavior.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "scratch_pad": "The investigation of the `RaisesContext` class reveals that it uses `_pytest._code.ExceptionInfo` to capture and manage the exception information. Specifically, the `__enter__` method sets up `ExceptionInfo` to capture the exception later, and `__exit__` handles the actual capture. Note that when `__str__` is called on an `ExceptionInfo` instance, it returns a string representation that includes the location in the file where the exception occurred and the exception message. This behavior might differ from the normal exception handling due to the additional context provided by the test framework. Further, the `ExceptionInfo` class includes methods like `exconly` which might influence the string representation, especially when dealing with nested exceptions or recursion errors. The discrepancy noted in the issue could be attributed to how the framework formats or handles the exception information compared to standard Python exception handling.",
            "search_requests": []
          },
          "output": {
            "message": "The investigation of the `RaisesContext` class reveals that it uses `_pytest._code.ExceptionInfo` to capture and manage the exception information. Specifically, the `__enter__` method sets up `ExceptionInfo` to capture the exception later, and `__exit__` handles the actual capture. Note that when `__str__` is called on an `ExceptionInfo` instance, it returns a string representation that includes the location in the file where the exception occurred and the exception message. This behavior might differ from the normal exception handling due to the additional context provided by the test framework. Further, the `ExceptionInfo` class includes methods like `exconly` which might influence the string representation, especially when dealing with nested exceptions or recursion errors. The discrepancy noted in the issue could be attributed to how the framework formats or handles the exception information compared to standard Python exception handling."
          },
          "input_tokens": 5380,
          "output_tokens": 210,
          "retry_message": null,
          "completion_cost": 0.01929
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "The investigation of the `RaisesContext` class reveals that it uses `_pytest._code.ExceptionInfo` to capture and manage the exception information. Specifically, the `__enter__` method sets up `ExceptionInfo` to capture the exception later, and `__exit__` handles the actual capture. Note that when `__str__` is called on an `ExceptionInfo` instance, it returns a string representation that includes the location in the file where the exception occurred and the exception message. This behavior might differ from the normal exception handling due to the additional context provided by the test framework. Further, the `ExceptionInfo` class includes methods like `exconly` which might influence the string representation, especially when dealing with nested exceptions or recursion errors. The discrepancy noted in the issue could be attributed to how the framework formats or handles the exception information compared to standard Python exception handling.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "ExceptionInfo.__str__",
            "file_path": "src/_pytest/_code/code.py",
            "scratch_pad": "The issue revolves around the discrepancy in the string representation of exceptions caught via `pytest.raises` compared to standard Python exception handling. In `pytest.raises`, the `ExceptionInfo` object includes additional context such as the location of the error in the file, which affects the `__str__` method. This is different from the behavior of standard exceptions, where `str(e)` directly gives the exception message. To mitigate this, we can adjust the `__str__` method in `ExceptionInfo` to output just the exception message when called directly, similar to standard exception handling. This change aligns the behavior with user expectations without altering the context provided by the test framework.",
            "instructions": "Modify the `__str__` method in the `ExceptionInfo` class in `src/_pytest/_code/code.py` to return only the exception message, similar to how standard exceptions behave."
          },
          "output": {
            "span_id": "ExceptionInfo.__str__",
            "end_line": 542,
            "file_path": "src/_pytest/_code/code.py",
            "start_line": 537,
            "instructions": "Modify the `__str__` method in the `ExceptionInfo` class in `src/_pytest/_code/code.py` to return only the exception message, similar to how standard exceptions behave."
          },
          "input_tokens": 4116,
          "output_tokens": 240,
          "retry_message": null,
          "completion_cost": 0.015948
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "ExceptionInfo.__str__",
        "end_line": 542,
        "file_path": "src/_pytest/_code/code.py",
        "max_tokens": 1000,
        "start_line": 537,
        "temperature": 1.6,
        "instructions": "Modify the `__str__` method in the `ExceptionInfo` class in `src/_pytest/_code/code.py` to return only the exception message, similar to how standard exceptions behave.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\n    def __str__(self):\n        if self._excinfo is None:\n            return repr(self)\n        return str(self._excinfo[1])\n</replace>"
          },
          "output": {
            "diff": "--- src/_pytest/_code/code.py\n+++ src/_pytest/_code/code.py\n@@ -537,9 +537,7 @@\n     def __str__(self):\n         if self._excinfo is None:\n             return repr(self)\n-        entry = self.traceback[-1]\n-        loc = ReprFileLocation(entry.path, entry.lineno + 1, self.exconly())\n-        return str(loc)\n+        return str(self._excinfo[1])\n \n     def match(self, regexp):\n         \"\"\"\n",
            "message": "Applied the change to src/_pytest/_code/code.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 3556,
          "output_tokens": 47,
          "retry_message": null,
          "completion_cost": 0.011373000000000001
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- src/_pytest/_code/code.py\n+++ src/_pytest/_code/code.py\n@@ -537,9 +537,7 @@\n     def __str__(self):\n         if self._excinfo is None:\n             return repr(self)\n-        entry = self.traceback[-1]\n-        loc = ReprFileLocation(entry.path, entry.lineno + 1, self.exconly())\n-        return str(loc)\n+        return str(self._excinfo[1])\n \n     def match(self, regexp):\n         \"\"\"\n",
        "model": "deepseek-coder",
        "message": "Applied the change to src/_pytest/_code/code.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The change to the `__str__` method in the `ExceptionInfo` class has been applied successfully, addressing the discrepancy in string representation between `pytest.raises` and standard exception handling. No further changes are necessary.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The change applied alters the `__str__` method in the `ExceptionInfo` class to return only the exception message, which aligns with the behavior of standard Python exception handling. This should resolve the discrepancy reported in the issue. Since the change is straightforward and intended to match the expected behavior, there are no further changes needed in the provided context.",
            "instructions": null
          },
          "output": {
            "message": "The change to the `__str__` method in the `ExceptionInfo` class has been applied successfully, addressing the discrepancy in string representation between `pytest.raises` and standard exception handling. No further changes are necessary."
          },
          "input_tokens": 4522,
          "output_tokens": 177,
          "retry_message": null,
          "completion_cost": 0.016221
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The change to the `__str__` method in the `ExceptionInfo` class has been applied successfully, addressing the discrepancy in string representation between `pytest.raises` and standard exception handling. No further changes are necessary.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "str() on the pytest.raises context variable doesn't behave same as normal exception catch\nPytest 4.6.2, macOS 10.14.5\r\n\r\n```Python\r\ntry:\r\n    raise LookupError(\r\n        f\"A\\n\"\r\n        f\"B\\n\"\r\n        f\"C\"\r\n    )\r\nexcept LookupError as e:\r\n    print(str(e))\r\n```\r\nprints\r\n\r\n> A\r\n> B\r\n> C\r\n\r\nBut\r\n\r\n```Python\r\nwith pytest.raises(LookupError) as e:\r\n    raise LookupError(\r\n        f\"A\\n\"\r\n        f\"B\\n\"\r\n        f\"C\"\r\n    )\r\n\r\nprint(str(e))\r\n```\r\n\r\nprints\r\n\r\n> <console>:3: LookupError: A\r\n\r\nIn order to get the full error message, one must do `str(e.value)`, which is documented, but this is a different interaction. Any chance the behavior could be changed to eliminate this gotcha?\r\n\r\n-----\r\n\r\nPip list gives\r\n\r\n```\r\nPackage            Version  Location\r\n------------------ -------- ------------------------------------------------------\r\napipkg             1.5\r\nasn1crypto         0.24.0\r\natomicwrites       1.3.0\r\nattrs              19.1.0\r\naws-xray-sdk       0.95\r\nboto               2.49.0\r\nboto3              1.9.51\r\nbotocore           1.12.144\r\ncertifi            2019.3.9\r\ncffi               1.12.3\r\nchardet            3.0.4\r\nClick              7.0\r\ncodacy-coverage    1.3.11\r\ncolorama           0.4.1\r\ncoverage           4.5.3\r\ncryptography       2.6.1\r\ndecorator          4.4.0\r\ndocker             3.7.2\r\ndocker-pycreds     0.4.0\r\ndocutils           0.14\r\necdsa              0.13.2\r\nexecnet            1.6.0\r\nfuture             0.17.1\r\nidna               2.8\r\nimportlib-metadata 0.17\r\nipaddress          1.0.22\r\nJinja2             2.10.1\r\njmespath           0.9.4\r\njsondiff           1.1.1\r\njsonpickle         1.1\r\njsonschema         2.6.0\r\nMarkupSafe         1.1.1\r\nmock               3.0.4\r\nmore-itertools     7.0.0\r\nmoto               1.3.7\r\nneobolt            1.7.10\r\nneotime            1.7.4\r\nnetworkx           2.1\r\nnumpy              1.15.0\r\npackaging          19.0\r\npandas             0.24.2\r\npip                19.1.1\r\npluggy             0.12.0\r\nprompt-toolkit     2.0.9\r\npy                 1.8.0\r\npy2neo             4.2.0\r\npyaml              19.4.1\r\npycodestyle        2.5.0\r\npycparser          2.19\r\npycryptodome       3.8.1\r\nPygments           2.3.1\r\npyOpenSSL          19.0.0\r\npyparsing          2.4.0\r\npytest             4.6.2\r\npytest-cache       1.0\r\npytest-codestyle   1.4.0\r\npytest-cov         2.6.1\r\npytest-forked      1.0.2\r\npython-dateutil    2.7.3\r\npython-jose        2.0.2\r\npytz               2018.5\r\nPyYAML             5.1\r\nrequests           2.21.0\r\nrequests-mock      1.5.2\r\nresponses          0.10.6\r\ns3transfer         0.1.13\r\nsetuptools         41.0.1\r\nsix                1.11.0\r\nsqlite3worker      1.1.7\r\ntabulate           0.8.3\r\nurllib3            1.24.3\r\nwcwidth            0.1.7\r\nwebsocket-client   0.56.0\r\nWerkzeug           0.15.2\r\nwheel              0.33.1\r\nwrapt              1.11.1\r\nxlrd               1.1.0\r\nxmltodict          0.12.0\r\nzipp               0.5.1\r\n```\n"
}