{
  "info": {
    "duration": 225.73682808876038,
    "submission": "diff --git a/lib/matplotlib/artist.py b/lib/matplotlib/artist.py\nindex 1f33b9d3ec..3bfff180e8 100644\n--- a/lib/matplotlib/artist.py\n+++ b/lib/matplotlib/artist.py\n@@ -1303,11 +1303,14 @@ class Artist:\n                 return \"[]\"\n             normed = self.norm(data)\n             if np.isfinite(normed):\n-                # Midpoints of neighboring color intervals.\n-                neighbors = self.norm.inverse(\n-                    (int(self.norm(data) * n) + np.array([0, 1])) / n)\n-                delta = abs(neighbors - data).max()\n-                g_sig_digits = cbook._g_sig_digits(data, delta)\n+                try:\n+                    # Midpoints of neighboring color intervals.\n+                    neighbors = self.norm.inverse(\n+                        (int(self.norm(data) * n) + np.array([0, 1])) / n)\n+                    delta = abs(neighbors - data).max()\n+                    g_sig_digits = cbook._g_sig_digits(data, delta)\n+                except ValueError:\n+                    return 'BoundaryNorm is not invertible'\n             else:\n                 g_sig_digits = 3  # Consistent with default below.\n             return \"[{:-#.{}g}]\".format(data, g_sig_digits)\n",
    "total_cost": 0.16329300000000002,
    "instance_id": "matplotlib__matplotlib-22835",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves a crash when using matplotlib's BoundaryNorm with the imshow function. It crashes on mouseover due to the BoundaryNorm being non-invertible. Relevant code spans should be checked in BoundaryNorm and the ScalarMappable class that handles cursor data formatting. It might also be beneficial to examine the imshow function's interaction with norms.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "BoundaryNorm",
                  "ScalarMappable"
                ],
                "code_snippet": null,
                "file_pattern": null,
                "function_names": [
                  "format_cursor_data",
                  "imshow",
                  "inverse"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 48,
                "span_id": "BoundaryNorm.inverse",
                "file_path": "lib/matplotlib/colors.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "BoundaryNorm",
                  "ScalarMappable"
                ],
                "code_snippet": null,
                "file_pattern": null,
                "function_names": [
                  "format_cursor_data",
                  "imshow",
                  "inverse"
                ]
              }
            ]
          },
          "input_tokens": 3573,
          "output_tokens": 172,
          "retry_message": null,
          "completion_cost": 0.013299000000000002
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 48,
            "span_id": "BoundaryNorm.inverse",
            "file_path": "lib/matplotlib/colors.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves a crash when using `BoundaryNorm` in Matplotlib 3.5.0. The crash occurs when the `format_cursor_data` method tries to use the `inverse` method of `BoundaryNorm`, which raises a `ValueError` stating that `BoundaryNorm` is not invertible. This directly corresponds to the provided search results, specifically the `BoundaryNorm` class definition and its `inverse` method. This method is designed to raise the mentioned `ValueError`, which matches the crash scenario described in the issue. Therefore, the relevant code spans are those defining the `BoundaryNorm` class and its `inverse` method.",
            "identified_spans": [
              {
                "span_ids": [
                  "BoundaryNorm",
                  "BoundaryNorm.__init__",
                  "BoundaryNorm.inverse"
                ],
                "file_path": "lib/matplotlib/colors.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 2000,
          "output_tokens": 206,
          "retry_message": null,
          "completion_cost": 0.00909
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The provided file context includes the BoundaryNorm class which contains the 'inverse' method raising the 'BoundaryNorm is not invertible' error. This directly corresponds to the issue reported, indicating that the relevant code has been identified. There appears to be additional context needed regarding the 'format_cursor_data' method in ScalarMappable since the issue arises when interacting with the image, but based on the file context provided, the specific method causing the crash is clearly identified.",
            "search_suggestions": "To ensure completeness, search for the 'ScalarMappable' class and its 'format_cursor_data' method within the matplotlib codebase. Understanding how 'BoundaryNorm' interacts with 'ScalarMappable' could provide more context on how to handle the non-invertibility of 'BoundaryNorm' during mouseover actions."
          },
          "output": {
            "message": "To ensure completeness, search for the 'ScalarMappable' class and its 'format_cursor_data' method within the matplotlib codebase. Understanding how 'BoundaryNorm' interacts with 'ScalarMappable' could provide more context on how to handle the non-invertibility of 'BoundaryNorm' during mouseover actions."
          },
          "input_tokens": 2276,
          "output_tokens": 201,
          "retry_message": null,
          "completion_cost": 0.009843
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "To ensure completeness, search for the 'ScalarMappable' class and its 'format_cursor_data' method within the matplotlib codebase. Understanding how 'BoundaryNorm' interacts with 'ScalarMappable' could provide more context on how to handle the non-invertibility of 'BoundaryNorm' during mouseover actions.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "After reviewing the relevant code segments, it is clear that the crash occurs due to the non-invertibility of the BoundaryNorm class in the `inverse` method. Since the BoundaryNorm is specifically designed to not be invertible, it raises a ValueError when an attempt is made to invert it during mouseover actions. It appears that the proper handling for this situation might involve implementing specific checks or try-except blocks in the ScalarMappable class's `format_cursor_data` method to manage the error generated by BoundaryNorm's non-invertibility.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "ScalarMappable"
                ],
                "code_snippet": null,
                "file_pattern": null,
                "function_names": [
                  "format_cursor_data"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 38,
                "span_id": "ScalarMappable",
                "file_path": "lib/matplotlib/cm.py"
              },
              {
                "rank": 0,
                "tokens": 375,
                "span_id": "Artist.format_cursor_data",
                "file_path": "lib/matplotlib/artist.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "ScalarMappable"
                ],
                "code_snippet": null,
                "file_pattern": null,
                "function_names": [
                  "format_cursor_data"
                ]
              }
            ]
          },
          "input_tokens": 4597,
          "output_tokens": 219,
          "retry_message": null,
          "completion_cost": 0.017076
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 38,
            "span_id": "ScalarMappable",
            "file_path": "lib/matplotlib/cm.py"
          },
          {
            "rank": 0,
            "tokens": 375,
            "span_id": "Artist.format_cursor_data",
            "file_path": "lib/matplotlib/artist.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves a crash when using `BoundaryNorm` in conjunction with `format_cursor_data` in the `ScalarMappable` class from `matplotlib`. The crash occurs because `BoundaryNorm` raises a `ValueError` indicating that it is not invertible when `format_cursor_data` attempts to use the inverse function. The current context provided shows the implementation of `BoundaryNorm` in `colors.py`, including the `inverse` method that raises the `ValueError`. The new search results show the `Artist` class which contains the `format_cursor_data` method and the `ScalarMappable` class which is involved in the issue. The `format_cursor_data` method handles data formatting when mousing over an image, and it includes a block specific to `ScalarMappable`. This block is where the call to `self.norm.inverse` is made, leading to the crash if `self.norm` is a `BoundaryNorm`. Given this context, the relevant code spans include portions of both `Artist` and `ScalarMappable` classes where the crash occurs, as well as the `BoundaryNorm` class for completeness.",
            "identified_spans": [
              {
                "span_ids": [
                  "BoundaryNorm",
                  "BoundaryNorm.__init__",
                  "BoundaryNorm.inverse"
                ],
                "file_path": "lib/matplotlib/colors.py"
              },
              {
                "span_ids": [
                  "Artist",
                  "Artist.__init__",
                  "Artist.format_cursor_data"
                ],
                "file_path": "lib/matplotlib/artist.py"
              },
              {
                "span_ids": [
                  "ScalarMappable",
                  "ScalarMappable.__init__"
                ],
                "file_path": "lib/matplotlib/cm.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3432,
          "output_tokens": 438,
          "retry_message": null,
          "completion_cost": 0.016866
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The provided file context includes the `format_cursor_data` method in the `Artist` class, where the crash occurs due to the non-invertibility of the `BoundaryNorm` class. The `BoundaryNorm` class is also present in the file context, explicitly raising a `ValueError` in its `inverse` method, stating that `BoundaryNorm is not invertible`. Given this explicit error handling in the `BoundaryNorm` class and its interaction within `format_cursor_data`, it appears that the core components related to the issue are identified. However, there is a need to handle this error in `format_cursor_data`, possibly by adding error handling around the attempt to invert the `BoundaryNorm`, suggesting that while relevant code is identified, an additional layer of code modification is implied for full resolution of the issue. Therefore, I consider this context incomplete for direct implementation but sufficient to understand and plan the necessary modifications.",
            "search_suggestions": "Consider looking into additional error handling or how to modify the `format_cursor_data` method in `Artist` to manage the `ValueError` raised by `BoundaryNorm` from crashing the application."
          },
          "output": {
            "message": "Consider looking into additional error handling or how to modify the `format_cursor_data` method in `Artist` to manage the `ValueError` raised by `BoundaryNorm` from crashing the application."
          },
          "input_tokens": 3588,
          "output_tokens": 267,
          "retry_message": null,
          "completion_cost": 0.014769000000000001
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Consider looking into additional error handling or how to modify the `format_cursor_data` method in `Artist` to manage the `ValueError` raised by `BoundaryNorm` from crashing the application.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "scratch_pad": "Given the current context, it is evident that the `BoundaryNorm` class is not invertible and raises a `ValueError` when an attempt to inverse it is made. This scenario occurs specifically within the `format_cursor_data` method of the `Artist` class, which is overriden by `ScalarMappable` for handling cursor data formatting during mouseover actions. To mitigate the crash caused by the non-invertibility of `BoundaryNorm`, it is advisable to implement additional error handling within the `format_cursor_data` method. This could entail adding a try-except block around the call to `self.norm.inverse` to catch the `ValueError` gracefully and return a default or customized error message instead of allowing the application to crash. This approach would ensure that the user experience is not interrupted by this specific edge case.",
            "search_requests": []
          },
          "output": {
            "message": "Given the current context, it is evident that the `BoundaryNorm` class is not invertible and raises a `ValueError` when an attempt to inverse it is made. This scenario occurs specifically within the `format_cursor_data` method of the `Artist` class, which is overriden by `ScalarMappable` for handling cursor data formatting during mouseover actions. To mitigate the crash caused by the non-invertibility of `BoundaryNorm`, it is advisable to implement additional error handling within the `format_cursor_data` method. This could entail adding a try-except block around the call to `self.norm.inverse` to catch the `ValueError` gracefully and return a default or customized error message instead of allowing the application to crash. This approach would ensure that the user experience is not interrupted by this specific edge case."
          },
          "input_tokens": 6136,
          "output_tokens": 201,
          "retry_message": null,
          "completion_cost": 0.021423
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "Given the current context, it is evident that the `BoundaryNorm` class is not invertible and raises a `ValueError` when an attempt to inverse it is made. This scenario occurs specifically within the `format_cursor_data` method of the `Artist` class, which is overriden by `ScalarMappable` for handling cursor data formatting during mouseover actions. To mitigate the crash caused by the non-invertibility of `BoundaryNorm`, it is advisable to implement additional error handling within the `format_cursor_data` method. This could entail adding a try-except block around the call to `self.norm.inverse` to catch the `ValueError` gracefully and return a default or customized error message instead of allowing the application to crash. This approach would ensure that the user experience is not interrupted by this specific edge case.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "Artist.format_cursor_data",
            "file_path": "lib/matplotlib/artist.py",
            "scratch_pad": "We need to handle the case where BoundaryNorm is not invertible to prevent crashes during mouseover actions. Adding a try-catch block around the call to self.norm.inverse in the format_cursor_data method of the ScalarMappable class should help catch the ValueError and return a default message.",
            "instructions": "Add a try-except block around the call to self.norm.inverse in the format_cursor_data method. If a ValueError is caught, return a default message like 'BoundaryNorm is not invertible'."
          },
          "output": {
            "span_id": "Artist.format_cursor_data",
            "end_line": 1321,
            "file_path": "lib/matplotlib/artist.py",
            "start_line": 1277,
            "instructions": "Add a try-except block around the call to self.norm.inverse in the format_cursor_data method. If a ValueError is caught, return a default message like 'BoundaryNorm is not invertible'."
          },
          "input_tokens": 4400,
          "output_tokens": 168,
          "retry_message": null,
          "completion_cost": 0.01572
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "Artist.format_cursor_data",
        "end_line": 1321,
        "file_path": "lib/matplotlib/artist.py",
        "max_tokens": 1000,
        "start_line": 1277,
        "temperature": 1.6,
        "instructions": "Add a try-except block around the call to self.norm.inverse in the format_cursor_data method. If a ValueError is caught, return a default message like 'BoundaryNorm is not invertible'.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n    def format_cursor_data(self, data):\n        \"\"\"\n        Return a string representation of *data*.\n\n        .. note::\n            This method is intended to be overridden by artist subclasses.\n            As an end-user of Matplotlib you will most likely not call this\n            method yourself.\n\n        The default implementation converts ints and floats and arrays of ints\n        and floats into a comma-separated string enclosed in square brackets,\n        unless the artist has an associated colorbar, in which case scalar\n        values are formatted using the colorbar's formatter.\n\n        See Also\n        --------\n        get_cursor_data\n        \"\"\"\n        if np.ndim(data) == 0 and isinstance(self, ScalarMappable):\n            # This block logically belongs to ScalarMappable, but can't be\n            # implemented in it because most ScalarMappable subclasses inherit\n            # from Artist first and from ScalarMappable second, so\n            # Artist.format_cursor_data would always have precedence over\n            # ScalarMappable.format_cursor_data.\n            n = self.cmap.N\n            if np.ma.getmask(data):\n                return \"[]\"\n            normed = self.norm(data)\n            if np.isfinite(normed):\n                try:\n                    # Midpoints of neighboring color intervals.\n                    neighbors = self.norm.inverse(\n                        (int(self.norm(data) * n) + np.array([0, 1])) / n)\n                    delta = abs(neighbors - data).max()\n                    g_sig_digits = cbook._g_sig_digits(data, delta)\n                except ValueError:\n                    return 'BoundaryNorm is not invertible'\n            else:\n                g_sig_digits = 3  # Consistent with default below.\n            return \"[{:-#.{}g}]\".format(data, g_sig_digits)\n        else:\n            try:\n                data[0]\n            except (TypeError, IndexError):\n                data = [data]\n            data_str = ', '.join('{:0.3g}'.format(item) for item in data\n                                 if isinstance(item, Number))\n            return \"[\" + data_str + \"]\"\n</replace>"
          },
          "output": {
            "diff": "--- lib/matplotlib/artist.py\n+++ lib/matplotlib/artist.py\n@@ -1303,11 +1303,14 @@\n                 return \"[]\"\n             normed = self.norm(data)\n             if np.isfinite(normed):\n-                # Midpoints of neighboring color intervals.\n-                neighbors = self.norm.inverse(\n-                    (int(self.norm(data) * n) + np.array([0, 1])) / n)\n-                delta = abs(neighbors - data).max()\n-                g_sig_digits = cbook._g_sig_digits(data, delta)\n+                try:\n+                    # Midpoints of neighboring color intervals.\n+                    neighbors = self.norm.inverse(\n+                        (int(self.norm(data) * n) + np.array([0, 1])) / n)\n+                    delta = abs(neighbors - data).max()\n+                    g_sig_digits = cbook._g_sig_digits(data, delta)\n+                except ValueError:\n+                    return 'BoundaryNorm is not invertible'\n             else:\n                 g_sig_digits = 3  # Consistent with default below.\n             return \"[{:-#.{}g}]\".format(data, g_sig_digits)\n",
            "message": "Applied the change to lib/matplotlib/artist.py.",
            "verification_errors": []
          },
          "input_tokens": 6721,
          "output_tokens": 516,
          "retry_message": null,
          "completion_cost": 0.027903
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- lib/matplotlib/artist.py\n+++ lib/matplotlib/artist.py\n@@ -1303,11 +1303,14 @@\n                 return \"[]\"\n             normed = self.norm(data)\n             if np.isfinite(normed):\n-                # Midpoints of neighboring color intervals.\n-                neighbors = self.norm.inverse(\n-                    (int(self.norm(data) * n) + np.array([0, 1])) / n)\n-                delta = abs(neighbors - data).max()\n-                g_sig_digits = cbook._g_sig_digits(data, delta)\n+                try:\n+                    # Midpoints of neighboring color intervals.\n+                    neighbors = self.norm.inverse(\n+                        (int(self.norm(data) * n) + np.array([0, 1])) / n)\n+                    delta = abs(neighbors - data).max()\n+                    g_sig_digits = cbook._g_sig_digits(data, delta)\n+                except ValueError:\n+                    return 'BoundaryNorm is not invertible'\n             else:\n                 g_sig_digits = 3  # Consistent with default below.\n             return \"[{:-#.{}g}]\".format(data, g_sig_digits)\n",
        "model": "deepseek-coder",
        "message": "Applied the change to lib/matplotlib/artist.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue has been resolved by adding proper error handling for the non-invertibility of BoundaryNorm in the format_cursor_data method. The application will no longer crash during mouseover actions, and instead, it will return a default message indicating the non-invertible state.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The previous change added a try-except block around the call to self.norm.inverse in the format_cursor_data method to handle the ValueError when BoundaryNorm is not invertible. This solution is effective in preventing crashes during mouseover actions.",
            "instructions": null
          },
          "output": {
            "message": "The issue has been resolved by adding proper error handling for the non-invertibility of BoundaryNorm in the format_cursor_data method. The application will no longer crash during mouseover actions, and instead, it will return a default message indicating the non-invertible state."
          },
          "input_tokens": 4923,
          "output_tokens": 169,
          "retry_message": null,
          "completion_cost": 0.017304
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue has been resolved by adding proper error handling for the non-invertibility of BoundaryNorm in the format_cursor_data method. The application will no longer crash during mouseover actions, and instead, it will return a default message indicating the non-invertible state.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "[Bug]: scalar mappable format_cursor_data crashes on BoundarNorm\n### Bug summary\r\n\r\nIn 3.5.0 if you do:\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\nimport matplotlib as mpl\r\n\r\nfig, ax = plt.subplots()\r\nnorm = mpl.colors.BoundaryNorm(np.linspace(-4, 4, 5), 256)\r\nX = np.random.randn(10, 10)\r\npc = ax.imshow(X, cmap='RdBu_r', norm=norm)\r\n```\r\n\r\nand mouse over the image, it crashes with\r\n\r\n```\r\nFile \"/Users/jklymak/matplotlib/lib/matplotlib/artist.py\", line 1282, in format_cursor_data\r\n    neighbors = self.norm.inverse(\r\n  File \"/Users/jklymak/matplotlib/lib/matplotlib/colors.py\", line 1829, in inverse\r\n    raise ValueError(\"BoundaryNorm is not invertible\")\r\nValueError: BoundaryNorm is not invertible\r\n```\r\n\r\nand interaction stops.  \r\n\r\nNot sure if we should have a special check here, a try-except, or actually just make BoundaryNorm approximately invertible.  \r\n\r\n\r\n### Matplotlib Version\r\n\r\nmain 3.5.0\r\n\r\n\n[Bug]: scalar mappable format_cursor_data crashes on BoundarNorm\n### Bug summary\r\n\r\nIn 3.5.0 if you do:\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\nimport matplotlib as mpl\r\n\r\nfig, ax = plt.subplots()\r\nnorm = mpl.colors.BoundaryNorm(np.linspace(-4, 4, 5), 256)\r\nX = np.random.randn(10, 10)\r\npc = ax.imshow(X, cmap='RdBu_r', norm=norm)\r\n```\r\n\r\nand mouse over the image, it crashes with\r\n\r\n```\r\nFile \"/Users/jklymak/matplotlib/lib/matplotlib/artist.py\", line 1282, in format_cursor_data\r\n    neighbors = self.norm.inverse(\r\n  File \"/Users/jklymak/matplotlib/lib/matplotlib/colors.py\", line 1829, in inverse\r\n    raise ValueError(\"BoundaryNorm is not invertible\")\r\nValueError: BoundaryNorm is not invertible\r\n```\r\n\r\nand interaction stops.  \r\n\r\nNot sure if we should have a special check here, a try-except, or actually just make BoundaryNorm approximately invertible.  \r\n\r\n\r\n### Matplotlib Version\r\n\r\nmain 3.5.0\r\n\r\n\n"
}