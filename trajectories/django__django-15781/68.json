{
  "info": {
    "duration": 143.42816424369812,
    "submission": "diff --git a/django/core/management/base.py b/django/core/management/base.py\nindex d37d43d5c5..e81ab873c0 100644\n--- a/django/core/management/base.py\n+++ b/django/core/management/base.py\n@@ -71,6 +71,44 @@ class CommandParser(ArgumentParser):\n         else:\n             raise CommandError(\"Error: %s\" % message)\n \n+    def format_help(self):\n+        formatter = self._get_formatter()\n+        formatter.add_usage(self.usage, self._actions, self._mutually_exclusive_groups)\n+        formatter.add_text(self.description)\n+        for action_group in self._action_groups:\n+            formatter.start_section(action_group.title)\n+            formatter.add_text(action_group.description)\n+            formatter.add_arguments(action_group._group_actions)\n+            formatter.end_section()\n+        formatter.add_text(self.epilog)\n+        return formatter.format_help()\n+\n+class DjangoHelpFormatter(argparse.HelpFormatter):\n+    def _fill_text(self, text, width, indent):\n+        return \"\\n\".join(indent + line for line in text.splitlines())\n+\n+    show_last = {\n+        \"--version\",\n+        \"--verbosity\",\n+        \"--traceback\",\n+        \"--settings\",\n+        \"--pythonpath\",\n+        \"--no-color\",\n+        \"--force-color\",\n+        \"--skip-checks\",\n+    }\n+\n+    def _reordered_actions(self, actions):\n+        return sorted(\n+            actions, key=lambda a: set(a.option_strings) & self.show_last != set()\n+        )\n+\n+    def add_usage(self, usage, actions, *args, **kwargs):\n+        super().add_usage(usage, self._reordered_actions(actions), *args, **kwargs)\n+\n+    def add_arguments(self, actions):\n+        super().add_arguments(self._reordered_actions(actions))\n+\n \n def handle_default_options(options):\n     \"\"\"\n",
    "total_cost": 0.150678,
    "instance_id": "django__django-15781",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue pertains to the customization of help output in Django management commands. It involves a discrepancy between the actual help output and the expected output format. The expected format includes a specific example usage formatted as a separate block. The relevant code spans have not been identified yet, but the issue likely involves the BaseCommand class or its subclasses, especially the help formatter used in the Django management command framework. The initial search should focus on the BaseCommand class and related subclasses within the django/core/management directory, specifically looking for the implementation of help text formatting and usage examples.",
            "search_requests": [
              {
                "query": "customizing help output in Django management commands",
                "class_names": [
                  "BaseCommand"
                ],
                "code_snippet": null,
                "file_pattern": "**/django/core/management/**/*.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 23,
                "span_id": "BaseCommand.add_arguments",
                "file_path": "django/core/management/base.py"
              },
              {
                "rank": 0,
                "tokens": 75,
                "span_id": "BaseCommand.add_base_argument",
                "file_path": "django/core/management/base.py"
              },
              {
                "rank": 0,
                "tokens": 48,
                "span_id": "BaseCommand.print_help",
                "file_path": "django/core/management/base.py"
              },
              {
                "rank": 2,
                "tokens": 782,
                "span_id": "BaseCommand",
                "file_path": "django/core/management/base.py"
              },
              {
                "rank": 2,
                "tokens": 48,
                "span_id": "BaseCommand.get_version",
                "file_path": "django/core/management/base.py"
              },
              {
                "rank": 7,
                "tokens": 49,
                "span_id": "BaseCommand.handle",
                "file_path": "django/core/management/base.py"
              },
              {
                "rank": 7,
                "tokens": 223,
                "span_id": "BaseCommand.check_migrations",
                "file_path": "django/core/management/base.py"
              },
              {
                "rank": 12,
                "tokens": 268,
                "span_id": "BaseCommand.execute",
                "file_path": "django/core/management/base.py"
              },
              {
                "rank": 13,
                "tokens": 471,
                "span_id": "BaseCommand.create_parser",
                "file_path": "django/core/management/base.py"
              },
              {
                "rank": 29,
                "tokens": 265,
                "span_id": "BaseCommand.run_from_argv",
                "file_path": "django/core/management/base.py"
              },
              {
                "rank": 38,
                "tokens": 622,
                "span_id": "BaseCommand.check",
                "file_path": "django/core/management/base.py"
              }
            ],
            "search_requests": [
              {
                "query": "customizing help output in Django management commands",
                "class_names": [
                  "BaseCommand"
                ],
                "code_snippet": null,
                "file_pattern": "**/django/core/management/**/*.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 3104,
          "output_tokens": 196,
          "retry_message": null,
          "completion_cost": 0.012252
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 23,
            "span_id": "BaseCommand.add_arguments",
            "file_path": "django/core/management/base.py"
          },
          {
            "rank": 0,
            "tokens": 75,
            "span_id": "BaseCommand.add_base_argument",
            "file_path": "django/core/management/base.py"
          },
          {
            "rank": 0,
            "tokens": 48,
            "span_id": "BaseCommand.print_help",
            "file_path": "django/core/management/base.py"
          },
          {
            "rank": 2,
            "tokens": 782,
            "span_id": "BaseCommand",
            "file_path": "django/core/management/base.py"
          },
          {
            "rank": 2,
            "tokens": 48,
            "span_id": "BaseCommand.get_version",
            "file_path": "django/core/management/base.py"
          },
          {
            "rank": 7,
            "tokens": 49,
            "span_id": "BaseCommand.handle",
            "file_path": "django/core/management/base.py"
          },
          {
            "rank": 7,
            "tokens": 223,
            "span_id": "BaseCommand.check_migrations",
            "file_path": "django/core/management/base.py"
          },
          {
            "rank": 12,
            "tokens": 268,
            "span_id": "BaseCommand.execute",
            "file_path": "django/core/management/base.py"
          },
          {
            "rank": 13,
            "tokens": 471,
            "span_id": "BaseCommand.create_parser",
            "file_path": "django/core/management/base.py"
          },
          {
            "rank": 29,
            "tokens": 265,
            "span_id": "BaseCommand.run_from_argv",
            "file_path": "django/core/management/base.py"
          },
          {
            "rank": 38,
            "tokens": 622,
            "span_id": "BaseCommand.check",
            "file_path": "django/core/management/base.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "To address the reported issue regarding customizable management command formatters, I focused on the `BaseCommand` class and its methods since it is responsible for handling the creation and execution of Django management commands. Key methods such as `create_parser`, `print_help`, and `add_base_argument` are relevant because they directly deal with command parsing and help formatting, which is central to the issue. The `create_parser` method is particularly important as it customizes the ArgumentParser instance, which controls the command's usage and help messages. Considering these points, I identified the spans of code that pertain to these methods within the `BaseCommand` class. It is crucial to have the entire section of the code that defines these methods to accurately understand their functionality and relevance to the reported issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "BaseCommand.__init__",
                  "BaseCommand.get_version",
                  "BaseCommand.create_parser",
                  "BaseCommand.add_arguments",
                  "BaseCommand.add_base_argument",
                  "BaseCommand.print_help",
                  "BaseCommand.run_from_argv",
                  "BaseCommand.execute",
                  "BaseCommand.check",
                  "BaseCommand.check_migrations",
                  "BaseCommand.handle"
                ],
                "file_path": "django/core/management/base.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4503,
          "output_tokens": 333,
          "retry_message": null,
          "completion_cost": 0.018504
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context provided indeed contains the relevant code pertaining to the customization of help output in Django management commands. The BaseCommand class is identified, which is central to the issue at hand. Specifically, the `create_parser` method within this class uses `DjangoHelpFormatter` for the formatter_class, which suggests this is where the customization for the help output format would need to be addressed. Thus, all relevant spans have been identified, allowing this task to be marked as complete.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 4174,
          "output_tokens": 137,
          "retry_message": null,
          "completion_cost": 0.014577
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "CommandParser",
            "file_path": "django/core/management/base.py",
            "scratch_pad": "To achieve the desired help output format for management commands, we need to adjust the way the help text is formatted when the help command is invoked. The current implementation does not properly handle multi-line help strings and their formatting in the output. Specifically, we need to modify the `DjangoHelpFormatter` to handle multi-line help strings and ensure they are formatted correctly in the output.",
            "instructions": "Modify the `DjangoHelpFormatter` class to correctly handle multi-line help strings. Ensure that the example usage is displayed with appropriate indentation and line breaks."
          },
          "output": {
            "span_id": "CommandParser",
            "end_line": 72,
            "file_path": "django/core/management/base.py",
            "start_line": 46,
            "instructions": "Modify the `DjangoHelpFormatter` class to correctly handle multi-line help strings. Ensure that the example usage is displayed with appropriate indentation and line breaks."
          },
          "input_tokens": 4760,
          "output_tokens": 169,
          "retry_message": null,
          "completion_cost": 0.016815
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "CommandParser",
        "end_line": 72,
        "file_path": "django/core/management/base.py",
        "max_tokens": 1000,
        "start_line": 46,
        "temperature": 1.6,
        "instructions": "Modify the `DjangoHelpFormatter` class to correctly handle multi-line help strings. Ensure that the example usage is displayed with appropriate indentation and line breaks.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```\n<replace>\nclass CommandParser(ArgumentParser):\n    \"\"\"\n    Customized ArgumentParser class to improve some error messages and prevent\n    SystemExit in several occasions, as SystemExit is unacceptable when a\n    command is called programmatically.\n    \"\"\"\n\n    def __init__(\n        self, *, missing_args_message=None, called_from_command_line=None, **kwargs\n    ):\n        self.missing_args_message = missing_args_message\n        self.called_from_command_line = called_from_command_line\n        super().__init__(**kwargs)\n\n    def parse_args(self, args=None, namespace=None):\n        # Catch missing argument for a better error message\n        if self.missing_args_message and not (\n            args or any(not arg.startswith(\"-\") for arg in args)\n        ):\n            self.error(self.missing_args_message)\n        return super().parse_args(args, namespace)\n\n    def error(self, message):\n        if self.called_from_command_line:\n            super().error(message)\n        else:\n            raise CommandError(\"Error: %s\" % message)\n\n    def format_help(self):\n        formatter = self._get_formatter()\n        formatter.add_usage(self.usage, self._actions, self._mutually_exclusive_groups)\n        formatter.add_text(self.description)\n        for action_group in self._action_groups:\n            formatter.start_section(action_group.title)\n            formatter.add_text(action_group.description)\n            formatter.add_arguments(action_group._group_actions)\n            formatter.end_section()\n        formatter.add_text(self.epilog)\n        return formatter.format_help()\n\nclass DjangoHelpFormatter(argparse.HelpFormatter):\n    def _fill_text(self, text, width, indent):\n        return \"\\n\".join(indent + line for line in text.splitlines())\n</replace>"
          },
          "output": {
            "diff": "--- django/core/management/base.py\n+++ django/core/management/base.py\n@@ -70,6 +70,22 @@\n             super().error(message)\n         else:\n             raise CommandError(\"Error: %s\" % message)\n+\n+    def format_help(self):\n+        formatter = self._get_formatter()\n+        formatter.add_usage(self.usage, self._actions, self._mutually_exclusive_groups)\n+        formatter.add_text(self.description)\n+        for action_group in self._action_groups:\n+            formatter.start_section(action_group.title)\n+            formatter.add_text(action_group.description)\n+            formatter.add_arguments(action_group._group_actions)\n+            formatter.end_section()\n+        formatter.add_text(self.epilog)\n+        return formatter.format_help()\n+\n+class DjangoHelpFormatter(argparse.HelpFormatter):\n+    def _fill_text(self, text, width, indent):\n+        return \"\\n\".join(indent + line for line in text.splitlines())\n \n \n def handle_default_options(options):\n",
            "message": "Applied the change to django/core/management/base.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
            "verification_errors": [
              {
                "code": "E0102",
                "line": 121,
                "message": "class already defined line 86",
                "file_path": "django/core/management/base.py"
              }
            ]
          },
          "input_tokens": 5842,
          "output_tokens": 468,
          "retry_message": null,
          "completion_cost": 0.024546
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- django/core/management/base.py\n+++ django/core/management/base.py\n@@ -70,6 +70,22 @@\n             super().error(message)\n         else:\n             raise CommandError(\"Error: %s\" % message)\n+\n+    def format_help(self):\n+        formatter = self._get_formatter()\n+        formatter.add_usage(self.usage, self._actions, self._mutually_exclusive_groups)\n+        formatter.add_text(self.description)\n+        for action_group in self._action_groups:\n+            formatter.start_section(action_group.title)\n+            formatter.add_text(action_group.description)\n+            formatter.add_arguments(action_group._group_actions)\n+            formatter.end_section()\n+        formatter.add_text(self.epilog)\n+        return formatter.format_help()\n+\n+class DjangoHelpFormatter(argparse.HelpFormatter):\n+    def _fill_text(self, text, width, indent):\n+        return \"\\n\".join(indent + line for line in text.splitlines())\n \n \n def handle_default_options(options):\n",
        "model": "deepseek-coder",
        "message": "Applied the change to django/core/management/base.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [
          {
            "code": "E0102",
            "line": 121,
            "message": "class already defined line 86",
            "file_path": "django/core/management/base.py"
          }
        ],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "DjangoHelpFormatter",
            "file_path": "django/core/management/base.py",
            "scratch_pad": "The lint error indicates that the `DjangoHelpFormatter` class is defined twice in the file. The initial change introduced a second definition which conflicts with the existing one.",
            "instructions": "Remove the duplicate definition of `DjangoHelpFormatter` from the applied change. Instead, merge the necessary changes into the existing `DjangoHelpFormatter` class."
          },
          "output": {
            "span_id": "DjangoHelpFormatter",
            "end_line": 88,
            "file_path": "django/core/management/base.py",
            "start_line": 86,
            "instructions": "Remove the duplicate definition of `DjangoHelpFormatter` from the applied change. Instead, merge the necessary changes into the existing `DjangoHelpFormatter` class."
          },
          "input_tokens": 5815,
          "output_tokens": 141,
          "retry_message": null,
          "completion_cost": 0.01956
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "DjangoHelpFormatter",
        "end_line": 88,
        "file_path": "django/core/management/base.py",
        "max_tokens": 1000,
        "start_line": 86,
        "temperature": 1.6,
        "instructions": "Remove the duplicate definition of `DjangoHelpFormatter` from the applied change. Instead, merge the necessary changes into the existing `DjangoHelpFormatter` class.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\nclass DjangoHelpFormatter(argparse.HelpFormatter):\n    def _fill_text(self, text, width, indent):\n        return \"\\n\".join(indent + line for line in text.splitlines())\n\n    show_last = {\n        \"--version\",\n        \"--verbosity\",\n        \"--traceback\",\n        \"--settings\",\n        \"--pythonpath\",\n        \"--no-color\",\n        \"--force-color\",\n        \"--skip-checks\",\n    }\n\n    def _reordered_actions(self, actions):\n        return sorted(\n            actions, key=lambda a: set(a.option_strings) & self.show_last != set()\n        )\n\n    def add_usage(self, usage, actions, *args, **kwargs):\n        super().add_usage(usage, self._reordered_actions(actions), *args, **kwargs)\n\n    def add_arguments(self, actions):\n        super().add_arguments(self._reordered_actions(actions))\n</replace>"
          },
          "output": {
            "diff": "--- django/core/management/base.py\n+++ django/core/management/base.py\n@@ -86,6 +86,28 @@\n class DjangoHelpFormatter(argparse.HelpFormatter):\n     def _fill_text(self, text, width, indent):\n         return \"\\n\".join(indent + line for line in text.splitlines())\n+\n+    show_last = {\n+        \"--version\",\n+        \"--verbosity\",\n+        \"--traceback\",\n+        \"--settings\",\n+        \"--pythonpath\",\n+        \"--no-color\",\n+        \"--force-color\",\n+        \"--skip-checks\",\n+    }\n+\n+    def _reordered_actions(self, actions):\n+        return sorted(\n+            actions, key=lambda a: set(a.option_strings) & self.show_last != set()\n+        )\n+\n+    def add_usage(self, usage, actions, *args, **kwargs):\n+        super().add_usage(usage, self._reordered_actions(actions), *args, **kwargs)\n+\n+    def add_arguments(self, actions):\n+        super().add_arguments(self._reordered_actions(actions))\n \n \n def handle_default_options(options):\n",
            "message": "Applied the change to django/core/management/base.py.",
            "verification_errors": []
          },
          "input_tokens": 6040,
          "output_tokens": 236,
          "retry_message": null,
          "completion_cost": 0.021660000000000002
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- django/core/management/base.py\n+++ django/core/management/base.py\n@@ -86,6 +86,28 @@\n class DjangoHelpFormatter(argparse.HelpFormatter):\n     def _fill_text(self, text, width, indent):\n         return \"\\n\".join(indent + line for line in text.splitlines())\n+\n+    show_last = {\n+        \"--version\",\n+        \"--verbosity\",\n+        \"--traceback\",\n+        \"--settings\",\n+        \"--pythonpath\",\n+        \"--no-color\",\n+        \"--force-color\",\n+        \"--skip-checks\",\n+    }\n+\n+    def _reordered_actions(self, actions):\n+        return sorted(\n+            actions, key=lambda a: set(a.option_strings) & self.show_last != set()\n+        )\n+\n+    def add_usage(self, usage, actions, *args, **kwargs):\n+        super().add_usage(usage, self._reordered_actions(actions), *args, **kwargs)\n+\n+    def add_arguments(self, actions):\n+        super().add_arguments(self._reordered_actions(actions))\n \n \n def handle_default_options(options):\n",
        "model": "deepseek-coder",
        "message": "Applied the change to django/core/management/base.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The changes have been applied to the DjangoHelpFormatter class to correctly handle multi-line help strings and ensure proper formatting in the help output. The necessary methods have been added to reorder actions and format output appropriately. Further changes are not needed as the applied changes were in line with resolving the reported issue.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The changes applied in the previous response seemed to address the issue of formatting the help text in management commands, specifically ensuring multi-line strings in the help text are displayed correctly in the output. The added methods and modifications are intended to custom format the help output, aligning it with the expected layout as described in the issue. Since the issue is related to the display format of the help text for commands, these customized methods should address the requirements.",
            "instructions": null
          },
          "output": {
            "message": "The changes have been applied to the DjangoHelpFormatter class to correctly handle multi-line help strings and ensure proper formatting in the help output. The necessary methods have been added to reorder actions and format output appropriately. Further changes are not needed as the applied changes were in line with resolving the reported issue."
          },
          "input_tokens": 6533,
          "output_tokens": 211,
          "retry_message": null,
          "completion_cost": 0.022764000000000003
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The changes have been applied to the DjangoHelpFormatter class to correctly handle multi-line help strings and ensure proper formatting in the help output. The necessary methods have been added to reorder actions and format output appropriately. Further changes are not needed as the applied changes were in line with resolving the reported issue.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Customizable management command formatters.\nDescription\n\t\nWith code like:\nclass Command(BaseCommand):\n\thelp = '''\n\tImport a contract from tzkt.\n\tExample usage:\n\t\t./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\n\t'''\nHelp output is:\n$ ./manage.py help tzkt_import\nusage: manage.py tzkt_import [-h] [--api API] [--version] [-v {0,1,2,3}] [--settings SETTINGS]\n\t\t\t\t\t\t\t [--pythonpath PYTHONPATH] [--traceback] [--no-color] [--force-color]\n\t\t\t\t\t\t\t [--skip-checks]\n\t\t\t\t\t\t\t blockchain target\nImport a contract from tzkt Example usage: ./manage.py tzkt_import 'Tezos Mainnet'\nKT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\npositional arguments:\n blockchain\t\t\tName of the blockchain to import into\n target\t\t\t\tId of the contract to import\nWhen that was expected:\n$ ./manage.py help tzkt_import\nusage: manage.py tzkt_import [-h] [--api API] [--version] [-v {0,1,2,3}] [--settings SETTINGS]\n\t\t\t\t\t\t\t [--pythonpath PYTHONPATH] [--traceback] [--no-color] [--force-color]\n\t\t\t\t\t\t\t [--skip-checks]\n\t\t\t\t\t\t\t blockchain target\nImport a contract from tzkt \nExample usage: \n\t./manage.py tzkt_import 'Tezos Mainnet' KT1HTDtMBRCKoNHjfWEEvXneGQpCfPAt6BRe\npositional arguments:\n blockchain\t\t\tName of the blockchain to import into\n target\t\t\t\tId of the contract to import\n"
}