{
  "info": {
    "duration": 138.5302128791809,
    "submission": "diff --git a/src/_pytest/_py/path.py b/src/_pytest/_py/path.py\nindex 73a070d19..fa1de2c4c 100644\n--- a/src/_pytest/_py/path.py\n+++ b/src/_pytest/_py/path.py\n@@ -1100,7 +1100,12 @@ class LocalPath:\n                     f\"Can't find module {modname} at location {str(self)}\"\n                 )\n             mod = importlib.util.module_from_spec(spec)\n+            if mod.__name__ in sys.modules:\n+                existing_mod = sys.modules[mod.__name__]\n+                if existing_mod.__file__ and existing_mod.__file__.endswith(str(self)):\n+                    return existing_mod\n             spec.loader.exec_module(mod)\n+            sys.modules[mod.__name__] = mod\n             return mod\n \n         pkgpath = None\n",
    "total_cost": 0.128931,
    "instance_id": "pytest-dev__pytest-11148",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves a module being imported twice when switching to `importlib` for the `import-mode` in a pytest environment. This leads to discrepancies in module versions and test failures. The focus should be on identifying the code responsible for module importing and checking its behavior with `importlib`, especially in the context of pytest collection and execution. We should also look for any specific handling of `pmxbot.logging` or similar namespace packages.",
            "search_requests": [
              {
                "query": "import module using importlib",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pmxbot/**/*.py",
                "function_names": []
              },
              {
                "query": "pytest module collection",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pmxbot/**/*.py",
                "function_names": []
              },
              {
                "query": "importlib handling in pytest",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pytest/**/*.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 712,
                "span_id": "LocalPath.pyimport",
                "file_path": "src/_pytest/_py/path.py"
              },
              {
                "rank": 1,
                "tokens": 422,
                "span_id": "Module._importtestmodule",
                "file_path": "src/_pytest/python.py"
              },
              {
                "rank": 2,
                "tokens": 856,
                "span_id": "import_path",
                "file_path": "src/_pytest/pathlib.py"
              },
              {
                "rank": 4,
                "tokens": 397,
                "span_id": "importorskip",
                "file_path": "src/_pytest/outcomes.py"
              },
              {
                "rank": 5,
                "tokens": 144,
                "span_id": "resolve",
                "file_path": "src/_pytest/monkeypatch.py"
              },
              {
                "rank": 6,
                "tokens": 64,
                "span_id": "docstring",
                "file_path": "src/py.py"
              },
              {
                "rank": 7,
                "tokens": 119,
                "span_id": "search_pypath",
                "file_path": "src/_pytest/main.py"
              },
              {
                "rank": 8,
                "tokens": 4,
                "span_id": "TestModule",
                "file_path": "testing/python/collect.py"
              },
              {
                "rank": 8,
                "tokens": 49,
                "span_id": "TestModule.test_failing_import",
                "file_path": "testing/python/collect.py"
              },
              {
                "rank": 0,
                "tokens": 4,
                "span_id": "TestModule",
                "file_path": "testing/python/collect.py"
              },
              {
                "rank": 0,
                "tokens": 49,
                "span_id": "TestModule.test_failing_import",
                "file_path": "testing/python/collect.py"
              },
              {
                "rank": 0,
                "tokens": 148,
                "span_id": "TestModule.test_import_duplicate",
                "file_path": "testing/python/collect.py"
              },
              {
                "rank": 0,
                "tokens": 70,
                "span_id": "imports",
                "file_path": "testing/python/collect.py"
              },
              {
                "rank": 2,
                "tokens": 8,
                "span_id": "TestConftestCustomization",
                "file_path": "testing/python/collect.py"
              },
              {
                "rank": 1,
                "tokens": 47,
                "span_id": "Module.collect",
                "file_path": "src/_pytest/python.py"
              },
              {
                "rank": 1,
                "tokens": 16,
                "span_id": "Module",
                "file_path": "src/_pytest/python.py"
              },
              {
                "rank": 1,
                "tokens": 13,
                "span_id": "Module._getobj",
                "file_path": "src/_pytest/python.py"
              },
              {
                "rank": 1,
                "tokens": 359,
                "span_id": "Module._inject_setup_module_fixture",
                "file_path": "src/_pytest/python.py"
              },
              {
                "rank": 0,
                "tokens": 494,
                "span_id": "docstring",
                "file_path": "src/pytest/__init__.py"
              },
              {
                "rank": 0,
                "tokens": 620,
                "span_id": "imports:63",
                "file_path": "src/pytest/__init__.py"
              },
              {
                "rank": 2,
                "tokens": 51,
                "span_id": "__getattr__",
                "file_path": "src/pytest/__init__.py"
              },
              {
                "rank": 1,
                "tokens": 25,
                "span_id": "docstring",
                "file_path": "src/pytest/__main__.py"
              }
            ],
            "search_requests": [
              {
                "query": "import module using importlib",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pmxbot/**/*.py",
                "function_names": []
              },
              {
                "query": "pytest module collection",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pmxbot/**/*.py",
                "function_names": []
              },
              {
                "query": "importlib handling in pytest",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pytest/**/*.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 4039,
          "output_tokens": 269,
          "retry_message": null,
          "completion_cost": 0.016152
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 712,
            "span_id": "LocalPath.pyimport",
            "file_path": "src/_pytest/_py/path.py"
          },
          {
            "rank": 0,
            "tokens": 4,
            "span_id": "TestModule",
            "file_path": "testing/python/collect.py"
          },
          {
            "rank": 0,
            "tokens": 49,
            "span_id": "TestModule.test_failing_import",
            "file_path": "testing/python/collect.py"
          },
          {
            "rank": 0,
            "tokens": 148,
            "span_id": "TestModule.test_import_duplicate",
            "file_path": "testing/python/collect.py"
          },
          {
            "rank": 0,
            "tokens": 70,
            "span_id": "imports",
            "file_path": "testing/python/collect.py"
          },
          {
            "rank": 0,
            "tokens": 494,
            "span_id": "docstring",
            "file_path": "src/pytest/__init__.py"
          },
          {
            "rank": 0,
            "tokens": 620,
            "span_id": "imports:63",
            "file_path": "src/pytest/__init__.py"
          },
          {
            "rank": 1,
            "tokens": 422,
            "span_id": "Module._importtestmodule",
            "file_path": "src/_pytest/python.py"
          },
          {
            "rank": 1,
            "tokens": 47,
            "span_id": "Module.collect",
            "file_path": "src/_pytest/python.py"
          },
          {
            "rank": 1,
            "tokens": 16,
            "span_id": "Module",
            "file_path": "src/_pytest/python.py"
          },
          {
            "rank": 1,
            "tokens": 13,
            "span_id": "Module._getobj",
            "file_path": "src/_pytest/python.py"
          },
          {
            "rank": 1,
            "tokens": 359,
            "span_id": "Module._inject_setup_module_fixture",
            "file_path": "src/_pytest/python.py"
          },
          {
            "rank": 1,
            "tokens": 25,
            "span_id": "docstring",
            "file_path": "src/pytest/__main__.py"
          },
          {
            "rank": 2,
            "tokens": 856,
            "span_id": "import_path",
            "file_path": "src/_pytest/pathlib.py"
          },
          {
            "rank": 2,
            "tokens": 8,
            "span_id": "TestConftestCustomization",
            "file_path": "testing/python/collect.py"
          },
          {
            "rank": 2,
            "tokens": 51,
            "span_id": "__getattr__",
            "file_path": "src/pytest/__init__.py"
          },
          {
            "rank": 4,
            "tokens": 397,
            "span_id": "importorskip",
            "file_path": "src/_pytest/outcomes.py"
          },
          {
            "rank": 5,
            "tokens": 144,
            "span_id": "resolve",
            "file_path": "src/_pytest/monkeypatch.py"
          },
          {
            "rank": 6,
            "tokens": 64,
            "span_id": "docstring",
            "file_path": "src/py.py"
          },
          {
            "rank": 7,
            "tokens": 119,
            "span_id": "search_pypath",
            "file_path": "src/_pytest/main.py"
          },
          {
            "rank": 8,
            "tokens": 4,
            "span_id": "TestModule",
            "file_path": "testing/python/collect.py"
          },
          {
            "rank": 8,
            "tokens": 49,
            "span_id": "TestModule.test_failing_import",
            "file_path": "testing/python/collect.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves problems with module imports, particularly when switching from pkg_resources style namespace packaging to PEP 420 namespace packages using `importlib`. The issue seems to be about duplicate imports causing issues with test initialization. The search results include several files that might be relevant due to their handling of module imports and use of `importlib`. For instance, `src/_pytest/_py/path.py` contains a class `LocalPath` with a method `pyimport` that handles imports using `importlib`. Additionally, `testing/python/collect.py` contains tests that might be relevant to the issue, such as `test_import_duplicate`, which tests for duplicate imports. These could be insightful in understanding how pytest handles such situations. Other files like `src/_pytest/pathlib.py` also deal with importing modules, which could be relevant for understanding the behavior of `importlib` in the context of pytest.",
            "identified_spans": [
              {
                "span_ids": [
                  "LocalPath.pyimport"
                ],
                "file_path": "src/_pytest/_py/path.py"
              },
              {
                "span_ids": [
                  "TestModule.test_import_duplicate"
                ],
                "file_path": "testing/python/collect.py"
              },
              {
                "span_ids": [
                  "import_path"
                ],
                "file_path": "src/_pytest/pathlib.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 5691,
          "output_tokens": 351,
          "retry_message": null,
          "completion_cost": 0.022338
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context provided contains relevant code from pytest related to module importing and handling, which aligns with the issue description. Specifically, the `pyimport` method in `src/_pytest/_py/path.py` and the `import_path` function in `src/_pytest/pathlib.py` handle module importing using `importlib` under different modes. Additionally, the `test_import_duplicate` test in `testing/python/collect.py` simulates and tests the scenario of duplicate module imports, which could be indicative of the problem described. These sections are highly relevant to the issue of module import mismatches and could potentially contribute to the observed errors. Therefore, the file context provided is sufficient to infer that the relevant areas of the codebase have been identified, although further detailed analysis in the actual context of the `pmxbot` project might be necessary to pinpoint the exact cause.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 4799,
          "output_tokens": 223,
          "retry_message": null,
          "completion_cost": 0.017742
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "LocalPath.pyimport",
            "file_path": "src/_pytest/_py/path.py",
            "scratch_pad": "The issue reported involves a module being imported twice due to the use of `importlib` for the `import-mode`. This results in two different versions of the module being present in `sys.modules`. The relevant code spans are in `LocalPath.pyimport` and `import_path` where the import logic is handled.",
            "instructions": "Ensure that the module is only imported once and that the correct version is used in `sys.modules`. Modify the `pyimport` method in `src/_pytest/_py/path.py` to handle this correctly when `import-mode=importlib`."
          },
          "output": {
            "span_id": "LocalPath.pyimport",
            "file_path": "src/_pytest/_py/path.py",
            "instructions": "Ensure that the module is only imported once and that the correct version is used in `sys.modules`. Modify the `pyimport` method in `src/_pytest/_py/path.py` to handle this correctly when `import-mode=importlib`."
          },
          "input_tokens": 5908,
          "output_tokens": 184,
          "retry_message": null,
          "completion_cost": 0.020484
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "LocalPath.pyimport",
        "end_line": null,
        "file_path": "src/_pytest/_py/path.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Ensure that the module is only imported once and that the correct version is used in `sys.modules`. Modify the `pyimport` method in `src/_pytest/_py/path.py` to handle this correctly when `import-mode=importlib`.\n\nThe pyimport method needs modification to ensure that the module is only imported once and that the correct version is used in sys.modules. The changes are required within the block that handles 'importlib' mode.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 1104,
            "start_line": 1094,
            "scratch_pad": "The pyimport method needs modification to ensure that the module is only imported once and that the correct version is used in sys.modules. The changes are required within the block that handles 'importlib' mode."
          },
          "output": {
            "span_id": "LocalPath.pyimport",
            "end_line": 1104,
            "file_path": "src/_pytest/_py/path.py",
            "start_line": 1094,
            "instructions": "Ensure that the module is only imported once and that the correct version is used in `sys.modules`. Modify the `pyimport` method in `src/_pytest/_py/path.py` to handle this correctly when `import-mode=importlib`.\n\nThe pyimport method needs modification to ensure that the module is only imported once and that the correct version is used in sys.modules. The changes are required within the block that handles 'importlib' mode."
          },
          "input_tokens": 1844,
          "output_tokens": 83,
          "retry_message": null,
          "completion_cost": 0.006777
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "LocalPath.pyimport",
        "end_line": 1104,
        "file_path": "src/_pytest/_py/path.py",
        "max_tokens": 1000,
        "start_line": 1094,
        "temperature": 1.6,
        "instructions": "Ensure that the module is only imported once and that the correct version is used in `sys.modules`. Modify the `pyimport` method in `src/_pytest/_py/path.py` to handle this correctly when `import-mode=importlib`.\n\nThe pyimport method needs modification to ensure that the module is only imported once and that the correct version is used in sys.modules. The changes are required within the block that handles 'importlib' mode.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```\n<replace>\n        if ensuresyspath == \"importlib\":\n            if modname is None:\n                modname = self.purebasename\n            spec = importlib.util.spec_from_file_location(modname, str(self))\n            if spec is None or spec.loader is None:\n                raise ImportError(\n                    f\"Can't find module {modname} at location {str(self)}\"\n                )\n            mod = importlib.util.module_from_spec(spec)\n            if mod.__name__ in sys.modules:\n                existing_mod = sys.modules[mod.__name__]\n                if existing_mod.__file__ and existing_mod.__file__.endswith(str(self)):\n                    return existing_mod\n            spec.loader.exec_module(mod)\n            sys.modules[mod.__name__] = mod\n            return mod\n</replace>"
          },
          "output": {
            "diff": "--- src/_pytest/_py/path.py\n+++ src/_pytest/_py/path.py\n@@ -1100,7 +1100,12 @@\n                     f\"Can't find module {modname} at location {str(self)}\"\n                 )\n             mod = importlib.util.module_from_spec(spec)\n+            if mod.__name__ in sys.modules:\n+                existing_mod = sys.modules[mod.__name__]\n+                if existing_mod.__file__ and existing_mod.__file__.endswith(str(self)):\n+                    return existing_mod\n             spec.loader.exec_module(mod)\n+            sys.modules[mod.__name__] = mod\n             return mod\n \n         pkgpath = None\n",
            "message": "Applied the change to src/_pytest/_py/path.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 6722,
          "output_tokens": 206,
          "retry_message": null,
          "completion_cost": 0.023256
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- src/_pytest/_py/path.py\n+++ src/_pytest/_py/path.py\n@@ -1100,7 +1100,12 @@\n                     f\"Can't find module {modname} at location {str(self)}\"\n                 )\n             mod = importlib.util.module_from_spec(spec)\n+            if mod.__name__ in sys.modules:\n+                existing_mod = sys.modules[mod.__name__]\n+                if existing_mod.__file__ and existing_mod.__file__.endswith(str(self)):\n+                    return existing_mod\n             spec.loader.exec_module(mod)\n+            sys.modules[mod.__name__] = mod\n             return mod\n \n         pkgpath = None\n",
        "model": "deepseek-coder",
        "message": "Applied the change to src/_pytest/_py/path.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The necessary changes to ensure modules are only imported once and correctly have been implemented in the relevant code span. The issue of module import duplication should now be resolved.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The change to ensure a module is only imported once and that the correct version is used in `sys.modules` has been applied to `LocalPath.pyimport` in `src/_pytest/_py/path.py`. The modification checks if the module is already in `sys.modules` and if it is, it verifies that the existing module's file path matches the current path to avoid duplicate imports. This should resolve the issue of having two different versions of the same module in `sys.modules`.",
            "instructions": null
          },
          "output": {
            "message": "The necessary changes to ensure modules are only imported once and correctly have been implemented in the relevant code span. The issue of module import duplication should now be resolved."
          },
          "input_tokens": 6399,
          "output_tokens": 199,
          "retry_message": null,
          "completion_cost": 0.022182
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The necessary changes to ensure modules are only imported once and correctly have been implemented in the relevant code span. The issue of module import duplication should now be resolved.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Module imported twice under import-mode=importlib\nIn pmxbot/pmxbot@7f189ad, I'm attempting to switch pmxbot off of pkg_resources style namespace packaging to PEP 420 namespace packages. To do so, I've needed to switch to `importlib` for the `import-mode` and re-organize the tests to avoid import errors on the tests.\r\n\r\nYet even after working around these issues, the tests are failing when the effect of `core.initialize()` doesn't seem to have had any effect.\r\n\r\nInvestigating deeper, I see that initializer is executed and performs its actions (setting a class variable `pmxbot.logging.Logger.store`), but when that happens, there are two different versions of `pmxbot.logging` present, one in `sys.modules` and another found in `tests.unit.test_commands.logging`:\r\n\r\n```\r\n=========================================================================== test session starts ===========================================================================\r\nplatform darwin -- Python 3.11.1, pytest-7.2.0, pluggy-1.0.0\r\ncachedir: .tox/python/.pytest_cache\r\nrootdir: /Users/jaraco/code/pmxbot/pmxbot, configfile: pytest.ini\r\nplugins: black-0.3.12, mypy-0.10.3, jaraco.test-5.3.0, checkdocs-2.9.0, flake8-1.1.1, enabler-2.0.0, jaraco.mongodb-11.2.1, pmxbot-1122.14.3.dev13+g7f189ad\r\ncollected 421 items / 180 deselected / 241 selected                                                                                                                       \r\nrun-last-failure: rerun previous 240 failures (skipped 14 files)\r\n\r\ntests/unit/test_commands.py E\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> traceback >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n\r\ncls = <class 'tests.unit.test_commands.TestCommands'>\r\n\r\n    @classmethod\r\n    def setup_class(cls):\r\n        path = os.path.dirname(os.path.abspath(__file__))\r\n        configfile = os.path.join(path, 'testconf.yaml')\r\n        config = pmxbot.dictlib.ConfigDict.from_yaml(configfile)\r\n        cls.bot = core.initialize(config)\r\n>       logging.Logger.store.message(\"logged\", \"testrunner\", \"some text\")\r\nE       AttributeError: type object 'Logger' has no attribute 'store'\r\n\r\ntests/unit/test_commands.py:37: AttributeError\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> entering PDB >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> PDB post_mortem (IO-capturing turned off) >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n> /Users/jaraco/code/pmxbot/pmxbot/tests/unit/test_commands.py(37)setup_class()\r\n-> logging.Logger.store.message(\"logged\", \"testrunner\", \"some text\")\r\n(Pdb) logging.Logger\r\n<class 'pmxbot.logging.Logger'>\r\n(Pdb) logging\r\n<module 'pmxbot.logging' from '/Users/jaraco/code/pmxbot/pmxbot/pmxbot/logging.py'>\r\n(Pdb) import sys\r\n(Pdb) sys.modules['pmxbot.logging']\r\n<module 'pmxbot.logging' from '/Users/jaraco/code/pmxbot/pmxbot/pmxbot/logging.py'>\r\n(Pdb) sys.modules['pmxbot.logging'] is logging\r\nFalse\r\n```\r\n\r\nI haven't yet made a minimal reproducer, but I wanted to first capture this condition.\r\n\n"
}