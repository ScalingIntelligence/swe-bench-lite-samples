{
  "info": {
    "duration": 172.59403538703918,
    "submission": "",
    "total_cost": 0.108783,
    "instance_id": "pytest-dev__pytest-11148",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves the transition from pkg_resources style namespace packaging to PEP 420 namespace packages in the pmxbot package. This transition required switching to `importlib` for the `import-mode` and reorganizing tests to avoid import errors. The tests are failing due to the `core.initialize()` function seemingly having no effect, suggesting that the initializer is executed but its effects are not seen due to multiple versions of `pmxbot.logging` being present in the `sys.modules`. This issue is likely related to the way modules are being imported and potentially how they are being managed or reloaded during the test execution. To address this, it's necessary to explore the `core` module where `initialize()` is defined, and the `pmxbot.logging` module to understand how the logging module is being handled and potentially duplicated. Additionally, the tests in `tests.unit.test_commands` should be examined to understand how the importing and setup are being managed in that context.",
            "search_requests": [
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pmxbot/core/**/*.py",
                "function_names": [
                  "initialize"
                ]
              },
              {
                "query": null,
                "class_names": [
                  "Logger"
                ],
                "code_snippet": null,
                "file_pattern": "**/pmxbot/logging/**/*.py",
                "function_names": []
              },
              {
                "query": null,
                "class_names": [
                  "TestCommands"
                ],
                "code_snippet": null,
                "file_pattern": "**/tests/unit/test_commands/**/*.py",
                "function_names": []
              }
            ]
          },
          "output": null,
          "input_tokens": 4039,
          "output_tokens": 345,
          "retry_message": "It's not possible to search for test files.",
          "completion_cost": 0.017292000000000002
        },
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves the transition from pkg_resources style namespace packaging to PEP 420 namespace packages in the pmxbot package. This transition required switching to `importlib` for the `import-mode` and reorganizing tests to avoid import errors. The tests are failing due to the `core.initialize()` function seemingly having no effect, suggesting that the initializer is executed but its effects are not seen due to multiple versions of `pmxbot.logging` being present in the `sys.modules`. This issue is likely related to the way modules are being imported and potentially how they are being managed or reloaded during the test execution. To address this, it's necessary to explore the `core` module where `initialize()` is defined, and the `pmxbot.logging` module to understand how the logging module is being handled and potentially duplicated.",
            "search_requests": [
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pmxbot/core/**/*.py",
                "function_names": [
                  "initialize"
                ]
              },
              {
                "query": null,
                "class_names": [
                  "Logger"
                ],
                "code_snippet": null,
                "file_pattern": "**/pmxbot/logging/**/*.py",
                "function_names": []
              }
            ]
          },
          "output": null,
          "input_tokens": 4492,
          "output_tokens": 337,
          "retry_message": "\n\nUnfortunately, I didn\u2019t find any relevant results.",
          "completion_cost": 0.018531
        },
        {
          "action": {
            "complete": false,
            "scratch_pad": "Given the lack of initial relevant results, it's worth broadening the search to include the broader pmxbot package. The issue centered around the improper handling of namespace packages and the failure to set a class variable in `pmxbot.logging.Logger.store` could be due to issues with module loading and management across different parts of the pmxbot package. The focus should now be on examining how namespace packages are handled and how module importing is managed in the context of `pmxbot`. Additionally, it's important to review any configuration or module management functions that could influence how modules are loaded and referenced in the package.",
            "search_requests": [
              {
                "query": "namespace package handling",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pmxbot/**/*.py",
                "function_names": []
              },
              {
                "query": "module importing management",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pmxbot/**/*.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 125,
                "span_id": "Package.setup",
                "file_path": "src/_pytest/python.py"
              },
              {
                "rank": 0,
                "tokens": 73,
                "span_id": "Package._recurse",
                "file_path": "src/_pytest/python.py"
              },
              {
                "rank": 1,
                "tokens": 4,
                "span_id": "Package",
                "file_path": "src/_pytest/python.py"
              },
              {
                "rank": 5,
                "tokens": 247,
                "span_id": "Package.collect",
                "file_path": "src/_pytest/python.py"
              },
              {
                "rank": 7,
                "tokens": 202,
                "span_id": "Package._collectfile",
                "file_path": "src/_pytest/python.py"
              },
              {
                "rank": 2,
                "tokens": 299,
                "span_id": "TestFixtureManagerParseFactories.test_package_xunit_fixture",
                "file_path": "testing/python/fixtures.py"
              },
              {
                "rank": 4,
                "tokens": 44,
                "span_id": "TestFixtureManagerParseFactories.test_collect_custom_items",
                "file_path": "testing/python/fixtures.py"
              },
              {
                "rank": 4,
                "tokens": 262,
                "span_id": "TestFixtureManagerParseFactories.test_package_fixture_complex",
                "file_path": "testing/python/fixtures.py"
              },
              {
                "rank": 3,
                "tokens": 59,
                "span_id": "LocalPath._ensuresyspath",
                "file_path": "src/_pytest/_py/path.py"
              },
              {
                "rank": 3,
                "tokens": 89,
                "span_id": "LocalPath.pypkgpath",
                "file_path": "src/_pytest/_py/path.py"
              },
              {
                "rank": 9,
                "tokens": 712,
                "span_id": "LocalPath.pyimport",
                "file_path": "src/_pytest/_py/path.py"
              },
              {
                "rank": 6,
                "tokens": 64,
                "span_id": "docstring",
                "file_path": "src/py.py"
              },
              {
                "rank": 8,
                "tokens": 353,
                "span_id": "test_package_with_modules",
                "file_path": "testing/python/collect.py"
              },
              {
                "rank": 0,
                "tokens": 422,
                "span_id": "Module._importtestmodule",
                "file_path": "src/_pytest/python.py"
              },
              {
                "rank": 1,
                "tokens": 712,
                "span_id": "LocalPath.pyimport",
                "file_path": "src/_pytest/_py/path.py"
              },
              {
                "rank": 2,
                "tokens": 856,
                "span_id": "import_path",
                "file_path": "src/_pytest/pathlib.py"
              },
              {
                "rank": 4,
                "tokens": 4,
                "span_id": "TestModule",
                "file_path": "testing/python/collect.py"
              },
              {
                "rank": 4,
                "tokens": 49,
                "span_id": "TestModule.test_failing_import",
                "file_path": "testing/python/collect.py"
              },
              {
                "rank": 4,
                "tokens": 148,
                "span_id": "TestModule.test_import_duplicate",
                "file_path": "testing/python/collect.py"
              },
              {
                "rank": 4,
                "tokens": 70,
                "span_id": "imports",
                "file_path": "testing/python/collect.py"
              },
              {
                "rank": 5,
                "tokens": 257,
                "span_id": "PytestPluginManager._importconftest",
                "file_path": "src/_pytest/config/__init__.py"
              },
              {
                "rank": 7,
                "tokens": 285,
                "span_id": "PytestPluginManager.import_plugin",
                "file_path": "src/_pytest/config/__init__.py"
              },
              {
                "rank": 9,
                "tokens": 50,
                "span_id": "PytestPluginManager._import_plugin_specs",
                "file_path": "src/_pytest/config/__init__.py"
              },
              {
                "rank": 9,
                "tokens": 41,
                "span_id": "PytestPluginManager.consider_conftest",
                "file_path": "src/_pytest/config/__init__.py"
              },
              {
                "rank": 6,
                "tokens": 144,
                "span_id": "resolve",
                "file_path": "src/_pytest/monkeypatch.py"
              },
              {
                "rank": 8,
                "tokens": 64,
                "span_id": "docstring",
                "file_path": "src/py.py"
              }
            ],
            "search_requests": [
              {
                "query": "namespace package handling",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pmxbot/**/*.py",
                "function_names": []
              },
              {
                "query": "module importing management",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pmxbot/**/*.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 4847,
          "output_tokens": 275,
          "retry_message": null,
          "completion_cost": 0.018666000000000002
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 125,
            "span_id": "Package.setup",
            "file_path": "src/_pytest/python.py"
          },
          {
            "rank": 0,
            "tokens": 73,
            "span_id": "Package._recurse",
            "file_path": "src/_pytest/python.py"
          },
          {
            "rank": 0,
            "tokens": 422,
            "span_id": "Module._importtestmodule",
            "file_path": "src/_pytest/python.py"
          },
          {
            "rank": 1,
            "tokens": 4,
            "span_id": "Package",
            "file_path": "src/_pytest/python.py"
          },
          {
            "rank": 1,
            "tokens": 712,
            "span_id": "LocalPath.pyimport",
            "file_path": "src/_pytest/_py/path.py"
          },
          {
            "rank": 2,
            "tokens": 299,
            "span_id": "TestFixtureManagerParseFactories.test_package_xunit_fixture",
            "file_path": "testing/python/fixtures.py"
          },
          {
            "rank": 2,
            "tokens": 856,
            "span_id": "import_path",
            "file_path": "src/_pytest/pathlib.py"
          },
          {
            "rank": 3,
            "tokens": 59,
            "span_id": "LocalPath._ensuresyspath",
            "file_path": "src/_pytest/_py/path.py"
          },
          {
            "rank": 3,
            "tokens": 89,
            "span_id": "LocalPath.pypkgpath",
            "file_path": "src/_pytest/_py/path.py"
          },
          {
            "rank": 4,
            "tokens": 44,
            "span_id": "TestFixtureManagerParseFactories.test_collect_custom_items",
            "file_path": "testing/python/fixtures.py"
          },
          {
            "rank": 4,
            "tokens": 262,
            "span_id": "TestFixtureManagerParseFactories.test_package_fixture_complex",
            "file_path": "testing/python/fixtures.py"
          },
          {
            "rank": 4,
            "tokens": 4,
            "span_id": "TestModule",
            "file_path": "testing/python/collect.py"
          },
          {
            "rank": 4,
            "tokens": 49,
            "span_id": "TestModule.test_failing_import",
            "file_path": "testing/python/collect.py"
          },
          {
            "rank": 4,
            "tokens": 148,
            "span_id": "TestModule.test_import_duplicate",
            "file_path": "testing/python/collect.py"
          },
          {
            "rank": 4,
            "tokens": 70,
            "span_id": "imports",
            "file_path": "testing/python/collect.py"
          },
          {
            "rank": 5,
            "tokens": 247,
            "span_id": "Package.collect",
            "file_path": "src/_pytest/python.py"
          },
          {
            "rank": 5,
            "tokens": 257,
            "span_id": "PytestPluginManager._importconftest",
            "file_path": "src/_pytest/config/__init__.py"
          },
          {
            "rank": 6,
            "tokens": 64,
            "span_id": "docstring",
            "file_path": "src/py.py"
          },
          {
            "rank": 6,
            "tokens": 144,
            "span_id": "resolve",
            "file_path": "src/_pytest/monkeypatch.py"
          },
          {
            "rank": 7,
            "tokens": 202,
            "span_id": "Package._collectfile",
            "file_path": "src/_pytest/python.py"
          },
          {
            "rank": 7,
            "tokens": 285,
            "span_id": "PytestPluginManager.import_plugin",
            "file_path": "src/_pytest/config/__init__.py"
          },
          {
            "rank": 8,
            "tokens": 353,
            "span_id": "test_package_with_modules",
            "file_path": "testing/python/collect.py"
          },
          {
            "rank": 8,
            "tokens": 64,
            "span_id": "docstring",
            "file_path": "src/py.py"
          },
          {
            "rank": 9,
            "tokens": 712,
            "span_id": "LocalPath.pyimport",
            "file_path": "src/_pytest/_py/path.py"
          },
          {
            "rank": 9,
            "tokens": 50,
            "span_id": "PytestPluginManager._import_plugin_specs",
            "file_path": "src/_pytest/config/__init__.py"
          },
          {
            "rank": 9,
            "tokens": 41,
            "span_id": "PytestPluginManager.consider_conftest",
            "file_path": "src/_pytest/config/__init__.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The user is attempting to switch from using pkg_resources to PEP 420 namespace packages and has switched to `importlib` for the `import-mode`. The issue is related to the presence of two different versions of `pmxbot.logging` during the test execution, which leads to unexpected behavior. This is evident from the traceback and the use of PDB to inspect the `logging` module and `sys.modules`. The search results contain several relevant spans related to importing modules, handling duplicates, and managing sys.path, which could be contributing to the observed behavior.\n\nRelevant spans from the search results include:\n- `src/_pytest/python.py`: Contains the `Module` and `Package` classes with methods for importing modules and handling import modes.\n- `src/_pytest/_py/path.py`: Contains `LocalPath.pyimport`, which uses `importlib` to import modules.\n- `src/_pytest/pathlib.py`: Contains `import_path`, which also uses `importlib` for importing modules.\n- `src/_pytest/config/__init__.py`: Contains `PytestPluginManager._importconftest`, which manages the import of configuration files and could be related to the import inconsistencies.\n- `testing/python/collect.py`: Contains tests related to module and package collection, which might indirectly affect how imports are handled.\n\nThese spans are directly related to the handling of module imports and sys.path management, which are central to the reported issue. They should help in understanding and potentially resolving the import-related problems.",
            "identified_spans": [
              {
                "span_ids": [
                  "Module._importtestmodule",
                  "Package.__init__",
                  "Package.setup",
                  "Package._recurse",
                  "Package._collectfile",
                  "Package.collect"
                ],
                "file_path": "src/_pytest/python.py"
              },
              {
                "span_ids": [
                  "LocalPath.pypkgpath",
                  "LocalPath._ensuresyspath",
                  "LocalPath.pyimport"
                ],
                "file_path": "src/_pytest/_py/path.py"
              },
              {
                "span_ids": [
                  "import_path"
                ],
                "file_path": "src/_pytest/pathlib.py"
              },
              {
                "span_ids": [
                  "PytestPluginManager._importconftest",
                  "PytestPluginManager.consider_conftest",
                  "PytestPluginManager._import_plugin_specs",
                  "PytestPluginManager.import_plugin"
                ],
                "file_path": "src/_pytest/config/__init__.py"
              },
              {
                "span_ids": [
                  "TestModule.test_import_duplicate",
                  "test_package_with_modules"
                ],
                "file_path": "testing/python/collect.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 6097,
          "output_tokens": 695,
          "retry_message": null,
          "completion_cost": 0.028716000000000002
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "I examined the provided file context to determine if it includes all relevant code for the reported issue. The issue describes a problem with module import handling, specifically the presence of multiple versions of `pmxbot.logging` due to namespace package issues. The file context includes several pytest modules that directly handle module importing and collection, and contain functionalities related to importing modules, managing paths, and handling configurations. These aspects could be directly related to the issue at hand. However, it is noteworthy that the pure codebase of the `pmxbot` application is not included in the file context provided, and only the pytest integration is visible. This limits the direct examination of how the `pmxbot` package is dealing with its own imports and management of namespace packages.",
            "search_suggestions": "To better understand and resolve the issue, it would be beneficial to include the actual codebase of the `pmxbot` project in the analysis. This would involve examining the `pmxbot.logging` module itself, and other relevant parts of the package that manage imports and specifically handle the transition to PEP 420 namespace packages. Additionally, it could be helpful to review how the specific initialization and setup processes of `pmxbot` interact with pytest and manage shared namespaces."
          },
          "output": {
            "message": "To better understand and resolve the issue, it would be beneficial to include the actual codebase of the `pmxbot` project in the analysis. This would involve examining the `pmxbot.logging` module itself, and other relevant parts of the package that manage imports and specifically handle the transition to PEP 420 namespace packages. Additionally, it could be helpful to review how the specific initialization and setup processes of `pmxbot` interact with pytest and manage shared namespaces."
          },
          "input_tokens": 7076,
          "output_tokens": 290,
          "retry_message": null,
          "completion_cost": 0.025578
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "To better understand and resolve the issue, it would be beneficial to include the actual codebase of the `pmxbot` project in the analysis. This would involve examining the `pmxbot.logging` module itself, and other relevant parts of the package that manage imports and specifically handle the transition to PEP 420 namespace packages. Additionally, it could be helpful to review how the specific initialization and setup processes of `pmxbot` interact with pytest and manage shared namespaces.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "Since the initial search didn't yield immediate results connected to the specific issue within the `pmxbot` package, the next step is to focus on understanding how the package deals with namespace packages and module importing, particularly with the transition to PEP 420. Given the detailed context provided, we should look into the `pmxbot.logging` module and the methods or functions in the package that manage imports and namespace packages. Additionally, examining the initialization and setup processes of `pmxbot` in relation to how they use pytest and manage shared namespaces could help in isolating the issue.",
            "search_requests": [
              {
                "query": "namespace package handling and module importing in PEP 420 transition",
                "class_names": [
                  "Logger"
                ],
                "code_snippet": null,
                "file_pattern": "**/pmxbot/logging.py",
                "function_names": [
                  "initialize"
                ]
              }
            ]
          },
          "output": null,
          "input_tokens": 9605,
          "output_tokens": 227,
          "retry_message": "\n\nUnfortunately, I didn\u2019t find any relevant results.",
          "completion_cost": 0.03222
        },
        {
          "action": {
            "complete": false,
            "scratch_pad": "The initial search focused on the `pmxbot.logging` module and the class `Logger` did not yield any results. This indicates that the problem might be more deeply rooted in how `pmxbot` handles its namespace package transitions or how it integrates with pytest. Given the complexity of the issue, it's important to broaden the search to include other parts of the `pmxbot` package that might deal with these topics more generally. Specifically, we should look into the configurations, import handling scripts, and any documentation or tests related to the transition to PEP 420 namespace packages.",
            "search_requests": [
              {
                "query": "PEP 420 namespace package transition",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pmxbot/**/*.py",
                "function_names": []
              },
              {
                "query": "integration testing namespace packages",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pmxbot/**/tests/**/*.py",
                "function_names": []
              }
            ]
          },
          "output": null,
          "input_tokens": 9862,
          "output_tokens": 280,
          "retry_message": "It's not possible to search for test files.",
          "completion_cost": 0.033786000000000004
        },
        {
          "action": {
            "complete": false,
            "scratch_pad": "Given the restriction that searching in test files is not possible, it appears that the previous search approach was not fruitful. The new strategy should focus on the broader context of `pmxbot` package, particularly on files and methods related to import handling, initialization, and the configuration for namespace packages following PEP 420. Let's narrow down by focusing on specific functions and classes possibly involved in the transition or management of namespace packages.",
            "search_requests": [
              {
                "query": "namespace package configuration",
                "class_names": [
                  "ImportHandler",
                  "PackageInitializer"
                ],
                "code_snippet": null,
                "file_pattern": "**/pmxbot/**/*.py",
                "function_names": [
                  "setup_namespace_package",
                  "configure_namespace_packages"
                ]
              }
            ]
          },
          "output": null,
          "input_tokens": 10160,
          "output_tokens": 199,
          "retry_message": "\n\nUnfortunately, I didn\u2019t find any relevant results.",
          "completion_cost": 0.033465
        }
      ]
    }
  ],
  "initial_message": "Module imported twice under import-mode=importlib\nIn pmxbot/pmxbot@7f189ad, I'm attempting to switch pmxbot off of pkg_resources style namespace packaging to PEP 420 namespace packages. To do so, I've needed to switch to `importlib` for the `import-mode` and re-organize the tests to avoid import errors on the tests.\r\n\r\nYet even after working around these issues, the tests are failing when the effect of `core.initialize()` doesn't seem to have had any effect.\r\n\r\nInvestigating deeper, I see that initializer is executed and performs its actions (setting a class variable `pmxbot.logging.Logger.store`), but when that happens, there are two different versions of `pmxbot.logging` present, one in `sys.modules` and another found in `tests.unit.test_commands.logging`:\r\n\r\n```\r\n=========================================================================== test session starts ===========================================================================\r\nplatform darwin -- Python 3.11.1, pytest-7.2.0, pluggy-1.0.0\r\ncachedir: .tox/python/.pytest_cache\r\nrootdir: /Users/jaraco/code/pmxbot/pmxbot, configfile: pytest.ini\r\nplugins: black-0.3.12, mypy-0.10.3, jaraco.test-5.3.0, checkdocs-2.9.0, flake8-1.1.1, enabler-2.0.0, jaraco.mongodb-11.2.1, pmxbot-1122.14.3.dev13+g7f189ad\r\ncollected 421 items / 180 deselected / 241 selected                                                                                                                       \r\nrun-last-failure: rerun previous 240 failures (skipped 14 files)\r\n\r\ntests/unit/test_commands.py E\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> traceback >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n\r\ncls = <class 'tests.unit.test_commands.TestCommands'>\r\n\r\n    @classmethod\r\n    def setup_class(cls):\r\n        path = os.path.dirname(os.path.abspath(__file__))\r\n        configfile = os.path.join(path, 'testconf.yaml')\r\n        config = pmxbot.dictlib.ConfigDict.from_yaml(configfile)\r\n        cls.bot = core.initialize(config)\r\n>       logging.Logger.store.message(\"logged\", \"testrunner\", \"some text\")\r\nE       AttributeError: type object 'Logger' has no attribute 'store'\r\n\r\ntests/unit/test_commands.py:37: AttributeError\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> entering PDB >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> PDB post_mortem (IO-capturing turned off) >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n> /Users/jaraco/code/pmxbot/pmxbot/tests/unit/test_commands.py(37)setup_class()\r\n-> logging.Logger.store.message(\"logged\", \"testrunner\", \"some text\")\r\n(Pdb) logging.Logger\r\n<class 'pmxbot.logging.Logger'>\r\n(Pdb) logging\r\n<module 'pmxbot.logging' from '/Users/jaraco/code/pmxbot/pmxbot/pmxbot/logging.py'>\r\n(Pdb) import sys\r\n(Pdb) sys.modules['pmxbot.logging']\r\n<module 'pmxbot.logging' from '/Users/jaraco/code/pmxbot/pmxbot/pmxbot/logging.py'>\r\n(Pdb) sys.modules['pmxbot.logging'] is logging\r\nFalse\r\n```\r\n\r\nI haven't yet made a minimal reproducer, but I wanted to first capture this condition.\r\n\n"
}