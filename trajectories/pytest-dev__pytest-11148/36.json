{
  "info": {
    "duration": 133.0477294921875,
    "submission": "diff --git a/src/_pytest/_py/path.py b/src/_pytest/_py/path.py\nindex 73a070d19..788a91931 100644\n--- a/src/_pytest/_py/path.py\n+++ b/src/_pytest/_py/path.py\n@@ -1094,6 +1094,8 @@ class LocalPath:\n         if ensuresyspath == \"importlib\":\n             if modname is None:\n                 modname = self.purebasename\n+            if modname in sys.modules:\n+                return sys.modules[modname]\n             spec = importlib.util.spec_from_file_location(modname, str(self))\n             if spec is None or spec.loader is None:\n                 raise ImportError(\n@@ -1101,6 +1103,7 @@ class LocalPath:\n                 )\n             mod = importlib.util.module_from_spec(spec)\n             spec.loader.exec_module(mod)\n+            sys.modules[modname] = mod\n             return mod\n \n         pkgpath = None\n",
    "total_cost": 0.129855,
    "instance_id": "pytest-dev__pytest-11148",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves a module being imported twice under import-mode=importlib, which is causing two different versions of the module to be present in sys.modules. This discrepancy is leading to test failures where the expected behavior of `core.initialize()` is not observed. The focus should be on the code related to import handling and module management in the context of the `pmxbot` project. Given the specifics of the error, it's crucial to locate code that interacts with `sys.modules`, handles module imports, or manages imports using `importlib`. Also, pay attention to code that might be manipulating the sys.modules directly which could cause such discrepancies.",
            "search_requests": [
              {
                "query": "handling of sys.modules and importlib for module imports",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pmxbot/**/*.py",
                "function_names": []
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": "sys.modules['pmxbot.logging']",
                "file_pattern": "**/pmxbot/**/*.py",
                "function_names": []
              },
              {
                "query": "managing module imports and checking for duplicates",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pmxbot/**/*.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 712,
                "span_id": "LocalPath.pyimport",
                "file_path": "src/_pytest/_py/path.py"
              },
              {
                "rank": 1,
                "tokens": 64,
                "span_id": "docstring",
                "file_path": "src/py.py"
              },
              {
                "rank": 2,
                "tokens": 422,
                "span_id": "Module._importtestmodule",
                "file_path": "src/_pytest/python.py"
              },
              {
                "rank": 3,
                "tokens": 856,
                "span_id": "import_path",
                "file_path": "src/_pytest/pathlib.py"
              },
              {
                "rank": 5,
                "tokens": 350,
                "span_id": "insert_missing_modules",
                "file_path": "src/_pytest/pathlib.py"
              },
              {
                "rank": 4,
                "tokens": 4,
                "span_id": "TestModule",
                "file_path": "testing/python/collect.py"
              },
              {
                "rank": 4,
                "tokens": 49,
                "span_id": "TestModule.test_failing_import",
                "file_path": "testing/python/collect.py"
              },
              {
                "rank": 4,
                "tokens": 148,
                "span_id": "TestModule.test_import_duplicate",
                "file_path": "testing/python/collect.py"
              },
              {
                "rank": 4,
                "tokens": 70,
                "span_id": "imports",
                "file_path": "testing/python/collect.py"
              },
              {
                "rank": 0,
                "tokens": 4,
                "span_id": "TestModule",
                "file_path": "testing/python/collect.py"
              },
              {
                "rank": 0,
                "tokens": 49,
                "span_id": "TestModule.test_failing_import",
                "file_path": "testing/python/collect.py"
              },
              {
                "rank": 0,
                "tokens": 148,
                "span_id": "TestModule.test_import_duplicate",
                "file_path": "testing/python/collect.py"
              },
              {
                "rank": 0,
                "tokens": 70,
                "span_id": "imports",
                "file_path": "testing/python/collect.py"
              },
              {
                "rank": 4,
                "tokens": 86,
                "span_id": "TestModule.test_invalid_test_module_name",
                "file_path": "testing/python/collect.py"
              },
              {
                "rank": 4,
                "tokens": 50,
                "span_id": "TestModule.test_module_considers_pluginmanager_at_import",
                "file_path": "testing/python/collect.py"
              },
              {
                "rank": 1,
                "tokens": 422,
                "span_id": "Module._importtestmodule",
                "file_path": "src/_pytest/python.py"
              },
              {
                "rank": 2,
                "tokens": 856,
                "span_id": "import_path",
                "file_path": "src/_pytest/pathlib.py"
              },
              {
                "rank": 3,
                "tokens": 712,
                "span_id": "LocalPath.pyimport",
                "file_path": "src/_pytest/_py/path.py"
              }
            ],
            "search_requests": [
              {
                "query": "handling of sys.modules and importlib for module imports",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pmxbot/**/*.py",
                "function_names": []
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": "sys.modules['pmxbot.logging']",
                "file_pattern": "**/pmxbot/**/*.py",
                "function_names": []
              },
              {
                "query": "managing module imports and checking for duplicates",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pmxbot/**/*.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 4039,
          "output_tokens": 334,
          "retry_message": null,
          "completion_cost": 0.017127
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 712,
            "span_id": "LocalPath.pyimport",
            "file_path": "src/_pytest/_py/path.py"
          },
          {
            "rank": 0,
            "tokens": 4,
            "span_id": "TestModule",
            "file_path": "testing/python/collect.py"
          },
          {
            "rank": 0,
            "tokens": 49,
            "span_id": "TestModule.test_failing_import",
            "file_path": "testing/python/collect.py"
          },
          {
            "rank": 0,
            "tokens": 148,
            "span_id": "TestModule.test_import_duplicate",
            "file_path": "testing/python/collect.py"
          },
          {
            "rank": 0,
            "tokens": 70,
            "span_id": "imports",
            "file_path": "testing/python/collect.py"
          },
          {
            "rank": 1,
            "tokens": 64,
            "span_id": "docstring",
            "file_path": "src/py.py"
          },
          {
            "rank": 1,
            "tokens": 422,
            "span_id": "Module._importtestmodule",
            "file_path": "src/_pytest/python.py"
          },
          {
            "rank": 2,
            "tokens": 422,
            "span_id": "Module._importtestmodule",
            "file_path": "src/_pytest/python.py"
          },
          {
            "rank": 2,
            "tokens": 856,
            "span_id": "import_path",
            "file_path": "src/_pytest/pathlib.py"
          },
          {
            "rank": 3,
            "tokens": 856,
            "span_id": "import_path",
            "file_path": "src/_pytest/pathlib.py"
          },
          {
            "rank": 3,
            "tokens": 712,
            "span_id": "LocalPath.pyimport",
            "file_path": "src/_pytest/_py/path.py"
          },
          {
            "rank": 4,
            "tokens": 4,
            "span_id": "TestModule",
            "file_path": "testing/python/collect.py"
          },
          {
            "rank": 4,
            "tokens": 49,
            "span_id": "TestModule.test_failing_import",
            "file_path": "testing/python/collect.py"
          },
          {
            "rank": 4,
            "tokens": 148,
            "span_id": "TestModule.test_import_duplicate",
            "file_path": "testing/python/collect.py"
          },
          {
            "rank": 4,
            "tokens": 70,
            "span_id": "imports",
            "file_path": "testing/python/collect.py"
          },
          {
            "rank": 4,
            "tokens": 86,
            "span_id": "TestModule.test_invalid_test_module_name",
            "file_path": "testing/python/collect.py"
          },
          {
            "rank": 4,
            "tokens": 50,
            "span_id": "TestModule.test_module_considers_pluginmanager_at_import",
            "file_path": "testing/python/collect.py"
          },
          {
            "rank": 5,
            "tokens": 350,
            "span_id": "insert_missing_modules",
            "file_path": "src/_pytest/pathlib.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves the switching of `pmxbot` from `pkg_resources` style namespace packaging to PEP 420 namespace packages using `importlib`. The main concern is that the initializer is executed, but there are two different versions of `pmxbot.logging` present in `sys.modules` and `tests.unit.test_commands.logging`. This results in an `AttributeError` indicating that 'Logger' has no attribute 'store'. The search results provided include several files with different code spans that might be relevant to the issue. The most relevant code spans are those related to the use of `importlib` for module importing and handling duplicate imports. Here are the identified relevant code spans:\n\n1. `src/_pytest/_py/path.py` - This file contains the `LocalPath.pyimport` method which uses `importlib` to import modules, which might be relevant for the new `import-mode=importlib` strategy.\n2. `testing/python/collect.py` - The `TestModule.test_import_duplicate` method tests for duplicate imports, which could be directly related to the issue at hand.\n3. `src/_pytest/pathlib.py` - This file contains several functions related to importing modules using `importlib`, specifically `import_path` and `module_name_from_path`, which could be closely related to the new import strategy.\n\nThese identified spans seem to provide a good starting point for understanding and addressing the issue of module importing and potential duplicates that the reported issue is facing.",
            "identified_spans": [
              {
                "span_ids": [
                  "LocalPath.pyimport"
                ],
                "file_path": "src/_pytest/_py/path.py"
              },
              {
                "span_ids": [
                  "TestModule.test_import_duplicate"
                ],
                "file_path": "testing/python/collect.py"
              },
              {
                "span_ids": [
                  "import_path",
                  "module_name_from_path"
                ],
                "file_path": "src/_pytest/pathlib.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4673,
          "output_tokens": 501,
          "retry_message": null,
          "completion_cost": 0.021534
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The provided file context includes code related to module imports using importlib, which is directly related to the issue of module imports being handled differently under import-mode=importlib. Specifically, the LocalPath class in src/_pytest/_py/path.py contains a method pyimport that uses importlib.util.spec_from_file_location, and the import_path function in src/_pytest/pathlib.py also deals with importing modules using importlib. Additionally, the test_import_duplicate method in testing/python/collect.py tests for import mismatches, which aligns with the issue of detecting duplicate module imports. These sections of code are pertinent to identifying and handling the issue described. Thus, the relevant code needed to address the reported issue has been identified in the provided file context.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 4844,
          "output_tokens": 202,
          "retry_message": null,
          "completion_cost": 0.017562
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "apply",
            "finish": null,
            "reject": null,
            "span_id": "LocalPath.pyimport",
            "file_path": "src/_pytest/_py/path.py",
            "scratch_pad": "The issue involves a module being imported twice under the `importlib` import-mode. This can lead to unexpected behaviors, as observed where two different versions of `pmxbot.logging` exist simultaneously. To address this, the `pyimport` method in `src/_pytest/_py/path.py` needs to be updated to ensure that when `importlib` mode is used, it correctly handles the import process without duplicating the module in `sys.modules`.",
            "instructions": "Modify the `pyimport` method in `src/_pytest/_py/path.py` to ensure that when `ensuresyspath='importlib'`, the module is imported correctly without causing duplication. Specifically, ensure that the module is properly managed within `sys.modules` and avoid reintroducing the module if it already exists."
          },
          "output": {
            "span_id": "LocalPath.pyimport",
            "file_path": "src/_pytest/_py/path.py",
            "instructions": "Modify the `pyimport` method in `src/_pytest/_py/path.py` to ensure that when `ensuresyspath='importlib'`, the module is imported correctly without causing duplication. Specifically, ensure that the module is properly managed within `sys.modules` and avoid reintroducing the module if it already exists."
          },
          "input_tokens": 5908,
          "output_tokens": 229,
          "retry_message": null,
          "completion_cost": 0.021159
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "LocalPath.pyimport",
        "end_line": null,
        "file_path": "src/_pytest/_py/path.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Modify the `pyimport` method in `src/_pytest/_py/path.py` to ensure that when `ensuresyspath='importlib'`, the module is imported correctly without causing duplication. Specifically, ensure that the module is properly managed within `sys.modules` and avoid reintroducing the module if it already exists.\n\nThe instructions require modifying the `pyimport` method to handle the 'importlib' case more robustly. Specifically, it should ensure the module is not reintroduced if it already exists in `sys.modules`. The relevant lines for modification are the ones handling the 'importlib' case.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 1104,
            "start_line": 1091,
            "scratch_pad": "The instructions require modifying the `pyimport` method to handle the 'importlib' case more robustly. Specifically, it should ensure the module is not reintroduced if it already exists in `sys.modules`. The relevant lines for modification are the ones handling the 'importlib' case."
          },
          "output": {
            "span_id": "LocalPath.pyimport",
            "end_line": 1104,
            "file_path": "src/_pytest/_py/path.py",
            "start_line": 1091,
            "instructions": "Modify the `pyimport` method in `src/_pytest/_py/path.py` to ensure that when `ensuresyspath='importlib'`, the module is imported correctly without causing duplication. Specifically, ensure that the module is properly managed within `sys.modules` and avoid reintroducing the module if it already exists.\n\nThe instructions require modifying the `pyimport` method to handle the 'importlib' case more robustly. Specifically, it should ensure the module is not reintroduced if it already exists in `sys.modules`. The relevant lines for modification are the ones handling the 'importlib' case."
          },
          "input_tokens": 1860,
          "output_tokens": 107,
          "retry_message": null,
          "completion_cost": 0.007185
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "LocalPath.pyimport",
        "end_line": 1104,
        "file_path": "src/_pytest/_py/path.py",
        "max_tokens": 1000,
        "start_line": 1091,
        "temperature": 1.6,
        "instructions": "Modify the `pyimport` method in `src/_pytest/_py/path.py` to ensure that when `ensuresyspath='importlib'`, the module is imported correctly without causing duplication. Specifically, ensure that the module is properly managed within `sys.modules` and avoid reintroducing the module if it already exists.\n\nThe instructions require modifying the `pyimport` method to handle the 'importlib' case more robustly. Specifically, it should ensure the module is not reintroduced if it already exists in `sys.modules`. The relevant lines for modification are the ones handling the 'importlib' case.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n        if not self.check():\n            raise error.ENOENT(self)\n\n        if ensuresyspath == \"importlib\":\n            if modname is None:\n                modname = self.purebasename\n            if modname in sys.modules:\n                return sys.modules[modname]\n            spec = importlib.util.spec_from_file_location(modname, str(self))\n            if spec is None or spec.loader is None:\n                raise ImportError(\n                    f\"Can't find module {modname} at location {str(self)}\"\n                )\n            mod = importlib.util.module_from_spec(spec)\n            spec.loader.exec_module(mod)\n            sys.modules[modname] = mod\n            return mod\n</replace>"
          },
          "output": {
            "diff": "--- src/_pytest/_py/path.py\n+++ src/_pytest/_py/path.py\n@@ -1094,6 +1094,8 @@\n         if ensuresyspath == \"importlib\":\n             if modname is None:\n                 modname = self.purebasename\n+            if modname in sys.modules:\n+                return sys.modules[modname]\n             spec = importlib.util.spec_from_file_location(modname, str(self))\n             if spec is None or spec.loader is None:\n                 raise ImportError(\n@@ -1101,6 +1103,7 @@\n                 )\n             mod = importlib.util.module_from_spec(spec)\n             spec.loader.exec_module(mod)\n+            sys.modules[modname] = mod\n             return mod\n \n         pkgpath = None\n",
            "message": "Applied the change to src/_pytest/_py/path.py.",
            "verification_errors": []
          },
          "input_tokens": 6774,
          "output_tokens": 185,
          "retry_message": null,
          "completion_cost": 0.023097
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- src/_pytest/_py/path.py\n+++ src/_pytest/_py/path.py\n@@ -1094,6 +1094,8 @@\n         if ensuresyspath == \"importlib\":\n             if modname is None:\n                 modname = self.purebasename\n+            if modname in sys.modules:\n+                return sys.modules[modname]\n             spec = importlib.util.spec_from_file_location(modname, str(self))\n             if spec is None or spec.loader is None:\n                 raise ImportError(\n@@ -1101,6 +1103,7 @@\n                 )\n             mod = importlib.util.module_from_spec(spec)\n             spec.loader.exec_module(mod)\n+            sys.modules[modname] = mod\n             return mod\n \n         pkgpath = None\n",
        "model": "deepseek-coder",
        "message": "Applied the change to src/_pytest/_py/path.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "All necessary changes have been applied to address the module duplication issue under `importlib` mode. The `pyimport` method has been updated to manage the module correctly in `sys.modules` to avoid duplication.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The applied change seems to address the issue by ensuring that when `importlib` mode is used, the module is correctly managed within `sys.modules` to avoid duplication. The change includes checking if the module already exists in `sys.modules` and returning it if it does, otherwise importing the module and adding it to `sys.modules`. This should prevent the observed behavior of having two different versions of the module in `sys.modules`.",
            "instructions": null
          },
          "output": {
            "message": "All necessary changes have been applied to address the module duplication issue under `importlib` mode. The `pyimport` method has been updated to manage the module correctly in `sys.modules` to avoid duplication."
          },
          "input_tokens": 6417,
          "output_tokens": 196,
          "retry_message": null,
          "completion_cost": 0.022191000000000002
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "All necessary changes have been applied to address the module duplication issue under `importlib` mode. The `pyimport` method has been updated to manage the module correctly in `sys.modules` to avoid duplication.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Module imported twice under import-mode=importlib\nIn pmxbot/pmxbot@7f189ad, I'm attempting to switch pmxbot off of pkg_resources style namespace packaging to PEP 420 namespace packages. To do so, I've needed to switch to `importlib` for the `import-mode` and re-organize the tests to avoid import errors on the tests.\r\n\r\nYet even after working around these issues, the tests are failing when the effect of `core.initialize()` doesn't seem to have had any effect.\r\n\r\nInvestigating deeper, I see that initializer is executed and performs its actions (setting a class variable `pmxbot.logging.Logger.store`), but when that happens, there are two different versions of `pmxbot.logging` present, one in `sys.modules` and another found in `tests.unit.test_commands.logging`:\r\n\r\n```\r\n=========================================================================== test session starts ===========================================================================\r\nplatform darwin -- Python 3.11.1, pytest-7.2.0, pluggy-1.0.0\r\ncachedir: .tox/python/.pytest_cache\r\nrootdir: /Users/jaraco/code/pmxbot/pmxbot, configfile: pytest.ini\r\nplugins: black-0.3.12, mypy-0.10.3, jaraco.test-5.3.0, checkdocs-2.9.0, flake8-1.1.1, enabler-2.0.0, jaraco.mongodb-11.2.1, pmxbot-1122.14.3.dev13+g7f189ad\r\ncollected 421 items / 180 deselected / 241 selected                                                                                                                       \r\nrun-last-failure: rerun previous 240 failures (skipped 14 files)\r\n\r\ntests/unit/test_commands.py E\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> traceback >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n\r\ncls = <class 'tests.unit.test_commands.TestCommands'>\r\n\r\n    @classmethod\r\n    def setup_class(cls):\r\n        path = os.path.dirname(os.path.abspath(__file__))\r\n        configfile = os.path.join(path, 'testconf.yaml')\r\n        config = pmxbot.dictlib.ConfigDict.from_yaml(configfile)\r\n        cls.bot = core.initialize(config)\r\n>       logging.Logger.store.message(\"logged\", \"testrunner\", \"some text\")\r\nE       AttributeError: type object 'Logger' has no attribute 'store'\r\n\r\ntests/unit/test_commands.py:37: AttributeError\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> entering PDB >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> PDB post_mortem (IO-capturing turned off) >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n> /Users/jaraco/code/pmxbot/pmxbot/tests/unit/test_commands.py(37)setup_class()\r\n-> logging.Logger.store.message(\"logged\", \"testrunner\", \"some text\")\r\n(Pdb) logging.Logger\r\n<class 'pmxbot.logging.Logger'>\r\n(Pdb) logging\r\n<module 'pmxbot.logging' from '/Users/jaraco/code/pmxbot/pmxbot/pmxbot/logging.py'>\r\n(Pdb) import sys\r\n(Pdb) sys.modules['pmxbot.logging']\r\n<module 'pmxbot.logging' from '/Users/jaraco/code/pmxbot/pmxbot/pmxbot/logging.py'>\r\n(Pdb) sys.modules['pmxbot.logging'] is logging\r\nFalse\r\n```\r\n\r\nI haven't yet made a minimal reproducer, but I wanted to first capture this condition.\r\n\n"
}