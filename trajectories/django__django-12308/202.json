{
  "info": {
    "duration": 186.18779706954956,
    "submission": "diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py\nindex e4ddc8f017..d6bc2e4b79 100644\n--- a/django/contrib/admin/utils.py\n+++ b/django/contrib/admin/utils.py\n@@ -398,6 +398,8 @@ def display_for_field(value, field, empty_value_display):\n         return formats.number_format(value)\n     elif isinstance(field, models.FileField) and value:\n         return format_html('<a href=\"{}\">{}</a>', value.url, value)\n+    elif isinstance(field, models.JSONField) and field.editable is False:\n+        return field.prepare_value(value)\n     else:\n         return display_for_value(value, empty_value_display)\n \n",
    "total_cost": 0.114285,
    "instance_id": "django__django-12308",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue pertains to the display of JSONField values as dict when they are readonly in the admin interface. The desired fix involves modifying the `django.contrib.admin.utils.display_for_field` function to call the `prepare_value` method of the JSONField class, ensuring that the InvalidJSONInput case is handled without directly using `json.dumps`. Given the context, we need to focus the search on the `display_for_field` function within the `django.contrib.admin.utils` module and the `prepare_value` method within the `django.forms.fields.JSONField` class. Additionally, the `JSONField` class in `django.db.models.fields.json` might also be relevant.",
            "search_requests": [
              {
                "query": "display_for_field",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/utils.py",
                "function_names": []
              },
              {
                "query": "JSONField",
                "class_names": [],
                "code_snippet": "def prepare_value(self, value):",
                "file_pattern": "**/fields.py",
                "function_names": []
              },
              {
                "query": "JSONField",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/json.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 206,
                "span_id": "display_for_field",
                "file_path": "django/contrib/admin/utils.py"
              },
              {
                "rank": 0,
                "tokens": 61,
                "span_id": "help_text_for_field",
                "file_path": "django/contrib/admin/utils.py"
              },
              {
                "rank": 1,
                "tokens": 135,
                "span_id": "display_for_value",
                "file_path": "django/contrib/admin/utils.py"
              },
              {
                "rank": 1,
                "tokens": 7,
                "span_id": "NotRelationField",
                "file_path": "django/contrib/admin/utils.py"
              },
              {
                "rank": 1,
                "tokens": 34,
                "span_id": "get_model_from_relation",
                "file_path": "django/contrib/admin/utils.py"
              },
              {
                "rank": 2,
                "tokens": 410,
                "span_id": "label_for_field",
                "file_path": "django/contrib/admin/utils.py"
              },
              {
                "rank": 3,
                "tokens": 181,
                "span_id": "imports",
                "file_path": "django/contrib/admin/utils.py"
              },
              {
                "rank": 3,
                "tokens": 28,
                "span_id": "FieldIsAForeignKeyColumnName",
                "file_path": "django/contrib/admin/utils.py"
              },
              {
                "rank": 4,
                "tokens": 148,
                "span_id": "lookup_field",
                "file_path": "django/contrib/admin/utils.py"
              },
              {
                "rank": 0,
                "tokens": 26,
                "span_id": "JSONField.prepare_value",
                "file_path": "django/forms/fields.py"
              },
              {
                "rank": 0,
                "tokens": 82,
                "span_id": "JSONField.has_changed",
                "file_path": "django/forms/fields.py"
              },
              {
                "rank": 0,
                "tokens": 38,
                "span_id": "JSONField.bound_data",
                "file_path": "django/forms/fields.py"
              },
              {
                "rank": 0,
                "tokens": 26,
                "span_id": "JSONField",
                "file_path": "django/forms/fields.py"
              },
              {
                "rank": 0,
                "tokens": 99,
                "span_id": "JSONField.to_python",
                "file_path": "django/forms/fields.py"
              },
              {
                "rank": 1,
                "tokens": 6,
                "span_id": "JSONString",
                "file_path": "django/forms/fields.py"
              },
              {
                "rank": 1,
                "tokens": 20,
                "span_id": "UUIDField.prepare_value",
                "file_path": "django/forms/fields.py"
              },
              {
                "rank": 1,
                "tokens": 57,
                "span_id": "UUIDField.to_python",
                "file_path": "django/forms/fields.py"
              },
              {
                "rank": 1,
                "tokens": 7,
                "span_id": "InvalidJSONInput",
                "file_path": "django/forms/fields.py"
              },
              {
                "rank": 0,
                "tokens": 37,
                "span_id": "JSONField.check",
                "file_path": "django/db/models/fields/json.py"
              },
              {
                "rank": 0,
                "tokens": 49,
                "span_id": "JSONField",
                "file_path": "django/db/models/fields/json.py"
              },
              {
                "rank": 0,
                "tokens": 74,
                "span_id": "imports",
                "file_path": "django/db/models/fields/json.py"
              },
              {
                "rank": 0,
                "tokens": 85,
                "span_id": "JSONField.__init__",
                "file_path": "django/db/models/fields/json.py"
              },
              {
                "rank": 1,
                "tokens": 44,
                "span_id": "JSONField.formfield",
                "file_path": "django/db/models/fields/json.py"
              },
              {
                "rank": 1,
                "tokens": 54,
                "span_id": "JSONField.deconstruct",
                "file_path": "django/db/models/fields/json.py"
              },
              {
                "rank": 1,
                "tokens": 55,
                "span_id": "JSONField.validate",
                "file_path": "django/db/models/fields/json.py"
              },
              {
                "rank": 1,
                "tokens": 11,
                "span_id": "JSONField.get_internal_type",
                "file_path": "django/db/models/fields/json.py"
              },
              {
                "rank": 1,
                "tokens": 15,
                "span_id": "JSONField.value_to_string",
                "file_path": "django/db/models/fields/json.py"
              }
            ],
            "search_requests": [
              {
                "query": "display_for_field",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/utils.py",
                "function_names": []
              },
              {
                "query": "JSONField",
                "class_names": [],
                "code_snippet": "def prepare_value(self, value):",
                "file_pattern": "**/fields.py",
                "function_names": []
              },
              {
                "query": "JSONField",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/json.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 2735,
          "output_tokens": 292,
          "retry_message": null,
          "completion_cost": 0.012585
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 206,
            "span_id": "display_for_field",
            "file_path": "django/contrib/admin/utils.py"
          },
          {
            "rank": 0,
            "tokens": 61,
            "span_id": "help_text_for_field",
            "file_path": "django/contrib/admin/utils.py"
          },
          {
            "rank": 1,
            "tokens": 135,
            "span_id": "display_for_value",
            "file_path": "django/contrib/admin/utils.py"
          },
          {
            "rank": 1,
            "tokens": 7,
            "span_id": "NotRelationField",
            "file_path": "django/contrib/admin/utils.py"
          },
          {
            "rank": 1,
            "tokens": 34,
            "span_id": "get_model_from_relation",
            "file_path": "django/contrib/admin/utils.py"
          },
          {
            "rank": 2,
            "tokens": 410,
            "span_id": "label_for_field",
            "file_path": "django/contrib/admin/utils.py"
          },
          {
            "rank": 3,
            "tokens": 181,
            "span_id": "imports",
            "file_path": "django/contrib/admin/utils.py"
          },
          {
            "rank": 3,
            "tokens": 28,
            "span_id": "FieldIsAForeignKeyColumnName",
            "file_path": "django/contrib/admin/utils.py"
          },
          {
            "rank": 4,
            "tokens": 148,
            "span_id": "lookup_field",
            "file_path": "django/contrib/admin/utils.py"
          },
          {
            "rank": 0,
            "tokens": 26,
            "span_id": "JSONField.prepare_value",
            "file_path": "django/forms/fields.py"
          },
          {
            "rank": 0,
            "tokens": 82,
            "span_id": "JSONField.has_changed",
            "file_path": "django/forms/fields.py"
          },
          {
            "rank": 0,
            "tokens": 38,
            "span_id": "JSONField.bound_data",
            "file_path": "django/forms/fields.py"
          },
          {
            "rank": 0,
            "tokens": 26,
            "span_id": "JSONField",
            "file_path": "django/forms/fields.py"
          },
          {
            "rank": 0,
            "tokens": 99,
            "span_id": "JSONField.to_python",
            "file_path": "django/forms/fields.py"
          },
          {
            "rank": 1,
            "tokens": 6,
            "span_id": "JSONString",
            "file_path": "django/forms/fields.py"
          },
          {
            "rank": 1,
            "tokens": 20,
            "span_id": "UUIDField.prepare_value",
            "file_path": "django/forms/fields.py"
          },
          {
            "rank": 1,
            "tokens": 57,
            "span_id": "UUIDField.to_python",
            "file_path": "django/forms/fields.py"
          },
          {
            "rank": 1,
            "tokens": 7,
            "span_id": "InvalidJSONInput",
            "file_path": "django/forms/fields.py"
          },
          {
            "rank": 0,
            "tokens": 37,
            "span_id": "JSONField.check",
            "file_path": "django/db/models/fields/json.py"
          },
          {
            "rank": 0,
            "tokens": 49,
            "span_id": "JSONField",
            "file_path": "django/db/models/fields/json.py"
          },
          {
            "rank": 0,
            "tokens": 74,
            "span_id": "imports",
            "file_path": "django/db/models/fields/json.py"
          },
          {
            "rank": 0,
            "tokens": 85,
            "span_id": "JSONField.__init__",
            "file_path": "django/db/models/fields/json.py"
          },
          {
            "rank": 1,
            "tokens": 44,
            "span_id": "JSONField.formfield",
            "file_path": "django/db/models/fields/json.py"
          },
          {
            "rank": 1,
            "tokens": 54,
            "span_id": "JSONField.deconstruct",
            "file_path": "django/db/models/fields/json.py"
          },
          {
            "rank": 1,
            "tokens": 55,
            "span_id": "JSONField.validate",
            "file_path": "django/db/models/fields/json.py"
          },
          {
            "rank": 1,
            "tokens": 11,
            "span_id": "JSONField.get_internal_type",
            "file_path": "django/db/models/fields/json.py"
          },
          {
            "rank": 1,
            "tokens": 15,
            "span_id": "JSONField.value_to_string",
            "file_path": "django/db/models/fields/json.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue concerns the improper display of JSONField values in the Django admin interface when they are readonly. Specifically, the issue is that JSONField values are displayed as dict, which results in invalid JSON output. To address this, the suggestion is to modify the `display_for_field` function in `django.contrib.admin.utils` to call the `prepare_value` method of the JSONField instead of directly using `json.dumps`. This approach will handle the case of InvalidJSONInput appropriately.\n\nAnalyzing the provided search results, the most relevant code span is found in the `display_for_field` function within `django/contrib/admin/utils.py`. This function is responsible for determining how field values should be displayed in the admin interface. The function currently does not have specific handling for JSONField when considering readonly scenarios, which seems to be the root cause of the issue.\n\nAdditionally, there are relevant functions in `django/forms/fields.py` such as `JSONField.prepare_value` and `JSONField.bound_data` which could potentially be leveraged to correctly prepare and handle JSON values for display. These functions are part of the form-handling logic and indicate how the JSON data should be processed and displayed in context of form fields.\n\nMoreover, the `JSONField` class definition and related methods in `django/db/models/fields/json.py` show the initialization of JSONField, its validation logic, and conversion methods which might also be necessary to consider when proposing a fix.\n\nGiven these observations, the task now involves enhancing the `display_for_field` function to correctly handle cases where JSONField values are readonly, potentially integrating it with the `prepare_value` method from the form field's JSONField class to ensure that the output respects JSON standards and formats.",
            "identified_spans": [
              {
                "span_ids": [
                  "display_for_field"
                ],
                "file_path": "django/contrib/admin/utils.py"
              },
              {
                "span_ids": [
                  "JSONField.prepare_value",
                  "JSONField.bound_data"
                ],
                "file_path": "django/forms/fields.py"
              },
              {
                "span_ids": [
                  "JSONField"
                ],
                "file_path": "django/db/models/fields/json.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4814,
          "output_tokens": 553,
          "retry_message": null,
          "completion_cost": 0.022737
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The file context provided includes the `display_for_field` function within `django.contrib.admin.utils`, which is central to addressing the reported issue. However, the function does not currently check for or handle the display of `JSONField` when it is readonly. The `prepare_value` method of the `JSONField` class in `django.forms.fields` is also provided, which is relevant for handling JSON values correctly, including the `InvalidJSONInput` case. The `JSONField` class in `django.db.models.fields.json` is provided but is not directly relevant for this specific issue as it relates more to database storage rather than display in the admin interface. Given this context, the relevant parts to fix the issue are present, but the actual integration of calling `prepare_value` from `display_for_field` is not yet implemented.",
            "search_suggestions": "Focus on integrating the call to `prepare_value` of `JSONField` within the `display_for_field` function in `django.contrib.admin.utils`. This might involve checking if the field is an instance of `JSONField` and then using its `prepare_value` method for displaying the value correctly in readonly mode."
          },
          "output": {
            "message": "Focus on integrating the call to `prepare_value` of `JSONField` within the `display_for_field` function in `django.contrib.admin.utils`. This might involve checking if the field is an instance of `JSONField` and then using its `prepare_value` method for displaying the value correctly in readonly mode."
          },
          "input_tokens": 2353,
          "output_tokens": 291,
          "retry_message": null,
          "completion_cost": 0.011424
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Focus on integrating the call to `prepare_value` of `JSONField` within the `display_for_field` function in `django.contrib.admin.utils`. This might involve checking if the field is an instance of `JSONField` and then using its `prepare_value` method for displaying the value correctly in readonly mode.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The task is to integrate the `prepare_value` method of `JSONField` within the `display_for_field` function in `django.contrib.admin.utils`. This involves checking if the field is an instance of `JSONField` and then using its `prepare_value` method for displaying the value correctly in readonly mode. Given the current context, we can see that the `display_for_field` function does not yet check for `JSONField` instances. We need to modify this function to incorporate the `prepare_value` logic for `JSONField` instances.",
            "search_requests": []
          },
          "output": null,
          "input_tokens": 4490,
          "output_tokens": 151,
          "retry_message": "\n\nUnfortunately, I didn\u2019t find any relevant results.",
          "completion_cost": 0.015735000000000002
        },
        {
          "action": {
            "complete": true,
            "scratch_pad": "The initial search did not yield any relevant results for integrating `prepare_value` of `JSONField` within `display_for_field` in `django.contrib.admin.utils`. Given the context provided, it seems there isn't an existing check for `JSONField` within `display_for_field`. A possible next step would be to focus on modifying `display_for_field` to include this check and integration.",
            "search_requests": []
          },
          "output": {
            "message": "The initial search did not yield any relevant results for integrating `prepare_value` of `JSONField` within `display_for_field` in `django.contrib.admin.utils`. Given the context provided, it seems there isn't an existing check for `JSONField` within `display_for_field`. A possible next step would be to focus on modifying `display_for_field` to include this check and integration."
          },
          "input_tokens": 4659,
          "output_tokens": 120,
          "retry_message": null,
          "completion_cost": 0.015777
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "The initial search did not yield any relevant results for integrating `prepare_value` of `JSONField` within `display_for_field` in `django.contrib.admin.utils`. Given the context provided, it seems there isn't an existing check for `JSONField` within `display_for_field`. A possible next step would be to focus on modifying `display_for_field` to include this check and integration.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "display_for_field",
            "file_path": "django/contrib/admin/utils.py",
            "scratch_pad": "To fix the issue with JSONField not being properly displayed as readonly in the admin, we need to modify the `display_for_field` function in `django.contrib.admin.utils`. Specifically, we need to add a check for `JSONField` and use the `prepare_value` method of the `JSONField` to format the value correctly for display. This ensures that the value is properly formatted as JSON and handles any `InvalidJSONInput` cases.",
            "instructions": "Add a check for `JSONField` in the `display_for_field` function to use the `JSONField`'s `prepare_value` method when the field is readonly. This will ensure the value is displayed as valid JSON."
          },
          "output": {
            "span_id": "display_for_field",
            "end_line": 402,
            "file_path": "django/contrib/admin/utils.py",
            "start_line": 380,
            "instructions": "Add a check for `JSONField` in the `display_for_field` function to use the `JSONField`'s `prepare_value` method when the field is readonly. This will ensure the value is displayed as valid JSON."
          },
          "input_tokens": 2708,
          "output_tokens": 208,
          "retry_message": null,
          "completion_cost": 0.011244
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "display_for_field",
        "end_line": 402,
        "file_path": "django/contrib/admin/utils.py",
        "max_tokens": 1000,
        "start_line": 380,
        "temperature": 1.6,
        "instructions": "Add a check for `JSONField` in the `display_for_field` function to use the `JSONField`'s `prepare_value` method when the field is readonly. This will ensure the value is displayed as valid JSON.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\ndef display_for_field(value, field, empty_value_display):\n    from django.contrib.admin.templatetags.admin_list import _boolean_icon\n\n    if getattr(field, 'flatchoices', None):\n        return dict(field.flatchoices).get(value, empty_value_display)\n    # BooleanField needs special-case null-handling, so it comes before the\n    # general null test.\n    elif isinstance(field, models.BooleanField):\n        return _boolean_icon(value)\n    elif value is None:\n        return empty_value_display\n    elif isinstance(field, models.DateTimeField):\n        return formats.localize(timezone.template_localtime(value))\n    elif isinstance(field, (models.DateField, models.TimeField)):\n        return formats.localize(value)\n    elif isinstance(field, models.DecimalField):\n        return formats.number_format(value, field.decimal_places)\n    elif isinstance(field, (models.IntegerField, models.FloatField)):\n        return formats.number_format(value)\n    elif isinstance(field, models.FileField) and value:\n        return format_html('<a href=\"{}\">{}</a>', value.url, value)\n    elif isinstance(field, models.JSONField) and field.editable is False:\n        return field.prepare_value(value)\n    else:\n        return display_for_value(value, empty_value_display)\n</replace>"
          },
          "output": {
            "diff": "--- django/contrib/admin/utils.py\n+++ django/contrib/admin/utils.py\n@@ -398,6 +398,8 @@\n         return formats.number_format(value)\n     elif isinstance(field, models.FileField) and value:\n         return format_html('<a href=\"{}\">{}</a>', value.url, value)\n+    elif isinstance(field, models.JSONField) and field.editable is False:\n+        return field.prepare_value(value)\n     else:\n         return display_for_value(value, empty_value_display)\n \n",
            "message": "Applied the change to django/contrib/admin/utils.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 2407,
          "output_tokens": 353,
          "retry_message": null,
          "completion_cost": 0.012516
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- django/contrib/admin/utils.py\n+++ django/contrib/admin/utils.py\n@@ -398,6 +398,8 @@\n         return formats.number_format(value)\n     elif isinstance(field, models.FileField) and value:\n         return format_html('<a href=\"{}\">{}</a>', value.url, value)\n+    elif isinstance(field, models.JSONField) and field.editable is False:\n+        return field.prepare_value(value)\n     else:\n         return display_for_value(value, empty_value_display)\n \n",
        "model": "deepseek-coder",
        "message": "Applied the change to django/contrib/admin/utils.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "All necessary changes have been made to address the issue. The `display_for_field` function now correctly handles `JSONField` values for readonly display.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The changes applied correctly integrate the `prepare_value` method of `JSONField` into `display_for_field`, ensuring that JSONField values are properly displayed as valid JSON when readonly in the admin. This addresses the issue reported where JSONField values were not displayed correctly in the admin interface.",
            "instructions": null
          },
          "output": {
            "message": "All necessary changes have been made to address the issue. The `display_for_field` function now correctly handles `JSONField` values for readonly display."
          },
          "input_tokens": 3319,
          "output_tokens": 154,
          "retry_message": null,
          "completion_cost": 0.012267
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "All necessary changes have been made to address the issue. The `display_for_field` function now correctly handles `JSONField` values for readonly display.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "JSONField are not properly displayed in admin when they are readonly.\nDescription\n\t\nJSONField values are displayed as dict when readonly in the admin.\nFor example, {\"foo\": \"bar\"} would be displayed as {'foo': 'bar'}, which is not valid JSON.\nI believe the fix would be to add a special case in django.contrib.admin.utils.display_for_field to call the prepare_value of the JSONField (not calling json.dumps directly to take care of the InvalidJSONInput case).\n"
}