{
  "info": {
    "duration": 233.30116033554077,
    "submission": "diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py\nindex f9e4dcbd62..9c481d2330 100644\n--- a/lib/matplotlib/colors.py\n+++ b/lib/matplotlib/colors.py\n@@ -1691,6 +1691,9 @@ def _make_norm_from_scale(\n                 clip = self.clip\n             if clip:\n                 value = np.clip(value, self.vmin, self.vmax)\n+            if isinstance(self._scale, scale.LogScale):\n+                if not (self.vmin > 0 and self.vmax > 0):\n+                    raise ValueError(\"vmin and vmax must be positive for LogNorm\")\n             t_value = self._trf.transform(value).reshape(np.shape(value))\n             t_vmin, t_vmax = self._trf.transform([self.vmin, self.vmax])\n             if not np.isfinite([t_vmin, t_vmax]).all():\n",
    "total_cost": 0.14896199999999998,
    "instance_id": "matplotlib__matplotlib-25079",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves setting a `LogNorm` after creating a colorbar in matplotlib 3.6.3, which results in an 'Invalid vmin' error. The error traceback points to several core modules in matplotlib. To start the search, focus on the `matplotlib.colors` and `matplotlib.cm` modules, specifically investigating the `LogNorm` class and its interaction with `ScalarMappable` objects, as well as the mechanism for updating norms in `ScalarMappable` instances. The code snippet near the error in `matplotlib/colors.py` suggests that an invalid `vmin` or `vmax` value is being checked. Also, look into the `set_clim` and `set_norm` methods in the `ScalarMappable` class in `matplotlib/cm.py` to understand how norms and clim values are handled.",
            "search_requests": [
              {
                "query": "LogNorm invalid vmin",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/matplotlib/colors.py",
                "function_names": []
              },
              {
                "query": null,
                "class_names": [
                  "ScalarMappable"
                ],
                "code_snippet": null,
                "file_pattern": "**/matplotlib/cm.py",
                "function_names": [
                  "set_clim",
                  "set_norm",
                  "_scale_norm"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 27,
                "span_id": "Normalize.scaled",
                "file_path": "lib/matplotlib/colors.py"
              },
              {
                "rank": 0,
                "tokens": 42,
                "span_id": "Normalize.autoscale",
                "file_path": "lib/matplotlib/colors.py"
              },
              {
                "rank": 0,
                "tokens": 89,
                "span_id": "Normalize.inverse",
                "file_path": "lib/matplotlib/colors.py"
              },
              {
                "rank": 0,
                "tokens": 71,
                "span_id": "Normalize.autoscale_None",
                "file_path": "lib/matplotlib/colors.py"
              },
              {
                "rank": 1,
                "tokens": 37,
                "span_id": "PowerNorm",
                "file_path": "lib/matplotlib/colors.py"
              },
              {
                "rank": 1,
                "tokens": 92,
                "span_id": "PowerNorm.inverse",
                "file_path": "lib/matplotlib/colors.py"
              },
              {
                "rank": 1,
                "tokens": 186,
                "span_id": "PowerNorm.__call__",
                "file_path": "lib/matplotlib/colors.py"
              },
              {
                "rank": 2,
                "tokens": 287,
                "span_id": "SymLogNorm",
                "file_path": "lib/matplotlib/colors.py"
              },
              {
                "rank": 2,
                "tokens": 21,
                "span_id": "SymLogNorm.linthresh_1",
                "file_path": "lib/matplotlib/colors.py"
              },
              {
                "rank": 2,
                "tokens": 15,
                "span_id": "SymLogNorm.linthresh",
                "file_path": "lib/matplotlib/colors.py"
              },
              {
                "rank": 3,
                "tokens": 996,
                "span_id": "_make_norm_from_scale",
                "file_path": "lib/matplotlib/colors.py"
              },
              {
                "rank": 4,
                "tokens": 167,
                "span_id": "AsinhNorm",
                "file_path": "lib/matplotlib/colors.py"
              },
              {
                "rank": 4,
                "tokens": 14,
                "span_id": "AsinhNorm.linear_width",
                "file_path": "lib/matplotlib/colors.py"
              },
              {
                "rank": 0,
                "tokens": 161,
                "span_id": "ScalarMappable.set_clim",
                "file_path": "lib/matplotlib/cm.py"
              },
              {
                "rank": 0,
                "tokens": 84,
                "span_id": "ScalarMappable.set_norm",
                "file_path": "lib/matplotlib/cm.py"
              },
              {
                "rank": 0,
                "tokens": 176,
                "span_id": "ScalarMappable._scale_norm",
                "file_path": "lib/matplotlib/cm.py"
              }
            ],
            "search_requests": [
              {
                "query": "LogNorm invalid vmin",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/matplotlib/colors.py",
                "function_names": []
              },
              {
                "query": null,
                "class_names": [
                  "ScalarMappable"
                ],
                "code_snippet": null,
                "file_pattern": "**/matplotlib/cm.py",
                "function_names": [
                  "set_clim",
                  "set_norm",
                  "_scale_norm"
                ]
              }
            ]
          },
          "input_tokens": 5932,
          "output_tokens": 302,
          "retry_message": null,
          "completion_cost": 0.022326
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 27,
            "span_id": "Normalize.scaled",
            "file_path": "lib/matplotlib/colors.py"
          },
          {
            "rank": 0,
            "tokens": 42,
            "span_id": "Normalize.autoscale",
            "file_path": "lib/matplotlib/colors.py"
          },
          {
            "rank": 0,
            "tokens": 89,
            "span_id": "Normalize.inverse",
            "file_path": "lib/matplotlib/colors.py"
          },
          {
            "rank": 0,
            "tokens": 71,
            "span_id": "Normalize.autoscale_None",
            "file_path": "lib/matplotlib/colors.py"
          },
          {
            "rank": 1,
            "tokens": 37,
            "span_id": "PowerNorm",
            "file_path": "lib/matplotlib/colors.py"
          },
          {
            "rank": 1,
            "tokens": 92,
            "span_id": "PowerNorm.inverse",
            "file_path": "lib/matplotlib/colors.py"
          },
          {
            "rank": 1,
            "tokens": 186,
            "span_id": "PowerNorm.__call__",
            "file_path": "lib/matplotlib/colors.py"
          },
          {
            "rank": 2,
            "tokens": 287,
            "span_id": "SymLogNorm",
            "file_path": "lib/matplotlib/colors.py"
          },
          {
            "rank": 2,
            "tokens": 21,
            "span_id": "SymLogNorm.linthresh_1",
            "file_path": "lib/matplotlib/colors.py"
          },
          {
            "rank": 2,
            "tokens": 15,
            "span_id": "SymLogNorm.linthresh",
            "file_path": "lib/matplotlib/colors.py"
          },
          {
            "rank": 3,
            "tokens": 996,
            "span_id": "_make_norm_from_scale",
            "file_path": "lib/matplotlib/colors.py"
          },
          {
            "rank": 4,
            "tokens": 167,
            "span_id": "AsinhNorm",
            "file_path": "lib/matplotlib/colors.py"
          },
          {
            "rank": 4,
            "tokens": 14,
            "span_id": "AsinhNorm.linear_width",
            "file_path": "lib/matplotlib/colors.py"
          },
          {
            "rank": 0,
            "tokens": 161,
            "span_id": "ScalarMappable.set_clim",
            "file_path": "lib/matplotlib/cm.py"
          },
          {
            "rank": 0,
            "tokens": 84,
            "span_id": "ScalarMappable.set_norm",
            "file_path": "lib/matplotlib/cm.py"
          },
          {
            "rank": 0,
            "tokens": 176,
            "span_id": "ScalarMappable._scale_norm",
            "file_path": "lib/matplotlib/cm.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves setting the norm to a `LogNorm` after a colorbar has been created, which results in an `Invalid vmin` error. The code example provided uses `pcolormesh` for plotting and attempts to set the norm to `LogNorm` interactively. The error traceback indicates that the issue occurs in `matplotlib.colors.py` when calling the `__call__` method of the `Norm` class. To address this, we need to identify the relevant code spans that handle the normalization process and the interaction between the norm and the colorbar. Analyzing the provided search results, the `Normalize` class and its methods are relevant as they manage vmin and vmax values and clipping. Additionally, the `make_norm_from_scale` and `_make_norm_from_scale` functions are significant as they create and modify norm instances. The `ScalarMappable` class in `matplotlib.cm.py` is also relevant as it manages the norm and colormap settings. These spans should provide insights into how norms are handled and updated, which is crucial for resolving the reported issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "Normalize",
                  "Normalize.__init__",
                  "Normalize.inverse",
                  "Normalize.autoscale",
                  "Normalize.autoscale_None",
                  "Normalize.scaled",
                  "make_norm_from_scale",
                  "_make_norm_from_scale",
                  "_picklable_norm_constructor",
                  "SymLogNorm",
                  "SymLogNorm.linthresh",
                  "SymLogNorm.linthresh_1",
                  "AsinhNorm",
                  "AsinhNorm.linear_width",
                  "PowerNorm",
                  "PowerNorm.__init__",
                  "PowerNorm.__call__",
                  "PowerNorm.inverse"
                ],
                "file_path": "lib/matplotlib/colors.py"
              },
              {
                "span_ids": [
                  "ScalarMappable",
                  "ScalarMappable.__init__",
                  "ScalarMappable._scale_norm",
                  "ScalarMappable.set_clim",
                  "ScalarMappable.set_norm"
                ],
                "file_path": "lib/matplotlib/cm.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 5503,
          "output_tokens": 558,
          "retry_message": null,
          "completion_cost": 0.024879
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The provided file context contains the relevant classes `Normalize` and `ScalarMappable` from the `matplotlib.colors` and `matplotlib.cm` modules, respectively, which are directly related to the reported issue. The `Normalize` class includes the `LogNorm` subclasses and methods that handle the normalization settings, such as `__call__` and `autoscale_None`, which could interact with the `ScalarMappable` instance. The `ScalarMappable` class contains methods such as `set_clim` and `set_norm`, which are key for managing the color scaling and norms applied to the data. The traceback in the issue description points to specific methods within these classes where the error occurs, suggesting that these classes are indeed the correct context for addressing the reported issue. Given this information, the file context appears to be directly relevant to the issue at hand and would likely be sufficient for diagnosing and addressing the problem.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 5390,
          "output_tokens": 237,
          "retry_message": null,
          "completion_cost": 0.019725
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "_make_norm_from_scale",
            "file_path": "lib/matplotlib/colors.py",
            "scratch_pad": "The issue seems to be related to setting the norm to `LogNorm` after the colorbar has been created. The error occurs when the transformation (scaling) is attempted with an invalid `vmin` or `vmax`. The current implementation in `_make_norm_from_scale` checks for finite `vmin` and `vmax` after transformation, which might be the root cause. Modifying the `__call__` method in the dynamically created `Norm` class to ensure valid `vmin` and `vmax` before transformation could potentially fix the issue.",
            "instructions": "Ensure that `vmin` and `vmax` are valid before performing the transformation in the `__call__` method of the dynamically created `Norm` class. Specifically, check if `vmin` and `vmax` are greater than zero for `LogNorm` since `LogNorm` requires strictly positive values."
          },
          "output": {
            "span_id": "_make_norm_from_scale",
            "file_path": "lib/matplotlib/colors.py",
            "instructions": "Ensure that `vmin` and `vmax` are valid before performing the transformation in the `__call__` method of the dynamically created `Norm` class. Specifically, check if `vmin` and `vmax` are greater than zero for `LogNorm` since `LogNorm` requires strictly positive values."
          },
          "input_tokens": 5900,
          "output_tokens": 248,
          "retry_message": null,
          "completion_cost": 0.02142
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "_make_norm_from_scale",
        "end_line": null,
        "file_path": "lib/matplotlib/colors.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Ensure that `vmin` and `vmax` are valid before performing the transformation in the `__call__` method of the dynamically created `Norm` class. Specifically, check if `vmin` and `vmax` are greater than zero for `LogNorm` since `LogNorm` requires strictly positive values.\n\nThe check for `vmin` and `vmax` needs to be added in the `__call__` method specifically for `LogNorm`. The current code checks if `vmin` and `vmax` are set and if `vmin` is greater than `vmax`, but it does not check if they are greater than zero which is required for `LogNorm`.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": false,
            "end_line": 1695,
            "start_line": 1694,
            "scratch_pad": "The check for `vmin` and `vmax` needs to be added in the `__call__` method specifically for `LogNorm`. The current code checks if `vmin` and `vmax` are set and if `vmin` is greater than `vmax`, but it does not check if they are greater than zero which is required for `LogNorm`."
          },
          "output": {
            "span_id": "_make_norm_from_scale",
            "end_line": 1701,
            "file_path": "lib/matplotlib/colors.py",
            "start_line": 1682,
            "instructions": "Ensure that `vmin` and `vmax` are valid before performing the transformation in the `__call__` method of the dynamically created `Norm` class. Specifically, check if `vmin` and `vmax` are greater than zero for `LogNorm` since `LogNorm` requires strictly positive values.\n\nThe check for `vmin` and `vmax` needs to be added in the `__call__` method specifically for `LogNorm`. The current code checks if `vmin` and `vmax` are set and if `vmin` is greater than `vmax`, but it does not check if they are greater than zero which is required for `LogNorm`."
          },
          "input_tokens": 2331,
          "output_tokens": 127,
          "retry_message": null,
          "completion_cost": 0.008898
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "_make_norm_from_scale",
        "end_line": 1701,
        "file_path": "lib/matplotlib/colors.py",
        "max_tokens": 1000,
        "start_line": 1682,
        "temperature": 1.6,
        "instructions": "Ensure that `vmin` and `vmax` are valid before performing the transformation in the `__call__` method of the dynamically created `Norm` class. Specifically, check if `vmin` and `vmax` are greater than zero for `LogNorm` since `LogNorm` requires strictly positive values.\n\nThe check for `vmin` and `vmax` needs to be added in the `__call__` method specifically for `LogNorm`. The current code checks if `vmin` and `vmax` are set and if `vmin` is greater than `vmax`, but it does not check if they are greater than zero which is required for `LogNorm`.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n        def __call__(self, value, clip=None):\n            value, is_scalar = self.process_value(value)\n            if self.vmin is None or self.vmax is None:\n                self.autoscale_None(value)\n            if self.vmin > self.vmax:\n                raise ValueError(\"vmin must be less or equal to vmax\")\n            if self.vmin == self.vmax:\n                return np.full_like(value, 0)\n            if clip is None:\n                clip = self.clip\n            if clip:\n                value = np.clip(value, self.vmin, self.vmax)\n            if isinstance(self._scale, scale.LogScale):\n                if not (self.vmin > 0 and self.vmax > 0):\n                    raise ValueError(\"vmin and vmax must be positive for LogNorm\")\n            t_value = self._trf.transform(value).reshape(np.shape(value))\n            t_vmin, t_vmax = self._trf.transform([self.vmin, self.vmax])\n            if not np.isfinite([t_vmin, t_vmax]).all():\n                raise ValueError(\"Invalid vmin or vmax\")\n            t_value -= t_vmin\n            t_value /= (t_vmax - t_vmin)\n            t_value = np.ma.masked_invalid(t_value, copy=False)\n            return t_value[0] if is_scalar else t_value\n</replace>"
          },
          "output": {
            "diff": "--- lib/matplotlib/colors.py\n+++ lib/matplotlib/colors.py\n@@ -1691,6 +1691,9 @@\n                 clip = self.clip\n             if clip:\n                 value = np.clip(value, self.vmin, self.vmax)\n+            if isinstance(self._scale, scale.LogScale):\n+                if not (self.vmin > 0 and self.vmax > 0):\n+                    raise ValueError(\"vmin and vmax must be positive for LogNorm\")\n             t_value = self._trf.transform(value).reshape(np.shape(value))\n             t_vmin, t_vmax = self._trf.transform([self.vmin, self.vmax])\n             if not np.isfinite([t_vmin, t_vmax]).all():\n",
            "message": "Applied the change to lib/matplotlib/colors.py.",
            "verification_errors": []
          },
          "input_tokens": 8103,
          "output_tokens": 364,
          "retry_message": null,
          "completion_cost": 0.029769
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- lib/matplotlib/colors.py\n+++ lib/matplotlib/colors.py\n@@ -1691,6 +1691,9 @@\n                 clip = self.clip\n             if clip:\n                 value = np.clip(value, self.vmin, self.vmax)\n+            if isinstance(self._scale, scale.LogScale):\n+                if not (self.vmin > 0 and self.vmax > 0):\n+                    raise ValueError(\"vmin and vmax must be positive for LogNorm\")\n             t_value = self._trf.transform(value).reshape(np.shape(value))\n             t_vmin, t_vmax = self._trf.transform([self.vmin, self.vmax])\n             if not np.isfinite([t_vmin, t_vmax]).all():\n",
        "model": "deepseek-coder",
        "message": "Applied the change to lib/matplotlib/colors.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue of setting the norm to `LogNorm` after the colorbar has been created has been addressed by ensuring that `vmin` and `vmax` are valid before performing the transformation. This should resolve the reported error.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The applied change ensures that `vmin` and `vmax` are valid for `LogNorm` by checking if they are greater than zero before performing the transformation. This should resolve the issue of invalid `vmin` or `vmax` values causing an error when setting the norm after the colorbar has been created.",
            "instructions": null
          },
          "output": {
            "message": "The issue of setting the norm to `LogNorm` after the colorbar has been created has been addressed by ensuring that `vmin` and `vmax` are valid before performing the transformation. This should resolve the reported error."
          },
          "input_tokens": 6440,
          "output_tokens": 175,
          "retry_message": null,
          "completion_cost": 0.021945
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue of setting the norm to `LogNorm` after the colorbar has been created has been addressed by ensuring that `vmin` and `vmax` are valid before performing the transformation. This should resolve the reported error.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "[Bug]: Setting norm with existing colorbar fails with 3.6.3\n### Bug summary\r\n\r\nSetting the norm to a `LogNorm` after the colorbar has been created (e.g. in interactive code) fails with an `Invalid vmin` value in matplotlib 3.6.3.\r\n\r\nThe same code worked in previous matplotlib versions.\r\n\r\nNot that vmin and vmax are explicitly set to values valid for `LogNorm` and no negative values (or values == 0) exist in the input data.\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nfrom matplotlib.colors import LogNorm\r\nimport numpy as np\r\n\r\n# create some random data to fill a 2d plot\r\nrng = np.random.default_rng(0)\r\nimg = rng.uniform(1, 5, (25, 25))\r\n\r\n# plot it\r\nfig, ax = plt.subplots(layout=\"constrained\")\r\nplot = ax.pcolormesh(img)\r\ncbar = fig.colorbar(plot, ax=ax)\r\n\r\nvmin = 1\r\nvmax = 5\r\n\r\nplt.ion()\r\nfig.show()\r\nplt.pause(0.5)\r\n\r\nplot.norm = LogNorm(vmin, vmax)\r\nplot.autoscale()\r\nplt.pause(0.5)\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"/home/mnoethe/.local/conda/envs/cta-dev/lib/python3.9/site-packages/matplotlib/backends/backend_qt.py\", line 454, in _draw_idle\r\n    self.draw()\r\n  File \"/home/mnoethe/.local/conda/envs/cta-dev/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py\", line 405, in draw\r\n    self.figure.draw(self.renderer)\r\n  File \"/home/mnoethe/.local/conda/envs/cta-dev/lib/python3.9/site-packages/matplotlib/artist.py\", line 74, in draw_wrapper\r\n    result = draw(artist, renderer, *args, **kwargs)\r\n  File \"/home/mnoethe/.local/conda/envs/cta-dev/lib/python3.9/site-packages/matplotlib/artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"/home/mnoethe/.local/conda/envs/cta-dev/lib/python3.9/site-packages/matplotlib/figure.py\", line 3082, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"/home/mnoethe/.local/conda/envs/cta-dev/lib/python3.9/site-packages/matplotlib/image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"/home/mnoethe/.local/conda/envs/cta-dev/lib/python3.9/site-packages/matplotlib/artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"/home/mnoethe/.local/conda/envs/cta-dev/lib/python3.9/site-packages/matplotlib/axes/_base.py\", line 3100, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"/home/mnoethe/.local/conda/envs/cta-dev/lib/python3.9/site-packages/matplotlib/image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"/home/mnoethe/.local/conda/envs/cta-dev/lib/python3.9/site-packages/matplotlib/artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"/home/mnoethe/.local/conda/envs/cta-dev/lib/python3.9/site-packages/matplotlib/collections.py\", line 2148, in draw\r\n    self.update_scalarmappable()\r\n  File \"/home/mnoethe/.local/conda/envs/cta-dev/lib/python3.9/site-packages/matplotlib/collections.py\", line 891, in update_scalarmappable\r\n    self._mapped_colors = self.to_rgba(self._A, self._alpha)\r\n  File \"/home/mnoethe/.local/conda/envs/cta-dev/lib/python3.9/site-packages/matplotlib/cm.py\", line 511, in to_rgba\r\n    x = self.norm(x)\r\n  File \"/home/mnoethe/.local/conda/envs/cta-dev/lib/python3.9/site-packages/matplotlib/colors.py\", line 1694, in __call__\r\n    raise ValueError(\"Invalid vmin or vmax\")\r\nValueError: Invalid vmin or vmax\r\n```\r\n\r\n### Expected outcome\r\n\r\nWorks, colorbar and mappable are updated with new norm.\r\n\r\n### Additional information\r\n\r\n_No response_\r\n\r\n### Operating system\r\n\r\nLinux\r\n\r\n### Matplotlib Version\r\n\r\n3.6.3 (works with 3.6.2)\r\n\r\n### Matplotlib Backend\r\n\r\nMultpiple backends tested, same error in all (Qt5Agg, TkAgg, agg, ...)\r\n\r\n### Python version\r\n\r\n3.9.15\r\n\r\n### Jupyter version\r\n\r\nnot in jupyter\r\n\r\n### Installation\r\n\r\nconda\n"
}