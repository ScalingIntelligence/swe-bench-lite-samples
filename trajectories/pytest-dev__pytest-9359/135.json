{
  "info": {
    "duration": 146.71335744857788,
    "submission": "",
    "total_cost": 0.10851,
    "instance_id": "pytest-dev__pytest-9359",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves an extra line being printed in error details when using 'assert' in Python 3.9, specifically related to the 't' decorator. This does not occur in Python 3.7.10. The problem seems to be related to how the lineno is calculated or possibly how the assertion rewriting mechanism handles the decorator. Focus should be on the parts of the code that are responsible for assertion rewriting and error handling to understand why this discrepancy occurs between Python versions.",
            "search_requests": [
              {
                "query": "assertion rewriting decorator",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/src/_pytest/assertion/**/*.py",
                "function_names": []
              },
              {
                "query": "error handling lineno calculation",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/src/_pytest/_code/code.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 299,
                "span_id": "docstring",
                "file_path": "src/_pytest/assertion/rewrite.py"
              },
              {
                "rank": 1,
                "tokens": 879,
                "span_id": "AssertionRewriter.visit_Assert",
                "file_path": "src/_pytest/assertion/rewrite.py"
              },
              {
                "rank": 2,
                "tokens": 215,
                "span_id": "AssertionRewriter.visit_Call",
                "file_path": "src/_pytest/assertion/rewrite.py"
              },
              {
                "rank": 3,
                "tokens": 172,
                "span_id": "AssertionRewritingHook._should_rewrite",
                "file_path": "src/_pytest/assertion/rewrite.py"
              },
              {
                "rank": 4,
                "tokens": 47,
                "span_id": "traverse_node",
                "file_path": "src/_pytest/assertion/rewrite.py"
              },
              {
                "rank": 4,
                "tokens": 50,
                "span_id": "_check_if_assertion_pass_impl",
                "file_path": "src/_pytest/assertion/rewrite.py"
              },
              {
                "rank": 4,
                "tokens": 218,
                "span_id": "impl:13",
                "file_path": "src/_pytest/assertion/rewrite.py"
              },
              {
                "rank": 4,
                "tokens": 46,
                "span_id": "_call_assertion_pass",
                "file_path": "src/_pytest/assertion/rewrite.py"
              },
              {
                "rank": 5,
                "tokens": 68,
                "span_id": "AssertionRewriter.visit_Starred",
                "file_path": "src/_pytest/assertion/rewrite.py"
              },
              {
                "rank": 5,
                "tokens": 109,
                "span_id": "AssertionRewriter.visit_Attribute",
                "file_path": "src/_pytest/assertion/rewrite.py"
              },
              {
                "rank": 7,
                "tokens": 100,
                "span_id": "AssertionRewritingHook._is_marked_for_rewrite",
                "file_path": "src/_pytest/assertion/rewrite.py"
              },
              {
                "rank": 8,
                "tokens": 11,
                "span_id": "AssertionRewritingHook:3",
                "file_path": "src/_pytest/assertion/rewrite.py"
              },
              {
                "rank": 6,
                "tokens": 105,
                "span_id": "docstring",
                "file_path": "src/_pytest/assertion/__init__.py"
              },
              {
                "rank": 0,
                "tokens": 303,
                "span_id": "imports",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 1,
                "tokens": 64,
                "span_id": "impl:6",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 1,
                "tokens": 274,
                "span_id": "getfslineno",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 3,
                "tokens": 6,
                "span_id": "TracebackEntry:5",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 3,
                "tokens": 181,
                "span_id": "TracebackEntry.getsource",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 4,
                "tokens": 119,
                "span_id": "Code.path",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 5,
                "tokens": 127,
                "span_id": "TracebackEntry.__str__",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 5,
                "tokens": 24,
                "span_id": "TracebackEntry.name",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 6,
                "tokens": 210,
                "span_id": "FormattedExcinfo.get_source",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 7,
                "tokens": 114,
                "span_id": "FormattedExcinfo.get_exconly",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 8,
                "tokens": 38,
                "span_id": "ReprFileLocation",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 8,
                "tokens": 27,
                "span_id": "ReprLocals",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 8,
                "tokens": 28,
                "span_id": "ReprLocals.toterminal",
                "file_path": "src/_pytest/_code/code.py"
              }
            ],
            "search_requests": [
              {
                "query": "assertion rewriting decorator",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/src/_pytest/assertion/**/*.py",
                "function_names": []
              },
              {
                "query": "error handling lineno calculation",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/src/_pytest/_code/code.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 4225,
          "output_tokens": 252,
          "retry_message": null,
          "completion_cost": 0.016455
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 299,
            "span_id": "docstring",
            "file_path": "src/_pytest/assertion/rewrite.py"
          },
          {
            "rank": 1,
            "tokens": 879,
            "span_id": "AssertionRewriter.visit_Assert",
            "file_path": "src/_pytest/assertion/rewrite.py"
          },
          {
            "rank": 2,
            "tokens": 215,
            "span_id": "AssertionRewriter.visit_Call",
            "file_path": "src/_pytest/assertion/rewrite.py"
          },
          {
            "rank": 3,
            "tokens": 172,
            "span_id": "AssertionRewritingHook._should_rewrite",
            "file_path": "src/_pytest/assertion/rewrite.py"
          },
          {
            "rank": 4,
            "tokens": 47,
            "span_id": "traverse_node",
            "file_path": "src/_pytest/assertion/rewrite.py"
          },
          {
            "rank": 4,
            "tokens": 50,
            "span_id": "_check_if_assertion_pass_impl",
            "file_path": "src/_pytest/assertion/rewrite.py"
          },
          {
            "rank": 4,
            "tokens": 218,
            "span_id": "impl:13",
            "file_path": "src/_pytest/assertion/rewrite.py"
          },
          {
            "rank": 4,
            "tokens": 46,
            "span_id": "_call_assertion_pass",
            "file_path": "src/_pytest/assertion/rewrite.py"
          },
          {
            "rank": 5,
            "tokens": 68,
            "span_id": "AssertionRewriter.visit_Starred",
            "file_path": "src/_pytest/assertion/rewrite.py"
          },
          {
            "rank": 5,
            "tokens": 109,
            "span_id": "AssertionRewriter.visit_Attribute",
            "file_path": "src/_pytest/assertion/rewrite.py"
          },
          {
            "rank": 7,
            "tokens": 100,
            "span_id": "AssertionRewritingHook._is_marked_for_rewrite",
            "file_path": "src/_pytest/assertion/rewrite.py"
          },
          {
            "rank": 8,
            "tokens": 11,
            "span_id": "AssertionRewritingHook:3",
            "file_path": "src/_pytest/assertion/rewrite.py"
          },
          {
            "rank": 6,
            "tokens": 105,
            "span_id": "docstring",
            "file_path": "src/_pytest/assertion/__init__.py"
          },
          {
            "rank": 0,
            "tokens": 303,
            "span_id": "imports",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 1,
            "tokens": 64,
            "span_id": "impl:6",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 1,
            "tokens": 274,
            "span_id": "getfslineno",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 3,
            "tokens": 6,
            "span_id": "TracebackEntry:5",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 3,
            "tokens": 181,
            "span_id": "TracebackEntry.getsource",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 4,
            "tokens": 119,
            "span_id": "Code.path",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 5,
            "tokens": 127,
            "span_id": "TracebackEntry.__str__",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 5,
            "tokens": 24,
            "span_id": "TracebackEntry.name",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 6,
            "tokens": 210,
            "span_id": "FormattedExcinfo.get_source",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 7,
            "tokens": 114,
            "span_id": "FormattedExcinfo.get_exconly",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 8,
            "tokens": 38,
            "span_id": "ReprFileLocation",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 8,
            "tokens": 27,
            "span_id": "ReprLocals",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 8,
            "tokens": 28,
            "span_id": "ReprLocals.toterminal",
            "file_path": "src/_pytest/_code/code.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves an error message that prints extra code line when using assert in python3.9, specifically mentioning the 't' decorator. From the search results, the key file to focus on is '_pytest/assertion/rewrite.py' which contains multiple spans relevant to assertion rewriting and potentially handling the extra line printing during assertion failures. Specifically, the 'AssertionRewriter' class and its methods 'visit_Assert', 'visit_Call', 'visit_Starred', and 'visit_Attribute' are likely candidates for analysis as they directly deal with how assertions are rewritten and handled during runtime. Additionally, the 'TracebackEntry' class and its method 'getsource' in '_pytest/_code/code.py' are relevant as they handle source code extraction which might be involved in the error reporting process. The other spans in '_pytest/assertion/rewrite.py' also provide context for how assertion rewriting hooks and conditions are managed, which could influence the behavior described in the issue. Further, '_pytest/assertion/__init__.py' is relevant for initial setup of assertion rewriting within pytest. These spans collectively cover both the rewriting mechanism and the detailed handling of assertions, aligning with the reported issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "AssertionRewritingHook",
                  "AssertionRewritingHook:3",
                  "AssertionRewritingHook._should_rewrite",
                  "AssertionRewritingHook._is_marked_for_rewrite",
                  "_call_assertion_pass",
                  "_check_if_assertion_pass_impl",
                  "impl:13",
                  "traverse_node",
                  "AssertionRewriter",
                  "AssertionRewriter.__init__",
                  "AssertionRewriter.visit_Assert",
                  "AssertionRewriter.visit_Call",
                  "AssertionRewriter.visit_Starred",
                  "AssertionRewriter.visit_Attribute"
                ],
                "file_path": "src/_pytest/assertion/rewrite.py"
              },
              {
                "span_ids": [
                  "imports",
                  "Code",
                  "Code.path",
                  "TracebackEntry",
                  "TracebackEntry.getsource",
                  "impl:6"
                ],
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "span_ids": [
                  "docstring"
                ],
                "file_path": "src/_pytest/assertion/__init__.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 7391,
          "output_tokens": 569,
          "retry_message": null,
          "completion_cost": 0.030708000000000003
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The issue involves an extra line being printed in error details when using 'assert' in Python 3.9, specifically related to the 't' decorator. This does not occur in Python 3.7.10. The problem seems to be related to how the lineno is calculated or possibly how the assertion rewriting mechanism handles the decorator. The provided file context includes relevant parts of the pytest codebase that handle assertion rewriting and error handling, particularly in `src/_pytest/assertion/rewrite.py` and `src/_pytest/_code/code.py`. These files contain the `AssertionRewritingHook` and `AssertionRewriter` classes, which are key to understanding how assertions are rewritten and how errors are handled during tests. Given these details, it appears that the relevant code for addressing this issue has been identified.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 6243,
          "output_tokens": 207,
          "retry_message": null,
          "completion_cost": 0.021834
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "AssertionRewriter.visit_Assert",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "scratch_pad": "The issue reported involves an extra code line being printed during assertion failure in Python 3.9, specifically when using decorators. This does not occur in Python 3.7, suggesting a potential change in how Python 3.9 handles assertion rewriting or reporting.",
            "instructions": "Modify the `AssertionRewriter.visit_Assert` method in `src/_pytest/assertion/rewrite.py` to ensure that when rewriting assertions, it correctly identifies and handles lines that are part of decorators, preventing them from being included in the error output."
          },
          "output": {
            "span_id": "AssertionRewriter.visit_Assert",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "instructions": "Modify the `AssertionRewriter.visit_Assert` method in `src/_pytest/assertion/rewrite.py` to ensure that when rewriting assertions, it correctly identifies and handles lines that are part of decorators, preventing them from being included in the error output."
          },
          "input_tokens": 6748,
          "output_tokens": 172,
          "retry_message": null,
          "completion_cost": 0.022824
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "AssertionRewriter.visit_Assert",
        "end_line": null,
        "file_path": "src/_pytest/assertion/rewrite.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Modify the `AssertionRewriter.visit_Assert` method in `src/_pytest/assertion/rewrite.py` to ensure that when rewriting assertions, it correctly identifies and handles lines that are part of decorators, preventing them from being included in the error output.\n\nThe specific lines that need modification to handle decorators within the `visit_Assert` method are those that deal with the parsing and rewriting of the assert statements, particularly around how lines are identified and included in the error output. These lines are where the logic for handling the assert statements as well as potential decorators around them exists.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 961,
            "start_line": 846,
            "scratch_pad": "To address the instruction, we need to focus on the logic within the visit_Assert method that handles the rewriting of assertions. Specifically, we need to ensure that decorators are correctly identified and handled to prevent them from being included in the error output. This involves modifying the way the method processes lines and determines which lines to include in the error output."
          },
          "output": null,
          "input_tokens": 2134,
          "output_tokens": 116,
          "retry_message": "The provided line numbers 846 - 961 covers the whole code span. You must specify line numbers of only lines you want to change.",
          "completion_cost": 0.008142
        },
        {
          "action": {
            "reject": null,
            "end_line": 925,
            "start_line": 880,
            "scratch_pad": "The specific lines that need modification to handle decorators within the `visit_Assert` method are those that deal with the parsing and rewriting of the assert statements, particularly around how lines are identified and included in the error output. These lines are where the logic for handling the assert statements as well as potential decorators around them exists."
          },
          "output": {
            "span_id": "AssertionRewriter.visit_Assert",
            "end_line": 925,
            "file_path": "src/_pytest/assertion/rewrite.py",
            "start_line": 880,
            "instructions": "Modify the `AssertionRewriter.visit_Assert` method in `src/_pytest/assertion/rewrite.py` to ensure that when rewriting assertions, it correctly identifies and handles lines that are part of decorators, preventing them from being included in the error output.\n\nThe specific lines that need modification to handle decorators within the `visit_Assert` method are those that deal with the parsing and rewriting of the assert statements, particularly around how lines are identified and included in the error output. These lines are where the logic for handling the assert statements as well as potential decorators around them exists."
          },
          "input_tokens": 2289,
          "output_tokens": 112,
          "retry_message": null,
          "completion_cost": 0.008546999999999999
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "AssertionRewriter.visit_Assert",
        "end_line": 925,
        "file_path": "src/_pytest/assertion/rewrite.py",
        "max_tokens": 1000,
        "start_line": 880,
        "temperature": 1.6,
        "instructions": "Modify the `AssertionRewriter.visit_Assert` method in `src/_pytest/assertion/rewrite.py` to ensure that when rewriting assertions, it correctly identifies and handles lines that are part of decorators, preventing them from being included in the error output.\n\nThe specific lines that need modification to handle decorators within the `visit_Assert` method are those that deal with the parsing and rewriting of the assert statements, particularly around how lines are identified and included in the error output. These lines are where the logic for handling the assert statements as well as potential decorators around them exists.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```json\n{\n  \"replace\": \"            top_condition, explanation = self.visit(assert_.test)\\n\\n            negation = ast.UnaryOp(ast.Not(), top_condition)\\n\\n            if self.enable_assertion_pass_hook:  # Experimental pytest_assertion_pass hook\\n                msg = self.pop_format_context(ast.Str(explanation))\\n\\n                # Failed\\n                if assert_.msg:\\n                    assertmsg = self.helper(\\\"_format_assertmsg\\\", assert_.msg)\\n                    gluestr = \\\"\\\\n>assert \\\"\\n                else:\\n                    assertmsg = ast.Str(\\\"\\\")\\n                    gluestr = \\\"assert \\\"\\n                err_explanation = ast.BinOp(ast.Str(gluestr), ast.Add(), msg)\\n                err_msg = ast.BinOp(assertmsg, ast.Add(), err_explanation)\\n                err_name = ast.Name(\\\"AssertionError\\\", ast.Load())\\n                fmt = self.helper(\\\"_format_explanation\\\", err_msg)\\n                exc = ast.Call(err_name, [fmt], [])\\n                raise_ = ast.Raise(exc, None)\\n                statements_fail = []\\n                statements_fail.extend(self.expl_stmts)\\n                statements_fail.append(raise_)\\n\\n                # Passed\\n                fmt_pass = self.helper(\\\"_format_explanation\\\", msg)\\n                orig = _get_assertion_exprs(self.source)[assert_.lineno]\\n                hook_call_pass = ast.Expr(\\n                    self.helper(\\n                        \\\"_call_assertion_pass\\\",\\n                        ast.Num(assert_.lineno),\\n                        ast.Str(orig),\\n                        fmt_pass,\\n                    )\\n                )\\n                # If any hooks implement assert_pass hook\\n                hook_impl_test = ast.If(\\n                    self.helper(\\\"_check_if_assertion_pass_impl\\\"),\\n                    self.expl_stmts + [hook_call_pass],\\n                    [],\\n                )\\n                statements_pass = [hook_impl_test]\\n\\n                # Test for assertion condition\\n                main_test = ast.If(negation, statements_fail, statements_pass)\\n                self.statements.append(main_test)\"\n}\n```"
          },
          "output": null,
          "input_tokens": 7690,
          "output_tokens": 536,
          "retry_message": "You did not provide any code in the replace tag. If you want to reject the instructions, use the reject function.",
          "completion_cost": 0.03111
        },
        {
          "action": {
            "content": "```json\n{\n  \"reject\": \"The provided context does not contain the function or code snippet needed to accurately modify the AssertionRewriter.visit_Assert method to handle decorator lines specifically. The context lacks the necessary helper functions and details to ensure decorators are not included in the error output.\"\n}\n```"
          },
          "output": null,
          "input_tokens": 8257,
          "output_tokens": 65,
          "retry_message": "You did not provide any code in the replace tag. If you want to reject the instructions, use the reject function.",
          "completion_cost": 0.025746
        },
        {
          "action": {
            "content": "```json\n{\n  \"replace\": \"\"\n}\n```"
          },
          "output": null,
          "input_tokens": 8353,
          "output_tokens": 14,
          "retry_message": "You did not provide any code in the replace tag. If you want to reject the instructions, use the reject function.",
          "completion_cost": 0.025269
        }
      ]
    }
  ],
  "initial_message": "Error message prints extra code line when using assert in python3.9\n<!--\r\nThanks for submitting an issue!\r\n\r\nQuick check-list while reporting bugs:\r\n-->\r\n\r\n- [x] a detailed description of the bug or problem you are having\r\n- [x] output of `pip list` from the virtual environment you are using\r\n- [x] pytest and operating system versions\r\n- [ ] minimal example if possible\r\n### Description\r\nI have a test like this:\r\n```\r\nfrom pytest import fixture\r\n\r\n\r\ndef t(foo):\r\n    return foo\r\n\r\n\r\n@fixture\r\ndef foo():\r\n    return 1\r\n\r\n\r\ndef test_right_statement(foo):\r\n    assert foo == (3 + 2) * (6 + 9)\r\n\r\n    @t\r\n    def inner():\r\n        return 2\r\n\r\n    assert 2 == inner\r\n\r\n\r\n@t\r\ndef outer():\r\n    return 2\r\n```\r\nThe test \"test_right_statement\" fails at the first assertion,but print extra code (the \"t\" decorator) in error details, like this:\r\n\r\n```\r\n ============================= test session starts =============================\r\nplatform win32 -- Python 3.9.6, pytest-6.2.5, py-1.10.0, pluggy-0.13.1 -- \r\ncachedir: .pytest_cache\r\nrootdir: \r\nplugins: allure-pytest-2.9.45\r\ncollecting ... collected 1 item\r\n\r\ntest_statement.py::test_right_statement FAILED                           [100%]\r\n\r\n================================== FAILURES ===================================\r\n____________________________ test_right_statement _____________________________\r\n\r\nfoo = 1\r\n\r\n    def test_right_statement(foo):\r\n>       assert foo == (3 + 2) * (6 + 9)\r\n    \r\n        @t\r\nE       assert 1 == 75\r\nE         +1\r\nE         -75\r\n\r\ntest_statement.py:14: AssertionError\r\n=========================== short test summary info ===========================\r\nFAILED test_statement.py::test_right_statement - assert 1 == 75\r\n============================== 1 failed in 0.12s ==============================\r\n```\r\nAnd the same thing **did not** happen when using python3.7.10\uff1a\r\n```\r\n============================= test session starts =============================\r\nplatform win32 -- Python 3.7.10, pytest-6.2.5, py-1.11.0, pluggy-1.0.0 -- \r\ncachedir: .pytest_cache\r\nrootdir: \r\ncollecting ... collected 1 item\r\n\r\ntest_statement.py::test_right_statement FAILED                           [100%]\r\n\r\n================================== FAILURES ===================================\r\n____________________________ test_right_statement _____________________________\r\n\r\nfoo = 1\r\n\r\n    def test_right_statement(foo):\r\n>       assert foo == (3 + 2) * (6 + 9)\r\nE       assert 1 == 75\r\nE         +1\r\nE         -75\r\n\r\ntest_statement.py:14: AssertionError\r\n=========================== short test summary info ===========================\r\nFAILED test_statement.py::test_right_statement - assert 1 == 75\r\n============================== 1 failed in 0.03s ==============================\r\n```\r\nIs there some problems when calculate the statement lineno?\r\n\r\n### pip list \r\n```\r\n$ pip list\r\nPackage            Version\r\n------------------ -------\r\natomicwrites       1.4.0\r\nattrs              21.2.0\r\ncolorama           0.4.4\r\nimportlib-metadata 4.8.2\r\niniconfig          1.1.1\r\npackaging          21.3\r\npip                21.3.1\r\npluggy             1.0.0\r\npy                 1.11.0\r\npyparsing          3.0.6\r\npytest             6.2.5\r\nsetuptools         59.4.0\r\ntoml               0.10.2\r\ntyping_extensions  4.0.0\r\nzipp               3.6.0\r\n\r\n```\r\n### pytest and operating system versions\r\npytest 6.2.5\r\nWindows 10 \r\nSeems to happen in python 3.9,not 3.7\r\n\n"
}