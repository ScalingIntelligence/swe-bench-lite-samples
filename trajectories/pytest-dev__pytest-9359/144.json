{
  "info": {
    "duration": 150.7358362674713,
    "submission": "",
    "total_cost": 0.161583,
    "instance_id": "pytest-dev__pytest-9359",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves extra code lines being printed in the error details when using the `assert` keyword in Python 3.9, specifically related to a `t` decorator. This behavior does not occur in Python 3.7. The problem may be related to how the assertion rewriting or traceback handling logic has changed between Python versions. To investigate, we should focus on the assertion rewriting and traceback handling code in pytest, especially where modifications between Python 3.7 and 3.9 might have introduced the issue.",
            "search_requests": [
              {
                "query": "assertion rewriting",
                "class_names": [
                  "AssertionRewriter"
                ],
                "code_snippet": null,
                "file_pattern": "**/assertion/**/*.py",
                "function_names": [
                  "visit_Assert"
                ]
              },
              {
                "query": "traceback handling",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/_pytest/**/*.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 879,
                "span_id": "AssertionRewriter.visit_Assert",
                "file_path": "src/_pytest/assertion/rewrite.py"
              },
              {
                "rank": 1,
                "tokens": 215,
                "span_id": "AssertionRewriter.visit_Call",
                "file_path": "src/_pytest/assertion/rewrite.py"
              },
              {
                "rank": 3,
                "tokens": 68,
                "span_id": "AssertionRewriter.visit_Starred",
                "file_path": "src/_pytest/assertion/rewrite.py"
              },
              {
                "rank": 3,
                "tokens": 109,
                "span_id": "AssertionRewriter.visit_Attribute",
                "file_path": "src/_pytest/assertion/rewrite.py"
              },
              {
                "rank": 4,
                "tokens": 128,
                "span_id": "AssertionRewriter.visit_Name",
                "file_path": "src/_pytest/assertion/rewrite.py"
              },
              {
                "rank": 5,
                "tokens": 74,
                "span_id": "AssertionRewriter.visit_UnaryOp",
                "file_path": "src/_pytest/assertion/rewrite.py"
              },
              {
                "rank": 5,
                "tokens": 103,
                "span_id": "AssertionRewriter.visit_BinOp",
                "file_path": "src/_pytest/assertion/rewrite.py"
              },
              {
                "rank": 6,
                "tokens": 339,
                "span_id": "AssertionRewriter.visit_BoolOp",
                "file_path": "src/_pytest/assertion/rewrite.py"
              },
              {
                "rank": 7,
                "tokens": 531,
                "span_id": "AssertionRewriter",
                "file_path": "src/_pytest/assertion/rewrite.py"
              },
              {
                "rank": 8,
                "tokens": 47,
                "span_id": "AssertionRewriter.builtin",
                "file_path": "src/_pytest/assertion/rewrite.py"
              },
              {
                "rank": 8,
                "tokens": 51,
                "span_id": "AssertionRewriter.assign",
                "file_path": "src/_pytest/assertion/rewrite.py"
              },
              {
                "rank": 8,
                "tokens": 28,
                "span_id": "AssertionRewriter.is_rewrite_disabled",
                "file_path": "src/_pytest/assertion/rewrite.py"
              },
              {
                "rank": 8,
                "tokens": 59,
                "span_id": "AssertionRewriter.helper",
                "file_path": "src/_pytest/assertion/rewrite.py"
              },
              {
                "rank": 0,
                "tokens": 303,
                "span_id": "imports",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 3,
                "tokens": 64,
                "span_id": "impl:6",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 3,
                "tokens": 274,
                "span_id": "getfslineno",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 4,
                "tokens": 127,
                "span_id": "TracebackEntry.__str__",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 4,
                "tokens": 24,
                "span_id": "TracebackEntry.name",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 1,
                "tokens": 8,
                "span_id": "ConftestImportFailure",
                "file_path": "src/_pytest/config/__init__.py"
              },
              {
                "rank": 1,
                "tokens": 94,
                "span_id": "filter_traceback_for_conftest_import_failure",
                "file_path": "src/_pytest/config/__init__.py"
              },
              {
                "rank": 1,
                "tokens": 41,
                "span_id": "ConftestImportFailure.__str__",
                "file_path": "src/_pytest/config/__init__.py"
              },
              {
                "rank": 2,
                "tokens": 107,
                "span_id": "FixtureRequest._factorytraceback",
                "file_path": "src/_pytest/fixtures.py"
              },
              {
                "rank": 5,
                "tokens": 239,
                "span_id": "TestCaseFunction._addexcinfo",
                "file_path": "src/_pytest/unittest.py"
              },
              {
                "rank": 6,
                "tokens": 34,
                "span_id": "PdbInvoke.pytest_internalerror",
                "file_path": "src/_pytest/debugging.py"
              },
              {
                "rank": 6,
                "tokens": 95,
                "span_id": "PdbInvoke.pytest_exception_interact",
                "file_path": "src/_pytest/debugging.py"
              },
              {
                "rank": 6,
                "tokens": 41,
                "span_id": "PdbTrace.pytest_pyfunc_call",
                "file_path": "src/_pytest/debugging.py"
              }
            ],
            "search_requests": [
              {
                "query": "assertion rewriting",
                "class_names": [
                  "AssertionRewriter"
                ],
                "code_snippet": null,
                "file_pattern": "**/assertion/**/*.py",
                "function_names": [
                  "visit_Assert"
                ]
              },
              {
                "query": "traceback handling",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/_pytest/**/*.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 4225,
          "output_tokens": 223,
          "retry_message": null,
          "completion_cost": 0.01602
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 879,
            "span_id": "AssertionRewriter.visit_Assert",
            "file_path": "src/_pytest/assertion/rewrite.py"
          },
          {
            "rank": 0,
            "tokens": 303,
            "span_id": "imports",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 1,
            "tokens": 215,
            "span_id": "AssertionRewriter.visit_Call",
            "file_path": "src/_pytest/assertion/rewrite.py"
          },
          {
            "rank": 1,
            "tokens": 8,
            "span_id": "ConftestImportFailure",
            "file_path": "src/_pytest/config/__init__.py"
          },
          {
            "rank": 1,
            "tokens": 94,
            "span_id": "filter_traceback_for_conftest_import_failure",
            "file_path": "src/_pytest/config/__init__.py"
          },
          {
            "rank": 1,
            "tokens": 41,
            "span_id": "ConftestImportFailure.__str__",
            "file_path": "src/_pytest/config/__init__.py"
          },
          {
            "rank": 2,
            "tokens": 107,
            "span_id": "FixtureRequest._factorytraceback",
            "file_path": "src/_pytest/fixtures.py"
          },
          {
            "rank": 3,
            "tokens": 68,
            "span_id": "AssertionRewriter.visit_Starred",
            "file_path": "src/_pytest/assertion/rewrite.py"
          },
          {
            "rank": 3,
            "tokens": 109,
            "span_id": "AssertionRewriter.visit_Attribute",
            "file_path": "src/_pytest/assertion/rewrite.py"
          },
          {
            "rank": 3,
            "tokens": 64,
            "span_id": "impl:6",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 3,
            "tokens": 274,
            "span_id": "getfslineno",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 4,
            "tokens": 128,
            "span_id": "AssertionRewriter.visit_Name",
            "file_path": "src/_pytest/assertion/rewrite.py"
          },
          {
            "rank": 4,
            "tokens": 127,
            "span_id": "TracebackEntry.__str__",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 4,
            "tokens": 24,
            "span_id": "TracebackEntry.name",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 5,
            "tokens": 74,
            "span_id": "AssertionRewriter.visit_UnaryOp",
            "file_path": "src/_pytest/assertion/rewrite.py"
          },
          {
            "rank": 5,
            "tokens": 103,
            "span_id": "AssertionRewriter.visit_BinOp",
            "file_path": "src/_pytest/assertion/rewrite.py"
          },
          {
            "rank": 5,
            "tokens": 239,
            "span_id": "TestCaseFunction._addexcinfo",
            "file_path": "src/_pytest/unittest.py"
          },
          {
            "rank": 6,
            "tokens": 339,
            "span_id": "AssertionRewriter.visit_BoolOp",
            "file_path": "src/_pytest/assertion/rewrite.py"
          },
          {
            "rank": 6,
            "tokens": 34,
            "span_id": "PdbInvoke.pytest_internalerror",
            "file_path": "src/_pytest/debugging.py"
          },
          {
            "rank": 6,
            "tokens": 95,
            "span_id": "PdbInvoke.pytest_exception_interact",
            "file_path": "src/_pytest/debugging.py"
          },
          {
            "rank": 6,
            "tokens": 41,
            "span_id": "PdbTrace.pytest_pyfunc_call",
            "file_path": "src/_pytest/debugging.py"
          },
          {
            "rank": 7,
            "tokens": 531,
            "span_id": "AssertionRewriter",
            "file_path": "src/_pytest/assertion/rewrite.py"
          },
          {
            "rank": 8,
            "tokens": 47,
            "span_id": "AssertionRewriter.builtin",
            "file_path": "src/_pytest/assertion/rewrite.py"
          },
          {
            "rank": 8,
            "tokens": 51,
            "span_id": "AssertionRewriter.assign",
            "file_path": "src/_pytest/assertion/rewrite.py"
          },
          {
            "rank": 8,
            "tokens": 28,
            "span_id": "AssertionRewriter.is_rewrite_disabled",
            "file_path": "src/_pytest/assertion/rewrite.py"
          },
          {
            "rank": 8,
            "tokens": 59,
            "span_id": "AssertionRewriter.helper",
            "file_path": "src/_pytest/assertion/rewrite.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The issue reported involves an error message during a pytest test that includes extra code lines when using Python 3.9, specifically related to the 'assert' statement. The extra code line is the 't' decorator, which is not included in the error message when using Python 3.7. This suggests an issue with how the assertion rewriting or error reporting handles the decorator in Python 3.9 compared to Python 3.7.\n\nGiven the description, a likely culprits is the assertion rewriting mechanism in pytest, which is responsible for enhancing the assert statements to provide better error messages. This is why the focus should be on the `AssertionRewriter` class in the `src/_pytest/assertion/rewrite.py` file, as this class is responsible for rewriting assert statements.\n\nRelevant spans in this file include `AssertionRewriter.__init__`, `AssertionRewriter.visit_Assert`, and `AssertionRewriter.visit_Name`. These methods are crucial as they initialize the rewriter, handle the rewriting of assert nodes in the AST, and visit Name nodes, which could be involved in processing the decorator name 't'. By identifying these spans as relevant, we can focus on understanding how the decorator is handled during assertion rewriting.\n\nAlso relevant is the `TracebackEntry` class in `src/_pytest/_code/code.py`, particularly `TracebackEntry.__str__` and `TracebackEntry.name` as these methods format the traceback details of an error, which might indicate where the extra line is getting included or formatted. Initial inspection does not indicate where in the code the line in question originates. We do not identify a checkpoint in the provided workflow / instructions.",
            "identified_spans": [
              {
                "span_ids": [
                  "AssertionRewriter.__init__",
                  "AssertionRewriter.visit_Assert",
                  "AssertionRewriter.visit_Name"
                ],
                "file_path": "src/_pytest/assertion/rewrite.py"
              },
              {
                "span_ids": [
                  "TracebackEntry.__str__",
                  "TracebackEntry.name"
                ],
                "file_path": "src/_pytest/_code/code.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 6198,
          "output_tokens": 498,
          "retry_message": null,
          "completion_cost": 0.026064
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context provided includes the relevant parts of `_pytest/assertion/rewrite.py` and `_pytest/_code/code.py`, which are likely to be involved in assertion rewriting and traceback handling. The issue described involves differences in behavior between Python 3.9 and Python 3.7 concerning extra code lines in error details during assertions. The relevant code in the file context for assertion rewriting and traceback formatting exists, suggesting that the file context is complete for identifying the relevant code areas. However, further testing and debugging within the context of Python 3.9 would be required to fully understand and resolve the issue.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 4523,
          "output_tokens": 168,
          "retry_message": null,
          "completion_cost": 0.016089000000000003
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "AssertionRewriter.visit_Assert",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "scratch_pad": "The issue involves an extra code line being printed during assertion failure in Python 3.9. This is likely due to a difference in how the AST is processed or how line numbers are calculated in Python 3.9 compared to 3.7. The relevant code spans are where the AssertionRewriter visits the Assert node and handles the line numbers and source code. The solution might involve adjusting how line numbers are handled or how the source context is fetched.",
            "instructions": "Fix the bug causing an extra code line to be printed during assertion error in Python 3.9 by ensuring that the calculated line number does not include lines that are part of a decorator. This should be done in the `visit_Assert` method of the `AssertionRewriter` class."
          },
          "output": {
            "span_id": "AssertionRewriter.visit_Assert",
            "file_path": "src/_pytest/assertion/rewrite.py",
            "instructions": "Fix the bug causing an extra code line to be printed during assertion error in Python 3.9 by ensuring that the calculated line number does not include lines that are part of a decorator. This should be done in the `visit_Assert` method of the `AssertionRewriter` class."
          },
          "input_tokens": 5948,
          "output_tokens": 215,
          "retry_message": null,
          "completion_cost": 0.021068999999999997
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "AssertionRewriter.visit_Assert",
        "end_line": null,
        "file_path": "src/_pytest/assertion/rewrite.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Fix the bug causing an extra code line to be printed during assertion error in Python 3.9 by ensuring that the calculated line number does not include lines that are part of a decorator. This should be done in the `visit_Assert` method of the `AssertionRewriter` class.\n\nThe lines that need to be modified are those that calculate the line number and handle the assertion error message. This involves ensuring that the line number does not include lines from decorators.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 924,
            "start_line": 880,
            "scratch_pad": "The lines that need to be modified are those that calculate the line number and handle the assertion error message. This involves ensuring that the line number does not include lines from decorators."
          },
          "output": {
            "span_id": "AssertionRewriter.visit_Assert",
            "end_line": 924,
            "file_path": "src/_pytest/assertion/rewrite.py",
            "start_line": 880,
            "instructions": "Fix the bug causing an extra code line to be printed during assertion error in Python 3.9 by ensuring that the calculated line number does not include lines that are part of a decorator. This should be done in the `visit_Assert` method of the `AssertionRewriter` class.\n\nThe lines that need to be modified are those that calculate the line number and handle the assertion error message. This involves ensuring that the line number does not include lines from decorators."
          },
          "input_tokens": 2139,
          "output_tokens": 82,
          "retry_message": null,
          "completion_cost": 0.007647
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "AssertionRewriter.visit_Assert",
        "end_line": 924,
        "file_path": "src/_pytest/assertion/rewrite.py",
        "max_tokens": 1000,
        "start_line": 880,
        "temperature": 1.6,
        "instructions": "Fix the bug causing an extra code line to be printed during assertion error in Python 3.9 by ensuring that the calculated line number does not include lines that are part of a decorator. This should be done in the `visit_Assert` method of the `AssertionRewriter` class.\n\nThe lines that need to be modified are those that calculate the line number and handle the assertion error message. This involves ensuring that the line number does not include lines from decorators.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```html\n<replace>\n        top_condition, explanation = self.visit(assert_.test)\n\n        negation = ast.UnaryOp(ast.Not(), top_condition)\n\n        if self.enable_assertion_pass_hook:  # Experimental pytest_assertion_pass hook\n            msg = self.pop_format_context(ast.Str(explanation))\n\n            # Failed\n            if assert_.msg:\n                assertmsg = self.helper(\"_format_assertmsg\", assert_.msg)\n                gluestr = \"\\n>assert \"\n            else:\n                assertmsg = ast.Str(\"\")\n                gluestr = \"assert \"\n            err_explanation = ast.BinOp(ast.Str(gluestr), ast.Add(), msg)\n            err_msg = ast.BinOp(assertmsg, ast.Add(), err_explanation)\n            err_name = ast.Name(\"AssertionError\", ast.Load())\n            fmt = self.helper(\"_format_explanation\", err_msg)\n            exc = ast.Call(err_name, [fmt], [])\n            raise_ = ast.Raise(exc, None)\n            statements_fail = []\n            statements_fail.extend(self.expl_stmts)\n            statements_fail.append(raise_)\n\n            # Passed\n            fmt_pass = self.helper(\"_format_explanation\", msg)\n            orig = _get_assertion_exprs(self.source)[assert_.lineno]\n            hook_call_pass = ast.Expr(\n                self.helper(\n                    \"_call_assertion_pass\",\n                    ast.Num(assert_.lineno),\n                    ast.Str(orig),\n                    fmt_pass,\n                )\n            )\n            # If any hooks implement assert_pass hook\n            hook_impl_test = ast.If(\n                self.helper(\"_check_if_assertion_pass_impl\"),\n                self.expl_stmts + [hook_call_pass],\n                [],\n            )\n            statements_pass = [hook_impl_test]\n\n            # Test for assertion condition\n            main_test = ast.If(negation, statements_fail, statements_pass)\n</replace>"
          },
          "output": null,
          "input_tokens": 7006,
          "output_tokens": 491,
          "retry_message": "The code in the replace tag is the same as in the search. Use the reject function if you can't do any changes and want to reject the instructions.",
          "completion_cost": 0.028383000000000002
        },
        {
          "action": {
            "content": "<reject>\nThe provided instructions require modifications to the calculation of line numbers to exclude lines that are part of a decorator. However, the provided code snippet does not contain any logic related to line number calculation. Thus, no changes can be made within this specific code snippet to address the issue described in the main task.\n</reject>"
          },
          "output": {
            "message": "\nThe provided instructions require modifications to the calculation of line numbers to exclude lines that are part of a decorator. However, the provided code snippet does not contain any logic related to line number calculation. Thus, no changes can be made within this specific code snippet to address the issue described in the main task.\n"
          },
          "input_tokens": 7537,
          "output_tokens": 68,
          "retry_message": null,
          "completion_cost": 0.023631
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "\nThe provided instructions require modifications to the calculation of line numbers to exclude lines that are part of a decorator. However, the provided code snippet does not contain any logic related to line number calculation. Thus, no changes can be made within this specific code snippet to address the issue described in the main task.\n",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "reject",
            "finish": null,
            "reject": "No logic for line number calculation is present in the provided `AssertionRewriter` class snippet to make the necessary modifications. The issue appears to stem from a deeper, possibly internal change in Python 3.9's handling of AST or line number calculation related to assertions and decorators.",
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The provided code snippet does not contain any logic related to line number calculation within the `AssertionRewriter` class. Given the issue description, it seems there is a discrepancy in how line numbers are handled in Python 3.9 versus 3.7, particularly when dealing with assertions and decorators. The absence of specific logic for line number calculation within the provided code snippet suggests that the calculation logic might be located elsewhere in the codebase or might be handled by Python's internal mechanisms in a way that the current code does not explicitly address.",
            "instructions": null
          },
          "output": {
            "message": "No logic for line number calculation is present in the provided `AssertionRewriter` class snippet to make the necessary modifications. The issue appears to stem from a deeper, possibly internal change in Python 3.9's handling of AST or line number calculation related to assertions and decorators."
          },
          "input_tokens": 6415,
          "output_tokens": 229,
          "retry_message": null,
          "completion_cost": 0.022680000000000002
        }
      ]
    },
    {
      "name": "Rejected",
      "state": {
        "model": "gpt-4o",
        "message": "No logic for line number calculation is present in the provided `AssertionRewriter` class snippet to make the necessary modifications. The issue appears to stem from a deeper, possibly internal change in Python 3.9's handling of AST or line number calculation related to assertions and decorators.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Error message prints extra code line when using assert in python3.9\n<!--\r\nThanks for submitting an issue!\r\n\r\nQuick check-list while reporting bugs:\r\n-->\r\n\r\n- [x] a detailed description of the bug or problem you are having\r\n- [x] output of `pip list` from the virtual environment you are using\r\n- [x] pytest and operating system versions\r\n- [ ] minimal example if possible\r\n### Description\r\nI have a test like this:\r\n```\r\nfrom pytest import fixture\r\n\r\n\r\ndef t(foo):\r\n    return foo\r\n\r\n\r\n@fixture\r\ndef foo():\r\n    return 1\r\n\r\n\r\ndef test_right_statement(foo):\r\n    assert foo == (3 + 2) * (6 + 9)\r\n\r\n    @t\r\n    def inner():\r\n        return 2\r\n\r\n    assert 2 == inner\r\n\r\n\r\n@t\r\ndef outer():\r\n    return 2\r\n```\r\nThe test \"test_right_statement\" fails at the first assertion,but print extra code (the \"t\" decorator) in error details, like this:\r\n\r\n```\r\n ============================= test session starts =============================\r\nplatform win32 -- Python 3.9.6, pytest-6.2.5, py-1.10.0, pluggy-0.13.1 -- \r\ncachedir: .pytest_cache\r\nrootdir: \r\nplugins: allure-pytest-2.9.45\r\ncollecting ... collected 1 item\r\n\r\ntest_statement.py::test_right_statement FAILED                           [100%]\r\n\r\n================================== FAILURES ===================================\r\n____________________________ test_right_statement _____________________________\r\n\r\nfoo = 1\r\n\r\n    def test_right_statement(foo):\r\n>       assert foo == (3 + 2) * (6 + 9)\r\n    \r\n        @t\r\nE       assert 1 == 75\r\nE         +1\r\nE         -75\r\n\r\ntest_statement.py:14: AssertionError\r\n=========================== short test summary info ===========================\r\nFAILED test_statement.py::test_right_statement - assert 1 == 75\r\n============================== 1 failed in 0.12s ==============================\r\n```\r\nAnd the same thing **did not** happen when using python3.7.10\uff1a\r\n```\r\n============================= test session starts =============================\r\nplatform win32 -- Python 3.7.10, pytest-6.2.5, py-1.11.0, pluggy-1.0.0 -- \r\ncachedir: .pytest_cache\r\nrootdir: \r\ncollecting ... collected 1 item\r\n\r\ntest_statement.py::test_right_statement FAILED                           [100%]\r\n\r\n================================== FAILURES ===================================\r\n____________________________ test_right_statement _____________________________\r\n\r\nfoo = 1\r\n\r\n    def test_right_statement(foo):\r\n>       assert foo == (3 + 2) * (6 + 9)\r\nE       assert 1 == 75\r\nE         +1\r\nE         -75\r\n\r\ntest_statement.py:14: AssertionError\r\n=========================== short test summary info ===========================\r\nFAILED test_statement.py::test_right_statement - assert 1 == 75\r\n============================== 1 failed in 0.03s ==============================\r\n```\r\nIs there some problems when calculate the statement lineno?\r\n\r\n### pip list \r\n```\r\n$ pip list\r\nPackage            Version\r\n------------------ -------\r\natomicwrites       1.4.0\r\nattrs              21.2.0\r\ncolorama           0.4.4\r\nimportlib-metadata 4.8.2\r\niniconfig          1.1.1\r\npackaging          21.3\r\npip                21.3.1\r\npluggy             1.0.0\r\npy                 1.11.0\r\npyparsing          3.0.6\r\npytest             6.2.5\r\nsetuptools         59.4.0\r\ntoml               0.10.2\r\ntyping_extensions  4.0.0\r\nzipp               3.6.0\r\n\r\n```\r\n### pytest and operating system versions\r\npytest 6.2.5\r\nWindows 10 \r\nSeems to happen in python 3.9,not 3.7\r\n\n"
}