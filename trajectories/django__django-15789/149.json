{
  "info": {
    "duration": 140.6116726398468,
    "submission": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..b3e25230b9 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,35 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+\n+    Args:\n+        value (Any): The Python object to be serialized to JSON.\n+        element_id (str, optional): The id attribute for the script tag.\n+        encoder (JSONEncoder, optional): A custom JSON encoder class to serialize the value.\n+\n+    Returns:\n+        str: A script tag containing the serialized JSON.\n+\n+    Example:\n+        To serialize a custom object with a custom JSON encoder:\n+        ```\n+        class CustomEncoder(json.JSONEncoder):\n+            def default(self, obj):\n+                if isinstance(obj, CustomType):\n+                    return obj.to_json()\n+                return super().default(obj)\n+\n+        json_script(custom_object, encoder=CustomEncoder)\n+        ```\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder if encoder else DjangoJSONEncoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\n",
    "total_cost": 0.07661399999999999,
    "instance_id": "django__django-15789",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue requests the ability to pass a custom JSON encoder to the `django.utils.html.json_script` function. Currently, it appears to use `DjangoJSONEncoder` by default. To address this, we need to locate the implementation of `json_script` and potentially related encoding functions. Additionally, the issue mentions documentation for `json_script`, which should be considered during the search.",
            "search_requests": [
              {
                "query": "json_script",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/django/utils/html.py",
                "function_names": [
                  "json_script"
                ]
              },
              {
                "query": "DjangoJSONEncoder",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/django/utils/**/*.py",
                "function_names": []
              },
              {
                "query": "json_script",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/docs/**/*.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 143,
                "span_id": "json_script",
                "file_path": "django/utils/html.py"
              },
              {
                "rank": 0,
                "tokens": 143,
                "span_id": "json_script",
                "file_path": "django/utils/html.py"
              },
              {
                "rank": 1,
                "tokens": 52,
                "span_id": "is_protected_type",
                "file_path": "django/utils/encoding.py"
              },
              {
                "rank": 1,
                "tokens": 31,
                "span_id": "impl",
                "file_path": "django/utils/encoding.py"
              },
              {
                "rank": 1,
                "tokens": 37,
                "span_id": "DjangoUnicodeDecodeError.__str__",
                "file_path": "django/utils/encoding.py"
              },
              {
                "rank": 1,
                "tokens": 21,
                "span_id": "imports",
                "file_path": "django/utils/encoding.py"
              },
              {
                "rank": 1,
                "tokens": 10,
                "span_id": "DjangoUnicodeDecodeError",
                "file_path": "django/utils/encoding.py"
              },
              {
                "rank": 1,
                "tokens": 95,
                "span_id": "smart_str",
                "file_path": "django/utils/encoding.py"
              },
              {
                "rank": 2,
                "tokens": 273,
                "span_id": "urlencode",
                "file_path": "django/utils/http.py"
              },
              {
                "rank": 3,
                "tokens": 55,
                "span_id": "capfirst",
                "file_path": "django/utils/text.py"
              },
              {
                "rank": 0,
                "tokens": 162,
                "span_id": "docstring",
                "file_path": "docs/_ext/djangodocs.py"
              },
              {
                "rank": 1,
                "tokens": 543,
                "span_id": "ConsoleDirective.run",
                "file_path": "docs/_ext/djangodocs.py"
              },
              {
                "rank": 4,
                "tokens": 184,
                "span_id": "DjangoStandaloneHTMLBuilder.finish",
                "file_path": "docs/_ext/djangodocs.py"
              },
              {
                "rank": 4,
                "tokens": 54,
                "span_id": "parse_django_admin_node",
                "file_path": "docs/_ext/djangodocs.py"
              },
              {
                "rank": 4,
                "tokens": 32,
                "span_id": "DjangoStandaloneHTMLBuilder",
                "file_path": "docs/_ext/djangodocs.py"
              },
              {
                "rank": 2,
                "tokens": 504,
                "span_id": "docstring:30",
                "file_path": "docs/conf.py"
              },
              {
                "rank": 2,
                "tokens": 491,
                "span_id": "docstring:52",
                "file_path": "docs/conf.py"
              },
              {
                "rank": 2,
                "tokens": 500,
                "span_id": "docstring:81",
                "file_path": "docs/conf.py"
              },
              {
                "rank": 3,
                "tokens": 806,
                "span_id": "docstring",
                "file_path": "docs/conf.py"
              }
            ],
            "search_requests": [
              {
                "query": "json_script",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/django/utils/html.py",
                "function_names": [
                  "json_script"
                ]
              },
              {
                "query": "DjangoJSONEncoder",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/django/utils/**/*.py",
                "function_names": []
              },
              {
                "query": "json_script",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/docs/**/*.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 2794,
          "output_tokens": 224,
          "retry_message": null,
          "completion_cost": 0.011742
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 143,
            "span_id": "json_script",
            "file_path": "django/utils/html.py"
          },
          {
            "rank": 0,
            "tokens": 143,
            "span_id": "json_script",
            "file_path": "django/utils/html.py"
          },
          {
            "rank": 0,
            "tokens": 162,
            "span_id": "docstring",
            "file_path": "docs/_ext/djangodocs.py"
          },
          {
            "rank": 1,
            "tokens": 52,
            "span_id": "is_protected_type",
            "file_path": "django/utils/encoding.py"
          },
          {
            "rank": 1,
            "tokens": 31,
            "span_id": "impl",
            "file_path": "django/utils/encoding.py"
          },
          {
            "rank": 1,
            "tokens": 37,
            "span_id": "DjangoUnicodeDecodeError.__str__",
            "file_path": "django/utils/encoding.py"
          },
          {
            "rank": 1,
            "tokens": 21,
            "span_id": "imports",
            "file_path": "django/utils/encoding.py"
          },
          {
            "rank": 1,
            "tokens": 10,
            "span_id": "DjangoUnicodeDecodeError",
            "file_path": "django/utils/encoding.py"
          },
          {
            "rank": 1,
            "tokens": 95,
            "span_id": "smart_str",
            "file_path": "django/utils/encoding.py"
          },
          {
            "rank": 1,
            "tokens": 543,
            "span_id": "ConsoleDirective.run",
            "file_path": "docs/_ext/djangodocs.py"
          },
          {
            "rank": 2,
            "tokens": 273,
            "span_id": "urlencode",
            "file_path": "django/utils/http.py"
          },
          {
            "rank": 2,
            "tokens": 504,
            "span_id": "docstring:30",
            "file_path": "docs/conf.py"
          },
          {
            "rank": 2,
            "tokens": 491,
            "span_id": "docstring:52",
            "file_path": "docs/conf.py"
          },
          {
            "rank": 2,
            "tokens": 500,
            "span_id": "docstring:81",
            "file_path": "docs/conf.py"
          },
          {
            "rank": 3,
            "tokens": 55,
            "span_id": "capfirst",
            "file_path": "django/utils/text.py"
          },
          {
            "rank": 3,
            "tokens": 806,
            "span_id": "docstring",
            "file_path": "docs/conf.py"
          },
          {
            "rank": 4,
            "tokens": 184,
            "span_id": "DjangoStandaloneHTMLBuilder.finish",
            "file_path": "docs/_ext/djangodocs.py"
          },
          {
            "rank": 4,
            "tokens": 54,
            "span_id": "parse_django_admin_node",
            "file_path": "docs/_ext/djangodocs.py"
          },
          {
            "rank": 4,
            "tokens": 32,
            "span_id": "DjangoStandaloneHTMLBuilder",
            "file_path": "docs/_ext/djangodocs.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue indicates a need to add an encoder parameter to `django.utils.html.json_script()` to allow for customization of JSON encoding. The relevant code span is found in `django/utils/html.py` within the `json_script` function where `DjangoJSONEncoder` is currently hardcoded. This is the primary area where the customization should be implemented. Additionally, considering the request to document `json_script`, the `docs/_ext/djangodocs.py` file might be relevant for adding documentation. However, for the immediate task of adding the encoder parameter, `django/utils/html.py` is the focus.",
            "identified_spans": [
              {
                "span_ids": [
                  "json_script"
                ],
                "file_path": "django/utils/html.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3891,
          "output_tokens": 205,
          "retry_message": null,
          "completion_cost": 0.014748
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context provided contains the implementation of `django.utils.html.json_script`. It clearly shows that the JSON encoder is hardcoded to `DjangoJSONEncoder`, which aligns with the reported issue. This indicates that the relevant code to address the issue is present in the provided file context. Additionally, the function `format_html` is also relevant as it works with the output of `json_script`.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 1285,
          "output_tokens": 125,
          "retry_message": null,
          "completion_cost": 0.00573
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "json_script",
            "file_path": "django/utils/html.py",
            "scratch_pad": "To address the issue, I need to modify the `json_script` function to accept an optional `encoder` parameter. This parameter will allow users to pass a custom JSON encoder class, overriding the default `DjangoJSONEncoder`.",
            "instructions": "Add an optional `encoder` parameter to the `json_script` function. Use this parameter in the `json.dumps` call, defaulting to `DjangoJSONEncoder` if no custom encoder is provided."
          },
          "output": {
            "span_id": "json_script",
            "end_line": 77,
            "file_path": "django/utils/html.py",
            "start_line": 62,
            "instructions": "Add an optional `encoder` parameter to the `json_script` function. Use this parameter in the `json.dumps` call, defaulting to `DjangoJSONEncoder` if no custom encoder is provided."
          },
          "input_tokens": 1624,
          "output_tokens": 150,
          "retry_message": null,
          "completion_cost": 0.007122000000000001
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "json_script",
        "end_line": 77,
        "file_path": "django/utils/html.py",
        "max_tokens": 1000,
        "start_line": 62,
        "temperature": 1.6,
        "instructions": "Add an optional `encoder` parameter to the `json_script` function. Use this parameter in the `json.dumps` call, defaulting to `DjangoJSONEncoder` if no custom encoder is provided.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```html\n<replace>\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \"\"\"\n    from django.core.serializers.json import DjangoJSONEncoder\n\n    json_str = json.dumps(value, cls=encoder if encoder else DjangoJSONEncoder).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n</replace>"
          },
          "output": {
            "diff": "--- django/utils/html.py\n+++ django/utils/html.py\n@@ -59,7 +59,7 @@\n }\n \n \n-def json_script(value, element_id=None):\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n@@ -67,7 +67,7 @@\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder if encoder else DjangoJSONEncoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\n",
            "message": "Applied the change to django/utils/html.py.\n\n<scratch_pad>\n```html\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 1661,
          "output_tokens": 214,
          "retry_message": null,
          "completion_cost": 0.008193
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- django/utils/html.py\n+++ django/utils/html.py\n@@ -59,7 +59,7 @@\n }\n \n \n-def json_script(value, element_id=None):\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n@@ -67,7 +67,7 @@\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder if encoder else DjangoJSONEncoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\n",
        "model": "deepseek-coder",
        "message": "Applied the change to django/utils/html.py.\n\n<scratch_pad>\n```html\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "json_script",
            "file_path": "django/utils/html.py",
            "scratch_pad": "The initial change to `json_script` to accept a custom encoder has been applied successfully. The next step is to document this function since it currently lacks documentation. This will ensure users are aware of this useful functionality and its parameters.",
            "instructions": "Add documentation for the `json_script` function, including the new `encoder` parameter. Clearly explain what the function does and how the `encoder` parameter can be used to customize JSON encoding."
          },
          "output": {
            "span_id": "json_script",
            "end_line": 77,
            "file_path": "django/utils/html.py",
            "start_line": 62,
            "instructions": "Add documentation for the `json_script` function, including the new `encoder` parameter. Clearly explain what the function does and how the `encoder` parameter can be used to customize JSON encoding."
          },
          "input_tokens": 2084,
          "output_tokens": 158,
          "retry_message": null,
          "completion_cost": 0.008622
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "json_script",
        "end_line": 77,
        "file_path": "django/utils/html.py",
        "max_tokens": 1000,
        "start_line": 62,
        "temperature": 1.6,
        "instructions": "Add documentation for the `json_script` function, including the new `encoder` parameter. Clearly explain what the function does and how the `encoder` parameter can be used to customize JSON encoding.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n\n    Args:\n        value (Any): The Python object to be serialized to JSON.\n        element_id (str, optional): The id attribute for the script tag.\n        encoder (JSONEncoder, optional): A custom JSON encoder class to serialize the value.\n\n    Returns:\n        str: A script tag containing the serialized JSON.\n\n    Example:\n        To serialize a custom object with a custom JSON encoder:\n        ```\n        class CustomEncoder(json.JSONEncoder):\n            def default(self, obj):\n                if isinstance(obj, CustomType):\n                    return obj.to_json()\n                return super().default(obj)\n\n        json_script(custom_object, encoder=CustomEncoder)\n        ```\n    \"\"\"\n    from django.core.serializers.json import DjangoJSONEncoder\n\n    json_str = json.dumps(value, cls=encoder if encoder else DjangoJSONEncoder).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n</replace>"
          },
          "output": {
            "diff": "--- django/utils/html.py\n+++ django/utils/html.py\n@@ -64,6 +64,26 @@\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+\n+    Args:\n+        value (Any): The Python object to be serialized to JSON.\n+        element_id (str, optional): The id attribute for the script tag.\n+        encoder (JSONEncoder, optional): A custom JSON encoder class to serialize the value.\n+\n+    Returns:\n+        str: A script tag containing the serialized JSON.\n+\n+    Example:\n+        To serialize a custom object with a custom JSON encoder:\n+        ```\n+        class CustomEncoder(json.JSONEncoder):\n+            def default(self, obj):\n+                if isinstance(obj, CustomType):\n+                    return obj.to_json()\n+                return super().default(obj)\n+\n+        json_script(custom_object, encoder=CustomEncoder)\n+        ```\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n \n",
            "message": "Applied the change to django/utils/html.py.",
            "verification_errors": []
          },
          "input_tokens": 1671,
          "output_tokens": 373,
          "retry_message": null,
          "completion_cost": 0.010608
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- django/utils/html.py\n+++ django/utils/html.py\n@@ -64,6 +64,26 @@\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+\n+    Args:\n+        value (Any): The Python object to be serialized to JSON.\n+        element_id (str, optional): The id attribute for the script tag.\n+        encoder (JSONEncoder, optional): A custom JSON encoder class to serialize the value.\n+\n+    Returns:\n+        str: A script tag containing the serialized JSON.\n+\n+    Example:\n+        To serialize a custom object with a custom JSON encoder:\n+        ```\n+        class CustomEncoder(json.JSONEncoder):\n+            def default(self, obj):\n+                if isinstance(obj, CustomType):\n+                    return obj.to_json()\n+                return super().default(obj)\n+\n+        json_script(custom_object, encoder=CustomEncoder)\n+        ```\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n \n",
        "model": "deepseek-coder",
        "message": "Applied the change to django/utils/html.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "All changes have been successfully applied, including the addition of the custom encoder parameter and the documentation for the `json_script` function.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The documentation for the `json_script` function has been updated successfully, adding clarity on how to use the `encoder` parameter. With both the functional change and the documentation now complete, the task of adding the encoder parameter and documenting the `json_script` function is fully implemented.",
            "instructions": null
          },
          "output": {
            "message": "All changes have been successfully applied, including the addition of the custom encoder parameter and the documentation for the `json_script` function."
          },
          "input_tokens": 2548,
          "output_tokens": 147,
          "retry_message": null,
          "completion_cost": 0.009849
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "All changes have been successfully applied, including the addition of the custom encoder parameter and the documentation for the `json_script` function.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Add an encoder parameter to django.utils.html.json_script().\nDescription\n\t\nI have a use case where I want to customize the JSON encoding of some values to output to the template layer. It looks like django.utils.html.json_script is a good utility for that, however the JSON encoder is hardcoded to DjangoJSONEncoder. I think it would be nice to be able to pass a custom encoder class.\nBy the way, django.utils.html.json_script is not documented (only its template filter counterpart is), would it be a good thing to add to the docs?\n"
}