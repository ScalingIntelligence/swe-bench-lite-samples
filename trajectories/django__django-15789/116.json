{
  "info": {
    "duration": 182.63599753379822,
    "submission": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..bfd6ce9e5b 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,17 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n+    if encoder is None:\n+        encoder = DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\ndiff --git a/docs/conf.py b/docs/conf.py\nindex 3e37509337..c1e948d79d 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -88,6 +88,21 @@ spelling_warning = True\n # Add any paths that contain templates here, relative to this directory.\n # templates_path = []\n \n+# Documentation for django.utils.html.json_script\n+json_script_doc = \"\"\"\n+    json_script(value, element_id=None, encoder=None)\n+    --------------------------------------------------\n+    Escape all the HTML/XML special characters with their unicode escapes, so\n+    value is safe to be output anywhere except for inside a tag attribute. Wrap\n+    the escaped JSON in a script tag.\n+\n+    :param value: The object to be serialized to JSON.\n+    :param element_id: The id attribute for the generated script tag.\n+    :param encoder: The JSON encoder class to use for serialization.\n+                    If None, DjangoJSONEncoder is used.\n+    :return: A safe string representing the JSON data wrapped in a script tag.\n+    \"\"\"\n+\n # The suffix of source filenames.\n source_suffix = \".txt\"\n \n",
    "total_cost": 0.12437100000000001,
    "instance_id": "django__django-15789",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue is requesting the ability to pass a custom JSON encoder to the `django.utils.html.json_script` function, which currently uses a hardcoded `DjangoJSONEncoder`. Additionally, there's an inquiry about whether this function should be documented, as it's only documented as a template filter counterpart. To address both concerns, we need to locate the `json_script` function and any related documentation or usage examples in the Django codebase. Furthermore, we should check if there are patterns or functions that allow for custom JSON encoders, as this might indicate how such a feature could be implemented.",
            "search_requests": [
              {
                "query": null,
                "class_names": [],
                "code_snippet": "def json_script(value, element_id=None):",
                "file_pattern": "**/django/utils/html.py",
                "function_names": []
              },
              {
                "query": "json_script",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/docs/**.py",
                "function_names": []
              },
              {
                "query": "custom JSON encoder",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/django/**.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 143,
                "span_id": "json_script",
                "file_path": "django/utils/html.py"
              },
              {
                "rank": 0,
                "tokens": 504,
                "span_id": "docstring:30",
                "file_path": "docs/conf.py"
              },
              {
                "rank": 0,
                "tokens": 491,
                "span_id": "docstring:52",
                "file_path": "docs/conf.py"
              },
              {
                "rank": 0,
                "tokens": 500,
                "span_id": "docstring:81",
                "file_path": "docs/conf.py"
              },
              {
                "rank": 1,
                "tokens": 502,
                "span_id": "impl:77",
                "file_path": "docs/conf.py"
              },
              {
                "rank": 1,
                "tokens": 606,
                "span_id": "impl:87",
                "file_path": "docs/conf.py"
              },
              {
                "rank": 3,
                "tokens": 806,
                "span_id": "docstring",
                "file_path": "docs/conf.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [],
                "code_snippet": "def json_script(value, element_id=None):",
                "file_pattern": "**/django/utils/html.py",
                "function_names": []
              },
              {
                "query": "json_script",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/docs/**.py",
                "function_names": []
              },
              {
                "query": "custom JSON encoder",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/django/**.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 2794,
          "output_tokens": 311,
          "retry_message": null,
          "completion_cost": 0.013047
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 143,
            "span_id": "json_script",
            "file_path": "django/utils/html.py"
          },
          {
            "rank": 0,
            "tokens": 504,
            "span_id": "docstring:30",
            "file_path": "docs/conf.py"
          },
          {
            "rank": 0,
            "tokens": 491,
            "span_id": "docstring:52",
            "file_path": "docs/conf.py"
          },
          {
            "rank": 0,
            "tokens": 500,
            "span_id": "docstring:81",
            "file_path": "docs/conf.py"
          },
          {
            "rank": 1,
            "tokens": 502,
            "span_id": "impl:77",
            "file_path": "docs/conf.py"
          },
          {
            "rank": 1,
            "tokens": 606,
            "span_id": "impl:87",
            "file_path": "docs/conf.py"
          },
          {
            "rank": 3,
            "tokens": 806,
            "span_id": "docstring",
            "file_path": "docs/conf.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue seeks to add an encoder parameter to django.utils.html.json_script() to allow for custom JSON encoding. The current implementation of json_script uses DjangoJSONEncoder by default. The search results show the relevant part of the code where DjangoJSONEncoder is explicitly used in the json_script function. This is exactly where a custom encoder could be introduced as a parameter. Additionally, the search results include a span from the documentation configuration file, which suggests that json_script might not be documented. This aligns with the ask to potentially add documentation for this function. Therefore, the identified code spans are directly related to the reported issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "json_script"
                ],
                "file_path": "django/utils/html.py"
              },
              {
                "span_ids": [
                  "docstring",
                  "docstring:30",
                  "docstring:52",
                  "docstring:81"
                ],
                "file_path": "docs/conf.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3149,
          "output_tokens": 263,
          "retry_message": null,
          "completion_cost": 0.013392000000000001
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context provided contains the `json_script` function from `django.utils.html`. This function currently uses `DjangoJSONEncoder` by default, which aligns with the issue's request to allow customization of the JSON encoder. Therefore, the code related to the issue is present. Additionally, the `docs/conf.py` file context suggests that documentation for Django is managed, but it does not directly provide information on whether `json_script` is documented. Given this, the file context appears to be complete for the issue related to the `json_script` function, but there might be a need to verify its documentation status within the broader documentation context.",
            "search_suggestions": "It might be beneficial to search within the broader documentation to confirm the status of `json_script` in the Django documentation."
          },
          "output": {},
          "input_tokens": 2721,
          "output_tokens": 201,
          "retry_message": null,
          "completion_cost": 0.011178
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "json_script",
            "file_path": "django/utils/html.py",
            "scratch_pad": "To address the issue, we need to modify the `json_script` function in `django/utils/html.py` to accept an optional `encoder` parameter. This parameter will allow users to pass a custom JSON encoder class. Additionally, we should update the documentation to include `json_script` in the list of utilities.",
            "instructions": "Add an optional `encoder` parameter to the `json_script` function in `django/utils/html.py` to allow users to pass a custom JSON encoder class."
          },
          "output": {
            "span_id": "json_script",
            "end_line": 77,
            "file_path": "django/utils/html.py",
            "start_line": 62,
            "instructions": "Add an optional `encoder` parameter to the `json_script` function in `django/utils/html.py` to allow users to pass a custom JSON encoder class."
          },
          "input_tokens": 3079,
          "output_tokens": 162,
          "retry_message": null,
          "completion_cost": 0.011667
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "json_script",
        "end_line": 77,
        "file_path": "django/utils/html.py",
        "max_tokens": 1000,
        "start_line": 62,
        "temperature": 1.6,
        "instructions": "Add an optional `encoder` parameter to the `json_script` function in `django/utils/html.py` to allow users to pass a custom JSON encoder class.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \"\"\"\n    from django.core.serializers.json import DjangoJSONEncoder\n    if encoder is None:\n        encoder = DjangoJSONEncoder\n\n    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n</replace>"
          },
          "output": {
            "diff": "--- django/utils/html.py\n+++ django/utils/html.py\n@@ -59,15 +59,17 @@\n }\n \n \n-def json_script(value, element_id=None):\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n-\n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    if encoder is None:\n+        encoder = DjangoJSONEncoder\n+\n+    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\n",
            "message": "Applied the change to django/utils/html.py.",
            "verification_errors": []
          },
          "input_tokens": 5225,
          "output_tokens": 219,
          "retry_message": null,
          "completion_cost": 0.01896
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- django/utils/html.py\n+++ django/utils/html.py\n@@ -59,15 +59,17 @@\n }\n \n \n-def json_script(value, element_id=None):\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n-\n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    if encoder is None:\n+        encoder = DjangoJSONEncoder\n+\n+    json_str = json.dumps(value, cls=encoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\n",
        "model": "deepseek-coder",
        "message": "Applied the change to django/utils/html.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "docstring",
            "file_path": "docs/conf.py",
            "scratch_pad": "With the `json_script` function updated to accept a custom encoder, the next step is to update the documentation to include a description of the `json_script` function and its new `encoder` parameter. This will ensure that users are aware of the utility's capabilities and how to use them effectively.",
            "instructions": "Update the documentation in `docs/conf.py` to include a description of the `json_script` function and its `encoder` parameter."
          },
          "output": {
            "span_id": "docstring",
            "file_path": "docs/conf.py",
            "instructions": "Update the documentation in `docs/conf.py` to include a description of the `json_script` function and its `encoder` parameter."
          },
          "input_tokens": 3554,
          "output_tokens": 161,
          "retry_message": null,
          "completion_cost": 0.013077
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "docstring",
        "end_line": null,
        "file_path": "docs/conf.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Update the documentation in `docs/conf.py` to include a description of the `json_script` function and its `encoder` parameter.\n\nThe documentation update needs to be added in the file `docs/conf.py`. The existing content does not currently include any reference or description of the `json_script` function or its `encoder` parameter. Therefore, the update should be placed in the main body of the document, likely under a new section or sub-section which should be created for this purpose. Since the exact location and formatting of this new section is not specified, it is assumed that lining up the new documentation content with the existing documentation formats in style and structure is appropriate. This update implies the addition of new lines for the new documentation content. Line 80 is chosen as the starting point for this update after the existing content. The end line is determined by the space taken up by the new documentation content, which is initially estimated to span about 10 lines.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 89,
            "start_line": 80,
            "scratch_pad": "The documentation update needs to be added in the file `docs/conf.py`. The existing content does not currently include any reference or description of the `json_script` function or its `encoder` parameter. Therefore, the update should be placed in the main body of the document, likely under a new section or sub-section which should be created for this purpose. Since the exact location and formatting of this new section is not specified, it is assumed that lining up the new documentation content with the existing documentation formats in style and structure is appropriate. This update implies the addition of new lines for the new documentation content. Line 80 is chosen as the starting point for this update after the existing content. The end line is determined by the space taken up by the new documentation content, which is initially estimated to span about 10 lines."
          },
          "output": {
            "span_id": "docstring",
            "end_line": 89,
            "file_path": "docs/conf.py",
            "start_line": 80,
            "instructions": "Update the documentation in `docs/conf.py` to include a description of the `json_script` function and its `encoder` parameter.\n\nThe documentation update needs to be added in the file `docs/conf.py`. The existing content does not currently include any reference or description of the `json_script` function or its `encoder` parameter. Therefore, the update should be placed in the main body of the document, likely under a new section or sub-section which should be created for this purpose. Since the exact location and formatting of this new section is not specified, it is assumed that lining up the new documentation content with the existing documentation formats in style and structure is appropriate. This update implies the addition of new lines for the new documentation content. Line 80 is chosen as the starting point for this update after the existing content. The end line is determined by the space taken up by the new documentation content, which is initially estimated to span about 10 lines."
          },
          "input_tokens": 1632,
          "output_tokens": 208,
          "retry_message": null,
          "completion_cost": 0.008016
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "docstring",
        "end_line": 89,
        "file_path": "docs/conf.py",
        "max_tokens": 1000,
        "start_line": 80,
        "temperature": 1.6,
        "instructions": "Update the documentation in `docs/conf.py` to include a description of the `json_script` function and its `encoder` parameter.\n\nThe documentation update needs to be added in the file `docs/conf.py`. The existing content does not currently include any reference or description of the `json_script` function or its `encoder` parameter. Therefore, the update should be placed in the main body of the document, likely under a new section or sub-section which should be created for this purpose. Since the exact location and formatting of this new section is not specified, it is assumed that lining up the new documentation content with the existing documentation formats in style and structure is appropriate. This update implies the addition of new lines for the new documentation content. Line 80 is chosen as the starting point for this update after the existing content. The end line is determined by the space taken up by the new documentation content, which is initially estimated to span about 10 lines.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```\n<replace>\n# Spelling language.\nspelling_lang = \"en_US\"\n\n# Location of word list.\nspelling_word_list_filename = \"spelling_wordlist\"\n\nspelling_warning = True\n\n# Add any paths that contain templates here, relative to this directory.\n# templates_path = []\n\n# Documentation for django.utils.html.json_script\njson_script_doc = \"\"\"\n    json_script(value, element_id=None, encoder=None)\n    --------------------------------------------------\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n\n    :param value: The object to be serialized to JSON.\n    :param element_id: The id attribute for the generated script tag.\n    :param encoder: The JSON encoder class to use for serialization.\n                    If None, DjangoJSONEncoder is used.\n    :return: A safe string representing the JSON data wrapped in a script tag.\n    \"\"\"\n</replace>"
          },
          "output": {
            "diff": "--- docs/conf.py\n+++ docs/conf.py\n@@ -88,6 +88,21 @@\n # Add any paths that contain templates here, relative to this directory.\n # templates_path = []\n \n+# Documentation for django.utils.html.json_script\n+json_script_doc = \"\"\"\n+    json_script(value, element_id=None, encoder=None)\n+    --------------------------------------------------\n+    Escape all the HTML/XML special characters with their unicode escapes, so\n+    value is safe to be output anywhere except for inside a tag attribute. Wrap\n+    the escaped JSON in a script tag.\n+\n+    :param value: The object to be serialized to JSON.\n+    :param element_id: The id attribute for the generated script tag.\n+    :param encoder: The JSON encoder class to use for serialization.\n+                    If None, DjangoJSONEncoder is used.\n+    :return: A safe string representing the JSON data wrapped in a script tag.\n+    \"\"\"\n+\n # The suffix of source filenames.\n source_suffix = \".txt\"\n \n",
            "message": "Applied the change to docs/conf.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 5283,
          "output_tokens": 248,
          "retry_message": null,
          "completion_cost": 0.019569000000000003
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- docs/conf.py\n+++ docs/conf.py\n@@ -88,6 +88,21 @@\n # Add any paths that contain templates here, relative to this directory.\n # templates_path = []\n \n+# Documentation for django.utils.html.json_script\n+json_script_doc = \"\"\"\n+    json_script(value, element_id=None, encoder=None)\n+    --------------------------------------------------\n+    Escape all the HTML/XML special characters with their unicode escapes, so\n+    value is safe to be output anywhere except for inside a tag attribute. Wrap\n+    the escaped JSON in a script tag.\n+\n+    :param value: The object to be serialized to JSON.\n+    :param element_id: The id attribute for the generated script tag.\n+    :param encoder: The JSON encoder class to use for serialization.\n+                    If None, DjangoJSONEncoder is used.\n+    :return: A safe string representing the JSON data wrapped in a script tag.\n+    \"\"\"\n+\n # The suffix of source filenames.\n source_suffix = \".txt\"\n \n",
        "model": "deepseek-coder",
        "message": "Applied the change to docs/conf.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "Finish the request because the `json_script` function now accepts a custom encoder parameter, and this feature has been documented. All necessary changes have been made.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The changes to `json_script` have been successfully applied, and the documentation has been updated to reflect the new `encoder` parameter. The task of adding an encoder parameter and documenting it has been fully implemented.",
            "instructions": null
          },
          "output": {
            "message": "Finish the request because the `json_script` function now accepts a custom encoder parameter, and this feature has been documented. All necessary changes have been made."
          },
          "input_tokens": 4470,
          "output_tokens": 137,
          "retry_message": null,
          "completion_cost": 0.015465
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "Finish the request because the `json_script` function now accepts a custom encoder parameter, and this feature has been documented. All necessary changes have been made.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Add an encoder parameter to django.utils.html.json_script().\nDescription\n\t\nI have a use case where I want to customize the JSON encoding of some values to output to the template layer. It looks like django.utils.html.json_script is a good utility for that, however the JSON encoder is hardcoded to DjangoJSONEncoder. I think it would be nice to be able to pass a custom encoder class.\nBy the way, django.utils.html.json_script is not documented (only its template filter counterpart is), would it be a good thing to add to the docs?\n"
}