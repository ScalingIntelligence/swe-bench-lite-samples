{
  "info": {
    "duration": 136.57077360153198,
    "submission": "diff --git a/django/utils/html.py b/django/utils/html.py\nindex d0bc97be80..455bb9861b 100644\n--- a/django/utils/html.py\n+++ b/django/utils/html.py\n@@ -59,15 +59,20 @@ _json_script_escapes = {\n }\n \n \n-def json_script(value, element_id=None):\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+\n+    :param value: The JSON-serializable object to be included in the script tag.\n+    :param element_id: The ID attribute for the script tag. If None, no ID will be added.\n+    :param encoder: A custom JSON encoder class to use for serialization. If None, DjangoJSONEncoder will be used.\n+    :return: A safe string containing the script tag with the JSON data.\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder if encoder else DjangoJSONEncoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\n",
    "total_cost": 0.07542,
    "instance_id": "django__django-15789",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue is about customizing JSON encoding in django.utils.html.json_script(). Currently, DjangoJSONEncoder is hardcoded, and the user wants to pass a custom encoder class. Additionally, the user suggests documenting this function, as it's not currently documented. Searching for the json_script function implementation in the given file context should lead to the relevant part of the codebase.",
            "search_requests": [
              {
                "query": "json_script custom encoder",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/html.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 143,
                "span_id": "json_script",
                "file_path": "django/utils/html.py"
              },
              {
                "rank": 1,
                "tokens": 161,
                "span_id": "impl",
                "file_path": "django/utils/html.py"
              },
              {
                "rank": 1,
                "tokens": 34,
                "span_id": "escapejs",
                "file_path": "django/utils/html.py"
              },
              {
                "rank": 1,
                "tokens": 83,
                "span_id": "escape",
                "file_path": "django/utils/html.py"
              },
              {
                "rank": 1,
                "tokens": 113,
                "span_id": "docstring",
                "file_path": "django/utils/html.py"
              },
              {
                "rank": 1,
                "tokens": 34,
                "span_id": "impl:4",
                "file_path": "django/utils/html.py"
              },
              {
                "rank": 2,
                "tokens": 103,
                "span_id": "format_html",
                "file_path": "django/utils/html.py"
              },
              {
                "rank": 2,
                "tokens": 85,
                "span_id": "conditional_escape",
                "file_path": "django/utils/html.py"
              },
              {
                "rank": 3,
                "tokens": 12,
                "span_id": "MLStripper.get_data",
                "file_path": "django/utils/html.py"
              },
              {
                "rank": 3,
                "tokens": 13,
                "span_id": "MLStripper.handle_data",
                "file_path": "django/utils/html.py"
              },
              {
                "rank": 3,
                "tokens": 19,
                "span_id": "MLStripper.handle_entityref",
                "file_path": "django/utils/html.py"
              },
              {
                "rank": 3,
                "tokens": 20,
                "span_id": "MLStripper.handle_charref",
                "file_path": "django/utils/html.py"
              },
              {
                "rank": 3,
                "tokens": 37,
                "span_id": "_strip_once",
                "file_path": "django/utils/html.py"
              },
              {
                "rank": 3,
                "tokens": 8,
                "span_id": "MLStripper",
                "file_path": "django/utils/html.py"
              },
              {
                "rank": 4,
                "tokens": 42,
                "span_id": "avoid_wrapping",
                "file_path": "django/utils/html.py"
              },
              {
                "rank": 4,
                "tokens": 6,
                "span_id": "impl:6",
                "file_path": "django/utils/html.py"
              },
              {
                "rank": 4,
                "tokens": 52,
                "span_id": "urlize",
                "file_path": "django/utils/html.py"
              },
              {
                "rank": 5,
                "tokens": 157,
                "span_id": "html_safe",
                "file_path": "django/utils/html.py"
              },
              {
                "rank": 6,
                "tokens": 37,
                "span_id": "strip_spaces_between_tags",
                "file_path": "django/utils/html.py"
              },
              {
                "rank": 6,
                "tokens": 105,
                "span_id": "strip_tags",
                "file_path": "django/utils/html.py"
              },
              {
                "rank": 7,
                "tokens": 116,
                "span_id": "linebreaks",
                "file_path": "django/utils/html.py"
              },
              {
                "rank": 8,
                "tokens": 244,
                "span_id": "Urlizer",
                "file_path": "django/utils/html.py"
              },
              {
                "rank": 9,
                "tokens": 154,
                "span_id": "format_html_join",
                "file_path": "django/utils/html.py"
              },
              {
                "rank": 10,
                "tokens": 170,
                "span_id": "Urlizer.__call__",
                "file_path": "django/utils/html.py"
              },
              {
                "rank": 11,
                "tokens": 351,
                "span_id": "Urlizer.handle_word",
                "file_path": "django/utils/html.py"
              },
              {
                "rank": 12,
                "tokens": 39,
                "span_id": "Urlizer.trim_url",
                "file_path": "django/utils/html.py"
              }
            ],
            "search_requests": [
              {
                "query": "json_script custom encoder",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/html.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 2794,
          "output_tokens": 144,
          "retry_message": null,
          "completion_cost": 0.010542000000000001
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 143,
            "span_id": "json_script",
            "file_path": "django/utils/html.py"
          },
          {
            "rank": 1,
            "tokens": 161,
            "span_id": "impl",
            "file_path": "django/utils/html.py"
          },
          {
            "rank": 1,
            "tokens": 34,
            "span_id": "escapejs",
            "file_path": "django/utils/html.py"
          },
          {
            "rank": 1,
            "tokens": 83,
            "span_id": "escape",
            "file_path": "django/utils/html.py"
          },
          {
            "rank": 1,
            "tokens": 113,
            "span_id": "docstring",
            "file_path": "django/utils/html.py"
          },
          {
            "rank": 1,
            "tokens": 34,
            "span_id": "impl:4",
            "file_path": "django/utils/html.py"
          },
          {
            "rank": 2,
            "tokens": 103,
            "span_id": "format_html",
            "file_path": "django/utils/html.py"
          },
          {
            "rank": 2,
            "tokens": 85,
            "span_id": "conditional_escape",
            "file_path": "django/utils/html.py"
          },
          {
            "rank": 3,
            "tokens": 12,
            "span_id": "MLStripper.get_data",
            "file_path": "django/utils/html.py"
          },
          {
            "rank": 3,
            "tokens": 13,
            "span_id": "MLStripper.handle_data",
            "file_path": "django/utils/html.py"
          },
          {
            "rank": 3,
            "tokens": 19,
            "span_id": "MLStripper.handle_entityref",
            "file_path": "django/utils/html.py"
          },
          {
            "rank": 3,
            "tokens": 20,
            "span_id": "MLStripper.handle_charref",
            "file_path": "django/utils/html.py"
          },
          {
            "rank": 3,
            "tokens": 37,
            "span_id": "_strip_once",
            "file_path": "django/utils/html.py"
          },
          {
            "rank": 3,
            "tokens": 8,
            "span_id": "MLStripper",
            "file_path": "django/utils/html.py"
          },
          {
            "rank": 4,
            "tokens": 42,
            "span_id": "avoid_wrapping",
            "file_path": "django/utils/html.py"
          },
          {
            "rank": 4,
            "tokens": 6,
            "span_id": "impl:6",
            "file_path": "django/utils/html.py"
          },
          {
            "rank": 4,
            "tokens": 52,
            "span_id": "urlize",
            "file_path": "django/utils/html.py"
          },
          {
            "rank": 5,
            "tokens": 157,
            "span_id": "html_safe",
            "file_path": "django/utils/html.py"
          },
          {
            "rank": 6,
            "tokens": 37,
            "span_id": "strip_spaces_between_tags",
            "file_path": "django/utils/html.py"
          },
          {
            "rank": 6,
            "tokens": 105,
            "span_id": "strip_tags",
            "file_path": "django/utils/html.py"
          },
          {
            "rank": 7,
            "tokens": 116,
            "span_id": "linebreaks",
            "file_path": "django/utils/html.py"
          },
          {
            "rank": 8,
            "tokens": 244,
            "span_id": "Urlizer",
            "file_path": "django/utils/html.py"
          },
          {
            "rank": 9,
            "tokens": 154,
            "span_id": "format_html_join",
            "file_path": "django/utils/html.py"
          },
          {
            "rank": 10,
            "tokens": 170,
            "span_id": "Urlizer.__call__",
            "file_path": "django/utils/html.py"
          },
          {
            "rank": 11,
            "tokens": 351,
            "span_id": "Urlizer.handle_word",
            "file_path": "django/utils/html.py"
          },
          {
            "rank": 12,
            "tokens": 39,
            "span_id": "Urlizer.trim_url",
            "file_path": "django/utils/html.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue requires the addition of an 'encoder' parameter to the `django.utils.html.json_script` function to allow custom JSON encoding. The function `json_script` currently uses `DjangoJSONEncoder` by default. Analyzing the provided code, the relevant code spans are within the `json_script` function definition, which currently hardcodes the `DjangoJSONEncoder`. To address the issue, the function signature should be modified to accept an `encoder` parameter, and this parameter should be used in the `json.dumps` call instead of hardcoding `DjangoJSONEncoder`. This modification would allow users to pass a custom JSON encoder as needed. Additionally, since `json_script` is mentioned to be undocumented, this should also be considered for documentation updates in the future. The identified code span includes the entire `json_script` function, which is the relevant part needing modification to introduce the new 'encoder' parameter.",
            "identified_spans": [
              {
                "span_ids": [
                  "json_script"
                ],
                "file_path": "django/utils/html.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4031,
          "output_tokens": 263,
          "retry_message": null,
          "completion_cost": 0.016038
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The relevant code for the issue is found in the file context. The json_script function is located in the django/utils/html.py file and currently uses DjangoJSONEncoder for JSON encoding as described in the reported issue. This confirms that the relevant part of the codebase is identified and the task can be marked as complete.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 1282,
          "output_tokens": 106,
          "retry_message": null,
          "completion_cost": 0.005436
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "json_script",
            "file_path": "django/utils/html.py",
            "scratch_pad": "To address the issue, we need to modify the `json_script` function to accept an optional `encoder` parameter. This parameter will be used to specify a custom JSONEncoder class. If not provided, it will default to DjangoJSONEncoder for backward compatibility.",
            "instructions": "Add an optional 'encoder' parameter to the `json_script` function. If provided, use this encoder for JSON serialization. Otherwise, fall back to DjangoJSONEncoder."
          },
          "output": {
            "span_id": "json_script",
            "end_line": 77,
            "file_path": "django/utils/html.py",
            "start_line": 62,
            "instructions": "Add an optional 'encoder' parameter to the `json_script` function. If provided, use this encoder for JSON serialization. Otherwise, fall back to DjangoJSONEncoder."
          },
          "input_tokens": 1624,
          "output_tokens": 159,
          "retry_message": null,
          "completion_cost": 0.007257
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "json_script",
        "end_line": 77,
        "file_path": "django/utils/html.py",
        "max_tokens": 1000,
        "start_line": 62,
        "temperature": 1.6,
        "instructions": "Add an optional 'encoder' parameter to the `json_script` function. If provided, use this encoder for JSON serialization. Otherwise, fall back to DjangoJSONEncoder.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n    \"\"\"\n    from django.core.serializers.json import DjangoJSONEncoder\n\n    json_str = json.dumps(value, cls=encoder if encoder else DjangoJSONEncoder).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n</replace>"
          },
          "output": {
            "diff": "--- django/utils/html.py\n+++ django/utils/html.py\n@@ -59,7 +59,7 @@\n }\n \n \n-def json_script(value, element_id=None):\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n@@ -67,7 +67,7 @@\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder if encoder else DjangoJSONEncoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\n",
            "message": "Applied the change to django/utils/html.py.",
            "verification_errors": []
          },
          "input_tokens": 1652,
          "output_tokens": 211,
          "retry_message": null,
          "completion_cost": 0.008121
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- django/utils/html.py\n+++ django/utils/html.py\n@@ -59,7 +59,7 @@\n }\n \n \n-def json_script(value, element_id=None):\n+def json_script(value, element_id=None, encoder=None):\n     \"\"\"\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n@@ -67,7 +67,7 @@\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n \n-    json_str = json.dumps(value, cls=DjangoJSONEncoder).translate(_json_script_escapes)\n+    json_str = json.dumps(value, cls=encoder if encoder else DjangoJSONEncoder).translate(_json_script_escapes)\n     if element_id:\n         template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n         args = (element_id, mark_safe(json_str))\n",
        "model": "deepseek-coder",
        "message": "Applied the change to django/utils/html.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "json_script",
            "file_path": "django/utils/html.py",
            "scratch_pad": "The initial change to add the 'encoder' parameter to the `json_script` function was successfully applied. The next step is to ensure that this new parameter and its usage are properly documented. Since the function is currently undocumented and only its template filter counterpart is, it is indeed necessary to add documentation for `json_script`.",
            "instructions": "Document the `json_script` function, including the new 'encoder' parameter in the docstring. Describe what the function does and how the 'encoder' parameter can be used for custom JSON encoding."
          },
          "output": {
            "span_id": "json_script",
            "end_line": 77,
            "file_path": "django/utils/html.py",
            "start_line": 62,
            "instructions": "Document the `json_script` function, including the new 'encoder' parameter in the docstring. Describe what the function does and how the 'encoder' parameter can be used for custom JSON encoding."
          },
          "input_tokens": 2064,
          "output_tokens": 179,
          "retry_message": null,
          "completion_cost": 0.008877
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "json_script",
        "end_line": 77,
        "file_path": "django/utils/html.py",
        "max_tokens": 1000,
        "start_line": 62,
        "temperature": 1.6,
        "instructions": "Document the `json_script` function, including the new 'encoder' parameter in the docstring. Describe what the function does and how the 'encoder' parameter can be used for custom JSON encoding.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\ndef json_script(value, element_id=None, encoder=None):\n    \"\"\"\n    Escape all the HTML/XML special characters with their unicode escapes, so\n    value is safe to be output anywhere except for inside a tag attribute. Wrap\n    the escaped JSON in a script tag.\n\n    :param value: The JSON-serializable object to be included in the script tag.\n    :param element_id: The ID attribute for the script tag. If None, no ID will be added.\n    :param encoder: A custom JSON encoder class to use for serialization. If None, DjangoJSONEncoder will be used.\n    :return: A safe string containing the script tag with the JSON data.\n    \"\"\"\n    from django.core.serializers.json import DjangoJSONEncoder\n\n    json_str = json.dumps(value, cls=encoder if encoder else DjangoJSONEncoder).translate(_json_script_escapes)\n    if element_id:\n        template = '<script id=\"{}\" type=\"application/json\">{}</script>'\n        args = (element_id, mark_safe(json_str))\n    else:\n        template = '<script type=\"application/json\">{}</script>'\n        args = (mark_safe(json_str),)\n    return format_html(template, *args)\n</replace>"
          },
          "output": {
            "diff": "--- django/utils/html.py\n+++ django/utils/html.py\n@@ -64,6 +64,11 @@\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+\n+    :param value: The JSON-serializable object to be included in the script tag.\n+    :param element_id: The ID attribute for the script tag. If None, no ID will be added.\n+    :param encoder: A custom JSON encoder class to use for serialization. If None, DjangoJSONEncoder will be used.\n+    :return: A safe string containing the script tag with the JSON data.\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n \n",
            "message": "Applied the change to django/utils/html.py.",
            "verification_errors": []
          },
          "input_tokens": 1672,
          "output_tokens": 300,
          "retry_message": null,
          "completion_cost": 0.009516
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- django/utils/html.py\n+++ django/utils/html.py\n@@ -64,6 +64,11 @@\n     Escape all the HTML/XML special characters with their unicode escapes, so\n     value is safe to be output anywhere except for inside a tag attribute. Wrap\n     the escaped JSON in a script tag.\n+\n+    :param value: The JSON-serializable object to be included in the script tag.\n+    :param element_id: The ID attribute for the script tag. If None, no ID will be added.\n+    :param encoder: A custom JSON encoder class to use for serialization. If None, DjangoJSONEncoder will be used.\n+    :return: A safe string containing the script tag with the JSON data.\n     \"\"\"\n     from django.core.serializers.json import DjangoJSONEncoder\n \n",
        "model": "deepseek-coder",
        "message": "Applied the change to django/utils/html.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue of adding an encoder parameter to `json_script` and documenting it has been fully addressed. The function now allows for custom JSON encoding, and the changes are properly documented in the function's docstring.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The documentation for the `json_script` function has been updated to include the new 'encoder' parameter. This completes the task as specified, providing the necessary flexibility for custom JSON encoding and ensuring clarity through proper documentation.",
            "instructions": null
          },
          "output": {
            "message": "The issue of adding an encoder parameter to `json_script` and documenting it has been fully addressed. The function now allows for custom JSON encoding, and the changes are properly documented in the function's docstring."
          },
          "input_tokens": 2461,
          "output_tokens": 150,
          "retry_message": null,
          "completion_cost": 0.009633
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue of adding an encoder parameter to `json_script` and documenting it has been fully addressed. The function now allows for custom JSON encoding, and the changes are properly documented in the function's docstring.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Add an encoder parameter to django.utils.html.json_script().\nDescription\n\t\nI have a use case where I want to customize the JSON encoding of some values to output to the template layer. It looks like django.utils.html.json_script is a good utility for that, however the JSON encoder is hardcoded to DjangoJSONEncoder. I think it would be nice to be able to pass a custom encoder class.\nBy the way, django.utils.html.json_script is not documented (only its template filter counterpart is), would it be a good thing to add to the docs?\n"
}