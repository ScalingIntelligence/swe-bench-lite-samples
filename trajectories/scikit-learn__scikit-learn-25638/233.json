{
  "info": {
    "duration": 231.5169403553009,
    "submission": "",
    "total_cost": 0.125277,
    "instance_id": "scikit-learn__scikit-learn-25638",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue describes a problem with sklearn's `unique_labels` function when nullable pandas dtypes are passed in. The function fails because the dtypes become `object` dtype when converted to numpy arrays, causing a `ValueError`. The goal is to ensure `unique_labels` can handle nullable pandas dtypes without throwing an error. Relevant files and functions to investigate are `sklearn/utils/multiclass.py` (specifically `unique_labels` and `_unique_indicator`), `sklearn/utils/validation.py` (especially `check_array` and `check_X_y` which handle array validation), and `sklearn/metrics/_classification.py` (`_check_targets` which is likely to involve dtype checking).",
            "search_requests": [
              {
                "query": "unique_labels function and nullable pandas dtypes",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sklearn/utils/multiclass.py",
                "function_names": [
                  "unique_labels",
                  "_unique_indicator"
                ]
              },
              {
                "query": "array validation with nullable pandas dtypes",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sklearn/utils/validation.py",
                "function_names": [
                  "check_array",
                  "check_X_y"
                ]
              },
              {
                "query": "dtype checking in classification metrics",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sklearn/metrics/_classification.py",
                "function_names": [
                  "_check_targets"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 39,
                "span_id": "_unique_indicator",
                "file_path": "sklearn/utils/multiclass.py"
              },
              {
                "rank": 1,
                "tokens": 609,
                "span_id": "unique_labels",
                "file_path": "sklearn/utils/multiclass.py"
              },
              {
                "rank": 0,
                "tokens": 1210,
                "span_id": "check_X_y",
                "file_path": "sklearn/utils/validation.py"
              },
              {
                "rank": 1,
                "tokens": 2767,
                "span_id": "check_array",
                "file_path": "sklearn/utils/validation.py"
              },
              {
                "rank": 0,
                "tokens": 630,
                "span_id": "_check_targets",
                "file_path": "sklearn/metrics/_classification.py"
              }
            ],
            "search_requests": [
              {
                "query": "unique_labels function and nullable pandas dtypes",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sklearn/utils/multiclass.py",
                "function_names": [
                  "unique_labels",
                  "_unique_indicator"
                ]
              },
              {
                "query": "array validation with nullable pandas dtypes",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sklearn/utils/validation.py",
                "function_names": [
                  "check_array",
                  "check_X_y"
                ]
              },
              {
                "query": "dtype checking in classification metrics",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sklearn/metrics/_classification.py",
                "function_names": [
                  "_check_targets"
                ]
              }
            ]
          },
          "input_tokens": 3980,
          "output_tokens": 352,
          "retry_message": null,
          "completion_cost": 0.01722
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 39,
            "span_id": "_unique_indicator",
            "file_path": "sklearn/utils/multiclass.py"
          },
          {
            "rank": 0,
            "tokens": 1210,
            "span_id": "check_X_y",
            "file_path": "sklearn/utils/validation.py"
          },
          {
            "rank": 0,
            "tokens": 630,
            "span_id": "_check_targets",
            "file_path": "sklearn/metrics/_classification.py"
          },
          {
            "rank": 1,
            "tokens": 609,
            "span_id": "unique_labels",
            "file_path": "sklearn/utils/multiclass.py"
          },
          {
            "rank": 1,
            "tokens": 2767,
            "span_id": "check_array",
            "file_path": "sklearn/utils/validation.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves supporting nullable pandas dtypes ('Int64', 'Float64', 'boolean') in the `unique_labels` function of scikit-learn. When these dtypes are converted to numpy arrays, they become 'object' dtype, leading to a `ValueError` due to mixed types. The proposed solution is to ensure that passing these dtypes behaves the same way as when using 'int64', 'float64', and 'bool' dtypes, without raising an error.\n\nReviewing the search results, the most relevant code spans are found in the `unique_labels` function within `sklearn/utils/multiclass.py`. This function is responsible for processing input arrays and determining the types of labels, raising the error in question when it encounters mixed types. Understanding this function is crucial for addressing the issue, as the solution would likely involve modifying this function to handle nullable pandas dtypes appropriately.\n\nOther functions such as `check_array` in `sklearn/utils/validation.py` and `_check_targets` in `sklearn/metrics/_classification.py` are also reviewed to ensure a comprehensive understanding of how input arrays are processed and validated before reaching the `unique_labels` function. However, the primary focus for addressing the issue is on modifying `unique_labels` to support the nullable pandas dtypes.\n\nGiven the detailed analysis of the reported issue and the search results, the identified code spans directly relate to the problem statement and should serve as the basis for developing a solution.",
            "identified_spans": [
              {
                "span_ids": [
                  "unique_labels"
                ],
                "file_path": "sklearn/utils/multiclass.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4008,
          "output_tokens": 392,
          "retry_message": null,
          "completion_cost": 0.017904
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The provided file context includes the relevant function `unique_labels` in `sklearn/utils/multiclass.py`. It directly addresses the issue by handling different types of `y` inputs and checking their compatibility. The function raises a `ValueError` when mixed types are detected, which matches the error description in the issue. This indicates that the part of the code responsible for the type checking and the error raising is present in the context. However, the specific logic to handle nullable pandas dtypes directly (e.g., 'Int64', 'Float64', 'boolean') is not shown, but it is implied that modifications would be made around the existing type-checking mechanism. Thus, while the key function and its type-checking component are provided, the exact addition to support nullable dtypes is not detailed. This suggests that while the core component is found, additional context or code may be required to fully address the issue.",
            "search_suggestions": "Explore the conversion process of pandas nullable dtypes to numpy arrays within the context of `unique_labels` and its related functions to ensure full support and compatibility."
          },
          "output": {
            "message": "Explore the conversion process of pandas nullable dtypes to numpy arrays within the context of `unique_labels` and its related functions to ensure full support and compatibility."
          },
          "input_tokens": 2131,
          "output_tokens": 261,
          "retry_message": null,
          "completion_cost": 0.010308000000000001
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Explore the conversion process of pandas nullable dtypes to numpy arrays within the context of `unique_labels` and its related functions to ensure full support and compatibility.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The given context highlights the `unique_labels` function in `sklearn/utils/multiclass.py`, which is central to the issue regarding nullable pandas dtypes. This function is responsible for ensuring that the target labels are consistent across different types (binary, multiclass, multilabel) and throws errors when the types are mixed or if the label input types (e.g., strings and numbers) are mixed. Given the specific issue, the focus should now shift to how pandas nullable dtypes are handled or converted when passed to this function to ensure they do not lead to type inconsistencies or errors. Relevant functions like `check_array` should be examined to see how they handle potential dtype conversions from pandas to numpy.",
            "search_requests": [
              {
                "query": "conversion of pandas nullable dtypes to numpy arrays",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sklearn/utils/validation.py",
                "function_names": [
                  "check_array",
                  "check_X_y"
                ]
              },
              {
                "query": "integration of nullable pandas dtypes in unique_labels function",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sklearn/utils/multiclass.py",
                "function_names": [
                  "unique_labels"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 2767,
                "span_id": "check_array",
                "file_path": "sklearn/utils/validation.py"
              },
              {
                "rank": 2,
                "tokens": 1210,
                "span_id": "check_X_y",
                "file_path": "sklearn/utils/validation.py"
              },
              {
                "rank": 0,
                "tokens": 609,
                "span_id": "unique_labels",
                "file_path": "sklearn/utils/multiclass.py"
              }
            ],
            "search_requests": [
              {
                "query": "conversion of pandas nullable dtypes to numpy arrays",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sklearn/utils/validation.py",
                "function_names": [
                  "check_array",
                  "check_X_y"
                ]
              },
              {
                "query": "integration of nullable pandas dtypes in unique_labels function",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sklearn/utils/multiclass.py",
                "function_names": [
                  "unique_labels"
                ]
              }
            ]
          },
          "input_tokens": 5106,
          "output_tokens": 340,
          "retry_message": null,
          "completion_cost": 0.020418
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 2767,
            "span_id": "check_array",
            "file_path": "sklearn/utils/validation.py"
          },
          {
            "rank": 0,
            "tokens": 609,
            "span_id": "unique_labels",
            "file_path": "sklearn/utils/multiclass.py"
          },
          {
            "rank": 2,
            "tokens": 1210,
            "span_id": "check_X_y",
            "file_path": "sklearn/utils/validation.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue concerns supporting nullable pandas dtypes in the `unique_labels` function of sklearn. The primary concern is that when nullable dtypes are converted to numpy arrays, they become `object` dtype, leading to a `ValueError` due to mixed types. To address this, we need to analyze the `unique_labels` function and related code spans to determine how to handle these nullable dtypes more gracefully.\n\nThe `unique_labels` function already exists in the `sklearn/utils/multiclass.py` file, as identified in the file context. This function checks the types of the inputs and raises an error if there is a mix of types. The new search results confirm the presence of this function in the same file, which is crucial for addressing the issue. Additionally, the `check_array` function from `sklearn/utils/validation.py` is relevant as it processes arrays, potentially handling the conversion of pandas nullable dtypes to numpy arrays.\n\nConsidering the issue, it's evident that the current logic in `unique_labels` does not account for the conversion of nullable pandas dtypes to `object` dtype. The proposed solution involves ensuring that the function behaves consistently with both nullable pandas dtypes and their non-nullable counterparts. To implement this, we might need to adjust how types are checked and how the conversion to numpy arrays is handled. The `check_array` function could be instrumental in handling the dtype conversions more precisely.\n\nGiven the existing code and the need to support nullable dtypes, the identified code spans are relevant and should be considered for modifications to address the reported issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "unique_labels"
                ],
                "file_path": "sklearn/utils/multiclass.py"
              },
              {
                "span_ids": [
                  "check_array"
                ],
                "file_path": "sklearn/utils/validation.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4512,
          "output_tokens": 449,
          "retry_message": null,
          "completion_cost": 0.020271
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The provided context includes the `unique_labels` function in `sklearn/utils/multiclass.py`, which is directly related to the issue of handling nullable pandas dtypes. The function is designed to handle label types and throw errors for mixed types, which is the core issue described. Additionally, the `check_array` function in `sklearn/utils/validation.py` is present, which manages array conversion and dtype checks. This function is crucial as it determines how pandas dtypes (including nullable ones) are converted to numpy arrays. Given this context, all relevant parts of the codebase necessary for understanding and potentially implementing a solution to the reported issue are identified.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 4482,
          "output_tokens": 177,
          "retry_message": null,
          "completion_cost": 0.016101
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "unique_labels",
            "file_path": "sklearn/utils/multiclass.py",
            "scratch_pad": "The issue relates to supporting nullable pandas dtypes in `unique_labels`. The current implementation raises a `ValueError` when mixed types are detected, such as a combination of 'binary' and 'unknown'. The proposed solution is to ensure the same behavior as when using non-nullable dtypes like `int64`, `float64`, and `bool`. To achieve this, we need to modify the `unique_labels` function to handle these nullable dtypes without raising errors.",
            "instructions": "Update the `unique_labels` function to handle nullable pandas dtypes ('Int64', 'Float64', 'boolean') similar to their non-nullable counterparts. Specifically, ensure that these dtypes do not cause a `ValueError` when they are mixed with other types."
          },
          "output": {
            "span_id": "unique_labels",
            "file_path": "sklearn/utils/multiclass.py",
            "instructions": "Update the `unique_labels` function to handle nullable pandas dtypes ('Int64', 'Float64', 'boolean') similar to their non-nullable counterparts. Specifically, ensure that these dtypes do not cause a `ValueError` when they are mixed with other types."
          },
          "input_tokens": 4628,
          "output_tokens": 215,
          "retry_message": null,
          "completion_cost": 0.017109
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "unique_labels",
        "end_line": null,
        "file_path": "sklearn/utils/multiclass.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Update the `unique_labels` function to handle nullable pandas dtypes ('Int64', 'Float64', 'boolean') similar to their non-nullable counterparts. Specifically, ensure that these dtypes do not cause a `ValueError` when they are mixed with other types.\n\nThe function `unique_labels` needs to be updated to handle nullable pandas dtypes ('Int64', 'Float64', 'boolean') without raising a ValueError when mixed with other types. This involves ensuring that the type checking logic recognizes these nullable dtypes as compatible with their non-nullable counterparts.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 119,
            "start_line": 76,
            "scratch_pad": "The function `unique_labels` needs to be updated to handle nullable pandas dtypes ('Int64', 'Float64', 'boolean') without raising a ValueError when mixed with other types. This involves ensuring that the type checking logic recognizes these nullable dtypes as compatible with their non-nullable counterparts."
          },
          "output": {
            "span_id": "unique_labels",
            "end_line": 119,
            "file_path": "sklearn/utils/multiclass.py",
            "start_line": 76,
            "instructions": "Update the `unique_labels` function to handle nullable pandas dtypes ('Int64', 'Float64', 'boolean') similar to their non-nullable counterparts. Specifically, ensure that these dtypes do not cause a `ValueError` when they are mixed with other types.\n\nThe function `unique_labels` needs to be updated to handle nullable pandas dtypes ('Int64', 'Float64', 'boolean') without raising a ValueError when mixed with other types. This involves ensuring that the type checking logic recognizes these nullable dtypes as compatible with their non-nullable counterparts."
          },
          "input_tokens": 1482,
          "output_tokens": 100,
          "retry_message": null,
          "completion_cost": 0.005946
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "unique_labels",
        "end_line": 119,
        "file_path": "sklearn/utils/multiclass.py",
        "max_tokens": 1000,
        "start_line": 76,
        "temperature": 1.6,
        "instructions": "Update the `unique_labels` function to handle nullable pandas dtypes ('Int64', 'Float64', 'boolean') similar to their non-nullable counterparts. Specifically, ensure that these dtypes do not cause a `ValueError` when they are mixed with other types.\n\nThe function `unique_labels` needs to be updated to handle nullable pandas dtypes ('Int64', 'Float64', 'boolean') without raising a ValueError when mixed with other types. This involves ensuring that the type checking logic recognizes these nullable dtypes as compatible with their non-nullable counterparts.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```json\n{\n  \"replace\": \"    xp, is_array_api = get_namespace(*ys)\\n    if not ys:\\n        raise ValueError(\\\"No argument has been passed.\\\")\\n    # Check that we don't mix label format\\n\\n    ys_types = set(type_of_target(x) for x in ys)\\n    if ys_types == {\\\"binary\\\", \\\"multiclass\\\"}:\\n        ys_types = {\\\"multiclass\\\"}\\n\\n    # Handle nullable pandas dtypes\\n    nullable_dtypes = {\\\"Int64\\\", \\\"Float64\\\", \\\"boolean\\\"}\\n    if any(dtype in nullable_dtypes for dtype in ys_types):\\n        ys_types = {\\\"multiclass\\\" if t in nullable_dtypes else t for t in ys_types}\\n\\n    if len(ys_types) > 1:\\n        raise ValueError(\\\"Mix type of y not allowed, got types %s\\\" % ys_types)\\n\\n    label_type = ys_types.pop()\\n\\n    # Check consistency for the indicator format\\n    if (\\n        label_type == \\\"multilabel-indicator\\\"\\n        and len(\\n            set(\\n                check_array(y, accept_sparse=[\\\"csr\\\", \\\"csc\\\", \\\"coo\\\"]).shape[1] for y in ys\\n            )\\n        ) > 1\\n    ):\\n        raise ValueError(\\n            \\\"Multi-label binary indicator input with different numbers of labels\\\"\\n        )\\n\\n    # Get the unique set of labels\\n    _unique_labels = _FN_UNIQUE_LABELS.get(label_type, None)\\n    if not _unique_labels:\\n        raise ValueError(\\\"Unknown label type: %s\\\" % repr(ys))\\n\\n    if is_array_api:\\n        # array_api does not allow for mixed dtypes\\n        unique_ys = xp.concat([_unique_labels(y) for y in ys])\\n        return xp.unique_values(unique_ys)\\n\\n    ys_labels = set(chain.from_iterable((i for i in _unique_labels(y)) for y in ys))\\n    # Check that we don't mix string type with number type\\n    if len(set(isinstance(label, str) for label in ys_labels)) > 1:\\n        raise ValueError(\\\"Mix of label input types (string and number)\\\")\\n\\n    return xp.asarray(sorted(ys_labels))\"\n}\n```"
          },
          "output": null,
          "input_tokens": 6395,
          "output_tokens": 604,
          "retry_message": "You did not provide any code in the replace tag. If you want to reject the instructions, use the reject function.",
          "completion_cost": 0.028245
        },
        {
          "action": {
            "content": "```json\n{\n  \"reject\": \"The task requires extensive changes to the type checking logic of the `unique_labels` function to handle nullable pandas dtypes, which are not explicitly supported by the function's current design. Integrating these changes without breaking existing functionality or restructuring the function significantly is beyond the scope of the provided guidelines.\"\n}\n```"
          },
          "output": null,
          "input_tokens": 7030,
          "output_tokens": 74,
          "retry_message": "You did not provide any code in the replace tag. If you want to reject the instructions, use the reject function.",
          "completion_cost": 0.0222
        },
        {
          "action": {
            "content": "```json\n{\n  \"reject\": \"The provided context does not include information about the function `type_of_target` or how it determines the type of the target data. Without understanding how `type_of_target` categorizes the input data, including nullable pandas dtypes ('Int64', 'Float64', 'boolean'), it is impossible to accurately modify the `unique_labels` function to handle these types.\"\n}\n```"
          },
          "output": null,
          "input_tokens": 7135,
          "output_tokens": 94,
          "retry_message": "You did not provide any code in the replace tag. If you want to reject the instructions, use the reject function.",
          "completion_cost": 0.022815000000000002
        }
      ]
    }
  ],
  "initial_message": "Support nullable pandas dtypes in `unique_labels`\n### Describe the workflow you want to enable\n\nI would like to be able to pass the nullable pandas dtypes (\"Int64\", \"Float64\", \"boolean\") into sklearn's `unique_labels` function. Because the dtypes become `object` dtype when converted to numpy arrays we get `ValueError: Mix type of y not allowed, got types {'binary', 'unknown'}`:\r\n\r\nRepro with sklearn 1.2.1\r\n```py \r\n    import pandas as pd\r\n    import pytest\r\n    from sklearn.utils.multiclass import unique_labels\r\n    \r\n    for dtype in [\"Int64\", \"Float64\", \"boolean\"]:\r\n        y_true = pd.Series([1, 0, 0, 1, 0, 1, 1, 0, 1], dtype=dtype)\r\n        y_predicted = pd.Series([0, 0, 1, 1, 0, 1, 1, 1, 1], dtype=\"int64\")\r\n\r\n        with pytest.raises(ValueError, match=\"Mix type of y not allowed, got types\"):\r\n            unique_labels(y_true, y_predicted)\r\n```\n\n### Describe your proposed solution\n\nWe should get the same behavior as when `int64`, `float64`, and `bool` dtypes are used, which is no error:  \r\n\r\n```python\r\n    import pandas as pd\r\n    from sklearn.utils.multiclass import unique_labels\r\n    \r\n    for dtype in [\"int64\", \"float64\", \"bool\"]:\r\n        y_true = pd.Series([1, 0, 0, 1, 0, 1, 1, 0, 1], dtype=dtype)\r\n        y_predicted = pd.Series([0, 0, 1, 1, 0, 1, 1, 1, 1], dtype=\"int64\")\r\n\r\n        unique_labels(y_true, y_predicted)\r\n```\n\n### Describe alternatives you've considered, if relevant\n\nOur current workaround is to convert the data to numpy arrays with the corresponding dtype that works prior to passing it into `unique_labels`.\n\n### Additional context\n\n_No response_\n"
}