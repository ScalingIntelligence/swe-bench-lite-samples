{
  "info": {
    "duration": 198.42840886116028,
    "submission": "diff --git a/sklearn/utils/multiclass.py b/sklearn/utils/multiclass.py\nindex 5eaef2fde..fb778d6f7 100644\n--- a/sklearn/utils/multiclass.py\n+++ b/sklearn/utils/multiclass.py\n@@ -42,6 +42,7 @@ _FN_UNIQUE_LABELS = {\n \n \n def unique_labels(*ys):\n+    import pandas as pd\n     \"\"\"Extract an ordered array of unique labels.\n \n     We don't allow:\n@@ -111,7 +112,17 @@ def unique_labels(*ys):\n         unique_ys = xp.concat([_unique_labels(y) for y in ys])\n         return xp.unique_values(unique_ys)\n \n-    ys_labels = set(chain.from_iterable((i for i in _unique_labels(y)) for y in ys))\n+    def convert_nullable_to_standard(y):\n+        if isinstance(y, pd.Series):\n+            if y.dtype == 'Int64':\n+                return y.astype('int64').values\n+            elif y.dtype == 'Float64':\n+                return y.astype('float64').values\n+            elif y.dtype == 'boolean':\n+                return y.astype('bool').values\n+        return y\n+\n+    ys_labels = set(chain.from_iterable((i for i in _unique_labels(convert_nullable_to_standard(y))) for y in ys))\n     # Check that we don't mix string type with number type\n     if len(set(isinstance(label, str) for label in ys_labels)) > 1:\n         raise ValueError(\"Mix of label input types (string and number)\")\n",
    "total_cost": 0.13739099999999999,
    "instance_id": "scikit-learn__scikit-learn-25638",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves supporting nullable pandas dtypes in the `unique_labels` function of scikit-learn. This requires examining how `unique_labels` handles different data types, particularly focusing on how it processes pandas Series with nullable dtypes ('Int64', 'Float64', 'boolean') and the conversions to numpy arrays that occur. The primary goal is to identify and ensure that `unique_labels` can handle these nullable dtypes without raising errors and behaves similarly to when standard dtypes ('int64', 'float64', 'bool') are used. Given the error encountered ('ValueError: Mix type of y not allowed, got types {'binary', 'unknown'}'), the investigation should cover the internal type checking and conversion logic within the `unique_labels` function and possibly related functions such as `_is_integral_float`, `type_of_target`, and `_check_y`.",
            "search_requests": [
              {
                "query": "unique_labels function handling nullable pandas dtypes",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sklearn/utils/multiclass.py",
                "function_names": [
                  "unique_labels"
                ]
              },
              {
                "query": "validation of pandas Series with nullable dtypes",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sklearn/utils/validation.py",
                "function_names": [
                  "_check_y"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sklearn/utils/multiclass.py",
                "function_names": [
                  "_is_integral_float",
                  "type_of_target"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 609,
                "span_id": "unique_labels",
                "file_path": "sklearn/utils/multiclass.py"
              },
              {
                "rank": 0,
                "tokens": 150,
                "span_id": "_check_y",
                "file_path": "sklearn/utils/validation.py"
              },
              {
                "rank": 0,
                "tokens": 25,
                "span_id": "_is_integral_float",
                "file_path": "sklearn/utils/multiclass.py"
              },
              {
                "rank": 0,
                "tokens": 1490,
                "span_id": "type_of_target",
                "file_path": "sklearn/utils/multiclass.py"
              }
            ],
            "search_requests": [
              {
                "query": "unique_labels function handling nullable pandas dtypes",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sklearn/utils/multiclass.py",
                "function_names": [
                  "unique_labels"
                ]
              },
              {
                "query": "validation of pandas Series with nullable dtypes",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sklearn/utils/validation.py",
                "function_names": [
                  "_check_y"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sklearn/utils/multiclass.py",
                "function_names": [
                  "_is_integral_float",
                  "type_of_target"
                ]
              }
            ]
          },
          "input_tokens": 3980,
          "output_tokens": 370,
          "retry_message": null,
          "completion_cost": 0.017490000000000002
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 609,
            "span_id": "unique_labels",
            "file_path": "sklearn/utils/multiclass.py"
          },
          {
            "rank": 0,
            "tokens": 150,
            "span_id": "_check_y",
            "file_path": "sklearn/utils/validation.py"
          },
          {
            "rank": 0,
            "tokens": 25,
            "span_id": "_is_integral_float",
            "file_path": "sklearn/utils/multiclass.py"
          },
          {
            "rank": 0,
            "tokens": 1490,
            "span_id": "type_of_target",
            "file_path": "sklearn/utils/multiclass.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves supporting nullable pandas dtypes in sklearn's `unique_labels` function. The nullable dtypes in pandas, such as 'Int64', 'Float64', and 'boolean', become 'object' dtype when converted to numpy arrays, leading to a `ValueError`. The objective is to handle these dtypes in a manner similar to their non-nullable counterparts ('int64', 'float64', 'bool'). The relevant functions to examine are `unique_labels`, `type_of_target`, and potentially `check_classification_targets` as they deal with label types and their integrity. The current implementation of `unique_labels` raises the `ValueError` when it detects a mix of types, which aligns with the issue described. To address this, modifications might be needed in the type detection and processing within these functions to accommodate the nullable dtypes without converting them to `object` and thus avoiding the type mix error. Specifically, looking at the `unique_labels` function, we see that it aggregates the types of labels and checks for a mix, which is where the error occurs. Additionally, the `type_of_target` function is critical for accurately determining the type of target passed, which is essential for avoiding type mix errors.",
            "identified_spans": [
              {
                "span_ids": [
                  "unique_labels",
                  "type_of_target",
                  "check_classification_targets"
                ],
                "file_path": "sklearn/utils/multiclass.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4615,
          "output_tokens": 349,
          "retry_message": null,
          "completion_cost": 0.01908
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context provided contains the implementation of the `unique_labels` function, which is central to the reported issue. This function is responsible for handling different types of labels, including determining if the input is of a mix of types, which is the core concern of the issue. The function checks for the type of target and raises errors for mixed types, suggesting that this is the point where the modification to support nullable pandas dtypes is needed. The file context includes the logic used to determine the type of labels, such as 'binary' or 'multiclass', and raises errors if there is a mix of types. This is directly related to the issue of handling nullable pandas dtypes that convert to 'object' dtype when converted to numpy arrays, leading to the 'Mix type of y not allowed' error. The context also includes the `check_classification_targets` and `type_of_target` functions, which are relevant for understanding how different label types are managed and converted to numpy arrays. Given this information, it is clear where the adjustment should occur to enable support for nullable pandas dtypes without causing type mix errors. The task can be considered complete in terms of identifying the relevant code areas for modification.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 3087,
          "output_tokens": 284,
          "retry_message": null,
          "completion_cost": 0.013521
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "unique_labels",
            "file_path": "sklearn/utils/multiclass.py",
            "scratch_pad": "The current `unique_labels` function does not support nullable pandas dtypes, which results in a `ValueError` when these types are used. To resolve this, we need to handle the conversion of these dtypes to a common compatible type when they are passed to `unique_labels`.",
            "instructions": "Update the `unique_labels` function to handle nullable pandas dtypes ('Int64', 'Float64', 'boolean') by converting them to their standard numpy equivalents ('int64', 'float64', 'bool') before processing."
          },
          "output": {
            "span_id": "unique_labels",
            "file_path": "sklearn/utils/multiclass.py",
            "instructions": "Update the `unique_labels` function to handle nullable pandas dtypes ('Int64', 'Float64', 'boolean') by converting them to their standard numpy equivalents ('int64', 'float64', 'bool') before processing."
          },
          "input_tokens": 3208,
          "output_tokens": 170,
          "retry_message": null,
          "completion_cost": 0.012174
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "unique_labels",
        "end_line": null,
        "file_path": "sklearn/utils/multiclass.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Update the `unique_labels` function to handle nullable pandas dtypes ('Int64', 'Float64', 'boolean') by converting them to their standard numpy equivalents ('int64', 'float64', 'bool') before processing.\n\nThe function should handle nullable pandas dtypes by converting them to standard numpy equivalents before processing. This conversion should happen within the unique_labels function, where the input ys are processed. The relevant lines to modify are those where the input ys are iterated and processed to extract labels, which is done in lines 105 to 119.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 119,
            "start_line": 105,
            "scratch_pad": "The function should handle nullable pandas dtypes by converting them to standard numpy equivalents before processing. This conversion should happen within the unique_labels function, where the input ys are processed. The relevant lines to modify are those where the input ys are iterated and processed to extract labels, which is done in lines 105 to 119."
          },
          "output": {
            "span_id": "unique_labels",
            "end_line": 119,
            "file_path": "sklearn/utils/multiclass.py",
            "start_line": 105,
            "instructions": "Update the `unique_labels` function to handle nullable pandas dtypes ('Int64', 'Float64', 'boolean') by converting them to their standard numpy equivalents ('int64', 'float64', 'bool') before processing.\n\nThe function should handle nullable pandas dtypes by converting them to standard numpy equivalents before processing. This conversion should happen within the unique_labels function, where the input ys are processed. The relevant lines to modify are those where the input ys are iterated and processed to extract labels, which is done in lines 105 to 119."
          },
          "input_tokens": 1476,
          "output_tokens": 118,
          "retry_message": null,
          "completion_cost": 0.006198
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "unique_labels",
        "end_line": 119,
        "file_path": "sklearn/utils/multiclass.py",
        "max_tokens": 1000,
        "start_line": 105,
        "temperature": 1.6,
        "instructions": "Update the `unique_labels` function to handle nullable pandas dtypes ('Int64', 'Float64', 'boolean') by converting them to their standard numpy equivalents ('int64', 'float64', 'bool') before processing.\n\nThe function should handle nullable pandas dtypes by converting them to standard numpy equivalents before processing. This conversion should happen within the unique_labels function, where the input ys are processed. The relevant lines to modify are those where the input ys are iterated and processed to extract labels, which is done in lines 105 to 119.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```sql\n<replace>\n    _unique_labels = _FN_UNIQUE_LABELS.get(label_type, None)\n    if not _unique_labels:\n        raise ValueError(\"Unknown label type: %s\" % repr(ys))\n\n    if is_array_api:\n        # array_api does not allow for mixed dtypes\n        unique_ys = xp.concat([_unique_labels(y) for y in ys])\n        return xp.unique_values(unique_ys)\n\n    def convert_nullable_to_standard(y):\n        if isinstance(y, pd.Series):\n            if y.dtype == 'Int64':\n                return y.astype('int64').values\n            elif y.dtype == 'Float64':\n                return y.astype('float64').values\n            elif y.dtype == 'boolean':\n                return y.astype('bool').values\n        return y\n\n    ys_labels = set(chain.from_iterable((i for i in _unique_labels(convert_nullable_to_standard(y))) for y in ys))\n    # Check that we don't mix string type with number type\n    if len(set(isinstance(label, str) for label in ys_labels)) > 1:\n        raise ValueError(\"Mix of label input types (string and number)\")\n\n    return xp.asarray(sorted(ys_labels))\n</replace>"
          },
          "output": {
            "diff": "--- sklearn/utils/multiclass.py\n+++ sklearn/utils/multiclass.py\n@@ -111,7 +111,17 @@\n         unique_ys = xp.concat([_unique_labels(y) for y in ys])\n         return xp.unique_values(unique_ys)\n \n-    ys_labels = set(chain.from_iterable((i for i in _unique_labels(y)) for y in ys))\n+    def convert_nullable_to_standard(y):\n+        if isinstance(y, pd.Series):\n+            if y.dtype == 'Int64':\n+                return y.astype('int64').values\n+            elif y.dtype == 'Float64':\n+                return y.astype('float64').values\n+            elif y.dtype == 'boolean':\n+                return y.astype('bool').values\n+        return y\n+\n+    ys_labels = set(chain.from_iterable((i for i in _unique_labels(convert_nullable_to_standard(y))) for y in ys))\n     # Check that we don't mix string type with number type\n     if len(set(isinstance(label, str) for label in ys_labels)) > 1:\n         raise ValueError(\"Mix of label input types (string and number)\")\n",
            "message": "Applied the change to sklearn/utils/multiclass.py.\n\n<scratch_pad>\n```sql\n</scratch_pad>",
            "verification_errors": [
              {
                "code": "E0602",
                "line": 115,
                "message": "Undefined variable 'pd'",
                "file_path": "sklearn/utils/multiclass.py"
              }
            ]
          },
          "input_tokens": 4647,
          "output_tokens": 332,
          "retry_message": null,
          "completion_cost": 0.018921
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sklearn/utils/multiclass.py\n+++ sklearn/utils/multiclass.py\n@@ -111,7 +111,17 @@\n         unique_ys = xp.concat([_unique_labels(y) for y in ys])\n         return xp.unique_values(unique_ys)\n \n-    ys_labels = set(chain.from_iterable((i for i in _unique_labels(y)) for y in ys))\n+    def convert_nullable_to_standard(y):\n+        if isinstance(y, pd.Series):\n+            if y.dtype == 'Int64':\n+                return y.astype('int64').values\n+            elif y.dtype == 'Float64':\n+                return y.astype('float64').values\n+            elif y.dtype == 'boolean':\n+                return y.astype('bool').values\n+        return y\n+\n+    ys_labels = set(chain.from_iterable((i for i in _unique_labels(convert_nullable_to_standard(y))) for y in ys))\n     # Check that we don't mix string type with number type\n     if len(set(isinstance(label, str) for label in ys_labels)) > 1:\n         raise ValueError(\"Mix of label input types (string and number)\")\n",
        "model": "deepseek-coder",
        "message": "Applied the change to sklearn/utils/multiclass.py.\n\n<scratch_pad>\n```sql\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [
          {
            "code": "E0602",
            "line": 115,
            "message": "Undefined variable 'pd'",
            "file_path": "sklearn/utils/multiclass.py"
          }
        ],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "unique_labels",
            "file_path": "sklearn/utils/multiclass.py",
            "scratch_pad": "The lint error indicates that the variable 'pd' is used in the `convert_nullable_to_standard` function but is not defined within the scope of the `unique_labels` function. This can be fixed by importing pandas directly within the `unique_labels` function.",
            "instructions": "Import the pandas library at the beginning of the `unique_labels` function to fix the lint error."
          },
          "output": {
            "span_id": "unique_labels",
            "file_path": "sklearn/utils/multiclass.py",
            "instructions": "Import the pandas library at the beginning of the `unique_labels` function to fix the lint error."
          },
          "input_tokens": 3909,
          "output_tokens": 151,
          "retry_message": null,
          "completion_cost": 0.013992
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "unique_labels",
        "end_line": null,
        "file_path": "sklearn/utils/multiclass.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Import the pandas library at the beginning of the `unique_labels` function to fix the lint error.\n\nThe pandas library should be imported at the beginning of the function to fix the lint error. Since the function starts at line 44, the import statement should be added right after that.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 45,
            "start_line": 45,
            "scratch_pad": "The pandas library should be imported at the beginning of the function to fix the lint error. Since the function starts at line 44, the import statement should be added right after that."
          },
          "output": {
            "span_id": "unique_labels",
            "end_line": 49,
            "file_path": "sklearn/utils/multiclass.py",
            "start_line": 44,
            "instructions": "Import the pandas library at the beginning of the `unique_labels` function to fix the lint error.\n\nThe pandas library should be imported at the beginning of the function to fix the lint error. Since the function starts at line 44, the import statement should be added right after that."
          },
          "input_tokens": 1585,
          "output_tokens": 82,
          "retry_message": null,
          "completion_cost": 0.005985000000000001
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "unique_labels",
        "end_line": 49,
        "file_path": "sklearn/utils/multiclass.py",
        "max_tokens": 1000,
        "start_line": 44,
        "temperature": 1.6,
        "instructions": "Import the pandas library at the beginning of the `unique_labels` function to fix the lint error.\n\nThe pandas library should be imported at the beginning of the function to fix the lint error. Since the function starts at line 44, the import statement should be added right after that.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```python\n<replace>\ndef unique_labels(*ys):\n    import pandas as pd\n    \"\"\"Extract an ordered array of unique labels.\n\n    We don't allow:\n        - mix of multilabel and multiclass (single label) targets\n        - mix of label indicator matrix and anything else,\n</replace>"
          },
          "output": {
            "diff": "--- sklearn/utils/multiclass.py\n+++ sklearn/utils/multiclass.py\n@@ -42,6 +42,7 @@\n \n \n def unique_labels(*ys):\n+    import pandas as pd\n     \"\"\"Extract an ordered array of unique labels.\n \n     We don't allow:\n",
            "message": "Applied the change to sklearn/utils/multiclass.py.\n\n<scratch_pad>\n```python\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 4532,
          "output_tokens": 71,
          "retry_message": null,
          "completion_cost": 0.014661
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sklearn/utils/multiclass.py\n+++ sklearn/utils/multiclass.py\n@@ -42,6 +42,7 @@\n \n \n def unique_labels(*ys):\n+    import pandas as pd\n     \"\"\"Extract an ordered array of unique labels.\n \n     We don't allow:\n",
        "model": "deepseek-coder",
        "message": "Applied the change to sklearn/utils/multiclass.py.\n\n<scratch_pad>\n```python\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The fix for supporting nullable pandas dtypes in `unique_labels` has been implemented successfully, and the necessary import for pandas has been added. The `convert_nullable_to_standard` function within `unique_labels` handles the conversion of nullable dtypes to standard dtypes, ensuring compatibility with the function's logic.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The changes have been applied correctly, and the import statement for pandas has been added at the beginning of the `unique_labels` function. The function now handles nullable pandas dtypes by converting them to their standard numpy equivalents before processing. This should resolve the issue without introducing additional lint errors.",
            "instructions": null
          },
          "output": {
            "message": "The fix for supporting nullable pandas dtypes in `unique_labels` has been implemented successfully, and the necessary import for pandas has been added. The `convert_nullable_to_standard` function within `unique_labels` handles the conversion of nullable dtypes to standard dtypes, ensuring compatibility with the function's logic."
          },
          "input_tokens": 4188,
          "output_tokens": 187,
          "retry_message": null,
          "completion_cost": 0.015369
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The fix for supporting nullable pandas dtypes in `unique_labels` has been implemented successfully, and the necessary import for pandas has been added. The `convert_nullable_to_standard` function within `unique_labels` handles the conversion of nullable dtypes to standard dtypes, ensuring compatibility with the function's logic.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Support nullable pandas dtypes in `unique_labels`\n### Describe the workflow you want to enable\n\nI would like to be able to pass the nullable pandas dtypes (\"Int64\", \"Float64\", \"boolean\") into sklearn's `unique_labels` function. Because the dtypes become `object` dtype when converted to numpy arrays we get `ValueError: Mix type of y not allowed, got types {'binary', 'unknown'}`:\r\n\r\nRepro with sklearn 1.2.1\r\n```py \r\n    import pandas as pd\r\n    import pytest\r\n    from sklearn.utils.multiclass import unique_labels\r\n    \r\n    for dtype in [\"Int64\", \"Float64\", \"boolean\"]:\r\n        y_true = pd.Series([1, 0, 0, 1, 0, 1, 1, 0, 1], dtype=dtype)\r\n        y_predicted = pd.Series([0, 0, 1, 1, 0, 1, 1, 1, 1], dtype=\"int64\")\r\n\r\n        with pytest.raises(ValueError, match=\"Mix type of y not allowed, got types\"):\r\n            unique_labels(y_true, y_predicted)\r\n```\n\n### Describe your proposed solution\n\nWe should get the same behavior as when `int64`, `float64`, and `bool` dtypes are used, which is no error:  \r\n\r\n```python\r\n    import pandas as pd\r\n    from sklearn.utils.multiclass import unique_labels\r\n    \r\n    for dtype in [\"int64\", \"float64\", \"bool\"]:\r\n        y_true = pd.Series([1, 0, 0, 1, 0, 1, 1, 0, 1], dtype=dtype)\r\n        y_predicted = pd.Series([0, 0, 1, 1, 0, 1, 1, 1, 1], dtype=\"int64\")\r\n\r\n        unique_labels(y_true, y_predicted)\r\n```\n\n### Describe alternatives you've considered, if relevant\n\nOur current workaround is to convert the data to numpy arrays with the corresponding dtype that works prior to passing it into `unique_labels`.\n\n### Additional context\n\n_No response_\n"
}