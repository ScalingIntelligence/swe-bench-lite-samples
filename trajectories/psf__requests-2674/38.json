{
  "info": {
    "duration": 162.79045414924622,
    "submission": "diff --git a/requests/exceptions.py b/requests/exceptions.py\nindex 89135a80..fc629af2 100644\n--- a/requests/exceptions.py\n+++ b/requests/exceptions.py\n@@ -35,6 +35,14 @@ class ConnectionError(RequestException):\n     \"\"\"A Connection error occurred.\"\"\"\n \n \n+class DecodeError(RequestException):\n+    \"\"\"Failed to decode response content from urllib3.\"\"\"\n+\n+\n+class ProxyTimeoutError(ConnectionError, Timeout):\n+    \"\"\"A proxy timed out.\"\"\"\n+\n+\n class ProxyError(ConnectionError):\n     \"\"\"A proxy error occurred.\"\"\"\n \n",
    "total_cost": 0.081789,
    "instance_id": "psf__requests-2674",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue suggests that the goal of the 'requests' library may be to wrap urllib3 exceptions with its own exception types. However, some urllib3 exceptions are not being properly wrapped. Specifically, requests.packages.urllib3.exceptions.DecodeError and requests.packages.urllib3.exceptions.TimeoutError are bypassing the expected wrapping behavior. It will be beneficial to look into the 'exceptions.py' and 'connectionpool.py' files within the 'requests' and 'requests.packages.urllib3' modules to locate the handling of these specific exceptions to identify why they are not being wrapped as intended.",
            "search_requests": [
              {
                "query": "urllib3 exceptions not wrapped",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/requests/exceptions.py",
                "function_names": []
              },
              {
                "query": "urllib3 exceptions not wrapped",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/requests/packages/urllib3/connectionpool.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 17,
                "span_id": "InvalidURL",
                "file_path": "requests/exceptions.py"
              },
              {
                "rank": 0,
                "tokens": 21,
                "span_id": "ChunkedEncodingError",
                "file_path": "requests/exceptions.py"
              },
              {
                "rank": 0,
                "tokens": 16,
                "span_id": "InvalidSchema",
                "file_path": "requests/exceptions.py"
              },
              {
                "rank": 0,
                "tokens": 23,
                "span_id": "MissingSchema",
                "file_path": "requests/exceptions.py"
              },
              {
                "rank": 0,
                "tokens": 19,
                "span_id": "ContentDecodingError",
                "file_path": "requests/exceptions.py"
              },
              {
                "rank": 0,
                "tokens": 20,
                "span_id": "StreamConsumedError",
                "file_path": "requests/exceptions.py"
              },
              {
                "rank": 0,
                "tokens": 44,
                "span_id": "Timeout",
                "file_path": "requests/exceptions.py"
              },
              {
                "rank": 0,
                "tokens": 21,
                "span_id": "ReadTimeout",
                "file_path": "requests/exceptions.py"
              },
              {
                "rank": 0,
                "tokens": 17,
                "span_id": "URLRequired",
                "file_path": "requests/exceptions.py"
              },
              {
                "rank": 0,
                "tokens": 13,
                "span_id": "TooManyRedirects",
                "file_path": "requests/exceptions.py"
              },
              {
                "rank": 0,
                "tokens": 12,
                "span_id": "ConnectionError",
                "file_path": "requests/exceptions.py"
              },
              {
                "rank": 0,
                "tokens": 12,
                "span_id": "ProxyError",
                "file_path": "requests/exceptions.py"
              },
              {
                "rank": 0,
                "tokens": 35,
                "span_id": "ConnectTimeout",
                "file_path": "requests/exceptions.py"
              },
              {
                "rank": 0,
                "tokens": 219,
                "span_id": "HTTPConnectionPool._raise_timeout",
                "file_path": "requests/packages/urllib3/connectionpool.py"
              },
              {
                "rank": 1,
                "tokens": 1806,
                "span_id": "HTTPConnectionPool.urlopen",
                "file_path": "requests/packages/urllib3/connectionpool.py"
              },
              {
                "rank": 4,
                "tokens": 230,
                "span_id": "imports",
                "file_path": "requests/packages/urllib3/connectionpool.py"
              },
              {
                "rank": 5,
                "tokens": 17,
                "span_id": "HTTPConnectionPool._prepare_proxy",
                "file_path": "requests/packages/urllib3/connectionpool.py"
              },
              {
                "rank": 5,
                "tokens": 27,
                "span_id": "HTTPConnectionPool._validate_conn",
                "file_path": "requests/packages/urllib3/connectionpool.py"
              },
              {
                "rank": 5,
                "tokens": 75,
                "span_id": "HTTPConnectionPool._get_timeout",
                "file_path": "requests/packages/urllib3/connectionpool.py"
              },
              {
                "rank": 6,
                "tokens": 17,
                "span_id": "impl:9",
                "file_path": "requests/packages/urllib3/connectionpool.py"
              },
              {
                "rank": 6,
                "tokens": 45,
                "span_id": "ConnectionPool.close",
                "file_path": "requests/packages/urllib3/connectionpool.py"
              },
              {
                "rank": 6,
                "tokens": 46,
                "span_id": "ConnectionPool",
                "file_path": "requests/packages/urllib3/connectionpool.py"
              },
              {
                "rank": 6,
                "tokens": 31,
                "span_id": "ConnectionPool.__str__",
                "file_path": "requests/packages/urllib3/connectionpool.py"
              },
              {
                "rank": 6,
                "tokens": 51,
                "span_id": "ConnectionPool.__init__",
                "file_path": "requests/packages/urllib3/connectionpool.py"
              },
              {
                "rank": 6,
                "tokens": 8,
                "span_id": "ConnectionPool.__enter__",
                "file_path": "requests/packages/urllib3/connectionpool.py"
              },
              {
                "rank": 6,
                "tokens": 30,
                "span_id": "ConnectionPool.__exit__",
                "file_path": "requests/packages/urllib3/connectionpool.py"
              }
            ],
            "search_requests": [
              {
                "query": "urllib3 exceptions not wrapped",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/requests/exceptions.py",
                "function_names": []
              },
              {
                "query": "urllib3 exceptions not wrapped",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/requests/packages/urllib3/connectionpool.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 2889,
          "output_tokens": 236,
          "retry_message": null,
          "completion_cost": 0.012206999999999999
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 17,
            "span_id": "InvalidURL",
            "file_path": "requests/exceptions.py"
          },
          {
            "rank": 0,
            "tokens": 21,
            "span_id": "ChunkedEncodingError",
            "file_path": "requests/exceptions.py"
          },
          {
            "rank": 0,
            "tokens": 16,
            "span_id": "InvalidSchema",
            "file_path": "requests/exceptions.py"
          },
          {
            "rank": 0,
            "tokens": 23,
            "span_id": "MissingSchema",
            "file_path": "requests/exceptions.py"
          },
          {
            "rank": 0,
            "tokens": 19,
            "span_id": "ContentDecodingError",
            "file_path": "requests/exceptions.py"
          },
          {
            "rank": 0,
            "tokens": 20,
            "span_id": "StreamConsumedError",
            "file_path": "requests/exceptions.py"
          },
          {
            "rank": 0,
            "tokens": 44,
            "span_id": "Timeout",
            "file_path": "requests/exceptions.py"
          },
          {
            "rank": 0,
            "tokens": 21,
            "span_id": "ReadTimeout",
            "file_path": "requests/exceptions.py"
          },
          {
            "rank": 0,
            "tokens": 17,
            "span_id": "URLRequired",
            "file_path": "requests/exceptions.py"
          },
          {
            "rank": 0,
            "tokens": 13,
            "span_id": "TooManyRedirects",
            "file_path": "requests/exceptions.py"
          },
          {
            "rank": 0,
            "tokens": 12,
            "span_id": "ConnectionError",
            "file_path": "requests/exceptions.py"
          },
          {
            "rank": 0,
            "tokens": 12,
            "span_id": "ProxyError",
            "file_path": "requests/exceptions.py"
          },
          {
            "rank": 0,
            "tokens": 35,
            "span_id": "ConnectTimeout",
            "file_path": "requests/exceptions.py"
          },
          {
            "rank": 0,
            "tokens": 219,
            "span_id": "HTTPConnectionPool._raise_timeout",
            "file_path": "requests/packages/urllib3/connectionpool.py"
          },
          {
            "rank": 1,
            "tokens": 1806,
            "span_id": "HTTPConnectionPool.urlopen",
            "file_path": "requests/packages/urllib3/connectionpool.py"
          },
          {
            "rank": 4,
            "tokens": 230,
            "span_id": "imports",
            "file_path": "requests/packages/urllib3/connectionpool.py"
          },
          {
            "rank": 5,
            "tokens": 17,
            "span_id": "HTTPConnectionPool._prepare_proxy",
            "file_path": "requests/packages/urllib3/connectionpool.py"
          },
          {
            "rank": 5,
            "tokens": 27,
            "span_id": "HTTPConnectionPool._validate_conn",
            "file_path": "requests/packages/urllib3/connectionpool.py"
          },
          {
            "rank": 5,
            "tokens": 75,
            "span_id": "HTTPConnectionPool._get_timeout",
            "file_path": "requests/packages/urllib3/connectionpool.py"
          },
          {
            "rank": 6,
            "tokens": 17,
            "span_id": "impl:9",
            "file_path": "requests/packages/urllib3/connectionpool.py"
          },
          {
            "rank": 6,
            "tokens": 45,
            "span_id": "ConnectionPool.close",
            "file_path": "requests/packages/urllib3/connectionpool.py"
          },
          {
            "rank": 6,
            "tokens": 46,
            "span_id": "ConnectionPool",
            "file_path": "requests/packages/urllib3/connectionpool.py"
          },
          {
            "rank": 6,
            "tokens": 31,
            "span_id": "ConnectionPool.__str__",
            "file_path": "requests/packages/urllib3/connectionpool.py"
          },
          {
            "rank": 6,
            "tokens": 51,
            "span_id": "ConnectionPool.__init__",
            "file_path": "requests/packages/urllib3/connectionpool.py"
          },
          {
            "rank": 6,
            "tokens": 8,
            "span_id": "ConnectionPool.__enter__",
            "file_path": "requests/packages/urllib3/connectionpool.py"
          },
          {
            "rank": 6,
            "tokens": 30,
            "span_id": "ConnectionPool.__exit__",
            "file_path": "requests/packages/urllib3/connectionpool.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue focuses on the handling and propagation of urllib3 exceptions through the requests API. The search results include several relevant sections. In `requests/exceptions.py`, various exception classes are defined that could potentially wrap urllib3 exceptions, such as `RequestException`, `ConnectionError`, `ProxyError`, `SSLError`, `Timeout`, `ConnectTimeout`, `ReadTimeout`, and others. These classes might be used to encapsulate or translate urllib3 exceptions. In `requests/packages/urllib3/connectionpool.py`, there are several sections that directly reference or handle urllib3 exceptions. For instance, the `HTTPConnectionPool.urlopen` method handles exceptions like `TimeoutError`, `HTTPException`, `SocketError`, and `ConnectionError`, potentially raising `ReadTimeoutError`, `ProxyError`, and `ProtocolError` based on these exceptions. This suggests that these sections are central to the exception handling behavior described in the issue. The specific spans identified as relevant include those defining exception classes in `exceptions.py` and those handling exceptions in the `urlopen` method of `HTTPConnectionPool`.",
            "identified_spans": [
              {
                "span_ids": [
                  "RequestException",
                  "ConnectionError",
                  "ProxyError",
                  "SSLError",
                  "Timeout",
                  "ConnectTimeout",
                  "ReadTimeout",
                  "URLRequired",
                  "TooManyRedirects",
                  "MissingSchema",
                  "InvalidSchema",
                  "InvalidURL",
                  "ChunkedEncodingError",
                  "ContentDecodingError",
                  "StreamConsumedError"
                ],
                "file_path": "requests/exceptions.py"
              },
              {
                "span_ids": [
                  "imports",
                  "_blocking_errnos",
                  "HTTPConnectionPool",
                  "HTTPConnectionPool.__init__",
                  "HTTPConnectionPool._validate_conn",
                  "HTTPConnectionPool._prepare_proxy",
                  "HTTPConnectionPool._get_timeout",
                  "HTTPConnectionPool._raise_timeout",
                  "HTTPConnectionPool.urlopen"
                ],
                "file_path": "requests/packages/urllib3/connectionpool.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3961,
          "output_tokens": 508,
          "retry_message": null,
          "completion_cost": 0.019503
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context provided includes the 'exceptions.py' and 'connectionpool.py' files from the 'requests' and 'requests.packages.urllib3' modules, which are crucial for understanding the exception handling and connection pooling behavior concerning the reported issues. In 'exceptions.py', we see custom exception classes defined by the 'requests' library, which could be used to wrap or hide underlying urllib3 exceptions. In 'connectionpool.py', there are definitions for connection pool handling, including the 'HTTPConnectionPool' and 'HTTPSConnectionPool' classes, along with methods that could be related to exception handling such as '_raise_timeout'. The provided context does not show direct handling or wrapping of urllib3's 'DecodeError' and 'TimeoutError'. However, the context covers the classes and methods where this handling would likely occur, suggesting that with this information, an analyst could trace or implement the needed exception wrapping within the framework provided by these files.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 3931,
          "output_tokens": 235,
          "retry_message": null,
          "completion_cost": 0.015318
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "ConnectionError",
            "file_path": "requests/exceptions.py",
            "scratch_pad": "The issue states that urllib3 exceptions such as `DecodeError` and `TimeoutError` are not being wrapped in `requests.exceptions` types as expected. This needs to be addressed by ensuring that these exceptions are properly handled and wrapped within the `requests` exception hierarchy.",
            "instructions": "Update the `requests/exceptions.py` file to include wrappers for `DecodeError` and `TimeoutError` from `requests.packages.urllib3.exceptions`, ensuring they are wrapped appropriately within the `requests` exception hierarchy."
          },
          "output": {
            "span_id": "ConnectionError",
            "end_line": 35,
            "file_path": "requests/exceptions.py",
            "start_line": 34,
            "instructions": "Update the `requests/exceptions.py` file to include wrappers for `DecodeError` and `TimeoutError` from `requests.packages.urllib3.exceptions`, ensuring they are wrapped appropriately within the `requests` exception hierarchy."
          },
          "input_tokens": 4418,
          "output_tokens": 158,
          "retry_message": null,
          "completion_cost": 0.015624
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "ConnectionError",
        "end_line": 35,
        "file_path": "requests/exceptions.py",
        "max_tokens": 1000,
        "start_line": 34,
        "temperature": 1.6,
        "instructions": "Update the `requests/exceptions.py` file to include wrappers for `DecodeError` and `TimeoutError` from `requests.packages.urllib3.exceptions`, ensuring they are wrapped appropriately within the `requests` exception hierarchy.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\nclass ConnectionError(RequestException):\n    \"\"\"A Connection error occurred.\"\"\"\n\n\nclass DecodeError(RequestException):\n    \"\"\"Failed to decode response content from urllib3.\"\"\"\n\n\nclass ProxyTimeoutError(ConnectionError, Timeout):\n    \"\"\"A proxy timed out.\"\"\"\n</replace>"
          },
          "output": {
            "diff": "--- requests/exceptions.py\n+++ requests/exceptions.py\n@@ -33,6 +33,14 @@\n \n class ConnectionError(RequestException):\n     \"\"\"A Connection error occurred.\"\"\"\n+\n+\n+class DecodeError(RequestException):\n+    \"\"\"Failed to decode response content from urllib3.\"\"\"\n+\n+\n+class ProxyTimeoutError(ConnectionError, Timeout):\n+    \"\"\"A proxy timed out.\"\"\"\n \n \n class ProxyError(ConnectionError):\n",
            "message": "Applied the change to requests/exceptions.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": [
              {
                "code": "E0601",
                "line": 42,
                "message": "Using variable 'Timeout' before assignment",
                "file_path": "requests/exceptions.py"
              }
            ]
          },
          "input_tokens": 6029,
          "output_tokens": 70,
          "retry_message": null,
          "completion_cost": 0.019136999999999998
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- requests/exceptions.py\n+++ requests/exceptions.py\n@@ -33,6 +33,14 @@\n \n class ConnectionError(RequestException):\n     \"\"\"A Connection error occurred.\"\"\"\n+\n+\n+class DecodeError(RequestException):\n+    \"\"\"Failed to decode response content from urllib3.\"\"\"\n+\n+\n+class ProxyTimeoutError(ConnectionError, Timeout):\n+    \"\"\"A proxy timed out.\"\"\"\n \n \n class ProxyError(ConnectionError):\n",
        "model": "deepseek-coder",
        "message": "Applied the change to requests/exceptions.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [
          {
            "code": "E0601",
            "line": 42,
            "message": "Using variable 'Timeout' before assignment",
            "file_path": "requests/exceptions.py"
          }
        ],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "imports",
            "file_path": "requests/exceptions.py",
            "scratch_pad": "To resolve the lint error 'E0601: Using variable 'Timeout' before assignment', we need to ensure that the 'Timeout' class is properly imported or defined before it is used in the class definition of 'ProxyTimeoutError'. This can be done by moving the import statement to a more appropriate location or ensuring that 'Timeout' is defined before being referenced.",
            "instructions": "Move the import statement for the 'Timeout' class to a location where it is defined before it is referenced in the class definition of 'ProxyTimeoutError'. This ensures that the 'Timeout' class is available for use when defining 'ProxyTimeoutError'."
          },
          "output": null,
          "input_tokens": 4833,
          "output_tokens": 194,
          "retry_message": "Span not found: imports. Available spans: ContentDecodingError, ReadTimeout, InvalidURL, SSLError, ChunkedEncodingError, ProxyError, StreamConsumedError, Timeout, MissingSchema, TooManyRedirects, ConnectionError, URLRequired, ConnectTimeout, RequestException, InvalidSchema, RequestException.__init__, RetryError, HTTPError, DecodeError, ProxyTimeoutError",
          "completion_cost": 0.017409
        },
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "None",
            "file_path": "requests/exceptions.py",
            "scratch_pad": "Since the span 'imports' was not found, it seems there is no specific span for import statements in the provided context. To resolve the lint error, we need to ensure that the 'Timeout' class is defined or imported before its usage. We should handle this by ensuring that the 'Timeout' class is imported at the beginning of the file before it is used in the 'ProxyTimeoutError' class.",
            "instructions": "Add an import statement for the 'Timeout' class at the beginning of the 'requests/exceptions.py' file to ensure it is defined before it is used in the 'ProxyTimeoutError' class. This will resolve the lint error 'E0601: Using variable 'Timeout' before assignment'."
          },
          "output": null,
          "input_tokens": 5115,
          "output_tokens": 213,
          "retry_message": "Span not found: None. Available spans: ContentDecodingError, ReadTimeout, InvalidURL, SSLError, ChunkedEncodingError, ProxyError, StreamConsumedError, Timeout, MissingSchema, TooManyRedirects, ConnectionError, URLRequired, ConnectTimeout, RequestException, InvalidSchema, RequestException.__init__, RetryError, HTTPError, DecodeError, ProxyTimeoutError",
          "completion_cost": 0.01854
        },
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "start_of_file",
            "file_path": "requests/exceptions.py",
            "scratch_pad": "Given that the span 'None' is not found, we need to update the start of the 'requests/exceptions.py' file to include an import statement for the 'Timeout' class right at the beginning or before its usage. This will ensure that the 'Timeout' class is available before it is used in the 'ProxyTimeoutError' class, thus resolving the lint error 'E0601: Using variable 'Timeout' before assignment'.",
            "instructions": "Insert an import statement for the 'Timeout' class at the top of the 'requests/exceptions.py' file to ensure it is available for use before it is referenced in the class definition of 'ProxyTimeoutError'. This action will address the lint error without altering the span-based structure provided."
          },
          "output": null,
          "input_tokens": 5416,
          "output_tokens": 223,
          "retry_message": "Span not found: start_of_file. Available spans: ContentDecodingError, ReadTimeout, InvalidURL, SSLError, ChunkedEncodingError, ProxyError, StreamConsumedError, Timeout, MissingSchema, TooManyRedirects, ConnectionError, URLRequired, ConnectTimeout, RequestException, InvalidSchema, RequestException.__init__, RetryError, HTTPError, DecodeError, ProxyTimeoutError",
          "completion_cost": 0.019593000000000003
        }
      ]
    }
  ],
  "initial_message": "urllib3 exceptions passing through requests API\nI don't know if it's a design goal of requests to hide urllib3's exceptions and wrap them around requests.exceptions types.\n\n(If it's not IMHO it should be, but that's another discussion)\n\nIf it is, I have at least two of them passing through that I have to catch in addition to requests' exceptions. They are requests.packages.urllib3.exceptions.DecodeError and requests.packages.urllib3.exceptions.TimeoutError (this one I get when a proxy timeouts)\n\nThanks!\n\n"
}