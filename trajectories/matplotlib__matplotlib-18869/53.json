{
  "info": {
    "duration": 289.4057385921478,
    "submission": "",
    "total_cost": 0.07713600000000001,
    "instance_id": "matplotlib__matplotlib-18869",
    "evaluation_name": "temperature_sweep_250_samples_50_problems_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue requests the addition of easily comparable version info to the top-level of Matplotlib. This can be achieved either by exposing a `version_info` tuple or a `LooseVersion` instance. The `__init__.py` file in the `matplotlib` package directory is the likely location for adding or modifying the version information. Additionally, the `setup.py` script contains versioning information and might need adjustments to include the new version info attribute. Therefore, the search should focus on these files and related version attributes or methods.",
            "search_requests": [
              {
                "query": "version info",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/matplotlib/__init__.py",
                "function_names": []
              },
              {
                "query": "version info",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/setup.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 283,
                "span_id": "imports",
                "file_path": "lib/matplotlib/__init__.py"
              },
              {
                "rank": 1,
                "tokens": 147,
                "span_id": "_check_versions",
                "file_path": "lib/matplotlib/__init__.py"
              },
              {
                "rank": 2,
                "tokens": 184,
                "span_id": "__getattr__",
                "file_path": "lib/matplotlib/__init__.py"
              },
              {
                "rank": 3,
                "tokens": 547,
                "span_id": "docstring",
                "file_path": "lib/matplotlib/__init__.py"
              },
              {
                "rank": 4,
                "tokens": 1140,
                "span_id": "_get_executable_info",
                "file_path": "lib/matplotlib/__init__.py"
              },
              {
                "rank": 6,
                "tokens": 209,
                "span_id": "_init_tests",
                "file_path": "lib/matplotlib/__init__.py"
              },
              {
                "rank": 8,
                "tokens": 25,
                "span_id": "impl:35",
                "file_path": "lib/matplotlib/__init__.py"
              },
              {
                "rank": 8,
                "tokens": 32,
                "span_id": "get_backend",
                "file_path": "lib/matplotlib/__init__.py"
              },
              {
                "rank": 8,
                "tokens": 33,
                "span_id": "interactive",
                "file_path": "lib/matplotlib/__init__.py"
              },
              {
                "rank": 8,
                "tokens": 54,
                "span_id": "is_interactive",
                "file_path": "lib/matplotlib/__init__.py"
              },
              {
                "rank": 8,
                "tokens": 18,
                "span_id": "impl:37",
                "file_path": "lib/matplotlib/__init__.py"
              },
              {
                "rank": 9,
                "tokens": 376,
                "span_id": "matplotlib_fname",
                "file_path": "lib/matplotlib/__init__.py"
              },
              {
                "rank": 10,
                "tokens": 153,
                "span_id": "impl:9",
                "file_path": "lib/matplotlib/__init__.py"
              },
              {
                "rank": 0,
                "tokens": 670,
                "span_id": "impl:38",
                "file_path": "setup.py"
              },
              {
                "rank": 1,
                "tokens": 395,
                "span_id": "docstring",
                "file_path": "setup.py"
              },
              {
                "rank": 1,
                "tokens": 81,
                "span_id": "has_flag",
                "file_path": "setup.py"
              },
              {
                "rank": 1,
                "tokens": 11,
                "span_id": "NoopTestCommand",
                "file_path": "setup.py"
              },
              {
                "rank": 1,
                "tokens": 32,
                "span_id": "NoopTestCommand.__init__",
                "file_path": "setup.py"
              },
              {
                "rank": 2,
                "tokens": 42,
                "span_id": "Sdist.make_release_tree",
                "file_path": "setup.py"
              },
              {
                "rank": 2,
                "tokens": 11,
                "span_id": "Sdist",
                "file_path": "setup.py"
              },
              {
                "rank": 2,
                "tokens": 11,
                "span_id": "BuildPy",
                "file_path": "setup.py"
              },
              {
                "rank": 2,
                "tokens": 288,
                "span_id": "impl:12",
                "file_path": "setup.py"
              },
              {
                "rank": 2,
                "tokens": 28,
                "span_id": "BuildPy.run",
                "file_path": "setup.py"
              },
              {
                "rank": 3,
                "tokens": 165,
                "span_id": "update_matplotlibrc",
                "file_path": "setup.py"
              },
              {
                "rank": 4,
                "tokens": 127,
                "span_id": "BuildExtraLibraries.build_extension",
                "file_path": "setup.py"
              },
              {
                "rank": 5,
                "tokens": 208,
                "span_id": "BuildExtraLibraries.build_extensions",
                "file_path": "setup.py"
              }
            ],
            "search_requests": [
              {
                "query": "version info",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/matplotlib/__init__.py",
                "function_names": []
              },
              {
                "query": "version info",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/setup.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 4021,
          "output_tokens": 203,
          "retry_message": null,
          "completion_cost": 0.015108
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 283,
            "span_id": "imports",
            "file_path": "lib/matplotlib/__init__.py"
          },
          {
            "rank": 0,
            "tokens": 670,
            "span_id": "impl:38",
            "file_path": "setup.py"
          },
          {
            "rank": 1,
            "tokens": 147,
            "span_id": "_check_versions",
            "file_path": "lib/matplotlib/__init__.py"
          },
          {
            "rank": 1,
            "tokens": 395,
            "span_id": "docstring",
            "file_path": "setup.py"
          },
          {
            "rank": 1,
            "tokens": 81,
            "span_id": "has_flag",
            "file_path": "setup.py"
          },
          {
            "rank": 1,
            "tokens": 11,
            "span_id": "NoopTestCommand",
            "file_path": "setup.py"
          },
          {
            "rank": 1,
            "tokens": 32,
            "span_id": "NoopTestCommand.__init__",
            "file_path": "setup.py"
          },
          {
            "rank": 2,
            "tokens": 184,
            "span_id": "__getattr__",
            "file_path": "lib/matplotlib/__init__.py"
          },
          {
            "rank": 2,
            "tokens": 42,
            "span_id": "Sdist.make_release_tree",
            "file_path": "setup.py"
          },
          {
            "rank": 2,
            "tokens": 11,
            "span_id": "Sdist",
            "file_path": "setup.py"
          },
          {
            "rank": 2,
            "tokens": 11,
            "span_id": "BuildPy",
            "file_path": "setup.py"
          },
          {
            "rank": 2,
            "tokens": 288,
            "span_id": "impl:12",
            "file_path": "setup.py"
          },
          {
            "rank": 2,
            "tokens": 28,
            "span_id": "BuildPy.run",
            "file_path": "setup.py"
          },
          {
            "rank": 3,
            "tokens": 547,
            "span_id": "docstring",
            "file_path": "lib/matplotlib/__init__.py"
          },
          {
            "rank": 3,
            "tokens": 165,
            "span_id": "update_matplotlibrc",
            "file_path": "setup.py"
          },
          {
            "rank": 4,
            "tokens": 1140,
            "span_id": "_get_executable_info",
            "file_path": "lib/matplotlib/__init__.py"
          },
          {
            "rank": 4,
            "tokens": 127,
            "span_id": "BuildExtraLibraries.build_extension",
            "file_path": "setup.py"
          },
          {
            "rank": 5,
            "tokens": 208,
            "span_id": "BuildExtraLibraries.build_extensions",
            "file_path": "setup.py"
          },
          {
            "rank": 6,
            "tokens": 209,
            "span_id": "_init_tests",
            "file_path": "lib/matplotlib/__init__.py"
          },
          {
            "rank": 8,
            "tokens": 25,
            "span_id": "impl:35",
            "file_path": "lib/matplotlib/__init__.py"
          },
          {
            "rank": 8,
            "tokens": 32,
            "span_id": "get_backend",
            "file_path": "lib/matplotlib/__init__.py"
          },
          {
            "rank": 8,
            "tokens": 33,
            "span_id": "interactive",
            "file_path": "lib/matplotlib/__init__.py"
          },
          {
            "rank": 8,
            "tokens": 54,
            "span_id": "is_interactive",
            "file_path": "lib/matplotlib/__init__.py"
          },
          {
            "rank": 8,
            "tokens": 18,
            "span_id": "impl:37",
            "file_path": "lib/matplotlib/__init__.py"
          },
          {
            "rank": 9,
            "tokens": 376,
            "span_id": "matplotlib_fname",
            "file_path": "lib/matplotlib/__init__.py"
          },
          {
            "rank": 10,
            "tokens": 153,
            "span_id": "impl:9",
            "file_path": "lib/matplotlib/__init__.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about adding a way to easily compare Matplotlib's version information. Currently, Matplotlib only exposes `__version__`. The proposed solution suggests either adding a `version_info` tuple or a `LooseVersion` instance for easier comparison. The analysis of the search results reveals that the `lib/matplotlib/__init__.py` file already contains a section where `__version__` is being defined and managed. Specifically, the `__getattr__` span shows how `__version__` is dynamically set using `setuptools_scm`. There is no immediate existence of `version_info` or `LooseVersion` in the code spans provided, indicating a clear opportunity to enhance the version handling within the library. The current setup does not address the need for a comparable version info directly, making the provided spans not directly relevant to the reported issue but highlighting the location where the new implementation should be integrated. The setup.py file does not contain any code spans relevant to the version comparison request.",
            "identified_spans": null
          },
          "output": {
            "message": "The search returned 26 results. But unfortunately, I didn\u2019t find any of the search results relevant to the query.\n\nThe reported issue is about adding a way to easily compare Matplotlib's version information. Currently, Matplotlib only exposes `__version__`. The proposed solution suggests either adding a `version_info` tuple or a `LooseVersion` instance for easier comparison. The analysis of the search results reveals that the `lib/matplotlib/__init__.py` file already contains a section where `__version__` is being defined and managed. Specifically, the `__getattr__` span shows how `__version__` is dynamically set using `setuptools_scm`. There is no immediate existence of `version_info` or `LooseVersion` in the code spans provided, indicating a clear opportunity to enhance the version handling within the library. The current setup does not address the need for a comparable version info directly, making the provided spans not directly relevant to the reported issue but highlighting the location where the new implementation should be integrated. The setup.py file does not contain any code spans relevant to the version comparison request."
          },
          "input_tokens": 4795,
          "output_tokens": 234,
          "retry_message": null,
          "completion_cost": 0.017895
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "The search returned 26 results. But unfortunately, I didn\u2019t find any of the search results relevant to the query.\n\nThe reported issue is about adding a way to easily compare Matplotlib's version information. Currently, Matplotlib only exposes `__version__`. The proposed solution suggests either adding a `version_info` tuple or a `LooseVersion` instance for easier comparison. The analysis of the search results reveals that the `lib/matplotlib/__init__.py` file already contains a section where `__version__` is being defined and managed. Specifically, the `__getattr__` span shows how `__version__` is dynamically set using `setuptools_scm`. There is no immediate existence of `version_info` or `LooseVersion` in the code spans provided, indicating a clear opportunity to enhance the version handling within the library. The current setup does not address the need for a comparable version info directly, making the provided spans not directly relevant to the reported issue but highlighting the location where the new implementation should be integrated. The setup.py file does not contain any code spans relevant to the version comparison request.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The previous search focused on identifying existing implementations of `version_info` or `LooseVersion` within the `__init__.py` and `setup.py` files. Given the results revealed that such implementations are absent, the next step is to identify where the current version information is defined and managed. The `__init__.py` file contains the dynamic setting of `__version__` through `setuptools_scm`, which indicates the appropriate place to add the new version information attributes (`version_info` or `LooseVersion`). Therefore, the search should now target specific sections in `__init__.py` where version handling can be enhanced.",
            "search_requests": [
              {
                "query": "dynamic version setting",
                "class_names": [],
                "code_snippet": "__version__",
                "file_pattern": "**/matplotlib/__init__.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 184,
                "span_id": "__getattr__",
                "file_path": "lib/matplotlib/__init__.py"
              },
              {
                "rank": 1,
                "tokens": 147,
                "span_id": "_check_versions",
                "file_path": "lib/matplotlib/__init__.py"
              }
            ],
            "search_requests": [
              {
                "query": "dynamic version setting",
                "class_names": [],
                "code_snippet": "__version__",
                "file_pattern": "**/matplotlib/__init__.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 4518,
          "output_tokens": 226,
          "retry_message": null,
          "completion_cost": 0.016944
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 184,
            "span_id": "__getattr__",
            "file_path": "lib/matplotlib/__init__.py"
          },
          {
            "rank": 1,
            "tokens": 147,
            "span_id": "_check_versions",
            "file_path": "lib/matplotlib/__init__.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue seeks to improve the ease of version comparison in Matplotlib by adding either a `version_info` tuple or a `LooseVersion` instance in addition to the existing `__version__` attribute. The provided search results contain the `__getattr__` function which handles the retrieval of `__version__`. This function dynamically determines the version using setuptools_scm or from the _version.py file. This already addresses part of the issue by providing a version string that can be accessed via `__version__`. To fully address the issue, additional attributes such as `version_info` or `LooseVersion` need to be introduced. No existing code spans directly address the addition of these new attributes, but the `__getattr__` function provides a good entry point for adding these attributes. Therefore, while the existing code does not directly solve the new feature request, it provides context that can be expanded upon to implement the proposed changes.",
            "identified_spans": null
          },
          "output": {
            "message": "The search returned 2 results. But unfortunately, I didn\u2019t find any of the search results relevant to the query.\n\nThe reported issue seeks to improve the ease of version comparison in Matplotlib by adding either a `version_info` tuple or a `LooseVersion` instance in addition to the existing `__version__` attribute. The provided search results contain the `__getattr__` function which handles the retrieval of `__version__`. This function dynamically determines the version using setuptools_scm or from the _version.py file. This already addresses part of the issue by providing a version string that can be accessed via `__version__`. To fully address the issue, additional attributes such as `version_info` or `LooseVersion` need to be introduced. No existing code spans directly address the addition of these new attributes, but the `__getattr__` function provides a good entry point for adding these attributes. Therefore, while the existing code does not directly solve the new feature request, it provides context that can be expanded upon to implement the proposed changes."
          },
          "input_tokens": 2069,
          "output_tokens": 221,
          "retry_message": null,
          "completion_cost": 0.009522
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "The search returned 2 results. But unfortunately, I didn\u2019t find any of the search results relevant to the query.\n\nThe reported issue seeks to improve the ease of version comparison in Matplotlib by adding either a `version_info` tuple or a `LooseVersion` instance in addition to the existing `__version__` attribute. The provided search results contain the `__getattr__` function which handles the retrieval of `__version__`. This function dynamically determines the version using setuptools_scm or from the _version.py file. This already addresses part of the issue by providing a version string that can be accessed via `__version__`. To fully address the issue, additional attributes such as `version_info` or `LooseVersion` need to be introduced. No existing code spans directly address the addition of these new attributes, but the `__getattr__` function provides a good entry point for adding these attributes. Therefore, while the existing code does not directly solve the new feature request, it provides context that can be expanded upon to implement the proposed changes.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "scratch_pad": "The current state indicates that the `__getattr__` function in `lib/matplotlib/__init__.py` is responsible for dynamically setting the `__version__` attribute. This function uses `setuptools_scm` to manage the versioning, which implies that extending version management capabilities to include `version_info` or `LooseVersion` should be done in close proximity to this function. Since no existing code directly addresses the addition of these new attributes, the next step involves formulating a plan to add the new attributes within the same context. Therefore, the focus should shift towards understanding how to implement `version_info` or `LooseVersion` attributes in the `__init__.py` file while leveraging the existing version management infrastructure.",
            "search_requests": []
          },
          "output": {
            "message": "The current state indicates that the `__getattr__` function in `lib/matplotlib/__init__.py` is responsible for dynamically setting the `__version__` attribute. This function uses `setuptools_scm` to manage the versioning, which implies that extending version management capabilities to include `version_info` or `LooseVersion` should be done in close proximity to this function. Since no existing code directly addresses the addition of these new attributes, the next step involves formulating a plan to add the new attributes within the same context. Therefore, the focus should shift towards understanding how to implement `version_info` or `LooseVersion` attributes in the `__init__.py` file while leveraging the existing version management infrastructure."
          },
          "input_tokens": 4974,
          "output_tokens": 183,
          "retry_message": null,
          "completion_cost": 0.017667000000000002
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "The current state indicates that the `__getattr__` function in `lib/matplotlib/__init__.py` is responsible for dynamically setting the `__version__` attribute. This function uses `setuptools_scm` to manage the versioning, which implies that extending version management capabilities to include `version_info` or `LooseVersion` should be done in close proximity to this function. Since no existing code directly addresses the addition of these new attributes, the next step involves formulating a plan to add the new attributes within the same context. Therefore, the focus should shift towards understanding how to implement `version_info` or `LooseVersion` attributes in the `__init__.py` file while leveraging the existing version management infrastructure.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": null,
            "file_path": "lib/matplotlib/__init__.py",
            "scratch_pad": "To address the issue, we need to add a `version_info` tuple or a `LooseVersion` instance in the `__init__.py` file. We can leverage the existing version management infrastructure provided by `setuptools_scm`. Starting with a `version_info` tuple as it is more common and simpler to understand. This will involve modifying the `__getattr__` function to include the new attribute.",
            "instructions": "Add a `version_info` tuple attribute to the `__init__.py` file. This tuple should be generated using the version string from `setuptools_scm` and split into its components (major, minor, patch, etc.). Ensure that this attribute is accessible in a similar way to `__version__`."
          },
          "output": null,
          "input_tokens": 1587,
          "output_tokens": 208,
          "retry_message": "You must either provide an apply_change action or finish.",
          "completion_cost": 0.007881
        },
        {
          "action": {
            "action": "apply_change",
            "finish": null,
            "reject": null,
            "span_id": null,
            "file_path": "lib/matplotlib/__init__.py",
            "scratch_pad": "The proposed solution is to add a `version_info` tuple to the `__init__.py` file. This tuple will be generated from the version string provided by `setuptools_scm`, ensuring that it includes components like major, minor, and patch numbers. By doing so, we enable easy comparison of version numbers directly in the code without needing to parse the version string manually each time.",
            "instructions": "Modify the `lib/matplotlib/__init__.py` file to include a `version_info` tuple. This tuple should be derived from the `__version__` attribute provided by `setuptools_scm`. Ensure that the version components are correctly parsed and separated into a tuple format for easy comparison. This new attribute should be accessible alongside `__version__`."
          },
          "output": null,
          "input_tokens": 1828,
          "output_tokens": 226,
          "retry_message": "You must either provide an apply_change action or finish.",
          "completion_cost": 0.008874
        },
        {
          "action": {
            "action": "apply_change",
            "finish": null,
            "reject": null,
            "span_id": null,
            "file_path": "lib/matplotlib/__init__.py",
            "scratch_pad": "Since the `__getattr__` function in `lib/matplotlib/__init__.py` is already responsible for managing `__version__`, it makes sense to extend its functionality to additionally include `version_info`. This approach keeps the version management logic consolidated in one place and leverages the existing infrastructure for versioning.",
            "instructions": "Extend the `__getattr__` function in `lib/matplotlib/__init__.py` to handle a `version_info` attribute. This new attribute should split the `__version__` string into a tuple of version components (major, minor, patch, etc.), suitable for direct comparison. Ensure that this enhancement does not disrupt the existing functionality of providing `__version__`."
          },
          "output": null,
          "input_tokens": 2073,
          "output_tokens": 216,
          "retry_message": "You must either provide an apply_change action or finish.",
          "completion_cost": 0.009459
        }
      ]
    }
  ],
  "initial_message": "Add easily comparable version info to toplevel\n<!--\r\nWelcome! Thanks for thinking of a way to improve Matplotlib.\r\n\r\n\r\nBefore creating a new feature request please search the issues for relevant feature requests.\r\n-->\r\n\r\n### Problem\r\n\r\nCurrently matplotlib only exposes `__version__`.  For quick version checks, exposing either a `version_info` tuple (which can be compared with other tuples) or a `LooseVersion` instance (which can be properly compared with other strings) would be a small usability improvement.\r\n\r\n(In practice I guess boring string comparisons will work just fine until we hit mpl 3.10 or 4.10 which is unlikely to happen soon, but that feels quite dirty :))\r\n<!--\r\nProvide a clear and concise description of the problem this feature will solve. \r\n\r\nFor example:\r\n* I'm always frustrated when [...] because [...]\r\n* I would like it if [...] happened when I [...] because [...]\r\n* Here is a sample image of what I am asking for [...]\r\n-->\r\n\r\n### Proposed Solution\r\n\r\nI guess I slightly prefer `LooseVersion`, but exposing just a `version_info` tuple is much more common in other packages (and perhaps simpler to understand).  The hardest(?) part is probably just bikeshedding this point :-)\r\n<!-- Provide a clear and concise description of a way to accomplish what you want. For example:\r\n\r\n* Add an option so that when [...]  [...] will happen\r\n -->\r\n\r\n### Additional context and prior art\r\n\r\n`version_info` is a pretty common thing (citation needed).\r\n<!-- Add any other context or screenshots about the feature request here. You can also include links to examples of other programs that have something similar to your request. For example:\r\n\r\n* Another project [...] solved this by [...]\r\n-->\r\n\n"
}