{
  "info": {
    "duration": 431.9678339958191,
    "submission": "diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py\nindex b657a35cf7..c40ae7a1ff 100644\n--- a/lib/matplotlib/__init__.py\n+++ b/lib/matplotlib/__init__.py\n@@ -148,6 +148,15 @@ def __getattr__(name):\n         else:  # Get the version from the _version.py setuptools_scm file.\n             __version__ = _version.version\n         return __version__\n+    elif name == \"version_info\":\n+        version_pattern = r\"(\\d+)\\.(\\d+)\\.(\\d+)(?:\\.(\\w+))?\"\n+        match = re.match(version_pattern, __version__)\n+        if match:\n+            major, minor, patch, *extras = match.groups()\n+            version_info = (int(major), int(minor), int(patch), *extras)\n+            return version_info\n+        else:\n+            raise AttributeError(f\"Unable to parse version string: {__version__}\")\n     raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n \n \n",
    "total_cost": 0.11902800000000001,
    "instance_id": "matplotlib__matplotlib-18869",
    "evaluation_name": "temperature_sweep_250_samples_50_problems_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue requires adding easily comparable version info to the top-level of Matplotlib. The commonly used attribute `__version__` should be supplemented with either a `version_info` tuple or a `LooseVersion` instance to facilitate straightforward version comparisons. Given the context provided and the stated preference for `version_info` if only by its common prevalence in other software projects, the `lib/matplotlib/__init__.py` file seems to be the most likely location to implement this change. However, since no code relating to version management or definition was found in the provided file context, we must perform a search targeting the existing versioning system to determine the appropriate file and location for this new feature addition.",
            "search_requests": [
              {
                "query": "versioning system in matplotlib",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "lib/matplotlib/**/*.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 283,
                "span_id": "imports",
                "file_path": "lib/matplotlib/__init__.py"
              },
              {
                "rank": 1,
                "tokens": 147,
                "span_id": "_check_versions",
                "file_path": "lib/matplotlib/__init__.py"
              },
              {
                "rank": 2,
                "tokens": 184,
                "span_id": "__getattr__",
                "file_path": "lib/matplotlib/__init__.py"
              },
              {
                "rank": 3,
                "tokens": 376,
                "span_id": "matplotlib_fname",
                "file_path": "lib/matplotlib/__init__.py"
              },
              {
                "rank": 4,
                "tokens": 547,
                "span_id": "docstring",
                "file_path": "lib/matplotlib/__init__.py"
              },
              {
                "rank": 7,
                "tokens": 1140,
                "span_id": "_get_executable_info",
                "file_path": "lib/matplotlib/__init__.py"
              },
              {
                "rank": 9,
                "tokens": 915,
                "span_id": "_preprocess_data",
                "file_path": "lib/matplotlib/__init__.py"
              },
              {
                "rank": 9,
                "tokens": 36,
                "span_id": "impl:41",
                "file_path": "lib/matplotlib/__init__.py"
              },
              {
                "rank": 11,
                "tokens": 153,
                "span_id": "impl:9",
                "file_path": "lib/matplotlib/__init__.py"
              },
              {
                "rank": 17,
                "tokens": 209,
                "span_id": "_init_tests",
                "file_path": "lib/matplotlib/__init__.py"
              },
              {
                "rank": 5,
                "tokens": 26,
                "span_id": "docstring",
                "file_path": "lib/matplotlib/backends/__init__.py"
              },
              {
                "rank": 6,
                "tokens": 507,
                "span_id": "docstring",
                "file_path": "lib/matplotlib/pyplot.py"
              },
              {
                "rank": 21,
                "tokens": 49,
                "span_id": "findobj",
                "file_path": "lib/matplotlib/pyplot.py"
              },
              {
                "rank": 10,
                "tokens": 179,
                "span_id": "imports",
                "file_path": "lib/matplotlib/axes/_base.py"
              },
              {
                "rank": 12,
                "tokens": 11,
                "span_id": "impl",
                "file_path": "lib/matplotlib/axes/__init__.py"
              },
              {
                "rank": 14,
                "tokens": 870,
                "span_id": "impl:153",
                "file_path": "lib/matplotlib/_cm.py"
              },
              {
                "rank": 15,
                "tokens": 14,
                "span_id": "imports",
                "file_path": "lib/matplotlib/style/__init__.py"
              },
              {
                "rank": 16,
                "tokens": 277,
                "span_id": "imports",
                "file_path": "lib/matplotlib/axes/_axes.py"
              },
              {
                "rank": 19,
                "tokens": 52,
                "span_id": "_quote_escape_attrib",
                "file_path": "lib/matplotlib/backends/backend_svg.py"
              },
              {
                "rank": 19,
                "tokens": 56,
                "span_id": "escape_attrib",
                "file_path": "lib/matplotlib/backends/backend_svg.py"
              },
              {
                "rank": 19,
                "tokens": 489,
                "span_id": "imports",
                "file_path": "lib/matplotlib/backends/backend_svg.py"
              },
              {
                "rank": 19,
                "tokens": 38,
                "span_id": "escape_cdata",
                "file_path": "lib/matplotlib/backends/backend_svg.py"
              },
              {
                "rank": 19,
                "tokens": 13,
                "span_id": "impl:5",
                "file_path": "lib/matplotlib/backends/backend_svg.py"
              },
              {
                "rank": 19,
                "tokens": 21,
                "span_id": "escape_comment",
                "file_path": "lib/matplotlib/backends/backend_svg.py"
              },
              {
                "rank": 19,
                "tokens": 49,
                "span_id": "short_float_fmt",
                "file_path": "lib/matplotlib/backends/backend_svg.py"
              },
              {
                "rank": 20,
                "tokens": 110,
                "span_id": "impl:18",
                "file_path": "lib/matplotlib/_cm_listed.py"
              }
            ],
            "search_requests": [
              {
                "query": "versioning system in matplotlib",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "lib/matplotlib/**/*.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 4021,
          "output_tokens": 236,
          "retry_message": null,
          "completion_cost": 0.015603
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 283,
            "span_id": "imports",
            "file_path": "lib/matplotlib/__init__.py"
          },
          {
            "rank": 1,
            "tokens": 147,
            "span_id": "_check_versions",
            "file_path": "lib/matplotlib/__init__.py"
          },
          {
            "rank": 2,
            "tokens": 184,
            "span_id": "__getattr__",
            "file_path": "lib/matplotlib/__init__.py"
          },
          {
            "rank": 3,
            "tokens": 376,
            "span_id": "matplotlib_fname",
            "file_path": "lib/matplotlib/__init__.py"
          },
          {
            "rank": 4,
            "tokens": 547,
            "span_id": "docstring",
            "file_path": "lib/matplotlib/__init__.py"
          },
          {
            "rank": 5,
            "tokens": 26,
            "span_id": "docstring",
            "file_path": "lib/matplotlib/backends/__init__.py"
          },
          {
            "rank": 6,
            "tokens": 507,
            "span_id": "docstring",
            "file_path": "lib/matplotlib/pyplot.py"
          },
          {
            "rank": 7,
            "tokens": 1140,
            "span_id": "_get_executable_info",
            "file_path": "lib/matplotlib/__init__.py"
          },
          {
            "rank": 9,
            "tokens": 915,
            "span_id": "_preprocess_data",
            "file_path": "lib/matplotlib/__init__.py"
          },
          {
            "rank": 9,
            "tokens": 36,
            "span_id": "impl:41",
            "file_path": "lib/matplotlib/__init__.py"
          },
          {
            "rank": 10,
            "tokens": 179,
            "span_id": "imports",
            "file_path": "lib/matplotlib/axes/_base.py"
          },
          {
            "rank": 11,
            "tokens": 153,
            "span_id": "impl:9",
            "file_path": "lib/matplotlib/__init__.py"
          },
          {
            "rank": 12,
            "tokens": 11,
            "span_id": "impl",
            "file_path": "lib/matplotlib/axes/__init__.py"
          },
          {
            "rank": 14,
            "tokens": 870,
            "span_id": "impl:153",
            "file_path": "lib/matplotlib/_cm.py"
          },
          {
            "rank": 15,
            "tokens": 14,
            "span_id": "imports",
            "file_path": "lib/matplotlib/style/__init__.py"
          },
          {
            "rank": 16,
            "tokens": 277,
            "span_id": "imports",
            "file_path": "lib/matplotlib/axes/_axes.py"
          },
          {
            "rank": 17,
            "tokens": 209,
            "span_id": "_init_tests",
            "file_path": "lib/matplotlib/__init__.py"
          },
          {
            "rank": 19,
            "tokens": 52,
            "span_id": "_quote_escape_attrib",
            "file_path": "lib/matplotlib/backends/backend_svg.py"
          },
          {
            "rank": 19,
            "tokens": 56,
            "span_id": "escape_attrib",
            "file_path": "lib/matplotlib/backends/backend_svg.py"
          },
          {
            "rank": 19,
            "tokens": 489,
            "span_id": "imports",
            "file_path": "lib/matplotlib/backends/backend_svg.py"
          },
          {
            "rank": 19,
            "tokens": 38,
            "span_id": "escape_cdata",
            "file_path": "lib/matplotlib/backends/backend_svg.py"
          },
          {
            "rank": 19,
            "tokens": 13,
            "span_id": "impl:5",
            "file_path": "lib/matplotlib/backends/backend_svg.py"
          },
          {
            "rank": 19,
            "tokens": 21,
            "span_id": "escape_comment",
            "file_path": "lib/matplotlib/backends/backend_svg.py"
          },
          {
            "rank": 19,
            "tokens": 49,
            "span_id": "short_float_fmt",
            "file_path": "lib/matplotlib/backends/backend_svg.py"
          },
          {
            "rank": 20,
            "tokens": 110,
            "span_id": "impl:18",
            "file_path": "lib/matplotlib/_cm_listed.py"
          },
          {
            "rank": 21,
            "tokens": 49,
            "span_id": "findobj",
            "file_path": "lib/matplotlib/pyplot.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue requests the addition of easily comparable version info to the top-level of Matplotlib, specifically suggesting either a `version_info` tuple or a `LooseVersion` instance. This would enhance usability for quick version checks. The search results provide several relevant sections from `lib/matplotlib/__init__.py`. Notably, the `__getattr__` span defines how `__version__` is handled and dynamically retrieved using `setuptools_scm`. This section is relevant as it directly relates to version information handling. Additionally, the `_check_versions` span checks module versions at runtime, which is indirectly related to version management. The remaining spans in `lib/matplotlib/__init__.py` appear to be less relevant to the task at hand, focusing on various initialization and utility functions. Given these findings, the most pertinent span is `__getattr__`, focusing on version retrieval. Other spans might be useful for context but do not directly contribute to solving the issue of adding a `version_info` tuple or `LooseVersion` instance.",
            "identified_spans": [
              {
                "span_ids": [
                  "__getattr__",
                  "_check_versions"
                ],
                "file_path": "lib/matplotlib/__init__.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 12978,
          "output_tokens": 294,
          "retry_message": null,
          "completion_cost": 0.043344
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": false,
            "scratch_pad": "The issue requires adding easily comparable version info to the top-level of Matplotlib. The commonly used attribute `__version__` should be supplemented with either a `version_info` tuple or a `LooseVersion` instance to facilitate straightforward version comparisons. Given the context provided and the stated preference for `version_info` if only by its common prevalence in other software projects, the `lib/matplotlib/__init__.py` file seems to be the most likely location to implement this change. However, since no code relating to version management or definition was found in the provided file context, we must perform a search targeting the existing versioning system to determine the appropriate file and location for this new feature addition.",
            "search_suggestions": "Search for existing version management or definition in the Matplotlib codebase to identify where the `version_info` or `LooseVersion` should be added."
          },
          "output": {
            "message": "Search for existing version management or definition in the Matplotlib codebase to identify where the `version_info` or `LooseVersion` should be added."
          },
          "input_tokens": 2020,
          "output_tokens": 215,
          "retry_message": null,
          "completion_cost": 0.009285
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Search for existing version management or definition in the Matplotlib codebase to identify where the `version_info` or `LooseVersion` should be added.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "scratch_pad": "The existing code snippet provided in `lib/matplotlib/__init__.py` already includes a mechanism to dynamically set the `__version__` attribute using `setuptools_scm`. This demonstrates that the version management functionality is centrally located within this file. Given this context, the next logical step would be to extend this existing mechanism to also include a `version_info` tuple or a `LooseVersion` instance. The initial search suggests that the necessary modifications should be made within `lib/matplotlib/__init__.py`, expanding on the version handling logic already in place.",
            "search_requests": []
          },
          "output": {
            "message": "The existing code snippet provided in `lib/matplotlib/__init__.py` already includes a mechanism to dynamically set the `__version__` attribute using `setuptools_scm`. This demonstrates that the version management functionality is centrally located within this file. Given this context, the next logical step would be to extend this existing mechanism to also include a `version_info` tuple or a `LooseVersion` instance. The initial search suggests that the necessary modifications should be made within `lib/matplotlib/__init__.py`, expanding on the version handling logic already in place."
          },
          "input_tokens": 4986,
          "output_tokens": 147,
          "retry_message": null,
          "completion_cost": 0.017163
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "The existing code snippet provided in `lib/matplotlib/__init__.py` already includes a mechanism to dynamically set the `__version__` attribute using `setuptools_scm`. This demonstrates that the version management functionality is centrally located within this file. Given this context, the next logical step would be to extend this existing mechanism to also include a `version_info` tuple or a `LooseVersion` instance. The initial search suggests that the necessary modifications should be made within `lib/matplotlib/__init__.py`, expanding on the version handling logic already in place.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "__getattr__",
            "file_path": "lib/matplotlib/__init__.py",
            "scratch_pad": "To address the issue, we need to extend the existing version handling in `lib/matplotlib/__init__.py` to include a `version_info` tuple. This will allow for easy comparison of version information. The existing mechanism using `setuptools_scm` to set `__version__` provides a good foundation to build upon.",
            "instructions": "Add a new attribute `version_info` to the module. This attribute will be a tuple derived from the `__version__` string. The tuple should include the major, minor, and patch components of the version number, with any additional components included as a single element at the end if they exist. The function should first ensure that `__version__` is available, and then use a regular expression to parse the version string into its components."
          },
          "output": {
            "span_id": "__getattr__",
            "end_line": 151,
            "file_path": "lib/matplotlib/__init__.py",
            "start_line": 133,
            "instructions": "Add a new attribute `version_info` to the module. This attribute will be a tuple derived from the `__version__` string. The tuple should include the major, minor, and patch components of the version number, with any additional components included as a single element at the end if they exist. The function should first ensure that `__version__` is available, and then use a regular expression to parse the version string into its components."
          },
          "input_tokens": 2291,
          "output_tokens": 219,
          "retry_message": null,
          "completion_cost": 0.010158
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "__getattr__",
        "end_line": 151,
        "file_path": "lib/matplotlib/__init__.py",
        "max_tokens": 1000,
        "start_line": 133,
        "temperature": 1.6,
        "instructions": "Add a new attribute `version_info` to the module. This attribute will be a tuple derived from the `__version__` string. The tuple should include the major, minor, and patch components of the version number, with any additional components included as a single element at the end if they exist. The function should first ensure that `__version__` is available, and then use a regular expression to parse the version string into its components.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\ndef __getattr__(name):\n    if name == \"__version__\":\n        import setuptools_scm\n        global __version__  # cache it.\n        # Only shell out to a git subprocess if really needed, and not on a\n        # shallow clone, such as those used by CI, as the latter would trigger\n        # a warning from setuptools_scm.\n        root = Path(__file__).resolve().parents[2]\n        if (root / \".git\").exists() and not (root / \".git/shallow\").exists():\n            __version__ = setuptools_scm.get_version(\n                root=root,\n                version_scheme=\"post-release\",\n                local_scheme=\"node-and-date\",\n                fallback_version=_version.version,\n            )\n        else:  # Get the version from the _version.py setuptools_scm file.\n            __version__ = _version.version\n        return __version__\n    elif name == \"version_info\":\n        version_pattern = r\"(\\d+)\\.(\\d+)\\.(\\d+)(?:\\.(\\w+))?\"\n        match = re.match(version_pattern, __version__)\n        if match:\n            major, minor, patch, *extras = match.groups()\n            version_info = (int(major), int(minor), int(patch), *extras)\n            return version_info\n        else:\n            raise AttributeError(f\"Unable to parse version string: {__version__}\")\n    raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n</replace>"
          },
          "output": {
            "diff": "--- lib/matplotlib/__init__.py\n+++ lib/matplotlib/__init__.py\n@@ -148,6 +148,15 @@\n         else:  # Get the version from the _version.py setuptools_scm file.\n             __version__ = _version.version\n         return __version__\n+    elif name == \"version_info\":\n+        version_pattern = r\"(\\d+)\\.(\\d+)\\.(\\d+)(?:\\.(\\w+))?\"\n+        match = re.match(version_pattern, __version__)\n+        if match:\n+            major, minor, patch, *extras = match.groups()\n+            version_info = (int(major), int(minor), int(patch), *extras)\n+            return version_info\n+        else:\n+            raise AttributeError(f\"Unable to parse version string: {__version__}\")\n     raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n \n \n",
            "message": "Applied the change to lib/matplotlib/__init__.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 2153,
          "output_tokens": 371,
          "retry_message": null,
          "completion_cost": 0.012024
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- lib/matplotlib/__init__.py\n+++ lib/matplotlib/__init__.py\n@@ -148,6 +148,15 @@\n         else:  # Get the version from the _version.py setuptools_scm file.\n             __version__ = _version.version\n         return __version__\n+    elif name == \"version_info\":\n+        version_pattern = r\"(\\d+)\\.(\\d+)\\.(\\d+)(?:\\.(\\w+))?\"\n+        match = re.match(version_pattern, __version__)\n+        if match:\n+            major, minor, patch, *extras = match.groups()\n+            version_info = (int(major), int(minor), int(patch), *extras)\n+            return version_info\n+        else:\n+            raise AttributeError(f\"Unable to parse version string: {__version__}\")\n     raise AttributeError(f\"module {__name__!r} has no attribute {name!r}\")\n \n \n",
        "model": "deepseek-coder",
        "message": "Applied the change to lib/matplotlib/__init__.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The modification has been successfully applied, addressing the issue by adding a `version_info` tuple for easy version comparison. The changes adhere to the requirements and enhance the usability of the version information.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The modification to add a `version_info` tuple has been successfully applied. This addition allows for easy comparison of version information, aligning with the proposed solution in the issue. The version string is parsed using a regular expression and converted into a tuple that can be directly used for comparisons. This change leverages the existing `__version__` attribute and extends its functionality without introducing significant complexity.",
            "instructions": null
          },
          "output": {
            "message": "The modification has been successfully applied, addressing the issue by adding a `version_info` tuple for easy version comparison. The changes adhere to the requirements and enhance the usability of the version information."
          },
          "input_tokens": 2927,
          "output_tokens": 178,
          "retry_message": null,
          "completion_cost": 0.011451000000000001
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The modification has been successfully applied, addressing the issue by adding a `version_info` tuple for easy version comparison. The changes adhere to the requirements and enhance the usability of the version information.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Add easily comparable version info to toplevel\n<!--\r\nWelcome! Thanks for thinking of a way to improve Matplotlib.\r\n\r\n\r\nBefore creating a new feature request please search the issues for relevant feature requests.\r\n-->\r\n\r\n### Problem\r\n\r\nCurrently matplotlib only exposes `__version__`.  For quick version checks, exposing either a `version_info` tuple (which can be compared with other tuples) or a `LooseVersion` instance (which can be properly compared with other strings) would be a small usability improvement.\r\n\r\n(In practice I guess boring string comparisons will work just fine until we hit mpl 3.10 or 4.10 which is unlikely to happen soon, but that feels quite dirty :))\r\n<!--\r\nProvide a clear and concise description of the problem this feature will solve. \r\n\r\nFor example:\r\n* I'm always frustrated when [...] because [...]\r\n* I would like it if [...] happened when I [...] because [...]\r\n* Here is a sample image of what I am asking for [...]\r\n-->\r\n\r\n### Proposed Solution\r\n\r\nI guess I slightly prefer `LooseVersion`, but exposing just a `version_info` tuple is much more common in other packages (and perhaps simpler to understand).  The hardest(?) part is probably just bikeshedding this point :-)\r\n<!-- Provide a clear and concise description of a way to accomplish what you want. For example:\r\n\r\n* Add an option so that when [...]  [...] will happen\r\n -->\r\n\r\n### Additional context and prior art\r\n\r\n`version_info` is a pretty common thing (citation needed).\r\n<!-- Add any other context or screenshots about the feature request here. You can also include links to examples of other programs that have something similar to your request. For example:\r\n\r\n* Another project [...] solved this by [...]\r\n-->\r\n\n"
}