{
  "info": {
    "duration": 169.98098516464233,
    "submission": "diff --git a/pylint/config/config_initialization.py b/pylint/config/config_initialization.py\nindex 24e453a73..32e1f898b 100644\n--- a/pylint/config/config_initialization.py\n+++ b/pylint/config/config_initialization.py\n@@ -57,6 +57,11 @@ def _config_initialization(\n     except _UnrecognizedOptionError as exc:\n         msg = \", \".join(exc.options)\n         linter.add_message(\"unrecognized-option\", line=0, args=msg)\n+        print(\n+            f\"usage: pylint [-h] [-v] [-V] [more options; see below]\\n\"\n+            f\"pylint: error: unrecognized arguments: -{msg}\"\n+        )\n+        sys.exit(32)\n \n     # Then, if a custom reporter is provided as argument, it may be overridden\n     # by file parameters, so we re-set it here. We do this before command line\n",
    "total_cost": 0.147096,
    "instance_id": "pylint-dev__pylint-6506",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue relates to how Pylint handles unrecognized command-line options, specifically resulting in a traceback instead of a user-friendly error message. The trace provided points to the `_UnrecognizedOptionError` being raised in `pylint/config/config_initialization.py`. To address this, the primary focus should be on the configuration and option parsing logic in the `pylint/config` directory. Additionally, checking the command-line argument handling in `pylint/lint/run.py` and the main entry point `pylint/__main__.py` will help ensure proper error handling for unrecognized options.",
            "search_requests": [
              {
                "query": "_UnrecognizedOptionError",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "pylint/config/**/*.py",
                "function_names": []
              },
              {
                "query": "handle unrecognized options",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "pylint/lint/run.py",
                "function_names": []
              },
              {
                "query": "command-line options",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "pylint/__main__.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 24,
                "span_id": "_UnrecognizedOptionError",
                "file_path": "pylint/config/exceptions.py"
              },
              {
                "rank": 0,
                "tokens": 18,
                "span_id": "ArgumentPreprocessingError",
                "file_path": "pylint/config/exceptions.py"
              },
              {
                "rank": 0,
                "tokens": 68,
                "span_id": "docstring",
                "file_path": "pylint/config/exceptions.py"
              },
              {
                "rank": 0,
                "tokens": 31,
                "span_id": "UnrecognizedArgumentAction",
                "file_path": "pylint/config/exceptions.py"
              },
              {
                "rank": 0,
                "tokens": 29,
                "span_id": "_UnrecognizedOptionError.__init__",
                "file_path": "pylint/config/exceptions.py"
              },
              {
                "rank": 1,
                "tokens": 119,
                "span_id": "docstring",
                "file_path": "pylint/config/arguments_provider.py"
              },
              {
                "rank": 1,
                "tokens": 22,
                "span_id": "UnsupportedAction",
                "file_path": "pylint/config/arguments_provider.py"
              },
              {
                "rank": 1,
                "tokens": 60,
                "span_id": "UnsupportedAction.__init__",
                "file_path": "pylint/config/arguments_provider.py"
              },
              {
                "rank": 2,
                "tokens": 20,
                "span_id": "Option:17",
                "file_path": "pylint/config/option.py"
              },
              {
                "rank": 0,
                "tokens": 189,
                "span_id": "docstring",
                "file_path": "pylint/lint/run.py"
              },
              {
                "rank": 1,
                "tokens": 61,
                "span_id": "Run",
                "file_path": "pylint/lint/run.py"
              },
              {
                "rank": 2,
                "tokens": 120,
                "span_id": "_cpu_count",
                "file_path": "pylint/lint/run.py"
              },
              {
                "rank": 2,
                "tokens": 8,
                "span_id": "impl:5",
                "file_path": "pylint/lint/run.py"
              },
              {
                "rank": 0,
                "tokens": 82,
                "span_id": "docstring",
                "file_path": "pylint/__main__.py"
              }
            ],
            "search_requests": [
              {
                "query": "_UnrecognizedOptionError",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "pylint/config/**/*.py",
                "function_names": []
              },
              {
                "query": "handle unrecognized options",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "pylint/lint/run.py",
                "function_names": []
              },
              {
                "query": "command-line options",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "pylint/__main__.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 3460,
          "output_tokens": 269,
          "retry_message": null,
          "completion_cost": 0.014415
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 24,
            "span_id": "_UnrecognizedOptionError",
            "file_path": "pylint/config/exceptions.py"
          },
          {
            "rank": 0,
            "tokens": 18,
            "span_id": "ArgumentPreprocessingError",
            "file_path": "pylint/config/exceptions.py"
          },
          {
            "rank": 0,
            "tokens": 68,
            "span_id": "docstring",
            "file_path": "pylint/config/exceptions.py"
          },
          {
            "rank": 0,
            "tokens": 31,
            "span_id": "UnrecognizedArgumentAction",
            "file_path": "pylint/config/exceptions.py"
          },
          {
            "rank": 0,
            "tokens": 29,
            "span_id": "_UnrecognizedOptionError.__init__",
            "file_path": "pylint/config/exceptions.py"
          },
          {
            "rank": 1,
            "tokens": 119,
            "span_id": "docstring",
            "file_path": "pylint/config/arguments_provider.py"
          },
          {
            "rank": 1,
            "tokens": 22,
            "span_id": "UnsupportedAction",
            "file_path": "pylint/config/arguments_provider.py"
          },
          {
            "rank": 1,
            "tokens": 60,
            "span_id": "UnsupportedAction.__init__",
            "file_path": "pylint/config/arguments_provider.py"
          },
          {
            "rank": 2,
            "tokens": 20,
            "span_id": "Option:17",
            "file_path": "pylint/config/option.py"
          },
          {
            "rank": 0,
            "tokens": 189,
            "span_id": "docstring",
            "file_path": "pylint/lint/run.py"
          },
          {
            "rank": 1,
            "tokens": 61,
            "span_id": "Run",
            "file_path": "pylint/lint/run.py"
          },
          {
            "rank": 2,
            "tokens": 120,
            "span_id": "_cpu_count",
            "file_path": "pylint/lint/run.py"
          },
          {
            "rank": 2,
            "tokens": 8,
            "span_id": "impl:5",
            "file_path": "pylint/lint/run.py"
          },
          {
            "rank": 0,
            "tokens": 82,
            "span_id": "docstring",
            "file_path": "pylint/__main__.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about a traceback being printed when an unrecognized option is passed to pylint. The expected behavior is to provide a user-friendly error message without the traceback. From the search results, the relevant code spans appear to be in the `exceptions.py` file, specifically the `_UnrecognizedOptionError` class and its `__init__` method, which is responsible for raising the error when an unrecognized option is found. Additionally, the `run.py` file shows the context in which the error is raised, including the `Run` class and its `__init__` method where the error is handled and potentially where the user-friendly message should be implemented if it isn't already. These code spans are directly related to the issue of handling unrecognized options and raising appropriate errors.",
            "identified_spans": [
              {
                "span_ids": [
                  "_UnrecognizedOptionError",
                  "_UnrecognizedOptionError.__init__"
                ],
                "file_path": "pylint/config/exceptions.py"
              },
              {
                "span_ids": [
                  "Run",
                  "Run.__init__"
                ],
                "file_path": "pylint/lint/run.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4035,
          "output_tokens": 297,
          "retry_message": null,
          "completion_cost": 0.01656
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The provided file context includes the relevant file where the `_UnrecognizedOptionError` is defined (`pylint/config/exceptions.py`) and the main run logic (`pylint/lint/run.py`), which handles the command-line arguments and option parsing. This context is sufficient for identifying and potentially modifying the error handling for unrecognized options. Further details might involve checking the integration between these modules and possibly modifying the error handling in `config_initialization.py`, which isn't included but can be inferred as closely related based on the error trace provided in the issue.",
            "search_suggestions": "Consider reviewing the `pylint/config/config_initialization.py` file for additional context on how options are parsed and how errors are raised. This might provide further insights into implementing a more user-friendly error message for unrecognized options."
          },
          "output": {
            "message": "Consider reviewing the `pylint/config/config_initialization.py` file for additional context on how options are parsed and how errors are raised. This might provide further insights into implementing a more user-friendly error message for unrecognized options."
          },
          "input_tokens": 2787,
          "output_tokens": 211,
          "retry_message": null,
          "completion_cost": 0.011526000000000002
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Consider reviewing the `pylint/config/config_initialization.py` file for additional context on how options are parsed and how errors are raised. This might provide further insights into implementing a more user-friendly error message for unrecognized options.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The `pylint/lint/run.py` file provides a lot of context on how the Pylint command-line arguments are processed and how the Linter instance is configured. Notably, the `_config_initialization` function is called, which likely interacts with the `_UnrecognizedOptionError` from `pylint/config/exceptions.py`. This error is raised when unrecognized options are encountered. Given the context provided, it's clear that improving the error handling for unrecognized options should focus on enhancing the messaging in `_UnrecognizedOptionError` and ensuring that this error is caught and handled in a user-friendly way in `pylint/lint/run.py`. Additionally, it would be beneficial to review the `pylint/config/config_initialization.py` file to understand how options are parsed and errors are raised.",
            "search_requests": [
              {
                "query": "handle unrecognized options",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "pylint/config/config_initialization.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 123,
                "span_id": "docstring",
                "file_path": "pylint/config/config_initialization.py"
              },
              {
                "rank": 0,
                "tokens": 668,
                "span_id": "_config_initialization",
                "file_path": "pylint/config/config_initialization.py"
              }
            ],
            "search_requests": [
              {
                "query": "handle unrecognized options",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "pylint/config/config_initialization.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 5114,
          "output_tokens": 278,
          "retry_message": null,
          "completion_cost": 0.019512
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 123,
            "span_id": "docstring",
            "file_path": "pylint/config/config_initialization.py"
          },
          {
            "rank": 0,
            "tokens": 668,
            "span_id": "_config_initialization",
            "file_path": "pylint/config/config_initialization.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves a traceback being printed when an unrecognized option is passed to pylint. The key elements to focus on from the issue are the exception `_UnrecognizedOptionError` and its handling during the configuration initialization process. I reviewed the existing context which includes the definition of `_UnrecognizedOptionError` in `pylint/config/exceptions.py` and the usage of this exception within `pylint/lint/run.py`. The new search results contain the function `_config_initialization` in `pylint/config/config_initialization.py` where the exception is raised upon finding unrecognized options. This function processes the command line arguments, parses the configuration file, and handles the unrecognized options by raising an instance of `_UnrecognizedOptionError`. The handling of this exception ensures that the error message is added to the linter and the exception is raised, leading to the traceback mentioned in the issue. Given the context and the new search results, the relevant code spans that handle the unrecognized option and raise the exception have been identified, confirming the traceback scenario described in the issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "_config_initialization"
                ],
                "file_path": "pylint/config/config_initialization.py"
              },
              {
                "span_ids": [
                  "_UnrecognizedOptionError"
                ],
                "file_path": "pylint/config/exceptions.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3598,
          "output_tokens": 352,
          "retry_message": null,
          "completion_cost": 0.016073999999999998
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The `pylint/lint/run.py` file provides a lot of context on how the Pylint command-line arguments are processed and how the Linter instance is configured. Notably, the `_config_initialization` function is called, which likely interacts with the `_UnrecognizedOptionError` from `pylint/config/exceptions.py`. This error is raised when unrecognized options are encountered. Given the context provided, it's clear that improving the error handling for unrecognized options should focus on enhancing the messaging in `_UnrecognizedOptionError` and ensuring that this error is caught and handled in a user-friendly way in `pylint/lint/run.py`. Additionally, it would be beneficial to review the `pylint/config/config_initialization.py` file to understand how options are parsed and errors are raised.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 3949,
          "output_tokens": 221,
          "retry_message": null,
          "completion_cost": 0.015162
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "_config_initialization",
            "file_path": "pylint/config/config_initialization.py",
            "scratch_pad": "To address the issue where a traceback is printed for unrecognized options, we need to modify the handling of the `_UnrecognizedOptionError` exception. Instead of raising the exception, which leads to the traceback, we should handle it gracefully by providing a user-friendly message.",
            "instructions": "Modify the `_config_initialization` function in `pylint/config/config_initialization.py` to handle the `_UnrecognizedOptionError` by printing a user-friendly message and exiting gracefully without raising the exception."
          },
          "output": {
            "span_id": "_config_initialization",
            "file_path": "pylint/config/config_initialization.py",
            "instructions": "Modify the `_config_initialization` function in `pylint/config/config_initialization.py` to handle the `_UnrecognizedOptionError` by printing a user-friendly message and exiting gracefully without raising the exception."
          },
          "input_tokens": 4117,
          "output_tokens": 172,
          "retry_message": null,
          "completion_cost": 0.014931000000000002
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "_config_initialization",
        "end_line": null,
        "file_path": "pylint/config/config_initialization.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Modify the `_config_initialization` function in `pylint/config/config_initialization.py` to handle the `_UnrecognizedOptionError` by printing a user-friendly message and exiting gracefully without raising the exception.\n\nThe instruction specifies modifying the handling of `_UnrecognizedOptionError` in the `_config_initialization` function. The relevant part of the code is handling this exception and raising a message. The task is to change this behavior to print a user-friendly message and exit gracefully without raising the exception.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 60,
            "start_line": 57,
            "scratch_pad": "The instruction specifies modifying the handling of `_UnrecognizedOptionError` in the `_config_initialization` function. The relevant part of the code is handling this exception and raising a message. The task is to change this behavior to print a user-friendly message and exit gracefully without raising the exception."
          },
          "output": {
            "span_id": "_config_initialization",
            "end_line": 64,
            "file_path": "pylint/config/config_initialization.py",
            "start_line": 54,
            "instructions": "Modify the `_config_initialization` function in `pylint/config/config_initialization.py` to handle the `_UnrecognizedOptionError` by printing a user-friendly message and exiting gracefully without raising the exception.\n\nThe instruction specifies modifying the handling of `_UnrecognizedOptionError` in the `_config_initialization` function. The relevant part of the code is handling this exception and raising a message. The task is to change this behavior to print a user-friendly message and exit gracefully without raising the exception."
          },
          "input_tokens": 1648,
          "output_tokens": 99,
          "retry_message": null,
          "completion_cost": 0.006429000000000001
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "_config_initialization",
        "end_line": 64,
        "file_path": "pylint/config/config_initialization.py",
        "max_tokens": 1000,
        "start_line": 54,
        "temperature": 1.6,
        "instructions": "Modify the `_config_initialization` function in `pylint/config/config_initialization.py` to handle the `_UnrecognizedOptionError` by printing a user-friendly message and exiting gracefully without raising the exception.\n\nThe instruction specifies modifying the handling of `_UnrecognizedOptionError` in the `_config_initialization` function. The relevant part of the code is handling this exception and raising a message. The task is to change this behavior to print a user-friendly message and exit gracefully without raising the exception.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n    # First we parse any options from a configuration file\n    try:\n        linter._parse_configuration_file(config_args)\n    except _UnrecognizedOptionError as exc:\n        msg = \", \".join(exc.options)\n        linter.add_message(\"unrecognized-option\", line=0, args=msg)\n        print(\n            f\"usage: pylint [-h] [-v] [-V] [more options; see below]\\n\"\n            f\"pylint: error: unrecognized arguments: -{msg}\"\n        )\n        sys.exit(32)\n\n    # Then, if a custom reporter is provided as argument, it may be overridden\n    # by file parameters, so we re-set it here. We do this before command line\n    # parsing, so it's still overridable by command line options\n    if reporter:\n</replace>"
          },
          "output": {
            "diff": "--- pylint/config/config_initialization.py\n+++ pylint/config/config_initialization.py\n@@ -57,6 +57,11 @@\n     except _UnrecognizedOptionError as exc:\n         msg = \", \".join(exc.options)\n         linter.add_message(\"unrecognized-option\", line=0, args=msg)\n+        print(\n+            f\"usage: pylint [-h] [-v] [-V] [more options; see below]\\n\"\n+            f\"pylint: error: unrecognized arguments: -{msg}\"\n+        )\n+        sys.exit(32)\n \n     # Then, if a custom reporter is provided as argument, it may be overridden\n     # by file parameters, so we re-set it here. We do this before command line\n",
            "message": "Applied the change to pylint/config/config_initialization.py.",
            "verification_errors": []
          },
          "input_tokens": 4478,
          "output_tokens": 204,
          "retry_message": null,
          "completion_cost": 0.016494
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- pylint/config/config_initialization.py\n+++ pylint/config/config_initialization.py\n@@ -57,6 +57,11 @@\n     except _UnrecognizedOptionError as exc:\n         msg = \", \".join(exc.options)\n         linter.add_message(\"unrecognized-option\", line=0, args=msg)\n+        print(\n+            f\"usage: pylint [-h] [-v] [-V] [more options; see below]\\n\"\n+            f\"pylint: error: unrecognized arguments: -{msg}\"\n+        )\n+        sys.exit(32)\n \n     # Then, if a custom reporter is provided as argument, it may be overridden\n     # by file parameters, so we re-set it here. We do this before command line\n",
        "model": "deepseek-coder",
        "message": "Applied the change to pylint/config/config_initialization.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue has been resolved by modifying the handling of `_UnrecognizedOptionError` in `pylint/config/config_initialization.py` to print a user-friendly message and exit gracefully without raising the exception.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The initial change has been applied correctly by handling the `_UnrecognizedOptionError` with a user-friendly message and exiting gracefully. This addresses the issue of printing a traceback for unrecognized options.",
            "instructions": null
          },
          "output": {
            "message": "The issue has been resolved by modifying the handling of `_UnrecognizedOptionError` in `pylint/config/config_initialization.py` to print a user-friendly message and exit gracefully without raising the exception."
          },
          "input_tokens": 4581,
          "output_tokens": 150,
          "retry_message": null,
          "completion_cost": 0.015993
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue has been resolved by modifying the handling of `_UnrecognizedOptionError` in `pylint/config/config_initialization.py` to print a user-friendly message and exit gracefully without raising the exception.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Traceback printed for unrecognized option\n### Bug description\n\nA traceback is printed when an unrecognized option is passed to pylint.\n\n### Configuration\n\n_No response_\n\n### Command used\n\n```shell\npylint -Q\n```\n\n\n### Pylint output\n\n```shell\n************* Module Command line\r\nCommand line:1:0: E0015: Unrecognized option found: Q (unrecognized-option)\r\nTraceback (most recent call last):\r\n  File \"/Users/markbyrne/venv310/bin/pylint\", line 33, in <module>\r\n    sys.exit(load_entry_point('pylint', 'console_scripts', 'pylint')())\r\n  File \"/Users/markbyrne/programming/pylint/pylint/__init__.py\", line 24, in run_pylint\r\n    PylintRun(argv or sys.argv[1:])\r\n  File \"/Users/markbyrne/programming/pylint/pylint/lint/run.py\", line 135, in __init__\r\n    args = _config_initialization(\r\n  File \"/Users/markbyrne/programming/pylint/pylint/config/config_initialization.py\", line 85, in _config_initialization\r\n    raise _UnrecognizedOptionError(options=unrecognized_options)\r\npylint.config.exceptions._UnrecognizedOptionError\n```\n\n\n### Expected behavior\n\nThe top part of the current output is handy:\r\n`Command line:1:0: E0015: Unrecognized option found: Q (unrecognized-option)`\r\n\r\nThe traceback I don't think is expected & not user-friendly.\r\nA usage tip, for example:\r\n```python\r\nmypy -Q\r\nusage: mypy [-h] [-v] [-V] [more options; see below]\r\n            [-m MODULE] [-p PACKAGE] [-c PROGRAM_TEXT] [files ...]\r\nmypy: error: unrecognized arguments: -Q\r\n```\n\n### Pylint version\n\n```shell\npylint 2.14.0-dev0\r\nastroid 2.11.3\r\nPython 3.10.0b2 (v3.10.0b2:317314165a, May 31 2021, 10:02:22) [Clang 12.0.5 (clang-1205.0.22.9)]\n```\n\n\n### OS / Environment\n\n_No response_\n\n### Additional dependencies\n\n_No response_\n"
}