{
  "info": {
    "duration": 169.4586639404297,
    "submission": "diff --git a/django/core/checks/templates.py b/django/core/checks/templates.py\nindex 5214276987..4cfa103cf8 100644\n--- a/django/core/checks/templates.py\n+++ b/django/core/checks/templates.py\n@@ -55,10 +55,18 @@ def check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n     for conf in settings.TEMPLATES:\n         custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n         for module_name, module_path in custom_libraries.items():\n-            libraries[module_name].append(module_path)\n+            if module_name not in libraries:\n+                libraries[module_name].append(module_path)\n+            else:\n+                if module_path not in libraries[module_name]:\n+                    libraries[module_name].append(module_path)\n \n     for module_name, module_path in get_template_tag_modules():\n-        libraries[module_name].append(module_path)\n+        if module_name not in libraries:\n+            libraries[module_name].append(module_path)\n+        else:\n+            if module_path not in libraries[module_name]:\n+                libraries[module_name].append(module_path)\n \n     for library_name, items in libraries.items():\n         if len(items) > 1:\n",
    "total_cost": 0.13365,
    "instance_id": "django__django-15790",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue pertains to a function named check_for_template_tags_with_the_same_name, which is likely part of the Django template system. The error message indicates that there are multiple template tag modules with the same name, which might lead to conflicts. Given the context provided, it's important to look for this function in the Django core checks, specifically within the templates.py file. Additionally, related functions and classes in the django.template namespace might also be relevant, especially those involved in handling template libraries and tags.",
            "search_requests": [
              {
                "query": "check_for_template_tags_with_the_same_name",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/core/checks/templates.py",
                "function_names": [
                  "check_for_template_tags_with_same_name",
                  "get_template_tag_modules"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/template/backends/django.py",
                "function_names": [
                  "get_template_tag_modules",
                  "get_installed_libraries",
                  "get_package_libraries"
                ]
              },
              {
                "query": null,
                "class_names": [
                  "Library"
                ],
                "code_snippet": null,
                "file_pattern": "**/template/library.py",
                "function_names": [
                  "import_library"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/template/defaulttags.py",
                "function_names": [
                  "find_library",
                  "load_from_library"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 124,
                "span_id": "get_template_tag_modules",
                "file_path": "django/template/backends/django.py"
              },
              {
                "rank": 0,
                "tokens": 88,
                "span_id": "get_installed_libraries",
                "file_path": "django/template/backends/django.py"
              },
              {
                "rank": 0,
                "tokens": 109,
                "span_id": "get_package_libraries",
                "file_path": "django/template/backends/django.py"
              },
              {
                "rank": 0,
                "tokens": 57,
                "span_id": "Library",
                "file_path": "django/template/library.py"
              },
              {
                "rank": 0,
                "tokens": 100,
                "span_id": "import_library",
                "file_path": "django/template/library.py"
              },
              {
                "rank": 0,
                "tokens": 63,
                "span_id": "find_library",
                "file_path": "django/template/defaulttags.py"
              },
              {
                "rank": 0,
                "tokens": 116,
                "span_id": "load_from_library",
                "file_path": "django/template/defaulttags.py"
              }
            ],
            "search_requests": [
              {
                "query": "check_for_template_tags_with_the_same_name",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/core/checks/templates.py",
                "function_names": [
                  "check_for_template_tags_with_same_name",
                  "get_template_tag_modules"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/template/backends/django.py",
                "function_names": [
                  "get_template_tag_modules",
                  "get_installed_libraries",
                  "get_package_libraries"
                ]
              },
              {
                "query": null,
                "class_names": [
                  "Library"
                ],
                "code_snippet": null,
                "file_pattern": "**/template/library.py",
                "function_names": [
                  "import_library"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/template/defaulttags.py",
                "function_names": [
                  "find_library",
                  "load_from_library"
                ]
              }
            ]
          },
          "input_tokens": 2958,
          "output_tokens": 394,
          "retry_message": null,
          "completion_cost": 0.014784
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 124,
            "span_id": "get_template_tag_modules",
            "file_path": "django/template/backends/django.py"
          },
          {
            "rank": 0,
            "tokens": 88,
            "span_id": "get_installed_libraries",
            "file_path": "django/template/backends/django.py"
          },
          {
            "rank": 0,
            "tokens": 109,
            "span_id": "get_package_libraries",
            "file_path": "django/template/backends/django.py"
          },
          {
            "rank": 0,
            "tokens": 57,
            "span_id": "Library",
            "file_path": "django/template/library.py"
          },
          {
            "rank": 0,
            "tokens": 100,
            "span_id": "import_library",
            "file_path": "django/template/library.py"
          },
          {
            "rank": 0,
            "tokens": 63,
            "span_id": "find_library",
            "file_path": "django/template/defaulttags.py"
          },
          {
            "rank": 0,
            "tokens": 116,
            "span_id": "load_from_library",
            "file_path": "django/template/defaulttags.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue relates to a potential problem with the function `check_for_template_tags_with_the_same_name` when adding template tag libraries into `TEMPLATES['OPTIONS']['libraries']`. The error suggests that there might be duplicate template tag modules with the same name, which causes the error message 'my_tags' is used for multiple template tag modules. The key elements in the reported issue that need to be addressed in the codebase are: 1. Identifying and managing duplicates in template tag libraries. 2. Incorporating new libraries into the `TEMPLATES` setting without causing conflicts. From the search results, the code spans that are relevant to this issue are those that deal with loading and managing template tag libraries, especially the functions `get_templatetag_libraries`, `get_template_tag_modules`, `get_installed_libraries`, and `get_package_libraries` in 'django/template/backends/django.py', as well as the `find_library` and `load_from_library` functions in 'django/template/defaulttags.py'. These functions are involved in the process of importing, registering, and managing template tag libraries, which directly align with the elements identified in the reported issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "DjangoTemplates.get_templatetag_libraries",
                  "get_template_tag_modules",
                  "get_installed_libraries",
                  "get_package_libraries"
                ],
                "file_path": "django/template/backends/django.py"
              },
              {
                "span_ids": [
                  "find_library",
                  "load_from_library"
                ],
                "file_path": "django/template/defaulttags.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 2682,
          "output_tokens": 417,
          "retry_message": null,
          "completion_cost": 0.014301000000000001
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The file context provided contains relevant code for handling template tag libraries and managing template tags. The DjangoTemplates class and its methods, such as get_templatetag_libraries and get_installed_libraries, deal with loading and handling template tag libraries. The functions get_template_tag_modules and get_package_libraries are also pertinent as they address importing and managing template tags from various modules. Additionally, the find_library and load functions from django/template/defaulttags.py are directly related to finding and loading specific tag libraries. However, there is no explicit mention of a function named check_for_template_tags_with_the_same_name. Despite this, the provided code sufficiently covers the overall management and loading of template tag libraries, hinting at where such a check could be implemented or integrated if it doesn't already exist.",
            "search_suggestions": "Look into the Django core template checks system to find if check_for_template_tags_with_the_same_name is defined there. Given the context and common practices in Django, such a function is likely part of the template system's internal checks, possibly located in a checks.py or similar file within the Django template or core packages."
          },
          "output": {
            "message": "Look into the Django core template checks system to find if check_for_template_tags_with_the_same_name is defined there. Given the context and common practices in Django, such a function is likely part of the template system's internal checks, possibly located in a checks.py or similar file within the Django template or core packages."
          },
          "input_tokens": 2324,
          "output_tokens": 287,
          "retry_message": null,
          "completion_cost": 0.011276999999999999
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look into the Django core template checks system to find if check_for_template_tags_with_the_same_name is defined there. Given the context and common practices in Django, such a function is likely part of the template system's internal checks, possibly located in a checks.py or similar file within the Django template or core packages.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "After examining the provided context, I didn't find the `check_for_template_tags_with_the_same_name` function directly in the code snippets provided. However, given the nature of the issue and Django's modular structure, it's likely that such a function would be part of the template system's internal checks. Therefore, I'll broaden the search to include other relevant files within the Django core checks system, particularly focusing on `checks.py` or `check_templates.py` if such a file exists. This approach aligns with Django's convention of placing internal checks functions in files that specifically handle system checks.",
            "search_requests": [
              {
                "query": "check_for_template_tags_with_the_same_name",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/core/checks/templates.py",
                "function_names": [
                  "check_for_template_tags_with_the_same_name"
                ]
              },
              {
                "query": "template tags same name",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/core/checks/*.py",
                "function_names": [
                  "check_for_template_tags_with_the_same_name"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 155,
                "span_id": "check_for_template_tags_with_the_same_name",
                "file_path": "django/core/checks/templates.py"
              },
              {
                "rank": 0,
                "tokens": 155,
                "span_id": "check_for_template_tags_with_the_same_name",
                "file_path": "django/core/checks/templates.py"
              }
            ],
            "search_requests": [
              {
                "query": "check_for_template_tags_with_the_same_name",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/core/checks/templates.py",
                "function_names": [
                  "check_for_template_tags_with_the_same_name"
                ]
              },
              {
                "query": "template tags same name",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/core/checks/*.py",
                "function_names": [
                  "check_for_template_tags_with_the_same_name"
                ]
              }
            ]
          },
          "input_tokens": 4820,
          "output_tokens": 339,
          "retry_message": null,
          "completion_cost": 0.019545
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 155,
            "span_id": "check_for_template_tags_with_the_same_name",
            "file_path": "django/core/checks/templates.py"
          },
          {
            "rank": 0,
            "tokens": 155,
            "span_id": "check_for_template_tags_with_the_same_name",
            "file_path": "django/core/checks/templates.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is related to the check_for_template_tags_with_the_same_name function and its interaction with libraries defined in TEMPLATES['OPTIONS']['libraries']. The search results provide the relevant code span for this function in the django/core/checks/templates.py file, which directly addresses the issue of identifying and reporting when the same template tag library name is used for multiple modules. The existing context already includes several key parts of the code related to template tag handling in the DjangoTemplates class, the get_template_tag_modules function, and other relevant functions like get_installed_libraries. These together form a complete picture of how template tags are loaded and managed in Django, including the specific functionality that is causing the issue reported.",
            "identified_spans": [
              {
                "span_ids": [
                  "imports",
                  "check_for_template_tags_with_the_same_name"
                ],
                "file_path": "django/core/checks/templates.py"
              },
              {
                "span_ids": [
                  "imports",
                  "DjangoTemplates",
                  "DjangoTemplates.__init__",
                  "DjangoTemplates.get_templatetag_libraries",
                  "get_template_tag_modules",
                  "get_installed_libraries",
                  "get_package_libraries"
                ],
                "file_path": "django/template/backends/django.py"
              },
              {
                "span_ids": [
                  "docstring",
                  "find_library",
                  "load_from_library",
                  "load"
                ],
                "file_path": "django/template/defaulttags.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3134,
          "output_tokens": 408,
          "retry_message": null,
          "completion_cost": 0.015522000000000001
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The `check_for_template_tags_with_the_same_name` function is identified within the `django/core/checks/templates.py` file, which directly relates to the reported issue concerning the handling of template tag libraries in TEMPLATES['OPTIONS']['libraries']. The function specifically checks for multiple occurrences of the same template tag module and raises an error if found, which matches the reported error. This indicates that the relevant file context for the reported issue is complete as it accurately reflects the Django core functionality that would handle such a problem.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 3180,
          "output_tokens": 152,
          "retry_message": null,
          "completion_cost": 0.01182
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "check_for_template_tags_with_the_same_name",
            "file_path": "django/core/checks/templates.py",
            "scratch_pad": "The issue seems to be related to the handling of template tag libraries within the TEMPLATES['OPTIONS']['libraries']. Specifically, the check_for_template_tags_with_the_same_name function does not properly account for libraries added through settings.TEMPLATES. This results in duplicate entries for the same tag library, leading to the reported error. To address this, we need to ensure that libraries added through settings.TEMPLATES are merged correctly without duplication.",
            "instructions": "Update the check_for_template_tags_with_the_same_name function to handle libraries from settings.TEMPLATES properly, ensuring that duplicate entries are not recorded. This should involve checking if a library name already exists before appending it to the libraries dictionary."
          },
          "output": {
            "span_id": "check_for_template_tags_with_the_same_name",
            "end_line": 75,
            "file_path": "django/core/checks/templates.py",
            "start_line": 50,
            "instructions": "Update the check_for_template_tags_with_the_same_name function to handle libraries from settings.TEMPLATES properly, ensuring that duplicate entries are not recorded. This should involve checking if a library name already exists before appending it to the libraries dictionary."
          },
          "input_tokens": 3675,
          "output_tokens": 224,
          "retry_message": null,
          "completion_cost": 0.014385
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "check_for_template_tags_with_the_same_name",
        "end_line": 75,
        "file_path": "django/core/checks/templates.py",
        "max_tokens": 1000,
        "start_line": 50,
        "temperature": 1.6,
        "instructions": "Update the check_for_template_tags_with_the_same_name function to handle libraries from settings.TEMPLATES properly, ensuring that duplicate entries are not recorded. This should involve checking if a library name already exists before appending it to the libraries dictionary.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\n@register(Tags.templates)\ndef check_for_template_tags_with_the_same_name(app_configs, **kwargs):\n    errors = []\n    libraries = defaultdict(list)\n\n    for conf in settings.TEMPLATES:\n        custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n        for module_name, module_path in custom_libraries.items():\n            if module_name not in libraries:\n                libraries[module_name].append(module_path)\n            else:\n                if module_path not in libraries[module_name]:\n                    libraries[module_name].append(module_path)\n\n    for module_name, module_path in get_template_tag_modules():\n        if module_name not in libraries:\n            libraries[module_name].append(module_path)\n        else:\n            if module_path not in libraries[module_name]:\n                libraries[module_name].append(module_path)\n\n    for library_name, items in libraries.items():\n        if len(items) > 1:\n            errors.append(\n                Error(\n                    E003.msg.format(\n                        repr(library_name),\n                        \", \".join(repr(item) for item in items),\n                    ),\n                    id=E003.id,\n                )\n            )\n\n    return errors\n</replace>"
          },
          "output": {
            "diff": "--- django/core/checks/templates.py\n+++ django/core/checks/templates.py\n@@ -55,10 +55,18 @@\n     for conf in settings.TEMPLATES:\n         custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n         for module_name, module_path in custom_libraries.items():\n-            libraries[module_name].append(module_path)\n+            if module_name not in libraries:\n+                libraries[module_name].append(module_path)\n+            else:\n+                if module_path not in libraries[module_name]:\n+                    libraries[module_name].append(module_path)\n \n     for module_name, module_path in get_template_tag_modules():\n-        libraries[module_name].append(module_path)\n+        if module_name not in libraries:\n+            libraries[module_name].append(module_path)\n+        else:\n+            if module_path not in libraries[module_name]:\n+                libraries[module_name].append(module_path)\n \n     for library_name, items in libraries.items():\n         if len(items) > 1:\n",
            "message": "Applied the change to django/core/checks/templates.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 3615,
          "output_tokens": 331,
          "retry_message": null,
          "completion_cost": 0.01581
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- django/core/checks/templates.py\n+++ django/core/checks/templates.py\n@@ -55,10 +55,18 @@\n     for conf in settings.TEMPLATES:\n         custom_libraries = conf.get(\"OPTIONS\", {}).get(\"libraries\", {})\n         for module_name, module_path in custom_libraries.items():\n-            libraries[module_name].append(module_path)\n+            if module_name not in libraries:\n+                libraries[module_name].append(module_path)\n+            else:\n+                if module_path not in libraries[module_name]:\n+                    libraries[module_name].append(module_path)\n \n     for module_name, module_path in get_template_tag_modules():\n-        libraries[module_name].append(module_path)\n+        if module_name not in libraries:\n+            libraries[module_name].append(module_path)\n+        else:\n+            if module_path not in libraries[module_name]:\n+                libraries[module_name].append(module_path)\n \n     for library_name, items in libraries.items():\n         if len(items) > 1:\n",
        "model": "deepseek-coder",
        "message": "Applied the change to django/core/checks/templates.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The applied changes have successfully resolved the issue reported. The check_for_template_tags_with_the_same_name function now correctly handles libraries from settings.TEMPLATES, ensuring that no duplicate entries are recorded. The changes include proper checks to ensure that each library name and path is unique in the libraries dictionary.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The applied changes correctly address the issue of handling template tag libraries within settings.TEMPLATES. By ensuring that duplicate entries for the same tag library are not recorded, the function now correctly merges libraries without duplication. The code changes involve checking if a library name already exists in the libraries dictionary before appending it. This ensures that libraries added through settings.TEMPLATES are handled properly without causing duplicate errors.",
            "instructions": null
          },
          "output": {
            "message": "The applied changes have successfully resolved the issue reported. The check_for_template_tags_with_the_same_name function now correctly handles libraries from settings.TEMPLATES, ensuring that no duplicate entries are recorded. The changes include proper checks to ensure that each library name and path is unique in the libraries dictionary."
          },
          "input_tokens": 4357,
          "output_tokens": 209,
          "retry_message": null,
          "completion_cost": 0.016206
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The applied changes have successfully resolved the issue reported. The check_for_template_tags_with_the_same_name function now correctly handles libraries from settings.TEMPLATES, ensuring that no duplicate entries are recorded. The changes include proper checks to ensure that each library name and path is unique in the libraries dictionary.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "check_for_template_tags_with_the_same_name with libraries in TEMPLATES\nDescription\n\t\nI didn't explore this thoroughly, but I think there might be an issue with the check_for_template_tags_with_the_same_name when you add a template tag library into TEMPLATES['OPTIONS']['librairies'].\nI'm getting an error like: \n(templates.E003) 'my_tags' is used for multiple template tag modules: 'someapp.templatetags.my_tags', 'someapp.templatetags.my_tags'\n"
}