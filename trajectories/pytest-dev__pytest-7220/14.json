{
  "info": {
    "duration": 175.79071497917175,
    "submission": "diff --git a/src/_pytest/fixtures.py b/src/_pytest/fixtures.py\nindex 82a148127..b105db6e9 100644\n--- a/src/_pytest/fixtures.py\n+++ b/src/_pytest/fixtures.py\n@@ -727,7 +727,13 @@ class FixtureLookupError(LookupError):\n                 error_msg = \"file %s, line %s: source code not available\"\n                 addline(error_msg % (fspath, lineno + 1))\n             else:\n-                addline(\"file {}, line {}\".format(fspath, lineno + 1))\n+                rootdir = self.request._pyfuncitem.config.rootdir\n+                rel_fspath = fspath.relto(rootdir)\n+                if rel_fspath:\n+                    fspath_str = rel_fspath\n+                else:\n+                    fspath_str = str(fspath)\n+                addline(\"file {}, line {}\".format(fspath_str, lineno + 1))\n                 for i, line in enumerate(lines):\n                     line = line.rstrip()\n                     addline(\"  \" + line)\n",
    "total_cost": 0.137712,
    "instance_id": "pytest-dev__pytest-7220",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves incorrect path display during test execution when the working directory is changed within a fixture. This affects how errors are reported, making it difficult to navigate to the source of the error due to the path being relative to the new directory rather than the original one. To address this, I will search for the fixture code and the test code responsible for changing the directory and reporting the error path.",
            "search_requests": [
              {
                "query": null,
                "class_names": [],
                "code_snippet": "os.chdir(out_dir)",
                "file_pattern": "**/test_path_error.py",
                "function_names": [
                  "private_dir"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": "assert False",
                "file_pattern": "**/test_path_error.py",
                "function_names": [
                  "test_show_wrong_path"
                ]
              }
            ]
          },
          "output": null,
          "input_tokens": 3812,
          "output_tokens": 214,
          "retry_message": "\n\nUnfortunately, I didn\u2019t find any relevant results.",
          "completion_cost": 0.014646
        },
        {
          "action": {
            "complete": false,
            "scratch_pad": "Since the initial search didn't yield any relevant results, it's possible that the issue is not directly with the test_path_error.py file but might be related to how pytest handles directory changes within fixtures. I will expand the search to look into pytest's fixture handling mechanisms to find where the directory change context might be affecting the error path display.",
            "search_requests": [
              {
                "query": "directory change within fixture",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/src/_pytest/fixtures.py",
                "function_names": []
              },
              {
                "query": "directory change during test",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/testing/python/*.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 935,
                "span_id": "fixture",
                "file_path": "src/_pytest/fixtures.py"
              },
              {
                "rank": 1,
                "tokens": 83,
                "span_id": "_teardown_yield_fixture",
                "file_path": "src/_pytest/fixtures.py"
              },
              {
                "rank": 1,
                "tokens": 100,
                "span_id": "call_fixture_func",
                "file_path": "src/_pytest/fixtures.py"
              },
              {
                "rank": 1,
                "tokens": 69,
                "span_id": "fail_fixturefunc",
                "file_path": "src/_pytest/fixtures.py"
              },
              {
                "rank": 2,
                "tokens": 85,
                "span_id": "scopeproperty",
                "file_path": "src/_pytest/fixtures.py"
              },
              {
                "rank": 2,
                "tokens": 248,
                "span_id": "imports",
                "file_path": "src/_pytest/fixtures.py"
              },
              {
                "rank": 2,
                "tokens": 24,
                "span_id": "PseudoFixtureDef",
                "file_path": "src/_pytest/fixtures.py"
              },
              {
                "rank": 2,
                "tokens": 84,
                "span_id": "pytest_sessionstart",
                "file_path": "src/_pytest/fixtures.py"
              },
              {
                "rank": 2,
                "tokens": 119,
                "span_id": "impl:2",
                "file_path": "src/_pytest/fixtures.py"
              },
              {
                "rank": 2,
                "tokens": 72,
                "span_id": "get_scope_package",
                "file_path": "src/_pytest/fixtures.py"
              },
              {
                "rank": 2,
                "tokens": 35,
                "span_id": "get_scope_node",
                "file_path": "src/_pytest/fixtures.py"
              },
              {
                "rank": 4,
                "tokens": 171,
                "span_id": "FixtureRequest._getnextfixturedef",
                "file_path": "src/_pytest/fixtures.py"
              },
              {
                "rank": 5,
                "tokens": 193,
                "span_id": "FixtureManager.pytest_generate_tests",
                "file_path": "src/_pytest/fixtures.py"
              },
              {
                "rank": 0,
                "tokens": 27,
                "span_id": "Testdir.chdir",
                "file_path": "src/_pytest/pytester.py"
              },
              {
                "rank": 0,
                "tokens": 150,
                "span_id": "Testdir._makefile",
                "file_path": "src/_pytest/pytester.py"
              },
              {
                "rank": 1,
                "tokens": 51,
                "span_id": "SysModulesSnapshot.restore",
                "file_path": "src/_pytest/pytester.py"
              },
              {
                "rank": 1,
                "tokens": 5,
                "span_id": "SysModulesSnapshot",
                "file_path": "src/_pytest/pytester.py"
              },
              {
                "rank": 1,
                "tokens": 5,
                "span_id": "CwdSnapshot",
                "file_path": "src/_pytest/pytester.py"
              },
              {
                "rank": 1,
                "tokens": 13,
                "span_id": "CwdSnapshot.restore",
                "file_path": "src/_pytest/pytester.py"
              },
              {
                "rank": 1,
                "tokens": 5,
                "span_id": "SysPathsSnapshot",
                "file_path": "src/_pytest/pytester.py"
              },
              {
                "rank": 1,
                "tokens": 19,
                "span_id": "SysPathsSnapshot.restore",
                "file_path": "src/_pytest/pytester.py"
              },
              {
                "rank": 2,
                "tokens": 111,
                "span_id": "TestMockDecoration.test_mock_double_patch_issue473",
                "file_path": "testing/python/integration.py"
              },
              {
                "rank": 3,
                "tokens": 258,
                "span_id": "TestMockDecoration.test_mock",
                "file_path": "testing/python/integration.py"
              },
              {
                "rank": 4,
                "tokens": 36,
                "span_id": "test_fixture",
                "file_path": "testing/example_scripts/tmpdir/tmpdir_fixture.py"
              },
              {
                "rank": 4,
                "tokens": 2,
                "span_id": "imports",
                "file_path": "testing/example_scripts/tmpdir/tmpdir_fixture.py"
              },
              {
                "rank": 5,
                "tokens": 87,
                "span_id": "MonkeyPatch.chdir",
                "file_path": "src/_pytest/monkeypatch.py"
              }
            ],
            "search_requests": [
              {
                "query": "directory change within fixture",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/src/_pytest/fixtures.py",
                "function_names": []
              },
              {
                "query": "directory change during test",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/testing/python/*.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 4086,
          "output_tokens": 223,
          "retry_message": null,
          "completion_cost": 0.015602999999999999
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 935,
            "span_id": "fixture",
            "file_path": "src/_pytest/fixtures.py"
          },
          {
            "rank": 1,
            "tokens": 83,
            "span_id": "_teardown_yield_fixture",
            "file_path": "src/_pytest/fixtures.py"
          },
          {
            "rank": 1,
            "tokens": 100,
            "span_id": "call_fixture_func",
            "file_path": "src/_pytest/fixtures.py"
          },
          {
            "rank": 1,
            "tokens": 69,
            "span_id": "fail_fixturefunc",
            "file_path": "src/_pytest/fixtures.py"
          },
          {
            "rank": 2,
            "tokens": 85,
            "span_id": "scopeproperty",
            "file_path": "src/_pytest/fixtures.py"
          },
          {
            "rank": 2,
            "tokens": 248,
            "span_id": "imports",
            "file_path": "src/_pytest/fixtures.py"
          },
          {
            "rank": 2,
            "tokens": 24,
            "span_id": "PseudoFixtureDef",
            "file_path": "src/_pytest/fixtures.py"
          },
          {
            "rank": 2,
            "tokens": 84,
            "span_id": "pytest_sessionstart",
            "file_path": "src/_pytest/fixtures.py"
          },
          {
            "rank": 2,
            "tokens": 119,
            "span_id": "impl:2",
            "file_path": "src/_pytest/fixtures.py"
          },
          {
            "rank": 2,
            "tokens": 72,
            "span_id": "get_scope_package",
            "file_path": "src/_pytest/fixtures.py"
          },
          {
            "rank": 2,
            "tokens": 35,
            "span_id": "get_scope_node",
            "file_path": "src/_pytest/fixtures.py"
          },
          {
            "rank": 4,
            "tokens": 171,
            "span_id": "FixtureRequest._getnextfixturedef",
            "file_path": "src/_pytest/fixtures.py"
          },
          {
            "rank": 5,
            "tokens": 193,
            "span_id": "FixtureManager.pytest_generate_tests",
            "file_path": "src/_pytest/fixtures.py"
          },
          {
            "rank": 0,
            "tokens": 27,
            "span_id": "Testdir.chdir",
            "file_path": "src/_pytest/pytester.py"
          },
          {
            "rank": 0,
            "tokens": 150,
            "span_id": "Testdir._makefile",
            "file_path": "src/_pytest/pytester.py"
          },
          {
            "rank": 1,
            "tokens": 51,
            "span_id": "SysModulesSnapshot.restore",
            "file_path": "src/_pytest/pytester.py"
          },
          {
            "rank": 1,
            "tokens": 5,
            "span_id": "SysModulesSnapshot",
            "file_path": "src/_pytest/pytester.py"
          },
          {
            "rank": 1,
            "tokens": 5,
            "span_id": "CwdSnapshot",
            "file_path": "src/_pytest/pytester.py"
          },
          {
            "rank": 1,
            "tokens": 13,
            "span_id": "CwdSnapshot.restore",
            "file_path": "src/_pytest/pytester.py"
          },
          {
            "rank": 1,
            "tokens": 5,
            "span_id": "SysPathsSnapshot",
            "file_path": "src/_pytest/pytester.py"
          },
          {
            "rank": 1,
            "tokens": 19,
            "span_id": "SysPathsSnapshot.restore",
            "file_path": "src/_pytest/pytester.py"
          },
          {
            "rank": 2,
            "tokens": 111,
            "span_id": "TestMockDecoration.test_mock_double_patch_issue473",
            "file_path": "testing/python/integration.py"
          },
          {
            "rank": 3,
            "tokens": 258,
            "span_id": "TestMockDecoration.test_mock",
            "file_path": "testing/python/integration.py"
          },
          {
            "rank": 4,
            "tokens": 36,
            "span_id": "test_fixture",
            "file_path": "testing/example_scripts/tmpdir/tmpdir_fixture.py"
          },
          {
            "rank": 4,
            "tokens": 2,
            "span_id": "imports",
            "file_path": "testing/example_scripts/tmpdir/tmpdir_fixture.py"
          },
          {
            "rank": 5,
            "tokens": 87,
            "span_id": "MonkeyPatch.chdir",
            "file_path": "src/_pytest/monkeypatch.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about the wrong path displayed when a directory is changed in a fixture. The provided search results include code from `src/_pytest/fixtures.py` and `src/_pytest/pytester.py`, which are relevant as they contain fixture management and directory change functionalities. Specifically, the `private_dir` fixture in the issue uses `os.chdir` to change the working directory, and the displayed path should remain relative to the original directory. The search results show implementations of fixtures, directory change methods, and scope management, which are directly related to the issue. This includes the `pytest_sessionstart`, `FixtureRequest`, and `FixtureManager` spans in `src/_pytest/fixtures.py`, as well as the `CwdSnapshot` and `Testdir.chdir` spans in `src/_pytest/pytester.py`. These spans manage the lifecycle of fixtures, scope, and directory changes, making them crucial for understanding and resolving the issue. The `MonkeyPatch.chdir` in `src/_pytest/monkeypatch.py` is also relevant as it shows an alternative method for changing directories during tests. The `test_fixture` span in `testing/example_scripts/tmpdir/tmpdir_fixture.py` serves as an example of using the `tmpdir` fixture and might be considered for related context but is not directly relevant to the reported issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "pytest_sessionstart",
                  "FixtureRequest",
                  "FixtureManager"
                ],
                "file_path": "src/_pytest/fixtures.py"
              },
              {
                "span_ids": [
                  "CwdSnapshot",
                  "Testdir.chdir"
                ],
                "file_path": "src/_pytest/pytester.py"
              },
              {
                "span_ids": [
                  "MonkeyPatch.chdir"
                ],
                "file_path": "src/_pytest/monkeypatch.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 6459,
          "output_tokens": 469,
          "retry_message": null,
          "completion_cost": 0.026412
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context provided includes relevant sections from pytest's fixture implementation, specifically focusing on how fixtures manage directory changes. The 'FixtureManager', 'FixtureRequest', and 'SubRequest' classes are key to understanding how fixtures operate, including potential handling of directory changes. The 'CwdSnapshot' class in 'pytester.py' also hints at directory management. Additionally, the 'MonkeyPatch' class in 'monkeypatch.py' shows how directory changes can be managed within the pytest context. Given these components, it appears that the provided file context covers the primary mechanisms involved in handling directory changes within pytest fixtures, indicating that relevant code for the reported issue is indeed present. Therefore, the file context is complete.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 3414,
          "output_tokens": 186,
          "retry_message": null,
          "completion_cost": 0.013032000000000002
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "FixtureLookupError.formatrepr",
            "file_path": "src/_pytest/fixtures.py",
            "scratch_pad": "The issue reported involves directory changes in a fixture causing the test output to display paths incorrectly. These paths should remain relative to the original directory, not the changed one. A potential fix could involve adjusting how the paths are reported in the failure output. The relevant code span seems to be the part where the failure is reported, specifically in the 'FixtureLookupError.formatrepr' method.",
            "instructions": "Update the 'FixtureLookupError.formatrepr' method to ensure that file paths reported in the error output remain relative to the original directory, not the changed one."
          },
          "output": {
            "span_id": "FixtureLookupError.formatrepr",
            "end_line": 754,
            "file_path": "src/_pytest/fixtures.py",
            "start_line": 712,
            "instructions": "Update the 'FixtureLookupError.formatrepr' method to ensure that file paths reported in the error output remain relative to the original directory, not the changed one."
          },
          "input_tokens": 5481,
          "output_tokens": 174,
          "retry_message": null,
          "completion_cost": 0.019053
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "FixtureLookupError.formatrepr",
        "end_line": 754,
        "file_path": "src/_pytest/fixtures.py",
        "max_tokens": 1000,
        "start_line": 712,
        "temperature": 1.6,
        "instructions": "Update the 'FixtureLookupError.formatrepr' method to ensure that file paths reported in the error output remain relative to the original directory, not the changed one.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```python\n<replace>\n    def formatrepr(self) -> \"FixtureLookupErrorRepr\":\n        tblines = []  # type: List[str]\n        addline = tblines.append\n        stack = [self.request._pyfuncitem.obj]\n        stack.extend(map(lambda x: x.func, self.fixturestack))\n        msg = self.msg\n        if msg is not None:\n            # the last fixture raise an error, let's present\n            # it at the requesting side\n            stack = stack[:-1]\n        for function in stack:\n            fspath, lineno = getfslineno(function)\n            try:\n                lines, _ = inspect.getsourcelines(get_real_func(function))\n            except (OSError, IndexError, TypeError):\n                error_msg = \"file %s, line %s: source code not available\"\n                addline(error_msg % (fspath, lineno + 1))\n            else:\n                rootdir = self.request._pyfuncitem.config.rootdir\n                rel_fspath = fspath.relto(rootdir)\n                if rel_fspath:\n                    fspath_str = rel_fspath\n                else:\n                    fspath_str = str(fspath)\n                addline(\"file {}, line {}\".format(fspath_str, lineno + 1))\n                for i, line in enumerate(lines):\n                    line = line.rstrip()\n                    addline(\"  \" + line)\n                    if line.lstrip().startswith(\"def\"):\n                        break\n\n        if msg is None:\n            fm = self.request._fixturemanager\n            available = set()\n            parentid = self.request._pyfuncitem.parent.nodeid\n            for name, fixturedefs in fm._arg2fixturedefs.items():\n                faclist = list(fm._matchfactories(fixturedefs, parentid))\n                if faclist:\n                    available.add(name)\n            if self.argname in available:\n                msg = \" recursive dependency involving fixture '{}' detected\".format(\n                    self.argname\n                )\n            else:\n                msg = \"fixture '{}' not found\".format(self.argname)\n            msg += \"\\n available fixtures: {}\".format(\", \".join(sorted(available)))\n            msg += \"\\n use 'pytest --fixtures [testpath]' for help on them.\"\n\n        return FixtureLookupErrorRepr(fspath, lineno, tblines, msg, self.argname)\n</replace>"
          },
          "output": {
            "diff": "--- src/_pytest/fixtures.py\n+++ src/_pytest/fixtures.py\n@@ -727,7 +727,13 @@\n                 error_msg = \"file %s, line %s: source code not available\"\n                 addline(error_msg % (fspath, lineno + 1))\n             else:\n-                addline(\"file {}, line {}\".format(fspath, lineno + 1))\n+                rootdir = self.request._pyfuncitem.config.rootdir\n+                rel_fspath = fspath.relto(rootdir)\n+                if rel_fspath:\n+                    fspath_str = rel_fspath\n+                else:\n+                    fspath_str = str(fspath)\n+                addline(\"file {}, line {}\".format(fspath_str, lineno + 1))\n                 for i, line in enumerate(lines):\n                     line = line.rstrip()\n                     addline(\"  \" + line)\n",
            "message": "Applied the change to src/_pytest/fixtures.py.\n\n<scratch_pad>\n```python\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 6567,
          "output_tokens": 583,
          "retry_message": null,
          "completion_cost": 0.028446
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- src/_pytest/fixtures.py\n+++ src/_pytest/fixtures.py\n@@ -727,7 +727,13 @@\n                 error_msg = \"file %s, line %s: source code not available\"\n                 addline(error_msg % (fspath, lineno + 1))\n             else:\n-                addline(\"file {}, line {}\".format(fspath, lineno + 1))\n+                rootdir = self.request._pyfuncitem.config.rootdir\n+                rel_fspath = fspath.relto(rootdir)\n+                if rel_fspath:\n+                    fspath_str = rel_fspath\n+                else:\n+                    fspath_str = str(fspath)\n+                addline(\"file {}, line {}\".format(fspath_str, lineno + 1))\n                 for i, line in enumerate(lines):\n                     line = line.rstrip()\n                     addline(\"  \" + line)\n",
        "model": "deepseek-coder",
        "message": "Applied the change to src/_pytest/fixtures.py.\n\n<scratch_pad>\n```python\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The changes applied to `FixtureLookupError.formatrepr` method correctly handle the situation where the directory has been changed in a fixture, ensuring that the file paths reported in the error output remain relative to the original directory. This should resolve the issue reported.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The initial change made to `FixtureLookupError.formatrepr` method seems appropriate and addresses the issue by ensuring that the file paths in the error output are relative to the original directory, not the changed one.",
            "instructions": null
          },
          "output": {
            "message": "The changes applied to `FixtureLookupError.formatrepr` method correctly handle the situation where the directory has been changed in a fixture, ensuring that the file paths reported in the error output remain relative to the original directory. This should resolve the issue reported."
          },
          "input_tokens": 6055,
          "output_tokens": 157,
          "retry_message": null,
          "completion_cost": 0.02052
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The changes applied to `FixtureLookupError.formatrepr` method correctly handle the situation where the directory has been changed in a fixture, ensuring that the file paths reported in the error output remain relative to the original directory. This should resolve the issue reported.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Wrong path to test file when directory changed in fixture\nFiles are shown as relative to new directory when working directory is changed in a fixture. This makes it impossible to jump to the error as the editor is unaware of the directory change. The displayed directory should stay relative to the original directory.\r\n\r\ntest_path_error.py:\r\n```python\r\nimport os\r\nimport errno\r\nimport shutil\r\n\r\nimport pytest\r\n\r\n\r\n@pytest.fixture\r\ndef private_dir():  # or (monkeypatch)\r\n    out_dir = 'ddd'\r\n\r\n    try:\r\n        shutil.rmtree(out_dir)\r\n    except OSError as ex:\r\n        if ex.errno != errno.ENOENT:\r\n            raise\r\n    os.mkdir(out_dir)\r\n\r\n    old_dir = os.getcwd()\r\n    os.chdir(out_dir)\r\n    yield out_dir\r\n    os.chdir(old_dir)\r\n\r\n    # Same issue if using:\r\n    # monkeypatch.chdir(out_dir)\r\n\r\n\r\ndef test_show_wrong_path(private_dir):\r\n    assert False\r\n```\r\n\r\n```diff\r\n+ Expected: test_path_error.py:29: AssertionError\r\n- Displayed: ../test_path_error.py:29: AssertionError\r\n```\r\n\r\nThe full output is:\r\n```\r\n-*- mode: compilation; default-directory: \"~/src/pytest_path_error/\" -*-\r\nCompilation started at Fri Jan 10 00:05:52\r\n\r\nnox\r\nnox > Running session test\r\nnox > Creating virtual environment (virtualenv) using python3.7 in .nox/test\r\nnox > pip install pytest>=5.3\r\nnox > pip freeze\r\nattrs==19.3.0\r\nimportlib-metadata==1.3.0\r\nmore-itertools==8.0.2\r\npackaging==20.0\r\npluggy==0.13.1\r\npy==1.8.1\r\npyparsing==2.4.6\r\npytest==5.3.2\r\nsix==1.13.0\r\nwcwidth==0.1.8\r\nzipp==0.6.0\r\nnox > pytest \r\n================================= test session starts =================================\r\nplatform linux -- Python 3.7.5, pytest-5.3.2, py-1.8.1, pluggy-0.13.1\r\nrootdir: /home/lhn/src/pytest_path_error\r\ncollected 1 item                                                                      \r\n\r\ntest_path_error.py F                                                            [100%]\r\n\r\n====================================== FAILURES =======================================\r\n________________________________ test_show_wrong_path _________________________________\r\n\r\nprivate_dir = 'ddd'\r\n\r\n    def test_show_wrong_path(private_dir):\r\n>       assert False\r\nE       assert False\r\n\r\n../test_path_error.py:29: AssertionError\r\n================================== 1 failed in 0.03s ==================================\r\nnox > Command pytest  failed with exit code 1\r\nnox > Session test failed.\r\n\r\nCompilation exited abnormally with code 1 at Fri Jan 10 00:06:01\r\n```\r\n\r\nnoxfile.py:\r\n```python\r\nimport nox\r\n\r\n@nox.session(python='3.7')\r\ndef test(session):\r\n    session.install('pytest>=5.3')\r\n    session.run('pip', 'freeze')\r\n    session.run('pytest')\r\n```\n"
}