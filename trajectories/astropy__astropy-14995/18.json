{
  "info": {
    "duration": 193.0800187587738,
    "submission": "diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py\nindex 4153dfccb..c04d61e5c 100644\n--- a/astropy/nddata/mixins/ndarithmetic.py\n+++ b/astropy/nddata/mixins/ndarithmetic.py\n@@ -523,8 +523,17 @@ class NDArithmeticMixin:\n         elif operand is None:\n             return deepcopy(self.mask)\n         else:\n+            # Treat None masks as arrays of False before applying handle_mask\n+            if self.mask is None:\n+                self_mask = np.zeros_like(operand.mask, dtype=bool)\n+            else:\n+                self_mask = self.mask\n+            if operand.mask is None:\n+                operand_mask = np.zeros_like(self.mask, dtype=bool)\n+            else:\n+                operand_mask = operand.mask\n             # Now lets calculate the resulting mask (operation enforces copy)\n-            return handle_mask(self.mask, operand.mask, **kwds)\n+            return handle_mask(self_mask, operand_mask, **kwds)\n \n     def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):\n         \"\"\"\n",
    "total_cost": 0.14676,
    "instance_id": "astropy__astropy-14995",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue pertains to the failure of mask propagation in NDDataRef when one of the operands does not have a mask, specifically during arithmetic operations with 'handle_mask=np.bitwise_or'. The error occurs when 'np.bitwise_or' tries to operate on an integer and a None, indicating a problem with how None-masked operands are handled. The search should focus on the NDDataRef class and related arithmetic operations, specifically where mask handling is implemented.",
            "search_requests": [
              {
                "query": "mask propagation arithmetic operations handle_mask np.bitwise_or NoneType",
                "class_names": [
                  "NDDataRef"
                ],
                "code_snippet": null,
                "file_pattern": null,
                "function_names": [
                  "multiply",
                  "_arithmetic_mask",
                  "_arithmetic"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 546,
                "span_id": "NDDataRef",
                "file_path": "astropy/nddata/nddata_withmixins.py"
              },
              {
                "rank": 0,
                "tokens": 59,
                "span_id": "NDArithmeticMixin.multiply",
                "file_path": "astropy/nddata/mixins/ndarithmetic.py"
              },
              {
                "rank": 0,
                "tokens": 317,
                "span_id": "NDArithmeticMixin._arithmetic_mask",
                "file_path": "astropy/nddata/mixins/ndarithmetic.py"
              },
              {
                "rank": 0,
                "tokens": 1499,
                "span_id": "NDArithmeticMixin._arithmetic",
                "file_path": "astropy/nddata/mixins/ndarithmetic.py"
              },
              {
                "rank": 1,
                "tokens": 237,
                "span_id": "_arithmetic",
                "file_path": "astropy/nddata/ccddata.py"
              }
            ],
            "search_requests": [
              {
                "query": "mask propagation arithmetic operations handle_mask np.bitwise_or NoneType",
                "class_names": [
                  "NDDataRef"
                ],
                "code_snippet": null,
                "file_pattern": null,
                "function_names": [
                  "multiply",
                  "_arithmetic_mask",
                  "_arithmetic"
                ]
              }
            ]
          },
          "input_tokens": 4639,
          "output_tokens": 184,
          "retry_message": null,
          "completion_cost": 0.016677
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 546,
            "span_id": "NDDataRef",
            "file_path": "astropy/nddata/nddata_withmixins.py"
          },
          {
            "rank": 0,
            "tokens": 59,
            "span_id": "NDArithmeticMixin.multiply",
            "file_path": "astropy/nddata/mixins/ndarithmetic.py"
          },
          {
            "rank": 0,
            "tokens": 317,
            "span_id": "NDArithmeticMixin._arithmetic_mask",
            "file_path": "astropy/nddata/mixins/ndarithmetic.py"
          },
          {
            "rank": 0,
            "tokens": 1499,
            "span_id": "NDArithmeticMixin._arithmetic",
            "file_path": "astropy/nddata/mixins/ndarithmetic.py"
          },
          {
            "rank": 1,
            "tokens": 237,
            "span_id": "_arithmetic",
            "file_path": "astropy/nddata/ccddata.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue indicates a problem with mask propagation in NDDataRef during arithmetic operations in version 5.3, specifically when one of the operands does not have a mask. The error occurs when `handle_mask=np.bitwise_or` tries to operate on an integer and a None, leading to a TypeError.\n\nThe relevant code spans are located in 'astropy/nddata/mixins/ndarithmetic.py', particularly within the NDArithmeticMixin class. The '_arithmetic' method manages the arithmetic operations, including the handling of masks. The '_arithmetic_mask' method specifically deals with the calculation of the resulting mask based on the operation and operands.\n\nThe 'multiply' method directly relates to the arithmetic operation of multiplication, which is mentioned in the how-to reproduce section of the issue.\n\nReview of the entire sections of code in the '_arithmetic' and '_arithmetic_mask' methods reveals that the handling of masks could be the source of the problem when one operand lacks a mask. The code does not explicitly handle the case where one mask is None and the other is not, which could lead to the observed TypeError.\n\nGiven the relevance of these methods to the reported issue, it is clear that the provided search results contain the necessary code spans to address the bug.",
            "identified_spans": [
              {
                "span_ids": [
                  "NDArithmeticMixin",
                  "NDArithmeticMixin._arithmetic",
                  "NDArithmeticMixin._arithmetic_mask",
                  "NDArithmeticMixin.multiply"
                ],
                "file_path": "astropy/nddata/mixins/ndarithmetic.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3598,
          "output_tokens": 384,
          "retry_message": null,
          "completion_cost": 0.016554
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The file context provided contains the NDArithmeticMixin class which is relevant to the issue reported. This class includes methods for arithmetic operations on NDDataRef objects, including methods for handling masks during arithmetic operations. The method _arithmetic_mask is particularly relevant as it is responsible for handling the mask propagation. The issue reported could be due to how this method handles None masks. The provided context seems to cover the relevant code for mask handling, including how masks are combined using functions like np.logical_or. There is a need to further investigate how None masks are handled in the _arithmetic_mask method to address the reported issue.",
            "search_suggestions": "Focus on the implementation of _arithmetic_mask method to understand how it handles cases where one of the masks is None. Look for specific conditions or operations that might be causing the TypeError when trying to perform bitwise operations between an integer and None."
          },
          "output": {
            "message": "Focus on the implementation of _arithmetic_mask method to understand how it handles cases where one of the masks is None. Look for specific conditions or operations that might be causing the TypeError when trying to perform bitwise operations between an integer and None."
          },
          "input_tokens": 3170,
          "output_tokens": 217,
          "retry_message": null,
          "completion_cost": 0.012765000000000002
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Focus on the implementation of _arithmetic_mask method to understand how it handles cases where one of the masks is None. Look for specific conditions or operations that might be causing the TypeError when trying to perform bitwise operations between an integer and None.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The _arithmetic_mask method is responsible for handling the masks during arithmetic operations. The method checks if either of the masks is None and decides how to proceed. If both masks are None or handle_mask is None, it returns None. If one of the masks is None, it deepcopies the non-None mask. If neither mask is None, it applies the handle_mask operation (e.g., np.bitwise_or). The TypeError likely occurs when np.bitwise_or is called with a None type, suggesting a need to explicitly handle None masks before applying bitwise operations.",
            "search_requests": [
              {
                "query": "handle_mask NoneType np.bitwise_or",
                "class_names": [],
                "code_snippet": "return handle_mask(self.mask, operand.mask, **kwds)",
                "file_pattern": "**/nddata/**/*.py",
                "function_names": [
                  "_arithmetic_mask"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 317,
                "span_id": "NDArithmeticMixin._arithmetic_mask",
                "file_path": "astropy/nddata/mixins/ndarithmetic.py"
              }
            ],
            "search_requests": [
              {
                "query": "handle_mask NoneType np.bitwise_or",
                "class_names": [],
                "code_snippet": "return handle_mask(self.mask, operand.mask, **kwds)",
                "file_pattern": "**/nddata/**/*.py",
                "function_names": [
                  "_arithmetic_mask"
                ]
              }
            ]
          },
          "input_tokens": 6330,
          "output_tokens": 248,
          "retry_message": null,
          "completion_cost": 0.02271
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 317,
            "span_id": "NDArithmeticMixin._arithmetic_mask",
            "file_path": "astropy/nddata/mixins/ndarithmetic.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue states that in v5.3, the mask propagation during arithmetic operations fails when one of the operands does not have a mask. Specifically, when using `handle_mask=np.bitwise_or`, a TypeError occurs due to an attempt to perform a bitwise operation between an integer and a NoneType. This behavior was not present in v5.2.\n\nThe context provided includes the `NDArithmeticMixin` class from the `astropy/nddata/mixins/ndarithmetic.py` file. Within this class, there are methods that deal with arithmetic operations and mask handling.\n\nThe new search results contain the `_arithmetic_mask` method, which is responsible for handling the mask propagation during arithmetic operations. This method checks if masks are present and appropriately handles the case where one mask might be None.\n\nGiven the issue description, the `_arithmetic_mask` method is directly related to the problem. It handles the masking during arithmetic operations and the specific condition where one operand might not have a mask. This method should be reviewed to ensure it correctly handles the None mask scenario, possibly by ensuring that None masks are treated in a manner that avoids TypeErrors during operations like `np.bitwise_or`.\n\nBased on the analysis, the `_arithmetic_mask` method appears to be the relevant code span that needs to be addressed to fix the mask propagation issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "NDArithmeticMixin._arithmetic_mask"
                ],
                "file_path": "astropy/nddata/mixins/ndarithmetic.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3513,
          "output_tokens": 372,
          "retry_message": null,
          "completion_cost": 0.016119
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The _arithmetic_mask method is responsible for handling the masks during arithmetic operations. The method checks if either of the masks is None and decides how to proceed. If both masks are None or handle_mask is None, it returns None. If one of the masks is None, it deepcopies the non-None mask. If neither mask is None, it applies the handle_mask operation (e.g., np.bitwise_or). The TypeError likely occurs when np.bitwise_or is called with a None type, suggesting a need to explicitly handle None masks before applying bitwise operations.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 3197,
          "output_tokens": 163,
          "retry_message": null,
          "completion_cost": 0.012036000000000002
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "NDArithmeticMixin._arithmetic_mask",
            "file_path": "astropy/nddata/mixins/ndarithmetic.py",
            "scratch_pad": "The issue is caused by attempting to apply `np.bitwise_or` on a mask that can be `None`. The current implementation does not handle the case where one of the masks is `None`, leading to a TypeError. To fix this, we need to ensure that `None` masks are treated as if they were arrays of `False` during the mask operation.",
            "instructions": "Update the `_arithmetic_mask` method to handle `None` masks by treating them as arrays of `False` before applying the `handle_mask` function."
          },
          "output": {
            "span_id": "NDArithmeticMixin._arithmetic_mask",
            "end_line": 527,
            "file_path": "astropy/nddata/mixins/ndarithmetic.py",
            "start_line": 485,
            "instructions": "Update the `_arithmetic_mask` method to handle `None` masks by treating them as arrays of `False` before applying the `handle_mask` function."
          },
          "input_tokens": 3384,
          "output_tokens": 194,
          "retry_message": null,
          "completion_cost": 0.013062
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "NDArithmeticMixin._arithmetic_mask",
        "end_line": 527,
        "file_path": "astropy/nddata/mixins/ndarithmetic.py",
        "max_tokens": 1000,
        "start_line": 485,
        "temperature": 1.6,
        "instructions": "Update the `_arithmetic_mask` method to handle `None` masks by treating them as arrays of `False` before applying the `handle_mask` function.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```\n<replace>\n    def _arithmetic_mask(self, operation, operand, handle_mask, axis=None, **kwds):\n        \"\"\"\n        Calculate the resulting mask.\n\n        This is implemented as the piecewise ``or`` operation if both have a\n        mask.\n\n        Parameters\n        ----------\n        operation : callable\n            see :meth:`NDArithmeticMixin._arithmetic` parameter description.\n            By default, the ``operation`` will be ignored.\n\n        operand : `NDData`-like instance\n            The second operand wrapped in an instance of the same class as\n            self.\n\n        handle_mask : callable\n            see :meth:`NDArithmeticMixin.add`\n\n        kwds :\n            Additional parameters given to ``handle_mask``.\n\n        Returns\n        -------\n        result_mask : any type\n            If only one mask was present this mask is returned.\n            If neither had a mask ``None`` is returned. Otherwise\n            ``handle_mask`` must create (and copy) the returned mask.\n        \"\"\"\n        # If only one mask is present we need not bother about any type checks\n        if (\n            self.mask is None and operand is not None and operand.mask is None\n        ) or handle_mask is None:\n            return None\n        elif self.mask is None and operand is not None:\n            # Make a copy so there is no reference in the result.\n            return deepcopy(operand.mask)\n        elif operand is None:\n            return deepcopy(self.mask)\n        else:\n            # Treat None masks as arrays of False before applying handle_mask\n            if self.mask is None:\n                self_mask = np.zeros_like(operand.mask, dtype=bool)\n            else:\n                self_mask = self.mask\n            if operand.mask is None:\n                operand_mask = np.zeros_like(self.mask, dtype=bool)\n            else:\n                operand_mask = operand.mask\n            # Now lets calculate the resulting mask (operation enforces copy)\n            return handle_mask(self_mask, operand_mask, **kwds)\n</replace>"
          },
          "output": {
            "diff": "--- astropy/nddata/mixins/ndarithmetic.py\n+++ astropy/nddata/mixins/ndarithmetic.py\n@@ -523,8 +523,17 @@\n         elif operand is None:\n             return deepcopy(self.mask)\n         else:\n+            # Treat None masks as arrays of False before applying handle_mask\n+            if self.mask is None:\n+                self_mask = np.zeros_like(operand.mask, dtype=bool)\n+            else:\n+                self_mask = self.mask\n+            if operand.mask is None:\n+                operand_mask = np.zeros_like(self.mask, dtype=bool)\n+            else:\n+                operand_mask = operand.mask\n             # Now lets calculate the resulting mask (operation enforces copy)\n-            return handle_mask(self.mask, operand.mask, **kwds)\n+            return handle_mask(self_mask, operand_mask, **kwds)\n \n     def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):\n         \"\"\"\n",
            "message": "Applied the change to astropy/nddata/mixins/ndarithmetic.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 4867,
          "output_tokens": 485,
          "retry_message": null,
          "completion_cost": 0.021876
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- astropy/nddata/mixins/ndarithmetic.py\n+++ astropy/nddata/mixins/ndarithmetic.py\n@@ -523,8 +523,17 @@\n         elif operand is None:\n             return deepcopy(self.mask)\n         else:\n+            # Treat None masks as arrays of False before applying handle_mask\n+            if self.mask is None:\n+                self_mask = np.zeros_like(operand.mask, dtype=bool)\n+            else:\n+                self_mask = self.mask\n+            if operand.mask is None:\n+                operand_mask = np.zeros_like(self.mask, dtype=bool)\n+            else:\n+                operand_mask = operand.mask\n             # Now lets calculate the resulting mask (operation enforces copy)\n-            return handle_mask(self.mask, operand.mask, **kwds)\n+            return handle_mask(self_mask, operand_mask, **kwds)\n \n     def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):\n         \"\"\"\n",
        "model": "deepseek-coder",
        "message": "Applied the change to astropy/nddata/mixins/ndarithmetic.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The update to the _arithmetic_mask method addresses the reported issue by ensuring that None masks are treated appropriately before applying the mask handling function. This should resolve the TypeError encountered when using np.bitwise_or with operands that may have None masks.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The change to the `_arithmetic_mask` method appears to correctly handle cases where one of the masks is `None`. By treating `None` masks as arrays of `False` before applying the `handle_mask` function, the issue with `np.bitwise_or` failing on `NoneType` should be resolved. The modified method ensures that the mask handling logic is consistent regardless of the presence of `None` masks.",
            "instructions": null
          },
          "output": {
            "message": "The update to the _arithmetic_mask method addresses the reported issue by ensuring that None masks are treated appropriately before applying the mask handling function. This should resolve the TypeError encountered when using np.bitwise_or with operands that may have None masks."
          },
          "input_tokens": 3972,
          "output_tokens": 203,
          "retry_message": null,
          "completion_cost": 0.014960999999999999
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The update to the _arithmetic_mask method addresses the reported issue by ensuring that None masks are treated appropriately before applying the mask handling function. This should resolve the TypeError encountered when using np.bitwise_or with operands that may have None masks.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "In v5.3, NDDataRef mask propagation fails when one of the operand does not have a mask\n### Description\n\nThis applies to v5.3. \r\n\r\nIt looks like when one of the operand does not have a mask, the mask propagation when doing arithmetic, in particular with `handle_mask=np.bitwise_or` fails.  This is not a problem in v5.2.\r\n\r\nI don't know enough about how all that works, but it seems from the error that the operand without a mask is set as a mask of None's and then the bitwise_or tries to operate on an integer and a None and fails.\n\n### Expected behavior\n\nWhen one of the operand does not have mask, the mask that exists should just be copied over to the output.  Or whatever was done in that situation in v5.2 where there's no problem.\n\n### How to Reproduce\n\nThis is with v5.3.   With v5.2, there are no errors.\r\n\r\n```\r\n>>> import numpy as np\r\n>>> from astropy.nddata import NDDataRef\r\n\r\n>>> array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\r\n>>> mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\r\n\r\n>>> nref_nomask = NDDataRef(array)\r\n>>> nref_mask = NDDataRef(array, mask=mask)\r\n\r\n# multiply no mask by constant (no mask * no mask)\r\n>>> nref_nomask.multiply(1., handle_mask=np.bitwise_or).mask   # returns nothing, no mask,  OK\r\n\r\n# multiply no mask by itself (no mask * no mask)\r\n>>> nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask # return nothing, no mask, OK\r\n\r\n# multiply mask by constant (mask * no mask)\r\n>>> nref_mask.multiply(1., handle_mask=np.bitwise_or).mask\r\n...\r\nTypeError: unsupported operand type(s) for |: 'int' and 'NoneType'\r\n\r\n# multiply mask by itself (mask * mask)\r\n>>> nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or).mask\r\narray([[ 0,  1, 64],\r\n       [ 8,  0,  1],\r\n       [ 2,  1,  0]])\r\n\r\n# multiply mask by no mask (mask * no mask)\r\n>>> nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask\r\n...\r\nTypeError: unsupported operand type(s) for |: 'int' and 'NoneType'\r\n```\r\n\n\n### Versions\n\n>>> import sys; print(\"Python\", sys.version)\r\nPython 3.10.11 | packaged by conda-forge | (main, May 10 2023, 19:07:22) [Clang 14.0.6 ]\r\n>>> import astropy; print(\"astropy\", astropy.__version__)\r\nastropy 5.3\r\n>>> import numpy; print(\"Numpy\", numpy.__version__)\r\nNumpy 1.24.3\r\n>>> import erfa; print(\"pyerfa\", erfa.__version__)\r\npyerfa 2.0.0.3\r\n>>> import scipy; print(\"Scipy\", scipy.__version__)\r\nScipy 1.10.1\r\n>>> import matplotlib; print(\"Matplotlib\", matplotlib.__version__)\r\nMatplotlib 3.7.1\r\n\n"
}