{
  "info": {
    "duration": 176.41268277168274,
    "submission": "diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py\nindex 4153dfccb..ba3d962fa 100644\n--- a/astropy/nddata/mixins/ndarithmetic.py\n+++ b/astropy/nddata/mixins/ndarithmetic.py\n@@ -615,6 +615,17 @@ class NDArithmeticMixin:\n     @sharedmethod\n     @format_doc(_arit_doc, name=\"multiplication\", op=\"*\")\n     def multiply(self, operand, operand2=None, **kwargs):\n+        def handle_mask_or(mask1, mask2):\n+            if mask1 is None and mask2 is not None:\n+                return mask2\n+            elif mask1 is not None and mask2 is None:\n+                return mask1\n+            elif mask1 is None and mask2 is None:\n+                return None\n+            else:\n+                return np.bitwise_or(mask1, mask2)\n+\n+        kwargs['handle_mask'] = handle_mask_or\n         return self._prepare_then_do_arithmetic(\n             np.multiply, operand, operand2, **kwargs\n         )\n",
    "total_cost": 0.128724,
    "instance_id": "astropy__astropy-14995",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves mask propagation in arithmetic operations with NDDataRef in astropy v5.3, specifically when one operand does not have a mask. This results in a TypeError due to bitwise operations involving NoneType. The traceback indicates that the error occurs in the `multiply` method, suggesting an issue with how masks are handled during arithmetic operations. Thus, the primary focus should be on the NDArithmeticMixin class and the `multiply` method, as well as any related mask handling functions.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "NDArithmeticMixin"
                ],
                "code_snippet": null,
                "file_pattern": "**/nddata/**/*.py",
                "function_names": [
                  "multiply"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 59,
                "span_id": "NDArithmeticMixin.multiply",
                "file_path": "astropy/nddata/mixins/ndarithmetic.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "NDArithmeticMixin"
                ],
                "code_snippet": null,
                "file_pattern": "**/nddata/**/*.py",
                "function_names": [
                  "multiply"
                ]
              }
            ]
          },
          "input_tokens": 4639,
          "output_tokens": 178,
          "retry_message": null,
          "completion_cost": 0.016587
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 59,
            "span_id": "NDArithmeticMixin.multiply",
            "file_path": "astropy/nddata/mixins/ndarithmetic.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue pertains to the failure of mask propagation in NDDataRef during arithmetic operations, particularly when one of the operands lacks a mask. This is causing a TypeError due to the attempt to perform a bitwise OR operation between an integer and a NoneType. The user expects that when one operand has no mask, the existing mask should be copied over to the output, similar to the behavior in v5.2. The provided search results contain a class NDArithmeticMixin with a method multiply that uses _prepare_then_do_arithmetic for performing multiplication. This method is likely where the mask handling would be relevant due to its role in arithmetic operations on NDData objects. Since the issue specifies problems with arithmetic operations and 'handle_mask=np.bitwise_or' specifically, focusing on the multiply method and its handling of mask propagation appears pertinent.",
            "identified_spans": [
              {
                "span_ids": [
                  "NDArithmeticMixin.multiply"
                ],
                "file_path": "astropy/nddata/mixins/ndarithmetic.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 1959,
          "output_tokens": 251,
          "retry_message": null,
          "completion_cost": 0.009642000000000001
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context provided includes the NDArithmeticMixin class, which contains the `multiply` method. This method is likely where the error occurs, as indicated by the traceback. The method internally calls `_prepare_then_do_arithmetic`, which handles the arithmetic operation itself. Given that the error involves mask handling, it is plausible that the issue could be addressed within the `_prepare_then_do_arithmetic` method or a related function responsible for mask propagation. Therefore, the file context appears to include the relevant class and method where the fix for the reported issue would be implemented, suggesting that all relevant code has been identified.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 1886,
          "output_tokens": 170,
          "retry_message": null,
          "completion_cost": 0.008208
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "NDArithmeticMixin",
            "file_path": "astropy/nddata/mixins/ndarithmetic.py",
            "scratch_pad": "The issue arises from the fact that when one operand does not have a mask, the `np.bitwise_or` operation fails because it attempts to operate on an integer and a None. To resolve this, we need to ensure that if one of the operands does not have a mask, the resulting mask should be the one that exists. This can be achieved by checking if either operand's mask is None and handling that case explicitly within the `_prepare_then_do_arithmetic` method.",
            "instructions": "Update the `_prepare_then_do_arithmetic` method to handle cases where one of the masks is None. If one of the masks is None, the resulting mask should be the mask of the other operand. This ensures that arithmetic operations involving operands with and without masks do not fail."
          },
          "output": {
            "span_id": "NDArithmeticMixin",
            "file_path": "astropy/nddata/mixins/ndarithmetic.py",
            "instructions": "Update the `_prepare_then_do_arithmetic` method to handle cases where one of the masks is None. If one of the masks is None, the resulting mask should be the mask of the other operand. This ensures that arithmetic operations involving operands with and without masks do not fail."
          },
          "input_tokens": 2064,
          "output_tokens": 228,
          "retry_message": null,
          "completion_cost": 0.009612
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "NDArithmeticMixin",
        "end_line": null,
        "file_path": "astropy/nddata/mixins/ndarithmetic.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Update the `_prepare_then_do_arithmetic` method to handle cases where one of the masks is None. If one of the masks is None, the resulting mask should be the mask of the other operand. This ensures that arithmetic operations involving operands with and without masks do not fail.\n\nThe method to be updated is `_prepare_then_do_arithmetic`. The relevant lines are those where the method is defined and the masks are handled, particularly where they are combined or checked for None.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 656,
            "start_line": 653,
            "scratch_pad": "The method to be updated is `_prepare_then_do_arithmetic`. The relevant lines are those where the method is defined and the masks are handled, particularly where they are combined or checked for None."
          },
          "output": {
            "span_id": "NDArithmeticMixin",
            "end_line": 660,
            "file_path": "astropy/nddata/mixins/ndarithmetic.py",
            "start_line": 653,
            "instructions": "Update the `_prepare_then_do_arithmetic` method to handle cases where one of the masks is None. If one of the masks is None, the resulting mask should be the mask of the other operand. This ensures that arithmetic operations involving operands with and without masks do not fail.\n\nThe method to be updated is `_prepare_then_do_arithmetic`. The relevant lines are those where the method is defined and the masks are handled, particularly where they are combined or checked for None."
          },
          "input_tokens": 2154,
          "output_tokens": 89,
          "retry_message": null,
          "completion_cost": 0.007797
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "NDArithmeticMixin",
        "end_line": 660,
        "file_path": "astropy/nddata/mixins/ndarithmetic.py",
        "max_tokens": 1000,
        "start_line": 653,
        "temperature": 1.6,
        "instructions": "Update the `_prepare_then_do_arithmetic` method to handle cases where one of the masks is None. If one of the masks is None, the resulting mask should be the mask of the other operand. This ensures that arithmetic operations involving operands with and without masks do not fail.\n\nThe method to be updated is `_prepare_then_do_arithmetic`. The relevant lines are those where the method is defined and the masks are handled, particularly where they are combined or checked for None.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```plaintext\n<replace>\n    @sharedmethod\n    def _prepare_then_do_arithmetic(\n        self_or_cls, operation, operand=None, operand2=None, **kwargs\n    ):\n        \"\"\"Intermediate method called by public arithmetic (i.e. ``add``)\n        before the processing method (``_arithmetic``) is invoked.\n\n        .. warning::\n\"\"\"\n        # ... other code\n        mask1 = getattr(operand1, 'mask', None)\n        mask2 = getattr(operand2, 'mask', None)\n        \n        if mask1 is None and mask2 is not None:\n            combined_mask = mask2\n        elif mask2 is None and mask1 is not None:\n            combined_mask = mask1\n        elif mask1 is not None and mask2 is not None:\n            combined_mask = operation(mask1, mask2)\n        else:\n            combined_mask = None\n        \n        kwargs['propagate_mask'] = combined_mask\n        # ... other code\n</replace>"
          },
          "output": null,
          "input_tokens": 2391,
          "output_tokens": 238,
          "retry_message": "The following diff was not applied:\n --- astropy/nddata/mixins/ndarithmetic.py\n+++ astropy/nddata/mixins/ndarithmetic.py\n@@ -658,6 +658,22 @@\n         before the processing method (``_arithmetic``) is invoked.\n \n         .. warning::\n+\"\"\"\n+        # ... other code\n+        mask1 = getattr(operand1, 'mask', None)\n+        mask2 = getattr(operand2, 'mask', None)\n+        \n+        if mask1 is None and mask2 is not None:\n+            combined_mask = mask2\n+        elif mask2 is None and mask1 is not None:\n+            combined_mask = mask1\n+        elif mask1 is not None and mask2 is not None:\n+            combined_mask = operation(mask1, mask2)\n+        else:\n+            combined_mask = None\n+        \n+        kwargs['propagate_mask'] = combined_mask\n+        # ... other code\n             Do not override this method in subclasses.\n \n         This method checks if it was called as instance or as class method and\n. \nErrors:\nThe updated code is invalid.\nMake sure that you return the unchanged code in the replace tag exactly as it is. If you want to reject the instructions, use the reject function.",
          "completion_cost": 0.010743
        },
        {
          "action": {
            "content": "<reject>\nThe provided code snippet was not found in the original context, and thus cannot be applied.\n</reject>"
          },
          "output": {
            "message": "\nThe provided code snippet was not found in the original context, and thus cannot be applied.\n"
          },
          "input_tokens": 2944,
          "output_tokens": 26,
          "retry_message": null,
          "completion_cost": 0.009222
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "\nThe provided code snippet was not found in the original context, and thus cannot be applied.\n",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "NDArithmeticMixin._prepare_then_do_arithmetic",
            "file_path": "astropy/nddata/mixins/ndarithmetic.py",
            "scratch_pad": "The issue is related to the mask propagation in arithmetic operations where one operand lacks a mask. The provided file context shows the `multiply` method in `NDArithmeticMixin`, which calls `self._prepare_then_do_arithmetic`. This suggests the problem is likely in the method responsible for handling masks during arithmetic operations. We need to update the `_prepare_then_do_arithmetic` method to correctly handle cases where one of the operands has a mask and the other does not.",
            "instructions": "Implement a check within the `_prepare_then_do_arithmetic` method to handle mask propagation correctly. Ensure that if one of the operands does not have a mask (i.e., the mask is None), the resulting mask from the arithmetic operation should be the mask of the operand that has a mask. If both operands do not have masks, the result should also not have a mask."
          },
          "output": null,
          "input_tokens": 2331,
          "output_tokens": 269,
          "retry_message": "Span not found: NDArithmeticMixin._prepare_then_do_arithmetic. Available spans: NDArithmeticMixin.multiply, NDArithmeticMixin",
          "completion_cost": 0.011028
        },
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "NDArithmeticMixin.multiply",
            "file_path": "astropy/nddata/mixins/ndarithmetic.py",
            "scratch_pad": "The initial approach was to modify the `_prepare_then_do_arithmetic` method within the `NDArithmeticMixin` class. However, the span `NDArithmeticMixin._prepare_then_do_arithmetic` was not found in the provided file context. Instead, the context includes the `multiply` method, which is a critical part of the arithmetic operations. Given this, we need to adjust our strategy. The modification can be applied within the `multiply` method itself, by adding logic to check and handle the mask conditions mentioned in the issue directly inside the method call to `self._prepare_then_do_arithmetic`.",
            "instructions": "Update the `multiply` method within the `NDArithmeticMixin` class to include checks for mask presence and handling. If one operand's mask is None, the resulting mask from the operation should default to the other operand's mask. This logic will ensure that the mask propagation behaves correctly even when one operand lacks a mask."
          },
          "output": {
            "span_id": "NDArithmeticMixin.multiply",
            "end_line": 620,
            "file_path": "astropy/nddata/mixins/ndarithmetic.py",
            "start_line": 615,
            "instructions": "Update the `multiply` method within the `NDArithmeticMixin` class to include checks for mask presence and handling. If one operand's mask is None, the resulting mask from the operation should default to the other operand's mask. This logic will ensure that the mask propagation behaves correctly even when one operand lacks a mask."
          },
          "input_tokens": 2639,
          "output_tokens": 281,
          "retry_message": null,
          "completion_cost": 0.012132
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "NDArithmeticMixin.multiply",
        "end_line": 620,
        "file_path": "astropy/nddata/mixins/ndarithmetic.py",
        "max_tokens": 1000,
        "start_line": 615,
        "temperature": 1.6,
        "instructions": "Update the `multiply` method within the `NDArithmeticMixin` class to include checks for mask presence and handling. If one operand's mask is None, the resulting mask from the operation should default to the other operand's mask. This logic will ensure that the mask propagation behaves correctly even when one operand lacks a mask.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```python\n<replace>\n    @sharedmethod\n    @format_doc(_arit_doc, name=\"multiplication\", op=\"*\")\n    def multiply(self, operand, operand2=None, **kwargs):\n        def handle_mask_or(mask1, mask2):\n            if mask1 is None and mask2 is not None:\n                return mask2\n            elif mask1 is not None and mask2 is None:\n                return mask1\n            elif mask1 is None and mask2 is None:\n                return None\n            else:\n                return np.bitwise_or(mask1, mask2)\n\n        kwargs['handle_mask'] = handle_mask_or\n        return self._prepare_then_do_arithmetic(\n            np.multiply, operand, operand2, **kwargs\n        )\n</replace>"
          },
          "output": {
            "diff": "--- astropy/nddata/mixins/ndarithmetic.py\n+++ astropy/nddata/mixins/ndarithmetic.py\n@@ -615,6 +615,17 @@\n     @sharedmethod\n     @format_doc(_arit_doc, name=\"multiplication\", op=\"*\")\n     def multiply(self, operand, operand2=None, **kwargs):\n+        def handle_mask_or(mask1, mask2):\n+            if mask1 is None and mask2 is not None:\n+                return mask2\n+            elif mask1 is not None and mask2 is None:\n+                return mask1\n+            elif mask1 is None and mask2 is None:\n+                return None\n+            else:\n+                return np.bitwise_or(mask1, mask2)\n+\n+        kwargs['handle_mask'] = handle_mask_or\n         return self._prepare_then_do_arithmetic(\n             np.multiply, operand, operand2, **kwargs\n         )\n",
            "message": "Applied the change to astropy/nddata/mixins/ndarithmetic.py.\n\n<scratch_pad>\n```python\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 2344,
          "output_tokens": 188,
          "retry_message": null,
          "completion_cost": 0.009852
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- astropy/nddata/mixins/ndarithmetic.py\n+++ astropy/nddata/mixins/ndarithmetic.py\n@@ -615,6 +615,17 @@\n     @sharedmethod\n     @format_doc(_arit_doc, name=\"multiplication\", op=\"*\")\n     def multiply(self, operand, operand2=None, **kwargs):\n+        def handle_mask_or(mask1, mask2):\n+            if mask1 is None and mask2 is not None:\n+                return mask2\n+            elif mask1 is not None and mask2 is None:\n+                return mask1\n+            elif mask1 is None and mask2 is None:\n+                return None\n+            else:\n+                return np.bitwise_or(mask1, mask2)\n+\n+        kwargs['handle_mask'] = handle_mask_or\n         return self._prepare_then_do_arithmetic(\n             np.multiply, operand, operand2, **kwargs\n         )\n",
        "model": "deepseek-coder",
        "message": "Applied the change to astropy/nddata/mixins/ndarithmetic.py.\n\n<scratch_pad>\n```python\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "review",
            "finish": null,
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The applied change modifies the `multiply` method within the `NDArithmeticMixin` class. A new nested function `handle_mask_or` is introduced to correctly handle the mask propagation in cases where one of the operands does not have a mask. This function ensures that if one mask is None, the other mask is used or if both are None, the result is None. If neither mask is None, it performs the bitwise OR operation. This logic is then passed as the `handle_mask` argument in the `_prepare_then_do_arithmetic` method call, overriding the default behavior and solving the reported issue.",
            "instructions": null
          },
          "output": null,
          "input_tokens": 3002,
          "output_tokens": 192,
          "retry_message": "Review isn't possible. If the change is done you can finish or reject the task.",
          "completion_cost": 0.011886
        },
        {
          "action": {
            "action": "finish",
            "finish": "The change, which involves handling the mask condition within the `multiply` method of the `NDArithmeticMixin` class, aligns with the issue description and should resolve the problem. No further changes are necessary to address the reported issue.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The provided change has been implemented in the correct context and should resolve the reported issue. Given that the modification is in line with the problem description and the expected behavior, and taking into account the context provided, the change should be deemed satisfactory.",
            "instructions": null
          },
          "output": {
            "message": "The change, which involves handling the mask condition within the `multiply` method of the `NDArithmeticMixin` class, aligns with the issue description and should resolve the problem. No further changes are necessary to address the reported issue."
          },
          "input_tokens": 3220,
          "output_tokens": 157,
          "retry_message": null,
          "completion_cost": 0.012015
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The change, which involves handling the mask condition within the `multiply` method of the `NDArithmeticMixin` class, aligns with the issue description and should resolve the problem. No further changes are necessary to address the reported issue.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "In v5.3, NDDataRef mask propagation fails when one of the operand does not have a mask\n### Description\n\nThis applies to v5.3. \r\n\r\nIt looks like when one of the operand does not have a mask, the mask propagation when doing arithmetic, in particular with `handle_mask=np.bitwise_or` fails.  This is not a problem in v5.2.\r\n\r\nI don't know enough about how all that works, but it seems from the error that the operand without a mask is set as a mask of None's and then the bitwise_or tries to operate on an integer and a None and fails.\n\n### Expected behavior\n\nWhen one of the operand does not have mask, the mask that exists should just be copied over to the output.  Or whatever was done in that situation in v5.2 where there's no problem.\n\n### How to Reproduce\n\nThis is with v5.3.   With v5.2, there are no errors.\r\n\r\n```\r\n>>> import numpy as np\r\n>>> from astropy.nddata import NDDataRef\r\n\r\n>>> array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\r\n>>> mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\r\n\r\n>>> nref_nomask = NDDataRef(array)\r\n>>> nref_mask = NDDataRef(array, mask=mask)\r\n\r\n# multiply no mask by constant (no mask * no mask)\r\n>>> nref_nomask.multiply(1., handle_mask=np.bitwise_or).mask   # returns nothing, no mask,  OK\r\n\r\n# multiply no mask by itself (no mask * no mask)\r\n>>> nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask # return nothing, no mask, OK\r\n\r\n# multiply mask by constant (mask * no mask)\r\n>>> nref_mask.multiply(1., handle_mask=np.bitwise_or).mask\r\n...\r\nTypeError: unsupported operand type(s) for |: 'int' and 'NoneType'\r\n\r\n# multiply mask by itself (mask * mask)\r\n>>> nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or).mask\r\narray([[ 0,  1, 64],\r\n       [ 8,  0,  1],\r\n       [ 2,  1,  0]])\r\n\r\n# multiply mask by no mask (mask * no mask)\r\n>>> nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask\r\n...\r\nTypeError: unsupported operand type(s) for |: 'int' and 'NoneType'\r\n```\r\n\n\n### Versions\n\n>>> import sys; print(\"Python\", sys.version)\r\nPython 3.10.11 | packaged by conda-forge | (main, May 10 2023, 19:07:22) [Clang 14.0.6 ]\r\n>>> import astropy; print(\"astropy\", astropy.__version__)\r\nastropy 5.3\r\n>>> import numpy; print(\"Numpy\", numpy.__version__)\r\nNumpy 1.24.3\r\n>>> import erfa; print(\"pyerfa\", erfa.__version__)\r\npyerfa 2.0.0.3\r\n>>> import scipy; print(\"Scipy\", scipy.__version__)\r\nScipy 1.10.1\r\n>>> import matplotlib; print(\"Matplotlib\", matplotlib.__version__)\r\nMatplotlib 3.7.1\r\n\n"
}