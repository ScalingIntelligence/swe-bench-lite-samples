{
  "info": {
    "duration": 154.374853849411,
    "submission": "diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py\nindex 4153dfccb..9f8ef8662 100644\n--- a/astropy/nddata/mixins/ndarithmetic.py\n+++ b/astropy/nddata/mixins/ndarithmetic.py\n@@ -523,8 +523,11 @@ class NDArithmeticMixin:\n         elif operand is None:\n             return deepcopy(self.mask)\n         else:\n+            # Treat None masks as arrays of False values\n+            self_mask = self.mask if self.mask is not None else np.zeros_like(operand.mask, dtype=bool)\n+            operand_mask = operand.mask if operand.mask is not None else np.zeros_like(self.mask, dtype=bool)\n             # Now lets calculate the resulting mask (operation enforces copy)\n-            return handle_mask(self.mask, operand.mask, **kwds)\n+            return handle_mask(self_mask, operand_mask, **kwds)\n \n     def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):\n         \"\"\"\n",
    "total_cost": 0.12075599999999999,
    "instance_id": "astropy__astropy-14995",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue is related to mask propagation in NDDataRef when one of the operands does not have a mask and an arithmetic operation is performed with `handle_mask=np.bitwise_or`. The error occurs when `np.bitwise_or` tries to operate on an integer and a NoneType. The goal is to identify the part of the code responsible for mask handling in arithmetic operations, focusing on the NDArithmeticMixin class and related methods.",
            "search_requests": [
              {
                "query": "handle_mask=np.bitwise_or",
                "class_names": [],
                "code_snippet": "np.bitwise_or",
                "file_pattern": "**/nddata/**/*.py",
                "function_names": []
              }
            ]
          },
          "output": null,
          "input_tokens": 4639,
          "output_tokens": 179,
          "retry_message": "\n\nUnfortunately, I didn\u2019t find any relevant results.",
          "completion_cost": 0.016602
        },
        {
          "action": {
            "complete": false,
            "scratch_pad": "Since the initial search for 'handle_mask=np.bitwise_or' in the nddata directory did not yield results, we need to broaden our search to include a broader context. We will look for the keyword 'mask' in the nddata directory and specifically search for occurrences of bitwise or operations that might handle mask propagation. This should help us pinpoint the function or class where the mask handling logic is failing.",
            "search_requests": [
              {
                "query": "mask bitwise or",
                "class_names": [],
                "code_snippet": "",
                "file_pattern": "**/nddata/**/*.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 1734,
                "span_id": "interpret_bit_flags",
                "file_path": "astropy/nddata/bitmask.py"
              },
              {
                "rank": 0,
                "tokens": 2949,
                "span_id": "bitfield_to_boolean_mask",
                "file_path": "astropy/nddata/bitmask.py"
              },
              {
                "rank": 6,
                "tokens": 112,
                "span_id": "docstring",
                "file_path": "astropy/nddata/bitmask.py"
              },
              {
                "rank": 7,
                "tokens": 27,
                "span_id": "BitFlagNameMeta.__iadd__",
                "file_path": "astropy/nddata/bitmask.py"
              },
              {
                "rank": 7,
                "tokens": 99,
                "span_id": "BitFlagNameMeta.__getattr__",
                "file_path": "astropy/nddata/bitmask.py"
              },
              {
                "rank": 7,
                "tokens": 38,
                "span_id": "BitFlagNameMeta.__delitem__",
                "file_path": "astropy/nddata/bitmask.py"
              },
              {
                "rank": 7,
                "tokens": 38,
                "span_id": "BitFlagNameMeta.__delattr__",
                "file_path": "astropy/nddata/bitmask.py"
              },
              {
                "rank": 7,
                "tokens": 64,
                "span_id": "BitFlagNameMeta.__add__",
                "file_path": "astropy/nddata/bitmask.py"
              },
              {
                "rank": 7,
                "tokens": 28,
                "span_id": "BitFlagNameMeta.__repr__",
                "file_path": "astropy/nddata/bitmask.py"
              },
              {
                "rank": 7,
                "tokens": 15,
                "span_id": "BitFlagNameMeta.__getitem__",
                "file_path": "astropy/nddata/bitmask.py"
              },
              {
                "rank": 8,
                "tokens": 18,
                "span_id": "BitFlag",
                "file_path": "astropy/nddata/bitmask.py"
              },
              {
                "rank": 8,
                "tokens": 113,
                "span_id": "BitFlag.__new__",
                "file_path": "astropy/nddata/bitmask.py"
              },
              {
                "rank": 2,
                "tokens": 198,
                "span_id": "docstring",
                "file_path": "astropy/nddata/__init__.py"
              },
              {
                "rank": 5,
                "tokens": 25,
                "span_id": "NDDataArray.mask",
                "file_path": "astropy/nddata/compat.py"
              },
              {
                "rank": 5,
                "tokens": 138,
                "span_id": "NDDataArray.unit_3",
                "file_path": "astropy/nddata/compat.py"
              },
              {
                "rank": 5,
                "tokens": 113,
                "span_id": "NDDataArray.mask_5",
                "file_path": "astropy/nddata/compat.py"
              },
              {
                "rank": 13,
                "tokens": 93,
                "span_id": "NDDataArray.flags_11",
                "file_path": "astropy/nddata/compat.py"
              },
              {
                "rank": 9,
                "tokens": 1499,
                "span_id": "NDArithmeticMixin._arithmetic",
                "file_path": "astropy/nddata/mixins/ndarithmetic.py"
              },
              {
                "rank": 10,
                "tokens": 317,
                "span_id": "NDArithmeticMixin._arithmetic_mask",
                "file_path": "astropy/nddata/mixins/ndarithmetic.py"
              },
              {
                "rank": 12,
                "tokens": 33,
                "span_id": "NDData.wcs",
                "file_path": "astropy/nddata/nddata.py"
              },
              {
                "rank": 12,
                "tokens": 55,
                "span_id": "NDData.mask",
                "file_path": "astropy/nddata/nddata.py"
              },
              {
                "rank": 12,
                "tokens": 60,
                "span_id": "NDData.__repr__",
                "file_path": "astropy/nddata/nddata.py"
              },
              {
                "rank": 12,
                "tokens": 16,
                "span_id": "NDData.mask_4",
                "file_path": "astropy/nddata/nddata.py"
              },
              {
                "rank": 12,
                "tokens": 27,
                "span_id": "NDData.data",
                "file_path": "astropy/nddata/nddata.py"
              },
              {
                "rank": 12,
                "tokens": 32,
                "span_id": "NDData.__str__",
                "file_path": "astropy/nddata/nddata.py"
              },
              {
                "rank": 12,
                "tokens": 31,
                "span_id": "NDData.unit",
                "file_path": "astropy/nddata/nddata.py"
              }
            ],
            "search_requests": [
              {
                "query": "mask bitwise or",
                "class_names": [],
                "code_snippet": "",
                "file_pattern": "**/nddata/**/*.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 4852,
          "output_tokens": 177,
          "retry_message": null,
          "completion_cost": 0.017211
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 1734,
            "span_id": "interpret_bit_flags",
            "file_path": "astropy/nddata/bitmask.py"
          },
          {
            "rank": 0,
            "tokens": 2949,
            "span_id": "bitfield_to_boolean_mask",
            "file_path": "astropy/nddata/bitmask.py"
          },
          {
            "rank": 2,
            "tokens": 198,
            "span_id": "docstring",
            "file_path": "astropy/nddata/__init__.py"
          },
          {
            "rank": 5,
            "tokens": 25,
            "span_id": "NDDataArray.mask",
            "file_path": "astropy/nddata/compat.py"
          },
          {
            "rank": 5,
            "tokens": 138,
            "span_id": "NDDataArray.unit_3",
            "file_path": "astropy/nddata/compat.py"
          },
          {
            "rank": 5,
            "tokens": 113,
            "span_id": "NDDataArray.mask_5",
            "file_path": "astropy/nddata/compat.py"
          },
          {
            "rank": 6,
            "tokens": 112,
            "span_id": "docstring",
            "file_path": "astropy/nddata/bitmask.py"
          },
          {
            "rank": 7,
            "tokens": 27,
            "span_id": "BitFlagNameMeta.__iadd__",
            "file_path": "astropy/nddata/bitmask.py"
          },
          {
            "rank": 7,
            "tokens": 99,
            "span_id": "BitFlagNameMeta.__getattr__",
            "file_path": "astropy/nddata/bitmask.py"
          },
          {
            "rank": 7,
            "tokens": 38,
            "span_id": "BitFlagNameMeta.__delitem__",
            "file_path": "astropy/nddata/bitmask.py"
          },
          {
            "rank": 7,
            "tokens": 38,
            "span_id": "BitFlagNameMeta.__delattr__",
            "file_path": "astropy/nddata/bitmask.py"
          },
          {
            "rank": 7,
            "tokens": 64,
            "span_id": "BitFlagNameMeta.__add__",
            "file_path": "astropy/nddata/bitmask.py"
          },
          {
            "rank": 7,
            "tokens": 28,
            "span_id": "BitFlagNameMeta.__repr__",
            "file_path": "astropy/nddata/bitmask.py"
          },
          {
            "rank": 7,
            "tokens": 15,
            "span_id": "BitFlagNameMeta.__getitem__",
            "file_path": "astropy/nddata/bitmask.py"
          },
          {
            "rank": 8,
            "tokens": 18,
            "span_id": "BitFlag",
            "file_path": "astropy/nddata/bitmask.py"
          },
          {
            "rank": 8,
            "tokens": 113,
            "span_id": "BitFlag.__new__",
            "file_path": "astropy/nddata/bitmask.py"
          },
          {
            "rank": 9,
            "tokens": 1499,
            "span_id": "NDArithmeticMixin._arithmetic",
            "file_path": "astropy/nddata/mixins/ndarithmetic.py"
          },
          {
            "rank": 10,
            "tokens": 317,
            "span_id": "NDArithmeticMixin._arithmetic_mask",
            "file_path": "astropy/nddata/mixins/ndarithmetic.py"
          },
          {
            "rank": 12,
            "tokens": 33,
            "span_id": "NDData.wcs",
            "file_path": "astropy/nddata/nddata.py"
          },
          {
            "rank": 12,
            "tokens": 55,
            "span_id": "NDData.mask",
            "file_path": "astropy/nddata/nddata.py"
          },
          {
            "rank": 12,
            "tokens": 60,
            "span_id": "NDData.__repr__",
            "file_path": "astropy/nddata/nddata.py"
          },
          {
            "rank": 12,
            "tokens": 16,
            "span_id": "NDData.mask_4",
            "file_path": "astropy/nddata/nddata.py"
          },
          {
            "rank": 12,
            "tokens": 27,
            "span_id": "NDData.data",
            "file_path": "astropy/nddata/nddata.py"
          },
          {
            "rank": 12,
            "tokens": 32,
            "span_id": "NDData.__str__",
            "file_path": "astropy/nddata/nddata.py"
          },
          {
            "rank": 12,
            "tokens": 31,
            "span_id": "NDData.unit",
            "file_path": "astropy/nddata/nddata.py"
          },
          {
            "rank": 13,
            "tokens": 93,
            "span_id": "NDDataArray.flags_11",
            "file_path": "astropy/nddata/compat.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue relates to the failure of mask propagation in NDDataRef when one of the operands does not have a mask in version 5.3. Specifically, the bitwise_or operation fails when dealing with an integer and a NoneType. The expected behavior is for the existing mask to be copied over when one operand lacks a mask, similar to the functionality in version 5.2.\n\nReviewing the search results, there are several relevant code spans that potentially handle mask operations and could be contributing to the issue. In 'astropy/nddata/bitmask.py', the 'bitfield_to_boolean_mask' function deals with creating boolean masks from bitfields and interpreting bit flags, which could be related to mask handling. In 'astropy/nddata/compat.py', the 'NDDataArray' class has properties and setters for mask, potentially where the mask logic fails.\n\nIn 'astropy/nddata/mixins/ndarithmetic.py', the 'NDArithmeticMixin' class contains the '_arithmetic_mask' method, which specifically handles mask operations during arithmetic, including the bitwise_or operation that is failing. This method is likely where the issue lies. Similarly, in 'astropy/nddata/nddata.py', the 'NDData' class has properties and setters for masks, which may also contribute to the issue.\n\nBy analyzing these code spans, it should be possible to identify where the mask propagation logic fails when one operand does not have a mask and implement a fix to ensure the mask is handled correctly, as it was in version 5.2.",
            "identified_spans": [
              {
                "span_ids": [
                  "docstring",
                  "bitfield_to_boolean_mask"
                ],
                "file_path": "astropy/nddata/bitmask.py"
              },
              {
                "span_ids": [
                  "NDDataArray.mask",
                  "NDDataArray.mask_5"
                ],
                "file_path": "astropy/nddata/compat.py"
              },
              {
                "span_ids": [
                  "NDArithmeticMixin._arithmetic_mask"
                ],
                "file_path": "astropy/nddata/mixins/ndarithmetic.py"
              },
              {
                "span_ids": [
                  "NDData.mask",
                  "NDData.mask_4"
                ],
                "file_path": "astropy/nddata/nddata.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4681,
          "output_tokens": 584,
          "retry_message": null,
          "completion_cost": 0.022803
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context provided includes various parts of the nddata module that deal with masks and bitwise operations. Specifically, the `NDArithmeticMixin` class in 'mixins/ndarithmetic.py' contains a method `_arithmetic_mask` which handles the masks during arithmetic operations, including the use of `handle_mask`. This appears to be the primary location where the error in mask propagation for `NDDataRef` would manifest, especially when one operand does not have a mask. Also, the `bitfield_to_boolean_mask` function in 'bitmask.py' is related to mask handling, although it is more focused on converting bitfields to boolean masks rather than directly addressing the arithmetic propagation issue described. Additionally, the `NDDataArray` class in 'compat.py' and the `NDData` class in 'nddata.py' deal with mask properties, but they do not directly handle the arithmetic operations involving masks. Based on the analysis of the provided file context, it seems plausible that the relevant code to address the issue reported is present, specifically in the `NDArithmeticMixin` class method `_arithmetic_mask`. Therefore, the file context is considered complete for addressing the issue.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 2809,
          "output_tokens": 291,
          "retry_message": null,
          "completion_cost": 0.012792000000000001
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "NDArithmeticMixin._arithmetic_mask",
            "file_path": "astropy/nddata/mixins/ndarithmetic.py",
            "scratch_pad": "The issue is caused by trying to perform bitwise operations on masks that can be None. The current implementation in `_arithmetic_mask` does not handle the case where one of the operands has a None mask, leading to a TypeError. The solution is to ensure that both operands have a mask before applying the bitwise operation.",
            "instructions": "Update the `_arithmetic_mask` method in `NDArithmeticMixin` to handle cases where one of the masks is None. If either the self.mask or the operand.mask is None, treat it as if it were an array of False values (equivalent to no mask)."
          },
          "output": {
            "span_id": "NDArithmeticMixin._arithmetic_mask",
            "end_line": 527,
            "file_path": "astropy/nddata/mixins/ndarithmetic.py",
            "start_line": 485,
            "instructions": "Update the `_arithmetic_mask` method in `NDArithmeticMixin` to handle cases where one of the masks is None. If either the self.mask or the operand.mask is None, treat it as if it were an array of False values (equivalent to no mask)."
          },
          "input_tokens": 3104,
          "output_tokens": 197,
          "retry_message": null,
          "completion_cost": 0.012267
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "NDArithmeticMixin._arithmetic_mask",
        "end_line": 527,
        "file_path": "astropy/nddata/mixins/ndarithmetic.py",
        "max_tokens": 1000,
        "start_line": 485,
        "temperature": 1.6,
        "instructions": "Update the `_arithmetic_mask` method in `NDArithmeticMixin` to handle cases where one of the masks is None. If either the self.mask or the operand.mask is None, treat it as if it were an array of False values (equivalent to no mask).",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n    def _arithmetic_mask(self, operation, operand, handle_mask, axis=None, **kwds):\n        \"\"\"\n        Calculate the resulting mask.\n\n        This is implemented as the piecewise ``or`` operation if both have a\n        mask.\n\n        Parameters\n        ----------\n        operation : callable\n            see :meth:`NDArithmeticMixin._arithmetic` parameter description.\n            By default, the ``operation`` will be ignored.\n\n        operand : `NDData`-like instance\n            The second operand wrapped in an instance of the same class as\n            self.\n\n        handle_mask : callable\n            see :meth:`NDArithmeticMixin.add`\n\n        kwds :\n            Additional parameters given to ``handle_mask``.\n\n        Returns\n        -------\n        result_mask : any type\n            If only one mask was present this mask is returned.\n            If neither had a mask ``None`` is returned. Otherwise\n            ``handle_mask`` must create (and copy) the returned mask.\n        \"\"\"\n        # If only one mask is present we need not bother about any type checks\n        if (\n            self.mask is None and operand is not None and operand.mask is None\n        ) or handle_mask is None:\n            return None\n        elif self.mask is None and operand is not None:\n            # Make a copy so there is no reference in the result.\n            return deepcopy(operand.mask)\n        elif operand is None:\n            return deepcopy(self.mask)\n        else:\n            # Treat None masks as arrays of False values\n            self_mask = self.mask if self.mask is not None else np.zeros_like(operand.mask, dtype=bool)\n            operand_mask = operand.mask if operand.mask is not None else np.zeros_like(self.mask, dtype=bool)\n            # Now lets calculate the resulting mask (operation enforces copy)\n            return handle_mask(self_mask, operand_mask, **kwds)\n</replace>"
          },
          "output": {
            "diff": "--- astropy/nddata/mixins/ndarithmetic.py\n+++ astropy/nddata/mixins/ndarithmetic.py\n@@ -523,8 +523,11 @@\n         elif operand is None:\n             return deepcopy(self.mask)\n         else:\n+            # Treat None masks as arrays of False values\n+            self_mask = self.mask if self.mask is not None else np.zeros_like(operand.mask, dtype=bool)\n+            operand_mask = operand.mask if operand.mask is not None else np.zeros_like(self.mask, dtype=bool)\n             # Now lets calculate the resulting mask (operation enforces copy)\n-            return handle_mask(self.mask, operand.mask, **kwds)\n+            return handle_mask(self_mask, operand_mask, **kwds)\n \n     def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):\n         \"\"\"\n",
            "message": "Applied the change to astropy/nddata/mixins/ndarithmetic.py.",
            "verification_errors": []
          },
          "input_tokens": 6307,
          "output_tokens": 457,
          "retry_message": null,
          "completion_cost": 0.025776
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- astropy/nddata/mixins/ndarithmetic.py\n+++ astropy/nddata/mixins/ndarithmetic.py\n@@ -523,8 +523,11 @@\n         elif operand is None:\n             return deepcopy(self.mask)\n         else:\n+            # Treat None masks as arrays of False values\n+            self_mask = self.mask if self.mask is not None else np.zeros_like(operand.mask, dtype=bool)\n+            operand_mask = operand.mask if operand.mask is not None else np.zeros_like(self.mask, dtype=bool)\n             # Now lets calculate the resulting mask (operation enforces copy)\n-            return handle_mask(self.mask, operand.mask, **kwds)\n+            return handle_mask(self_mask, operand_mask, **kwds)\n \n     def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):\n         \"\"\"\n",
        "model": "deepseek-coder",
        "message": "Applied the change to astropy/nddata/mixins/ndarithmetic.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue has been resolved by ensuring that both operands have a mask before performing the bitwise operation. If either mask is None, it is treated as an array of False values, preventing the TypeError.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The applied change correctly handles cases where one of the masks is None by treating it as an array of False values. This prevents the TypeError caused by the bitwise operation on a NoneType and an integer. The updated method now ensures that both masks are valid before performing the bitwise operation.",
            "instructions": null
          },
          "output": {
            "message": "The issue has been resolved by ensuring that both operands have a mask before performing the bitwise operation. If either mask is None, it is treated as an array of False values, preventing the TypeError."
          },
          "input_tokens": 3635,
          "output_tokens": 160,
          "retry_message": null,
          "completion_cost": 0.013305
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue has been resolved by ensuring that both operands have a mask before performing the bitwise operation. If either mask is None, it is treated as an array of False values, preventing the TypeError.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "In v5.3, NDDataRef mask propagation fails when one of the operand does not have a mask\n### Description\n\nThis applies to v5.3. \r\n\r\nIt looks like when one of the operand does not have a mask, the mask propagation when doing arithmetic, in particular with `handle_mask=np.bitwise_or` fails.  This is not a problem in v5.2.\r\n\r\nI don't know enough about how all that works, but it seems from the error that the operand without a mask is set as a mask of None's and then the bitwise_or tries to operate on an integer and a None and fails.\n\n### Expected behavior\n\nWhen one of the operand does not have mask, the mask that exists should just be copied over to the output.  Or whatever was done in that situation in v5.2 where there's no problem.\n\n### How to Reproduce\n\nThis is with v5.3.   With v5.2, there are no errors.\r\n\r\n```\r\n>>> import numpy as np\r\n>>> from astropy.nddata import NDDataRef\r\n\r\n>>> array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\r\n>>> mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\r\n\r\n>>> nref_nomask = NDDataRef(array)\r\n>>> nref_mask = NDDataRef(array, mask=mask)\r\n\r\n# multiply no mask by constant (no mask * no mask)\r\n>>> nref_nomask.multiply(1., handle_mask=np.bitwise_or).mask   # returns nothing, no mask,  OK\r\n\r\n# multiply no mask by itself (no mask * no mask)\r\n>>> nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask # return nothing, no mask, OK\r\n\r\n# multiply mask by constant (mask * no mask)\r\n>>> nref_mask.multiply(1., handle_mask=np.bitwise_or).mask\r\n...\r\nTypeError: unsupported operand type(s) for |: 'int' and 'NoneType'\r\n\r\n# multiply mask by itself (mask * mask)\r\n>>> nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or).mask\r\narray([[ 0,  1, 64],\r\n       [ 8,  0,  1],\r\n       [ 2,  1,  0]])\r\n\r\n# multiply mask by no mask (mask * no mask)\r\n>>> nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask\r\n...\r\nTypeError: unsupported operand type(s) for |: 'int' and 'NoneType'\r\n```\r\n\n\n### Versions\n\n>>> import sys; print(\"Python\", sys.version)\r\nPython 3.10.11 | packaged by conda-forge | (main, May 10 2023, 19:07:22) [Clang 14.0.6 ]\r\n>>> import astropy; print(\"astropy\", astropy.__version__)\r\nastropy 5.3\r\n>>> import numpy; print(\"Numpy\", numpy.__version__)\r\nNumpy 1.24.3\r\n>>> import erfa; print(\"pyerfa\", erfa.__version__)\r\npyerfa 2.0.0.3\r\n>>> import scipy; print(\"Scipy\", scipy.__version__)\r\nScipy 1.10.1\r\n>>> import matplotlib; print(\"Matplotlib\", matplotlib.__version__)\r\nMatplotlib 3.7.1\r\n\n"
}