{
  "info": {
    "duration": 160.555739402771,
    "submission": "diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py\nindex 4153dfccb..0afad5835 100644\n--- a/astropy/nddata/mixins/ndarithmetic.py\n+++ b/astropy/nddata/mixins/ndarithmetic.py\n@@ -523,6 +523,11 @@ class NDArithmeticMixin:\n         elif operand is None:\n             return deepcopy(self.mask)\n         else:\n+            # Check for NoneType masks before performing the operation\n+            if self.mask is None:\n+                return deepcopy(operand.mask)\n+            elif operand.mask is None:\n+                return deepcopy(self.mask)\n             # Now lets calculate the resulting mask (operation enforces copy)\n             return handle_mask(self.mask, operand.mask, **kwds)\n \n",
    "total_cost": 0.153429,
    "instance_id": "astropy__astropy-14995",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue pertains to the failure of mask propagation in NDDataRef when one of the operands lacks a mask, leading to a 'TypeError: unsupported operand type(s) for |: 'int' and 'NoneType''. This error occurs specifically in version 5.3 of astropy, whereas version 5.2 does not exhibit this problem. The focus should be on the NDDataRef class and its interaction with mask handling during arithmetic operations, particularly when using `handle_mask=np.bitwise_or`. The relevant files and methods to investigate include NDDataRef, NDArithmeticMixin, and potentially MaskedNDArray or related classes that manage mask operations. ",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "NDDataRef",
                  "NDArithmeticMixin"
                ],
                "code_snippet": null,
                "file_pattern": null,
                "function_names": [
                  "multiply",
                  "_arithmetic",
                  "_arithmetic_mask"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 59,
                "span_id": "NDArithmeticMixin.multiply",
                "file_path": "astropy/nddata/mixins/ndarithmetic.py"
              },
              {
                "rank": 0,
                "tokens": 1499,
                "span_id": "NDArithmeticMixin._arithmetic",
                "file_path": "astropy/nddata/mixins/ndarithmetic.py"
              },
              {
                "rank": 0,
                "tokens": 317,
                "span_id": "NDArithmeticMixin._arithmetic_mask",
                "file_path": "astropy/nddata/mixins/ndarithmetic.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "NDDataRef",
                  "NDArithmeticMixin"
                ],
                "code_snippet": null,
                "file_pattern": null,
                "function_names": [
                  "multiply",
                  "_arithmetic",
                  "_arithmetic_mask"
                ]
              }
            ]
          },
          "input_tokens": 4639,
          "output_tokens": 215,
          "retry_message": null,
          "completion_cost": 0.017142
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 59,
            "span_id": "NDArithmeticMixin.multiply",
            "file_path": "astropy/nddata/mixins/ndarithmetic.py"
          },
          {
            "rank": 0,
            "tokens": 1499,
            "span_id": "NDArithmeticMixin._arithmetic",
            "file_path": "astropy/nddata/mixins/ndarithmetic.py"
          },
          {
            "rank": 0,
            "tokens": 317,
            "span_id": "NDArithmeticMixin._arithmetic_mask",
            "file_path": "astropy/nddata/mixins/ndarithmetic.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue pertains to the failure of mask propagation in NDDataRef when one of the operands lacks a mask in version 5.3. This contrasts with functioning mask propagation in version 5.2. The essential concern is that arithmetic operations, particularly involving `np.bitwise_or` for handling masks, fail when one operand has a mask of None. This leads to a TypeError because 'np.bitwise_or' cannot operate on an 'int' and a 'NoneType'. To address this, it's crucial to identify the part of the code responsible for mask handling in arithmetic operations. The search results show relevant classes and methods within `astropy/nddata/mixins/ndarithmetic.py`, specifically the `NDArithmeticMixin` class and its methods such as `_arithmetic`, `_arithmetic_mask`, and `multiply`. These methods handle various aspects of arithmetic operations, including mask handling and propagation. The analysis of these methods reveals the logic for mask handling, including how it defaults and combines masks during arithmetic operations. This code is highly relevant as it directly addresses the mask handling that is failing in the reported issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "NDArithmeticMixin",
                  "NDArithmeticMixin._arithmetic",
                  "NDArithmeticMixin._arithmetic_mask",
                  "NDArithmeticMixin.multiply"
                ],
                "file_path": "astropy/nddata/mixins/ndarithmetic.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3279,
          "output_tokens": 345,
          "retry_message": null,
          "completion_cost": 0.015012000000000001
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The issue pertains to the failure of mask propagation in NDDataRef when one of the operands lacks a mask, leading to a 'TypeError: unsupported operand type(s) for |: 'int' and 'NoneType''. This error occurs specifically in version 5.3 of astropy, whereas version 5.2 does not exhibit this problem. The focus should be on the NDDataRef class and its interaction with mask handling during arithmetic operations, particularly when using `handle_mask=np.bitwise_or`. The relevant files and methods to investigate include NDDataRef, NDArithmeticMixin, and potentially MaskedNDArray or related classes that manage mask operations.",
            "search_suggestions": "Investigate the NDDataRef class, NDArithmeticMixin methods, and related classes like MaskedNDArray to identify the exact location where the mask handling during arithmetic operations fails when one operand lacks a mask."
          },
          "output": {
            "message": "Investigate the NDDataRef class, NDArithmeticMixin methods, and related classes like MaskedNDArray to identify the exact location where the mask handling during arithmetic operations fails when one operand lacks a mask."
          },
          "input_tokens": 3211,
          "output_tokens": 218,
          "retry_message": null,
          "completion_cost": 0.012903000000000001
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Investigate the NDDataRef class, NDArithmeticMixin methods, and related classes like MaskedNDArray to identify the exact location where the mask handling during arithmetic operations fails when one operand lacks a mask.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "scratch_pad": "The investigation into the NDDataRef class and NDArithmeticMixin reveals that the issue likely arises in the _arithmetic_mask method within the NDArithmeticMixin class. This method is responsible for handling the mask during arithmetic operations. The specific problem described, where a 'TypeError: unsupported operand type(s) for |: 'int' and 'NoneType'' occurs, suggests a failure in handling the mask when one operand does not have a mask. Further examination of the _arithmetic_mask method shows that it does not explicitly check for NoneType masks before applying the logical operation. This oversight could lead to the described error when attempting to use np.bitwise_or on a mask that is None.",
            "search_requests": []
          },
          "output": {
            "message": "The investigation into the NDDataRef class and NDArithmeticMixin reveals that the issue likely arises in the _arithmetic_mask method within the NDArithmeticMixin class. This method is responsible for handling the mask during arithmetic operations. The specific problem described, where a 'TypeError: unsupported operand type(s) for |: 'int' and 'NoneType'' occurs, suggests a failure in handling the mask when one operand does not have a mask. Further examination of the _arithmetic_mask method shows that it does not explicitly check for NoneType masks before applying the logical operation. This oversight could lead to the described error when attempting to use np.bitwise_or on a mask that is None."
          },
          "input_tokens": 6356,
          "output_tokens": 174,
          "retry_message": null,
          "completion_cost": 0.021678000000000003
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "The investigation into the NDDataRef class and NDArithmeticMixin reveals that the issue likely arises in the _arithmetic_mask method within the NDArithmeticMixin class. This method is responsible for handling the mask during arithmetic operations. The specific problem described, where a 'TypeError: unsupported operand type(s) for |: 'int' and 'NoneType'' occurs, suggests a failure in handling the mask when one operand does not have a mask. Further examination of the _arithmetic_mask method shows that it does not explicitly check for NoneType masks before applying the logical operation. This oversight could lead to the described error when attempting to use np.bitwise_or on a mask that is None.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "NDArithmeticMixin._arithmetic_mask",
            "file_path": "astropy/nddata/mixins/ndarithmetic.py",
            "scratch_pad": "The specific issue arises from the _arithmetic_mask method not considering NoneType masks before attempting to apply np.bitwise_or. I intend to add a check for NoneType masks and handle them appropriately to prevent the TypeError.",
            "instructions": "Modify the _arithmetic_mask method to include a check for NoneType masks before performing the logical operation. This will prevent the TypeError by ensuring that only valid masks are used in the operation."
          },
          "output": {
            "span_id": "NDArithmeticMixin._arithmetic_mask",
            "end_line": 527,
            "file_path": "astropy/nddata/mixins/ndarithmetic.py",
            "start_line": 485,
            "instructions": "Modify the _arithmetic_mask method to include a check for NoneType masks before performing the logical operation. This will prevent the TypeError by ensuring that only valid masks are used in the operation."
          },
          "input_tokens": 3528,
          "output_tokens": 156,
          "retry_message": null,
          "completion_cost": 0.012924
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "NDArithmeticMixin._arithmetic_mask",
        "end_line": 527,
        "file_path": "astropy/nddata/mixins/ndarithmetic.py",
        "max_tokens": 1000,
        "start_line": 485,
        "temperature": 1.6,
        "instructions": "Modify the _arithmetic_mask method to include a check for NoneType masks before performing the logical operation. This will prevent the TypeError by ensuring that only valid masks are used in the operation.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\n    def _arithmetic_mask(self, operation, operand, handle_mask, axis=None, **kwds):\n        \"\"\"\n        Calculate the resulting mask.\n\n        This is implemented as the piecewise ``or`` operation if both have a\n        mask.\n\n        Parameters\n        ----------\n        operation : callable\n            see :meth:`NDArithmeticMixin._arithmetic` parameter description.\n            By default, the ``operation`` will be ignored.\n\n        operand : `NDData`-like instance\n            The second operand wrapped in an instance of the same class as\n            self.\n\n        handle_mask : callable\n            see :meth:`NDArithmeticMixin.add`\n\n        kwds :\n            Additional parameters given to ``handle_mask``.\n\n        Returns\n        -------\n        result_mask : any type\n            If only one mask was present this mask is returned.\n            If neither had a mask ``None`` is returned. Otherwise\n            ``handle_mask`` must create (and copy) the returned mask.\n        \"\"\"\n        # If only one mask is present we need not bother about any type checks\n        if (\n            self.mask is None and operand is not None and operand.mask is None\n        ) or handle_mask is None:\n            return None\n        elif self.mask is None and operand is not None:\n            # Make a copy so there is no reference in the result.\n            return deepcopy(operand.mask)\n        elif operand is None:\n            return deepcopy(self.mask)\n        else:\n            # Check for NoneType masks before performing the operation\n            if self.mask is None or operand.mask is None:\n                return None\n            # Now lets calculate the resulting mask (operation enforces copy)\n            return handle_mask(self.mask, operand.mask, **kwds)\n</replace>"
          },
          "output": {
            "diff": "--- astropy/nddata/mixins/ndarithmetic.py\n+++ astropy/nddata/mixins/ndarithmetic.py\n@@ -523,6 +523,9 @@\n         elif operand is None:\n             return deepcopy(self.mask)\n         else:\n+            # Check for NoneType masks before performing the operation\n+            if self.mask is None or operand.mask is None:\n+                return None\n             # Now lets calculate the resulting mask (operation enforces copy)\n             return handle_mask(self.mask, operand.mask, **kwds)\n \n",
            "message": "Applied the change to astropy/nddata/mixins/ndarithmetic.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 4871,
          "output_tokens": 418,
          "retry_message": null,
          "completion_cost": 0.020883000000000002
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- astropy/nddata/mixins/ndarithmetic.py\n+++ astropy/nddata/mixins/ndarithmetic.py\n@@ -523,6 +523,9 @@\n         elif operand is None:\n             return deepcopy(self.mask)\n         else:\n+            # Check for NoneType masks before performing the operation\n+            if self.mask is None or operand.mask is None:\n+                return None\n             # Now lets calculate the resulting mask (operation enforces copy)\n             return handle_mask(self.mask, operand.mask, **kwds)\n \n",
        "model": "deepseek-coder",
        "message": "Applied the change to astropy/nddata/mixins/ndarithmetic.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "NDArithmeticMixin._arithmetic_mask",
            "file_path": "astropy/nddata/mixins/ndarithmetic.py",
            "scratch_pad": "The initial change has been applied, and it successfully adds a check for NoneType masks before performing the bitwise operation. This should resolve the TypeError when one of the operands does not have a mask. However, the expected behavior of the mask handling in the presence of NoneType masks should be revisited to ensure it matches the expected outcome from v5.2. Specifically, it might be necessary to propagate the existing mask rather than simply returning None.",
            "instructions": "Revise the handling of NoneType masks in the _arithmetic_mask method to ensure that when one operand has a mask and the other does not (i.e., its mask is None), the resulting mask should be the mask of the operand that has it. This behavior should be consistent with the expected behavior from v5.2."
          },
          "output": {
            "span_id": "NDArithmeticMixin._arithmetic_mask",
            "end_line": 530,
            "file_path": "astropy/nddata/mixins/ndarithmetic.py",
            "start_line": 485,
            "instructions": "Revise the handling of NoneType masks in the _arithmetic_mask method to ensure that when one operand has a mask and the other does not (i.e., its mask is None), the resulting mask should be the mask of the operand that has it. This behavior should be consistent with the expected behavior from v5.2."
          },
          "input_tokens": 3902,
          "output_tokens": 242,
          "retry_message": null,
          "completion_cost": 0.015336
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "NDArithmeticMixin._arithmetic_mask",
        "end_line": 530,
        "file_path": "astropy/nddata/mixins/ndarithmetic.py",
        "max_tokens": 1000,
        "start_line": 485,
        "temperature": 1.6,
        "instructions": "Revise the handling of NoneType masks in the _arithmetic_mask method to ensure that when one operand has a mask and the other does not (i.e., its mask is None), the resulting mask should be the mask of the operand that has it. This behavior should be consistent with the expected behavior from v5.2.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```\n<replace>\n    def _arithmetic_mask(self, operation, operand, handle_mask, axis=None, **kwds):\n        \"\"\"\n        Calculate the resulting mask.\n\n        This is implemented as the piecewise ``or`` operation if both have a\n        mask.\n\n        Parameters\n        ----------\n        operation : callable\n            see :meth:`NDArithmeticMixin._arithmetic` parameter description.\n            By default, the ``operation`` will be ignored.\n\n        operand : `NDData`-like instance\n            The second operand wrapped in an instance of the same class as\n            self.\n\n        handle_mask : callable\n            see :meth:`NDArithmeticMixin.add`\n\n        kwds :\n            Additional parameters given to ``handle_mask``.\n\n        Returns\n        -------\n        result_mask : any type\n            If only one mask was present this mask is returned.\n            If neither had a mask ``None`` is returned. Otherwise\n            ``handle_mask`` must create (and copy) the returned mask.\n        \"\"\"\n        # If only one mask is present we need not bother about any type checks\n        if (\n            self.mask is None and operand is not None and operand.mask is None\n        ) or handle_mask is None:\n            return None\n        elif self.mask is None and operand is not None:\n            # Make a copy so there is no reference in the result.\n            return deepcopy(operand.mask)\n        elif operand is None:\n            return deepcopy(self.mask)\n        else:\n            # Check for NoneType masks before performing the operation\n            if self.mask is None:\n                return deepcopy(operand.mask)\n            elif operand.mask is None:\n                return deepcopy(self.mask)\n            # Now lets calculate the resulting mask (operation enforces copy)\n            return handle_mask(self.mask, operand.mask, **kwds)\n</replace>"
          },
          "output": {
            "diff": "--- astropy/nddata/mixins/ndarithmetic.py\n+++ astropy/nddata/mixins/ndarithmetic.py\n@@ -524,8 +524,10 @@\n             return deepcopy(self.mask)\n         else:\n             # Check for NoneType masks before performing the operation\n-            if self.mask is None or operand.mask is None:\n-                return None\n+            if self.mask is None:\n+                return deepcopy(operand.mask)\n+            elif operand.mask is None:\n+                return deepcopy(self.mask)\n             # Now lets calculate the resulting mask (operation enforces copy)\n             return handle_mask(self.mask, operand.mask, **kwds)\n \n",
            "message": "Applied the change to astropy/nddata/mixins/ndarithmetic.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 4963,
          "output_tokens": 436,
          "retry_message": null,
          "completion_cost": 0.021429
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- astropy/nddata/mixins/ndarithmetic.py\n+++ astropy/nddata/mixins/ndarithmetic.py\n@@ -524,8 +524,10 @@\n             return deepcopy(self.mask)\n         else:\n             # Check for NoneType masks before performing the operation\n-            if self.mask is None or operand.mask is None:\n-                return None\n+            if self.mask is None:\n+                return deepcopy(operand.mask)\n+            elif operand.mask is None:\n+                return deepcopy(self.mask)\n             # Now lets calculate the resulting mask (operation enforces copy)\n             return handle_mask(self.mask, operand.mask, **kwds)\n \n",
        "model": "deepseek-coder",
        "message": "Applied the change to astropy/nddata/mixins/ndarithmetic.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue of mask propagation failure when one of the operands does not have a mask in v5.3 has been addressed. The changes ensure that the mask handling aligns with the expected behavior from v5.2, preventing the TypeError and allowing arithmetic operations to proceed as intended.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The revised change has ensured that when one of the operands has a mask and the other does not (i.e., its mask is None), the resulting mask is taken from the operand that has a mask. This behavior aligns with the expected outcome from v5.2. With this change, the issue should be resolved, as the TypeError will no longer occur when one of the operands lacks a mask.",
            "instructions": null
          },
          "output": {
            "message": "The issue of mask propagation failure when one of the operands does not have a mask in v5.3 has been addressed. The changes ensure that the mask handling aligns with the expected behavior from v5.2, preventing the TypeError and allowing arithmetic operations to proceed as intended."
          },
          "input_tokens": 4384,
          "output_tokens": 198,
          "retry_message": null,
          "completion_cost": 0.016122
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue of mask propagation failure when one of the operands does not have a mask in v5.3 has been addressed. The changes ensure that the mask handling aligns with the expected behavior from v5.2, preventing the TypeError and allowing arithmetic operations to proceed as intended.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "In v5.3, NDDataRef mask propagation fails when one of the operand does not have a mask\n### Description\n\nThis applies to v5.3. \r\n\r\nIt looks like when one of the operand does not have a mask, the mask propagation when doing arithmetic, in particular with `handle_mask=np.bitwise_or` fails.  This is not a problem in v5.2.\r\n\r\nI don't know enough about how all that works, but it seems from the error that the operand without a mask is set as a mask of None's and then the bitwise_or tries to operate on an integer and a None and fails.\n\n### Expected behavior\n\nWhen one of the operand does not have mask, the mask that exists should just be copied over to the output.  Or whatever was done in that situation in v5.2 where there's no problem.\n\n### How to Reproduce\n\nThis is with v5.3.   With v5.2, there are no errors.\r\n\r\n```\r\n>>> import numpy as np\r\n>>> from astropy.nddata import NDDataRef\r\n\r\n>>> array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\r\n>>> mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\r\n\r\n>>> nref_nomask = NDDataRef(array)\r\n>>> nref_mask = NDDataRef(array, mask=mask)\r\n\r\n# multiply no mask by constant (no mask * no mask)\r\n>>> nref_nomask.multiply(1., handle_mask=np.bitwise_or).mask   # returns nothing, no mask,  OK\r\n\r\n# multiply no mask by itself (no mask * no mask)\r\n>>> nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask # return nothing, no mask, OK\r\n\r\n# multiply mask by constant (mask * no mask)\r\n>>> nref_mask.multiply(1., handle_mask=np.bitwise_or).mask\r\n...\r\nTypeError: unsupported operand type(s) for |: 'int' and 'NoneType'\r\n\r\n# multiply mask by itself (mask * mask)\r\n>>> nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or).mask\r\narray([[ 0,  1, 64],\r\n       [ 8,  0,  1],\r\n       [ 2,  1,  0]])\r\n\r\n# multiply mask by no mask (mask * no mask)\r\n>>> nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask\r\n...\r\nTypeError: unsupported operand type(s) for |: 'int' and 'NoneType'\r\n```\r\n\n\n### Versions\n\n>>> import sys; print(\"Python\", sys.version)\r\nPython 3.10.11 | packaged by conda-forge | (main, May 10 2023, 19:07:22) [Clang 14.0.6 ]\r\n>>> import astropy; print(\"astropy\", astropy.__version__)\r\nastropy 5.3\r\n>>> import numpy; print(\"Numpy\", numpy.__version__)\r\nNumpy 1.24.3\r\n>>> import erfa; print(\"pyerfa\", erfa.__version__)\r\npyerfa 2.0.0.3\r\n>>> import scipy; print(\"Scipy\", scipy.__version__)\r\nScipy 1.10.1\r\n>>> import matplotlib; print(\"Matplotlib\", matplotlib.__version__)\r\nMatplotlib 3.7.1\r\n\n"
}