{
  "info": {
    "duration": 216.3021581172943,
    "submission": "diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py\nindex 4153dfccb..a7b822487 100644\n--- a/astropy/nddata/mixins/ndarithmetic.py\n+++ b/astropy/nddata/mixins/ndarithmetic.py\n@@ -523,8 +523,12 @@ class NDArithmeticMixin:\n         elif operand is None:\n             return deepcopy(self.mask)\n         else:\n-            # Now lets calculate the resulting mask (operation enforces copy)\n-            return handle_mask(self.mask, operand.mask, **kwds)\n+            # Ensure at least one mask is not None before performing bitwise operation\n+            if self.mask is None or operand.mask is None:\n+                return deepcopy(self.mask if self.mask is not None else operand.mask)\n+            else:\n+                # Now lets calculate the resulting mask (operation enforces copy)\n+                return handle_mask(self.mask, operand.mask, **kwds)\n \n     def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):\n         \"\"\"\n",
    "total_cost": 0.18295199999999998,
    "instance_id": "astropy__astropy-14995",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves mask propagation failure in NDDataRef when one of the operands does not have a mask. This results in a TypeError when using np.bitwise_or. It seems the problem lies in how the mask is handled during arithmetic operations. The relevant classes and methods to investigate are NDDataRef, NDArithmeticMixin, and possibly MaskedNDArray. The search should focus on these classes and the specific error message 'TypeError: unsupported operand type(s) for |: 'int' and 'NoneType''.",
            "search_requests": [
              {
                "query": "TypeError: unsupported operand type(s) for |: 'int' and 'NoneType'",
                "class_names": [
                  "NDDataRef",
                  "NDArithmeticMixin",
                  "MaskedNDArray"
                ],
                "code_snippet": "np.bitwise_or",
                "file_pattern": null,
                "function_names": []
              }
            ]
          },
          "output": null,
          "input_tokens": 4639,
          "output_tokens": 210,
          "retry_message": "\n\nUnfortunately, I didn\u2019t find any relevant results.",
          "completion_cost": 0.017067
        },
        {
          "action": {
            "complete": false,
            "scratch_pad": "Given that no relevant results were found with the initial search parameters, it's possible that the issue might be more nuanced or localized within specific methods. We should focus on the arithmetic operations within NDArithmeticMixin and the handling of masks in NDDataRef. Additionally, since the error involves NoneType and bitwise operations, we should look for places where masks are set or checked for None.",
            "search_requests": [
              {
                "query": "handling NoneType masks in arithmetic operations",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": null,
                "function_names": [
                  "_arithmetic",
                  "_arithmetic_mask"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 317,
                "span_id": "NDArithmeticMixin._arithmetic_mask",
                "file_path": "astropy/nddata/mixins/ndarithmetic.py"
              },
              {
                "rank": 1,
                "tokens": 1499,
                "span_id": "NDArithmeticMixin._arithmetic",
                "file_path": "astropy/nddata/mixins/ndarithmetic.py"
              },
              {
                "rank": 9,
                "tokens": 237,
                "span_id": "_arithmetic",
                "file_path": "astropy/nddata/ccddata.py"
              }
            ],
            "search_requests": [
              {
                "query": "handling NoneType masks in arithmetic operations",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": null,
                "function_names": [
                  "_arithmetic",
                  "_arithmetic_mask"
                ]
              }
            ]
          },
          "input_tokens": 4894,
          "output_tokens": 183,
          "retry_message": null,
          "completion_cost": 0.017427
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 317,
            "span_id": "NDArithmeticMixin._arithmetic_mask",
            "file_path": "astropy/nddata/mixins/ndarithmetic.py"
          },
          {
            "rank": 1,
            "tokens": 1499,
            "span_id": "NDArithmeticMixin._arithmetic",
            "file_path": "astropy/nddata/mixins/ndarithmetic.py"
          },
          {
            "rank": 9,
            "tokens": 237,
            "span_id": "_arithmetic",
            "file_path": "astropy/nddata/ccddata.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue pertains to mask propagation failure in `NDDataRef` during arithmetic operations when one of the operands does not have a mask. Specifically, the issue arises when `handle_mask=np.bitwise_or` tries to operate on an integer and a None, leading to a `TypeError`. The expected behavior is that the existing mask should be copied over to the output when one of the operands lacks a mask. Comparing to v5.2, there should be no such errors. The search results contain relevant code spans from `astropy/nddata/mixins/ndarithmetic.py`, particularly within the `NDArithmeticMixin` class. This class contains methods `_arithmetic` and `_arithmetic_mask`, which are directly related to handling arithmetic operations and mask handling. These methods include logic for handling masks during arithmetic operations, which is directly related to the issue reported. Therefore, these code spans are highly relevant to addressing the issue of mask propagation during arithmetic operations.",
            "identified_spans": [
              {
                "span_ids": [
                  "NDArithmeticMixin",
                  "NDArithmeticMixin._arithmetic",
                  "NDArithmeticMixin._arithmetic_mask"
                ],
                "file_path": "astropy/nddata/mixins/ndarithmetic.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3369,
          "output_tokens": 301,
          "retry_message": null,
          "completion_cost": 0.014622
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The file context provided includes methods `_arithmetic_mask` and `_arithmetic` in the NDArithmeticMixin class, which are relevant to handling masks and performing arithmetic operations. These methods indicate how masks are managed during arithmetic operations, including how None masks are handled. However, the specific error described in the issue (TypeError: unsupported operand type(s) for |: 'int' and 'NoneType') is not directly addressed by the provided code. More context or additional methods related to mask handling during arithmetic operations might be necessary to fully resolve the issue.",
            "search_suggestions": "Consider looking into other methods or parts of the codebase that handle the interaction between masks and arithmetic operations, especially where masks might be expected to be None or where `np.bitwise_or` is directly used in handling masks."
          },
          "output": {
            "message": "Consider looking into other methods or parts of the codebase that handle the interaction between masks and arithmetic operations, especially where masks might be expected to be None or where `np.bitwise_or` is directly used in handling masks."
          },
          "input_tokens": 3070,
          "output_tokens": 201,
          "retry_message": null,
          "completion_cost": 0.012225
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Consider looking into other methods or parts of the codebase that handle the interaction between masks and arithmetic operations, especially where masks might be expected to be None or where `np.bitwise_or` is directly used in handling masks.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "After reviewing the relevant files, it appears that the main logic for handling masks during arithmetic operations is within the `_arithmetic` and `_arithmetic_mask` methods of the `NDArithmeticMixin` class. However, it seems that specific checks for NoneType masks might be missing, leading to the TypeError. We need to determine where and how masks are being handled or propagated when one of the operands lacks a mask.",
            "search_requests": [
              {
                "query": "handling NoneType masks in _arithmetic_mask",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": null,
                "function_names": [
                  "_arithmetic_mask"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 317,
                "span_id": "NDArithmeticMixin._arithmetic_mask",
                "file_path": "astropy/nddata/mixins/ndarithmetic.py"
              }
            ],
            "search_requests": [
              {
                "query": "handling NoneType masks in _arithmetic_mask",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": null,
                "function_names": [
                  "_arithmetic_mask"
                ]
              }
            ]
          },
          "input_tokens": 6204,
          "output_tokens": 188,
          "retry_message": null,
          "completion_cost": 0.021432
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 317,
            "span_id": "NDArithmeticMixin._arithmetic_mask",
            "file_path": "astropy/nddata/mixins/ndarithmetic.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue concerns a bug in version 5.3 of the `astropy` package, where mask propagation fails during arithmetic operations if one of the operands does not have a mask. The expected behavior is that when one operand lacks a mask, the existing mask should be copied over to the output, similar to how it worked in version 5.2. The issue specifically mentions that when using `handle_mask=np.bitwise_or`, the operation fails due to `bitwise_or` trying to operate on an integer and a `None`. Reviewing the current context, the relevant file is `astropy/nddata/mixins/ndarithmetic.py`. There, the `NDArithmeticMixin` class contains a method `_arithmetic_mask` which handles the mask during arithmetic operations. In the provided `_arithmetic_mask` method, there is a condition where if both operands' masks are `None` or if `handle_mask` is `None`, it returns `None`. However, it does not handle the case where one operand has a mask and the other does not, which is precisely the scenario described in the issue. This suggests that the current method does not account for situations where an operand lacks a mask, leading to the error when `np.bitwise_or` is used. Based on this analysis, the relevant code span is `NDArithmeticMixin._arithmetic_mask`.",
            "identified_spans": [
              {
                "span_ids": [
                  "NDArithmeticMixin._arithmetic_mask"
                ],
                "file_path": "astropy/nddata/mixins/ndarithmetic.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3417,
          "output_tokens": 375,
          "retry_message": null,
          "completion_cost": 0.015876
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The analysis of the reported issue reveals that the problem occurs specifically when performing arithmetic operations with NDData objects where one operand lacks a mask. The error points to a TypeError when numpy's bitwise_or tries to operate on an integer and a NoneType. After examining the provided file context, it's identified that the `_arithmetic_mask` method within the `NDArithmeticMixin` class currently does not include specific checks for NoneType masks. This omission could be the root cause of the TypeError encountered. Therefore, it's concluded that the file context is relevant and significant for addressing the reported issue.",
            "search_suggestions": "Look into the specific code where mask propagation is handled within the `_arithmetic_mask` method. There should be checks for NoneType masks to handle cases where one of the operands has no mask. Additionally, consider reviewing any related tests or scenarios that might not be fully covered to confirm the behavior across different versions and conditions."
          },
          "output": {
            "message": "Look into the specific code where mask propagation is handled within the `_arithmetic_mask` method. There should be checks for NoneType masks to handle cases where one of the operands has no mask. Additionally, consider reviewing any related tests or scenarios that might not be fully covered to confirm the behavior across different versions and conditions."
          },
          "input_tokens": 3078,
          "output_tokens": 230,
          "retry_message": null,
          "completion_cost": 0.012684
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look into the specific code where mask propagation is handled within the `_arithmetic_mask` method. There should be checks for NoneType masks to handle cases where one of the operands has no mask. Additionally, consider reviewing any related tests or scenarios that might not be fully covered to confirm the behavior across different versions and conditions.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "scratch_pad": "The current code in `_arithmetic_mask` method checks if both masks are None or if the handle_mask is None before returning None. However, there doesn't seem to be a specific check for when one mask is None and the other is not. This could be the cause of the 'TypeError: unsupported operand type(s) for |: 'int' and 'NoneType' when using `np.bitwise_or`. We need to add an explicit check and handling for this scenario to ensure mask propagation doesn't fail in such cases.",
            "search_requests": [
              {
                "query": "check for one mask being None in _arithmetic_mask",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": null,
                "function_names": [
                  "_arithmetic_mask"
                ]
              }
            ]
          },
          "output": {
            "message": "The current code in `_arithmetic_mask` method checks if both masks are None or if the handle_mask is None before returning None. However, there doesn't seem to be a specific check for when one mask is None and the other is not. This could be the cause of the 'TypeError: unsupported operand type(s) for |: 'int' and 'NoneType' when using `np.bitwise_or`. We need to add an explicit check and handling for this scenario to ensure mask propagation doesn't fail in such cases."
          },
          "input_tokens": 6465,
          "output_tokens": 218,
          "retry_message": null,
          "completion_cost": 0.022664999999999998
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "The current code in `_arithmetic_mask` method checks if both masks are None or if the handle_mask is None before returning None. However, there doesn't seem to be a specific check for when one mask is None and the other is not. This could be the cause of the 'TypeError: unsupported operand type(s) for |: 'int' and 'NoneType' when using `np.bitwise_or`. We need to add an explicit check and handling for this scenario to ensure mask propagation doesn't fail in such cases.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "NDArithmeticMixin._arithmetic_mask",
            "file_path": "astropy/nddata/mixins/ndarithmetic.py",
            "scratch_pad": "We need to handle the scenario where one of the operands does not have a mask (i.e., its mask is None) during arithmetic operations. The current implementation fails when using `np.bitwise_or` due to the attempt to operate on an integer and a None. We can address this by explicitly checking if either mask is None and then handling these cases appropriately.",
            "instructions": "Update the `_arithmetic_mask` method to handle the scenario where one mask is None and the other is not. If one of the masks is None, it should return the mask that exists without attempting any bitwise operations."
          },
          "output": {
            "span_id": "NDArithmeticMixin._arithmetic_mask",
            "end_line": 527,
            "file_path": "astropy/nddata/mixins/ndarithmetic.py",
            "start_line": 485,
            "instructions": "Update the `_arithmetic_mask` method to handle the scenario where one mask is None and the other is not. If one of the masks is None, it should return the mask that exists without attempting any bitwise operations."
          },
          "input_tokens": 3403,
          "output_tokens": 193,
          "retry_message": null,
          "completion_cost": 0.013104000000000001
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "NDArithmeticMixin._arithmetic_mask",
        "end_line": 527,
        "file_path": "astropy/nddata/mixins/ndarithmetic.py",
        "max_tokens": 1000,
        "start_line": 485,
        "temperature": 1.6,
        "instructions": "Update the `_arithmetic_mask` method to handle the scenario where one mask is None and the other is not. If one of the masks is None, it should return the mask that exists without attempting any bitwise operations.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```\n<replace>\n    def _arithmetic_mask(self, operation, operand, handle_mask, axis=None, **kwds):\n        \"\"\"\n        Calculate the resulting mask.\n\n        This is implemented as the piecewise ``or`` operation if both have a\n        mask.\n\n        Parameters\n        ----------\n        operation : callable\n            see :meth:`NDArithmeticMixin._arithmetic` parameter description.\n            By default, the ``operation`` will be ignored.\n\n        operand : `NDData`-like instance\n            The second operand wrapped in an instance of the same class as\n            self.\n\n        handle_mask : callable\n            see :meth:`NDArithmeticMixin.add`\n\n        kwds :\n            Additional parameters given to ``handle_mask``.\n\n        Returns\n        -------\n        result_mask : any type\n            If only one mask was present this mask is returned.\n            If neither had a mask ``None`` is returned. Otherwise\n            ``handle_mask`` must create (and copy) the returned mask.\n        \"\"\"\n        # If only one mask is present we need not bother about any type checks\n        if (\n            self.mask is None and operand is not None and operand.mask is None\n        ) or handle_mask is None:\n            return None\n        elif self.mask is None and operand is not None:\n            # Make a copy so there is no reference in the result.\n            return deepcopy(operand.mask)\n        elif operand is None:\n            return deepcopy(self.mask)\n        else:\n            # Ensure at least one mask is not None before performing bitwise operation\n            if self.mask is None or operand.mask is None:\n                return deepcopy(self.mask if self.mask is not None else operand.mask)\n            else:\n                # Now lets calculate the resulting mask (operation enforces copy)\n                return handle_mask(self.mask, operand.mask, **kwds)\n</replace>"
          },
          "output": {
            "diff": "--- astropy/nddata/mixins/ndarithmetic.py\n+++ astropy/nddata/mixins/ndarithmetic.py\n@@ -523,8 +523,12 @@\n         elif operand is None:\n             return deepcopy(self.mask)\n         else:\n-            # Now lets calculate the resulting mask (operation enforces copy)\n-            return handle_mask(self.mask, operand.mask, **kwds)\n+            # Ensure at least one mask is not None before performing bitwise operation\n+            if self.mask is None or operand.mask is None:\n+                return deepcopy(self.mask if self.mask is not None else operand.mask)\n+            else:\n+                # Now lets calculate the resulting mask (operation enforces copy)\n+                return handle_mask(self.mask, operand.mask, **kwds)\n \n     def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):\n         \"\"\"\n",
            "message": "Applied the change to astropy/nddata/mixins/ndarithmetic.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 4799,
          "output_tokens": 442,
          "retry_message": null,
          "completion_cost": 0.021027
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- astropy/nddata/mixins/ndarithmetic.py\n+++ astropy/nddata/mixins/ndarithmetic.py\n@@ -523,8 +523,12 @@\n         elif operand is None:\n             return deepcopy(self.mask)\n         else:\n-            # Now lets calculate the resulting mask (operation enforces copy)\n-            return handle_mask(self.mask, operand.mask, **kwds)\n+            # Ensure at least one mask is not None before performing bitwise operation\n+            if self.mask is None or operand.mask is None:\n+                return deepcopy(self.mask if self.mask is not None else operand.mask)\n+            else:\n+                # Now lets calculate the resulting mask (operation enforces copy)\n+                return handle_mask(self.mask, operand.mask, **kwds)\n \n     def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):\n         \"\"\"\n",
        "model": "deepseek-coder",
        "message": "Applied the change to astropy/nddata/mixins/ndarithmetic.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The change successfully addresses the issue of mask propagation failing when one of the operands does not have a mask. The modified `_arithmetic_mask` method now correctly handles cases where one mask is None and the other is not, ensuring mask propagation does not fail due to unsupported operand types for bitwise operations.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The change applied correctly handles the scenario where one of the operands does not have a mask (i.e., its mask is None) during arithmetic operations. By explicitly checking if either mask is None and then returning the mask that exists without attempting any bitwise operations, the TypeError described in the issue should be resolved. This ensures that mask propagation does not fail in such cases.",
            "instructions": null
          },
          "output": {
            "message": "The change successfully addresses the issue of mask propagation failing when one of the operands does not have a mask. The modified `_arithmetic_mask` method now correctly handles cases where one mask is None and the other is not, ensuring mask propagation does not fail due to unsupported operand types for bitwise operations."
          },
          "input_tokens": 3946,
          "output_tokens": 199,
          "retry_message": null,
          "completion_cost": 0.014823
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The change successfully addresses the issue of mask propagation failing when one of the operands does not have a mask. The modified `_arithmetic_mask` method now correctly handles cases where one mask is None and the other is not, ensuring mask propagation does not fail due to unsupported operand types for bitwise operations.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "In v5.3, NDDataRef mask propagation fails when one of the operand does not have a mask\n### Description\n\nThis applies to v5.3. \r\n\r\nIt looks like when one of the operand does not have a mask, the mask propagation when doing arithmetic, in particular with `handle_mask=np.bitwise_or` fails.  This is not a problem in v5.2.\r\n\r\nI don't know enough about how all that works, but it seems from the error that the operand without a mask is set as a mask of None's and then the bitwise_or tries to operate on an integer and a None and fails.\n\n### Expected behavior\n\nWhen one of the operand does not have mask, the mask that exists should just be copied over to the output.  Or whatever was done in that situation in v5.2 where there's no problem.\n\n### How to Reproduce\n\nThis is with v5.3.   With v5.2, there are no errors.\r\n\r\n```\r\n>>> import numpy as np\r\n>>> from astropy.nddata import NDDataRef\r\n\r\n>>> array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\r\n>>> mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\r\n\r\n>>> nref_nomask = NDDataRef(array)\r\n>>> nref_mask = NDDataRef(array, mask=mask)\r\n\r\n# multiply no mask by constant (no mask * no mask)\r\n>>> nref_nomask.multiply(1., handle_mask=np.bitwise_or).mask   # returns nothing, no mask,  OK\r\n\r\n# multiply no mask by itself (no mask * no mask)\r\n>>> nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask # return nothing, no mask, OK\r\n\r\n# multiply mask by constant (mask * no mask)\r\n>>> nref_mask.multiply(1., handle_mask=np.bitwise_or).mask\r\n...\r\nTypeError: unsupported operand type(s) for |: 'int' and 'NoneType'\r\n\r\n# multiply mask by itself (mask * mask)\r\n>>> nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or).mask\r\narray([[ 0,  1, 64],\r\n       [ 8,  0,  1],\r\n       [ 2,  1,  0]])\r\n\r\n# multiply mask by no mask (mask * no mask)\r\n>>> nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask\r\n...\r\nTypeError: unsupported operand type(s) for |: 'int' and 'NoneType'\r\n```\r\n\n\n### Versions\n\n>>> import sys; print(\"Python\", sys.version)\r\nPython 3.10.11 | packaged by conda-forge | (main, May 10 2023, 19:07:22) [Clang 14.0.6 ]\r\n>>> import astropy; print(\"astropy\", astropy.__version__)\r\nastropy 5.3\r\n>>> import numpy; print(\"Numpy\", numpy.__version__)\r\nNumpy 1.24.3\r\n>>> import erfa; print(\"pyerfa\", erfa.__version__)\r\npyerfa 2.0.0.3\r\n>>> import scipy; print(\"Scipy\", scipy.__version__)\r\nScipy 1.10.1\r\n>>> import matplotlib; print(\"Matplotlib\", matplotlib.__version__)\r\nMatplotlib 3.7.1\r\n\n"
}