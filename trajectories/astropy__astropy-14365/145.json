{
  "info": {
    "error": "Traceback (most recent call last):\n  File \"/workspace/moatless/moatless-tools/driver/run_moatless.py\", line 89, in run_moatless_core\n    response = loop.run(problem_statement)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/workspace/moatless/moatless-tools/moatless/loop.py\", line 179, in run\n    self._run()\n  File \"/workspace/moatless/moatless-tools/moatless/loop.py\", line 378, in _run\n    action, cost, input_tokens, output_tokens = self._next_action()\n                                                ^^^^^^^^^^^^^^^^^^^\n  File \"/workspace/moatless/moatless-tools/moatless/loop.py\", line 601, in _next_action\n    raise e\n  File \"/workspace/moatless/moatless-tools/moatless/loop.py\", line 587, in _next_action\n    client.chat.completions.create_with_completion(\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/client.py\", line 223, in create_with_completion\n    model = self.create_fn(\n            ^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/patch.py\", line 143, in new_create_sync\n    response = retry_sync(\n               ^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/retry.py\", line 151, in retry_sync\n    for attempt in max_retries:\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/tenacity/__init__.py\", line 443, in __iter__\n    do = self.iter(retry_state=retry_state)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/tenacity/__init__.py\", line 376, in iter\n    result = action(retry_state)\n             ^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/tenacity/__init__.py\", line 418, in exc_check\n    raise retry_exc.reraise()\n          ^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/tenacity/__init__.py\", line 185, in reraise\n    raise self.last_attempt.result()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/concurrent/futures/_base.py\", line 449, in result\n    return self.__get_result()\n           ^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/concurrent/futures/_base.py\", line 401, in __get_result\n    raise self._exception\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/retry.py\", line 175, in retry_sync\n    raise e\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/retry.py\", line 157, in retry_sync\n    return process_response(\n           ^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/process_response.py\", line 144, in process_response\n    model = response_model.from_response(\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/function_calls.py\", line 125, in from_response\n    return cls.parse_json(completion, validation_context, strict)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/function_calls.py\", line 273, in parse_json\n    return cls.model_validate_json(\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/pydantic/main.py\", line 580, in model_validate_json\n    return cls.__pydantic_validator__.validate_json(json_data, strict=strict, context=context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\npydantic_core._pydantic_core.ValidationError: 2 validation errors for LineNumberClarification\nstart_line\n  Input should be a valid integer [type=int_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.7/v/int_type\nend_line\n  Input should be a valid integer [type=int_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.7/v/int_type\n",
    "duration": 173.69413447380066,
    "submission": "diff --git a/astropy/io/ascii/qdp.py b/astropy/io/ascii/qdp.py\nindex 83a4f004a..d47619e89 100644\n--- a/astropy/io/ascii/qdp.py\n+++ b/astropy/io/ascii/qdp.py\n@@ -289,10 +289,10 @@ def _get_tables_from_qdp_file(qdp_file, input_colnames=None, delimiter=None):\n             command_lines += line + \"\\n\"\n             continue\n \n-        if datatype.startswith(\"data\"):\n+        if datatype.startswith(\\\"data\\\"):\n             # The first time I find data, I define err_specs\n-            if err_specs == {} and command_lines != \"\":\n-                for cline in command_lines.strip().split(\"\\n\"):\n+            if err_specs == {} and command_lines != \\\"\\\":\n+                for cline in command_lines.strip().split(\\\"\\\\n\\\"):\n                     command = cline.strip().split()\n                     # This should never happen, but just in case.\n                     if len(command) < 3:\n",
    "total_cost": 0.10713600000000001,
    "instance_id": "astropy__astropy-14365",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves the QDP file format requiring commands to be in upper case, which conflicts with the QDP specification's case-insensitivity. To resolve this, we need to locate the code responsible for reading QDP files and ensure it handles commands in a case-insensitive manner. The relevant files and classes are likely within the `astropy.io.ascii` module, specifically those handling the QDP format. Looking at the provided context, `astropy/io/ascii/qdp.py` contains the `QDP` class and related functions that could be responsible for reading and interpreting QDP files. We should focus on this file and these functions to make the necessary adjustments.",
            "search_requests": [
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "astropy/io/ascii/qdp.py",
                "function_names": [
                  "_read_table_qdp"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 250,
                "span_id": "_read_table_qdp",
                "file_path": "astropy/io/ascii/qdp.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "astropy/io/ascii/qdp.py",
                "function_names": [
                  "_read_table_qdp"
                ]
              }
            ]
          },
          "input_tokens": 3326,
          "output_tokens": 222,
          "retry_message": null,
          "completion_cost": 0.013308
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 250,
            "span_id": "_read_table_qdp",
            "file_path": "astropy/io/ascii/qdp.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The issue reported is that the QDP file parser in astropy assumes all commands are in upper case. This causes problems when reading QDP files with commands in lower or mixed case. The expected behavior is for the parser to handle case-insensitive commands. From the provided search results, the relevant code spans are within the functions '_get_tables_from_qdp_file' and '_read_table_qdp'. The '_get_tables_from_qdp_file' function processes the QDP file lines and interprets commands. The '_read_table_qdp' function reads the table from the QDP file. To address the issue, the code that interprets the command lines (specifically where it splits and uses the commands) should be modified to be case-insensitive. This can be achieved by converting each command to a consistent case before processing. The identified spans include the entire loop where commands are processed and the parsing logic within the '_get_tables_from_qdp_file' function.",
            "identified_spans": [
              {
                "span_ids": [
                  "_get_tables_from_qdp_file",
                  "_read_table_qdp"
                ],
                "file_path": "astropy/io/ascii/qdp.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 2492,
          "output_tokens": 297,
          "retry_message": null,
          "completion_cost": 0.011931
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The issue involves the QDP file format requiring commands to be in upper case, which conflicts with the QDP specification's case-insensitivity. To resolve this, we need to locate the code responsible for reading QDP files and ensure it handles commands in a case-insensitive manner. The relevant files and classes are likely within the `astropy.io.ascii` module, specifically those handling the QDP format. Looking at the provided context, `astropy/io/ascii/qdp.py` contains the `QDP` class and related functions that could be responsible for reading and interpreting QDP files. We should focus on this file and these functions to make the necessary adjustments.",
            "search_suggestions": null
          },
          "output": {
            "message": null
          },
          "input_tokens": 3021,
          "output_tokens": 181,
          "retry_message": null,
          "completion_cost": 0.011778
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "scratch_pad": "The provided code snippet from `astropy/io/ascii/qdp.py` contains essential functions related to reading QDP files. Specifically, the `_get_tables_from_qdp_file` function processes the QDP file content, interprets commands, and handles error specifications. The `_get_lines_from_file` function reads the file and prepares the lines for processing. The `_read_table_qdp` function reads and returns a specific table from the QDP file. The `read` method in the `QDP` class calls `_read_table_qdp` to read the table from the provided file. Since the code already covers the core functionality for reading QDP files, and the issue pertains specifically to case-insensitivity in command handling, this is the correct area to focus on. The `err_specs` dictionary and the handling of command lines within `_get_tables_from_qdp_file` must be adjusted to ensure commands are interpreted in a case-insensitive manner.",
            "search_requests": []
          },
          "output": {
            "message": "The provided code snippet from `astropy/io/ascii/qdp.py` contains essential functions related to reading QDP files. Specifically, the `_get_tables_from_qdp_file` function processes the QDP file content, interprets commands, and handles error specifications. The `_get_lines_from_file` function reads the file and prepares the lines for processing. The `_read_table_qdp` function reads and returns a specific table from the QDP file. The `read` method in the `QDP` class calls `_read_table_qdp` to read the table from the provided file. Since the code already covers the core functionality for reading QDP files, and the issue pertains specifically to case-insensitivity in command handling, this is the correct area to focus on. The `err_specs` dictionary and the handling of command lines within `_get_tables_from_qdp_file` must be adjusted to ensure commands are interpreted in a case-insensitive manner."
          },
          "input_tokens": 5147,
          "output_tokens": 247,
          "retry_message": null,
          "completion_cost": 0.019146
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "The provided code snippet from `astropy/io/ascii/qdp.py` contains essential functions related to reading QDP files. Specifically, the `_get_tables_from_qdp_file` function processes the QDP file content, interprets commands, and handles error specifications. The `_get_lines_from_file` function reads the file and prepares the lines for processing. The `_read_table_qdp` function reads and returns a specific table from the QDP file. The `read` method in the `QDP` class calls `_read_table_qdp` to read the table from the provided file. Since the code already covers the core functionality for reading QDP files, and the issue pertains specifically to case-insensitivity in command handling, this is the correct area to focus on. The `err_specs` dictionary and the handling of command lines within `_get_tables_from_qdp_file` must be adjusted to ensure commands are interpreted in a case-insensitive manner.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "_get_tables_from_qdp_file",
            "file_path": "astropy/io/ascii/qdp.py",
            "scratch_pad": "To address the issue, we need to ensure that the QDP command parsing is case-insensitive. This involves modifying the `_get_tables_from_qdp_file` function to interpret command lines in a case-insensitive manner.",
            "instructions": "Convert the command keys to lower case before processing in the `_get_tables_from_qdp_file` function."
          },
          "output": {
            "span_id": "_get_tables_from_qdp_file",
            "file_path": "astropy/io/ascii/qdp.py",
            "instructions": "Convert the command keys to lower case before processing in the `_get_tables_from_qdp_file` function."
          },
          "input_tokens": 3582,
          "output_tokens": 144,
          "retry_message": null,
          "completion_cost": 0.012906
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "_get_tables_from_qdp_file",
        "end_line": null,
        "file_path": "astropy/io/ascii/qdp.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Convert the command keys to lower case before processing in the `_get_tables_from_qdp_file` function.\n\nThe requirement is to convert the command keys to lower case. The relevant lines where this conversion should happen are those that process the command lines and extract the error specifications. Specifically, the conversion should occur at the point where the command keys are accessed and stored in the 'err_specs' dictionary.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 296,
            "start_line": 296,
            "scratch_pad": "The requirement is to convert the command keys to lower case. The relevant lines where this conversion should happen are those that process the command lines and extract the error specifications. Specifically, the conversion should occur at the point where the command keys are accessed and stored in the 'err_specs' dictionary."
          },
          "output": {
            "span_id": "_get_tables_from_qdp_file",
            "end_line": 300,
            "file_path": "astropy/io/ascii/qdp.py",
            "start_line": 292,
            "instructions": "Convert the command keys to lower case before processing in the `_get_tables_from_qdp_file` function.\n\nThe requirement is to convert the command keys to lower case. The relevant lines where this conversion should happen are those that process the command lines and extract the error specifications. Specifically, the conversion should occur at the point where the command keys are accessed and stored in the 'err_specs' dictionary."
          },
          "input_tokens": 1755,
          "output_tokens": 105,
          "retry_message": null,
          "completion_cost": 0.00684
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "_get_tables_from_qdp_file",
        "end_line": 300,
        "file_path": "astropy/io/ascii/qdp.py",
        "max_tokens": 1000,
        "start_line": 292,
        "temperature": 1.6,
        "instructions": "Convert the command keys to lower case before processing in the `_get_tables_from_qdp_file` function.\n\nThe requirement is to convert the command keys to lower case. The relevant lines where this conversion should happen are those that process the command lines and extract the error specifications. Specifically, the conversion should occur at the point where the command keys are accessed and stored in the 'err_specs' dictionary.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```json\n\"<replace>\n        if datatype.startswith(\\\"data\\\"):\n            # The first time I find data, I define err_specs\n            if err_specs == {} and command_lines != \\\"\\\":\n                for cline in command_lines.strip().split(\\\"\\\\n\\\"):\n                    command = cline.strip().split()\n                    # This should never happen, but just in case.\n                    if len(command) < 3:\n                        continue\n                    err_specs[command[1].lower()] = [int(c) for c in command[2:]]\n</replace>\""
          },
          "output": {
            "diff": "--- astropy/io/ascii/qdp.py\n+++ astropy/io/ascii/qdp.py\n@@ -289,10 +289,10 @@\n             command_lines += line + \"\\n\"\n             continue\n \n-        if datatype.startswith(\"data\"):\n+        if datatype.startswith(\\\"data\\\"):\n             # The first time I find data, I define err_specs\n-            if err_specs == {} and command_lines != \"\":\n-                for cline in command_lines.strip().split(\"\\n\"):\n+            if err_specs == {} and command_lines != \\\"\\\":\n+                for cline in command_lines.strip().split(\\\"\\\\n\\\"):\n                     command = cline.strip().split()\n                     # This should never happen, but just in case.\n                     if len(command) < 3:\n",
            "message": "Applied the change to astropy/io/ascii/qdp.py.\n\n<scratch_pad>\n```json\n\"</scratch_pad>",
            "verification_errors": [
              {
                "code": "E0001",
                "line": 292,
                "message": "Parsing failed: 'unexpected character after line continuation character (astropy.io.ascii.qdp, line 292)'",
                "file_path": "astropy/io/ascii/qdp.py"
              }
            ]
          },
          "input_tokens": 4914,
          "output_tokens": 132,
          "retry_message": null,
          "completion_cost": 0.016722
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- astropy/io/ascii/qdp.py\n+++ astropy/io/ascii/qdp.py\n@@ -289,10 +289,10 @@\n             command_lines += line + \"\\n\"\n             continue\n \n-        if datatype.startswith(\"data\"):\n+        if datatype.startswith(\\\"data\\\"):\n             # The first time I find data, I define err_specs\n-            if err_specs == {} and command_lines != \"\":\n-                for cline in command_lines.strip().split(\"\\n\"):\n+            if err_specs == {} and command_lines != \\\"\\\":\n+                for cline in command_lines.strip().split(\\\"\\\\n\\\"):\n                     command = cline.strip().split()\n                     # This should never happen, but just in case.\n                     if len(command) < 3:\n",
        "model": "deepseek-coder",
        "message": "Applied the change to astropy/io/ascii/qdp.py.\n\n<scratch_pad>\n```json\n\"</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [
          {
            "code": "E0001",
            "line": 292,
            "message": "Parsing failed: 'unexpected character after line continuation character (astropy.io.ascii.qdp, line 292)'",
            "file_path": "astropy/io/ascii/qdp.py"
          }
        ],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "_get_tables_from_qdp_file",
            "file_path": "astropy/io/ascii/qdp.py",
            "scratch_pad": "The lint error indicates that there is an issue with the line continuation character in the modified code. This is likely due to using double quotes inside a string that is already enclosed in double quotes. To fix this, we should use single quotes for the inner strings.",
            "instructions": "Replace the double quotes inside the strings with single quotes to avoid syntax errors related to the line continuation character."
          },
          "output": {
            "span_id": "_get_tables_from_qdp_file",
            "file_path": "astropy/io/ascii/qdp.py",
            "instructions": "Replace the double quotes inside the strings with single quotes to avoid syntax errors related to the line continuation character."
          },
          "input_tokens": 4060,
          "output_tokens": 155,
          "retry_message": null,
          "completion_cost": 0.014505
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "_get_tables_from_qdp_file",
        "end_line": null,
        "file_path": "astropy/io/ascii/qdp.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Replace the double quotes inside the strings with single quotes to avoid syntax errors related to the line continuation character.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 328,
            "start_line": 237,
            "scratch_pad": "The instructions require replacing double quotes inside strings with single quotes. This specifically affects the docstrings and string literals within the code. The relevant lines to modify are those containing the docstring and string literals that use double quotes. This ranges from the beginning of the function's docstring on line 237 to the end of the string literal processing on line 328."
          },
          "output": null,
          "input_tokens": 1755,
          "output_tokens": 116,
          "retry_message": "Lines 237 - 328 has 634 tokens, which is higher than the maximum allowed 500 tokens in completion. You need to specify the exact part of the code that needs to be updated to fulfill the change. If this is not possible you should reject the request.",
          "completion_cost": 0.007005
        }
      ]
    }
  ],
  "initial_message": "ascii.qdp Table format assumes QDP commands are upper case\n### Description\n\nascii.qdp assumes that commands in a QDP file are upper case, for example, for errors they must be \"READ SERR 1 2\" whereas QDP itself is not case sensitive and case use \"read serr 1 2\". \r\n\r\nAs many QDP files are created by hand, the expectation that all commands be all-caps should be removed.\n\n### Expected behavior\n\nThe following qdp file should read into a `Table` with errors, rather than crashing.\r\n```\r\nread serr 1 2 \r\n1 0.5 1 0.5\r\n```\n\n### How to Reproduce\n\nCreate a QDP file:\r\n```\r\n> cat > test.qdp\r\nread serr 1 2 \r\n1 0.5 1 0.5\r\n<EOF>\r\n\r\n > python\r\nPython 3.10.9 (main, Dec  7 2022, 02:03:23) [Clang 13.0.0 (clang-1300.0.29.30)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> from astropy.table import Table\r\n>>> Table.read('test.qdp',format='ascii.qdp')\r\nWARNING: table_id not specified. Reading the first available table [astropy.io.ascii.qdp]\r\nTraceback (most recent call last):\r\n...\r\n    raise ValueError(f'Unrecognized QDP line: {line}')\r\nValueError: Unrecognized QDP line: read serr 1 2\r\n```\r\n\r\nRunning \"qdp test.qdp\" works just fine.\r\n\n\n### Versions\n\nPython 3.10.9 (main, Dec  7 2022, 02:03:23) [Clang 13.0.0 (clang-1300.0.29.30)]\r\nastropy 5.1\r\nNumpy 1.24.1\r\npyerfa 2.0.0.1\r\nScipy 1.10.0\r\nMatplotlib 3.6.3\r\n\n"
}