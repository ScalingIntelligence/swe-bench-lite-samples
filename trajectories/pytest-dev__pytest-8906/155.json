{
  "info": {
    "duration": 128.89126348495483,
    "submission": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 2addf5572..994d468fd 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -30,7 +30,8 @@ class OutcomeException(BaseException):\n         if msg is not None and not isinstance(msg, str):\n             error_msg = (  # type: ignore[unreachable]\n                 \"{} expected string as 'msg' parameter, got '{}' instead.\\n\"\n-                \"Perhaps you meant to use a mark?\"\n+                \"Perhaps you meant to use a mark?\\n\"\n+                \"For module-level skipping, consider using `pytest.skip(msg, allow_module_level=True)`.\"\n             )\n             raise TypeError(error_msg.format(type(self).__name__, type(msg).__name__))\n         BaseException.__init__(self, msg)\n",
    "total_cost": 0.12285599999999999,
    "instance_id": "pytest-dev__pytest-8906",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue pertains to improving the handling of module-level skipping in pytest, particularly with the `skip` function and its `allow_module_level` parameter. The problem arises when users attempt to skip a module using `pytest.skip` without setting the `allow_module_level` parameter to `True`, leading to confusion and errors. To address this, the search should focus on finding the implementation of the `skip` function and the error message that users encounter when they misuse it. Additionally, it might be beneficial to identify any documentation or examples that discuss module-level skipping to suggest improvements.",
            "search_requests": [
              {
                "query": "skip function with allow_module_level parameter",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "src/_pytest/outcomes.py",
                "function_names": []
              },
              {
                "query": "module level skipping",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "src/_pytest/skipping.py",
                "function_names": []
              },
              {
                "query": "module level skipping",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "doc/**/*.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 236,
                "span_id": "skip",
                "file_path": "src/_pytest/outcomes.py"
              },
              {
                "rank": 1,
                "tokens": 10,
                "span_id": "impl:7",
                "file_path": "src/_pytest/outcomes.py"
              },
              {
                "rank": 1,
                "tokens": 45,
                "span_id": "Skipped",
                "file_path": "src/_pytest/outcomes.py"
              },
              {
                "rank": 2,
                "tokens": 18,
                "span_id": "XFailed",
                "file_path": "src/_pytest/outcomes.py"
              },
              {
                "rank": 2,
                "tokens": 104,
                "span_id": "fail",
                "file_path": "src/_pytest/outcomes.py"
              },
              {
                "rank": 3,
                "tokens": 112,
                "span_id": "xfail",
                "file_path": "src/_pytest/outcomes.py"
              },
              {
                "rank": 4,
                "tokens": 400,
                "span_id": "importorskip",
                "file_path": "src/_pytest/outcomes.py"
              },
              {
                "rank": 5,
                "tokens": 126,
                "span_id": "docstring",
                "file_path": "src/_pytest/outcomes.py"
              },
              {
                "rank": 0,
                "tokens": 123,
                "span_id": "docstring",
                "file_path": "src/_pytest/skipping.py"
              },
              {
                "rank": 1,
                "tokens": 367,
                "span_id": "pytest_configure",
                "file_path": "src/_pytest/skipping.py"
              },
              {
                "rank": 2,
                "tokens": 141,
                "span_id": "pytest_runtest_call",
                "file_path": "src/_pytest/skipping.py"
              },
              {
                "rank": 3,
                "tokens": 12,
                "span_id": "impl",
                "file_path": "src/_pytest/skipping.py"
              },
              {
                "rank": 3,
                "tokens": 186,
                "span_id": "evaluate_xfail_marks",
                "file_path": "src/_pytest/skipping.py"
              },
              {
                "rank": 3,
                "tokens": 90,
                "span_id": "pytest_runtest_setup",
                "file_path": "src/_pytest/skipping.py"
              },
              {
                "rank": 4,
                "tokens": 110,
                "span_id": "pytest_addoption",
                "file_path": "src/_pytest/skipping.py"
              },
              {
                "rank": 5,
                "tokens": 64,
                "span_id": "pytest_report_teststatus",
                "file_path": "src/_pytest/skipping.py"
              },
              {
                "rank": 5,
                "tokens": 221,
                "span_id": "pytest_runtest_makereport",
                "file_path": "src/_pytest/skipping.py"
              },
              {
                "rank": 0,
                "tokens": 7,
                "span_id": "impl",
                "file_path": "doc/en/conftest.py"
              },
              {
                "rank": 1,
                "tokens": 7,
                "span_id": "impl",
                "file_path": "doc/en/example/conftest.py"
              },
              {
                "rank": 2,
                "tokens": 5,
                "span_id": "test_function",
                "file_path": "doc/en/example/pythoncollection.py"
              },
              {
                "rank": 2,
                "tokens": 8,
                "span_id": "TestClass.test_anothermethod",
                "file_path": "doc/en/example/pythoncollection.py"
              },
              {
                "rank": 2,
                "tokens": 4,
                "span_id": "TestClass",
                "file_path": "doc/en/example/pythoncollection.py"
              },
              {
                "rank": 2,
                "tokens": 14,
                "span_id": "docstring",
                "file_path": "doc/en/example/pythoncollection.py"
              },
              {
                "rank": 2,
                "tokens": 6,
                "span_id": "TestClass.test_method",
                "file_path": "doc/en/example/pythoncollection.py"
              },
              {
                "rank": 3,
                "tokens": 11,
                "span_id": "test_hello6",
                "file_path": "doc/en/example/xfail_demo.py"
              },
              {
                "rank": 3,
                "tokens": 9,
                "span_id": "imports",
                "file_path": "doc/en/example/xfail_demo.py"
              }
            ],
            "search_requests": [
              {
                "query": "skip function with allow_module_level parameter",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "src/_pytest/outcomes.py",
                "function_names": []
              },
              {
                "query": "module level skipping",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "src/_pytest/skipping.py",
                "function_names": []
              },
              {
                "query": "module level skipping",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "doc/**/*.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 3608,
          "output_tokens": 256,
          "retry_message": null,
          "completion_cost": 0.014664
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 236,
            "span_id": "skip",
            "file_path": "src/_pytest/outcomes.py"
          },
          {
            "rank": 1,
            "tokens": 10,
            "span_id": "impl:7",
            "file_path": "src/_pytest/outcomes.py"
          },
          {
            "rank": 1,
            "tokens": 45,
            "span_id": "Skipped",
            "file_path": "src/_pytest/outcomes.py"
          },
          {
            "rank": 2,
            "tokens": 18,
            "span_id": "XFailed",
            "file_path": "src/_pytest/outcomes.py"
          },
          {
            "rank": 2,
            "tokens": 104,
            "span_id": "fail",
            "file_path": "src/_pytest/outcomes.py"
          },
          {
            "rank": 3,
            "tokens": 112,
            "span_id": "xfail",
            "file_path": "src/_pytest/outcomes.py"
          },
          {
            "rank": 4,
            "tokens": 400,
            "span_id": "importorskip",
            "file_path": "src/_pytest/outcomes.py"
          },
          {
            "rank": 5,
            "tokens": 126,
            "span_id": "docstring",
            "file_path": "src/_pytest/outcomes.py"
          },
          {
            "rank": 0,
            "tokens": 123,
            "span_id": "docstring",
            "file_path": "src/_pytest/skipping.py"
          },
          {
            "rank": 1,
            "tokens": 367,
            "span_id": "pytest_configure",
            "file_path": "src/_pytest/skipping.py"
          },
          {
            "rank": 2,
            "tokens": 141,
            "span_id": "pytest_runtest_call",
            "file_path": "src/_pytest/skipping.py"
          },
          {
            "rank": 3,
            "tokens": 12,
            "span_id": "impl",
            "file_path": "src/_pytest/skipping.py"
          },
          {
            "rank": 3,
            "tokens": 186,
            "span_id": "evaluate_xfail_marks",
            "file_path": "src/_pytest/skipping.py"
          },
          {
            "rank": 3,
            "tokens": 90,
            "span_id": "pytest_runtest_setup",
            "file_path": "src/_pytest/skipping.py"
          },
          {
            "rank": 4,
            "tokens": 110,
            "span_id": "pytest_addoption",
            "file_path": "src/_pytest/skipping.py"
          },
          {
            "rank": 5,
            "tokens": 64,
            "span_id": "pytest_report_teststatus",
            "file_path": "src/_pytest/skipping.py"
          },
          {
            "rank": 5,
            "tokens": 221,
            "span_id": "pytest_runtest_makereport",
            "file_path": "src/_pytest/skipping.py"
          },
          {
            "rank": 0,
            "tokens": 7,
            "span_id": "impl",
            "file_path": "doc/en/conftest.py"
          },
          {
            "rank": 1,
            "tokens": 7,
            "span_id": "impl",
            "file_path": "doc/en/example/conftest.py"
          },
          {
            "rank": 2,
            "tokens": 5,
            "span_id": "test_function",
            "file_path": "doc/en/example/pythoncollection.py"
          },
          {
            "rank": 2,
            "tokens": 8,
            "span_id": "TestClass.test_anothermethod",
            "file_path": "doc/en/example/pythoncollection.py"
          },
          {
            "rank": 2,
            "tokens": 4,
            "span_id": "TestClass",
            "file_path": "doc/en/example/pythoncollection.py"
          },
          {
            "rank": 2,
            "tokens": 14,
            "span_id": "docstring",
            "file_path": "doc/en/example/pythoncollection.py"
          },
          {
            "rank": 2,
            "tokens": 6,
            "span_id": "TestClass.test_method",
            "file_path": "doc/en/example/pythoncollection.py"
          },
          {
            "rank": 3,
            "tokens": 11,
            "span_id": "test_hello6",
            "file_path": "doc/en/example/xfail_demo.py"
          },
          {
            "rank": 3,
            "tokens": 9,
            "span_id": "imports",
            "file_path": "doc/en/example/xfail_demo.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue concerns improving the handling of module-level skipping in pytest, particularly addressing the scenario where Python syntax specific to newer versions (like Python 3.8) causes the module to fail when run with older Python versions (like Python 3.6 or 3.7). The user mentions an error when using `pytest.skip` outside of a test context and suggests improvements such as better documentation or a new API like `skip_module`. The search results show relevant parts of the pytest codebase, including the `skip` function and the `Skipped` class definition with the `allow_module_level` parameter. These are directly related to the functionality of skipping tests at the module level, as required by the reported issue. Additionally, the results include the `pytest_addoption`, `pytest_configure`, and other hook implementations that handle skipping and xfailing tests, which are also relevant for context and further improvements.",
            "identified_spans": [
              {
                "span_ids": [
                  "Skipped",
                  "Skipped.__init__",
                  "skip"
                ],
                "file_path": "src/_pytest/outcomes.py"
              },
              {
                "span_ids": [
                  "pytest_addoption",
                  "pytest_configure",
                  "evaluate_skip_marks"
                ],
                "file_path": "src/_pytest/skipping.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4984,
          "output_tokens": 331,
          "retry_message": null,
          "completion_cost": 0.019917
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The file context provided includes the implementation of the `skip` function in `_pytest/outcomes.py`, which is relevant to the issue as it includes the `allow_module_level` parameter. Additionally, the error message raised when `skip` is misused is also found in the same file, suggesting that the necessary code for addressing the issue is present. However, the provided context does not include specific documentation or examples illustrating the use of `skip` with `allow_module_level`, which would be crucial for users. Therefore, while the core functionality and error handling are present, the documentation or examples that would help users understand how to correctly use `skip` at the module level are missing.",
            "search_suggestions": "Look for documentation or examples related to pytest.skip with allow_module_level and suggest updates or additions to clarify its usage."
          },
          "output": {
            "message": "Look for documentation or examples related to pytest.skip with allow_module_level and suggest updates or additions to clarify its usage."
          },
          "input_tokens": 2927,
          "output_tokens": 209,
          "retry_message": null,
          "completion_cost": 0.011916000000000001
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look for documentation or examples related to pytest.skip with allow_module_level and suggest updates or additions to clarify its usage.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The documentation for the `skip` function with the `allow_module_level` parameter is currently not explicitly detailed in the provided file context. To improve clarity and usability, it would be beneficial to include examples and explanations about how to use `allow_module_level` when skipping tests at the module level. Additionally, updating the error message to suggest using `allow_module_level` when appropriate could prevent confusion and misuse.",
            "search_requests": [
              {
                "query": "using pytest.skip at module level",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "doc/**/*.rst",
                "function_names": []
              }
            ]
          },
          "output": null,
          "input_tokens": 5397,
          "output_tokens": 178,
          "retry_message": "\n\nUnfortunately, I didn\u2019t find any relevant results.",
          "completion_cost": 0.018861
        },
        {
          "action": {
            "complete": true,
            "scratch_pad": "Given that no relevant documentation or examples were found, it is suggested to create new documentation or update existing documentation to include examples and explanations on the usage of `pytest.skip` with the `allow_module_level` parameter. This new content should explicitly illustrate how to use `allow_module_level` when skipping tests at the module level, providing clear guidance to avoid confusion. Additionally, the error message guiding users when they misuse the `skip` function should be updated to include a note about the `allow_module_level` parameter to enhance user understanding.",
            "search_requests": []
          },
          "output": {
            "message": "Given that no relevant documentation or examples were found, it is suggested to create new documentation or update existing documentation to include examples and explanations on the usage of `pytest.skip` with the `allow_module_level` parameter. This new content should explicitly illustrate how to use `allow_module_level` when skipping tests at the module level, providing clear guidance to avoid confusion. Additionally, the error message guiding users when they misuse the `skip` function should be updated to include a note about the `allow_module_level` parameter to enhance user understanding."
          },
          "input_tokens": 5593,
          "output_tokens": 144,
          "retry_message": null,
          "completion_cost": 0.018938999999999998
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "Given that no relevant documentation or examples were found, it is suggested to create new documentation or update existing documentation to include examples and explanations on the usage of `pytest.skip` with the `allow_module_level` parameter. This new content should explicitly illustrate how to use `allow_module_level` when skipping tests at the module level, providing clear guidance to avoid confusion. Additionally, the error message guiding users when they misuse the `skip` function should be updated to include a note about the `allow_module_level` parameter to enhance user understanding.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "OutcomeException.__init__",
            "file_path": "src/_pytest/outcomes.py",
            "scratch_pad": "The current implementation of `pytest.skip` allows for module-level skipping with the `allow_module_level` parameter. However, users may not be immediately aware of how to effectively use this parameter due to unclear error messages and lack of documentation. To improve user experience and avoid confusion, we should update both the error message and the documentation to clearly explain the usage of `allow_module_level`.",
            "instructions": "Update the error message in the `OutcomeException` class to include a note about the `allow_module_level` parameter. This will help guide users when they misuse the `skip` function, providing clear instructions on how to handle module-level skipping."
          },
          "output": {
            "span_id": "OutcomeException.__init__",
            "end_line": 38,
            "file_path": "src/_pytest/outcomes.py",
            "start_line": 29,
            "instructions": "Update the error message in the `OutcomeException` class to include a note about the `allow_module_level` parameter. This will help guide users when they misuse the `skip` function, providing clear instructions on how to handle module-level skipping."
          },
          "input_tokens": 3287,
          "output_tokens": 196,
          "retry_message": null,
          "completion_cost": 0.012801
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "OutcomeException.__init__",
        "end_line": 38,
        "file_path": "src/_pytest/outcomes.py",
        "max_tokens": 1000,
        "start_line": 29,
        "temperature": 1.6,
        "instructions": "Update the error message in the `OutcomeException` class to include a note about the `allow_module_level` parameter. This will help guide users when they misuse the `skip` function, providing clear instructions on how to handle module-level skipping.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n    def __init__(self, msg: Optional[str] = None, pytrace: bool = True) -> None:\n        if msg is not None and not isinstance(msg, str):\n            error_msg = (  # type: ignore[unreachable]\n                \"{} expected string as 'msg' parameter, got '{}' instead.\\n\"\n                \"Perhaps you meant to use a mark?\\n\"\n                \"For module-level skipping, consider using `pytest.skip(msg, allow_module_level=True)`.\"\n            )\n            raise TypeError(error_msg.format(type(self).__name__, type(msg).__name__))\n        BaseException.__init__(self, msg)\n        self.msg = msg\n        self.pytrace = pytrace\n</replace>"
          },
          "output": {
            "diff": "--- src/_pytest/outcomes.py\n+++ src/_pytest/outcomes.py\n@@ -30,7 +30,8 @@\n         if msg is not None and not isinstance(msg, str):\n             error_msg = (  # type: ignore[unreachable]\n                 \"{} expected string as 'msg' parameter, got '{}' instead.\\n\"\n-                \"Perhaps you meant to use a mark?\"\n+                \"Perhaps you meant to use a mark?\\n\"\n+                \"For module-level skipping, consider using `pytest.skip(msg, allow_module_level=True)`.\"\n             )\n             raise TypeError(error_msg.format(type(self).__name__, type(msg).__name__))\n         BaseException.__init__(self, msg)\n",
            "message": "Applied the change to src/_pytest/outcomes.py.",
            "verification_errors": []
          },
          "input_tokens": 3139,
          "output_tokens": 178,
          "retry_message": null,
          "completion_cost": 0.012087
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- src/_pytest/outcomes.py\n+++ src/_pytest/outcomes.py\n@@ -30,7 +30,8 @@\n         if msg is not None and not isinstance(msg, str):\n             error_msg = (  # type: ignore[unreachable]\n                 \"{} expected string as 'msg' parameter, got '{}' instead.\\n\"\n-                \"Perhaps you meant to use a mark?\"\n+                \"Perhaps you meant to use a mark?\\n\"\n+                \"For module-level skipping, consider using `pytest.skip(msg, allow_module_level=True)`.\"\n             )\n             raise TypeError(error_msg.format(type(self).__name__, type(msg).__name__))\n         BaseException.__init__(self, msg)\n",
        "model": "deepseek-coder",
        "message": "Applied the change to src/_pytest/outcomes.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The error message has been updated to include information about the `allow_module_level` parameter, providing users with clear guidance on how to handle module-level skipping. This addresses the issue of users being confused due to unclear error messages.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The updated error message now includes a note about the `allow_module_level` parameter, which provides clearer guidance to users when they misuse the `skip` function. This should help users understand how to properly handle module-level skipping, reducing confusion and improving user experience.",
            "instructions": null
          },
          "output": {
            "message": "The error message has been updated to include information about the `allow_module_level` parameter, providing users with clear guidance on how to handle module-level skipping. This addresses the issue of users being confused due to unclear error messages."
          },
          "input_tokens": 3732,
          "output_tokens": 165,
          "retry_message": null,
          "completion_cost": 0.013671
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The error message has been updated to include information about the `allow_module_level` parameter, providing users with clear guidance on how to handle module-level skipping. This addresses the issue of users being confused due to unclear error messages.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Improve handling of skip for module level\nThis is potentially about updating docs, updating error messages or introducing a new API.\r\n\r\nConsider the following scenario:\r\n\r\n`pos_only.py` is using Python 3,8 syntax:\r\n```python\r\ndef foo(a, /, b):\r\n    return a + b\r\n```\r\n\r\nIt should not be tested under Python 3.6 and 3.7.\r\nThis is a proper way to skip the test in Python older than 3.8:\r\n```python\r\nfrom pytest import raises, skip\r\nimport sys\r\nif sys.version_info < (3, 8):\r\n    skip(msg=\"Requires Python >= 3.8\", allow_module_level=True)\r\n\r\n# import must be after the module level skip:\r\nfrom pos_only import *\r\n\r\ndef test_foo():\r\n    assert foo(10, 20) == 30\r\n    assert foo(10, b=20) == 30\r\n    with raises(TypeError):\r\n        assert foo(a=10, b=20)\r\n```\r\n\r\nMy actual test involves parameterize and a 3.8 only class, so skipping the test itself is not sufficient because the 3.8 class was used in the parameterization.\r\n\r\nA naive user will try to initially skip the module like:\r\n\r\n```python\r\nif sys.version_info < (3, 8):\r\n    skip(msg=\"Requires Python >= 3.8\")\r\n```\r\nThis issues this error:\r\n\r\n>Using pytest.skip outside of a test is not allowed. To decorate a test function, use the @pytest.mark.skip or @pytest.mark.skipif decorators instead, and to skip a module use `pytestmark = pytest.mark.{skip,skipif}.\r\n\r\nThe proposed solution `pytestmark = pytest.mark.{skip,skipif}`, does not work  in my case: pytest continues to process the file and fail when it hits the 3.8 syntax (when running with an older version of Python).\r\n\r\nThe correct solution, to use skip as a function is actively discouraged by the error message.\r\n\r\nThis area feels a bit unpolished.\r\nA few ideas to improve:\r\n\r\n1. Explain skip with  `allow_module_level` in the error message. this seems in conflict with the spirit of the message.\r\n2. Create an alternative API to skip a module to make things easier: `skip_module(\"reason\")`, which can call `_skip(msg=msg, allow_module_level=True)`.\r\n\r\n\n"
}