{
  "info": {
    "duration": 184.3863434791565,
    "submission": "diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py\nindex 2addf5572..b3db3cf98 100644\n--- a/src/_pytest/outcomes.py\n+++ b/src/_pytest/outcomes.py\n@@ -143,6 +143,10 @@ def skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n     __tracebackhide__ = True\n     raise Skipped(msg=msg, allow_module_level=allow_module_level)\n \n+def skip_module(reason: str) -> \"NoReturn\":\n+    \"\"\"Skip the entire module with the given reason.\"\"\"\n+    skip(msg=reason, allow_module_level=True)\n+\n \n @_with_exception(Failed)\n def fail(msg: str = \"\", pytrace: bool = True) -> \"NoReturn\":\n",
    "total_cost": 0.142164,
    "instance_id": "pytest-dev__pytest-8906",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue is about improving the handling of skipping tests at the module level. A specific concern is that using `pytest.skip` with `allow_module_level=True` is not well-documented and not user-friendly. The issue also suggests creating an alternative API to skip a module more easily. The search should focus on the `skip` function and related mechanisms in pytest, especially in files dealing with test collection and outcomes.",
            "search_requests": [
              {
                "query": "module level skip or allow_module_level",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/src/_pytest/**/*.py",
                "function_names": [
                  "skip"
                ]
              },
              {
                "query": "module level skip",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/testing/python/**/*.py",
                "function_names": [
                  "test_parametrize_skip",
                  "test_parametrize_skipif"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 236,
                "span_id": "skip",
                "file_path": "src/_pytest/outcomes.py"
              },
              {
                "rank": 0,
                "tokens": 99,
                "span_id": "TestFunction.test_parametrize_skip",
                "file_path": "testing/python/collect.py"
              },
              {
                "rank": 1,
                "tokens": 103,
                "span_id": "TestFunction.test_parametrize_skipif",
                "file_path": "testing/python/collect.py"
              }
            ],
            "search_requests": [
              {
                "query": "module level skip or allow_module_level",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/src/_pytest/**/*.py",
                "function_names": [
                  "skip"
                ]
              },
              {
                "query": "module level skip",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/testing/python/**/*.py",
                "function_names": [
                  "test_parametrize_skip",
                  "test_parametrize_skipif"
                ]
              }
            ]
          },
          "input_tokens": 3608,
          "output_tokens": 242,
          "retry_message": null,
          "completion_cost": 0.014454
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 236,
            "span_id": "skip",
            "file_path": "src/_pytest/outcomes.py"
          },
          {
            "rank": 0,
            "tokens": 99,
            "span_id": "TestFunction.test_parametrize_skip",
            "file_path": "testing/python/collect.py"
          },
          {
            "rank": 1,
            "tokens": 103,
            "span_id": "TestFunction.test_parametrize_skipif",
            "file_path": "testing/python/collect.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about improving the handling of module-level skips in pytest, especially for scenarios where specific code or syntax requires a newer version of Python. The user has identified that using pytest.skip outside of a test is not allowed and that the correct solution using 'allow_module_level' is not well-documented or straightforward. The user proposes two improvements: explaining 'allow_module_level' in the error message and creating an alternative API to skip a module more easily. The provided search results contain relevant code spans. Specifically, the 'skip' function in '_pytest/outcomes.py' is directly related to the issue as it is used to skip tests and supports the 'allow_module_level' parameter. Additionally, the test cases in 'testing/python/collect.py' demonstrate how to use 'pytest.mark.skip' and 'pytest.mark.skipif' which indirectly relate to the issue by showing how skips are typically handled in tests, although they do not directly address module-level skips. Given the context and the reported issue, the 'skip' function implementation is the most relevant code span as it directly relates to the functionality under discussion. The test cases, while useful for understanding general skip usage, are not directly relevant to the module-level skip improvement requested.",
            "identified_spans": [
              {
                "span_ids": [
                  "skip"
                ],
                "file_path": "src/_pytest/outcomes.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 2079,
          "output_tokens": 336,
          "retry_message": null,
          "completion_cost": 0.011277
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The provided file context contains the `skip` function from `pytest`, which includes the `allow_module_level` parameter as required by the issue. This indicates that the relevant part of the codebase is present. However, the issue also discusses potential improvements such as better documentation or a new API for skipping modules more easily, which are not addressed in the provided context.",
            "search_suggestions": "Look for documentation files related to pytest outcomes or skipping tests, and also examine the pytest collection process to suggest or implement an alternative API for easier module-level skipping."
          },
          "output": {
            "message": "Look for documentation files related to pytest outcomes or skipping tests, and also examine the pytest collection process to suggest or implement an alternative API for easier module-level skipping."
          },
          "input_tokens": 1555,
          "output_tokens": 147,
          "retry_message": null,
          "completion_cost": 0.006869999999999999
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look for documentation files related to pytest outcomes or skipping tests, and also examine the pytest collection process to suggest or implement an alternative API for easier module-level skipping.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "Need to find documentation files that discuss pytest outcomes and skipping tests, especially those that clarify the use of `allow_module_level`. Also, review the pytest collection process to find where improvements can be made for easier module-level skipping. The goal is to possibly introduce an alternative API for this purpose if the current methods are not user-friendly enough. The existing `skip` function in `src/_pytest/outcomes.py` handles the skipping logic but the process could be simplified.",
            "search_requests": [
              {
                "query": "pytest outcomes or skipping tests",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/doc/**/*.rst",
                "function_names": []
              },
              {
                "query": "module collection process or skipping",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/src/_pytest/python.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 420,
                "span_id": "Module._importtestmodule",
                "file_path": "src/_pytest/python.py"
              },
              {
                "rank": 1,
                "tokens": 107,
                "span_id": "pytest_collect_file",
                "file_path": "src/_pytest/python.py"
              },
              {
                "rank": 2,
                "tokens": 202,
                "span_id": "Package._collectfile",
                "file_path": "src/_pytest/python.py"
              },
              {
                "rank": 3,
                "tokens": 18,
                "span_id": "impl",
                "file_path": "src/_pytest/python.py"
              },
              {
                "rank": 3,
                "tokens": 499,
                "span_id": "docstring",
                "file_path": "src/_pytest/python.py"
              },
              {
                "rank": 4,
                "tokens": 261,
                "span_id": "Module._inject_setup_function_fixture",
                "file_path": "src/_pytest/python.py"
              },
              {
                "rank": 5,
                "tokens": 47,
                "span_id": "Module.collect",
                "file_path": "src/_pytest/python.py"
              },
              {
                "rank": 5,
                "tokens": 16,
                "span_id": "Module",
                "file_path": "src/_pytest/python.py"
              },
              {
                "rank": 5,
                "tokens": 13,
                "span_id": "Module._getobj",
                "file_path": "src/_pytest/python.py"
              },
              {
                "rank": 5,
                "tokens": 237,
                "span_id": "Module._inject_setup_module_fixture",
                "file_path": "src/_pytest/python.py"
              },
              {
                "rank": 6,
                "tokens": 78,
                "span_id": "PyCollector.istestfunction",
                "file_path": "src/_pytest/python.py"
              },
              {
                "rank": 6,
                "tokens": 90,
                "span_id": "PyCollector.isnosetest",
                "file_path": "src/_pytest/python.py"
              },
              {
                "rank": 6,
                "tokens": 31,
                "span_id": "PyCollector.istestclass",
                "file_path": "src/_pytest/python.py"
              }
            ],
            "search_requests": [
              {
                "query": "pytest outcomes or skipping tests",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/doc/**/*.rst",
                "function_names": []
              },
              {
                "query": "module collection process or skipping",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/src/_pytest/python.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 4008,
          "output_tokens": 249,
          "retry_message": null,
          "completion_cost": 0.015759
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 420,
            "span_id": "Module._importtestmodule",
            "file_path": "src/_pytest/python.py"
          },
          {
            "rank": 1,
            "tokens": 107,
            "span_id": "pytest_collect_file",
            "file_path": "src/_pytest/python.py"
          },
          {
            "rank": 2,
            "tokens": 202,
            "span_id": "Package._collectfile",
            "file_path": "src/_pytest/python.py"
          },
          {
            "rank": 3,
            "tokens": 18,
            "span_id": "impl",
            "file_path": "src/_pytest/python.py"
          },
          {
            "rank": 3,
            "tokens": 499,
            "span_id": "docstring",
            "file_path": "src/_pytest/python.py"
          },
          {
            "rank": 4,
            "tokens": 261,
            "span_id": "Module._inject_setup_function_fixture",
            "file_path": "src/_pytest/python.py"
          },
          {
            "rank": 5,
            "tokens": 47,
            "span_id": "Module.collect",
            "file_path": "src/_pytest/python.py"
          },
          {
            "rank": 5,
            "tokens": 16,
            "span_id": "Module",
            "file_path": "src/_pytest/python.py"
          },
          {
            "rank": 5,
            "tokens": 13,
            "span_id": "Module._getobj",
            "file_path": "src/_pytest/python.py"
          },
          {
            "rank": 5,
            "tokens": 237,
            "span_id": "Module._inject_setup_module_fixture",
            "file_path": "src/_pytest/python.py"
          },
          {
            "rank": 6,
            "tokens": 78,
            "span_id": "PyCollector.istestfunction",
            "file_path": "src/_pytest/python.py"
          },
          {
            "rank": 6,
            "tokens": 90,
            "span_id": "PyCollector.isnosetest",
            "file_path": "src/_pytest/python.py"
          },
          {
            "rank": 6,
            "tokens": 31,
            "span_id": "PyCollector.istestclass",
            "file_path": "src/_pytest/python.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about improving the handling of skipping for module-level tests, particularly in the context of Python version compatibility. The user wants to ensure that certain modules using specific Python syntax (like Python 3.8 syntax) are not tested on older versions of Python. They also discussed updating error messages or introducing a new API for skipping modules.\n\nFrom the provided context, the `skip` function in `src/_pytest/outcomes.py` is already identified as relevant, supporting the `allow_module_level` parameter which is crucial for the issue at hand. This function is used to skip tests at the module level.\n\nIn the new search results, several sections in `src/_pytest/python.py` are pertinent:\n- `pytest_collect_file` and `pytest_pycollect_makemodule` functions deal with collecting test modules, which could be where module-level skipping logic might be integrated.\n- `Module._importtestmodule` shows the import process of the test module, where a check for version compatibility and the skip could be implemented.\n- `Module._inject_setup_module_fixture` and `Module._inject_setup_function_fixture` deal with module and function-level setup and teardown fixtures, which might indirectly relate to the module-level skipping or could be adapted to include such checks.\n\nThese sections are relevant as they either directly handle module collection and import, or involve fixture management at the module level, both of which are critical to addressing the issue of handling module-level skips based on Python version compatibility.",
            "identified_spans": [
              {
                "span_ids": [
                  "skip"
                ],
                "file_path": "src/_pytest/outcomes.py"
              },
              {
                "span_ids": [
                  "pytest_collect_file",
                  "pytest_pycollect_makemodule",
                  "Module._importtestmodule",
                  "Module._inject_setup_module_fixture",
                  "Module._inject_setup_function_fixture"
                ],
                "file_path": "src/_pytest/python.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 5340,
          "output_tokens": 483,
          "retry_message": null,
          "completion_cost": 0.023265
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context provided includes the relevant parts of the pytest codebase that handle skipping logic and module collection. Specifically, the `skip` function in `src/_pytest/outcomes.py` handles the skipping logic, including the `allow_module_level` parameter. The `pytest_collect_file` and `pytest_pycollect_makemodule` functions in `src/_pytest/python.py` are responsible for collecting and importing test modules, which is crucial for understanding how module-level skipping could be improved. Additionally, the `Module` class in `src/_pytest/python.py` shows how modules are handled during collection, including error handling for import errors and skips. There is also an error message that discourages the use of `pytest.skip` outside of a test, which aligns with the issue's concern about the unpolished nature of module-level skipping. Overall, the provided file context appears to include all the relevant code needed to understand and potentially improve module-level skipping in pytest.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 3125,
          "output_tokens": 251,
          "retry_message": null,
          "completion_cost": 0.013139999999999999
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "skip",
            "file_path": "src/_pytest/outcomes.py",
            "scratch_pad": "To address the issue of improving handling of skip for module level, we need to introduce an API that allows skipping a module more easily. The current solution of using `skip(msg, allow_module_level=True)` is discouraged by the error message. We propose to create a new API `skip_module(reason)` that will internally call `skip(msg=msg, allow_module_level=True)`.",
            "instructions": "Introduce a new function `skip_module(reason)` in `src/_pytest/outcomes.py` that will call the existing `skip` function with `allow_module_level=True`."
          },
          "output": {
            "span_id": "skip",
            "end_line": 144,
            "file_path": "src/_pytest/outcomes.py",
            "start_line": 123,
            "instructions": "Introduce a new function `skip_module(reason)` in `src/_pytest/outcomes.py` that will call the existing `skip` function with `allow_module_level=True`."
          },
          "input_tokens": 4966,
          "output_tokens": 185,
          "retry_message": null,
          "completion_cost": 0.017673
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "skip",
        "end_line": 144,
        "file_path": "src/_pytest/outcomes.py",
        "max_tokens": 1000,
        "start_line": 123,
        "temperature": 1.6,
        "instructions": "Introduce a new function `skip_module(reason)` in `src/_pytest/outcomes.py` that will call the existing `skip` function with `allow_module_level=True`.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```html\n<replace>\n@_with_exception(Skipped)\ndef skip(msg: str = \"\", *, allow_module_level: bool = False) -> \"NoReturn\":\n    \"\"\"Skip an executing test with the given message.\n\n    This function should be called only during testing (setup, call or teardown) or\n    during collection by using the ``allow_module_level`` flag.  This function can\n    be called in doctests as well.\n\n    :param bool allow_module_level:\n        Allows this function to be called at module level, skipping the rest\n        of the module. Defaults to False.\n\n    .. note::\n        It is better to use the :ref:`pytest.mark.skipif ref` marker when\n        possible to declare a test to be skipped under certain conditions\n        like mismatching platforms or dependencies.\n        Similarly, use the ``# doctest: +SKIP`` directive (see `doctest.SKIP\n        <https://docs.python.org/3/library/how-to/doctest.html#doctest.SKIP>`_)\n        to skip a doctest statically.\n    \"\"\"\n    __tracebackhide__ = True\n    raise Skipped(msg=msg, allow_module_level=allow_module_level)\n\ndef skip_module(reason: str) -> \"NoReturn\":\n    \"\"\"Skip the entire module with the given reason.\"\"\"\n    skip(msg=reason, allow_module_level=True)\n</replace>"
          },
          "output": {
            "diff": "--- src/_pytest/outcomes.py\n+++ src/_pytest/outcomes.py\n@@ -142,6 +142,10 @@\n     \"\"\"\n     __tracebackhide__ = True\n     raise Skipped(msg=msg, allow_module_level=allow_module_level)\n+\n+def skip_module(reason: str) -> \"NoReturn\":\n+    \"\"\"Skip the entire module with the given reason.\"\"\"\n+    skip(msg=reason, allow_module_level=True)\n \n \n @_with_exception(Failed)\n",
            "message": "Applied the change to src/_pytest/outcomes.py.\n\n<scratch_pad>\n```html\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 5263,
          "output_tokens": 333,
          "retry_message": null,
          "completion_cost": 0.020784
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- src/_pytest/outcomes.py\n+++ src/_pytest/outcomes.py\n@@ -142,6 +142,10 @@\n     \"\"\"\n     __tracebackhide__ = True\n     raise Skipped(msg=msg, allow_module_level=allow_module_level)\n+\n+def skip_module(reason: str) -> \"NoReturn\":\n+    \"\"\"Skip the entire module with the given reason.\"\"\"\n+    skip(msg=reason, allow_module_level=True)\n \n \n @_with_exception(Failed)\n",
        "model": "deepseek-coder",
        "message": "Applied the change to src/_pytest/outcomes.py.\n\n<scratch_pad>\n```html\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue of improving handling of skip for module level has been addressed by introducing the `skip_module(reason)` function, which simplifies the process of skipping entire modules in a more user-friendly manner. This completes the task as per the given requirements.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The implementation of `skip_module(reason)` has been successfully added to `src/_pytest/outcomes.py`. This new function provides a more intuitive and straightforward way to skip an entire module, addressing the issue described. The function internally calls the existing `skip` function with `allow_module_level=True`, ensuring compatibility and functionality as required.",
            "instructions": null
          },
          "output": {
            "message": "The issue of improving handling of skip for module level has been addressed by introducing the `skip_module(reason)` function, which simplifies the process of skipping entire modules in a more user-friendly manner. This completes the task as per the given requirements."
          },
          "input_tokens": 5384,
          "output_tokens": 186,
          "retry_message": null,
          "completion_cost": 0.018942
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue of improving handling of skip for module level has been addressed by introducing the `skip_module(reason)` function, which simplifies the process of skipping entire modules in a more user-friendly manner. This completes the task as per the given requirements.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Improve handling of skip for module level\nThis is potentially about updating docs, updating error messages or introducing a new API.\r\n\r\nConsider the following scenario:\r\n\r\n`pos_only.py` is using Python 3,8 syntax:\r\n```python\r\ndef foo(a, /, b):\r\n    return a + b\r\n```\r\n\r\nIt should not be tested under Python 3.6 and 3.7.\r\nThis is a proper way to skip the test in Python older than 3.8:\r\n```python\r\nfrom pytest import raises, skip\r\nimport sys\r\nif sys.version_info < (3, 8):\r\n    skip(msg=\"Requires Python >= 3.8\", allow_module_level=True)\r\n\r\n# import must be after the module level skip:\r\nfrom pos_only import *\r\n\r\ndef test_foo():\r\n    assert foo(10, 20) == 30\r\n    assert foo(10, b=20) == 30\r\n    with raises(TypeError):\r\n        assert foo(a=10, b=20)\r\n```\r\n\r\nMy actual test involves parameterize and a 3.8 only class, so skipping the test itself is not sufficient because the 3.8 class was used in the parameterization.\r\n\r\nA naive user will try to initially skip the module like:\r\n\r\n```python\r\nif sys.version_info < (3, 8):\r\n    skip(msg=\"Requires Python >= 3.8\")\r\n```\r\nThis issues this error:\r\n\r\n>Using pytest.skip outside of a test is not allowed. To decorate a test function, use the @pytest.mark.skip or @pytest.mark.skipif decorators instead, and to skip a module use `pytestmark = pytest.mark.{skip,skipif}.\r\n\r\nThe proposed solution `pytestmark = pytest.mark.{skip,skipif}`, does not work  in my case: pytest continues to process the file and fail when it hits the 3.8 syntax (when running with an older version of Python).\r\n\r\nThe correct solution, to use skip as a function is actively discouraged by the error message.\r\n\r\nThis area feels a bit unpolished.\r\nA few ideas to improve:\r\n\r\n1. Explain skip with  `allow_module_level` in the error message. this seems in conflict with the spirit of the message.\r\n2. Create an alternative API to skip a module to make things easier: `skip_module(\"reason\")`, which can call `_skip(msg=msg, allow_module_level=True)`.\r\n\r\n\n"
}