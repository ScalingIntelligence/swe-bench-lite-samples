{
  "info": {
    "duration": 173.8128752708435,
    "submission": "diff --git a/sympy/physics/units/unitsystem.py b/sympy/physics/units/unitsystem.py\nindex 3daf84c108..fd8892db75 100644\n--- a/sympy/physics/units/unitsystem.py\n+++ b/sympy/physics/units/unitsystem.py\n@@ -190,10 +190,13 @@ def _collect_factor_and_dimension(self, expr):\n                 dim /= idim**count\n             return factor, dim\n         elif isinstance(expr, Function):\n-            fds = [self._collect_factor_and_dimension(\n-                arg) for arg in expr.args]\n-            return (expr.func(*(f[0] for f in fds)),\n-                    *(d[1] for d in fds))\n+            fds = [self._collect_factor_and_dimension(arg) for arg in expr.args]\n+            dimension = Dimension(1)\n+            for _, arg_dim in fds:\n+                dimension *= arg_dim\n+            if self.get_dimension_system().is_dimensionless(dimension):\n+                dimension = Dimension(1)\n+            return (expr.func(*(f[0] for f in fds)), dimension)\n         elif isinstance(expr, Dimension):\n             return S.One, expr\n         else:\n",
    "total_cost": 0.106836,
    "instance_id": "sympy__sympy-24066",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue concerns the method `SI._collect_factor_and_dimension()` from SymPy's SI unit system, which fails to correctly identify that an exponent is dimensionless. This issue is demonstrated using an expression involving units like second, ohm, and farad, and an exponential function. To address this, it's essential to inspect how the method works, particularly where it processes exponential expressions. By focusing on the SI module, the related Dimension class, and the method itself, we can find the necessary code to debug and fix this issue.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "SI"
                ],
                "code_snippet": null,
                "file_pattern": "sympy/physics/units/systems/si.py",
                "function_names": [
                  "_collect_factor_and_dimension"
                ]
              },
              {
                "query": null,
                "class_names": [
                  "Dimension"
                ],
                "code_snippet": null,
                "file_pattern": "sympy/physics/units/dimensions.py",
                "function_names": [
                  "__mul__",
                  "__truediv__",
                  "__rtruediv__",
                  "_eval_power"
                ]
              },
              {
                "query": null,
                "class_names": [
                  "Quantity"
                ],
                "code_snippet": null,
                "file_pattern": "sympy/physics/units/quantities.py",
                "function_names": [
                  "_collect_factor_and_dimension"
                ]
              },
              {
                "query": null,
                "class_names": [
                  "ExpBase"
                ],
                "code_snippet": null,
                "file_pattern": "sympy/functions/elementary/exponential.py",
                "function_names": [
                  "_eval_conjugate",
                  "_eval_is_finite",
                  "_eval_is_rational"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 383,
                "span_id": "UnitSystem._collect_factor_and_dimension",
                "file_path": "sympy/physics/units/unitsystem.py"
              },
              {
                "rank": 1,
                "tokens": 131,
                "span_id": "Quantity._collect_factor_and_dimension",
                "file_path": "sympy/physics/units/quantities.py"
              },
              {
                "rank": 0,
                "tokens": 77,
                "span_id": "Dimension.__mul__",
                "file_path": "sympy/physics/units/dimensions.py"
              },
              {
                "rank": 0,
                "tokens": 19,
                "span_id": "Dimension.__truediv__",
                "file_path": "sympy/physics/units/dimensions.py"
              },
              {
                "rank": 0,
                "tokens": 20,
                "span_id": "Dimension.__rtruediv__",
                "file_path": "sympy/physics/units/dimensions.py"
              },
              {
                "rank": 0,
                "tokens": 22,
                "span_id": "Dimension._eval_power",
                "file_path": "sympy/physics/units/dimensions.py"
              },
              {
                "rank": 0,
                "tokens": 131,
                "span_id": "Quantity._collect_factor_and_dimension",
                "file_path": "sympy/physics/units/quantities.py"
              },
              {
                "rank": 0,
                "tokens": 17,
                "span_id": "ExpBase._eval_conjugate",
                "file_path": "sympy/functions/elementary/exponential.py"
              },
              {
                "rank": 0,
                "tokens": 42,
                "span_id": "ExpBase._eval_is_finite",
                "file_path": "sympy/functions/elementary/exponential.py"
              },
              {
                "rank": 0,
                "tokens": 54,
                "span_id": "ExpBase._eval_is_rational",
                "file_path": "sympy/functions/elementary/exponential.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "SI"
                ],
                "code_snippet": null,
                "file_pattern": "sympy/physics/units/systems/si.py",
                "function_names": [
                  "_collect_factor_and_dimension"
                ]
              },
              {
                "query": null,
                "class_names": [
                  "Dimension"
                ],
                "code_snippet": null,
                "file_pattern": "sympy/physics/units/dimensions.py",
                "function_names": [
                  "__mul__",
                  "__truediv__",
                  "__rtruediv__",
                  "_eval_power"
                ]
              },
              {
                "query": null,
                "class_names": [
                  "Quantity"
                ],
                "code_snippet": null,
                "file_pattern": "sympy/physics/units/quantities.py",
                "function_names": [
                  "_collect_factor_and_dimension"
                ]
              },
              {
                "query": null,
                "class_names": [
                  "ExpBase"
                ],
                "code_snippet": null,
                "file_pattern": "sympy/functions/elementary/exponential.py",
                "function_names": [
                  "_eval_conjugate",
                  "_eval_is_finite",
                  "_eval_is_rational"
                ]
              }
            ]
          },
          "input_tokens": 3683,
          "output_tokens": 380,
          "retry_message": null,
          "completion_cost": 0.016749
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 383,
            "span_id": "UnitSystem._collect_factor_and_dimension",
            "file_path": "sympy/physics/units/unitsystem.py"
          },
          {
            "rank": 1,
            "tokens": 131,
            "span_id": "Quantity._collect_factor_and_dimension",
            "file_path": "sympy/physics/units/quantities.py"
          },
          {
            "rank": 0,
            "tokens": 77,
            "span_id": "Dimension.__mul__",
            "file_path": "sympy/physics/units/dimensions.py"
          },
          {
            "rank": 0,
            "tokens": 19,
            "span_id": "Dimension.__truediv__",
            "file_path": "sympy/physics/units/dimensions.py"
          },
          {
            "rank": 0,
            "tokens": 20,
            "span_id": "Dimension.__rtruediv__",
            "file_path": "sympy/physics/units/dimensions.py"
          },
          {
            "rank": 0,
            "tokens": 22,
            "span_id": "Dimension._eval_power",
            "file_path": "sympy/physics/units/dimensions.py"
          },
          {
            "rank": 0,
            "tokens": 131,
            "span_id": "Quantity._collect_factor_and_dimension",
            "file_path": "sympy/physics/units/quantities.py"
          },
          {
            "rank": 0,
            "tokens": 17,
            "span_id": "ExpBase._eval_conjugate",
            "file_path": "sympy/functions/elementary/exponential.py"
          },
          {
            "rank": 0,
            "tokens": 42,
            "span_id": "ExpBase._eval_is_finite",
            "file_path": "sympy/functions/elementary/exponential.py"
          },
          {
            "rank": 0,
            "tokens": 54,
            "span_id": "ExpBase._eval_is_rational",
            "file_path": "sympy/functions/elementary/exponential.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "To identify the relevant code spans for the reported issue, I first analyzed the issue description. The problem revolves around the SI._collect_factor_and_dimension() method incorrectly detecting whether an exponent is dimensionless. The example provided shows that applying exp() to an expression with units results in an error because the dimension is incorrectly calculated as Dimension(time/(capacitance*impedance)) instead of Dimension(1). This indicates a problem with how dimensions are calculated and propagated within the method.\n\nGiven the issue, I focused my attention on the span containing the implementation of the SI._collect_factor_and_dimension method. This method is responsible for collecting the factor and dimension of an expression. Within this span, I identified several key parts: the handling of different types (Mul, Pow, Add, Derivative, Function, and Dimension), including the specific handling of Function types, which would include functions like exp(). The implementation of this method checks the dimension of each part of the expression and combines them appropriately. The issue likely arises from the logic used to handle functions, specifically the assumption that a function's argument is always dimensionless.\n\nIn addition, I reviewed the `Quantity` class and its static method `_collect_factor_and_dimension` which is deprecated and indicates to use the UnitSystem method instead. This corroborates the findings in the UnitSystem class.\n\nFinally, I briefly viewed the exponential.py file, but since the issue is more about dimension calculation in expressions involving units and not directly tied to the mechanics of the exp() function itself, I deemed the details in exponential.py less relevant for immediate issue resolution.\n\nBased on this analysis, the file sympy/physics/units/unitsystem.py contains the relevant code span for directly addressing the issue, specifically the `UnitSystem._collect_factor_and_dimension` method and other related methods for dimension handling.",
            "identified_spans": [
              {
                "span_ids": [
                  "UnitSystem",
                  "UnitSystem.__init__",
                  "UnitSystem._collect_factor_and_dimension"
                ],
                "file_path": "sympy/physics/units/unitsystem.py"
              },
              {
                "span_ids": [
                  "Quantity",
                  "Quantity._collect_factor_and_dimension"
                ],
                "file_path": "sympy/physics/units/quantities.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3270,
          "output_tokens": 542,
          "retry_message": null,
          "completion_cost": 0.01794
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The file context provided includes the method `SI._collect_factor_and_dimension()` which is directly related to the reported issue. The method is responsible for determining the dimension of expressions, including handling special cases like `Mul`, `Pow`, `Add`, `Derivative`, and `Function`. This matches the requirements of the issue, where it's essential to handle the exponential function correctly for dimensionless cases. The method's logic seems comprehensive, covering various mathematical operations, which suggests that the relevant code to address the issue is likely present here. Therefore, I conclude that this file context is relevant and contains the necessary code to proceed with understanding and potentially fixing the issue.",
            "search_suggestions": null
          },
          "output": {
            "message": null
          },
          "input_tokens": 2312,
          "output_tokens": 175,
          "retry_message": null,
          "completion_cost": 0.009561
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "scratch_pad": "Based on the provided file context and the initial issue, the method `_collect_factor_and_dimension` in the `UnitSystem` class seems to be the main focus. The method is already provided in the context from `sympy/physics/units/unitsystem.py`. This method handles various types of expressions including `Mul`, `Pow`, `Add`, `Derivative`, and `Function`. The method also includes a deprecated version in the `Quantity` class, but it directs users to call the method from the `UnitSystem` class. Given this information, it's likely that the issue could be addressed within the `UnitSystem` class itself, particularly where it processes `Function` type expressions like `exp`. Therefore, further detailed inspection within this class might reveal the necessary adjustments.",
            "search_requests": []
          },
          "output": {
            "message": "Based on the provided file context and the initial issue, the method `_collect_factor_and_dimension` in the `UnitSystem` class seems to be the main focus. The method is already provided in the context from `sympy/physics/units/unitsystem.py`. This method handles various types of expressions including `Mul`, `Pow`, `Add`, `Derivative`, and `Function`. The method also includes a deprecated version in the `Quantity` class, but it directs users to call the method from the `UnitSystem` class. Given this information, it's likely that the issue could be addressed within the `UnitSystem` class itself, particularly where it processes `Function` type expressions like `exp`. Therefore, further detailed inspection within this class might reveal the necessary adjustments."
          },
          "input_tokens": 5421,
          "output_tokens": 194,
          "retry_message": null,
          "completion_cost": 0.019173
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "Based on the provided file context and the initial issue, the method `_collect_factor_and_dimension` in the `UnitSystem` class seems to be the main focus. The method is already provided in the context from `sympy/physics/units/unitsystem.py`. This method handles various types of expressions including `Mul`, `Pow`, `Add`, `Derivative`, and `Function`. The method also includes a deprecated version in the `Quantity` class, but it directs users to call the method from the `UnitSystem` class. Given this information, it's likely that the issue could be addressed within the `UnitSystem` class itself, particularly where it processes `Function` type expressions like `exp`. Therefore, further detailed inspection within this class might reveal the necessary adjustments.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "UnitSystem._collect_factor_and_dimension",
            "file_path": "sympy/physics/units/unitsystem.py",
            "scratch_pad": "The issue involves the handling of the `Function` type in the `_collect_factor_and_dimension` method within the `UnitSystem` class. Specifically, the method fails to correctly detect that an exponent is dimensionless when processing expressions involving functions like `exp`. The current implementation processes each argument of the function separately and does not aggregate the dimensions correctly. This leads to incorrect dimension calculation for functions like `exp` where the entire argument should be considered dimensionless. To fix this, we need to handle the `Function` case more carefully, ensuring that the final dimension is correctly determined as dimensionless if the function's arguments are all dimensionless.",
            "instructions": "Update the `_collect_factor_and_dimension` method in the `UnitSystem` class to correctly handle the `Function` type, ensuring that if all arguments of the function are dimensionless, the function itself is recognized as dimensionless. Modify the line where the function's arguments are processed to aggregate the dimensions correctly and ensure that if the aggregated dimension is dimensionless, the final dimension returned for the function is also dimensionless."
          },
          "output": {
            "span_id": "UnitSystem._collect_factor_and_dimension",
            "end_line": 200,
            "file_path": "sympy/physics/units/unitsystem.py",
            "start_line": 152,
            "instructions": "Update the `_collect_factor_and_dimension` method in the `UnitSystem` class to correctly handle the `Function` type, ensuring that if all arguments of the function are dimensionless, the function itself is recognized as dimensionless. Modify the line where the function's arguments are processed to aggregate the dimensions correctly and ensure that if the aggregated dimension is dimensionless, the final dimension returned for the function is also dimensionless."
          },
          "input_tokens": 2717,
          "output_tokens": 296,
          "retry_message": null,
          "completion_cost": 0.012591000000000001
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "UnitSystem._collect_factor_and_dimension",
        "end_line": 200,
        "file_path": "sympy/physics/units/unitsystem.py",
        "max_tokens": 1000,
        "start_line": 152,
        "temperature": 1.6,
        "instructions": "Update the `_collect_factor_and_dimension` method in the `UnitSystem` class to correctly handle the `Function` type, ensuring that if all arguments of the function are dimensionless, the function itself is recognized as dimensionless. Modify the line where the function's arguments are processed to aggregate the dimensions correctly and ensure that if the aggregated dimension is dimensionless, the final dimension returned for the function is also dimensionless.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n    def _collect_factor_and_dimension(self, expr):\n        \"\"\"\n        Return tuple with scale factor expression and dimension expression.\n        \"\"\"\n        from sympy.physics.units import Quantity\n        if isinstance(expr, Quantity):\n            return expr.scale_factor, expr.dimension\n        elif isinstance(expr, Mul):\n            factor = 1\n            dimension = Dimension(1)\n            for arg in expr.args:\n                arg_factor, arg_dim = self._collect_factor_and_dimension(arg)\n                factor *= arg_factor\n                dimension *= arg_dim\n            return factor, dimension\n        elif isinstance(expr, Pow):\n            factor, dim = self._collect_factor_and_dimension(expr.base)\n            exp_factor, exp_dim = self._collect_factor_and_dimension(expr.exp)\n            if self.get_dimension_system().is_dimensionless(exp_dim):\n                exp_dim = 1\n            return factor ** exp_factor, dim ** (exp_factor * exp_dim)\n        elif isinstance(expr, Add):\n            factor, dim = self._collect_factor_and_dimension(expr.args[0])\n            for addend in expr.args[1:]:\n                addend_factor, addend_dim = \\\n                    self._collect_factor_and_dimension(addend)\n                if dim != addend_dim:\n                    raise ValueError(\n                        'Dimension of \"{}\" is {}, '\n                        'but it should be {}'.format(\n                            addend, addend_dim, dim))\n                factor += addend_factor\n            return factor, dim\n        elif isinstance(expr, Derivative):\n            factor, dim = self._collect_factor_and_dimension(expr.args[0])\n            for independent, count in expr.variable_count:\n                ifactor, idim = self._collect_factor_and_dimension(independent)\n                factor /= ifactor**count\n                dim /= idim**count\n            return factor, dim\n        elif isinstance(expr, Function):\n            fds = [self._collect_factor_and_dimension(arg) for arg in expr.args]\n            dimension = Dimension(1)\n            for _, arg_dim in fds:\n                dimension *= arg_dim\n            if self.get_dimension_system().is_dimensionless(dimension):\n                dimension = Dimension(1)\n            return (expr.func(*(f[0] for f in fds)), dimension)\n        elif isinstance(expr, Dimension):\n            return S.One, expr\n        else:\n            return expr, Dimension(1)\n</replace>"
          },
          "output": {
            "diff": "--- sympy/physics/units/unitsystem.py\n+++ sympy/physics/units/unitsystem.py\n@@ -190,10 +190,13 @@\n                 dim /= idim**count\n             return factor, dim\n         elif isinstance(expr, Function):\n-            fds = [self._collect_factor_and_dimension(\n-                arg) for arg in expr.args]\n-            return (expr.func(*(f[0] for f in fds)),\n-                    *(d[1] for d in fds))\n+            fds = [self._collect_factor_and_dimension(arg) for arg in expr.args]\n+            dimension = Dimension(1)\n+            for _, arg_dim in fds:\n+                dimension *= arg_dim\n+            if self.get_dimension_system().is_dimensionless(dimension):\n+                dimension = Dimension(1)\n+            return (expr.func(*(f[0] for f in fds)), dimension)\n         elif isinstance(expr, Dimension):\n             return S.One, expr\n         else:\n",
            "message": "Applied the change to sympy/physics/units/unitsystem.py.",
            "verification_errors": []
          },
          "input_tokens": 2877,
          "output_tokens": 608,
          "retry_message": null,
          "completion_cost": 0.017751
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sympy/physics/units/unitsystem.py\n+++ sympy/physics/units/unitsystem.py\n@@ -190,10 +190,13 @@\n                 dim /= idim**count\n             return factor, dim\n         elif isinstance(expr, Function):\n-            fds = [self._collect_factor_and_dimension(\n-                arg) for arg in expr.args]\n-            return (expr.func(*(f[0] for f in fds)),\n-                    *(d[1] for d in fds))\n+            fds = [self._collect_factor_and_dimension(arg) for arg in expr.args]\n+            dimension = Dimension(1)\n+            for _, arg_dim in fds:\n+                dimension *= arg_dim\n+            if self.get_dimension_system().is_dimensionless(dimension):\n+                dimension = Dimension(1)\n+            return (expr.func(*(f[0] for f in fds)), dimension)\n         elif isinstance(expr, Dimension):\n             return S.One, expr\n         else:\n",
        "model": "deepseek-coder",
        "message": "Applied the change to sympy/physics/units/unitsystem.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The applied change correctly fixes the issue by ensuring that function arguments are correctly aggregated and checked for dimensionlessness. The updated method now returns a dimensionless dimension for functions with dimensionless arguments, resolving the reported problem.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The applied change updates the `_collect_factor_and_dimension` method to correctly manage the dimensions of functions like `exp`. By iterating over each argument of the function, it aggregates the dimensions and checks if the final aggregated dimension is dimensionless. If it is, the method correctly sets the dimension to `Dimension(1)`. This ensures that functions with dimensionless arguments are recognized as having a dimensionless output. The change is consistent with the initial diagnosis of the issue and directly addresses the reported problem.",
            "instructions": null
          },
          "output": {
            "message": "The applied change correctly fixes the issue by ensuring that function arguments are correctly aggregated and checked for dimensionlessness. The updated method now returns a dimensionless dimension for functions with dimensionless arguments, resolving the reported problem."
          },
          "input_tokens": 3342,
          "output_tokens": 203,
          "retry_message": null,
          "completion_cost": 0.013071
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The applied change correctly fixes the issue by ensuring that function arguments are correctly aggregated and checked for dimensionlessness. The updated method now returns a dimensionless dimension for functions with dimensionless arguments, resolving the reported problem.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "SI._collect_factor_and_dimension() cannot properly detect that exponent is dimensionless\nHow to reproduce:\r\n\r\n```python\r\nfrom sympy import exp\r\nfrom sympy.physics import units\r\nfrom sympy.physics.units.systems.si import SI\r\n\r\nexpr = units.second / (units.ohm * units.farad)\r\ndim = SI._collect_factor_and_dimension(expr)[1]\r\n\r\nassert SI.get_dimension_system().is_dimensionless(dim)\r\n\r\nbuggy_expr = 100 + exp(expr)\r\nSI._collect_factor_and_dimension(buggy_expr)\r\n\r\n# results in ValueError: Dimension of \"exp(second/(farad*ohm))\" is Dimension(time/(capacitance*impedance)), but it should be Dimension(1)\r\n```\n"
}