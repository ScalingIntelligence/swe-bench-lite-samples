{
  "info": {
    "duration": 161.86136507987976,
    "submission": "",
    "total_cost": 0.066174,
    "instance_id": "sympy__sympy-23117",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue describes a problem with constructing an empty `Array` in SymPy 1.4, which results in a `ValueError`. The traceback points to the `DenseNDimArray` class and its methods in the `sympy/tensor/array` module. To address this, the search should focus on the code related to the creation and handling of arrays, particularly the part dealing with empty iterables. Performance may be affected, as the goal is to replicate or counter the behavior of empty matrices in arrays. This is crucial given existing code that might depend on the successful creation of empty arrays.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "DenseNDimArray"
                ],
                "code_snippet": "dense_ndim_array.py",
                "file_pattern": "**/sympy/tensor/array/**/*.py",
                "function_names": [
                  "__new__",
                  "_new",
                  "_handle_ndarray_creation_inputs",
                  "_scan_iterable_shape"
                ]
              }
            ]
          },
          "output": null,
          "input_tokens": 3399,
          "output_tokens": 243,
          "retry_message": "\n\nUnfortunately, I didn\u2019t find any relevant results.",
          "completion_cost": 0.013842
        },
        {
          "action": {
            "complete": false,
            "scratch_pad": "Given that the initial search with specific references to `DenseNDimArray` did not yield results, it is possible that the problem might be more deeply rooted or scattered across different parts of the `sympy/tensor/array` module or related modules. To broaden the search, I will now include the entire `sympy/tensor/array` module and focus on the terms directly related to array creation and handling, keeping the requirement for at least one of the specified parameter types. This should provide a more comprehensive overview of the codebase dealing with arrays.",
            "search_requests": [
              {
                "query": "array creation and handling",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/sympy/tensor/array/**/*.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 236,
                "span_id": "impl",
                "file_path": "sympy/tensor/array/expressions/__init__.py"
              },
              {
                "rank": 2,
                "tokens": 2284,
                "span_id": "docstring",
                "file_path": "sympy/tensor/array/expressions/__init__.py"
              },
              {
                "rank": 1,
                "tokens": 38,
                "span_id": "_ArrayExpr.__getitem__",
                "file_path": "sympy/tensor/array/expressions/array_expressions.py"
              },
              {
                "rank": 1,
                "tokens": 16,
                "span_id": "_ArrayExpr",
                "file_path": "sympy/tensor/array/expressions/array_expressions.py"
              },
              {
                "rank": 1,
                "tokens": 352,
                "span_id": "imports",
                "file_path": "sympy/tensor/array/expressions/array_expressions.py"
              },
              {
                "rank": 1,
                "tokens": 17,
                "span_id": "_ArrayExpr._get",
                "file_path": "sympy/tensor/array/expressions/array_expressions.py"
              },
              {
                "rank": 8,
                "tokens": 27,
                "span_id": "_permute_dims",
                "file_path": "sympy/tensor/array/expressions/array_expressions.py"
              },
              {
                "rank": 8,
                "tokens": 18,
                "span_id": "_get_array_element_or_slice",
                "file_path": "sympy/tensor/array/expressions/array_expressions.py"
              },
              {
                "rank": 8,
                "tokens": 17,
                "span_id": "get_shape",
                "file_path": "sympy/tensor/array/expressions/array_expressions.py"
              },
              {
                "rank": 8,
                "tokens": 33,
                "span_id": "_array_diagonal",
                "file_path": "sympy/tensor/array/expressions/array_expressions.py"
              },
              {
                "rank": 8,
                "tokens": 25,
                "span_id": "nest_permutation",
                "file_path": "sympy/tensor/array/expressions/array_expressions.py"
              },
              {
                "rank": 8,
                "tokens": 25,
                "span_id": "_array_tensor_product",
                "file_path": "sympy/tensor/array/expressions/array_expressions.py"
              },
              {
                "rank": 8,
                "tokens": 33,
                "span_id": "_array_contraction",
                "file_path": "sympy/tensor/array/expressions/array_expressions.py"
              },
              {
                "rank": 8,
                "tokens": 31,
                "span_id": "_get_subranks",
                "file_path": "sympy/tensor/array/expressions/array_expressions.py"
              },
              {
                "rank": 8,
                "tokens": 23,
                "span_id": "_array_add",
                "file_path": "sympy/tensor/array/expressions/array_expressions.py"
              },
              {
                "rank": 8,
                "tokens": 93,
                "span_id": "get_rank",
                "file_path": "sympy/tensor/array/expressions/array_expressions.py"
              },
              {
                "rank": 8,
                "tokens": 27,
                "span_id": "_get_subrank",
                "file_path": "sympy/tensor/array/expressions/array_expressions.py"
              },
              {
                "rank": 3,
                "tokens": 23,
                "span_id": "convert_array_to_indexed",
                "file_path": "sympy/tensor/array/expressions/conv_array_to_indexed.py"
              },
              {
                "rank": 3,
                "tokens": 100,
                "span_id": "imports",
                "file_path": "sympy/tensor/array/expressions/conv_array_to_indexed.py"
              },
              {
                "rank": 4,
                "tokens": 199,
                "span_id": "imports",
                "file_path": "sympy/tensor/array/expressions/conv_matrix_to_array.py"
              },
              {
                "rank": 5,
                "tokens": 97,
                "span_id": "imports",
                "file_path": "sympy/tensor/array/arrayop.py"
              },
              {
                "rank": 5,
                "tokens": 49,
                "span_id": "_arrayfy",
                "file_path": "sympy/tensor/array/arrayop.py"
              },
              {
                "rank": 6,
                "tokens": 205,
                "span_id": "imports",
                "file_path": "sympy/tensor/array/expressions/conv_indexed_to_array.py"
              },
              {
                "rank": 10,
                "tokens": 1457,
                "span_id": "_convert_indexed_to_array",
                "file_path": "sympy/tensor/array/expressions/conv_indexed_to_array.py"
              },
              {
                "rank": 7,
                "tokens": 340,
                "span_id": "imports",
                "file_path": "sympy/tensor/array/expressions/conv_array_to_matrix.py"
              },
              {
                "rank": 9,
                "tokens": 215,
                "span_id": "imports",
                "file_path": "sympy/tensor/array/__init__.py"
              }
            ],
            "search_requests": [
              {
                "query": "array creation and handling",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/sympy/tensor/array/**/*.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 3684,
          "output_tokens": 206,
          "retry_message": null,
          "completion_cost": 0.014142000000000002
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 236,
            "span_id": "impl",
            "file_path": "sympy/tensor/array/expressions/__init__.py"
          },
          {
            "rank": 1,
            "tokens": 38,
            "span_id": "_ArrayExpr.__getitem__",
            "file_path": "sympy/tensor/array/expressions/array_expressions.py"
          },
          {
            "rank": 1,
            "tokens": 16,
            "span_id": "_ArrayExpr",
            "file_path": "sympy/tensor/array/expressions/array_expressions.py"
          },
          {
            "rank": 1,
            "tokens": 352,
            "span_id": "imports",
            "file_path": "sympy/tensor/array/expressions/array_expressions.py"
          },
          {
            "rank": 1,
            "tokens": 17,
            "span_id": "_ArrayExpr._get",
            "file_path": "sympy/tensor/array/expressions/array_expressions.py"
          },
          {
            "rank": 2,
            "tokens": 2284,
            "span_id": "docstring",
            "file_path": "sympy/tensor/array/expressions/__init__.py"
          },
          {
            "rank": 3,
            "tokens": 23,
            "span_id": "convert_array_to_indexed",
            "file_path": "sympy/tensor/array/expressions/conv_array_to_indexed.py"
          },
          {
            "rank": 3,
            "tokens": 100,
            "span_id": "imports",
            "file_path": "sympy/tensor/array/expressions/conv_array_to_indexed.py"
          },
          {
            "rank": 4,
            "tokens": 199,
            "span_id": "imports",
            "file_path": "sympy/tensor/array/expressions/conv_matrix_to_array.py"
          },
          {
            "rank": 5,
            "tokens": 97,
            "span_id": "imports",
            "file_path": "sympy/tensor/array/arrayop.py"
          },
          {
            "rank": 5,
            "tokens": 49,
            "span_id": "_arrayfy",
            "file_path": "sympy/tensor/array/arrayop.py"
          },
          {
            "rank": 6,
            "tokens": 205,
            "span_id": "imports",
            "file_path": "sympy/tensor/array/expressions/conv_indexed_to_array.py"
          },
          {
            "rank": 7,
            "tokens": 340,
            "span_id": "imports",
            "file_path": "sympy/tensor/array/expressions/conv_array_to_matrix.py"
          },
          {
            "rank": 8,
            "tokens": 27,
            "span_id": "_permute_dims",
            "file_path": "sympy/tensor/array/expressions/array_expressions.py"
          },
          {
            "rank": 8,
            "tokens": 18,
            "span_id": "_get_array_element_or_slice",
            "file_path": "sympy/tensor/array/expressions/array_expressions.py"
          },
          {
            "rank": 8,
            "tokens": 17,
            "span_id": "get_shape",
            "file_path": "sympy/tensor/array/expressions/array_expressions.py"
          },
          {
            "rank": 8,
            "tokens": 33,
            "span_id": "_array_diagonal",
            "file_path": "sympy/tensor/array/expressions/array_expressions.py"
          },
          {
            "rank": 8,
            "tokens": 25,
            "span_id": "nest_permutation",
            "file_path": "sympy/tensor/array/expressions/array_expressions.py"
          },
          {
            "rank": 8,
            "tokens": 25,
            "span_id": "_array_tensor_product",
            "file_path": "sympy/tensor/array/expressions/array_expressions.py"
          },
          {
            "rank": 8,
            "tokens": 33,
            "span_id": "_array_contraction",
            "file_path": "sympy/tensor/array/expressions/array_expressions.py"
          },
          {
            "rank": 8,
            "tokens": 31,
            "span_id": "_get_subranks",
            "file_path": "sympy/tensor/array/expressions/array_expressions.py"
          },
          {
            "rank": 8,
            "tokens": 23,
            "span_id": "_array_add",
            "file_path": "sympy/tensor/array/expressions/array_expressions.py"
          },
          {
            "rank": 8,
            "tokens": 93,
            "span_id": "get_rank",
            "file_path": "sympy/tensor/array/expressions/array_expressions.py"
          },
          {
            "rank": 8,
            "tokens": 27,
            "span_id": "_get_subrank",
            "file_path": "sympy/tensor/array/expressions/array_expressions.py"
          },
          {
            "rank": 9,
            "tokens": 215,
            "span_id": "imports",
            "file_path": "sympy/tensor/array/__init__.py"
          },
          {
            "rank": 10,
            "tokens": 1457,
            "span_id": "_convert_indexed_to_array",
            "file_path": "sympy/tensor/array/expressions/conv_indexed_to_array.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "To identify relevant code spans related to the reported issue, I analyzed the traceback provided in the issue. The traceback points to several files and specific lines in the 'sympy/tensor/array' module where the exception occurs. I examined these files to pinpoint the areas of code responsible for handling the creation of empty Arrays. In 'sympy/tensor/array/ndim_array.py', the '_scan_iterable_shape' function is key as it handles the input iterable. The ValueError is thrown within this function due to an empty iterable, which suggests this is the core issue in handling empty arrays. Additionally, tracing back to 'sympy/tensor/array/dense_ndim_array.py', I found the '__new__' and '_new' methods which are involved in the creation of new arrays, further emphasizing the importance of these areas for handling the empty case. Furthermore, considering the global handling of array creation in 'sympy/tensor/array/__init__.py', the 'Array' class and its instantiation are crucial since they are directly called in the reported issue. Finally, in the attempt to find potential solutions or related functionalities, I looked into other functionalities related to array expressions, conversions, and operations which did not explicitly fix the issue but provided a broader context of how arrays are manipulated and transformed in SymPy.",
            "identified_spans": [
              {
                "span_ids": [
                  "_scan_iterable_shape",
                  "f"
                ],
                "file_path": "sympy/tensor/array/ndim_array.py"
              },
              {
                "span_ids": [
                  "__new__",
                  "_new"
                ],
                "file_path": "sympy/tensor/array/dense_ndim_array.py"
              },
              {
                "span_ids": [],
                "file_path": "sympy/tensor/array/__init__.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4896,
          "output_tokens": 429,
          "retry_message": null,
          "completion_cost": 0.021123
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context provided includes `dense_ndim_array.py` which contains the class `DenseNDimArray` and related methods involved in array creation. This is the direct context where the error in question is occurring. Additional files like `ndim_array.py` that handle array creation inputs are also covered, offering a comprehensive view of array creation logic within SymPy. Since the necessary classes and methods are present in these files, they are likely to contain the relevant code to address the issue of constructing an empty array. Therefore, it is reasonable to conclude that the provided file context is relevant and complete for addressing the reported issue.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 1943,
          "output_tokens": 169,
          "retry_message": null,
          "completion_cost": 0.008364
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "imports",
            "file_path": "sympy/tensor/array/ndim_array.py",
            "scratch_pad": "The issue arises from the attempt to construct an empty Array, which results in a ValueError due to the way the shape of the iterable is being determined. This can be fixed by handling the case where the iterable is empty and setting the shape accordingly.",
            "instructions": "Modify the _scan_iterable_shape function in sympy/tensor/array/ndim_array.py to handle the case when the iterable is empty by returning an empty shape and an empty list of elements."
          },
          "output": {
            "span_id": "imports",
            "end_line": 12,
            "file_path": "sympy/tensor/array/ndim_array.py",
            "start_line": 1,
            "instructions": "Modify the _scan_iterable_shape function in sympy/tensor/array/ndim_array.py to handle the case when the iterable is empty by returning an empty shape and an empty list of elements."
          },
          "input_tokens": 2116,
          "output_tokens": 157,
          "retry_message": null,
          "completion_cost": 0.008703
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "imports",
        "end_line": 12,
        "file_path": "sympy/tensor/array/ndim_array.py",
        "max_tokens": 1000,
        "start_line": 1,
        "temperature": 1.6,
        "instructions": "Modify the _scan_iterable_shape function in sympy/tensor/array/ndim_array.py to handle the case when the iterable is empty by returning an empty shape and an empty list of elements.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```json\n{\n  \"response\": \"<replace>from sympy.core.basic import Basic\\nfrom sympy.core.containers import (Dict, Tuple)\\nfrom sympy.core.expr import Expr\\nfrom sympy.core.kind import Kind, NumberKind, UndefinedKind\\nfrom sympy.core.numbers import Integer\\nfrom sympy.core.singleton import S\\nfrom sympy.core.sympify import sympify\\nfrom sympy.external.gmpy import SYMPY_INTS\\nfrom sympy.printing.defaults import Printable\\n\\nimport itertools\\nfrom collections.abc import Iterable\\n\\ndef _scan_iterable_shape(iterable):\\n    if not iterable:\\n        return (), []\\n    def f(pointer):\\n        if isinstance(pointer, Iterable):\\n            elems, shapes = zip(*[f(i) for i in pointer])\\n            shape = (len(shapes),) + shapes[0]\\n            elements = [elem for sublist in elems for elem in sublist]\\n            return elements, shape\\n        else:\\n            return [pointer], ()\\n    return f(iterable)\\n</replace>\""
          },
          "output": null,
          "input_tokens": 1815,
          "output_tokens": 269,
          "retry_message": "The following diff was not applied:\n --- sympy/tensor/array/ndim_array.py\n+++ sympy/tensor/array/ndim_array.py\n@@ -1,15 +1,4 @@\n-from sympy.core.basic import Basic\n-from sympy.core.containers import (Dict, Tuple)\n-from sympy.core.expr import Expr\n-from sympy.core.kind import Kind, NumberKind, UndefinedKind\n-from sympy.core.numbers import Integer\n-from sympy.core.singleton import S\n-from sympy.core.sympify import sympify\n-from sympy.external.gmpy import SYMPY_INTS\n-from sympy.printing.defaults import Printable\n-\n-import itertools\n-from collections.abc import Iterable\n+from sympy.core.basic import Basic\\nfrom sympy.core.containers import (Dict, Tuple)\\nfrom sympy.core.expr import Expr\\nfrom sympy.core.kind import Kind, NumberKind, UndefinedKind\\nfrom sympy.core.numbers import Integer\\nfrom sympy.core.singleton import S\\nfrom sympy.core.sympify import sympify\\nfrom sympy.external.gmpy import SYMPY_INTS\\nfrom sympy.printing.defaults import Printable\\n\\nimport itertools\\nfrom collections.abc import Iterable\\n\\ndef _scan_iterable_shape(iterable):\\n    if not iterable:\\n        return (), []\\n    def f(pointer):\\n        if isinstance(pointer, Iterable):\\n            elems, shapes = zip(*[f(i) for i in pointer])\\n            shape = (len(shapes),) + shapes[0]\\n            elements = [elem for sublist in elems for elem in sublist]\\n            return elements, shape\\n        else:\\n            return [pointer], ()\\n    return f(iterable)\\n\n \n \n class ArrayKind(Kind):\n. \nErrors:\nThe updated code is invalid.\nMake sure that you return the unchanged code in the replace tag exactly as it is. If you want to reject the instructions, use the reject function.",
          "completion_cost": 0.00948
        },
        {
          "action": {
            "content": "```json\n{\n  \"response\": \"<replace>from sympy.core.basic import Basic\\nfrom sympy.core.containers import (Dict, Tuple)\\nfrom sympy.core.expr import Expr\\nfrom sympy.core.kind import Kind, NumberKind, UndefinedKind\\nfrom sympy.core.numbers import Integer\\nfrom sympy.core.singleton import S\\nfrom sympy.core.sympify import sympify\\nfrom sympy.external.gmpy import SYMPY_INTS\\nfrom sympy.printing.defaults import Printable\\n\\nimport itertools\\nfrom collections.abc import Iterable\\n</replace>\""
          },
          "output": null,
          "input_tokens": 2585,
          "output_tokens": 148,
          "retry_message": "The following diff was not applied:\n --- sympy/tensor/array/ndim_array.py\n+++ sympy/tensor/array/ndim_array.py\n@@ -1,15 +1,4 @@\n-from sympy.core.basic import Basic\n-from sympy.core.containers import (Dict, Tuple)\n-from sympy.core.expr import Expr\n-from sympy.core.kind import Kind, NumberKind, UndefinedKind\n-from sympy.core.numbers import Integer\n-from sympy.core.singleton import S\n-from sympy.core.sympify import sympify\n-from sympy.external.gmpy import SYMPY_INTS\n-from sympy.printing.defaults import Printable\n-\n-import itertools\n-from collections.abc import Iterable\n+from sympy.core.basic import Basic\\nfrom sympy.core.containers import (Dict, Tuple)\\nfrom sympy.core.expr import Expr\\nfrom sympy.core.kind import Kind, NumberKind, UndefinedKind\\nfrom sympy.core.numbers import Integer\\nfrom sympy.core.singleton import S\\nfrom sympy.core.sympify import sympify\\nfrom sympy.external.gmpy import SYMPY_INTS\\nfrom sympy.printing.defaults import Printable\\n\\nimport itertools\\nfrom collections.abc import Iterable\\n\n \n \n class ArrayKind(Kind):\n. \nErrors:\nThe updated code is invalid.\nMake sure that you return the unchanged code in the replace tag exactly as it is. If you want to reject the instructions, use the reject function.",
          "completion_cost": 0.009975000000000001
        },
        {
          "action": {
            "content": "```json\n{\n  \"response\": \"<replace>from sympy.core.basic import Basic\\nfrom sympy.core.containers import (Dict, Tuple)\\nfrom sympy.core.expr import Expr\\nfrom sympy.core.kind import Kind, NumberKind, UndefinedKind\\nfrom sympy.core.numbers import Integer\\nfrom sympy.core.singleton import S\\nfrom sympy.core.sympify import sympify\\nfrom sympy.external.gmpy import SYMPY_INTS\\nfrom sympy.printing.defaults import Printable\\n\\nimport itertools\\nfrom collections.abc import Iterable\\n</replace>\""
          },
          "output": null,
          "input_tokens": 3113,
          "output_tokens": 148,
          "retry_message": "The following diff was not applied:\n --- sympy/tensor/array/ndim_array.py\n+++ sympy/tensor/array/ndim_array.py\n@@ -1,15 +1,4 @@\n-from sympy.core.basic import Basic\n-from sympy.core.containers import (Dict, Tuple)\n-from sympy.core.expr import Expr\n-from sympy.core.kind import Kind, NumberKind, UndefinedKind\n-from sympy.core.numbers import Integer\n-from sympy.core.singleton import S\n-from sympy.core.sympify import sympify\n-from sympy.external.gmpy import SYMPY_INTS\n-from sympy.printing.defaults import Printable\n-\n-import itertools\n-from collections.abc import Iterable\n+from sympy.core.basic import Basic\\nfrom sympy.core.containers import (Dict, Tuple)\\nfrom sympy.core.expr import Expr\\nfrom sympy.core.kind import Kind, NumberKind, UndefinedKind\\nfrom sympy.core.numbers import Integer\\nfrom sympy.core.singleton import S\\nfrom sympy.core.sympify import sympify\\nfrom sympy.external.gmpy import SYMPY_INTS\\nfrom sympy.printing.defaults import Printable\\n\\nimport itertools\\nfrom collections.abc import Iterable\\n\n \n \n class ArrayKind(Kind):\n. \nErrors:\nThe updated code is invalid.\nMake sure that you return the unchanged code in the replace tag exactly as it is. If you want to reject the instructions, use the reject function.",
          "completion_cost": 0.011559
        }
      ]
    }
  ],
  "initial_message": "sympy.Array([]) fails, while sympy.Matrix([]) works\nSymPy 1.4 does not allow to construct empty Array (see code below). Is this the intended behavior?\r\n\r\n```\r\n>>> import sympy\r\nKeyboardInterrupt\r\n>>> import sympy\r\n>>> from sympy import Array\r\n>>> sympy.__version__\r\n'1.4'\r\n>>> a = Array([])\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"/Users/hcui7/miniconda3/envs/a/lib/python3.7/site-packages/sympy/tensor/array/dense_ndim_array.py\", line 130, in __new__\r\n    return cls._new(iterable, shape, **kwargs)\r\n  File \"/Users/hcui7/miniconda3/envs/a/lib/python3.7/site-packages/sympy/tensor/array/dense_ndim_array.py\", line 136, in _new\r\n    shape, flat_list = cls._handle_ndarray_creation_inputs(iterable, shape, **kwargs)\r\n  File \"/Users/hcui7/miniconda3/envs/a/lib/python3.7/site-packages/sympy/tensor/array/ndim_array.py\", line 142, in _handle_ndarray_creation_inputs\r\n    iterable, shape = cls._scan_iterable_shape(iterable)\r\n  File \"/Users/hcui7/miniconda3/envs/a/lib/python3.7/site-packages/sympy/tensor/array/ndim_array.py\", line 127, in _scan_iterable_shape\r\n    return f(iterable)\r\n  File \"/Users/hcui7/miniconda3/envs/a/lib/python3.7/site-packages/sympy/tensor/array/ndim_array.py\", line 120, in f\r\n    elems, shapes = zip(*[f(i) for i in pointer])\r\nValueError: not enough values to unpack (expected 2, got 0)\r\n```\r\n\r\n@czgdp1807 \n"
}