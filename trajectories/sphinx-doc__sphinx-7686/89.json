{
  "info": {
    "duration": 209.37439799308777,
    "submission": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 08f83ebdf..6e85cd1d0 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -525,8 +525,11 @@ class Documenter:\n         elif self.options.inherited_members:\n             return False, sorted((m.name, m.value) for m in members.values())\n         else:\n-            return False, sorted((m.name, m.value) for m in members.values()\n-                                 if m.directly_defined)\n+            filtered_members = []\n+            for m in members.values():\n+                if m.directly_defined or self.options.autosummary_imported_members:\n+                    filtered_members.append((m.name, m.value))\n+            return False, sorted(filtered_members)\n \n     def filter_members(self, members: List[Tuple[str, Any]], want_all: bool\n                        ) -> List[Tuple[str, Any, bool]]:\n",
    "total_cost": 0.191766,
    "instance_id": "sphinx-doc__sphinx-7686",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue revolves around the `members` variable in the module template of autosummary containing imported members even when `autosummary_imported_members` is set to False. This suggests a problem in how members are being filtered or retrieved within autosummary or autodoc extensions. The relevant functions to investigate include `get_object_members`, `filter_members`, and potentially `import_object` in the autodoc extension. Examining the logic in these functions will help identify why imported members are not being excluded as expected.",
            "search_requests": [
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/autodoc/**/*.py",
                "function_names": [
                  "get_object_members",
                  "filter_members",
                  "import_object"
                ]
              },
              {
                "query": "members contain imported members when autosummary_imported_members is False",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/autosummary/**/*.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 246,
                "span_id": "Documenter.get_object_members",
                "file_path": "sphinx/ext/autodoc/__init__.py"
              },
              {
                "rank": 0,
                "tokens": 284,
                "span_id": "ModuleDocumenter.get_object_members",
                "file_path": "sphinx/ext/autodoc/__init__.py"
              },
              {
                "rank": 0,
                "tokens": 878,
                "span_id": "Documenter.filter_members",
                "file_path": "sphinx/ext/autodoc/__init__.py"
              },
              {
                "rank": 0,
                "tokens": 149,
                "span_id": "Documenter.import_object",
                "file_path": "sphinx/ext/autodoc/__init__.py"
              },
              {
                "rank": 0,
                "tokens": 71,
                "span_id": "ClassDocumenter.import_object",
                "file_path": "sphinx/ext/autodoc/__init__.py"
              },
              {
                "rank": 0,
                "tokens": 58,
                "span_id": "DataDeclarationDocumenter.import_object",
                "file_path": "sphinx/ext/autodoc/__init__.py"
              },
              {
                "rank": 0,
                "tokens": 95,
                "span_id": "MethodDocumenter.import_object",
                "file_path": "sphinx/ext/autodoc/__init__.py"
              },
              {
                "rank": 0,
                "tokens": 66,
                "span_id": "AttributeDocumenter.import_object",
                "file_path": "sphinx/ext/autodoc/__init__.py"
              },
              {
                "rank": 0,
                "tokens": 39,
                "span_id": "InstanceAttributeDocumenter.import_object",
                "file_path": "sphinx/ext/autodoc/__init__.py"
              },
              {
                "rank": 0,
                "tokens": 127,
                "span_id": "SlotsAttributeDocumenter.import_object",
                "file_path": "sphinx/ext/autodoc/__init__.py"
              },
              {
                "rank": 1,
                "tokens": 381,
                "span_id": "get_object_members",
                "file_path": "sphinx/ext/autodoc/importer.py"
              },
              {
                "rank": 1,
                "tokens": 517,
                "span_id": "import_object",
                "file_path": "sphinx/ext/autodoc/importer.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/autodoc/**/*.py",
                "function_names": [
                  "get_object_members",
                  "filter_members",
                  "import_object"
                ]
              },
              {
                "query": "members contain imported members when autosummary_imported_members is False",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/autosummary/**/*.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 3753,
          "output_tokens": 244,
          "retry_message": null,
          "completion_cost": 0.014919
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 246,
            "span_id": "Documenter.get_object_members",
            "file_path": "sphinx/ext/autodoc/__init__.py"
          },
          {
            "rank": 0,
            "tokens": 284,
            "span_id": "ModuleDocumenter.get_object_members",
            "file_path": "sphinx/ext/autodoc/__init__.py"
          },
          {
            "rank": 0,
            "tokens": 878,
            "span_id": "Documenter.filter_members",
            "file_path": "sphinx/ext/autodoc/__init__.py"
          },
          {
            "rank": 0,
            "tokens": 149,
            "span_id": "Documenter.import_object",
            "file_path": "sphinx/ext/autodoc/__init__.py"
          },
          {
            "rank": 0,
            "tokens": 71,
            "span_id": "ClassDocumenter.import_object",
            "file_path": "sphinx/ext/autodoc/__init__.py"
          },
          {
            "rank": 0,
            "tokens": 58,
            "span_id": "DataDeclarationDocumenter.import_object",
            "file_path": "sphinx/ext/autodoc/__init__.py"
          },
          {
            "rank": 0,
            "tokens": 95,
            "span_id": "MethodDocumenter.import_object",
            "file_path": "sphinx/ext/autodoc/__init__.py"
          },
          {
            "rank": 0,
            "tokens": 66,
            "span_id": "AttributeDocumenter.import_object",
            "file_path": "sphinx/ext/autodoc/__init__.py"
          },
          {
            "rank": 0,
            "tokens": 39,
            "span_id": "InstanceAttributeDocumenter.import_object",
            "file_path": "sphinx/ext/autodoc/__init__.py"
          },
          {
            "rank": 0,
            "tokens": 127,
            "span_id": "SlotsAttributeDocumenter.import_object",
            "file_path": "sphinx/ext/autodoc/__init__.py"
          },
          {
            "rank": 1,
            "tokens": 381,
            "span_id": "get_object_members",
            "file_path": "sphinx/ext/autodoc/importer.py"
          },
          {
            "rank": 1,
            "tokens": 517,
            "span_id": "import_object",
            "file_path": "sphinx/ext/autodoc/importer.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about the `members` variable in the autosummary module template containing imported members even when `autosummary_imported_members` is set to False. The relevant sections in the codebase to address this issue are those that handle the retrieval and filtering of members during the documentation generation process. Specifically, the `Documenter` class and its subclasses like `ModuleDocumenter` and `ClassDocumenter` contain methods such as `import_object`, `get_object_members`, and `filter_members` which are responsible for importing objects, retrieving their members, and filtering those members based on the configuration settings. The `get_object_members` method in the `Documenter` class and its override in `ModuleDocumenter` are particularly relevant for controlling which members are included. Additionally, the `filter_members` method in the `Documenter` class implements the logic for filtering members based on the `autodoc_imported_members` option. To address the issue, one would need to ensure that the `autosummary_imported_members` configuration is properly respected in these methods. The `import_object` function in `importer.py` is also relevant as it handles the actual importing of objects, which is a prerequisite for determining what members to include or exclude.",
            "identified_spans": [
              {
                "span_ids": [
                  "Documenter.get_object_members",
                  "Documenter.filter_members",
                  "ModuleDocumenter.get_object_members"
                ],
                "file_path": "sphinx/ext/autodoc/__init__.py"
              },
              {
                "span_ids": [
                  "import_object",
                  "get_object_members"
                ],
                "file_path": "sphinx/ext/autodoc/importer.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 6082,
          "output_tokens": 381,
          "retry_message": null,
          "completion_cost": 0.023961000000000003
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The issue revolves around the `members` variable in the module template of autosummary containing imported members even when `autosummary_imported_members` is set to False. This suggests a problem in how members are being filtered or retrieved within autosummary or autodoc extensions. The relevant functions to investigate are `get_object_members`, `filter_members`, and potentially `import_object` in the autodoc extension. Examining the logic in these functions will help identify why imported members are not being excluded as expected.",
            "search_suggestions": "Focus on investigating the `get_object_members` and `filter_members` functions within the `sphinx/ext/autodoc/__init__.py` file. Additionally, review the `import_object` function in `sphinx/ext/autodoc/importer.py` to check if there are any issues related to the import process that might affect member filtering."
          },
          "output": {
            "message": "Focus on investigating the `get_object_members` and `filter_members` functions within the `sphinx/ext/autodoc/__init__.py` file. Additionally, review the `import_object` function in `sphinx/ext/autodoc/importer.py` to check if there are any issues related to the import process that might affect member filtering."
          },
          "input_tokens": 4760,
          "output_tokens": 227,
          "retry_message": null,
          "completion_cost": 0.017685
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Focus on investigating the `get_object_members` and `filter_members` functions within the `sphinx/ext/autodoc/__init__.py` file. Additionally, review the `import_object` function in `sphinx/ext/autodoc/importer.py` to check if there are any issues related to the import process that might affect member filtering.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "scratch_pad": "The context provided indicates that the `get_object_members` and `filter_members` functions are central to the issue. The `get_object_members` function retrieves members of an object, while `filter_members` filters these members based on various criteria, including whether they are private or inherited. The `import_object` function in `importer.py` is also relevant as it handles the import process which could affect the members list if not managed correctly. Given the detailed code snippets, the focus should remain on these functions to identify how imported members are being included despite settings to exclude them.",
            "search_requests": [
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sphinx/ext/autodoc/__init__.py",
                "function_names": [
                  "get_object_members",
                  "filter_members"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sphinx/ext/autodoc/importer.py",
                "function_names": [
                  "import_object"
                ]
              }
            ]
          },
          "output": {
            "message": "The context provided indicates that the `get_object_members` and `filter_members` functions are central to the issue. The `get_object_members` function retrieves members of an object, while `filter_members` filters these members based on various criteria, including whether they are private or inherited. The `import_object` function in `importer.py` is also relevant as it handles the import process which could affect the members list if not managed correctly. Given the detailed code snippets, the focus should remain on these functions to identify how imported members are being included despite settings to exclude them."
          },
          "input_tokens": 7549,
          "output_tokens": 303,
          "retry_message": null,
          "completion_cost": 0.027192
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "The context provided indicates that the `get_object_members` and `filter_members` functions are central to the issue. The `get_object_members` function retrieves members of an object, while `filter_members` filters these members based on various criteria, including whether they are private or inherited. The `import_object` function in `importer.py` is also relevant as it handles the import process which could affect the members list if not managed correctly. Given the detailed code snippets, the focus should remain on these functions to identify how imported members are being included despite settings to exclude them.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "Documenter.get_object_members",
            "file_path": "sphinx/ext/autodoc/__init__.py",
            "scratch_pad": "To address the issue, it's crucial to ensure that imported members are not included in the `members` list when `autosummary_imported_members` is set to False. The main concern lies in the `get_object_members` function, where imported members are currently being included regardless of this setting.",
            "instructions": "Modify the `get_object_members` function to ensure that it filters out imported members when `autosummary_imported_members` is set to False. This should be done by checking the source of each member and excluding those that are not directly defined in the module."
          },
          "output": {
            "span_id": "Documenter.get_object_members",
            "end_line": 529,
            "file_path": "sphinx/ext/autodoc/__init__.py",
            "start_line": 505,
            "instructions": "Modify the `get_object_members` function to ensure that it filters out imported members when `autosummary_imported_members` is set to False. This should be done by checking the source of each member and excluding those that are not directly defined in the module."
          },
          "input_tokens": 5948,
          "output_tokens": 192,
          "retry_message": null,
          "completion_cost": 0.020724
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "Documenter.get_object_members",
        "end_line": 529,
        "file_path": "sphinx/ext/autodoc/__init__.py",
        "max_tokens": 1000,
        "start_line": 505,
        "temperature": 1.6,
        "instructions": "Modify the `get_object_members` function to ensure that it filters out imported members when `autosummary_imported_members` is set to False. This should be done by checking the source of each member and excluding those that are not directly defined in the module.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n    def get_object_members(self, want_all: bool) -> Tuple[bool, List[Tuple[str, Any]]]:\n        \"\"\"Return `(members_check_module, members)` where `members` is a\n        list of `(membername, member)` pairs of the members of *self.object*.\n\n        If *want_all* is True, return all members.  Else, only return those\n        members given by *self.options.members* (which may also be none).\n        \"\"\"\n        members = get_object_members(self.object, self.objpath, self.get_attr, self.analyzer)\n        if not want_all:\n            if not self.options.members:\n                return False, []\n            # specific members given\n            selected = []\n            for name in self.options.members:\n                if name in members:\n                    selected.append((name, members[name].value))\n                else:\n                    logger.warning(__('missing attribute %s in object %s') %\n                                   (name, self.fullname), type='autodoc')\n            return False, sorted(selected)\n        elif self.options.inherited_members:\n            return False, sorted((m.name, m.value) for m in members.values())\n        else:\n            filtered_members = []\n            for m in members.values():\n                if m.directly_defined or self.options.autosummary_imported_members:\n                    filtered_members.append((m.name, m.value))\n            return False, sorted(filtered_members)\n</replace>"
          },
          "output": {
            "diff": "--- sphinx/ext/autodoc/__init__.py\n+++ sphinx/ext/autodoc/__init__.py\n@@ -525,8 +525,11 @@\n         elif self.options.inherited_members:\n             return False, sorted((m.name, m.value) for m in members.values())\n         else:\n-            return False, sorted((m.name, m.value) for m in members.values()\n-                                 if m.directly_defined)\n+            filtered_members = []\n+            for m in members.values():\n+                if m.directly_defined or self.options.autosummary_imported_members:\n+                    filtered_members.append((m.name, m.value))\n+            return False, sorted(filtered_members)\n \n     def filter_members(self, members: List[Tuple[str, Any]], want_all: bool\n                        ) -> List[Tuple[str, Any, bool]]:\n",
            "message": "Applied the change to sphinx/ext/autodoc/__init__.py.",
            "verification_errors": []
          },
          "input_tokens": 6474,
          "output_tokens": 369,
          "retry_message": null,
          "completion_cost": 0.024957
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sphinx/ext/autodoc/__init__.py\n+++ sphinx/ext/autodoc/__init__.py\n@@ -525,8 +525,11 @@\n         elif self.options.inherited_members:\n             return False, sorted((m.name, m.value) for m in members.values())\n         else:\n-            return False, sorted((m.name, m.value) for m in members.values()\n-                                 if m.directly_defined)\n+            filtered_members = []\n+            for m in members.values():\n+                if m.directly_defined or self.options.autosummary_imported_members:\n+                    filtered_members.append((m.name, m.value))\n+            return False, sorted(filtered_members)\n \n     def filter_members(self, members: List[Tuple[str, Any]], want_all: bool\n                        ) -> List[Tuple[str, Any, bool]]:\n",
        "model": "deepseek-coder",
        "message": "Applied the change to sphinx/ext/autodoc/__init__.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "Documenter.filter_members",
            "file_path": "sphinx/ext/autodoc/__init__.py",
            "scratch_pad": "The first change has been applied to the `get_object_members` function to ensure that imported members are filtered out when `autosummary_imported_members` is False. This modification introduces a check to ensure that only members directly defined in the module are included in the list of members. The next step is to ensure that the `filter_members` function correctly processes these filtered members.",
            "instructions": "Modify the `filter_members` function to ensure that it correctly processes the members list, taking into account the changes made to `get_object_members`. Specifically, ensure that any additional filtering respects the `autosummary_imported_members` setting and does not inadvertently reintroduce imported members."
          },
          "output": {
            "span_id": "Documenter.filter_members",
            "file_path": "sphinx/ext/autodoc/__init__.py",
            "instructions": "Modify the `filter_members` function to ensure that it correctly processes the members list, taking into account the changes made to `get_object_members`. Specifically, ensure that any additional filtering respects the `autosummary_imported_members` setting and does not inadvertently reintroduce imported members."
          },
          "input_tokens": 6450,
          "output_tokens": 222,
          "retry_message": null,
          "completion_cost": 0.02268
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "Documenter.filter_members",
        "end_line": null,
        "file_path": "sphinx/ext/autodoc/__init__.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Modify the `filter_members` function to ensure that it correctly processes the members list, taking into account the changes made to `get_object_members`. Specifically, ensure that any additional filtering respects the `autosummary_imported_members` setting and does not inadvertently reintroduce imported members.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 658,
            "start_line": 570,
            "scratch_pad": "The task is to modify the `filter_members` function to ensure that it respects the `autosummary_imported_members` setting. The relevant lines are those that handle the filtering logic, particularly where the decision to keep or skip a member is made based on various conditions."
          },
          "output": null,
          "input_tokens": 2146,
          "output_tokens": 105,
          "retry_message": "Lines 570 - 658 has 727 tokens, which is higher than the maximum allowed 500 tokens in completion. You need to specify the exact part of the code that needs to be updated to fulfill the change. If this is not possible you should reject the request.",
          "completion_cost": 0.008013
        },
        {
          "action": {
            "reject": true,
            "end_line": 0,
            "start_line": 0,
            "scratch_pad": "The task requires rejecting the request due to the inability to specify a range of code lines that fit within the token limit, as the entire function exceeds this limit."
          },
          "output": {
            "message": "The task requires rejecting the request due to the inability to specify a range of code lines that fit within the token limit, as the entire function exceeds this limit."
          },
          "input_tokens": 2564,
          "output_tokens": 74,
          "retry_message": null,
          "completion_cost": 0.008802
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "The task requires rejecting the request due to the inability to specify a range of code lines that fit within the token limit, as the entire function exceeds this limit.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "reject",
            "finish": null,
            "reject": "The proposed modification cannot be safely implemented due to the size of the function and the limitations imposed by the token limit. The entire function exceeds the token limit, making it impossible to ensure the accuracy and completeness of the changes without potentially introducing errors or omissions.",
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The request to modify the `filter_members` function cannot be fulfilled within the token limit as the entire function exceeds this limit. The function is extensive and involves multiple complex conditions and extensive logic. Given the constraints, it is not feasible to process this request without truncating crucial parts of the function, which could lead to incomplete or incorrect modifications.",
            "instructions": null
          },
          "output": {
            "message": "The proposed modification cannot be safely implemented due to the size of the function and the limitations imposed by the token limit. The entire function exceeds the token limit, making it impossible to ensure the accuracy and completeness of the changes without potentially introducing errors or omissions."
          },
          "input_tokens": 6711,
          "output_tokens": 180,
          "retry_message": null,
          "completion_cost": 0.022833000000000003
        }
      ]
    },
    {
      "name": "Rejected",
      "state": {
        "model": "gpt-4o",
        "message": "The proposed modification cannot be safely implemented due to the size of the function and the limitations imposed by the token limit. The entire function exceeds the token limit, making it impossible to ensure the accuracy and completeness of the changes without potentially introducing errors or omissions.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "autosummary: The members variable for module template contains imported members\n**Describe the bug**\r\nautosummary: The members variable for module template contains imported members even if autosummary_imported_members is False.\r\n\r\n**To Reproduce**\r\n\r\n```\r\n# _templates/autosummary/module.rst\r\n{{ fullname | escape | underline }}\r\n\r\n.. automodule:: {{ fullname }}\r\n\r\n   .. autosummary::\r\n   {% for item in members %}\r\n      {{ item }}\r\n   {%- endfor %}\r\n\r\n```\r\n```\r\n# example.py\r\nimport os\r\n```\r\n```\r\n# index.rst\r\n.. autosummary::\r\n   :toctree: generated\r\n\r\n   example\r\n```\r\n```\r\n# conf.py\r\nautosummary_generate = True\r\nautosummary_imported_members = False\r\n```\r\n\r\nAs a result, I got following output:\r\n```\r\n# generated/example.rst\r\nexample\r\n=======\r\n\r\n.. automodule:: example\r\n\r\n   .. autosummary::\r\n\r\n      __builtins__\r\n      __cached__\r\n      __doc__\r\n      __file__\r\n      __loader__\r\n      __name__\r\n      __package__\r\n      __spec__\r\n      os\r\n```\r\n\r\n**Expected behavior**\r\nThe template variable `members` should not contain imported members when `autosummary_imported_members` is False.\r\n\r\n**Your project**\r\nNo\r\n\r\n**Screenshots**\r\nNo\r\n\r\n**Environment info**\r\n- OS: Mac\r\n- Python version: 3.8.2\r\n- Sphinx version: 3.1.0dev\r\n- Sphinx extensions:  sphinx.ext.autosummary\r\n- Extra tools: No\r\n\r\n**Additional context**\r\nNo\r\n\n"
}