{
  "info": {
    "duration": 211.76913857460022,
    "submission": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 08f83ebdf..a8596ef8e 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -233,6 +233,16 @@ class Documenter:\n         \"\"\"getattr() override for types such as Zope interfaces.\"\"\"\n         return autodoc_attrgetter(self.env.app, obj, name, *defargs)\n \n+    def is_defined_in_obj(self, obj: Any, member_name: str) -> bool:\n+        \"\"\"Check if a member is defined within the object and not imported.\"\"\"\n+        if hasattr(obj, '__module__') and hasattr(obj, '__name__'):\n+            module = sys.modules.get(obj.__module__)\n+            if module:\n+                member = getattr(obj, member_name, None)\n+                if member:\n+                    return getattr(member, '__module__', None) == obj.__module__\n+        return False\n+\n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n                             ) -> bool:\n@@ -885,6 +895,8 @@ class ModuleDocumenter(Documenter):\n         ret = []\n         for mname in memberlist:\n             try:\n+                if not self.options.imported_members and not is_defined_in_obj(self.object, mname):\n+                    continue\n                 ret.append((mname, safe_getattr(self.object, mname)))\n             except AttributeError:\n                 logger.warning(\n",
    "total_cost": 0.11385,
    "instance_id": "sphinx-doc__sphinx-7686",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue describes a problem with the autosummary feature in Sphinx where imported members are included in the members variable even when the autosummary_imported_members setting is set to False. This suggests that there might be a bug or improper handling of this setting in the autosummary module or related modules handling the document generation. It would be beneficial to focus the search on the modules responsible for handling the autosummary feature and specifically look for the handling of the members variable and the configuration setting autosummary_imported_members.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "autosummary"
                ],
                "code_snippet": null,
                "file_pattern": "sphinx/ext/autosummary/**/*.py",
                "function_names": [
                  "get_object_members"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 246,
                "span_id": "Documenter.get_object_members",
                "file_path": "sphinx/ext/autodoc/__init__.py"
              },
              {
                "rank": 0,
                "tokens": 284,
                "span_id": "ModuleDocumenter.get_object_members",
                "file_path": "sphinx/ext/autodoc/__init__.py"
              },
              {
                "rank": 1,
                "tokens": 381,
                "span_id": "get_object_members",
                "file_path": "sphinx/ext/autodoc/importer.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "autosummary"
                ],
                "code_snippet": null,
                "file_pattern": "sphinx/ext/autosummary/**/*.py",
                "function_names": [
                  "get_object_members"
                ]
              }
            ]
          },
          "input_tokens": 3753,
          "output_tokens": 195,
          "retry_message": null,
          "completion_cost": 0.014184
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 246,
            "span_id": "Documenter.get_object_members",
            "file_path": "sphinx/ext/autodoc/__init__.py"
          },
          {
            "rank": 0,
            "tokens": 284,
            "span_id": "ModuleDocumenter.get_object_members",
            "file_path": "sphinx/ext/autodoc/__init__.py"
          },
          {
            "rank": 1,
            "tokens": 381,
            "span_id": "get_object_members",
            "file_path": "sphinx/ext/autodoc/importer.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is related to the 'autosummary' directive incorrectly including imported members even when 'autosummary_imported_members' is set to False. To address this, I need to identify the code responsible for determining which members to include in the autosummary documentation. The search results provided contain key methods related to member processing in the 'autodoc' extension, which is integral to 'autosummary'. Specifically, 'Documenter.get_object_members' and 'ModuleDocumenter.get_object_members' are primary functions for gathering members of an object or module. These functions use settings from 'self.options' to decide which members to include, and 'self.options.inherited_members' controls whether to include inherited members. Since the issue involves imported members, it's crucial to examine how members are classified and filtered in these functions. I will select the code spans that directly relate to this process.",
            "identified_spans": [
              {
                "span_ids": [
                  "Documenter.get_object_members",
                  "ModuleDocumenter.get_object_members"
                ],
                "file_path": "sphinx/ext/autodoc/__init__.py"
              },
              {
                "span_ids": [
                  "get_object_members"
                ],
                "file_path": "sphinx/ext/autodoc/importer.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 2909,
          "output_tokens": 333,
          "retry_message": null,
          "completion_cost": 0.013722000000000002
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context provided contains relevant modules (`sphinx/ext/autodoc/__init__.py` and `sphinx/ext/autodoc/importer.py`) which are key to understanding the autosummary feature in Sphinx. Specifically, the `ModuleDocumenter` class in `__init__.py` and the `get_object_members` function in `importer.py` are crucial as they handle the members to be documented, including the handling of imported members. The issue described suggests a problem in how imported members are included despite the setting `autosummary_imported_members` being set to False. The file context provided seems sufficient to investigate and understand how the current system handles this setting and if there's incorrect inclusion of imported members. Therefore, I believe all necessary relevant code has been identified.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 2905,
          "output_tokens": 209,
          "retry_message": null,
          "completion_cost": 0.011850000000000001
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "ModuleDocumenter.get_object_members",
            "file_path": "sphinx/ext/autodoc/__init__.py",
            "scratch_pad": "The issue involves ensuring that the `members` variable in the template does not include imported members when `autosummary_imported_members` is set to False. The relevant code spans are in `ModuleDocumenter.get_object_members` where the members are gathered. Specifically, imported members are included when `want_all` is True and `__all__` is not present or `ignore_module_all` is set. This needs to be adjusted to respect the `autosummary_imported_members` setting.",
            "instructions": "Modify the `ModuleDocumenter.get_object_members` method to exclude imported members if `autosummary_imported_members` is False."
          },
          "output": {
            "span_id": "ModuleDocumenter.get_object_members",
            "end_line": 896,
            "file_path": "sphinx/ext/autodoc/__init__.py",
            "start_line": 863,
            "instructions": "Modify the `ModuleDocumenter.get_object_members` method to exclude imported members if `autosummary_imported_members` is False."
          },
          "input_tokens": 3934,
          "output_tokens": 214,
          "retry_message": null,
          "completion_cost": 0.015012000000000001
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "ModuleDocumenter.get_object_members",
        "end_line": 896,
        "file_path": "sphinx/ext/autodoc/__init__.py",
        "max_tokens": 1000,
        "start_line": 863,
        "temperature": 1.6,
        "instructions": "Modify the `ModuleDocumenter.get_object_members` method to exclude imported members if `autosummary_imported_members` is False.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```python\n<replace>\n    def get_object_members(self, want_all: bool) -> Tuple[bool, List[Tuple[str, Any]]]:\n        if want_all:\n            if (self.options.ignore_module_all or not\n                    hasattr(self.object, '__all__')):\n                # for implicit module members, check __module__ to avoid\n                # documenting imported objects\n                return True, get_module_members(self.object)\n            else:\n                memberlist = self.object.__all__\n                # Sometimes __all__ is broken...\n                if not isinstance(memberlist, (list, tuple)) or not \\\n                   all(isinstance(entry, str) for entry in memberlist):\n                    logger.warning(\n                        __('__all__ should be a list of strings, not %r '\n                           '(in module %s) -- ignoring __all__') %\n                        (memberlist, self.fullname),\n                        type='autodoc'\n                    )\n                    # fall back to all members\n                    return True, get_module_members(self.object)\n        else:\n            memberlist = self.options.members or []\n        ret = []\n        for mname in memberlist:\n            try:\n                if not self.options.imported_members and not is_defined_in_obj(self.object, mname):\n                    continue\n                ret.append((mname, safe_getattr(self.object, mname)))\n            except AttributeError:\n                logger.warning(\n                    __('missing attribute mentioned in :members: or __all__: '\n                       'module %s, attribute %s') %\n                    (safe_getattr(self.object, '__name__', '???'), mname),\n                    type='autodoc'\n                )\n        return False, ret\n</replace>"
          },
          "output": {
            "diff": "--- sphinx/ext/autodoc/__init__.py\n+++ sphinx/ext/autodoc/__init__.py\n@@ -885,6 +885,8 @@\n         ret = []\n         for mname in memberlist:\n             try:\n+                if not self.options.imported_members and not is_defined_in_obj(self.object, mname):\n+                    continue\n                 ret.append((mname, safe_getattr(self.object, mname)))\n             except AttributeError:\n                 logger.warning(\n",
            "message": "Applied the change to sphinx/ext/autodoc/__init__.py.\n\n<scratch_pad>\n```python\n</scratch_pad>",
            "verification_errors": [
              {
                "code": "E0602",
                "line": 888,
                "message": "Undefined variable 'is_defined_in_obj'",
                "file_path": "sphinx/ext/autodoc/__init__.py"
              }
            ]
          },
          "input_tokens": 4430,
          "output_tokens": 421,
          "retry_message": null,
          "completion_cost": 0.019605
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sphinx/ext/autodoc/__init__.py\n+++ sphinx/ext/autodoc/__init__.py\n@@ -885,6 +885,8 @@\n         ret = []\n         for mname in memberlist:\n             try:\n+                if not self.options.imported_members and not is_defined_in_obj(self.object, mname):\n+                    continue\n                 ret.append((mname, safe_getattr(self.object, mname)))\n             except AttributeError:\n                 logger.warning(\n",
        "model": "deepseek-coder",
        "message": "Applied the change to sphinx/ext/autodoc/__init__.py.\n\n<scratch_pad>\n```python\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [
          {
            "code": "E0602",
            "line": 888,
            "message": "Undefined variable 'is_defined_in_obj'",
            "file_path": "sphinx/ext/autodoc/__init__.py"
          }
        ],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "Documenter",
            "file_path": "sphinx/ext/autodoc/__init__.py",
            "scratch_pad": "The lint error indicates that the variable `is_defined_in_obj` is not defined in the current scope. This function is necessary to determine if a member is defined within the object and not imported. We need to define this function before using it in `ModuleDocumenter.get_object_members`.",
            "instructions": "Define the `is_defined_in_obj` function to check if a member is defined within the object and not imported. Place it in the appropriate scope within `sphinx/ext/autodoc/__init__.py`."
          },
          "output": {
            "span_id": "Documenter",
            "file_path": "sphinx/ext/autodoc/__init__.py",
            "instructions": "Define the `is_defined_in_obj` function to check if a member is defined within the object and not imported. Place it in the appropriate scope within `sphinx/ext/autodoc/__init__.py`."
          },
          "input_tokens": 4422,
          "output_tokens": 185,
          "retry_message": null,
          "completion_cost": 0.016041
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "Documenter",
        "end_line": null,
        "file_path": "sphinx/ext/autodoc/__init__.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Define the `is_defined_in_obj` function to check if a member is defined within the object and not imported. Place it in the appropriate scope within `sphinx/ext/autodoc/__init__.py`.\n\nThe function `is_defined_in_obj` should be defined within the `Documenter` class to encapsulate its functionality. This function will help in checking if a member is defined within the object and not imported. Therefore, it should be placed within the class definition, ideally near other utility functions.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 230,
            "start_line": 230,
            "scratch_pad": "The function `is_defined_in_obj` should be defined within the `Documenter` class to encapsulate its functionality. This function will help in checking if a member is defined within the object and not imported. Therefore, it should be placed within the class definition, ideally near other utility functions."
          },
          "output": {
            "span_id": "Documenter",
            "end_line": 234,
            "file_path": "sphinx/ext/autodoc/__init__.py",
            "start_line": 226,
            "instructions": "Define the `is_defined_in_obj` function to check if a member is defined within the object and not imported. Place it in the appropriate scope within `sphinx/ext/autodoc/__init__.py`.\n\nThe function `is_defined_in_obj` should be defined within the `Documenter` class to encapsulate its functionality. This function will help in checking if a member is defined within the object and not imported. Therefore, it should be placed within the class definition, ideally near other utility functions."
          },
          "input_tokens": 1795,
          "output_tokens": 101,
          "retry_message": null,
          "completion_cost": 0.0069
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "Documenter",
        "end_line": 234,
        "file_path": "sphinx/ext/autodoc/__init__.py",
        "max_tokens": 1000,
        "start_line": 226,
        "temperature": 1.6,
        "instructions": "Define the `is_defined_in_obj` function to check if a member is defined within the object and not imported. Place it in the appropriate scope within `sphinx/ext/autodoc/__init__.py`.\n\nThe function `is_defined_in_obj` should be defined within the `Documenter` class to encapsulate its functionality. This function will help in checking if a member is defined within the object and not imported. Therefore, it should be placed within the class definition, ideally near other utility functions.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n    member_order = 0\n    #: true if the generated content may contain titles\n    titles_allowed = False\n\n    option_spec = {'noindex': bool_option}  # type: Dict[str, Callable]\n\n    def get_attr(self, obj: Any, name: str, *defargs: Any) -> Any:\n        \"\"\"getattr() override for types such as Zope interfaces.\"\"\"\n        return autodoc_attrgetter(self.env.app, obj, name, *defargs)\n\n    def is_defined_in_obj(self, obj: Any, member_name: str) -> bool:\n        \"\"\"Check if a member is defined within the object and not imported.\"\"\"\n        if hasattr(obj, '__module__') and hasattr(obj, '__name__'):\n            module = sys.modules.get(obj.__module__)\n            if module:\n                member = getattr(obj, member_name, None)\n                if member:\n                    return getattr(member, '__module__', None) == obj.__module__\n        return False\n</replace>"
          },
          "output": {
            "diff": "--- sphinx/ext/autodoc/__init__.py\n+++ sphinx/ext/autodoc/__init__.py\n@@ -232,6 +232,16 @@\n     def get_attr(self, obj: Any, name: str, *defargs: Any) -> Any:\n         \"\"\"getattr() override for types such as Zope interfaces.\"\"\"\n         return autodoc_attrgetter(self.env.app, obj, name, *defargs)\n+\n+    def is_defined_in_obj(self, obj: Any, member_name: str) -> bool:\n+        \"\"\"Check if a member is defined within the object and not imported.\"\"\"\n+        if hasattr(obj, '__module__') and hasattr(obj, '__name__'):\n+            module = sys.modules.get(obj.__module__)\n+            if module:\n+                member = getattr(obj, member_name, None)\n+                if member:\n+                    return getattr(member, '__module__', None) == obj.__module__\n+        return False\n \n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n",
            "message": "Applied the change to sphinx/ext/autodoc/__init__.py.",
            "verification_errors": [
              {
                "code": "E0602",
                "line": 239,
                "message": "Undefined variable 'sys'",
                "file_path": "sphinx/ext/autodoc/__init__.py"
              }
            ]
          },
          "input_tokens": 4277,
          "output_tokens": 247,
          "retry_message": null,
          "completion_cost": 0.016536000000000002
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sphinx/ext/autodoc/__init__.py\n+++ sphinx/ext/autodoc/__init__.py\n@@ -232,6 +232,16 @@\n     def get_attr(self, obj: Any, name: str, *defargs: Any) -> Any:\n         \"\"\"getattr() override for types such as Zope interfaces.\"\"\"\n         return autodoc_attrgetter(self.env.app, obj, name, *defargs)\n+\n+    def is_defined_in_obj(self, obj: Any, member_name: str) -> bool:\n+        \"\"\"Check if a member is defined within the object and not imported.\"\"\"\n+        if hasattr(obj, '__module__') and hasattr(obj, '__name__'):\n+            module = sys.modules.get(obj.__module__)\n+            if module:\n+                member = getattr(obj, member_name, None)\n+                if member:\n+                    return getattr(member, '__module__', None) == obj.__module__\n+        return False\n \n     @classmethod\n     def can_document_member(cls, member: Any, membername: str, isattr: bool, parent: Any\n",
        "model": "deepseek-coder",
        "message": "Applied the change to sphinx/ext/autodoc/__init__.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [
          {
            "code": "E0602",
            "line": 239,
            "message": "Undefined variable 'sys'",
            "file_path": "sphinx/ext/autodoc/__init__.py"
          }
        ],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "top",
            "file_path": "sphinx/ext/autodoc/__init__.py",
            "scratch_pad": "The lint error indicates that the variable 'sys' is not defined in the scope where it is being used. We need to import the 'sys' module at the beginning of the file to resolve this issue.",
            "instructions": "Import the 'sys' module at the beginning of 'sphinx/ext/autodoc/__init__.py'."
          },
          "output": null,
          "input_tokens": 5094,
          "output_tokens": 139,
          "retry_message": "Span not found: top. Available spans: ModuleDocumenter.get_object_members, Documenter.get_object_members, ModuleDocumenter.__init__, ModuleDocumenter, Documenter.__init__, Documenter, merge_special_members_option, setup, ModuleLevelDocumenter, ClassLevelDocumenter, Documenter.is_defined_in_obj",
          "completion_cost": 0.017367
        },
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "import_sys",
            "file_path": "sphinx/ext/autodoc/__init__.py",
            "scratch_pad": "I apologize for the confusion. The 'top' span doesn't exist, but the import statement for the 'sys' module should be placed at the beginning of the file, outside any specific span. I will provide the correct location for this import.",
            "instructions": "Place the import statement 'import sys' at the top of 'sphinx/ext/autodoc/__init__.py', before any other code."
          },
          "output": null,
          "input_tokens": 5316,
          "output_tokens": 156,
          "retry_message": "Span not found: import_sys. Available spans: ModuleDocumenter.get_object_members, Documenter.get_object_members, ModuleDocumenter.__init__, ModuleDocumenter, Documenter.__init__, Documenter, merge_special_members_option, setup, ModuleLevelDocumenter, ClassLevelDocumenter, Documenter.is_defined_in_obj",
          "completion_cost": 0.018288
        },
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": null,
            "file_path": "sphinx/ext/autodoc/__init__.py",
            "scratch_pad": "I apologize for the confusion. The 'import_sys' span doesn't exist, but the import statement for the 'sys' module should be placed at the beginning of the file, outside any specific span. I will provide the correct location for this import.",
            "instructions": "Place the import statement 'import sys' at the top of 'sphinx/ext/autodoc/__init__.py', before any other code."
          },
          "output": null,
          "input_tokens": 5557,
          "output_tokens": 155,
          "retry_message": "You must either provide an apply_change action or finish.",
          "completion_cost": 0.018996000000000002
        }
      ]
    }
  ],
  "initial_message": "autosummary: The members variable for module template contains imported members\n**Describe the bug**\r\nautosummary: The members variable for module template contains imported members even if autosummary_imported_members is False.\r\n\r\n**To Reproduce**\r\n\r\n```\r\n# _templates/autosummary/module.rst\r\n{{ fullname | escape | underline }}\r\n\r\n.. automodule:: {{ fullname }}\r\n\r\n   .. autosummary::\r\n   {% for item in members %}\r\n      {{ item }}\r\n   {%- endfor %}\r\n\r\n```\r\n```\r\n# example.py\r\nimport os\r\n```\r\n```\r\n# index.rst\r\n.. autosummary::\r\n   :toctree: generated\r\n\r\n   example\r\n```\r\n```\r\n# conf.py\r\nautosummary_generate = True\r\nautosummary_imported_members = False\r\n```\r\n\r\nAs a result, I got following output:\r\n```\r\n# generated/example.rst\r\nexample\r\n=======\r\n\r\n.. automodule:: example\r\n\r\n   .. autosummary::\r\n\r\n      __builtins__\r\n      __cached__\r\n      __doc__\r\n      __file__\r\n      __loader__\r\n      __name__\r\n      __package__\r\n      __spec__\r\n      os\r\n```\r\n\r\n**Expected behavior**\r\nThe template variable `members` should not contain imported members when `autosummary_imported_members` is False.\r\n\r\n**Your project**\r\nNo\r\n\r\n**Screenshots**\r\nNo\r\n\r\n**Environment info**\r\n- OS: Mac\r\n- Python version: 3.8.2\r\n- Sphinx version: 3.1.0dev\r\n- Sphinx extensions:  sphinx.ext.autosummary\r\n- Extra tools: No\r\n\r\n**Additional context**\r\nNo\r\n\n"
}