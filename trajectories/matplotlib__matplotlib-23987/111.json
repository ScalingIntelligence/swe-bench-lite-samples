{
  "info": {
    "duration": 141.26272583007812,
    "submission": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 5bbb786984..dda4635a0c 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -2426,13 +2426,15 @@ class Figure(FigureBase):\n             if isinstance(tight_layout, dict):\n                 self.get_layout_engine().set(**tight_layout)\n         elif constrained_layout is not None:\n-            self.set_layout_engine(layout='constrained')\n-            if isinstance(constrained_layout, dict):\n-                self.get_layout_engine().set(**constrained_layout)\n+            if constrained_layout is False:\n+                self.set_layout_engine(layout=None)\n+            else:\n+                self.set_layout_engine(layout='constrained')\n+                if isinstance(constrained_layout, dict):\n+                    self.get_layout_engine().set(**constrained_layout)\n         else:\n             # everything is None, so use default:\n             self.set_layout_engine(layout=layout)\n-\n         self._fig_callbacks = cbook.CallbackRegistry(signals=[\"dpi_changed\"])\n         # Callbacks traditionally associated with the canvas (and exposed with\n         # a proxy property), but that actually need to be on the figure for\n",
    "total_cost": 0.13185900000000003,
    "instance_id": "matplotlib__matplotlib-23987",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "I need to focus on the 'lib/matplotlib' directory because it holds the main packages that are most likely to contain the relevant code. The issue specifically mentions 'constrained_layout' being the cause of UserWarnings from functions like 'tight_layout' or 'subplots_adjust'. I should specifically look for occurrences of these functions and related logic surrounding 'constrained_layout'.",
            "search_requests": [
              {
                "query": "constrained_layout incompatiblity",
                "class_names": [
                  "Figure",
                  "FigureBase",
                  "SubFigure"
                ],
                "code_snippet": "plt.subplots_adjust",
                "file_pattern": "**/lib/matplotlib/**/*.py",
                "function_names": [
                  "subplots_adjust",
                  "tight_layout",
                  "_check_layout_engines_compat",
                  "set_constrained_layout",
                  "set_layout_engine"
                ]
              }
            ]
          },
          "output": null,
          "input_tokens": 3865,
          "output_tokens": 223,
          "retry_message": "\n\nUnfortunately, I didn\u2019t find any relevant results.",
          "completion_cost": 0.014940000000000002
        },
        {
          "action": {
            "complete": false,
            "scratch_pad": "Since the initial search didn't yield results, it might be helpful to broaden the search by focusing on the key terms and issues mentioned without pinpointing specific files or class names. We should look more generally for code related to 'constrained_layout', 'tight_layout', and 'subplots_adjust', as well as any warnings or errors associated with them, possibly across different modules within 'matplotlib'.",
            "search_requests": [
              {
                "query": "UserWarning relating to constrained_layout and subplots_adjust",
                "class_names": [],
                "code_snippet": "constrained_layout=False",
                "file_pattern": "**/lib/matplotlib/**/*.py",
                "function_names": []
              }
            ]
          },
          "output": null,
          "input_tokens": 4130,
          "output_tokens": 172,
          "retry_message": "\n\nUnfortunately, I didn\u2019t find any relevant results.",
          "completion_cost": 0.01497
        },
        {
          "action": {
            "complete": false,
            "scratch_pad": "Given that the broadened search also didn't provide results, it might be useful to narrow down the search again by looking specifically at the methods involved in handling layout engines and layouts within the files already examined. This should include the 'set_layout_engine', 'get_constrained_layout', and deprecated methods like 'set_constrained_layout', since they are central to configuring how plots are laid out and might be related to the issue. Additionally, since code examples often copy real-world behaviors, review 'tutorials' and 'examples' for related content.",
            "search_requests": [
              {
                "query": "Handling of constrained_layout false condition",
                "class_names": [
                  "Figure",
                  "FigureBase",
                  "SubFigure"
                ],
                "code_snippet": "set_constrained_layout",
                "file_pattern": "**/lib/matplotlib/**/*.py",
                "function_names": [
                  "set_layout_engine",
                  "get_constrained_layout",
                  "set_constrained_layout"
                ]
              },
              {
                "query": "constrained_layout=False",
                "class_names": [],
                "code_snippet": "",
                "file_pattern": "**/tutorials/**/*.py",
                "function_names": []
              },
              {
                "query": "constrained_layout=False",
                "class_names": [],
                "code_snippet": "",
                "file_pattern": "**/examples/**/*.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 243,
                "span_id": "Figure.set_constrained_layout",
                "file_path": "lib/matplotlib/figure.py"
              },
              {
                "rank": 1,
                "tokens": 313,
                "span_id": "Figure.set_constrained_layout_pads",
                "file_path": "lib/matplotlib/figure.py"
              },
              {
                "rank": 2,
                "tokens": 94,
                "span_id": "Figure.execute_constrained_layout",
                "file_path": "lib/matplotlib/figure.py"
              },
              {
                "rank": 2,
                "tokens": 127,
                "span_id": "Figure.waitforbuttonpress",
                "file_path": "lib/matplotlib/figure.py"
              },
              {
                "rank": 0,
                "tokens": 604,
                "span_id": "impl:24",
                "file_path": "tutorials/intermediate/constrainedlayout_guide.py"
              },
              {
                "rank": 0,
                "tokens": 527,
                "span_id": "impl:48",
                "file_path": "tutorials/intermediate/constrainedlayout_guide.py"
              },
              {
                "rank": 0,
                "tokens": 506,
                "span_id": "impl:4",
                "file_path": "tutorials/intermediate/constrainedlayout_guide.py"
              },
              {
                "rank": 1,
                "tokens": 500,
                "span_id": "impl:249",
                "file_path": "tutorials/intermediate/constrainedlayout_guide.py"
              },
              {
                "rank": 1,
                "tokens": 978,
                "span_id": "impl:222",
                "file_path": "tutorials/intermediate/constrainedlayout_guide.py"
              },
              {
                "rank": 2,
                "tokens": 492,
                "span_id": "impl:164",
                "file_path": "tutorials/intermediate/constrainedlayout_guide.py"
              },
              {
                "rank": 2,
                "tokens": 507,
                "span_id": "impl:202",
                "file_path": "tutorials/intermediate/constrainedlayout_guide.py"
              },
              {
                "rank": 3,
                "tokens": 500,
                "span_id": "impl:115",
                "file_path": "tutorials/intermediate/constrainedlayout_guide.py"
              },
              {
                "rank": 4,
                "tokens": 550,
                "span_id": "impl:73",
                "file_path": "tutorials/intermediate/constrainedlayout_guide.py"
              },
              {
                "rank": 0,
                "tokens": 149,
                "span_id": "docstring",
                "file_path": "examples/axes_grid1/parasite_simple.py"
              },
              {
                "rank": 1,
                "tokens": 275,
                "span_id": "impl",
                "file_path": "examples/subplots_axes_and_figures/demo_constrained_layout.py"
              },
              {
                "rank": 1,
                "tokens": 61,
                "span_id": "example_plot",
                "file_path": "examples/subplots_axes_and_figures/demo_constrained_layout.py"
              },
              {
                "rank": 1,
                "tokens": 85,
                "span_id": "docstring",
                "file_path": "examples/subplots_axes_and_figures/demo_constrained_layout.py"
              },
              {
                "rank": 2,
                "tokens": 228,
                "span_id": "impl:71",
                "file_path": "examples/subplots_axes_and_figures/demo_tight_layout.py"
              },
              {
                "rank": 4,
                "tokens": 110,
                "span_id": "docstring",
                "file_path": "examples/subplots_axes_and_figures/demo_tight_layout.py"
              },
              {
                "rank": 4,
                "tokens": 53,
                "span_id": "example_plot",
                "file_path": "examples/subplots_axes_and_figures/demo_tight_layout.py"
              },
              {
                "rank": 4,
                "tokens": 477,
                "span_id": "impl:3",
                "file_path": "examples/subplots_axes_and_figures/demo_tight_layout.py"
              },
              {
                "rank": 3,
                "tokens": 343,
                "span_id": "docstring:16",
                "file_path": "examples/subplots_axes_and_figures/colorbar_placement.py"
              }
            ],
            "search_requests": [
              {
                "query": "Handling of constrained_layout false condition",
                "class_names": [
                  "Figure",
                  "FigureBase",
                  "SubFigure"
                ],
                "code_snippet": "set_constrained_layout",
                "file_pattern": "**/lib/matplotlib/**/*.py",
                "function_names": [
                  "set_layout_engine",
                  "get_constrained_layout",
                  "set_constrained_layout"
                ]
              },
              {
                "query": "constrained_layout=False",
                "class_names": [],
                "code_snippet": "",
                "file_pattern": "**/tutorials/**/*.py",
                "function_names": []
              },
              {
                "query": "constrained_layout=False",
                "class_names": [],
                "code_snippet": "",
                "file_pattern": "**/examples/**/*.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 4336,
          "output_tokens": 356,
          "retry_message": null,
          "completion_cost": 0.018348
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 243,
            "span_id": "Figure.set_constrained_layout",
            "file_path": "lib/matplotlib/figure.py"
          },
          {
            "rank": 0,
            "tokens": 604,
            "span_id": "impl:24",
            "file_path": "tutorials/intermediate/constrainedlayout_guide.py"
          },
          {
            "rank": 0,
            "tokens": 527,
            "span_id": "impl:48",
            "file_path": "tutorials/intermediate/constrainedlayout_guide.py"
          },
          {
            "rank": 0,
            "tokens": 506,
            "span_id": "impl:4",
            "file_path": "tutorials/intermediate/constrainedlayout_guide.py"
          },
          {
            "rank": 0,
            "tokens": 149,
            "span_id": "docstring",
            "file_path": "examples/axes_grid1/parasite_simple.py"
          },
          {
            "rank": 1,
            "tokens": 313,
            "span_id": "Figure.set_constrained_layout_pads",
            "file_path": "lib/matplotlib/figure.py"
          },
          {
            "rank": 1,
            "tokens": 500,
            "span_id": "impl:249",
            "file_path": "tutorials/intermediate/constrainedlayout_guide.py"
          },
          {
            "rank": 1,
            "tokens": 978,
            "span_id": "impl:222",
            "file_path": "tutorials/intermediate/constrainedlayout_guide.py"
          },
          {
            "rank": 1,
            "tokens": 275,
            "span_id": "impl",
            "file_path": "examples/subplots_axes_and_figures/demo_constrained_layout.py"
          },
          {
            "rank": 1,
            "tokens": 61,
            "span_id": "example_plot",
            "file_path": "examples/subplots_axes_and_figures/demo_constrained_layout.py"
          },
          {
            "rank": 1,
            "tokens": 85,
            "span_id": "docstring",
            "file_path": "examples/subplots_axes_and_figures/demo_constrained_layout.py"
          },
          {
            "rank": 2,
            "tokens": 94,
            "span_id": "Figure.execute_constrained_layout",
            "file_path": "lib/matplotlib/figure.py"
          },
          {
            "rank": 2,
            "tokens": 127,
            "span_id": "Figure.waitforbuttonpress",
            "file_path": "lib/matplotlib/figure.py"
          },
          {
            "rank": 2,
            "tokens": 492,
            "span_id": "impl:164",
            "file_path": "tutorials/intermediate/constrainedlayout_guide.py"
          },
          {
            "rank": 2,
            "tokens": 507,
            "span_id": "impl:202",
            "file_path": "tutorials/intermediate/constrainedlayout_guide.py"
          },
          {
            "rank": 2,
            "tokens": 228,
            "span_id": "impl:71",
            "file_path": "examples/subplots_axes_and_figures/demo_tight_layout.py"
          },
          {
            "rank": 3,
            "tokens": 500,
            "span_id": "impl:115",
            "file_path": "tutorials/intermediate/constrainedlayout_guide.py"
          },
          {
            "rank": 3,
            "tokens": 343,
            "span_id": "docstring:16",
            "file_path": "examples/subplots_axes_and_figures/colorbar_placement.py"
          },
          {
            "rank": 4,
            "tokens": 550,
            "span_id": "impl:73",
            "file_path": "tutorials/intermediate/constrainedlayout_guide.py"
          },
          {
            "rank": 4,
            "tokens": 110,
            "span_id": "docstring",
            "file_path": "examples/subplots_axes_and_figures/demo_tight_layout.py"
          },
          {
            "rank": 4,
            "tokens": 53,
            "span_id": "example_plot",
            "file_path": "examples/subplots_axes_and_figures/demo_tight_layout.py"
          },
          {
            "rank": 4,
            "tokens": 477,
            "span_id": "impl:3",
            "file_path": "examples/subplots_axes_and_figures/demo_tight_layout.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue concerns a UserWarning being produced when using `plt.subplots_adjust` or `bbox_inches='tight'` in combination with `constrained_layout=False`, despite the expectation that no warning should be produced. The issue seems to be related to the `constrained_layout` functionality in Matplotlib, and the provided search results contain code spans that involve the handling and setting of constrained layout parameters and deprecation warnings. The spans in `lib/matplotlib/figure.py` are particularly relevant as they directly deal with setting the constrained layout, managing parameters, and handling layout adjustments, which are directly related to the reported issue. Therefore, the identified spans from this file are selected as they appear to closely align with the elements mentioned in the bug report. The other files provide additional context and usage examples but do not directly address the issue at hand.",
            "identified_spans": [
              {
                "span_ids": [
                  "Figure.set_constrained_layout",
                  "Figure.set_constrained_layout_pads",
                  "Figure.execute_constrained_layout"
                ],
                "file_path": "lib/matplotlib/figure.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 5314,
          "output_tokens": 274,
          "retry_message": null,
          "completion_cost": 0.020052
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "After analyzing the report and examining the provided file context from lib/matplotlib/figure.py, it is clear that the file contains the relevant code responsible for configuring and managing figure layouts, which is directly related to the reported issue. The specific methods like __init__ for initializing figure settings, set_layout_engine for configuring layout engines, and even the deprecated methods for handling constrained layouts provide ample context to understand how layout settings are controlled, including handling situations where 'tight_layout' and 'constrained_layout' settings are involved. Therefore, there is sufficient context provided to understand and address the compatibility issues related to UserWarning messages when handling layout settings.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 2938,
          "output_tokens": 171,
          "retry_message": null,
          "completion_cost": 0.011379
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "Figure.__init__",
            "file_path": "lib/matplotlib/figure.py",
            "scratch_pad": "The issue arises because even when constrained_layout is set to False, the layout engine is still initialized. We need to ensure that the layout engine is not initialized if constrained_layout is False to prevent the warning.",
            "instructions": "Update the __init__ method to not initialize the layout engine if constrained_layout is explicitly set to False."
          },
          "output": {
            "span_id": "Figure.__init__",
            "file_path": "lib/matplotlib/figure.py",
            "instructions": "Update the __init__ method to not initialize the layout engine if constrained_layout is explicitly set to False."
          },
          "input_tokens": 3236,
          "output_tokens": 125,
          "retry_message": null,
          "completion_cost": 0.011583
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "Figure.__init__",
        "end_line": null,
        "file_path": "lib/matplotlib/figure.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Update the __init__ method to not initialize the layout engine if constrained_layout is explicitly set to False.\n\nThe __init__ method needs to be updated to not initialize the layout engine if constrained_layout is explicitly set to False. This involves modifying the conditional logic that determines whether to set a layout engine based on the value of constrained_layout.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 2435,
            "start_line": 2426,
            "scratch_pad": "The __init__ method needs to be updated to not initialize the layout engine if constrained_layout is explicitly set to False. This involves modifying the conditional logic that determines whether to set a layout engine based on the value of constrained_layout."
          },
          "output": {
            "span_id": "Figure.__init__",
            "end_line": 2435,
            "file_path": "lib/matplotlib/figure.py",
            "start_line": 2426,
            "instructions": "Update the __init__ method to not initialize the layout engine if constrained_layout is explicitly set to False.\n\nThe __init__ method needs to be updated to not initialize the layout engine if constrained_layout is explicitly set to False. This involves modifying the conditional logic that determines whether to set a layout engine based on the value of constrained_layout."
          },
          "input_tokens": 3299,
          "output_tokens": 89,
          "retry_message": null,
          "completion_cost": 0.011231999999999999
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "Figure.__init__",
        "end_line": 2435,
        "file_path": "lib/matplotlib/figure.py",
        "max_tokens": 1000,
        "start_line": 2426,
        "temperature": 1.6,
        "instructions": "Update the __init__ method to not initialize the layout engine if constrained_layout is explicitly set to False.\n\nThe __init__ method needs to be updated to not initialize the layout engine if constrained_layout is explicitly set to False. This involves modifying the conditional logic that determines whether to set a layout engine based on the value of constrained_layout.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n            if isinstance(tight_layout, dict):\n                self.get_layout_engine().set(**tight_layout)\n        elif constrained_layout is not None:\n            if constrained_layout is False:\n                self.set_layout_engine(layout=None)\n            else:\n                self.set_layout_engine(layout='constrained')\n                if isinstance(constrained_layout, dict):\n                    self.get_layout_engine().set(**constrained_layout)\n        else:\n            # everything is None, so use default:\n            self.set_layout_engine(layout=layout)\n</replace>"
          },
          "output": {
            "diff": "--- lib/matplotlib/figure.py\n+++ lib/matplotlib/figure.py\n@@ -2426,13 +2426,15 @@\n             if isinstance(tight_layout, dict):\n                 self.get_layout_engine().set(**tight_layout)\n         elif constrained_layout is not None:\n-            self.set_layout_engine(layout='constrained')\n-            if isinstance(constrained_layout, dict):\n-                self.get_layout_engine().set(**constrained_layout)\n+            if constrained_layout is False:\n+                self.set_layout_engine(layout=None)\n+            else:\n+                self.set_layout_engine(layout='constrained')\n+                if isinstance(constrained_layout, dict):\n+                    self.get_layout_engine().set(**constrained_layout)\n         else:\n             # everything is None, so use default:\n             self.set_layout_engine(layout=layout)\n-\n         self._fig_callbacks = cbook.CallbackRegistry(signals=[\"dpi_changed\"])\n         # Callbacks traditionally associated with the canvas (and exposed with\n         # a proxy property), but that actually need to be on the figure for\n",
            "message": "Applied the change to lib/matplotlib/figure.py.",
            "verification_errors": []
          },
          "input_tokens": 4432,
          "output_tokens": 141,
          "retry_message": null,
          "completion_cost": 0.015411000000000001
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- lib/matplotlib/figure.py\n+++ lib/matplotlib/figure.py\n@@ -2426,13 +2426,15 @@\n             if isinstance(tight_layout, dict):\n                 self.get_layout_engine().set(**tight_layout)\n         elif constrained_layout is not None:\n-            self.set_layout_engine(layout='constrained')\n-            if isinstance(constrained_layout, dict):\n-                self.get_layout_engine().set(**constrained_layout)\n+            if constrained_layout is False:\n+                self.set_layout_engine(layout=None)\n+            else:\n+                self.set_layout_engine(layout='constrained')\n+                if isinstance(constrained_layout, dict):\n+                    self.get_layout_engine().set(**constrained_layout)\n         else:\n             # everything is None, so use default:\n             self.set_layout_engine(layout=layout)\n-\n         self._fig_callbacks = cbook.CallbackRegistry(signals=[\"dpi_changed\"])\n         # Callbacks traditionally associated with the canvas (and exposed with\n         # a proxy property), but that actually need to be on the figure for\n",
        "model": "deepseek-coder",
        "message": "Applied the change to lib/matplotlib/figure.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue has been addressed by ensuring the layout engine is not initialized when constrained_layout is set to False, preventing the UserWarning.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The previous change ensures that the layout engine is not initialized if constrained_layout is explicitly set to False. This addresses the warning issue reported.",
            "instructions": null
          },
          "output": {
            "message": "The issue has been addressed by ensuring the layout engine is not initialized when constrained_layout is set to False, preventing the UserWarning."
          },
          "input_tokens": 4063,
          "output_tokens": 117,
          "retry_message": null,
          "completion_cost": 0.013944
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue has been addressed by ensuring the layout engine is not initialized when constrained_layout is set to False, preventing the UserWarning.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "[Bug]: Constrained layout UserWarning even when False\n### Bug summary\r\n\r\nWhen using layout settings such as `plt.subplots_adjust` or `bbox_inches='tight`, a UserWarning is produced due to incompatibility with constrained_layout, even if constrained_layout = False. This was not the case in previous versions.\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\na = np.linspace(0,2*np.pi,100)\r\nb = np.sin(a)\r\nc = np.cos(a)\r\nfig,ax = plt.subplots(1,2,figsize=(8,2),constrained_layout=False)\r\nax[0].plot(a,b)\r\nax[1].plot(a,c)\r\nplt.subplots_adjust(wspace=0)\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\nThe plot works fine but the warning is generated\r\n\r\n`/var/folders/ss/pfgdfm2x7_s4cyw2v0b_t7q80000gn/T/ipykernel_76923/4170965423.py:7: UserWarning: This figure was using a layout engine that is incompatible with subplots_adjust and/or tight_layout; not calling subplots_adjust.\r\n  plt.subplots_adjust(wspace=0)`\r\n\r\n### Expected outcome\r\n\r\nno warning\r\n\r\n### Additional information\r\n\r\nWarning disappears when constrained_layout=False is removed\r\n\r\n### Operating system\r\n\r\nOS/X\r\n\r\n### Matplotlib Version\r\n\r\n3.6.0\r\n\r\n### Matplotlib Backend\r\n\r\n_No response_\r\n\r\n### Python version\r\n\r\n_No response_\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\nconda\n"
}