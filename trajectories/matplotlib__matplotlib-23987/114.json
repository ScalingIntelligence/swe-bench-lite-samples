{
  "info": {
    "duration": 180.1790418624878,
    "submission": "diff --git a/lib/matplotlib/figure.py b/lib/matplotlib/figure.py\nindex 5bbb786984..d644479525 100644\n--- a/lib/matplotlib/figure.py\n+++ b/lib/matplotlib/figure.py\n@@ -2425,6 +2425,8 @@ class Figure(FigureBase):\n             self.set_layout_engine(layout='tight')\n             if isinstance(tight_layout, dict):\n                 self.get_layout_engine().set(**tight_layout)\n+        elif constrained_layout is False:\n+            self._layout_engine = None\n         elif constrained_layout is not None:\n             self.set_layout_engine(layout='constrained')\n             if isinstance(constrained_layout, dict):\n",
    "total_cost": 0.13190400000000002,
    "instance_id": "matplotlib__matplotlib-23987",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves a UserWarning produced by Matplotlib when using certain layout settings with the constraint_layout set to False. The warning indicates that the figure's layout engine is incompatible with `subplots_adjust` or `tight_layout`. The focus should be on the constraints and layout management in Matplotlib, specifically how they are set and enforced. Given the provided context, we should search for instances where constrained_layout is set and managed, as well as functions related to `subplots_adjust` and `tight_layout`.",
            "search_requests": [
              {
                "query": "constrained_layout=False",
                "class_names": [
                  "Figure",
                  "SubFigure"
                ],
                "code_snippet": "plt.subplots_adjust(wspace=0)",
                "file_pattern": "**/matplotlib/**/*.py",
                "function_names": [
                  "subplots_adjust",
                  "set_constrained_layout",
                  "tight_layout",
                  "_check_layout_engines_compat"
                ]
              }
            ]
          },
          "output": null,
          "input_tokens": 3865,
          "output_tokens": 244,
          "retry_message": "\n\nUnfortunately, I didn\u2019t find any relevant results.",
          "completion_cost": 0.015255000000000001
        },
        {
          "action": {
            "complete": false,
            "scratch_pad": "It seems the initial search parameters might not have been comprehensive enough to find the issue. Let's broaden the search by focusing on the layout engine settings and the interaction between `constrained_layout` and `tight_layout`. We will search for mentions of 'constrained_layout', 'set_constrained_layout', 'tight_layout', and 'subplots_adjust' without specifying a code snippet to see if there's a more general context where these settings interact.",
            "search_requests": [
              {
                "query": "constrained_layout interaction with subplots_adjust or tight_layout",
                "class_names": [
                  "Figure",
                  "SubFigure"
                ],
                "code_snippet": null,
                "file_pattern": "**/matplotlib/**/*.py",
                "function_names": [
                  "subplots_adjust",
                  "set_constrained_layout",
                  "tight_layout"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 44,
                "span_id": "SubFigure.get_constrained_layout",
                "file_path": "lib/matplotlib/figure.py"
              },
              {
                "rank": 0,
                "tokens": 110,
                "span_id": "SubFigure.get_constrained_layout_pads",
                "file_path": "lib/matplotlib/figure.py"
              },
              {
                "rank": 2,
                "tokens": 243,
                "span_id": "Figure.set_constrained_layout",
                "file_path": "lib/matplotlib/figure.py"
              },
              {
                "rank": 3,
                "tokens": 313,
                "span_id": "Figure.set_constrained_layout_pads",
                "file_path": "lib/matplotlib/figure.py"
              },
              {
                "rank": 4,
                "tokens": 215,
                "span_id": "Figure.set_tight_layout",
                "file_path": "lib/matplotlib/figure.py"
              },
              {
                "rank": 4,
                "tokens": 48,
                "span_id": "Figure.get_constrained_layout",
                "file_path": "lib/matplotlib/figure.py"
              },
              {
                "rank": 6,
                "tokens": 360,
                "span_id": "Figure.tight_layout",
                "file_path": "lib/matplotlib/figure.py"
              },
              {
                "rank": 8,
                "tokens": 516,
                "span_id": "Figure.set_layout_engine",
                "file_path": "lib/matplotlib/figure.py"
              },
              {
                "rank": 9,
                "tokens": 350,
                "span_id": "FigureBase.subplots_adjust",
                "file_path": "lib/matplotlib/figure.py"
              },
              {
                "rank": 11,
                "tokens": 34,
                "span_id": "Figure.set_canvas",
                "file_path": "lib/matplotlib/figure.py"
              },
              {
                "rank": 11,
                "tokens": 259,
                "span_id": "Figure.get_constrained_layout_pads",
                "file_path": "lib/matplotlib/figure.py"
              },
              {
                "rank": 17,
                "tokens": 1564,
                "span_id": "Figure.__init__",
                "file_path": "lib/matplotlib/figure.py"
              },
              {
                "rank": 29,
                "tokens": 22,
                "span_id": "Figure.pick",
                "file_path": "lib/matplotlib/figure.py"
              },
              {
                "rank": 39,
                "tokens": 130,
                "span_id": "Figure._check_layout_engines_compat",
                "file_path": "lib/matplotlib/figure.py"
              },
              {
                "rank": 40,
                "tokens": 112,
                "span_id": "Figure._set_dpi",
                "file_path": "lib/matplotlib/figure.py"
              },
              {
                "rank": 40,
                "tokens": 22,
                "span_id": "Figure:7",
                "file_path": "lib/matplotlib/figure.py"
              },
              {
                "rank": 40,
                "tokens": 31,
                "span_id": "Figure.get_tight_layout",
                "file_path": "lib/matplotlib/figure.py"
              },
              {
                "rank": 43,
                "tokens": 94,
                "span_id": "Figure.execute_constrained_layout",
                "file_path": "lib/matplotlib/figure.py"
              },
              {
                "rank": 43,
                "tokens": 127,
                "span_id": "Figure.waitforbuttonpress",
                "file_path": "lib/matplotlib/figure.py"
              },
              {
                "rank": 55,
                "tokens": 272,
                "span_id": "SubFigure._redo_transform_rel_fig",
                "file_path": "lib/matplotlib/figure.py"
              },
              {
                "rank": 57,
                "tokens": 115,
                "span_id": "SubFigure.axes",
                "file_path": "lib/matplotlib/figure.py"
              },
              {
                "rank": 57,
                "tokens": 14,
                "span_id": "SubFigure.get_layout_engine",
                "file_path": "lib/matplotlib/figure.py"
              },
              {
                "rank": 63,
                "tokens": 18,
                "span_id": "SubFigure.dpi_1",
                "file_path": "lib/matplotlib/figure.py"
              },
              {
                "rank": 22,
                "tokens": 285,
                "span_id": "GridSpec.tight_layout",
                "file_path": "lib/matplotlib/gridspec.py"
              },
              {
                "rank": 38,
                "tokens": 78,
                "span_id": "tight_layout",
                "file_path": "lib/matplotlib/pyplot.py"
              },
              {
                "rank": 38,
                "tokens": 95,
                "span_id": "subplots_adjust",
                "file_path": "lib/matplotlib/pyplot.py"
              }
            ],
            "search_requests": [
              {
                "query": "constrained_layout interaction with subplots_adjust or tight_layout",
                "class_names": [
                  "Figure",
                  "SubFigure"
                ],
                "code_snippet": null,
                "file_pattern": "**/matplotlib/**/*.py",
                "function_names": [
                  "subplots_adjust",
                  "set_constrained_layout",
                  "tight_layout"
                ]
              }
            ]
          },
          "input_tokens": 4147,
          "output_tokens": 226,
          "retry_message": null,
          "completion_cost": 0.015831
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 44,
            "span_id": "SubFigure.get_constrained_layout",
            "file_path": "lib/matplotlib/figure.py"
          },
          {
            "rank": 0,
            "tokens": 110,
            "span_id": "SubFigure.get_constrained_layout_pads",
            "file_path": "lib/matplotlib/figure.py"
          },
          {
            "rank": 2,
            "tokens": 243,
            "span_id": "Figure.set_constrained_layout",
            "file_path": "lib/matplotlib/figure.py"
          },
          {
            "rank": 3,
            "tokens": 313,
            "span_id": "Figure.set_constrained_layout_pads",
            "file_path": "lib/matplotlib/figure.py"
          },
          {
            "rank": 4,
            "tokens": 215,
            "span_id": "Figure.set_tight_layout",
            "file_path": "lib/matplotlib/figure.py"
          },
          {
            "rank": 4,
            "tokens": 48,
            "span_id": "Figure.get_constrained_layout",
            "file_path": "lib/matplotlib/figure.py"
          },
          {
            "rank": 6,
            "tokens": 360,
            "span_id": "Figure.tight_layout",
            "file_path": "lib/matplotlib/figure.py"
          },
          {
            "rank": 8,
            "tokens": 516,
            "span_id": "Figure.set_layout_engine",
            "file_path": "lib/matplotlib/figure.py"
          },
          {
            "rank": 9,
            "tokens": 350,
            "span_id": "FigureBase.subplots_adjust",
            "file_path": "lib/matplotlib/figure.py"
          },
          {
            "rank": 11,
            "tokens": 34,
            "span_id": "Figure.set_canvas",
            "file_path": "lib/matplotlib/figure.py"
          },
          {
            "rank": 11,
            "tokens": 259,
            "span_id": "Figure.get_constrained_layout_pads",
            "file_path": "lib/matplotlib/figure.py"
          },
          {
            "rank": 17,
            "tokens": 1564,
            "span_id": "Figure.__init__",
            "file_path": "lib/matplotlib/figure.py"
          },
          {
            "rank": 22,
            "tokens": 285,
            "span_id": "GridSpec.tight_layout",
            "file_path": "lib/matplotlib/gridspec.py"
          },
          {
            "rank": 29,
            "tokens": 22,
            "span_id": "Figure.pick",
            "file_path": "lib/matplotlib/figure.py"
          },
          {
            "rank": 38,
            "tokens": 78,
            "span_id": "tight_layout",
            "file_path": "lib/matplotlib/pyplot.py"
          },
          {
            "rank": 38,
            "tokens": 95,
            "span_id": "subplots_adjust",
            "file_path": "lib/matplotlib/pyplot.py"
          },
          {
            "rank": 39,
            "tokens": 130,
            "span_id": "Figure._check_layout_engines_compat",
            "file_path": "lib/matplotlib/figure.py"
          },
          {
            "rank": 40,
            "tokens": 112,
            "span_id": "Figure._set_dpi",
            "file_path": "lib/matplotlib/figure.py"
          },
          {
            "rank": 40,
            "tokens": 22,
            "span_id": "Figure:7",
            "file_path": "lib/matplotlib/figure.py"
          },
          {
            "rank": 40,
            "tokens": 31,
            "span_id": "Figure.get_tight_layout",
            "file_path": "lib/matplotlib/figure.py"
          },
          {
            "rank": 43,
            "tokens": 94,
            "span_id": "Figure.execute_constrained_layout",
            "file_path": "lib/matplotlib/figure.py"
          },
          {
            "rank": 43,
            "tokens": 127,
            "span_id": "Figure.waitforbuttonpress",
            "file_path": "lib/matplotlib/figure.py"
          },
          {
            "rank": 55,
            "tokens": 272,
            "span_id": "SubFigure._redo_transform_rel_fig",
            "file_path": "lib/matplotlib/figure.py"
          },
          {
            "rank": 57,
            "tokens": 115,
            "span_id": "SubFigure.axes",
            "file_path": "lib/matplotlib/figure.py"
          },
          {
            "rank": 57,
            "tokens": 14,
            "span_id": "SubFigure.get_layout_engine",
            "file_path": "lib/matplotlib/figure.py"
          },
          {
            "rank": 63,
            "tokens": 18,
            "span_id": "SubFigure.dpi_1",
            "file_path": "lib/matplotlib/figure.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue pertains to a UserWarning generated when using layout settings such as `plt.subplots_adjust` or `bbox_inches='tight'`, even when `constrained_layout = False`. The warning indicates that the layout engine is incompatible with `subplots_adjust`. To identify the relevant code, I examined the `lib/matplotlib/figure.py` file, specifically focusing on the `FigureBase` class and its `subplots_adjust` method. This method contains the logic that checks for layout engine compatibility and emits the warning. The `Figure` class also includes methods related to layout engines and constrained layout settings. Additionally, I looked at the `lib/matplotlib/pyplot.py` file to confirm the presence of the `subplots_adjust` method, which calls the corresponding method in the `Figure` class. Given this analysis, the relevant code spans include those related to the `subplots_adjust` method and layout engine handling in the `FigureBase` and `Figure` classes.",
            "identified_spans": [
              {
                "span_ids": [
                  "FigureBase.subplots_adjust",
                  "Figure.__init__",
                  "Figure.set_layout_engine",
                  "Figure.get_constrained_layout",
                  "Figure.set_constrained_layout",
                  "Figure.get_layout_engine"
                ],
                "file_path": "lib/matplotlib/figure.py"
              },
              {
                "span_ids": [
                  "subplots_adjust"
                ],
                "file_path": "lib/matplotlib/pyplot.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4706,
          "output_tokens": 378,
          "retry_message": null,
          "completion_cost": 0.019788
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context provided contains relevant code related to the layout engine settings in the `plt.subplots_adjust` method, and it directly addresses the issue of compatibility warnings between `constrained_layout` and `subplots_adjust`. The `subplots_adjust` method includes a warning when the layout engine is incompatible, which matches the reported behavior. Additionally, the `set_layout_engine`, `get_layout_engine`, and other methods for managing layout engines are present, which suggests that all relevant code for managing and handling layout engine settings, including compatibility checks and warnings, have been identified. Therefore, based on the provided context, I believe the relevant file context for addressing the reported issue has been identified.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 3734,
          "output_tokens": 184,
          "retry_message": null,
          "completion_cost": 0.013962
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "Figure.__init__",
            "file_path": "lib/matplotlib/figure.py",
            "scratch_pad": "The issue involves a UserWarning being generated even when constrained_layout is set to False. The warning occurs in the `subplots_adjust` method of the `FigureBase` class because it checks the layout engine and its compatibility. The solution involves ensuring that when constrained_layout is explicitly set to False, the layout engine is not set to 'constrained' or 'tight', thereby avoiding the warning.",
            "instructions": "Update the `__init__` method of the `Figure` class to ensure that when constrained_layout is explicitly set to False, the layout engine is not set to 'constrained' or 'tight'. This change will involve modifying the condition that sets the layout engine based on the constrained_layout parameter."
          },
          "output": {
            "span_id": "Figure.__init__",
            "file_path": "lib/matplotlib/figure.py",
            "instructions": "Update the `__init__` method of the `Figure` class to ensure that when constrained_layout is explicitly set to False, the layout engine is not set to 'constrained' or 'tight'. This change will involve modifying the condition that sets the layout engine based on the constrained_layout parameter."
          },
          "input_tokens": 4295,
          "output_tokens": 189,
          "retry_message": null,
          "completion_cost": 0.01572
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "Figure.__init__",
        "end_line": null,
        "file_path": "lib/matplotlib/figure.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Update the `__init__` method of the `Figure` class to ensure that when constrained_layout is explicitly set to False, the layout engine is not set to 'constrained' or 'tight'. This change will involve modifying the condition that sets the layout engine based on the constrained_layout parameter.\n\nThe condition that needs modification is related to the constrained_layout parameter and how it sets the layout engine. Specifically, the code needs to ensure that when constrained_layout is explicitly set to False, the layout engine is not set to 'constrained' or 'tight'. The relevant lines are those that check the value of constrained_layout and set the layout engine accordingly.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 2432,
            "start_line": 2429,
            "scratch_pad": "The condition that needs modification is related to the constrained_layout parameter and how it sets the layout engine. Specifically, the code needs to ensure that when constrained_layout is explicitly set to False, the layout engine is not set to 'constrained' or 'tight'. The relevant lines are those that check the value of constrained_layout and set the layout engine accordingly."
          },
          "output": {
            "span_id": "Figure.__init__",
            "end_line": 2436,
            "file_path": "lib/matplotlib/figure.py",
            "start_line": 2425,
            "instructions": "Update the `__init__` method of the `Figure` class to ensure that when constrained_layout is explicitly set to False, the layout engine is not set to 'constrained' or 'tight'. This change will involve modifying the condition that sets the layout engine based on the constrained_layout parameter.\n\nThe condition that needs modification is related to the constrained_layout parameter and how it sets the layout engine. Specifically, the code needs to ensure that when constrained_layout is explicitly set to False, the layout engine is not set to 'constrained' or 'tight'. The relevant lines are those that check the value of constrained_layout and set the layout engine accordingly."
          },
          "input_tokens": 3338,
          "output_tokens": 121,
          "retry_message": null,
          "completion_cost": 0.011829000000000001
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "Figure.__init__",
        "end_line": 2436,
        "file_path": "lib/matplotlib/figure.py",
        "max_tokens": 1000,
        "start_line": 2425,
        "temperature": 1.6,
        "instructions": "Update the `__init__` method of the `Figure` class to ensure that when constrained_layout is explicitly set to False, the layout engine is not set to 'constrained' or 'tight'. This change will involve modifying the condition that sets the layout engine based on the constrained_layout parameter.\n\nThe condition that needs modification is related to the constrained_layout parameter and how it sets the layout engine. Specifically, the code needs to ensure that when constrained_layout is explicitly set to False, the layout engine is not set to 'constrained' or 'tight'. The relevant lines are those that check the value of constrained_layout and set the layout engine accordingly.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```python\n<replace>\n            self.set_layout_engine(layout='tight')\n            if isinstance(tight_layout, dict):\n                self.get_layout_engine().set(**tight_layout)\n        elif constrained_layout is False:\n            self._layout_engine = None\n        elif constrained_layout is not None:\n            self.set_layout_engine(layout='constrained')\n            if isinstance(constrained_layout, dict):\n                self.get_layout_engine().set(**constrained_layout)\n        else:\n            # everything is None, so use default:\n            self.set_layout_engine(layout=layout)\n\n        self._fig_callbacks = cbook.CallbackRegistry(signals=[\"dpi_changed\"])\n</replace>"
          },
          "output": {
            "diff": "--- lib/matplotlib/figure.py\n+++ lib/matplotlib/figure.py\n@@ -2425,6 +2425,8 @@\n             self.set_layout_engine(layout='tight')\n             if isinstance(tight_layout, dict):\n                 self.get_layout_engine().set(**tight_layout)\n+        elif constrained_layout is False:\n+            self._layout_engine = None\n         elif constrained_layout is not None:\n             self.set_layout_engine(layout='constrained')\n             if isinstance(constrained_layout, dict):\n",
            "message": "Applied the change to lib/matplotlib/figure.py.\n\n<scratch_pad>\n```python\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 6298,
          "output_tokens": 171,
          "retry_message": null,
          "completion_cost": 0.021459000000000002
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- lib/matplotlib/figure.py\n+++ lib/matplotlib/figure.py\n@@ -2425,6 +2425,8 @@\n             self.set_layout_engine(layout='tight')\n             if isinstance(tight_layout, dict):\n                 self.get_layout_engine().set(**tight_layout)\n+        elif constrained_layout is False:\n+            self._layout_engine = None\n         elif constrained_layout is not None:\n             self.set_layout_engine(layout='constrained')\n             if isinstance(constrained_layout, dict):\n",
        "model": "deepseek-coder",
        "message": "Applied the change to lib/matplotlib/figure.py.\n\n<scratch_pad>\n```python\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue has been resolved by ensuring that when `constrained_layout` is set to False, the layout engine is not set, which prevents the generation of the UserWarning related to layout engine incompatibility.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The change to the `Figure` class's `__init__` method has been successfully applied. The update ensures that when `constrained_layout` is explicitly set to False, the layout engine is not set to 'constrained' or 'tight', thereby avoiding the UserWarning. The updated method now includes an additional condition to handle this scenario explicitly.",
            "instructions": null
          },
          "output": {
            "message": "The issue has been resolved by ensuring that when `constrained_layout` is set to False, the layout engine is not set, which prevents the generation of the UserWarning related to layout engine incompatibility."
          },
          "input_tokens": 5155,
          "output_tokens": 173,
          "retry_message": null,
          "completion_cost": 0.01806
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue has been resolved by ensuring that when `constrained_layout` is set to False, the layout engine is not set, which prevents the generation of the UserWarning related to layout engine incompatibility.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "[Bug]: Constrained layout UserWarning even when False\n### Bug summary\r\n\r\nWhen using layout settings such as `plt.subplots_adjust` or `bbox_inches='tight`, a UserWarning is produced due to incompatibility with constrained_layout, even if constrained_layout = False. This was not the case in previous versions.\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport matplotlib.pyplot as plt\r\nimport numpy as np\r\na = np.linspace(0,2*np.pi,100)\r\nb = np.sin(a)\r\nc = np.cos(a)\r\nfig,ax = plt.subplots(1,2,figsize=(8,2),constrained_layout=False)\r\nax[0].plot(a,b)\r\nax[1].plot(a,c)\r\nplt.subplots_adjust(wspace=0)\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\nThe plot works fine but the warning is generated\r\n\r\n`/var/folders/ss/pfgdfm2x7_s4cyw2v0b_t7q80000gn/T/ipykernel_76923/4170965423.py:7: UserWarning: This figure was using a layout engine that is incompatible with subplots_adjust and/or tight_layout; not calling subplots_adjust.\r\n  plt.subplots_adjust(wspace=0)`\r\n\r\n### Expected outcome\r\n\r\nno warning\r\n\r\n### Additional information\r\n\r\nWarning disappears when constrained_layout=False is removed\r\n\r\n### Operating system\r\n\r\nOS/X\r\n\r\n### Matplotlib Version\r\n\r\n3.6.0\r\n\r\n### Matplotlib Backend\r\n\r\n_No response_\r\n\r\n### Python version\r\n\r\n_No response_\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\nconda\n"
}