{
  "info": {
    "duration": 243.92371797561646,
    "submission": "diff --git a/sklearn/cluster/_affinity_propagation.py b/sklearn/cluster/_affinity_propagation.py\nindex 4806afee9..419e73e05 100644\n--- a/sklearn/cluster/_affinity_propagation.py\n+++ b/sklearn/cluster/_affinity_propagation.py\n@@ -200,6 +200,9 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,\n     else:\n         if verbose:\n             print(\"Did not converge\")\n+        labels = np.array([-1] * n_samples)\n+        cluster_centers_indices = []\n+        return cluster_centers_indices, labels\n \n     I = np.flatnonzero(E)\n     K = I.size  # Identify exemplars\n",
    "total_cost": 0.167937,
    "instance_id": "scikit-learn__scikit-learn-15512",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves the behavior of the AffinityPropagation class when the clustering algorithm does not converge. According to the documentation, when the algorithm does not converge, it should return an empty array for cluster_center_indices_ and -1 for each label in labels_. However, the observed behavior differs from this documented behavior. To address this issue, we need to investigate the implementation of the AffinityPropagation class and its related methods, specifically focusing on how convergence is checked and handled.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "AffinityPropagation"
                ],
                "code_snippet": null,
                "file_pattern": null,
                "function_names": [
                  "fit",
                  "predict",
                  "fit_predict"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 331,
                "span_id": "AffinityPropagation.fit",
                "file_path": "sklearn/cluster/_affinity_propagation.py"
              },
              {
                "rank": 0,
                "tokens": 199,
                "span_id": "AffinityPropagation.predict",
                "file_path": "sklearn/cluster/_affinity_propagation.py"
              },
              {
                "rank": 0,
                "tokens": 159,
                "span_id": "AffinityPropagation.fit_predict",
                "file_path": "sklearn/cluster/_affinity_propagation.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "AffinityPropagation"
                ],
                "code_snippet": null,
                "file_pattern": null,
                "function_names": [
                  "fit",
                  "predict",
                  "fit_predict"
                ]
              }
            ]
          },
          "input_tokens": 4117,
          "output_tokens": 164,
          "retry_message": null,
          "completion_cost": 0.014811000000000001
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 331,
            "span_id": "AffinityPropagation.fit",
            "file_path": "sklearn/cluster/_affinity_propagation.py"
          },
          {
            "rank": 0,
            "tokens": 199,
            "span_id": "AffinityPropagation.predict",
            "file_path": "sklearn/cluster/_affinity_propagation.py"
          },
          {
            "rank": 0,
            "tokens": 159,
            "span_id": "AffinityPropagation.fit_predict",
            "file_path": "sklearn/cluster/_affinity_propagation.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue focuses on the behavior of AffinityPropagation when the algorithm does not converge. The user expects specific outputs (an empty array for cluster_center_indices_ and -1 for each label) when the algorithm does not converge but has observed different behavior in practice. The user is also looking for a more direct way to check if the algorithm has converged, potentially through a property rather than relying on the verbose option or checking if max_iter equals n_iter_. The provided search results include the implementation of the AffinityPropagation class and its methods. The fit method is of particular interest as it handles the main logic of the clustering process, including the call to the internal affinity_propagation function. The predict method also provides handling for cases where no cluster centers are found, emitting a warning and returning -1 labels. These methods suggest that the behavior described in the documentation should occur if the algorithm does not converge, but the user's experience differs. The analysis indicates that the relevant code spans are those that handle the assignment of cluster_center_indices_, labels_, and the conditions under which these assignments occur, as well as any checks for convergence. Therefore, the identified spans are those related to the fit and predict methods, which cover the critical functionality relevant to the issue reported.",
            "identified_spans": [
              {
                "span_ids": [
                  "AffinityPropagation.fit",
                  "AffinityPropagation.predict"
                ],
                "file_path": "sklearn/cluster/_affinity_propagation.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 2387,
          "output_tokens": 339,
          "retry_message": null,
          "completion_cost": 0.012246
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The provided file context contains the implementation of the AffinityPropagation class, which includes the fit and predict methods. The fit method handles the clustering process and assigns values to cluster_centers_indices_, labels_, and n_iter_. The predict method is used for assigning cluster labels to new data points. While the file context provides the code necessary for understanding the core logic of AffinityPropagation, it does not explicitly show how non-convergence is handled. This suggests that there might be additional relevant code in other parts of the module or the affinity_propagation function called within the fit method. Further investigation into the affinity_propagation function is necessary to ensure that all relevant code is identified.",
            "search_suggestions": "Look for the implementation of the affinity_propagation function which is called within the fit method of the AffinityPropagation class. This function likely contains the logic for handling non-convergence, and understanding its implementation is crucial for determining if the current behavior matches the documentation as well as fixing any potential discrepancies."
          },
          "output": {
            "message": "Look for the implementation of the affinity_propagation function which is called within the fit method of the AffinityPropagation class. This function likely contains the logic for handling non-convergence, and understanding its implementation is crucial for determining if the current behavior matches the documentation as well as fixing any potential discrepancies."
          },
          "input_tokens": 2243,
          "output_tokens": 235,
          "retry_message": null,
          "completion_cost": 0.010254
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look for the implementation of the affinity_propagation function which is called within the fit method of the AffinityPropagation class. This function likely contains the logic for handling non-convergence, and understanding its implementation is crucial for determining if the current behavior matches the documentation as well as fixing any potential discrepancies.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The context provided includes the implementation of the AffinityPropagation class and its fit method. Within the fit method, the affinity_propagation function is called, which likely houses the core logic for handling the clustering and convergence checks. Given this context, it is apparent that further inspection into the affinity_propagation function is necessary to fully understand how convergence is met or not met according to the algorithm's parameters and what actions are taken based on convergence status.",
            "search_requests": [
              {
                "query": "affinity propagation convergence handling",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/affinity_propagation.py",
                "function_names": [
                  "affinity_propagation"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 1583,
                "span_id": "affinity_propagation",
                "file_path": "sklearn/cluster/_affinity_propagation.py"
              }
            ],
            "search_requests": [
              {
                "query": "affinity propagation convergence handling",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/affinity_propagation.py",
                "function_names": [
                  "affinity_propagation"
                ]
              }
            ]
          },
          "input_tokens": 5081,
          "output_tokens": 192,
          "retry_message": null,
          "completion_cost": 0.018123
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 1583,
            "span_id": "affinity_propagation",
            "file_path": "sklearn/cluster/_affinity_propagation.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue pertains to the behavior of the Affinity Propagation clustering algorithm when it does not converge. The documentation states that in such cases, the algorithm should return an empty array for cluster_center_indices and -1 for each label. However, in the provided example and context, the behavior seems to be different, with the algorithm returning [2] as the cluster center and [0,0,0] as cluster labels. The main task is to identify the relevant parts of the code responsible for handling the convergence status and the corresponding return values.\n\nAfter analyzing the provided code spans in the search results, it is clear that the 'AffinityPropagation' class and the 'affinity_propagation' function are central to handling the clustering process. The 'affinity_propagation' function checks for convergence and sets the labels and cluster_centers_indices accordingly. If the algorithm does not converge, it sets 'labels' to [-1]*n_samples and 'cluster_centers_indices' to an empty list. This behavior aligns with the documentation's description of non-convergence handling.\n\nGiven the context and the code provided, the relevant code spans are:\n1. The initialization and fitting process in the 'AffinityPropagation' class.\n2. The core logic within the 'affinity_propagation' function that checks for convergence and assigns the appropriate values to 'labels' and 'cluster_centers_indices'.\n\nThese spans are crucial for understanding how the algorithm behaves when it does not converge, confirming that the implementation follows the documented behavior.",
            "identified_spans": [
              {
                "span_ids": [
                  "AffinityPropagation.__init__",
                  "AffinityPropagation.fit",
                  "affinity_propagation"
                ],
                "file_path": "sklearn/cluster/_affinity_propagation.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3747,
          "output_tokens": 404,
          "retry_message": null,
          "completion_cost": 0.017301
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The context provided includes the implementation of the AffinityPropagation class and its fit method. Within the fit method, the affinity_propagation function is called, which likely houses the core logic for handling the clustering and convergence checks. Given this context, it is apparent that further inspection into the affinity_propagation function is necessary to fully understand how convergence is met or not met according to the algorithm's parameters and what actions are taken based on convergence status.",
            "search_suggestions": "Look into the 'affinity_propagation' function in the provided context to understand the logic handling clustering and how convergence is checked."
          },
          "output": {
            "message": "Look into the 'affinity_propagation' function in the provided context to understand the logic handling clustering and how convergence is checked."
          },
          "input_tokens": 3513,
          "output_tokens": 154,
          "retry_message": null,
          "completion_cost": 0.012849
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look into the 'affinity_propagation' function in the provided context to understand the logic handling clustering and how convergence is checked.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "scratch_pad": "The context provided reveals the implementation of the affinity_propagation function within the sklearn library's clustering module. This function manages the core logic of Affinity Propagation clustering, including handling convergence. The function returns cluster centers and labels based on convergence status. When the algorithm does not converge, it raises a ConvergenceWarning and returns labels set to -1 and an empty list for cluster centers, adhering to the documented behavior. The context also includes the AffinityPropagation class and its methods, which interact with the affinity_propagation function. Thus, investigation into this function and class has provided sufficient insight to conclude this task.",
            "search_requests": []
          },
          "output": {
            "message": "The context provided reveals the implementation of the affinity_propagation function within the sklearn library's clustering module. This function manages the core logic of Affinity Propagation clustering, including handling convergence. The function returns cluster centers and labels based on convergence status. When the algorithm does not converge, it raises a ConvergenceWarning and returns labels set to -1 and an empty list for cluster centers, adhering to the documented behavior. The context also includes the AffinityPropagation class and its methods, which interact with the affinity_propagation function. Thus, investigation into this function and class has provided sufficient insight to conclude this task."
          },
          "input_tokens": 6671,
          "output_tokens": 172,
          "retry_message": null,
          "completion_cost": 0.022593
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "The context provided reveals the implementation of the affinity_propagation function within the sklearn library's clustering module. This function manages the core logic of Affinity Propagation clustering, including handling convergence. The function returns cluster centers and labels based on convergence status. When the algorithm does not converge, it raises a ConvergenceWarning and returns labels set to -1 and an empty list for cluster centers, adhering to the documented behavior. The context also includes the AffinityPropagation class and its methods, which interact with the affinity_propagation function. Thus, investigation into this function and class has provided sufficient insight to conclude this task.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "affinity_propagation",
            "file_path": "sklearn/cluster/_affinity_propagation.py",
            "scratch_pad": "The issue pertains to the return values of the affinity propagation clustering when it does not converge. According to the documentation, it should return an empty array for cluster_center_indices and -1 for each label. However, the current implementation does not adhere to this, potentially misleading users about the convergence status. The fix aims to ensure the documented behavior is correctly implemented.",
            "instructions": "Modify the affinity_propagation function to ensure it returns an empty array for cluster_center_indices and -1 for each label when the algorithm does not converge. This should align with the documented behavior."
          },
          "output": {
            "span_id": "affinity_propagation",
            "file_path": "sklearn/cluster/_affinity_propagation.py",
            "instructions": "Modify the affinity_propagation function to ensure it returns an empty array for cluster_center_indices and -1 for each label when the algorithm does not converge. This should align with the documented behavior."
          },
          "input_tokens": 3870,
          "output_tokens": 189,
          "retry_message": null,
          "completion_cost": 0.014445000000000001
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "affinity_propagation",
        "end_line": null,
        "file_path": "sklearn/cluster/_affinity_propagation.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Modify the affinity_propagation function to ensure it returns an empty array for cluster_center_indices and -1 for each label when the algorithm does not converge. This should align with the documented behavior.\n\nThe logic for handling non-convergence is already partially implemented in lines 223-226. However, it does not return an empty array for cluster_center_indices and -1 for each label directly when the algorithm does not converge. It only does this after adjusting the final set of exemplars and clusters. To align with the documented behavior, we need to ensure that immediately after determining non-convergence, the function returns the required values.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 203,
            "start_line": 200,
            "scratch_pad": "The logic for handling non-convergence is already partially implemented in lines 223-226. However, it does not return an empty array for cluster_center_indices and -1 for each label directly when the algorithm does not converge. It only does this after adjusting the final set of exemplars and clusters. To align with the documented behavior, we need to ensure that immediately after determining non-convergence, the function returns the required values."
          },
          "output": {
            "span_id": "affinity_propagation",
            "end_line": 207,
            "file_path": "sklearn/cluster/_affinity_propagation.py",
            "start_line": 196,
            "instructions": "Modify the affinity_propagation function to ensure it returns an empty array for cluster_center_indices and -1 for each label when the algorithm does not converge. This should align with the documented behavior.\n\nThe logic for handling non-convergence is already partially implemented in lines 223-226. However, it does not return an empty array for cluster_center_indices and -1 for each label directly when the algorithm does not converge. It only does this after adjusting the final set of exemplars and clusters. To align with the documented behavior, we need to ensure that immediately after determining non-convergence, the function returns the required values."
          },
          "input_tokens": 3141,
          "output_tokens": 130,
          "retry_message": null,
          "completion_cost": 0.011373000000000001
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "affinity_propagation",
        "end_line": 207,
        "file_path": "sklearn/cluster/_affinity_propagation.py",
        "max_tokens": 1000,
        "start_line": 196,
        "temperature": 1.6,
        "instructions": "Modify the affinity_propagation function to ensure it returns an empty array for cluster_center_indices and -1 for each label when the algorithm does not converge. This should align with the documented behavior.\n\nThe logic for handling non-convergence is already partially implemented in lines 223-226. However, it does not return an empty array for cluster_center_indices and -1 for each label directly when the algorithm does not converge. It only does this after adjusting the final set of exemplars and clusters. To align with the documented behavior, we need to ensure that immediately after determining non-convergence, the function returns the required values.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\n            if (not unconverged and (K > 0)) or (it == max_iter):\n                if verbose:\n                    print(\"Converged after %d iterations.\" % it)\n                break\n    else:\n        if verbose:\n            print(\"Did not converge\")\n        labels = np.array([-1] * n_samples)\n        cluster_centers_indices = []\n        return cluster_centers_indices, labels\n\n    I = np.flatnonzero(E)\n    K = I.size  # Identify exemplars\n\n    if K > 0:\n</replace>"
          },
          "output": {
            "diff": "--- sklearn/cluster/_affinity_propagation.py\n+++ sklearn/cluster/_affinity_propagation.py\n@@ -200,6 +200,9 @@\n     else:\n         if verbose:\n             print(\"Did not converge\")\n+        labels = np.array([-1] * n_samples)\n+        cluster_centers_indices = []\n+        return cluster_centers_indices, labels\n \n     I = np.flatnonzero(E)\n     K = I.size  # Identify exemplars\n",
            "message": "Applied the change to sklearn/cluster/_affinity_propagation.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 5464,
          "output_tokens": 142,
          "retry_message": null,
          "completion_cost": 0.018522
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sklearn/cluster/_affinity_propagation.py\n+++ sklearn/cluster/_affinity_propagation.py\n@@ -200,6 +200,9 @@\n     else:\n         if verbose:\n             print(\"Did not converge\")\n+        labels = np.array([-1] * n_samples)\n+        cluster_centers_indices = []\n+        return cluster_centers_indices, labels\n \n     I = np.flatnonzero(E)\n     K = I.size  # Identify exemplars\n",
        "model": "deepseek-coder",
        "message": "Applied the change to sklearn/cluster/_affinity_propagation.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The reported issue has been resolved by modifying the affinity_propagation function to return the correct values when the algorithm does not converge. This change ensures compliance with the documented behavior and provides users with a clear indicator of the convergence status.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The change applied correctly aligns with the documented behavior for the affinity propagation clustering. When the algorithm does not converge, it now returns an empty array for cluster_center_indices and -1 for each label, thereby ensuring consistency with the documentation. This fix addresses the issue reported and ensures users can accurately determine the convergence status of the clustering.",
            "instructions": null
          },
          "output": {
            "message": "The reported issue has been resolved by modifying the affinity_propagation function to return the correct values when the algorithm does not converge. This change ensures compliance with the documented behavior and provides users with a clear indicator of the convergence status."
          },
          "input_tokens": 4270,
          "output_tokens": 174,
          "retry_message": null,
          "completion_cost": 0.01542
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The reported issue has been resolved by modifying the affinity_propagation function to return the correct values when the algorithm does not converge. This change ensures compliance with the documented behavior and provides users with a clear indicator of the convergence status.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Return values of non converged affinity propagation clustering\nThe affinity propagation Documentation states: \r\n\"When the algorithm does not converge, it returns an empty array as cluster_center_indices and -1 as label for each training sample.\"\r\n\r\nExample:\r\n```python\r\nfrom sklearn.cluster import AffinityPropagation\r\nimport pandas as pd\r\n\r\ndata = pd.DataFrame([[1,0,0,0,0,0],[0,1,1,1,0,0],[0,0,1,0,0,1]])\r\naf = AffinityPropagation(affinity='euclidean', verbose=True, copy=False, max_iter=2).fit(data)\r\n\r\nprint(af.cluster_centers_indices_)\r\nprint(af.labels_)\r\n\r\n```\r\nI would expect that the clustering here (which does not converge) prints first an empty List and then [-1,-1,-1], however, I get [2] as cluster center and [0,0,0] as cluster labels. \r\nThe only way I currently know if the clustering fails is if I use the verbose option, however that is very unhandy. A hacky solution is to check if max_iter == n_iter_ but it could have converged exactly 15 iterations before max_iter (although unlikely).\r\nI am not sure if this is intended behavior and the documentation is wrong?\r\n\r\nFor my use-case within a bigger script, I would prefer to get back -1 values or have a property to check if it has converged, as otherwise, a user might not be aware that the clustering never converged.\r\n\r\n\r\n#### Versions\r\nSystem:\r\n    python: 3.6.7 | packaged by conda-forge | (default, Nov 21 2018, 02:32:25)  [GCC 4.8.2 20140120 (Red Hat 4.8.2-15)]\r\nexecutable: /home/jenniferh/Programs/anaconda3/envs/TF_RDKit_1_19/bin/python\r\n   machine: Linux-4.15.0-52-generic-x86_64-with-debian-stretch-sid\r\nBLAS:\r\n    macros: SCIPY_MKL_H=None, HAVE_CBLAS=None\r\n  lib_dirs: /home/jenniferh/Programs/anaconda3/envs/TF_RDKit_1_19/lib\r\ncblas_libs: mkl_rt, pthread\r\nPython deps:\r\n    pip: 18.1\r\n   setuptools: 40.6.3\r\n   sklearn: 0.20.3\r\n   numpy: 1.15.4\r\n   scipy: 1.2.0\r\n   Cython: 0.29.2\r\n   pandas: 0.23.4\r\n\r\n\n"
}