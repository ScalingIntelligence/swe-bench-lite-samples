{
  "info": {
    "duration": 225.56887459754944,
    "submission": "diff --git a/sympy/physics/vector/point.py b/sympy/physics/vector/point.py\nindex d4e3cfcc90..cac838ae8d 100644\n--- a/sympy/physics/vector/point.py\n+++ b/sympy/physics/vector/point.py\n@@ -519,8 +519,12 @@ def vel(self, frame):\n \n         _check_frame(frame)\n         if not (frame in self._vel_dict):\n-            raise ValueError('Velocity of point ' + self.name + ' has not been'\n-                             ' defined in ReferenceFrame ' + frame.name)\n+            if self._pos_dict:\n+                pos_vector = self.pos_from(list(self._pos_dict.keys())[0])\n+                return pos_vector.dt(frame)\n+            else:\n+                raise ValueError('Velocity of point ' + self.name + ' has not been'\n+                                 ' defined in ReferenceFrame ' + frame.name)\n         return self._vel_dict[frame]\n \n     def partial_velocity(self, frame, *gen_speeds):\n",
    "total_cost": 0.18438900000000003,
    "instance_id": "sympy__sympy-20049",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue concerns the calculation of velocity for a point in a specific reference frame within the `sympy.physics.mechanics` module. The user expects that if the orientation between two reference frames can be calculated, then the velocity between two points in those frames should be calculable as well. This involves investigating the `Point` and `ReferenceFrame` classes, and specifically the `vel` method in the `Point` class to understand why it raises a `ValueError` when attempting to calculate velocity.",
            "search_requests": [
              {
                "query": "calculate velocity if possible",
                "class_names": [],
                "code_snippet": "def vel(self, frame):",
                "file_pattern": "**/sympy/physics/vector/point.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 160,
                "span_id": "Point.vel",
                "file_path": "sympy/physics/vector/point.py"
              }
            ],
            "search_requests": [
              {
                "query": "calculate velocity if possible",
                "class_names": [],
                "code_snippet": "def vel(self, frame):",
                "file_pattern": "**/sympy/physics/vector/point.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 3427,
          "output_tokens": 181,
          "retry_message": null,
          "completion_cost": 0.012996
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 160,
            "span_id": "Point.vel",
            "file_path": "sympy/physics/vector/point.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about the inability to calculate the velocity of a point when it is not explicitly set. This feature is already supported for angular velocity between reference frames. The task is to identify relevant code spans that pertain to this issue and potentially suggest areas for improvement. The search results include the Point class and its methods such as __init__, vel, set_vel, and others. The method vel is of particular interest as it currently raises a ValueError if the velocity has not been defined, which aligns with the reported issue's problem statement. Therefore, the relevant code spans to inspect and potentially modify are those related to the velocity calculation, storage, and retrieval logic within the Point class.",
            "identified_spans": [
              {
                "span_ids": [
                  "Point",
                  "Point.vel",
                  "Point.set_vel"
                ],
                "file_path": "sympy/physics/vector/point.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 2987,
          "output_tokens": 224,
          "retry_message": null,
          "completion_cost": 0.012321
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "Relevant code for the issue is found in the `Point` class, specifically the `vel` method which raises a `ValueError`. The issue is about implementing a velocity calculation akin to angular velocity, which should ideally derive from updates to the point's position. The file context includes relevant methods such as `vel`, `acc`, `set_vel`, and the theories like `v1pt_theory` and `v2pt_theory`. However, there's no specific implementation to automatically calculate the velocity based on the position, as requested. Therefore, while the relevant parts of the codebase are identified, the specific feature request to auto-compute velocity based on position is not yet implemented.",
            "search_suggestions": "Explore deeper in the `Point` class to find where and how the position updates can be integrated to automatically calculate velocity as it's done for angular velocity in the `ReferenceFrame` class."
          },
          "output": {
            "message": "Explore deeper in the `Point` class to find where and how the position updates can be integrated to automatically calculate velocity as it's done for angular velocity in the `ReferenceFrame` class."
          },
          "input_tokens": 2773,
          "output_tokens": 220,
          "retry_message": null,
          "completion_cost": 0.011619
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Explore deeper in the `Point` class to find where and how the position updates can be integrated to automatically calculate velocity as it's done for angular velocity in the `ReferenceFrame` class.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "To deepen the exploration of the `Point` class and identify where the position updates can be integrated to automatically calculate velocity, we should focus on the methods related to position setting and velocity calculation. Specifically, the `set_pos` method updates the position of the point relative to another point, and the `vel` method currently raises a `ValueError` if the velocity hasn't been explicitly set. To address the issue, we should consider modifying or extending the `set_pos` method to also update the velocity, possibly by taking the time derivative of the position to derive the velocity. This approach mirrors how angular velocity is computed in the `ReferenceFrame` class.",
            "search_requests": [
              {
                "query": "integrate position updates to calculate velocity",
                "class_names": [],
                "code_snippet": "def set_pos(self, otherpoint, value):",
                "file_pattern": "**/sympy/physics/vector/point.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 197,
                "span_id": "Point.set_pos",
                "file_path": "sympy/physics/vector/point.py"
              }
            ],
            "search_requests": [
              {
                "query": "integrate position updates to calculate velocity",
                "class_names": [],
                "code_snippet": "def set_pos(self, otherpoint, value):",
                "file_pattern": "**/sympy/physics/vector/point.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 4975,
          "output_tokens": 244,
          "retry_message": null,
          "completion_cost": 0.018585
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 197,
            "span_id": "Point.set_pos",
            "file_path": "sympy/physics/vector/point.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue focuses on the inability to calculate velocities in certain reference frames. The relevant code spans must cover the Point class and its methods for velocity, including vel(), set_vel(), and possibly related methods like acc() and set_acc(). The spans identified cover the initialization of the Point class, the vel() method, and the set_vel() method, which are directly related to the issue at hand. These spans should be sufficient to address the reported issue, particularly the logic around how velocities are handled and calculated in different reference frames.",
            "identified_spans": [
              {
                "span_ids": [
                  "Point.__init__",
                  "Point.vel",
                  "Point.set_vel"
                ],
                "file_path": "sympy/physics/vector/point.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4952,
          "output_tokens": 223,
          "retry_message": null,
          "completion_cost": 0.018201000000000002
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The provided file context does contain the relevant `Point` class and its methods such as `set_pos`, `vel`, and others. However, the current implementation of `set_pos` does not automatically calculate and set the velocity of the point based on the new position. This is the functionality that needs to be added or modified to address the reported issue. The necessary methods and attributes (like `_vel_dict` and `_pos_dict`) are present, indicating that the relevant areas for modification are identified. Thus, while the immediate code to fix the issue isn't provided, the context necessary to extend or modify the `set_pos` method to include velocity calculation is here.",
            "search_suggestions": null
          },
          "output": {
            "message": null
          },
          "input_tokens": 2806,
          "output_tokens": 181,
          "retry_message": null,
          "completion_cost": 0.011133
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The provided context of the `Point` class reveals that velocity is explicitly set using the `set_vel` method and retrieved using the `vel` method. The `vel` method currently checks if the velocity is in the `_vel_dict` and raises a `ValueError` if it's not. There's no automatic calculation of velocity from position as there is for angular velocity in the `ReferenceFrame` class. To address the issue, we might need to: 1. Modify the `set_pos` method to automatically calculate and set the velocity unless explicitly set otherwise. 2. Implement logic in the `vel` method to derive the velocity from position if it hasn't been explicitly set, similar to how acceleration is derived from velocity in the `acc` method.",
            "search_requests": [
              {
                "query": "modify set_pos to calculate velocity",
                "class_names": [],
                "code_snippet": "def set_pos(self, otherpoint, value):",
                "file_pattern": "**/sympy/physics/vector/point.py",
                "function_names": []
              },
              {
                "query": "derive velocity from position in vel method",
                "class_names": [],
                "code_snippet": "def vel(self, frame):",
                "file_pattern": "**/sympy/physics/vector/point.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 197,
                "span_id": "Point.set_pos",
                "file_path": "sympy/physics/vector/point.py"
              },
              {
                "rank": 0,
                "tokens": 160,
                "span_id": "Point.vel",
                "file_path": "sympy/physics/vector/point.py"
              }
            ],
            "search_requests": [
              {
                "query": "modify set_pos to calculate velocity",
                "class_names": [],
                "code_snippet": "def set_pos(self, otherpoint, value):",
                "file_pattern": "**/sympy/physics/vector/point.py",
                "function_names": []
              },
              {
                "query": "derive velocity from position in vel method",
                "class_names": [],
                "code_snippet": "def vel(self, frame):",
                "file_pattern": "**/sympy/physics/vector/point.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 5223,
          "output_tokens": 343,
          "retry_message": null,
          "completion_cost": 0.020814
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 197,
            "span_id": "Point.set_pos",
            "file_path": "sympy/physics/vector/point.py"
          },
          {
            "rank": 0,
            "tokens": 160,
            "span_id": "Point.vel",
            "file_path": "sympy/physics/vector/point.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves getting the velocity of a point in a specific reference frame, which currently raises a ValueError because the velocity has not been defined. The expected result should derive the velocity based on the rate of change of the position vector with respect to the same frame. I identified that the relevant code spans are primarily in the 'Point' class where the methods 'set_vel', 'vel', and 'pos_from' are defined. The new search results confirm the existence of these methods and enhance the context around how velocity, position, and acceleration are handled within the 'Point' class in the sympy.physics.vector module. The 'Point.vel' method is crucial for the reported issue as it checks and returns the velocity from '_vel_dict', raising an error if the velocity for the frame is not defined. The 'set_vel' method allows for setting the velocity in a specific frame. The 'pos_from' method could be relevant for calculating positional differences which could be used to then calculate velocity. The 'a1pt_theory', 'a2pt_theory', 'v1pt_theory', and 'v2pt_theory' methods also involve calculations of velocity or depend on the velocity of points, thus indirectly relevant. Based on the search results, it appears the codebase already has the foundational methods to handle the calculation of velocities given a position vector. The next step to address the issue would likely involve enhancing the 'Point.vel' method to automatically calculate the velocity if it has not been explicitly set, based on the rates of change of the positional data.",
            "identified_spans": [
              {
                "span_ids": [
                  "Point.vel",
                  "Point.set_vel",
                  "Point.pos_from",
                  "Point.a1pt_theory",
                  "Point.a2pt_theory",
                  "Point.v1pt_theory",
                  "Point.v2pt_theory"
                ],
                "file_path": "sympy/physics/vector/point.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4464,
          "output_tokens": 457,
          "retry_message": null,
          "completion_cost": 0.020247
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The provided context of the `Point` class reveals that velocity is explicitly set using the `set_vel` method and retrieved using the `vel` method. The `vel` method currently checks if the velocity is in the `_vel_dict` and raises a `ValueError` if it's not. There's no automatic calculation of velocity from position as there is for angular velocity in the `ReferenceFrame` class. To address the issue, we might need to: 1. Modify the `set_pos` method to automatically calculate and set the velocity unless explicitly set otherwise. 2. Implement logic in the `vel` method to derive the velocity from position if it hasn't been explicitly set, similar to how acceleration is derived from velocity in the `acc` method.",
            "search_suggestions": "Look for additional code or comments in the `Point` class or related classes that might provide insights into the reasoning behind not automatically calculating velocity from position. Also, check for any tests or examples that might illustrate the expected behavior for velocity calculations."
          },
          "output": {},
          "input_tokens": 2833,
          "output_tokens": 248,
          "retry_message": null,
          "completion_cost": 0.012219
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "Point.vel",
            "file_path": "sympy/physics/vector/point.py",
            "scratch_pad": "The issue requires that the method `Point.vel(frame)` should calculate the velocity if possible. Currently, it raises a ValueError if the velocity has not been explicitly set for the given frame. To address this, we can implement a method to compute the velocity from the position if the velocity has not been explicitly set. This mimics the behavior already present for angular velocities.",
            "instructions": "Add a method to compute the velocity from the position if the velocity has not been explicitly set. Update the `vel` method to use this computation when the velocity is not explicitly defined."
          },
          "output": {
            "span_id": "Point.vel",
            "end_line": 524,
            "file_path": "sympy/physics/vector/point.py",
            "start_line": 499,
            "instructions": "Add a method to compute the velocity from the position if the velocity has not been explicitly set. Update the `vel` method to use this computation when the velocity is not explicitly defined."
          },
          "input_tokens": 3104,
          "output_tokens": 173,
          "retry_message": null,
          "completion_cost": 0.011907000000000001
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "Point.vel",
        "end_line": 524,
        "file_path": "sympy/physics/vector/point.py",
        "max_tokens": 1000,
        "start_line": 499,
        "temperature": 1.6,
        "instructions": "Add a method to compute the velocity from the position if the velocity has not been explicitly set. Update the `vel` method to use this computation when the velocity is not explicitly defined.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n    def vel(self, frame):\n        \"\"\"The velocity Vector of this Point in the ReferenceFrame.\n\n        Parameters\n        ==========\n\n        frame : ReferenceFrame\n            The frame in which the returned velocity vector will be defined in\n\n        Examples\n        ========\n\n        >>> from sympy.physics.vector import Point, ReferenceFrame\n        >>> N = ReferenceFrame('N')\n        >>> p1 = Point('p1')\n        >>> p1.set_vel(N, 10 * N.x)\n        >>> p1.vel(N)\n        10*N.x\n\n        \"\"\"\n\n        _check_frame(frame)\n        if not (frame in self._vel_dict):\n            if self._pos_dict:\n                pos_vector = self.pos_from(list(self._pos_dict.keys())[0])\n                return pos_vector.dt(frame)\n            else:\n                raise ValueError('Velocity of point ' + self.name + ' has not been'\n                                 ' defined in ReferenceFrame ' + frame.name)\n        return self._vel_dict[frame]\n</replace>"
          },
          "output": {
            "diff": "--- sympy/physics/vector/point.py\n+++ sympy/physics/vector/point.py\n@@ -519,8 +519,12 @@\n \n         _check_frame(frame)\n         if not (frame in self._vel_dict):\n-            raise ValueError('Velocity of point ' + self.name + ' has not been'\n-                             ' defined in ReferenceFrame ' + frame.name)\n+            if self._pos_dict:\n+                pos_vector = self.pos_from(list(self._pos_dict.keys())[0])\n+                return pos_vector.dt(frame)\n+            else:\n+                raise ValueError('Velocity of point ' + self.name + ' has not been'\n+                                 ' defined in ReferenceFrame ' + frame.name)\n         return self._vel_dict[frame]\n \n     def partial_velocity(self, frame, *gen_speeds):\n",
            "message": "Applied the change to sympy/physics/vector/point.py.",
            "verification_errors": []
          },
          "input_tokens": 5853,
          "output_tokens": 259,
          "retry_message": null,
          "completion_cost": 0.021444
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sympy/physics/vector/point.py\n+++ sympy/physics/vector/point.py\n@@ -519,8 +519,12 @@\n \n         _check_frame(frame)\n         if not (frame in self._vel_dict):\n-            raise ValueError('Velocity of point ' + self.name + ' has not been'\n-                             ' defined in ReferenceFrame ' + frame.name)\n+            if self._pos_dict:\n+                pos_vector = self.pos_from(list(self._pos_dict.keys())[0])\n+                return pos_vector.dt(frame)\n+            else:\n+                raise ValueError('Velocity of point ' + self.name + ' has not been'\n+                                 ' defined in ReferenceFrame ' + frame.name)\n         return self._vel_dict[frame]\n \n     def partial_velocity(self, frame, *gen_speeds):\n",
        "model": "deepseek-coder",
        "message": "Applied the change to sympy/physics/vector/point.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The fix has been applied as requested, addressing the issue with calculating velocities in the `Point` class.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The change applied to the `vel` method in the `Point` class correctly addresses the issue. It now computes the velocity by differentiating the position vector with respect to the given frame if the velocity has not been explicitly set. This aligns with the behavior observed for angular velocities and ensures consistency in calculations.",
            "instructions": null
          },
          "output": {
            "message": "The fix has been applied as requested, addressing the issue with calculating velocities in the `Point` class."
          },
          "input_tokens": 3586,
          "output_tokens": 143,
          "retry_message": null,
          "completion_cost": 0.012903000000000001
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The fix has been applied as requested, addressing the issue with calculating velocities in the `Point` class.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Point.vel() should calculate the velocity if possible\nIf you specify the orientation of two reference frames and then ask for the angular velocity between the two reference frames the angular velocity will be calculated. But if you try to do the same thing with velocities, this doesn't work. See below:\r\n\r\n```\r\nIn [1]: import sympy as sm                                                                               \r\n\r\nIn [2]: import sympy.physics.mechanics as me                                                             \r\n\r\nIn [3]: A = me.ReferenceFrame('A')                                                                       \r\n\r\nIn [5]: q = me.dynamicsymbols('q')                                                                       \r\n\r\nIn [6]: B = A.orientnew('B', 'Axis', (q, A.x))                                                           \r\n\r\nIn [7]: B.ang_vel_in(A)                                                                                  \r\nOut[7]: q'*A.x\r\n\r\nIn [9]: P = me.Point('P')                                                                                \r\n\r\nIn [10]: Q = me.Point('Q')                                                                               \r\n\r\nIn [11]: r = q*A.x + 2*q*A.y                                                                             \r\n\r\nIn [12]: Q.set_pos(P, r)                                                                                 \r\n\r\nIn [13]: Q.vel(A)                                                                                        \r\n---------------------------------------------------------------------------\r\nValueError                                Traceback (most recent call last)\r\n<ipython-input-13-0fc8041904cc> in <module>\r\n----> 1 Q.vel(A)\r\n\r\n~/miniconda3/lib/python3.6/site-packages/sympy/physics/vector/point.py in vel(self, frame)\r\n    453         if not (frame in self._vel_dict):\r\n    454             raise ValueError('Velocity of point ' + self.name + ' has not been'\r\n--> 455                              ' defined in ReferenceFrame ' + frame.name)\r\n    456         return self._vel_dict[frame]\r\n    457 \r\n\r\nValueError: Velocity of point Q has not been defined in ReferenceFrame A\r\n```\r\n\r\nThe expected result of the `Q.vel(A)` should be:\r\n\r\n```\r\nIn [14]: r.dt(A)                                                                                         \r\nOut[14]: q'*A.x + 2*q'*A.y\r\n```\r\n\r\nI think that this is possible. Maybe there is a reason it isn't implemented. But we should try to implement it because it is confusing why this works for orientations and not positions.\r\n\r\n\n"
}