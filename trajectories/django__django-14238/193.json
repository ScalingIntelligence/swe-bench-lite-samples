{
  "info": {
    "error": "Traceback (most recent call last):\n  File \"/workspace/moatless/moatless-tools/driver/run_moatless.py\", line 89, in run_moatless_core\n    response = loop.run(problem_statement)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/workspace/moatless/moatless-tools/moatless/loop.py\", line 179, in run\n    self._run()\n  File \"/workspace/moatless/moatless-tools/moatless/loop.py\", line 378, in _run\n    action, cost, input_tokens, output_tokens = self._next_action()\n                                                ^^^^^^^^^^^^^^^^^^^\n  File \"/workspace/moatless/moatless-tools/moatless/loop.py\", line 601, in _next_action\n    raise e\n  File \"/workspace/moatless/moatless-tools/moatless/loop.py\", line 587, in _next_action\n    client.chat.completions.create_with_completion(\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/client.py\", line 223, in create_with_completion\n    model = self.create_fn(\n            ^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/patch.py\", line 143, in new_create_sync\n    response = retry_sync(\n               ^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/retry.py\", line 151, in retry_sync\n    for attempt in max_retries:\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/tenacity/__init__.py\", line 443, in __iter__\n    do = self.iter(retry_state=retry_state)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/tenacity/__init__.py\", line 376, in iter\n    result = action(retry_state)\n             ^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/tenacity/__init__.py\", line 418, in exc_check\n    raise retry_exc.reraise()\n          ^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/tenacity/__init__.py\", line 185, in reraise\n    raise self.last_attempt.result()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/concurrent/futures/_base.py\", line 449, in result\n    return self.__get_result()\n           ^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/concurrent/futures/_base.py\", line 401, in __get_result\n    raise self._exception\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/retry.py\", line 175, in retry_sync\n    raise e\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/retry.py\", line 157, in retry_sync\n    return process_response(\n           ^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/process_response.py\", line 144, in process_response\n    model = response_model.from_response(\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/function_calls.py\", line 125, in from_response\n    return cls.parse_json(completion, validation_context, strict)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/function_calls.py\", line 273, in parse_json\n    return cls.model_validate_json(\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/pydantic/main.py\", line 580, in model_validate_json\n    return cls.__pydantic_validator__.validate_json(json_data, strict=strict, context=context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\npydantic_core._pydantic_core.ValidationError: 1 validation error for Search\n  Invalid JSON: key must be a string at line 1 column 2 [type=json_invalid, input_value='{\\\\n     \"example_key\": ...int(f\"Invalid JSON: {e}', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.7/v/json_invalid\n",
    "duration": 249.2525749206543,
    "submission": "",
    "total_cost": 0.117207,
    "instance_id": "django__django-14238",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The error indicates that the `DEFAULT_AUTO_FIELD` setting is attempting to use a subclass of `BigAutoField` or `SmallAutoField` but fails because the subclass does not pass the `AutoField` subclass check. The traceback points to the `Options` class method `_get_default_pk_class` in `django/db/models/options.py`, which raises a `ValueError`. The solution mentioned involves modifying the `AutoFieldMeta` class by allowing subclasses of `BigAutoField` and `SmallAutoField` in its `_subclasses` property and adjusting the `__subclasscheck__` method. This investigation should focus on the `AutoFieldMeta` class in `django/db/models/fields/__init__.py` and possibly related checks in `django/db/models/options.py`.",
            "search_requests": [
              {
                "query": "AutoFieldMeta subclass check",
                "class_names": [
                  "AutoFieldMeta"
                ],
                "code_snippet": null,
                "file_pattern": "**/fields/__init__.py",
                "function_names": [
                  "__subclasscheck__"
                ]
              },
              {
                "query": "get default pk class",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/options.py",
                "function_names": [
                  "_get_default_pk_class"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 27,
                "span_id": "AutoFieldMeta.__instancecheck__",
                "file_path": "django/db/models/fields/__init__.py"
              },
              {
                "rank": 0,
                "tokens": 24,
                "span_id": "AutoFieldMeta.__subclasscheck__",
                "file_path": "django/db/models/fields/__init__.py"
              },
              {
                "rank": 0,
                "tokens": 19,
                "span_id": "AutoFieldMeta._subclasses",
                "file_path": "django/db/models/fields/__init__.py"
              },
              {
                "rank": 0,
                "tokens": 140,
                "span_id": "AutoFieldMeta",
                "file_path": "django/db/models/fields/__init__.py"
              },
              {
                "rank": 0,
                "tokens": 216,
                "span_id": "Options._get_default_pk_class",
                "file_path": "django/db/models/options.py"
              }
            ],
            "search_requests": [
              {
                "query": "AutoFieldMeta subclass check",
                "class_names": [
                  "AutoFieldMeta"
                ],
                "code_snippet": null,
                "file_pattern": "**/fields/__init__.py",
                "function_names": [
                  "__subclasscheck__"
                ]
              },
              {
                "query": "get default pk class",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/options.py",
                "function_names": [
                  "_get_default_pk_class"
                ]
              }
            ]
          },
          "input_tokens": 3799,
          "output_tokens": 317,
          "retry_message": null,
          "completion_cost": 0.016152
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 27,
            "span_id": "AutoFieldMeta.__instancecheck__",
            "file_path": "django/db/models/fields/__init__.py"
          },
          {
            "rank": 0,
            "tokens": 24,
            "span_id": "AutoFieldMeta.__subclasscheck__",
            "file_path": "django/db/models/fields/__init__.py"
          },
          {
            "rank": 0,
            "tokens": 19,
            "span_id": "AutoFieldMeta._subclasses",
            "file_path": "django/db/models/fields/__init__.py"
          },
          {
            "rank": 0,
            "tokens": 140,
            "span_id": "AutoFieldMeta",
            "file_path": "django/db/models/fields/__init__.py"
          },
          {
            "rank": 0,
            "tokens": 216,
            "span_id": "Options._get_default_pk_class",
            "file_path": "django/db/models/options.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The issue pertains to the validation of the DEFAULT_AUTO_FIELD setting in Django, specifically when it involves subclasses of BigAutoField and SmallAutoField. The error occurs when Django's `Options` class attempts to validate the primary key class specified by DEFAULT_AUTO_FIELD, asserting that it must subclass `AutoField`. The current implementation in `AutoFieldMeta` only checks for direct subclassing without considering subclasses of subclasses. The fix suggested involves adjusting `AutoFieldMeta.__subclasscheck__` to allow for subclasses of subclasses.\n\nIn the search results, we found relevant code in two files: `django/db/models/fields/__init__.py` and `django/db/models/options.py`. The first file contains the definition of `AutoFieldMeta` and its methods for checking subclasses. The second file contains methods related to the Model's `Options` class, particularly `_get_default_pk_class`, which is responsible for fetching and validating the primary key class based on the DEFAULT_AUTO_FIELD.\n\nThe identified code spans are sufficient to address the issue: 1) the `AutoFieldMeta._subclasses` property, which lists the direct subclasses of `AutoField`, and 2) the `AutoFieldMeta.__subclasscheck__` method, which needs to be adjusted to recursively check for subclasses. Modifying this method will ensure that any subclass of `BigAutoField` or `SmallAutoField` is also recognized as a valid primary key class. Additionally, the `Options._get_default_pk_class` method is important as it is the place where the exception is raised if the specified primary key class does not subclass `AutoField`.",
            "identified_spans": [
              {
                "span_ids": [
                  "AutoFieldMeta._subclasses",
                  "AutoFieldMeta.__subclasscheck__"
                ],
                "file_path": "django/db/models/fields/__init__.py"
              },
              {
                "span_ids": [
                  "Options._get_default_pk_class"
                ],
                "file_path": "django/db/models/options.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4095,
          "output_tokens": 489,
          "retry_message": null,
          "completion_cost": 0.019620000000000002
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The file context provided includes relevant sections from `django/db/models/fields/__init__.py` and `django/db/models/options.py` that are pertinent to the reported issue. Specifically, the `AutoFieldMeta` class in `django/db/models/fields/__init__.py` contains the `_subclasses` property and the `__subclasscheck__` method, which are central to the subclass check for `BigAutoField` and `SmallAutoField`. Additionally, the `Options` class in `django/db/models/options.py` includes the `_get_default_pk_class` method where the `ValueError` is raised, suggesting that the primary key class must subclass `AutoField`. Thus, the provided file context seems to cover essential parts of the codebase related to the issue. However, more detailed examination or additional context might be needed to fully understand the implications and potential modifications required.",
            "search_suggestions": "It might be beneficial to examine more closely how subclasses of `BigAutoField` and `SmallAutoField` are handled throughout the Django codebase, especially in relation to the `AutoFieldMeta` class and its interactions with other field types and model options."
          },
          "output": {
            "message": "It might be beneficial to examine more closely how subclasses of `BigAutoField` and `SmallAutoField` are handled throughout the Django codebase, especially in relation to the `AutoFieldMeta` class and its interactions with other field types and model options."
          },
          "input_tokens": 4026,
          "output_tokens": 286,
          "retry_message": null,
          "completion_cost": 0.016368
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "It might be beneficial to examine more closely how subclasses of `BigAutoField` and `SmallAutoField` are handled throughout the Django codebase, especially in relation to the `AutoFieldMeta` class and its interactions with other field types and model options.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "Given the initial analysis of the `AutoFieldMeta` class and the `Options` class in relation to the `DEFAULT_AUTO_FIELD` setting, it's clear that the issue revolves around ensuring that subclasses of `BigAutoField` and `SmallAutoField` are properly recognized as subclasses of `AutoField`. The current implementation in `AutoFieldMeta` provides a list of subclasses that includes `BigAutoField` and `SmallAutoField`, but the `__subclasscheck__` method might not be fully addressing the subclassing logic needed for deep inheritance checks. Additionally, the `_get_default_pk_class` method in `Options` checks if the class referenced by `DEFAULT_AUTO_FIELD` is a subclass of `AutoField`, which reinforces the need for a thorough subclass check in `AutoFieldMeta`. To fully address this, it might be necessary to enhance the subclass check logic to consider deep inheritance and ensure that any class inheriting from `BigAutoField` or `SmallAutoField` is also recognized as a valid `AutoField` subclass.",
            "search_requests": [
              {
                "query": "enhance AutoFieldMeta subclass check for BigAutoField and SmallAutoField",
                "class_names": [
                  "AutoFieldMeta"
                ],
                "code_snippet": null,
                "file_pattern": "**/fields/__init__.py",
                "function_names": [
                  "__subclasscheck__"
                ]
              },
              {
                "query": "validate DEFAULT_AUTO_FIELD subclass",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/options.py",
                "function_names": [
                  "_get_default_pk_class"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 27,
                "span_id": "AutoFieldMeta.__instancecheck__",
                "file_path": "django/db/models/fields/__init__.py"
              },
              {
                "rank": 0,
                "tokens": 24,
                "span_id": "AutoFieldMeta.__subclasscheck__",
                "file_path": "django/db/models/fields/__init__.py"
              },
              {
                "rank": 0,
                "tokens": 19,
                "span_id": "AutoFieldMeta._subclasses",
                "file_path": "django/db/models/fields/__init__.py"
              },
              {
                "rank": 0,
                "tokens": 140,
                "span_id": "AutoFieldMeta",
                "file_path": "django/db/models/fields/__init__.py"
              },
              {
                "rank": 0,
                "tokens": 216,
                "span_id": "Options._get_default_pk_class",
                "file_path": "django/db/models/options.py"
              }
            ],
            "search_requests": [
              {
                "query": "enhance AutoFieldMeta subclass check for BigAutoField and SmallAutoField",
                "class_names": [
                  "AutoFieldMeta"
                ],
                "code_snippet": null,
                "file_pattern": "**/fields/__init__.py",
                "function_names": [
                  "__subclasscheck__"
                ]
              },
              {
                "query": "validate DEFAULT_AUTO_FIELD subclass",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/options.py",
                "function_names": [
                  "_get_default_pk_class"
                ]
              }
            ]
          },
          "input_tokens": 6425,
          "output_tokens": 417,
          "retry_message": null,
          "completion_cost": 0.02553
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 27,
            "span_id": "AutoFieldMeta.__instancecheck__",
            "file_path": "django/db/models/fields/__init__.py"
          },
          {
            "rank": 0,
            "tokens": 24,
            "span_id": "AutoFieldMeta.__subclasscheck__",
            "file_path": "django/db/models/fields/__init__.py"
          },
          {
            "rank": 0,
            "tokens": 19,
            "span_id": "AutoFieldMeta._subclasses",
            "file_path": "django/db/models/fields/__init__.py"
          },
          {
            "rank": 0,
            "tokens": 140,
            "span_id": "AutoFieldMeta",
            "file_path": "django/db/models/fields/__init__.py"
          },
          {
            "rank": 0,
            "tokens": 216,
            "span_id": "Options._get_default_pk_class",
            "file_path": "django/db/models/options.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue pertains to a subclass check failure involving subclasses of BigAutoField and SmallAutoField when setting DEFAULT_AUTO_FIELD. The suggested fix involves modifying the AutoFieldMeta.__subclasscheck__ method to allow subclasses of BigAutoField and SmallAutoField in the _subclasses property. The current context includes relevant code spans from django/db/models/fields/__init__.py and django/db/models/options.py, particularly focusing on the AutoFieldMeta class and its methods. The new search results provide additional context, including the __instancecheck__ method in the AutoFieldMeta class, which could also be relevant for handling subclass checks. The identified code spans are primarily from the AutoFieldMeta class, focusing on the _subclasses property and the __subclasscheck__ and __instancecheck__ methods, as they directly address the mechanism for checking subclasses.",
            "identified_spans": [
              {
                "span_ids": [
                  "AutoFieldMeta._subclasses",
                  "AutoFieldMeta.__subclasscheck__",
                  "AutoFieldMeta.__instancecheck__"
                ],
                "file_path": "django/db/models/fields/__init__.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 6435,
          "output_tokens": 276,
          "retry_message": null,
          "completion_cost": 0.023445
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The analysis indicates that the key issue relates to ensuring that subclasses of BigAutoField and SmallAutoField are correctly recognized as subclasses of AutoField. The provided file context includes the AutoFieldMeta class which defines the _subclasses property listing BigAutoField and SmallAutoField, along with the __subclasscheck__ method. However, the current implementation of __subclasscheck__ might not sufficiently handle deep inheritance, which is critical for the reported issue. Additionally, the Options class's _get_default_pk_class method explicitly checks if the class referenced by DEFAULT_AUTO_FIELD is a subclass of AutoField, highlighting the necessity for a robust subclass check in AutoFieldMeta. The file context seems to touch the relevant areas, but to fully address the issue, it might be necessary to refine the subclass check logic in AutoFieldMeta to account for deep inheritance and ensure proper subclass recognition of BigAutoField and SmallAutoField.",
            "search_suggestions": "Review the subclass check logic in AutoFieldMeta to ensure it accurately considers deep inheritance of BigAutoField and SmallAutoField."
          },
          "output": {
            "message": "Review the subclass check logic in AutoFieldMeta to ensure it accurately considers deep inheritance of BigAutoField and SmallAutoField."
          },
          "input_tokens": 4099,
          "output_tokens": 253,
          "retry_message": null,
          "completion_cost": 0.016092000000000002
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Review the subclass check logic in AutoFieldMeta to ensure it accurately considers deep inheritance of BigAutoField and SmallAutoField.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": []
    }
  ],
  "initial_message": "DEFAULT_AUTO_FIELD subclass check fails for subclasses of BigAutoField and SmallAutoField.\nDescription\n\t\nSet DEFAULT_AUTO_FIELD = \"example.core.models.MyBigAutoField\" , with contents of example.core.models:\nfrom django.db import models\nclass MyBigAutoField(models.BigAutoField):\n\tpass\nclass MyModel(models.Model):\n\tpass\nDjango then crashes with:\nTraceback (most recent call last):\n File \"/..././manage.py\", line 21, in <module>\n\tmain()\n File \"/..././manage.py\", line 17, in main\n\texecute_from_command_line(sys.argv)\n File \"/.../venv/lib/python3.9/site-packages/django/core/management/__init__.py\", line 419, in execute_from_command_line\n\tutility.execute()\n File \"/.../venv/lib/python3.9/site-packages/django/core/management/__init__.py\", line 395, in execute\n\tdjango.setup()\n File \"/.../venv/lib/python3.9/site-packages/django/__init__.py\", line 24, in setup\n\tapps.populate(settings.INSTALLED_APPS)\n File \"/.../venv/lib/python3.9/site-packages/django/apps/registry.py\", line 114, in populate\n\tapp_config.import_models()\n File \"/.../venv/lib/python3.9/site-packages/django/apps/config.py\", line 301, in import_models\n\tself.models_module = import_module(models_module_name)\n File \"/Users/chainz/.pyenv/versions/3.9.1/lib/python3.9/importlib/__init__.py\", line 127, in import_module\n\treturn _bootstrap._gcd_import(name[level:], package, level)\n File \"<frozen importlib._bootstrap>\", line 1030, in _gcd_import\n File \"<frozen importlib._bootstrap>\", line 1007, in _find_and_load\n File \"<frozen importlib._bootstrap>\", line 986, in _find_and_load_unlocked\n File \"<frozen importlib._bootstrap>\", line 680, in _load_unlocked\n File \"<frozen importlib._bootstrap_external>\", line 790, in exec_module\n File \"<frozen importlib._bootstrap>\", line 228, in _call_with_frames_removed\n File \"/.../example/core/models.py\", line 8, in <module>\n\tclass MyModel(models.Model):\n File \"/.../venv/lib/python3.9/site-packages/django/db/models/base.py\", line 320, in __new__\n\tnew_class._prepare()\n File \"/.../venv/lib/python3.9/site-packages/django/db/models/base.py\", line 333, in _prepare\n\topts._prepare(cls)\n File \"/.../venv/lib/python3.9/site-packages/django/db/models/options.py\", line 285, in _prepare\n\tpk_class = self._get_default_pk_class()\n File \"/.../venv/lib/python3.9/site-packages/django/db/models/options.py\", line 246, in _get_default_pk_class\n\traise ValueError(\nValueError: Primary key 'example.core.models.MyBigAutoField' referred by DEFAULT_AUTO_FIELD must subclass AutoField.\nThis can be fixed in AutoFieldMeta.__subclasscheck__ by allowing subclasses of those classes in the _subclasses property.\n"
}