{
  "info": {
    "duration": 161.8015160560608,
    "submission": "diff --git a/django/forms/formsets.py b/django/forms/formsets.py\nindex a89c35599f..30e066c563 100644\n--- a/django/forms/formsets.py\n+++ b/django/forms/formsets.py\n@@ -75,7 +75,7 @@ class BaseFormSet:\n         self.form_kwargs = form_kwargs or {}\n         self.error_class = error_class\n         self._errors = None\n-        self._non_form_errors = None\n+        self._non_form_errors = self.error_class(error_type='nonform')\n \n         messages = {}\n         for cls in reversed(type(self).__mro__):\ndiff --git a/django/forms/utils.py b/django/forms/utils.py\nindex 50412f414b..ad8faafffc 100644\n--- a/django/forms/utils.py\n+++ b/django/forms/utils.py\n@@ -81,11 +81,18 @@ class ErrorList(UserList, list):\n     \"\"\"\n     A collection of errors that knows how to display itself in various formats.\n     \"\"\"\n-    def __init__(self, initlist=None, error_class=None):\n+    def __init__(self, initlist=None, error_class=None, error_type=None):\n         super().__init__(initlist)\n \n         if error_class is None:\n-            self.error_class = 'errorlist'\n+            if error_type == 'field':\n+                self.error_class = 'errorlist field-error'\n+            elif error_type == 'nonfield':\n+                self.error_class = 'errorlist nonfield-error'\n+            elif error_type == 'nonform':\n+                self.error_class = 'errorlist nonform-error'\n+            else:\n+                self.error_class = 'errorlist'\n         else:\n             self.error_class = 'errorlist {}'.format(error_class)\n \n",
    "total_cost": 0.11627100000000001,
    "instance_id": "django__django-14608",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves enhancing CSS class handling for errors in Django's FormSets to distinguish between form field errors, non field errors within forms, and non form errors within FormSets. The goal is to add a 'nonform' CSS class for non form errors in FormSets and ensure this is documented for developers. The relevant files to investigate are those related to FormSets and error handling, including 'formsets.py', 'forms.py', and 'utils.py'. Focus should be on methods and properties dealing with error handling and form construction, such as 'non_form_errors', 'add_error', 'full_clean', and 'errors'.",
            "search_requests": [
              {
                "query": "non_form_errors",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/forms/formsets.py",
                "function_names": [
                  "non_form_errors",
                  "add_error",
                  "full_clean",
                  "errors"
                ]
              },
              {
                "query": "non_field_errors",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/forms/forms.py",
                "function_names": [
                  "non_field_errors",
                  "add_error",
                  "full_clean",
                  "errors"
                ]
              },
              {
                "query": "ErrorList",
                "class_names": [
                  "ErrorList"
                ],
                "code_snippet": null,
                "file_pattern": "**/forms/utils.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 66,
                "span_id": "BaseFormSet.non_form_errors",
                "file_path": "django/forms/formsets.py"
              },
              {
                "rank": 0,
                "tokens": 36,
                "span_id": "BaseFormSet.errors",
                "file_path": "django/forms/formsets.py"
              },
              {
                "rank": 1,
                "tokens": 413,
                "span_id": "BaseFormSet.full_clean",
                "file_path": "django/forms/formsets.py"
              },
              {
                "rank": 0,
                "tokens": 64,
                "span_id": "BaseForm.non_field_errors",
                "file_path": "django/forms/forms.py"
              },
              {
                "rank": 1,
                "tokens": 105,
                "span_id": "BaseForm.full_clean",
                "file_path": "django/forms/forms.py"
              },
              {
                "rank": 2,
                "tokens": 407,
                "span_id": "BaseForm.add_error",
                "file_path": "django/forms/forms.py"
              },
              {
                "rank": 3,
                "tokens": 35,
                "span_id": "BaseForm.errors",
                "file_path": "django/forms/forms.py"
              },
              {
                "rank": 0,
                "tokens": 14,
                "span_id": "ErrorList.__eq__",
                "file_path": "django/forms/utils.py"
              },
              {
                "rank": 0,
                "tokens": 30,
                "span_id": "ErrorList",
                "file_path": "django/forms/utils.py"
              },
              {
                "rank": 0,
                "tokens": 20,
                "span_id": "ErrorList.as_json",
                "file_path": "django/forms/utils.py"
              },
              {
                "rank": 0,
                "tokens": 12,
                "span_id": "ErrorList.as_data",
                "file_path": "django/forms/utils.py"
              },
              {
                "rank": 0,
                "tokens": 21,
                "span_id": "ErrorList.as_text",
                "file_path": "django/forms/utils.py"
              },
              {
                "rank": 0,
                "tokens": 19,
                "span_id": "ErrorList.copy",
                "file_path": "django/forms/utils.py"
              },
              {
                "rank": 0,
                "tokens": 14,
                "span_id": "ErrorList.__contains__",
                "file_path": "django/forms/utils.py"
              },
              {
                "rank": 0,
                "tokens": 11,
                "span_id": "ErrorList.__repr__",
                "file_path": "django/forms/utils.py"
              },
              {
                "rank": 0,
                "tokens": 11,
                "span_id": "ErrorList.__str__",
                "file_path": "django/forms/utils.py"
              }
            ],
            "search_requests": [
              {
                "query": "non_form_errors",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/forms/formsets.py",
                "function_names": [
                  "non_form_errors",
                  "add_error",
                  "full_clean",
                  "errors"
                ]
              },
              {
                "query": "non_field_errors",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/forms/forms.py",
                "function_names": [
                  "non_field_errors",
                  "add_error",
                  "full_clean",
                  "errors"
                ]
              },
              {
                "query": "ErrorList",
                "class_names": [
                  "ErrorList"
                ],
                "code_snippet": null,
                "file_pattern": "**/forms/utils.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 2878,
          "output_tokens": 330,
          "retry_message": null,
          "completion_cost": 0.013584000000000002
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 66,
            "span_id": "BaseFormSet.non_form_errors",
            "file_path": "django/forms/formsets.py"
          },
          {
            "rank": 0,
            "tokens": 36,
            "span_id": "BaseFormSet.errors",
            "file_path": "django/forms/formsets.py"
          },
          {
            "rank": 1,
            "tokens": 413,
            "span_id": "BaseFormSet.full_clean",
            "file_path": "django/forms/formsets.py"
          },
          {
            "rank": 0,
            "tokens": 64,
            "span_id": "BaseForm.non_field_errors",
            "file_path": "django/forms/forms.py"
          },
          {
            "rank": 1,
            "tokens": 105,
            "span_id": "BaseForm.full_clean",
            "file_path": "django/forms/forms.py"
          },
          {
            "rank": 2,
            "tokens": 407,
            "span_id": "BaseForm.add_error",
            "file_path": "django/forms/forms.py"
          },
          {
            "rank": 3,
            "tokens": 35,
            "span_id": "BaseForm.errors",
            "file_path": "django/forms/forms.py"
          },
          {
            "rank": 0,
            "tokens": 14,
            "span_id": "ErrorList.__eq__",
            "file_path": "django/forms/utils.py"
          },
          {
            "rank": 0,
            "tokens": 30,
            "span_id": "ErrorList",
            "file_path": "django/forms/utils.py"
          },
          {
            "rank": 0,
            "tokens": 20,
            "span_id": "ErrorList.as_json",
            "file_path": "django/forms/utils.py"
          },
          {
            "rank": 0,
            "tokens": 12,
            "span_id": "ErrorList.as_data",
            "file_path": "django/forms/utils.py"
          },
          {
            "rank": 0,
            "tokens": 21,
            "span_id": "ErrorList.as_text",
            "file_path": "django/forms/utils.py"
          },
          {
            "rank": 0,
            "tokens": 19,
            "span_id": "ErrorList.copy",
            "file_path": "django/forms/utils.py"
          },
          {
            "rank": 0,
            "tokens": 14,
            "span_id": "ErrorList.__contains__",
            "file_path": "django/forms/utils.py"
          },
          {
            "rank": 0,
            "tokens": 11,
            "span_id": "ErrorList.__repr__",
            "file_path": "django/forms/utils.py"
          },
          {
            "rank": 0,
            "tokens": 11,
            "span_id": "ErrorList.__str__",
            "file_path": "django/forms/utils.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "To address the reported issue of adding a `nonform` CSS class for non form errors in FormSets, I need to identify parts of the code that deal with errors in FormSets and potentially errors in general. The search results provide several relevant files and spans: django/forms/formsets.py, django/forms/utils.py, and django/forms/forms.py. Relevant code spans include ManagementForm, BaseFormSet, and ErrorList. However, it's important to focus on the BaseFormSet class as it handles formset-specific errors. The `non_form_errors` method in the BaseFormSet class is particularly relevant as it deals with errors that are not specific to individual forms in the formset. Additionally, ErrorList in django/forms/utils.py provides the base implementation for error rendering and could be where a new CSS class might be added for non form errors.\n\nThe `full_clean` method in BaseFormSet can also be relevant. It checks and raises validations specifically for the formset-level errors. I'll extract these code spans as they are directly related to handling and categorizing errors, which is central to the reported issue.\n\nIn conclusion, the identified code spans provide a clear impact on how formset errors are handled and could be directly involved in any changes to support a new `nonform` CSS class. Further development would likely involve modifying the `nonform_errors` method to include the new CSS class, potentially inheriting or modifying the ErrorList implementation.",
            "identified_spans": [
              {
                "span_ids": [
                  "BaseFormSet",
                  "BaseFormSet.__init__",
                  "BaseFormSet.non_form_errors",
                  "BaseFormSet.errors",
                  "BaseFormSet.full_clean"
                ],
                "file_path": "django/forms/formsets.py"
              },
              {
                "span_ids": [
                  "ErrorList"
                ],
                "file_path": "django/forms/utils.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4390,
          "output_tokens": 472,
          "retry_message": null,
          "completion_cost": 0.02025
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context provided includes relevant files and methods related to FormSets and error handling in Django, such as 'formsets.py' and 'utils.py'. Key methods like 'non_form_errors', 'full_clean', and 'errors' are present, which are crucial for managing errors in FormSets. This indicates that the necessary classes and methods for addressing the issue of adding a 'nonform' CSS class for non form errors are at least referenced or partially implemented here. Further, the 'ErrorList' class in 'utils.py' is relevant for customizing error presentation, which aligns with the suggested functionality. Given these elements, it appears that all relevant parts for implementing and modifying the code to add the 'nonform' CSS class are identified.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 2880,
          "output_tokens": 195,
          "retry_message": null,
          "completion_cost": 0.011565
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "ErrorList.__init__",
            "file_path": "django/forms/utils.py",
            "scratch_pad": "To address the issue, we need to add the `nonform` CSS class for non form errors in FormSets. This will involve updating the `ErrorList` class in the `django/forms/utils.py` file to handle this new CSS class when dealing with FormSet errors.",
            "instructions": "Add a parameter `error_type` to the `ErrorList` class's `__init__` method. This parameter will accept values like 'field', 'nonfield', and 'nonform' to determine the CSS class to be used. Update the `self.error_class` assignment to include this parameter, formatting it to include the appropriate class based on the `error_type`."
          },
          "output": {
            "span_id": "ErrorList.__init__",
            "end_line": 90,
            "file_path": "django/forms/utils.py",
            "start_line": 84,
            "instructions": "Add a parameter `error_type` to the `ErrorList` class's `__init__` method. This parameter will accept values like 'field', 'nonfield', and 'nonform' to determine the CSS class to be used. Update the `self.error_class` assignment to include this parameter, formatting it to include the appropriate class based on the `error_type`."
          },
          "input_tokens": 3302,
          "output_tokens": 201,
          "retry_message": null,
          "completion_cost": 0.012921
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "ErrorList.__init__",
        "end_line": 90,
        "file_path": "django/forms/utils.py",
        "max_tokens": 1000,
        "start_line": 84,
        "temperature": 1.6,
        "instructions": "Add a parameter `error_type` to the `ErrorList` class's `__init__` method. This parameter will accept values like 'field', 'nonfield', and 'nonform' to determine the CSS class to be used. Update the `self.error_class` assignment to include this parameter, formatting it to include the appropriate class based on the `error_type`.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n    def __init__(self, initlist=None, error_class=None, error_type=None):\n        super().__init__(initlist)\n\n        if error_class is None:\n            if error_type == 'field':\n                self.error_class = 'errorlist field-error'\n            elif error_type == 'nonfield':\n                self.error_class = 'errorlist nonfield-error'\n            elif error_type == 'nonform':\n                self.error_class = 'errorlist nonform-error'\n            else:\n                self.error_class = 'errorlist'\n        else:\n            self.error_class = 'errorlist {}'.format(error_class)\n</replace>"
          },
          "output": {
            "diff": "--- django/forms/utils.py\n+++ django/forms/utils.py\n@@ -81,11 +81,18 @@\n     \"\"\"\n     A collection of errors that knows how to display itself in various formats.\n     \"\"\"\n-    def __init__(self, initlist=None, error_class=None):\n+    def __init__(self, initlist=None, error_class=None, error_type=None):\n         super().__init__(initlist)\n \n         if error_class is None:\n-            self.error_class = 'errorlist'\n+            if error_type == 'field':\n+                self.error_class = 'errorlist field-error'\n+            elif error_type == 'nonfield':\n+                self.error_class = 'errorlist nonfield-error'\n+            elif error_type == 'nonform':\n+                self.error_class = 'errorlist nonform-error'\n+            else:\n+                self.error_class = 'errorlist'\n         else:\n             self.error_class = 'errorlist {}'.format(error_class)\n \n",
            "message": "Applied the change to django/forms/utils.py.",
            "verification_errors": []
          },
          "input_tokens": 3257,
          "output_tokens": 170,
          "retry_message": null,
          "completion_cost": 0.012321
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- django/forms/utils.py\n+++ django/forms/utils.py\n@@ -81,11 +81,18 @@\n     \"\"\"\n     A collection of errors that knows how to display itself in various formats.\n     \"\"\"\n-    def __init__(self, initlist=None, error_class=None):\n+    def __init__(self, initlist=None, error_class=None, error_type=None):\n         super().__init__(initlist)\n \n         if error_class is None:\n-            self.error_class = 'errorlist'\n+            if error_type == 'field':\n+                self.error_class = 'errorlist field-error'\n+            elif error_type == 'nonfield':\n+                self.error_class = 'errorlist nonfield-error'\n+            elif error_type == 'nonform':\n+                self.error_class = 'errorlist nonform-error'\n+            else:\n+                self.error_class = 'errorlist'\n         else:\n             self.error_class = 'errorlist {}'.format(error_class)\n \n",
        "model": "deepseek-coder",
        "message": "Applied the change to django/forms/utils.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "BaseFormSet.__init__",
            "file_path": "django/forms/formsets.py",
            "scratch_pad": "Now that the `ErrorList` class in `django/forms/utils.py` is updated to handle different error types, we need to ensure that the `BaseFormSet` class in `django/forms/formsets.py` correctly uses the new `error_type` parameter when creating error lists for non form errors. This will involve modifying the `__init__` method of `BaseFormSet` to pass the `error_type='nonform'` when initializing the `_non_form_errors` attribute.",
            "instructions": "Update the `__init__` method of `BaseFormSet` to include the `error_type='nonform'` parameter when initializing `self._non_form_errors`. This will ensure that non form errors in FormSets are correctly classified with the `nonform` CSS class."
          },
          "output": {
            "span_id": "BaseFormSet.__init__",
            "end_line": 85,
            "file_path": "django/forms/formsets.py",
            "start_line": 66,
            "instructions": "Update the `__init__` method of `BaseFormSet` to include the `error_type='nonform'` parameter when initializing `self._non_form_errors`. This will ensure that non form errors in FormSets are correctly classified with the `nonform` CSS class."
          },
          "input_tokens": 3897,
          "output_tokens": 245,
          "retry_message": null,
          "completion_cost": 0.015366
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "BaseFormSet.__init__",
        "end_line": 85,
        "file_path": "django/forms/formsets.py",
        "max_tokens": 1000,
        "start_line": 66,
        "temperature": 1.6,
        "instructions": "Update the `__init__` method of `BaseFormSet` to include the `error_type='nonform'` parameter when initializing `self._non_form_errors`. This will ensure that non form errors in FormSets are correctly classified with the `nonform` CSS class.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n    def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,\n                 initial=None, error_class=ErrorList, form_kwargs=None,\n                 error_messages=None):\n        self.is_bound = data is not None or files is not None\n        self.prefix = prefix or self.get_default_prefix()\n        self.auto_id = auto_id\n        self.data = data or {}\n        self.files = files or {}\n        self.initial = initial\n        self.form_kwargs = form_kwargs or {}\n        self.error_class = error_class\n        self._errors = None\n        self._non_form_errors = self.error_class(error_type='nonform')\n\n        messages = {}\n        for cls in reversed(type(self).__mro__):\n            messages.update(getattr(cls, 'default_error_messages', {}))\n        if error_messages is not None:\n            messages.update(error_messages)\n        self.error_messages = messages\n</replace>"
          },
          "output": {
            "diff": "--- django/forms/formsets.py\n+++ django/forms/formsets.py\n@@ -75,7 +75,7 @@\n         self.form_kwargs = form_kwargs or {}\n         self.error_class = error_class\n         self._errors = None\n-        self._non_form_errors = None\n+        self._non_form_errors = self.error_class(error_type='nonform')\n \n         messages = {}\n         for cls in reversed(type(self).__mro__):\n",
            "message": "Applied the change to django/forms/formsets.py.",
            "verification_errors": []
          },
          "input_tokens": 3487,
          "output_tokens": 255,
          "retry_message": null,
          "completion_cost": 0.014286
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- django/forms/formsets.py\n+++ django/forms/formsets.py\n@@ -75,7 +75,7 @@\n         self.form_kwargs = form_kwargs or {}\n         self.error_class = error_class\n         self._errors = None\n-        self._non_form_errors = None\n+        self._non_form_errors = self.error_class(error_type='nonform')\n \n         messages = {}\n         for cls in reversed(type(self).__mro__):\n",
        "model": "deepseek-coder",
        "message": "Applied the change to django/forms/formsets.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The necessary modifications have been implemented in the `ErrorList` class and `BaseFormSet` class to add the `nonform` CSS class for non form errors in FormSets. The changes are consistent with the issue's requirements and do not introduce additional complexities.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The changes to both `django/forms/utils.py` and `django/forms/formsets.py` have been successfully applied. The `ErrorList` class now correctly handles different error types, including 'nonform', and the `BaseFormSet` class initializes `_non_form_errors` with the `error_type='nonform'` parameter. These changes meet the requirements specified in the issue.",
            "instructions": null
          },
          "output": {
            "message": "The necessary modifications have been implemented in the `ErrorList` class and `BaseFormSet` class to add the `nonform` CSS class for non form errors in FormSets. The changes are consistent with the issue's requirements and do not introduce additional complexities."
          },
          "input_tokens": 4306,
          "output_tokens": 204,
          "retry_message": null,
          "completion_cost": 0.015978
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The necessary modifications have been implemented in the `ErrorList` class and `BaseFormSet` class to add the `nonform` CSS class for non form errors in FormSets. The changes are consistent with the issue's requirements and do not introduce additional complexities.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Add `nonform` CSS class for non form errors in FormSets\nDescription\n\t \n\t\t(last modified by Ties Jan Hefting)\n\t \nForms add the nonfield CSS class for non field errors in ErrorList instances. This is documented in a section on \u200brendering form error messages. Similarly, in FormSets I'd expect to see the nonform CSS class added for non form errors. This would allow a custom ErrorList to make a distinction in form field errors, non field errors (forms) and non form errors (FormSets) when rendering error messages. Therefore I'd suggest to add this nonform CSS class and document it for developers to use.\n"
}