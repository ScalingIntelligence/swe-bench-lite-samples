{
  "info": {
    "duration": 287.4100799560547,
    "submission": "diff --git a/sympy/matrices/common.py b/sympy/matrices/common.py\nindex 379a2917aa..a6b255497a 100644\n--- a/sympy/matrices/common.py\n+++ b/sympy/matrices/common.py\n@@ -1973,6 +1973,8 @@ def __div__(self, other):\n \n     @call_highest_priority('__rmatmul__')\n     def __matmul__(self, other):\n+        if not isinstance(other, (MatrixArithmetic, MatrixExpr)):\n+            raise TypeError(\"Scalar operands are not allowed, use '*' instead\")\n         return self.__mul__(other)\n \n     @call_highest_priority('__rmul__')\n",
    "total_cost": 0.120915,
    "instance_id": "sympy__sympy-13773",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue indicates that the `@` operator (`__matmul__`) should only work for matrix multiplication and fail if one argument is not a matrix. This behavior should align with NumPy's implementation. The relevant files provided suggest the `__matmul__` method and related operations should be checked in the context of matrix operations to ensure they adhere to this rule. Specifically, the `MatrixArithmetic` class and related classes handling matrix operations should be inspected for the implementation of `__matmul__` and its behavior with non-matrix arguments.",
            "search_requests": [
              {
                "query": "__matmul__ fails if one argument is not a matrix",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/matrices/**/*.py",
                "function_names": [
                  "__matmul__"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 3,
                "tokens": 28,
                "span_id": "MatrixArithmetic.__matmul__",
                "file_path": "sympy/matrices/common.py"
              },
              {
                "rank": 30,
                "tokens": 42,
                "span_id": "MatrixExpr.__matmul__",
                "file_path": "sympy/matrices/expressions/matexpr.py"
              }
            ],
            "search_requests": [
              {
                "query": "__matmul__ fails if one argument is not a matrix",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/matrices/**/*.py",
                "function_names": [
                  "__matmul__"
                ]
              }
            ]
          },
          "input_tokens": 3152,
          "output_tokens": 196,
          "retry_message": null,
          "completion_cost": 0.012396
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 3,
            "tokens": 28,
            "span_id": "MatrixArithmetic.__matmul__",
            "file_path": "sympy/matrices/common.py"
          },
          {
            "rank": 30,
            "tokens": 42,
            "span_id": "MatrixExpr.__matmul__",
            "file_path": "sympy/matrices/expressions/matexpr.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue specifies that the `__matmul__` operation should fail if one argument is not a matrix. Currently, the implementations in both `sympy/matrices/common.py` and `sympy/matrices/expressions/matexpr.py` do not enforce this check. In `MatrixArithmetic`, `__matmul__` simply calls `__mul__`, which does not ensure matrix multiplication criteria. Similarly, in `MatrixExpr`, `__matmul__` constructs a MatMul object and processes it, also without checking for matrix multiplication conditions. Therefore, these implementations need to be updated with appropriate checks before performing the multiplication operation.",
            "identified_spans": [
              {
                "span_ids": [
                  "MatrixArithmetic.__matmul__"
                ],
                "file_path": "sympy/matrices/common.py"
              },
              {
                "span_ids": [
                  "MatrixExpr.__matmul__"
                ],
                "file_path": "sympy/matrices/expressions/matexpr.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 1705,
          "output_tokens": 255,
          "retry_message": null,
          "completion_cost": 0.00894
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The provided file context includes the relevant methods `__matmul__` in both `MatrixArithmetic` and `MatrixExpr` classes. The `MatrixArithmetic` class's `__matmul__` method currently just calls `__mul__`, which does not meet the requirement that it should only work for matrix multiplication. The `MatrixExpr` class's `__matmul__` method appears to handle matrix multiplication specifically, but it is not clear from the provided context how it handles non-matrix arguments. Further context or detailed testing may be needed to fully assess if these implementations handle non-matrix arguments appropriately according to the issue description.",
            "search_suggestions": "Consider searching for additional context or tests that demonstrate the behavior of `__matmul__` with non-matrix arguments to ensure it raises an appropriate error or handles it as specified in the issue."
          },
          "output": {
            "message": "Consider searching for additional context or tests that demonstrate the behavior of `__matmul__` with non-matrix arguments to ensure it raises an appropriate error or handles it as specified in the issue."
          },
          "input_tokens": 1608,
          "output_tokens": 210,
          "retry_message": null,
          "completion_cost": 0.007974
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Consider searching for additional context or tests that demonstrate the behavior of `__matmul__` with non-matrix arguments to ensure it raises an appropriate error or handles it as specified in the issue.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The current implementation of `__matmul__` in the provided files suggests that it might not be checking for non-matrix arguments correctly. Specifically, in `MatrixArithmetic`, `__matmul__` is implemented to simply call `__mul__`, which might not be the correct behavior for matrix multiplication. In `MatrixExpr`, `__matmul__` constructs a `MatMul` instance and calls `doit()`, but it does not explicitly check if `other` is a matrix. This suggests a need to verify if the arguments are matrices and to handle cases where they are not appropriately. Additionally, searching for tests or additional context that shows how `__matmul__` should behave with non-matrix arguments can provide clearer guidance on implementing the required checks or corrections.",
            "search_requests": [
              {
                "query": "behavior of __matmul__ with non-matrix arguments",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/matrices/**/*.py",
                "function_names": [
                  "__matmul__"
                ]
              },
              {
                "query": "tests for __matmul__ with non-matrix arguments",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/tests/**/*.py",
                "function_names": [
                  "__matmul__"
                ]
              }
            ]
          },
          "output": null,
          "input_tokens": 3875,
          "output_tokens": 338,
          "retry_message": "It's not possible to search for test files.",
          "completion_cost": 0.016695
        },
        {
          "action": {
            "complete": false,
            "scratch_pad": "Since searching test files isn't an option, the focus should shift to identifying the appropriate location in the main codebase where the check for non-matrix arguments in `__matmul__` can be integrated or enhanced. Given the context provided, the `MatrixArithmetic` and `MatrixExpr` classes seem to be central to the implementation of `__matmul__`. It's necessary to identify or modify these or related classes to ensure that `__matmul__` properly checks for and handles cases where one of the arguments is not a matrix. This might involve adding specific type checks or error handling within the `__matmul__` method, or ensuring that any methods it calls also adhere to this requirement.",
            "search_requests": [
              {
                "query": "implementation of __matmul__ and type checking",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/matrices/**/*.py",
                "function_names": [
                  "__matmul__"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 5,
                "tokens": 28,
                "span_id": "MatrixArithmetic.__matmul__",
                "file_path": "sympy/matrices/common.py"
              },
              {
                "rank": 28,
                "tokens": 42,
                "span_id": "MatrixExpr.__matmul__",
                "file_path": "sympy/matrices/expressions/matexpr.py"
              }
            ],
            "search_requests": [
              {
                "query": "implementation of __matmul__ and type checking",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/matrices/**/*.py",
                "function_names": [
                  "__matmul__"
                ]
              }
            ]
          },
          "input_tokens": 4231,
          "output_tokens": 250,
          "retry_message": null,
          "completion_cost": 0.016443000000000003
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 5,
            "tokens": 28,
            "span_id": "MatrixArithmetic.__matmul__",
            "file_path": "sympy/matrices/common.py"
          },
          {
            "rank": 28,
            "tokens": 42,
            "span_id": "MatrixExpr.__matmul__",
            "file_path": "sympy/matrices/expressions/matexpr.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about ensuring that the `@` (__matmul__) operator should only work for matrix multiplication and fail if either operand is not a matrix. This behavior should be aligned with how NumPy handles matrix multiplication with the @ operator. Currently, in the provided code, both `MatrixArithmetic` and `MatrixExpr` classes implement `__matmul__` by essentially copying the behavior of `__mul__`. This does not meet the requirement since it does not check if the operation is truly a matrix multiplication. Identifying and modifying these specific code spans will be crucial to meet the issue's requirements. Therefore, both 'MatrixArithmetic.__matmul__' and 'MatrixExpr.__matmul__' are relevant and need to be adjusted to include necessary checks for matrix multiplication operands.",
            "identified_spans": [
              {
                "span_ids": [
                  "MatrixArithmetic.__matmul__"
                ],
                "file_path": "sympy/matrices/common.py"
              },
              {
                "span_ids": [
                  "MatrixExpr.__matmul__"
                ],
                "file_path": "sympy/matrices/expressions/matexpr.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 2224,
          "output_tokens": 283,
          "retry_message": null,
          "completion_cost": 0.010917
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The file context includes the `MatrixArithmetic` and `MatrixExpr` classes, which are central to the implementation of `__matmul__`. Specifically, the `__matmul__` methods in both classes are defined and call other methods without any type checks for the arguments. This suggests that the current implementation of `__matmul__` does not include checks for whether the arguments are matrices, as required by the reported issue. Therefore, while the relevant classes and methods are identified, the specific checks needed to enforce the matrix multiplication rule are absent.",
            "search_suggestions": "To complete this task, focus on modifying the `__matmul__` methods in `MatrixArithmetic` and `MatrixExpr` to include type checks ensuring that both operands are matrices. This could involve adding error handling or explicit checks for matrix types before performing the multiplication. Additionally, consider looking into related methods or helper functions that might be called within `__matmul__` to ensure they also follow this requirement."
          },
          "output": {
            "message": "To complete this task, focus on modifying the `__matmul__` methods in `MatrixArithmetic` and `MatrixExpr` to include type checks ensuring that both operands are matrices. This could involve adding error handling or explicit checks for matrix types before performing the multiplication. Additionally, consider looking into related methods or helper functions that might be called within `__matmul__` to ensure they also follow this requirement."
          },
          "input_tokens": 1814,
          "output_tokens": 235,
          "retry_message": null,
          "completion_cost": 0.008967
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "To complete this task, focus on modifying the `__matmul__` methods in `MatrixArithmetic` and `MatrixExpr` to include type checks ensuring that both operands are matrices. This could involve adding error handling or explicit checks for matrix types before performing the multiplication. Additionally, consider looking into related methods or helper functions that might be called within `__matmul__` to ensure they also follow this requirement.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "scratch_pad": "To complete this task, it's clear that both `MatrixArithmetic` and `MatrixExpr` classes currently implement `__matmul__` without specific type checks for matrix arguments. To ensure that `__matmul__` only works with matrix arguments and correctly handles non-matrix types, modifications are required to add type checks and appropriate error handling. This could involve checking if the 'other' parameter is an instance of a matrix class before proceeding with the multiplication operation. If the check fails, a specific error should be raised, such as `TypeError` to indicate the invalid operation.",
            "search_requests": [
              {
                "query": "modify __matmul__ to include type checks for matrix arguments",
                "class_names": [
                  "MatrixArithmetic"
                ],
                "code_snippet": null,
                "file_pattern": "sympy/matrices/common.py",
                "function_names": [
                  "__matmul__"
                ]
              },
              {
                "query": "enhance __matmul__ with type checks for matrix arguments",
                "class_names": [
                  "MatrixExpr"
                ],
                "code_snippet": null,
                "file_pattern": "sympy/matrices/expressions/matexpr.py",
                "function_names": [
                  "__matmul__"
                ]
              }
            ]
          },
          "output": {
            "message": "To complete this task, it's clear that both `MatrixArithmetic` and `MatrixExpr` classes currently implement `__matmul__` without specific type checks for matrix arguments. To ensure that `__matmul__` only works with matrix arguments and correctly handles non-matrix types, modifications are required to add type checks and appropriate error handling. This could involve checking if the 'other' parameter is an instance of a matrix class before proceeding with the multiplication operation. If the check fails, a specific error should be raised, such as `TypeError` to indicate the invalid operation."
          },
          "input_tokens": 4388,
          "output_tokens": 307,
          "retry_message": null,
          "completion_cost": 0.017769
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "To complete this task, it's clear that both `MatrixArithmetic` and `MatrixExpr` classes currently implement `__matmul__` without specific type checks for matrix arguments. To ensure that `__matmul__` only works with matrix arguments and correctly handles non-matrix types, modifications are required to add type checks and appropriate error handling. This could involve checking if the 'other' parameter is an instance of a matrix class before proceeding with the multiplication operation. If the check fails, a specific error should be raised, such as `TypeError` to indicate the invalid operation.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "MatrixArithmetic.__matmul__",
            "file_path": "sympy/matrices/common.py",
            "scratch_pad": "The current implementation of `__matmul__` in `MatrixArithmetic` and `MatrixExpr` classes does not perform any type checks for matrix arguments. This results in unexpected behavior when non-matrix types are used, as shown in the issue. To address this, type checks must be added to ensure that both operands are instances of matrix classes before performing the matrix multiplication. If the check fails, a `TypeError` should be raised to indicate the invalid operation. This change would align the behavior of `__matmul__` with NumPy's behavior.",
            "instructions": "Add type checks to `__matmul__` in both `MatrixArithmetic` and `MatrixExpr` classes to ensure that the 'other' parameter is an instance of a matrix class. If the check fails, raise a `TypeError` with an appropriate message indicating that scalar operands are not allowed, and suggest using '*' instead."
          },
          "output": {
            "span_id": "MatrixArithmetic.__matmul__",
            "end_line": 1976,
            "file_path": "sympy/matrices/common.py",
            "start_line": 1974,
            "instructions": "Add type checks to `__matmul__` in both `MatrixArithmetic` and `MatrixExpr` classes to ensure that the 'other' parameter is an instance of a matrix class. If the check fails, raise a `TypeError` with an appropriate message indicating that scalar operands are not allowed, and suggest using '*' instead."
          },
          "input_tokens": 2745,
          "output_tokens": 244,
          "retry_message": null,
          "completion_cost": 0.011895000000000001
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "MatrixArithmetic.__matmul__",
        "end_line": 1976,
        "file_path": "sympy/matrices/common.py",
        "max_tokens": 1000,
        "start_line": 1974,
        "temperature": 1.6,
        "instructions": "Add type checks to `__matmul__` in both `MatrixArithmetic` and `MatrixExpr` classes to ensure that the 'other' parameter is an instance of a matrix class. If the check fails, raise a `TypeError` with an appropriate message indicating that scalar operands are not allowed, and suggest using '*' instead.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```markdown\n<replace>\n    @call_highest_priority('__rmatmul__')\n    def __matmul__(self, other):\n        if not isinstance(other, (MatrixArithmetic, MatrixExpr)):\n            raise TypeError(\"Scalar operands are not allowed, use '*' instead\")\n        return self.__mul__(other)\n</replace>"
          },
          "output": {
            "diff": "--- sympy/matrices/common.py\n+++ sympy/matrices/common.py\n@@ -1973,6 +1973,8 @@\n \n     @call_highest_priority('__rmatmul__')\n     def __matmul__(self, other):\n+        if not isinstance(other, (MatrixArithmetic, MatrixExpr)):\n+            raise TypeError(\"Scalar operands are not allowed, use '*' instead\")\n         return self.__mul__(other)\n \n     @call_highest_priority('__rmul__')\n",
            "message": "Applied the change to sympy/matrices/common.py.\n\n<scratch_pad>\n```markdown\n</scratch_pad>",
            "verification_errors": [
              {
                "code": "E0602",
                "line": 1976,
                "message": "Undefined variable 'MatrixExpr'",
                "file_path": "sympy/matrices/common.py"
              }
            ]
          },
          "input_tokens": 2593,
          "output_tokens": 76,
          "retry_message": null,
          "completion_cost": 0.008919
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sympy/matrices/common.py\n+++ sympy/matrices/common.py\n@@ -1973,6 +1973,8 @@\n \n     @call_highest_priority('__rmatmul__')\n     def __matmul__(self, other):\n+        if not isinstance(other, (MatrixArithmetic, MatrixExpr)):\n+            raise TypeError(\"Scalar operands are not allowed, use '*' instead\")\n         return self.__mul__(other)\n \n     @call_highest_priority('__rmul__')\n",
        "model": "deepseek-coder",
        "message": "Applied the change to sympy/matrices/common.py.\n\n<scratch_pad>\n```markdown\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [
          {
            "code": "E0602",
            "line": 1976,
            "message": "Undefined variable 'MatrixExpr'",
            "file_path": "sympy/matrices/common.py"
          }
        ],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "imports",
            "file_path": "sympy/matrices/common.py",
            "scratch_pad": "The lint error indicates that the variable `MatrixExpr` is undefined in the context of the `__matmul__` method in the `MatrixArithmetic` class. This is likely because `MatrixExpr` is defined in a different file (`sympy/matrices/expressions/matexpr.py`) and needs to be imported in `sympy/matrices/common.py` to be used.",
            "instructions": "Import the `MatrixExpr` class from `sympy/matrices/expressions/matexpr.py` in `sympy/matrices/common.py` to resolve the lint error."
          },
          "output": null,
          "input_tokens": 3251,
          "output_tokens": 192,
          "retry_message": "Span not found: imports. Available spans: MatrixArithmetic.__matmul__, MatrixArithmetic, MatrixRequired, MatrixCommon, MatrixShaping, MatrixOperations, MatrixSpecial, MatrixProperties",
          "completion_cost": 0.012633
        },
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": null,
            "file_path": "sympy/matrices/common.py",
            "scratch_pad": "The span identifier 'imports' was not found in the provided context, which means the import statement for `MatrixExpr` needs to be placed in a new appropriate location within the file `sympy/matrices/common.py`. Since the import statement needs to be at the top of the file, and there is no specific span for imports provided, the best approach is to add the import statement at the beginning of the file before any classes or functions are defined.",
            "instructions": "Add an import statement for the `MatrixExpr` class at the beginning of the `sympy/matrices/common.py` file, before any classes or functions are defined."
          },
          "output": null,
          "input_tokens": 3488,
          "output_tokens": 199,
          "retry_message": "You must either provide an apply_change action or finish.",
          "completion_cost": 0.013449000000000001
        },
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": null,
            "file_path": "sympy/matrices/common.py",
            "scratch_pad": "Since the span for the import statement does not exist in the provided context, the import statement should be added at the beginning of the `sympy/matrices/common.py` file. The previous change to the `__matmul__` method was correct, but it is waiting for the necessary import to resolve the lint error.",
            "instructions": "Add an import statement `from sympy.matrices.expressions import MatrixExpr` at the beginning of the `sympy/matrices/common.py` file to resolve the undefined variable error."
          },
          "output": null,
          "input_tokens": 3706,
          "output_tokens": 175,
          "retry_message": "You must either provide an apply_change action or finish.",
          "completion_cost": 0.013743000000000002
        }
      ]
    }
  ],
  "initial_message": "@ (__matmul__) should fail if one argument is not a matrix\n```\r\n>>> A = Matrix([[1, 2], [3, 4]])\r\n>>> B = Matrix([[2, 3], [1, 2]])\r\n>>> A@B\r\nMatrix([\r\n[ 4,  7],\r\n[10, 17]])\r\n>>> 2@B\r\nMatrix([\r\n[4, 6],\r\n[2, 4]])\r\n```\r\n\r\nRight now `@` (`__matmul__`) just copies `__mul__`, but it should actually only work if the multiplication is actually a matrix multiplication. \r\n\r\nThis is also how NumPy works\r\n\r\n```\r\n>>> import numpy as np\r\n>>> a = np.array([[1, 2], [3, 4]])\r\n>>> 2*a\r\narray([[2, 4],\r\n       [6, 8]])\r\n>>> 2@a\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nValueError: Scalar operands are not allowed, use '*' instead\r\n```\n"
}