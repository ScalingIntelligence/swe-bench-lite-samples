{
  "info": {
    "duration": 212.8475136756897,
    "submission": "diff --git a/django/db/models/base.py b/django/db/models/base.py\nindex 2428218696..f9b5c28b4f 100644\n--- a/django/db/models/base.py\n+++ b/django/db/models/base.py\n@@ -796,7 +796,9 @@ class Model(metaclass=ModelBase):\n                 inserted = True\n             # Set the parent's PK value to self.\n             if field:\n-                setattr(self, field.attname, self._get_pk_val(parent._meta))\n+                parent_pk_val = self._get_pk_val(parent._meta)\n+                if parent_pk_val is not None and getattr(self, field.attname) is None:\n+                    setattr(self, field.attname, parent_pk_val)\n                 # Since we didn't have an instance of the parent handy set\n                 # attname directly, bypassing the descriptor. Invalidate\n                 # the related object cache, in case it's been accidentally\n",
    "total_cost": 0.189531,
    "instance_id": "django__django-13964",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves Django models with non-auto CharField primary keys and foreign key relationships. The problem arises when saving related objects and handling primary key assignments. The initial search should focus on ForeignKey and model saving/assignment logic. Additionally, the transaction handling and deferred fields might be relevant due to the transactional atomicity involved in saving objects.",
            "search_requests": [
              {
                "query": "handling non-auto CharField primary keys and foreign key relationships",
                "class_names": [
                  "ForeignKey",
                  "Model"
                ],
                "code_snippet": "def _save_parents(self, cls, using, update_fields):",
                "file_pattern": "**/django/db/models/**/*.py",
                "function_names": [
                  "_save_parents",
                  "_save_table",
                  "_prepare_related_fields_for_save"
                ]
              },
              {
                "query": "transaction atomicity and deferred fields",
                "class_names": [
                  "Deferred"
                ],
                "code_snippet": null,
                "file_pattern": "**/django/db/models/**/*.py",
                "function_names": [
                  "save",
                  "save_deferred_fields"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 263,
                "span_id": "Model._save_parents",
                "file_path": "django/db/models/base.py"
              },
              {
                "rank": 0,
                "tokens": 7,
                "span_id": "Model:6",
                "file_path": "django/db/models/base.py"
              },
              {
                "rank": 0,
                "tokens": 3,
                "span_id": "Deferred",
                "file_path": "django/db/models/base.py"
              },
              {
                "rank": 0,
                "tokens": 460,
                "span_id": "Model.save",
                "file_path": "django/db/models/base.py"
              },
              {
                "rank": 1,
                "tokens": 76,
                "span_id": "FieldFile.save",
                "file_path": "django/db/models/fields/files.py"
              }
            ],
            "search_requests": [
              {
                "query": "handling non-auto CharField primary keys and foreign key relationships",
                "class_names": [
                  "ForeignKey",
                  "Model"
                ],
                "code_snippet": "def _save_parents(self, cls, using, update_fields):",
                "file_pattern": "**/django/db/models/**/*.py",
                "function_names": [
                  "_save_parents",
                  "_save_table",
                  "_prepare_related_fields_for_save"
                ]
              },
              {
                "query": "transaction atomicity and deferred fields",
                "class_names": [
                  "Deferred"
                ],
                "code_snippet": null,
                "file_pattern": "**/django/db/models/**/*.py",
                "function_names": [
                  "save",
                  "save_deferred_fields"
                ]
              }
            ]
          },
          "input_tokens": 3385,
          "output_tokens": 275,
          "retry_message": null,
          "completion_cost": 0.014280000000000001
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 263,
            "span_id": "Model._save_parents",
            "file_path": "django/db/models/base.py"
          },
          {
            "rank": 0,
            "tokens": 7,
            "span_id": "Model:6",
            "file_path": "django/db/models/base.py"
          },
          {
            "rank": 0,
            "tokens": 3,
            "span_id": "Deferred",
            "file_path": "django/db/models/base.py"
          },
          {
            "rank": 0,
            "tokens": 460,
            "span_id": "Model.save",
            "file_path": "django/db/models/base.py"
          },
          {
            "rank": 1,
            "tokens": 76,
            "span_id": "FieldFile.save",
            "file_path": "django/db/models/fields/files.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue relates to a data loss scenario when saving a parent object after setting a foreign key relation on a child with a non-auto CharField primary key. The issue is specifically about how Order.product_id (the foreign key) is not updated correctly when the Product instance (the parent) is saved before the Order instance (the child). This problem is evident in the `Model.__init__` and `Model.save` methods in `django/db/models/base.py`. In `Model.__init__`, the handling of foreign key relations involving non-auto primary keys is critical to understanding why the parent's primary key change is not reflected in the child's foreign key field. In `Model.save`, the logic around forcing inserts and updates and handling deferred fields is relevant to the issue as it affects how the parent and child objects are persisted. Additionally, the `_save_parents` method's handling of saving parent models is also pertinent as it deals with how parent objects are saved relative to their children.",
            "identified_spans": [
              {
                "span_ids": [
                  "Model.__init__",
                  "Model.save",
                  "Model:6",
                  "_save_parents"
                ],
                "file_path": "django/db/models/base.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3807,
          "output_tokens": 305,
          "retry_message": null,
          "completion_cost": 0.015996
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The file context provided contains relevant code for the issue, particularly in the handling of fields during object initialization and save operations. The __init__ method shows how model fields are assigned and updated based on arguments and keyword arguments, which is directly related to how foreign keys and primary keys are managed. The save method also plays a critical role in how objects are saved to the database, handling forced updates, deferred fields, and other related operations. This context seems to cover the key areas where the issue might be addressed, such as managing foreign key relationships and deferred fields during save operations.",
            "search_suggestions": "Look for more context in the Django ORM code for how ForeignKey fields are specifically handled in a transactional context, particularly focused on non-auto primary keys and deferred constraints."
          },
          "output": {
            "message": "Look for more context in the Django ORM code for how ForeignKey fields are specifically handled in a transactional context, particularly focused on non-auto primary keys and deferred constraints."
          },
          "input_tokens": 3103,
          "output_tokens": 189,
          "retry_message": null,
          "completion_cost": 0.012144
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look for more context in the Django ORM code for how ForeignKey fields are specifically handled in a transactional context, particularly focused on non-auto primary keys and deferred constraints.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The initial context provided gives insights into the `Model` class in Django's ORM, which is foundational for understanding how models are instantiated and saved. The methods `__init__` and `save` are particularly relevant as they handle the initialization and saving of model instances, including the handling of related objects and deferred fields. To further diagnose the issue with ForeignKey fields and non-auto primary keys, we need to look deeper into the related functionality that manages these keys, such as the `_save_parents`, `_save_table`, and `_prepare_related_fields_for_save` methods, as well as check constraints and transaction management.",
            "search_requests": [
              {
                "query": "transaction management and deferred fields in ForeignKey handling",
                "class_names": [
                  "ForeignKey",
                  "Deferred"
                ],
                "code_snippet": "def _save_parents(self, cls, using, update_fields):",
                "file_pattern": "**/django/db/models/**/*.py",
                "function_names": [
                  "_save_parents",
                  "_save_table",
                  "_prepare_related_fields_for_save"
                ]
              },
              {
                "query": "check constraints and non-auto primary keys",
                "class_names": [
                  "CheckConstraint"
                ],
                "code_snippet": null,
                "file_pattern": "**/django/db/models/**/*.py",
                "function_names": [
                  "_check_constraints"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 141,
                "span_id": "ForeignKey",
                "file_path": "django/db/models/fields/related.py"
              },
              {
                "rank": 1,
                "tokens": 3,
                "span_id": "Deferred",
                "file_path": "django/db/models/base.py"
              },
              {
                "rank": 0,
                "tokens": 263,
                "span_id": "Model._save_parents",
                "file_path": "django/db/models/base.py"
              },
              {
                "rank": 0,
                "tokens": 583,
                "span_id": "Model._save_table",
                "file_path": "django/db/models/base.py"
              },
              {
                "rank": 0,
                "tokens": 340,
                "span_id": "Model._prepare_related_fields_for_save",
                "file_path": "django/db/models/base.py"
              },
              {
                "rank": 0,
                "tokens": 6,
                "span_id": "CheckConstraint",
                "file_path": "django/db/models/constraints.py"
              },
              {
                "rank": 0,
                "tokens": 941,
                "span_id": "Model._check_constraints",
                "file_path": "django/db/models/base.py"
              }
            ],
            "search_requests": [
              {
                "query": "transaction management and deferred fields in ForeignKey handling",
                "class_names": [
                  "ForeignKey",
                  "Deferred"
                ],
                "code_snippet": "def _save_parents(self, cls, using, update_fields):",
                "file_pattern": "**/django/db/models/**/*.py",
                "function_names": [
                  "_save_parents",
                  "_save_table",
                  "_prepare_related_fields_for_save"
                ]
              },
              {
                "query": "check constraints and non-auto primary keys",
                "class_names": [
                  "CheckConstraint"
                ],
                "code_snippet": null,
                "file_pattern": "**/django/db/models/**/*.py",
                "function_names": [
                  "_check_constraints"
                ]
              }
            ]
          },
          "input_tokens": 5551,
          "output_tokens": 347,
          "retry_message": null,
          "completion_cost": 0.021858000000000002
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 141,
            "span_id": "ForeignKey",
            "file_path": "django/db/models/fields/related.py"
          },
          {
            "rank": 1,
            "tokens": 3,
            "span_id": "Deferred",
            "file_path": "django/db/models/base.py"
          },
          {
            "rank": 0,
            "tokens": 263,
            "span_id": "Model._save_parents",
            "file_path": "django/db/models/base.py"
          },
          {
            "rank": 0,
            "tokens": 583,
            "span_id": "Model._save_table",
            "file_path": "django/db/models/base.py"
          },
          {
            "rank": 0,
            "tokens": 340,
            "span_id": "Model._prepare_related_fields_for_save",
            "file_path": "django/db/models/base.py"
          },
          {
            "rank": 0,
            "tokens": 6,
            "span_id": "CheckConstraint",
            "file_path": "django/db/models/constraints.py"
          },
          {
            "rank": 0,
            "tokens": 941,
            "span_id": "Model._check_constraints",
            "file_path": "django/db/models/base.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about data loss when saving a parent object after setting it on a child object, specifically when the parent has a non-numeric primary key. The issue occurs due to the way Django handles the assignment and saving of foreign keys, particularly when using a CharField as a primary key. The relevant code spans need to cover the initialization and saving of model instances, particularly focusing on how foreign keys and primary keys are handled.\n\nFirst, I will review the provided context to see what relevant code spans have already been identified. I see that the context includes parts of the Model class from django/db/models/base.py, including the __init__ and save methods, which are crucial for understanding how model instances are created and saved. These methods also deal with the assignment of related objects.\n\nNext, I will go through the new search results to identify additional relevant code spans. In django/db/models/fields/related.py, I see the ForeignKey and OneToOneField classes, which are directly related to the foreign key relationship described in the issue. The __init__ method of ForeignKey is particularly interesting as it deals with the initialization of foreign key relationships, which might affect how primary keys are handled.\n\nIn django/db/models/base.py, additional methods such as _save_parents and _save_table are found, which could be relevant as they deal with saving related objects and the actual saving of model instances to the database.\n\nFinally, checking the class CheckConstraint in django/db/models/constraints.py, although does not directly address the foreign key assignment issue, is still relevant because it deals with constraints in the database schema. Given these findings, I believe there are enough identified code spans to provide a thorough understanding of the issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "ForeignKey",
                  "ForeignKey.__init__"
                ],
                "file_path": "django/db/models/fields/related.py"
              },
              {
                "span_ids": [
                  "Model",
                  "Model.__init__",
                  "Model.save",
                  "Model._save_parents",
                  "Model._save_table",
                  "Model._prepare_related_fields_for_save"
                ],
                "file_path": "django/db/models/base.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 7847,
          "output_tokens": 514,
          "retry_message": null,
          "completion_cost": 0.031251
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The provided file context contains the `Model` class from Django's ORM, particularly focusing on the `__init__`, `save`, `_save_parents`, `_save_table`, and `_prepare_related_fields_for_save` methods. These methods handle the initialization, saving, and relationship management of model instances, which are relevant to understanding the issue regarding saving related objects with non-auto primary keys. Additionally, the `ForeignKey` and `OneToOneField` classes from `related.py` are also included, which handle the definition and behavior of foreign key relationships in Django models. These are directly relevant to the reported issue as they involve the relationships between models and their primary keys. Given the context, it seems complete for addressing the issue since it covers the necessary components for understanding and potentially fixing the problem related to foreign keys and non-auto primary keys.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 5740,
          "output_tokens": 221,
          "retry_message": null,
          "completion_cost": 0.020534999999999998
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "Model._save_parents",
            "file_path": "django/db/models/base.py",
            "scratch_pad": "The issue reported involves data loss when saving a parent object after setting a related child object with a non-numeric primary key. This occurs if the primary key is set after initializing the relation, leading to the foreign key not being updated correctly. The solution involves ensuring that the foreign key is properly set during the save operation, even if the related object's primary key is set after the initial assignment.",
            "instructions": "Update the `_save_parents` method in the `Model` class to ensure that the foreign key is set correctly when the related object's primary key is updated after initial assignment. If the related object's primary key is not None and the foreign key attribute of the parent object is None, set the foreign key attribute to the related object's primary key. This will ensure that the foreign key in the parent object is always correctly set to the related object's primary key, preventing data loss."
          },
          "output": {
            "span_id": "Model._save_parents",
            "end_line": 807,
            "file_path": "django/db/models/base.py",
            "start_line": 781,
            "instructions": "Update the `_save_parents` method in the `Model` class to ensure that the foreign key is set correctly when the related object's primary key is updated after initial assignment. If the related object's primary key is not None and the foreign key attribute of the parent object is None, set the foreign key attribute to the related object's primary key. This will ensure that the foreign key in the parent object is always correctly set to the related object's primary key, preventing data loss."
          },
          "input_tokens": 6359,
          "output_tokens": 245,
          "retry_message": null,
          "completion_cost": 0.022752
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "Model._save_parents",
        "end_line": 807,
        "file_path": "django/db/models/base.py",
        "max_tokens": 1000,
        "start_line": 781,
        "temperature": 1.6,
        "instructions": "Update the `_save_parents` method in the `Model` class to ensure that the foreign key is set correctly when the related object's primary key is updated after initial assignment. If the related object's primary key is not None and the foreign key attribute of the parent object is None, set the foreign key attribute to the related object's primary key. This will ensure that the foreign key in the parent object is always correctly set to the related object's primary key, preventing data loss.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\n    def _save_parents(self, cls, using, update_fields):\n        \"\"\"Save all the parents of cls using values from self.\"\"\"\n        meta = cls._meta\n        inserted = False\n        for parent, field in meta.parents.items():\n            # Make sure the link fields are synced between parent and self.\n            if (field and getattr(self, parent._meta.pk.attname) is None and\n                    getattr(self, field.attname) is not None):\n                setattr(self, parent._meta.pk.attname, getattr(self, field.attname))\n            parent_inserted = self._save_parents(cls=parent, using=using, update_fields=update_fields)\n            updated = self._save_table(\n                cls=parent, using=using, update_fields=update_fields,\n                force_insert=parent_inserted,\n            )\n            if not updated:\n                inserted = True\n            # Set the parent's PK value to self.\n            if field:\n                parent_pk_val = self._get_pk_val(parent._meta)\n                if parent_pk_val is not None and getattr(self, field.attname) is None:\n                    setattr(self, field.attname, parent_pk_val)\n                # Since we didn't have an instance of the parent handy set\n                # attname directly, bypassing the descriptor. Invalidate\n                # the related object cache, in case it's been accidentally\n                # populated. A fresh instance will be re-built from the\n                # database if necessary.\n                if field.is_cached(self):\n                    field.delete_cached_value(self)\n        return inserted\n</replace>"
          },
          "output": {
            "diff": "--- django/db/models/base.py\n+++ django/db/models/base.py\n@@ -796,7 +796,9 @@\n                 inserted = True\n             # Set the parent's PK value to self.\n             if field:\n-                setattr(self, field.attname, self._get_pk_val(parent._meta))\n+                parent_pk_val = self._get_pk_val(parent._meta)\n+                if parent_pk_val is not None and getattr(self, field.attname) is None:\n+                    setattr(self, field.attname, parent_pk_val)\n                 # Since we didn't have an instance of the parent handy set\n                 # attname directly, bypassing the descriptor. Invalidate\n                 # the related object cache, in case it's been accidentally\n",
            "message": "Applied the change to django/db/models/base.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 7048,
          "output_tokens": 400,
          "retry_message": null,
          "completion_cost": 0.027144
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- django/db/models/base.py\n+++ django/db/models/base.py\n@@ -796,7 +796,9 @@\n                 inserted = True\n             # Set the parent's PK value to self.\n             if field:\n-                setattr(self, field.attname, self._get_pk_val(parent._meta))\n+                parent_pk_val = self._get_pk_val(parent._meta)\n+                if parent_pk_val is not None and getattr(self, field.attname) is None:\n+                    setattr(self, field.attname, parent_pk_val)\n                 # Since we didn't have an instance of the parent handy set\n                 # attname directly, bypassing the descriptor. Invalidate\n                 # the related object cache, in case it's been accidentally\n",
        "model": "deepseek-coder",
        "message": "Applied the change to django/db/models/base.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The change has been successfully applied and the issue of data loss when saving a parent object after setting a related child object with a non-numeric primary key should now be resolved.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The proposed change has been successfully applied to the `_save_parents` method in the `Model` class. This change ensures that if the related object's primary key is set after the initial assignment and the foreign key in the parent object is still None, the foreign key is updated to match the related object's primary key. This should address the issue of data loss when saving a parent object after setting a related child object with a non-numeric primary key.",
            "instructions": null
          },
          "output": {
            "message": "The change has been successfully applied and the issue of data loss when saving a parent object after setting a related child object with a non-numeric primary key should now be resolved."
          },
          "input_tokens": 6897,
          "output_tokens": 192,
          "retry_message": null,
          "completion_cost": 0.023571
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The change has been successfully applied and the issue of data loss when saving a parent object after setting a related child object with a non-numeric primary key should now be resolved.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Saving parent object after setting on child leads to data loss for parents with non-numeric primary key.\nDescription\n\t \n\t\t(last modified by Charlie DeTar)\n\t \nGiven a model with a foreign key relation to another model that has a non-auto CharField as its primary key:\nclass Product(models.Model):\n\tsku = models.CharField(primary_key=True, max_length=50)\nclass Order(models.Model):\n\tproduct = models.ForeignKey(Product, on_delete=models.CASCADE)\nIf the relation is initialized on the parent with an empty instance that does not yet specify its primary key, and the primary key is subsequently defined, the parent does not \"see\" the primary key's change:\nwith transaction.atomic():\n\torder = Order()\n\torder.product = Product()\n\torder.product.sku = \"foo\"\n\torder.product.save()\n\torder.save()\n\tassert Order.objects.filter(product_id=\"\").exists() # Succeeds, but shouldn't\n\tassert Order.objects.filter(product=order.product).exists() # Fails\nInstead of product_id being populated with product.sku, it is set to emptystring. The foreign key constraint which would enforce the existence of a product with sku=\"\" is deferred until the transaction commits. The transaction does correctly fail on commit with a ForeignKeyViolation due to the non-existence of a product with emptystring as its primary key.\nOn the other hand, if the related unsaved instance is initialized with its primary key before assignment to the parent, it is persisted correctly:\nwith transaction.atomic():\n\torder = Order()\n\torder.product = Product(sku=\"foo\")\n\torder.product.save()\n\torder.save()\n\tassert Order.objects.filter(product=order.product).exists() # succeeds\nCommitting the transaction also succeeds.\nThis may have something to do with how the Order.product_id field is handled at assignment, together with something about handling fetching of auto vs non-auto primary keys from the related instance.\n"
}