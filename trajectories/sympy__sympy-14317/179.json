{
  "info": {
    "duration": 267.73542046546936,
    "submission": "diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py\nindex 737e16cc74..08e4ab8502 100644\n--- a/sympy/printing/latex.py\n+++ b/sympy/printing/latex.py\n@@ -1858,6 +1858,10 @@ def _print_Poly(self, poly):\n         gens = list(map(self._print, poly.gens))\n         domain = \"domain=%s\" % self._print(poly.get_domain())\n \n+        terms = poly.terms()\n+        terms = sorted(terms, key=lambda term: term[0], reverse=True)\n+        expr = \" + \".join(self._print(poly.ring.term_new(term[0], term[1])) for term in terms)\n+\n         args = \", \".join([expr] + gens + [domain])\n         if cls in accepted_latex_functions:\n             tex = r\"\\%s {\\left (%s \\right )}\" % (cls, args)\n",
    "total_cost": 0.16886700000000002,
    "instance_id": "sympy__sympy-14317",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue indicates that the LaTeX printer for Poly objects does not order monomials correctly, unlike the str and pretty printers. Based on the provided file context, it's evident that the LatexPrinter class in sympy/printing/latex.py contains a method _print_Poly which is likely responsible for the LaTeX representation of Poly objects. Additionally, the PolyElement class in sympy/polys/rings.py has a method _sorted which might be involved in sorting the monomials. To resolve the issue, focus on these two areas to ensure the LaTeX printer aligns with the order used by the str and pretty printers.",
            "search_requests": [
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/printing/latex.py",
                "function_names": [
                  "_print_Poly"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/polys/rings.py",
                "function_names": [
                  "_sorted"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 123,
                "span_id": "LatexPrinter._print_Poly",
                "file_path": "sympy/printing/latex.py"
              },
              {
                "rank": 0,
                "tokens": 72,
                "span_id": "PolyElement._sorted",
                "file_path": "sympy/polys/rings.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/printing/latex.py",
                "function_names": [
                  "_print_Poly"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/polys/rings.py",
                "function_names": [
                  "_sorted"
                ]
              }
            ]
          },
          "input_tokens": 3081,
          "output_tokens": 225,
          "retry_message": null,
          "completion_cost": 0.012617999999999999
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 123,
            "span_id": "LatexPrinter._print_Poly",
            "file_path": "sympy/printing/latex.py"
          },
          {
            "rank": 0,
            "tokens": 72,
            "span_id": "PolyElement._sorted",
            "file_path": "sympy/polys/rings.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue indicates that the LaTeX printer for a Poly object does not maintain the same order of monomials as the str and pretty printers. From the search results, it's evident that the `LatexPrinter` class in `sympy/printing/latex.py` is responsible for LaTeX printing. The method `_print_Poly` in this class directly deals with printing `Poly` objects but does not seem to enforce any specific order for the monomials. This aligns with the issue statement as it points out that the LaTeX printer does not sort the monomials in descending order of degrees. Additionally, the `PolyElement` class in `sympy/polys/rings.py` includes a method `_sorted` that sorts monomials according to specified orders but this isn't utilized in the `_print_Poly` method.\n\nTo address the issue, we would need to modify the `_print_Poly` method to ensure that the monomials are sorted before they are printed in LaTeX format. We would likely need to use the `_sorted` method from the `PolyElement` class to achieve this sorting. However, only the `LatexPrinter` and its `_print_Poly` method directly relate to the LaTeX printing of `Poly` objects, making them the most relevant spans to address the reported issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "LatexPrinter",
                  "LatexPrinter.__init__",
                  "LatexPrinter._print_Poly"
                ],
                "file_path": "sympy/printing/latex.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 1895,
          "output_tokens": 350,
          "retry_message": null,
          "completion_cost": 0.010935
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The issue indicates that the LaTeX printer for Poly objects does not order monomials correctly, unlike the str and pretty printers. Based on the provided file context, it's evident that the LatexPrinter class in sympy/printing/latex.py contains a method _print_Poly which is likely responsible for the LaTeX representation of Poly objects. Additionally, the PolyElement class in sympy/polys/rings.py has a method _sorted which might be involved in sorting the monomials. To resolve the issue, focus on these two areas to ensure the LaTeX printer aligns with the order used by the str and pretty printers.",
            "search_suggestions": "Check the PolyElement class in sympy/polys/rings.py for the method _sorted and any other related methods that might affect the ordering of monomials."
          },
          "output": {
            "message": "Check the PolyElement class in sympy/polys/rings.py for the method _sorted and any other related methods that might affect the ordering of monomials."
          },
          "input_tokens": 2562,
          "output_tokens": 197,
          "retry_message": null,
          "completion_cost": 0.010641000000000001
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Check the PolyElement class in sympy/polys/rings.py for the method _sorted and any other related methods that might affect the ordering of monomials.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The provided file context for sympy/printing/latex.py shows the implementation of the _print_Poly method in the LatexPrinter class. However, the method does not explicitly order monomials; it simply converts the polynomial expression to its LaTeX representation. Therefore, the ordering of monomials in LaTeX might be affected by the way the polynomial is converted to an expression. There isn't an explicit sorting in this method based on the monomials' degrees mentioned in the issue. Further investigation in the PolyElement class in sympy/polys/rings.py is warranted to find the method _sorted and other related methods that might affect the ordering of monomials.",
            "search_requests": [
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/polys/rings.py",
                "function_names": [
                  "_sorted"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 72,
                "span_id": "PolyElement._sorted",
                "file_path": "sympy/polys/rings.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/polys/rings.py",
                "function_names": [
                  "_sorted"
                ]
              }
            ]
          },
          "input_tokens": 4809,
          "output_tokens": 226,
          "retry_message": null,
          "completion_cost": 0.017817
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 72,
            "span_id": "PolyElement._sorted",
            "file_path": "sympy/polys/rings.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The issue reported pertains to the order of monomials in the LaTeX printer for Poly objects, which does not match the logical order used by the str and pretty printers. Both str and pretty printers use the logical order from highest to lowest degrees, while the LaTeX printer does not. The relevant code spans to address this issue are located in the `_print_Poly` method of the `LatexPrinter` class in the file `sympy/printing/latex.py`. This method constructs the LaTeX representation of a Poly object by converting it to an expression and then formatting it. The order of monomials is crucial to match the behavior of str and pretty printers. Additionally, the `_sorted` method in the `PolyElement` class of the file `sympy/polys/rings.py` is relevant because it sorts the monomials according to the specified order, which should be used to ensure consistent order in the LaTeX printer. Therefore, these two methods are critical in addressing the reported issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "LatexPrinter._print_Poly"
                ],
                "file_path": "sympy/printing/latex.py"
              },
              {
                "span_ids": [
                  "PolyElement._sorted"
                ],
                "file_path": "sympy/polys/rings.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 2812,
          "output_tokens": 315,
          "retry_message": null,
          "completion_cost": 0.013161
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The provided file context for sympy/printing/latex.py shows the implementation of the _print_Poly method in the LatexPrinter class. However, the method does not explicitly order monomials; it simply converts the polynomial expression to its LaTeX representation. Therefore, the ordering of monomials in LaTeX might be affected by the way the polynomial is converted to an expression. There isn't an explicit sorting in this method based on the monomials' degrees mentioned in the issue. Further investigation in the PolyElement class in sympy/polys/rings.py is warranted to find the method _sorted and other related methods that might affect the ordering of monomials.",
            "search_suggestions": "Investigate the methods in the PolyElement class in sympy/polys/rings.py to find how the monomials are sorted, such as the _sorted method, and how this order is used or transferred to the LaTeX representation."
          },
          "output": {
            "message": "Investigate the methods in the PolyElement class in sympy/polys/rings.py to find how the monomials are sorted, such as the _sorted method, and how this order is used or transferred to the LaTeX representation."
          },
          "input_tokens": 2729,
          "output_tokens": 217,
          "retry_message": null,
          "completion_cost": 0.011442
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Investigate the methods in the PolyElement class in sympy/polys/rings.py to find how the monomials are sorted, such as the _sorted method, and how this order is used or transferred to the LaTeX representation.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The PolyElement class in sympy/polys/rings.py contains the method _sorted which is responsible for sorting monomials based on the given order. This method uses the ring's order to sort monomials or accepts an explicit order if provided. The sorting is done in a specific direction depending on the order type. The immediate task is to ensure that this sorted order is suitably used when constructing the LaTeX representation of polynomials in the _print_Poly method within the LatexPrinter class in sympy/printing/latex.py. It's evident that the _print_Poly method converts the polynomial expression to LaTeX without an explicit call to sort the monomials based on their degrees, leading to discrepancy in the order of monomials as seen in the str and pretty printers. The solution involves integrating the sorting logic of the _sorted method into the _print_Poly method to ensure consistent ordering of monomials across all print styles.",
            "search_requests": [
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/printing/latex.py",
                "function_names": [
                  "_print_Poly"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 123,
                "span_id": "LatexPrinter._print_Poly",
                "file_path": "sympy/printing/latex.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/printing/latex.py",
                "function_names": [
                  "_print_Poly"
                ]
              }
            ]
          },
          "input_tokens": 5250,
          "output_tokens": 280,
          "retry_message": null,
          "completion_cost": 0.01995
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 123,
            "span_id": "LatexPrinter._print_Poly",
            "file_path": "sympy/printing/latex.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is concerned with the consistency in the order of monomials when printing a Poly using different printers (str, pretty, and latex). The str and pretty printers use the logical order from highest to lowest degrees, but the latex printer does not. Upon analyzing the code context, the focus is on the LatexPrinter class in the 'sympy/printing/latex.py' file. Specifically, the issue is likely rooted in the _print_Poly method of the LatexPrinter class, which is responsible for generating the LaTeX representation of the Poly. The method currently does not sort the monomials before converting them to LaTeX, which results in the inconsistent order. Further inspection of the context reveals no direct sorting mechanism applied in _print_Poly. There are no new search results provided affecting this part of the code. This indicates that the modification necessary to address the issue might need to be implemented in the _print_Poly method by integrating a sorting mechanism based on the monomial degrees.",
            "identified_spans": [
              {
                "span_ids": [
                  "LatexPrinter._print_Poly"
                ],
                "file_path": "sympy/printing/latex.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3349,
          "output_tokens": 270,
          "retry_message": null,
          "completion_cost": 0.014097
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context provided includes the relevant classes and methods necessary for addressing the issue. Specifically, the PolyElement class in sympy/polys/rings.py contains the _sorted method, which is crucial for sorting monomials in the desired order. Additionally, the LatexPrinter class in sympy/printing/latex.py contains the _print_Poly method, which needs to be modified to incorporate the sorting of monomials. The provided code snippets clearly indicate where the sorting logic from PolyElement._sorted should be integrated into the LaTeX printing process in LatexPrinter._print_Poly. As such, all relevant code necessary for addressing the reported issue is present in the file context, and the task can be completed based on the provided context.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 2782,
          "output_tokens": 187,
          "retry_message": null,
          "completion_cost": 0.011151000000000001
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "LatexPrinter._print_Poly",
            "file_path": "sympy/printing/latex.py",
            "scratch_pad": "The current implementation of the LaTeX printer for Polynomial objects does not respect the same order of monomials as the str and pretty printers. We need to ensure that the monomials are sorted in the same way when converting the polynomial to LaTeX format.",
            "instructions": "Update the _print_Poly method in the LatexPrinter class to sort the monomials of the polynomial in descending order before converting them to LaTeX format, similar to how it's done in the str and pretty printers."
          },
          "output": {
            "span_id": "LatexPrinter._print_Poly",
            "end_line": 1867,
            "file_path": "sympy/printing/latex.py",
            "start_line": 1855,
            "instructions": "Update the _print_Poly method in the LatexPrinter class to sort the monomials of the polynomial in descending order before converting them to LaTeX format, similar to how it's done in the str and pretty printers."
          },
          "input_tokens": 2923,
          "output_tokens": 154,
          "retry_message": null,
          "completion_cost": 0.011079
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "LatexPrinter._print_Poly",
        "end_line": 1867,
        "file_path": "sympy/printing/latex.py",
        "max_tokens": 1000,
        "start_line": 1855,
        "temperature": 1.6,
        "instructions": "Update the _print_Poly method in the LatexPrinter class to sort the monomials of the polynomial in descending order before converting them to LaTeX format, similar to how it's done in the str and pretty printers.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\n    def _print_Poly(self, poly):\n        cls = poly.__class__.__name__\n        expr = self._print(poly.as_expr())\n        gens = list(map(self._print, poly.gens))\n        domain = \"domain=%s\" % self._print(poly.get_domain())\n\n        terms = poly.terms()\n        terms = sorted(terms, key=lambda term: term[0], reverse=True)\n        expr = \" + \".join(self._print(poly.ring.term_new(term[0], term[1])) for term in terms)\n\n        args = \", \".join([expr] + gens + [domain])\n        if cls in accepted_latex_functions:\n            tex = r\"\\%s {\\left (%s \\right )}\" % (cls, args)\n        else:\n            tex = r\"\\operatorname{%s}{\\left( %s \\right)}\" % (cls, args)\n\n        return tex\n</replace>"
          },
          "output": {
            "diff": "--- sympy/printing/latex.py\n+++ sympy/printing/latex.py\n@@ -1858,6 +1858,10 @@\n         gens = list(map(self._print, poly.gens))\n         domain = \"domain=%s\" % self._print(poly.get_domain())\n \n+        terms = poly.terms()\n+        terms = sorted(terms, key=lambda term: term[0], reverse=True)\n+        expr = \" + \".join(self._print(poly.ring.term_new(term[0], term[1])) for term in terms)\n+\n         args = \", \".join([expr] + gens + [domain])\n         if cls in accepted_latex_functions:\n             tex = r\"\\%s {\\left (%s \\right )}\" % (cls, args)\n",
            "message": "Applied the change to sympy/printing/latex.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 2692,
          "output_tokens": 230,
          "retry_message": null,
          "completion_cost": 0.011526
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sympy/printing/latex.py\n+++ sympy/printing/latex.py\n@@ -1858,6 +1858,10 @@\n         gens = list(map(self._print, poly.gens))\n         domain = \"domain=%s\" % self._print(poly.get_domain())\n \n+        terms = poly.terms()\n+        terms = sorted(terms, key=lambda term: term[0], reverse=True)\n+        expr = \" + \".join(self._print(poly.ring.term_new(term[0], term[1])) for term in terms)\n+\n         args = \", \".join([expr] + gens + [domain])\n         if cls in accepted_latex_functions:\n             tex = r\"\\%s {\\left (%s \\right )}\" % (cls, args)\n",
        "model": "deepseek-coder",
        "message": "Applied the change to sympy/printing/latex.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "review",
            "finish": null,
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The change applied to the _print_Poly method in the LatexPrinter class updates the sorting of monomials for latex printing to match the order used by the str and pretty printers. This ensures that the monomials are presented in descending order of their degrees, which is the expected behavior.",
            "instructions": null
          },
          "output": null,
          "input_tokens": 3393,
          "output_tokens": 118,
          "retry_message": "Review isn't possible. If the change is done you can finish or reject the task.",
          "completion_cost": 0.011949000000000001
        },
        {
          "action": {
            "action": "finish",
            "finish": "All necessary changes have been implemented.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The change has been applied correctly to the _print_Poly method in the LatexPrinter class to ensure the monomials are sorted in descending order for latex printing, aligning with the behavior of the str and pretty printers. No further changes are necessary, and the issue can be considered resolved.",
            "instructions": null
          },
          "output": {
            "message": "All necessary changes have been implemented."
          },
          "input_tokens": 3537,
          "output_tokens": 126,
          "retry_message": null,
          "completion_cost": 0.012501
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "All necessary changes have been implemented.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "LaTeX printer does not use the same order of monomials as pretty and str \nWhen printing a Poly, the str and pretty printers use the logical order of monomials, from highest to lowest degrees. But latex printer does not. \r\n```\r\n>>> var('a b c x')\r\n>>> p = Poly([a, 1, b, 2, c, 3], x)\r\n>>> p\r\nPoly(a*x**5 + x**4 + b*x**3 + 2*x**2 + c*x + 3, x, domain='ZZ[a,b,c]')\r\n>>> pretty(p)\r\n\"Poly(a*x**5 + x**4 + b*x**3 + 2*x**2 + c*x + 3, x, domain='ZZ[a,b,c]')\"\r\n>>> latex(p)\r\n'\\\\operatorname{Poly}{\\\\left( a x^{5} + b x^{3} + c x + x^{4} + 2 x^{2} + 3, x, domain=\\\\mathbb{Z}\\\\left[a, b, c\\\\right] \\\\right)}'\r\n```\n"
}