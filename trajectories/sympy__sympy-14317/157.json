{
  "info": {
    "error": "Traceback (most recent call last):\n  File \"/workspace/moatless/moatless-tools/driver/run_moatless.py\", line 89, in run_moatless_core\n    response = loop.run(problem_statement)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/workspace/moatless/moatless-tools/moatless/loop.py\", line 179, in run\n    self._run()\n  File \"/workspace/moatless/moatless-tools/moatless/loop.py\", line 378, in _run\n    action, cost, input_tokens, output_tokens = self._next_action()\n                                                ^^^^^^^^^^^^^^^^^^^\n  File \"/workspace/moatless/moatless-tools/moatless/loop.py\", line 601, in _next_action\n    raise e\n  File \"/workspace/moatless/moatless-tools/moatless/loop.py\", line 587, in _next_action\n    client.chat.completions.create_with_completion(\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/client.py\", line 223, in create_with_completion\n    model = self.create_fn(\n            ^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/patch.py\", line 143, in new_create_sync\n    response = retry_sync(\n               ^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/retry.py\", line 151, in retry_sync\n    for attempt in max_retries:\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/tenacity/__init__.py\", line 443, in __iter__\n    do = self.iter(retry_state=retry_state)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/tenacity/__init__.py\", line 376, in iter\n    result = action(retry_state)\n             ^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/tenacity/__init__.py\", line 418, in exc_check\n    raise retry_exc.reraise()\n          ^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/tenacity/__init__.py\", line 185, in reraise\n    raise self.last_attempt.result()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/concurrent/futures/_base.py\", line 449, in result\n    return self.__get_result()\n           ^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/concurrent/futures/_base.py\", line 401, in __get_result\n    raise self._exception\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/retry.py\", line 175, in retry_sync\n    raise e\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/retry.py\", line 157, in retry_sync\n    return process_response(\n           ^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/process_response.py\", line 144, in process_response\n    model = response_model.from_response(\n            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/function_calls.py\", line 125, in from_response\n    return cls.parse_json(completion, validation_context, strict)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/instructor/function_calls.py\", line 273, in parse_json\n    return cls.model_validate_json(\n           ^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/jordan/miniconda3/envs/moatless/lib/python3.12/site-packages/pydantic/main.py\", line 580, in model_validate_json\n    return cls.__pydantic_validator__.validate_json(json_data, strict=strict, context=context)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\npydantic_core._pydantic_core.ValidationError: 1 validation error for Search\n  Invalid JSON: trailing characters at line 4 column 5 [type=json_invalid, input_value='{\\n        \"key\": \"value...yError: Missing key {e}', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.7/v/json_invalid\n",
    "duration": 228.65507769584656,
    "submission": "",
    "total_cost": 0.12117000000000001,
    "instance_id": "sympy__sympy-14317",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue indicates a discrepancy in the order of monomials when using the LaTeX printer for a Poly object compared to the str and pretty printers. The LaTeX printer does not maintain the same logical order, which is from highest to lowest degrees, as the other printers. To address this, we need to locate the specific method in the LaTeX printer responsible for printing Poly objects and verify its implementation against the order of monomials. Additionally, we should ensure that relevant sorting or ordering logic is consistently applied across different printing methods.",
            "search_requests": [
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sympy/printing/latex.py",
                "function_names": [
                  "_print_Poly"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 123,
                "span_id": "LatexPrinter._print_Poly",
                "file_path": "sympy/printing/latex.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sympy/printing/latex.py",
                "function_names": [
                  "_print_Poly"
                ]
              }
            ]
          },
          "input_tokens": 3081,
          "output_tokens": 174,
          "retry_message": null,
          "completion_cost": 0.011852999999999999
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 123,
            "span_id": "LatexPrinter._print_Poly",
            "file_path": "sympy/printing/latex.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue specifically points out that the LaTeX printer for a Poly object does not maintain the same order of monomials as the pretty and str printers. This discrepancy is observed when printing a Poly instance. Upon analyzing the provided search results, particularly the `_print_Poly` method within the `LatexPrinter` class in `sympy/printing/latex.py`, it becomes clear that the issue lies in how the LaTeX printer processes the polynomial expressions. By focusing on the `_print_Poly` method, we observe that it converts the polynomial to an expression using `poly.as_expr()` and then prints it without explicitly sorting the monomials based on their degrees. This omission leads to inconsistencies with the order seen in the pretty and str printers. To address this, modifications will be needed in the `_print_Poly` method to ensure the monomials are sorted in descending order of their degrees before being converted to LaTeX format.",
            "identified_spans": [
              {
                "span_ids": [
                  "LatexPrinter",
                  "LatexPrinter.__init__",
                  "LatexPrinter._print_Poly"
                ],
                "file_path": "sympy/printing/latex.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 1712,
          "output_tokens": 277,
          "retry_message": null,
          "completion_cost": 0.009291
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The file context provided shows the implementation of the _print_Poly method in the LatexPrinter class. This method converts a Poly object into its LaTeX representation by first converting the polynomial to an expression and then formatting it along with its generators and domain. Notably, the method does not explicitly handle the sorting of monomials according to the highest to lowest degree, which explains the discrepancy mentioned in the issue. To fully address the issue and ensure the LaTeX printer maintains the same order as the str and pretty printers, additional sorting logic needs to be implemented within the _print_Poly method. The current implementation only handles the basic conversion without addressing monomial order.",
            "search_suggestions": "Identify methods in the str and pretty printers that handle the monomial order and incorporate similar logic into the _print_Poly method of the LaTeX printer. Additionally, inspect Poly's as_expr method for any implicit ordering assumptions and ensure consistent handling across all printer methods."
          },
          "output": {
            "message": "Identify methods in the str and pretty printers that handle the monomial order and incorporate similar logic into the _print_Poly method of the LaTeX printer. Additionally, inspect Poly's as_expr method for any implicit ordering assumptions and ensure consistent handling across all printer methods."
          },
          "input_tokens": 2537,
          "output_tokens": 220,
          "retry_message": null,
          "completion_cost": 0.010911
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Identify methods in the str and pretty printers that handle the monomial order and incorporate similar logic into the _print_Poly method of the LaTeX printer. Additionally, inspect Poly's as_expr method for any implicit ordering assumptions and ensure consistent handling across all printer methods.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "To resolve the discrepancy in the order of monomials across different printers, we need to identify the methods in the str and pretty printers that handle the order of monomials and incorporate similar logic into the _print_Poly method of the LaTeX printer. Additionally, we should inspect Poly's as_expr method for any implicit ordering assumptions and ensure consistent handling across all printer methods. The identified file context shows the _print_Poly method in LaTeX printer, which currently prints the polynomial expression without explicitly considering the order of monomials. We will now formulate search requests to locate the relevant methods in the str and pretty printers and examine Poly's as_expr method.",
            "search_requests": [
              {
                "query": "method to print Poly with monomial order",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sympy/printing/str.py",
                "function_names": [
                  "_print_Poly"
                ]
              },
              {
                "query": "method to print Poly with monomial order",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sympy/printing/pretty/pretty.py",
                "function_names": [
                  "_print_Poly"
                ]
              },
              {
                "query": "method for expression of Poly ensuring consistent order",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sympy/polys/polytools.py",
                "function_names": [
                  "as_expr"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 406,
                "span_id": "StrPrinter._print_Poly",
                "file_path": "sympy/printing/str.py"
              },
              {
                "rank": 0,
                "tokens": 230,
                "span_id": "Poly.as_expr",
                "file_path": "sympy/polys/polytools.py"
              }
            ],
            "search_requests": [
              {
                "query": "method to print Poly with monomial order",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sympy/printing/str.py",
                "function_names": [
                  "_print_Poly"
                ]
              },
              {
                "query": "method to print Poly with monomial order",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sympy/printing/pretty/pretty.py",
                "function_names": [
                  "_print_Poly"
                ]
              },
              {
                "query": "method for expression of Poly ensuring consistent order",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sympy/polys/polytools.py",
                "function_names": [
                  "as_expr"
                ]
              }
            ]
          },
          "input_tokens": 4744,
          "output_tokens": 383,
          "retry_message": null,
          "completion_cost": 0.019977
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 406,
            "span_id": "StrPrinter._print_Poly",
            "file_path": "sympy/printing/str.py"
          },
          {
            "rank": 0,
            "tokens": 230,
            "span_id": "Poly.as_expr",
            "file_path": "sympy/polys/polytools.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "I began by analyzing the reported issue which highlighted a discrepancy in the order of monomials printed by different printers (str, pretty, and latex). The latex printer does not follow the logical order from highest to lowest degrees as the other two do. I then reviewed the current file context provided in the <file_context> tag, which included the LatexPrinter class and its method _print_Poly within sympy/printing/latex.py. This method constructs the LaTeX representation of a Poly object but does not explicitly sort the monomials as required by the issue. I proceeded to process the new search results, starting with sympy/printing/str.py. The StrPrinter class and its method _print_Poly were inspected. This method formats the Poly object for string representation and does sort the monomials by degrees correctly, providing a template for the required fix. The sympy/polys/polytools.py file was then checked, specifically the Poly class and its method as_expr. This method converts a polynomial to an expression, which is later formatted by the printer methods. However, this file does not directly relate to the printing order issue. From my analysis, the primary change needed to address the issue is within the _print_Poly method of the LatexPrinter class in sympy/printing/latex.py to introduce a sorting mechanism for the monomials before constructing the LaTeX representation. The sympy/printing/str.py provides a good example of how to implement this sorting.",
            "identified_spans": [
              {
                "span_ids": [
                  "LatexPrinter._print_Poly"
                ],
                "file_path": "sympy/printing/latex.py"
              },
              {
                "span_ids": [
                  "StrPrinter._print_Poly"
                ],
                "file_path": "sympy/printing/str.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3573,
          "output_tokens": 417,
          "retry_message": null,
          "completion_cost": 0.016974000000000003
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The issue pertains to the order of monomials in the LaTeX printer for polynomials, which does not match the order used by the str and pretty printers. The analysis of the file context reveals that the _print_Poly method in the LaTeX printer does not explicitly handle the order of monomials, as it directly relies on the expression generated by poly.as_expr(). A similar handling of monomial order is found in the _print_Poly method of the StrPrinter, which suggests that the LaTeX printer should incorporate the same logic for consistent behavior. The lack of explicit ordering in the LaTeX printer indicates that there may be an implicit assumption in poly.as_expr() that needs further inspection. Therefore, further searching for the relevant methods in the pretty printer and poly.as_expr() is necessary to ensure the task is fully complete.",
            "search_suggestions": "Look for the _print_Poly method in the pretty printer and poly.as_expr() method to identify how the order of monomials is handled in those cases."
          },
          "output": {
            "message": "Look for the _print_Poly method in the pretty printer and poly.as_expr() method to identify how the order of monomials is handled in those cases."
          },
          "input_tokens": 3272,
          "output_tokens": 236,
          "retry_message": null,
          "completion_cost": 0.013356
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look for the _print_Poly method in the pretty printer and poly.as_expr() method to identify how the order of monomials is handled in those cases.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "To ensure consistency in the order of monomials across different printers, we need to examine how the order is handled in the str and pretty printers' _print_Poly methods and incorporate similar logic into the LaTeX printer's _print_Poly method. Additionally, we need to inspect Poly's as_expr method for any implicit ordering assumptions.",
            "search_requests": [
              {
                "query": null,
                "class_names": [],
                "code_snippet": "_print_Poly",
                "file_pattern": "sympy/printing/str.py",
                "function_names": [
                  "_print_Poly"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": "_print_Poly",
                "file_pattern": "sympy/printing/pretty/pretty.py",
                "function_names": [
                  "_print_Poly"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": "as_expr",
                "file_pattern": "sympy/polys/polytools.py",
                "function_names": [
                  "as_expr"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 406,
                "span_id": "StrPrinter._print_Poly",
                "file_path": "sympy/printing/str.py"
              },
              {
                "rank": 0,
                "tokens": 230,
                "span_id": "Poly.as_expr",
                "file_path": "sympy/polys/polytools.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [],
                "code_snippet": "_print_Poly",
                "file_pattern": "sympy/printing/str.py",
                "function_names": [
                  "_print_Poly"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": "_print_Poly",
                "file_pattern": "sympy/printing/pretty/pretty.py",
                "function_names": [
                  "_print_Poly"
                ]
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": "as_expr",
                "file_pattern": "sympy/polys/polytools.py",
                "function_names": [
                  "as_expr"
                ]
              }
            ]
          },
          "input_tokens": 5873,
          "output_tokens": 309,
          "retry_message": null,
          "completion_cost": 0.022254
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 406,
            "span_id": "StrPrinter._print_Poly",
            "file_path": "sympy/printing/str.py"
          },
          {
            "rank": 0,
            "tokens": 230,
            "span_id": "Poly.as_expr",
            "file_path": "sympy/polys/polytools.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue points out that the LaTeX printer does not maintain the same order of monomials as the str and pretty printers for printing a Poly. The provided file context includes sections of the LatexPrinter and StrPrinter classes, specifically focusing on their methods for handling the printing of Poly objects. \n\nIn the LatexPrinter class, the _print_Poly method does not seem to explicitly sort the monomials, which might explain the discrepancy in order. On the other hand, the StrPrinter's _print_Poly method constructs the string representation by iterating through the terms of the polynomial and appending them to a list, which inherently maintains the order of monomials. \n\nThe new search results do not present any new methods or significant changes to the existing methods that would affect the order of monomials. Therefore, the most logical place to address the issue would be within the LatexPrinter's _print_Poly method, where an ordering step could be added before constructing the LaTeX string. However, the current search results do not provide a direct solution to the issue.",
            "identified_spans": null
          },
          "output": {
            "message": "The search returned 2 results. But unfortunately, I didn\u2019t find any of the search results relevant to the query.\n\nThe reported issue points out that the LaTeX printer does not maintain the same order of monomials as the str and pretty printers for printing a Poly. The provided file context includes sections of the LatexPrinter and StrPrinter classes, specifically focusing on their methods for handling the printing of Poly objects. \n\nIn the LatexPrinter class, the _print_Poly method does not seem to explicitly sort the monomials, which might explain the discrepancy in order. On the other hand, the StrPrinter's _print_Poly method constructs the string representation by iterating through the terms of the polynomial and appending them to a list, which inherently maintains the order of monomials. \n\nThe new search results do not present any new methods or significant changes to the existing methods that would affect the order of monomials. Therefore, the most logical place to address the issue would be within the LatexPrinter's _print_Poly method, where an ordering step could be added before constructing the LaTeX string. However, the current search results do not provide a direct solution to the issue."
          },
          "input_tokens": 4303,
          "output_tokens": 243,
          "retry_message": null,
          "completion_cost": 0.016554
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "The search returned 2 results. But unfortunately, I didn\u2019t find any of the search results relevant to the query.\n\nThe reported issue points out that the LaTeX printer does not maintain the same order of monomials as the str and pretty printers for printing a Poly. The provided file context includes sections of the LatexPrinter and StrPrinter classes, specifically focusing on their methods for handling the printing of Poly objects. \n\nIn the LatexPrinter class, the _print_Poly method does not seem to explicitly sort the monomials, which might explain the discrepancy in order. On the other hand, the StrPrinter's _print_Poly method constructs the string representation by iterating through the terms of the polynomial and appending them to a list, which inherently maintains the order of monomials. \n\nThe new search results do not present any new methods or significant changes to the existing methods that would affect the order of monomials. Therefore, the most logical place to address the issue would be within the LatexPrinter's _print_Poly method, where an ordering step could be added before constructing the LaTeX string. However, the current search results do not provide a direct solution to the issue.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": []
    }
  ],
  "initial_message": "LaTeX printer does not use the same order of monomials as pretty and str \nWhen printing a Poly, the str and pretty printers use the logical order of monomials, from highest to lowest degrees. But latex printer does not. \r\n```\r\n>>> var('a b c x')\r\n>>> p = Poly([a, 1, b, 2, c, 3], x)\r\n>>> p\r\nPoly(a*x**5 + x**4 + b*x**3 + 2*x**2 + c*x + 3, x, domain='ZZ[a,b,c]')\r\n>>> pretty(p)\r\n\"Poly(a*x**5 + x**4 + b*x**3 + 2*x**2 + c*x + 3, x, domain='ZZ[a,b,c]')\"\r\n>>> latex(p)\r\n'\\\\operatorname{Poly}{\\\\left( a x^{5} + b x^{3} + c x + x^{4} + 2 x^{2} + 3, x, domain=\\\\mathbb{Z}\\\\left[a, b, c\\\\right] \\\\right)}'\r\n```\n"
}