{
  "info": {
    "duration": 261.54533195495605,
    "submission": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 75349099..c87a925d 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1242,6 +1242,9 @@ class PairGrid(Grid):\n         super().__init__()\n \n         # Sort out the variables that define the grid\n+        if isinstance(data.columns, pd.MultiIndex):\n+            data.columns = [\"\".join(column) for column in data.columns]\n+\n         numeric_cols = self._find_numeric_cols(data)\n         if hue in numeric_cols:\n             numeric_cols.remove(hue)\n",
    "total_cost": 0.254433,
    "instance_id": "mwaskom__seaborn-3407",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves a KeyError when using `pairplot` with a MultiIndex DataFrame. The error occurs when trying to access a variable from the DataFrame. This suggests that the MultiIndex DataFrame handling within the `pairplot` function might not be properly supporting MultiIndex columns. Given the stack trace and the fact that the error occurs within the `map_diag` method of the `PairGrid` class, it's important to focus on these areas in the codebase. Additionally, considering the workaround involves flattening the columns, it implies that the function might not be designed to handle MultiIndex directly. Therefore, we should search for the `PairGrid` class and the `pairplot` function to determine how MultiIndex DataFrame columns are handled and potentially identify a missing feature or bug related to this functionality.",
            "search_requests": [
              {
                "query": "MultiIndex DataFrame handling",
                "class_names": [
                  "PairGrid"
                ],
                "code_snippet": null,
                "file_pattern": null,
                "function_names": [
                  "pairplot"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 130,
                "span_id": "PairGrid",
                "file_path": "seaborn/axisgrid.py"
              },
              {
                "rank": 0,
                "tokens": 1506,
                "span_id": "pairplot",
                "file_path": "seaborn/axisgrid.py"
              }
            ],
            "search_requests": [
              {
                "query": "MultiIndex DataFrame handling",
                "class_names": [
                  "PairGrid"
                ],
                "code_snippet": null,
                "file_pattern": null,
                "function_names": [
                  "pairplot"
                ]
              }
            ]
          },
          "input_tokens": 5121,
          "output_tokens": 235,
          "retry_message": null,
          "completion_cost": 0.018888
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 130,
            "span_id": "PairGrid",
            "file_path": "seaborn/axisgrid.py"
          },
          {
            "rank": 0,
            "tokens": 1506,
            "span_id": "pairplot",
            "file_path": "seaborn/axisgrid.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves a `KeyError` when using `pairplot` with a MultiIndex DataFrame in the seaborn library. The traceback indicates that the error occurs in the `map_diag` method of the `PairGrid` class. To address this issue, I need to identify the relevant sections of the code that handle the interactions with MultiIndex DataFrames and the generation of `pairplots`. The search results contain several key sections: the `imports` section which sets up the environment for the code, the `PairGrid.__init__` method where the grid is initialized, and the `PairGrid.map_diag` method where the actual error occurs. These sections are critical as they involve the setup and execution of the `pairplot` function, particularly in how they interact with the DataFrame's columns. By focusing on these sections, I can pinpoint where the handling of MultiIndex DataFrames may be lacking or incorrect, and thus identify the relevant code spans.",
            "identified_spans": [
              {
                "span_ids": [
                  "PairGrid.__init__",
                  "PairGrid.map_diag"
                ],
                "file_path": "seaborn/axisgrid.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 5401,
          "output_tokens": 281,
          "retry_message": null,
          "completion_cost": 0.020418000000000002
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The file context provided is the `seaborn/axisgrid.py` file, which contains the `PairGrid` class and the `map_diag` method where the error occurs. This confirms that the relevant part of the codebase for the reported issue is provided. The error suggests that the `PairGrid` class may not be properly handling MultiIndex DataFrame columns, which aligns with the error trace and the workaround provided. Given that the specific `map_diag` method and the overall handling of data within `PairGrid` are covered, I consider this a relevant file context for addressing the issue.",
            "search_suggestions": "Look for additional methods and classes that handle MultiIndex DataFrame columns in the seaborn library, especially focusing on how data input is processed and accessed within these methods."
          },
          "output": {
            "message": "Look for additional methods and classes that handle MultiIndex DataFrame columns in the seaborn library, especially focusing on how data input is processed and accessed within these methods."
          },
          "input_tokens": 6069,
          "output_tokens": 195,
          "retry_message": null,
          "completion_cost": 0.021132
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look for additional methods and classes that handle MultiIndex DataFrame columns in the seaborn library, especially focusing on how data input is processed and accessed within these methods.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The initial search focused on the PairGrid class and the pairplot function, and additional methods and classes that handle MultiIndex DataFrame columns in the seaborn library need to be identified. This involves examining the processing of data input and its access within these methods, especially considering potential issues with MultiIndex columns. The goal is to find methods and classes that directly or indirectly handle MultiIndex columns in the context of data processing and access, without a specific expectation to discover functions not mentioned",
            "search_requests": [
              {
                "query": "MultiIndex DataFrame",
                "class_names": [
                  "PairGrid",
                  "FacetGrid"
                ],
                "code_snippet": null,
                "file_pattern": "seaborn/**/*.py",
                "function_names": [
                  "pairplot"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 130,
                "span_id": "PairGrid",
                "file_path": "seaborn/axisgrid.py"
              },
              {
                "rank": 0,
                "tokens": 16,
                "span_id": "FacetGrid",
                "file_path": "seaborn/axisgrid.py"
              },
              {
                "rank": 0,
                "tokens": 1506,
                "span_id": "pairplot",
                "file_path": "seaborn/axisgrid.py"
              }
            ],
            "search_requests": [
              {
                "query": "MultiIndex DataFrame",
                "class_names": [
                  "PairGrid",
                  "FacetGrid"
                ],
                "code_snippet": null,
                "file_pattern": "seaborn/**/*.py",
                "function_names": [
                  "pairplot"
                ]
              }
            ]
          },
          "input_tokens": 9472,
          "output_tokens": 195,
          "retry_message": null,
          "completion_cost": 0.031341
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 130,
            "span_id": "PairGrid",
            "file_path": "seaborn/axisgrid.py"
          },
          {
            "rank": 0,
            "tokens": 16,
            "span_id": "FacetGrid",
            "file_path": "seaborn/axisgrid.py"
          },
          {
            "rank": 0,
            "tokens": 1506,
            "span_id": "pairplot",
            "file_path": "seaborn/axisgrid.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves a KeyError when using pairplot with a MultiIndex DataFrame. The MRE provided indicates that the error is triggered when attempting to map_diag in the PairGrid class. The specific traceback highlights that the KeyError occurs at the line where `vector = self.data[var]` is accessed. This suggests that the issue is related to how the MultiIndex DataFrame is being accessed or handled within the PairGrid class. The search results provided contain the relevant code spans from seaborn/axisgrid.py, including the PairGrid class and its methods such as __init__, map_diag, and add_legend. The PairGrid class is responsible for setting up and managing the grid of axes for the pairplot function. The map_diag method is particularly relevant as it is directly involved in mapping the diagonal elements of the plot, which is where the KeyError is being raised. The add_legend method is also relevant as it handles the legend creation, which might be indirectly related to the issue if the legend is affected by the MultiIndex DataFrame handling. Additionally, the pairplot function itself is included in the search results, demonstrating how it initializes the PairGrid object. Overall, these code spans provide a comprehensive view of the relevant functions and methods involved in the pairplot functionality, making it possible to identify and address the KeyError issue related to MultiIndex DataFrames.",
            "identified_spans": [
              {
                "span_ids": [
                  "PairGrid.__init__",
                  "PairGrid.map_diag",
                  "PairGrid.add_legend",
                  "pairplot"
                ],
                "file_path": "seaborn/axisgrid.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 10230,
          "output_tokens": 380,
          "retry_message": null,
          "completion_cost": 0.036390000000000006
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The analysis of the issue and the file context indicates that there are several relevant parts in the code. The PairGrid class, the `_get_palette` method, and the `map_diag` method, especially the part accessing `self.data[var]`, could potentially handle the MultiIndex DataFrame columns. The `pairplot` function and the `pairplot` method from the PairGrid class are crucial as they interact directly with these functionalities. The `_raise_if_missing` method from the MultiIndex class might also be a point of focus as it can directly relate to the key error scenario encountered in MultiIndex columns. Given the provided code sample, it seems that the relevant file context is complete to trace the issue related to MultiIndex DataFrames.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 6970,
          "output_tokens": 195,
          "retry_message": null,
          "completion_cost": 0.023835000000000002
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "PairGrid.__init__",
            "file_path": "seaborn/axisgrid.py",
            "scratch_pad": "The issue arises when attempting to use `pairplot` with a MultiIndex DataFrame. The traceback indicates that the error occurs when accessing a column in the DataFrame within the `map_diag` method of the `PairGrid` class. To address this, we need to ensure that the column access is compatible with MultiIndex DataFrames. One way to handle this could be to flatten the column names, which can be done by converting the MultiIndex to a single level before the plot is generated.",
            "instructions": "Modify the `PairGrid` class's `__init__` method to flatten the columns of the DataFrame if it has a MultiIndex, ensuring that the column access is valid for subsequent operations within the class."
          },
          "output": {
            "span_id": "PairGrid.__init__",
            "file_path": "seaborn/axisgrid.py",
            "instructions": "Modify the `PairGrid` class's `__init__` method to flatten the columns of the DataFrame if it has a MultiIndex, ensuring that the column access is valid for subsequent operations within the class."
          },
          "input_tokens": 7244,
          "output_tokens": 204,
          "retry_message": null,
          "completion_cost": 0.024792
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "PairGrid.__init__",
        "end_line": null,
        "file_path": "seaborn/axisgrid.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Modify the `PairGrid` class's `__init__` method to flatten the columns of the DataFrame if it has a MultiIndex, ensuring that the column access is valid for subsequent operations within the class.\n\nThe instruction requires modification within the `__init__` method to check for and handle MultiIndex columns. Since the existing code does not address MultiIndex columns, the modification should be implemented near the beginning of the method where the DataFrame is first processed. This ensures that any subsequent operations are performed on the flattened DataFrame if it has a MultiIndex.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": false,
            "end_line": 1186,
            "start_line": 1186,
            "scratch_pad": "To modify the `PairGrid` class's `__init__` method to handle MultiIndex columns, we need to add logic to flatten the columns if the DataFrame has a MultiIndex. This should be done near the start of the method to ensure that the subsequent operations work with the flattened columns."
          },
          "output": null,
          "input_tokens": 3066,
          "output_tokens": 109,
          "retry_message": "The line numbers 1186 - 1186 only covers to the signature of the Constructor.. You need to specify the exact part of the code that needs to be updated to fulfill the change.",
          "completion_cost": 0.010832999999999999
        },
        {
          "action": {
            "reject": false,
            "end_line": 1244,
            "start_line": 1244,
            "scratch_pad": "The instruction requires modification within the `__init__` method to check for and handle MultiIndex columns. Since the existing code does not address MultiIndex columns, the modification should be implemented near the beginning of the method where the DataFrame is first processed. This ensures that any subsequent operations are performed on the flattened DataFrame if it has a MultiIndex."
          },
          "output": {
            "span_id": "PairGrid.__init__",
            "end_line": 1248,
            "file_path": "seaborn/axisgrid.py",
            "start_line": 1240,
            "instructions": "Modify the `PairGrid` class's `__init__` method to flatten the columns of the DataFrame if it has a MultiIndex, ensuring that the column access is valid for subsequent operations within the class.\n\nThe instruction requires modification within the `__init__` method to check for and handle MultiIndex columns. Since the existing code does not address MultiIndex columns, the modification should be implemented near the beginning of the method where the DataFrame is first processed. This ensures that any subsequent operations are performed on the flattened DataFrame if it has a MultiIndex."
          },
          "input_tokens": 3225,
          "output_tokens": 117,
          "retry_message": null,
          "completion_cost": 0.01143
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "PairGrid.__init__",
        "end_line": 1248,
        "file_path": "seaborn/axisgrid.py",
        "max_tokens": 1000,
        "start_line": 1240,
        "temperature": 1.6,
        "instructions": "Modify the `PairGrid` class's `__init__` method to flatten the columns of the DataFrame if it has a MultiIndex, ensuring that the column access is valid for subsequent operations within the class.\n\nThe instruction requires modification within the `__init__` method to check for and handle MultiIndex columns. Since the existing code does not address MultiIndex columns, the modification should be implemented near the beginning of the method where the DataFrame is first processed. This ensures that any subsequent operations are performed on the flattened DataFrame if it has a MultiIndex.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```python\n<replace>        \"\"\"\n\n        super().__init__()\n\n        # Sort out the variables that define the grid\n        if isinstance(data.columns, pd.MultiIndex):\n            data.columns = [\"\".join(column) for column in data.columns]\n\n        numeric_cols = self._find_numeric_cols(data)\n        if hue in numeric_cols:\n            numeric_cols.remove(hue)\n        if vars is not None:\n</replace>"
          },
          "output": {
            "diff": "--- seaborn/axisgrid.py\n+++ seaborn/axisgrid.py\n@@ -1242,6 +1242,9 @@\n         super().__init__()\n \n         # Sort out the variables that define the grid\n+        if isinstance(data.columns, pd.MultiIndex):\n+            data.columns = [\"\".join(column) for column in data.columns]\n+\n         numeric_cols = self._find_numeric_cols(data)\n         if hue in numeric_cols:\n             numeric_cols.remove(hue)\n",
            "message": "Applied the change to seaborn/axisgrid.py.\n\n<scratch_pad>\n```python\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 9171,
          "output_tokens": 111,
          "retry_message": null,
          "completion_cost": 0.029178
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- seaborn/axisgrid.py\n+++ seaborn/axisgrid.py\n@@ -1242,6 +1242,9 @@\n         super().__init__()\n \n         # Sort out the variables that define the grid\n+        if isinstance(data.columns, pd.MultiIndex):\n+            data.columns = [\"\".join(column) for column in data.columns]\n+\n         numeric_cols = self._find_numeric_cols(data)\n         if hue in numeric_cols:\n             numeric_cols.remove(hue)\n",
        "model": "deepseek-coder",
        "message": "Applied the change to seaborn/axisgrid.py.\n\n<scratch_pad>\n```python\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue has been resolved by modifying the `PairGrid` class to handle MultiIndex DataFrames appropriately. The specific change in the `__init__` method ensures that the column names are flattened when the DataFrame has a MultiIndex, thus preventing the KeyError encountered during the `pairplot` operation.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The changes applied to the `PairGrid` class's `__init__` method successfully handle the issue by flattening the column names of the DataFrame if it has a MultiIndex. This ensures that the column access is valid for subsequent operations within the class. The applied changes also ensure that the original functionality of the class remains intact, and the added check for a MultiIndex DataFrame is specific to this issue, making it a targeted fix.",
            "instructions": null
          },
          "output": {
            "message": "The issue has been resolved by modifying the `PairGrid` class to handle MultiIndex DataFrames appropriately. The specific change in the `__init__` method ensures that the column names are flattened when the DataFrame has a MultiIndex, thus preventing the KeyError encountered during the `pairplot` operation."
          },
          "input_tokens": 7672,
          "output_tokens": 212,
          "retry_message": null,
          "completion_cost": 0.026196
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue has been resolved by modifying the `PairGrid` class to handle MultiIndex DataFrames appropriately. The specific change in the `__init__` method ensures that the column names are flattened when the DataFrame has a MultiIndex, thus preventing the KeyError encountered during the `pairplot` operation.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "pairplot raises KeyError with MultiIndex DataFrame\nWhen trying to pairplot a MultiIndex DataFrame, `pairplot` raises a `KeyError`:\r\n\r\nMRE:\r\n\r\n```python\r\nimport numpy as np\r\nimport pandas as pd\r\nimport seaborn as sns\r\n\r\n\r\ndata = {\r\n    (\"A\", \"1\"): np.random.rand(100),\r\n    (\"A\", \"2\"): np.random.rand(100),\r\n    (\"B\", \"1\"): np.random.rand(100),\r\n    (\"B\", \"2\"): np.random.rand(100),\r\n}\r\ndf = pd.DataFrame(data)\r\nsns.pairplot(df)\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\seaborn\\axisgrid.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/seaborn/axisgrid.py) in pairplot(data, hue, hue_order, palette, vars, x_vars, y_vars, kind, diag_kind, markers, height, aspect, corner, dropna, plot_kws, diag_kws, grid_kws, size)\r\n   2142     diag_kws.setdefault(\"legend\", False)\r\n   2143     if diag_kind == \"hist\":\r\n-> 2144         grid.map_diag(histplot, **diag_kws)\r\n   2145     elif diag_kind == \"kde\":\r\n   2146         diag_kws.setdefault(\"fill\", True)\r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\seaborn\\axisgrid.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/seaborn/axisgrid.py) in map_diag(self, func, **kwargs)\r\n   1488                 plt.sca(ax)\r\n   1489 \r\n-> 1490             vector = self.data[var]\r\n   1491             if self._hue_var is not None:\r\n   1492                 hue = self.data[self._hue_var]\r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\pandas\\core\\frame.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/pandas/core/frame.py) in __getitem__(self, key)\r\n   3765             if is_iterator(key):\r\n   3766                 key = list(key)\r\n-> 3767             indexer = self.columns._get_indexer_strict(key, \"columns\")[1]\r\n   3768 \r\n   3769         # take() does not accept boolean indexers\r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\multi.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/pandas/core/indexes/multi.py) in _get_indexer_strict(self, key, axis_name)\r\n   2534             indexer = self._get_indexer_level_0(keyarr)\r\n   2535 \r\n-> 2536             self._raise_if_missing(key, indexer, axis_name)\r\n   2537             return self[indexer], indexer\r\n   2538 \r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\multi.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/pandas/core/indexes/multi.py) in _raise_if_missing(self, key, indexer, axis_name)\r\n   2552                 cmask = check == -1\r\n   2553                 if cmask.any():\r\n-> 2554                     raise KeyError(f\"{keyarr[cmask]} not in index\")\r\n   2555                 # We get here when levels still contain values which are not\r\n   2556                 # actually in Index anymore\r\n\r\nKeyError: \"['1'] not in index\"\r\n```\r\n\r\nA workaround is to \"flatten\" the columns:\r\n\r\n```python\r\ndf.columns = [\"\".join(column) for column in df.columns]\r\n```\n"
}