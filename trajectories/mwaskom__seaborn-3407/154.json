{
  "info": {
    "duration": 156.89367175102234,
    "submission": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 75349099..9c5bfb77 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -2098,6 +2098,10 @@ def pairplot(\n         raise TypeError(\n             f\"'data' must be pandas DataFrame object, not: {type(data)}\")\n \n+    # Check if the DataFrame has MultiIndex columns and flatten them if so\n+    if isinstance(data.columns, pd.MultiIndex):\n+        data.columns = ['_'.join(map(str, column)) for column in data.columns]\n+\n     plot_kws = {} if plot_kws is None else plot_kws.copy()\n     diag_kws = {} if diag_kws is None else diag_kws.copy()\n     grid_kws = {} if grid_kws is None else grid_kws.copy()\n",
    "total_cost": 0.168999,
    "instance_id": "mwaskom__seaborn-3407",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves a `KeyError` when using `pairplot` with a MultiIndex DataFrame in seaborn. The error traceback points to several locations in the seaborn and pandas libraries, suggesting that the issue might be related to how `pairplot` handles MultiIndex DataFrames. A workaround involves flattening the DataFrame columns. To resolve this, we need to locate the relevant parts in the seaborn codebase where MultiIndex DataFrames are handled or expected to be handled. Specifically, we should focus on the `pairplot` function and its related classes in `axisgrid.py`, as well as any other functions or classes that interact with dataframes, particularly those that might handle indexing.",
            "search_requests": [
              {
                "query": "pairplot MultiIndex DataFrame",
                "class_names": [
                  "FacetGrid",
                  "PairGrid"
                ],
                "code_snippet": null,
                "file_pattern": "**/axisgrid.py",
                "function_names": [
                  "pairplot",
                  "map_diag",
                  "_map_diag_iter_hue",
                  "_map_bivariate",
                  "_plot_bivariate",
                  "_plot_bivariate_iter_hue",
                  "_find_numeric_cols"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 242,
                "span_id": "PairGrid._map_diag_iter_hue",
                "file_path": "seaborn/axisgrid.py"
              },
              {
                "rank": 1,
                "tokens": 1506,
                "span_id": "pairplot",
                "file_path": "seaborn/axisgrid.py"
              },
              {
                "rank": 3,
                "tokens": 130,
                "span_id": "PairGrid",
                "file_path": "seaborn/axisgrid.py"
              },
              {
                "rank": 4,
                "tokens": 284,
                "span_id": "PairGrid._plot_bivariate_iter_hue",
                "file_path": "seaborn/axisgrid.py"
              },
              {
                "rank": 5,
                "tokens": 251,
                "span_id": "PairGrid._plot_bivariate",
                "file_path": "seaborn/axisgrid.py"
              },
              {
                "rank": 6,
                "tokens": 209,
                "span_id": "PairGrid._map_bivariate",
                "file_path": "seaborn/axisgrid.py"
              },
              {
                "rank": 8,
                "tokens": 543,
                "span_id": "PairGrid.map_diag",
                "file_path": "seaborn/axisgrid.py"
              },
              {
                "rank": 9,
                "tokens": 166,
                "span_id": "PairGrid.map_offdiag",
                "file_path": "seaborn/axisgrid.py"
              },
              {
                "rank": 11,
                "tokens": 107,
                "span_id": "PairGrid.map_lower",
                "file_path": "seaborn/axisgrid.py"
              },
              {
                "rank": 12,
                "tokens": 39,
                "span_id": "FacetGrid._facet_color",
                "file_path": "seaborn/axisgrid.py"
              },
              {
                "rank": 12,
                "tokens": 108,
                "span_id": "FacetGrid._facet_plot",
                "file_path": "seaborn/axisgrid.py"
              },
              {
                "rank": 13,
                "tokens": 46,
                "span_id": "PairGrid._find_numeric_cols",
                "file_path": "seaborn/axisgrid.py"
              },
              {
                "rank": 13,
                "tokens": 59,
                "span_id": "PairGrid._add_axis_labels",
                "file_path": "seaborn/axisgrid.py"
              },
              {
                "rank": 14,
                "tokens": 107,
                "span_id": "PairGrid.map_upper",
                "file_path": "seaborn/axisgrid.py"
              },
              {
                "rank": 16,
                "tokens": 110,
                "span_id": "PairGrid.map",
                "file_path": "seaborn/axisgrid.py"
              },
              {
                "rank": 17,
                "tokens": 16,
                "span_id": "FacetGrid",
                "file_path": "seaborn/axisgrid.py"
              },
              {
                "rank": 19,
                "tokens": 314,
                "span_id": "FacetGrid.facet_data",
                "file_path": "seaborn/axisgrid.py"
              },
              {
                "rank": 24,
                "tokens": 608,
                "span_id": "FacetGrid.map",
                "file_path": "seaborn/axisgrid.py"
              },
              {
                "rank": 25,
                "tokens": 140,
                "span_id": "FacetGrid._inner_axes",
                "file_path": "seaborn/axisgrid.py"
              },
              {
                "rank": 28,
                "tokens": 136,
                "span_id": "FacetGrid._not_bottom_axes",
                "file_path": "seaborn/axisgrid.py"
              },
              {
                "rank": 29,
                "tokens": 73,
                "span_id": "FacetGrid._left_axes",
                "file_path": "seaborn/axisgrid.py"
              },
              {
                "rank": 29,
                "tokens": 76,
                "span_id": "FacetGrid._not_left_axes",
                "file_path": "seaborn/axisgrid.py"
              },
              {
                "rank": 30,
                "tokens": 132,
                "span_id": "FacetGrid._bottom_axes",
                "file_path": "seaborn/axisgrid.py"
              },
              {
                "rank": 31,
                "tokens": 541,
                "span_id": "FacetGrid.map_dataframe",
                "file_path": "seaborn/axisgrid.py"
              },
              {
                "rank": 34,
                "tokens": 98,
                "span_id": "FacetGrid.set_axis_labels",
                "file_path": "seaborn/axisgrid.py"
              },
              {
                "rank": 34,
                "tokens": 29,
                "span_id": "FacetGrid._finalize_grid",
                "file_path": "seaborn/axisgrid.py"
              }
            ],
            "search_requests": [
              {
                "query": "pairplot MultiIndex DataFrame",
                "class_names": [
                  "FacetGrid",
                  "PairGrid"
                ],
                "code_snippet": null,
                "file_pattern": "**/axisgrid.py",
                "function_names": [
                  "pairplot",
                  "map_diag",
                  "_map_diag_iter_hue",
                  "_map_bivariate",
                  "_plot_bivariate",
                  "_plot_bivariate_iter_hue",
                  "_find_numeric_cols"
                ]
              }
            ]
          },
          "input_tokens": 5121,
          "output_tokens": 280,
          "retry_message": null,
          "completion_cost": 0.019563
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 242,
            "span_id": "PairGrid._map_diag_iter_hue",
            "file_path": "seaborn/axisgrid.py"
          },
          {
            "rank": 1,
            "tokens": 1506,
            "span_id": "pairplot",
            "file_path": "seaborn/axisgrid.py"
          },
          {
            "rank": 3,
            "tokens": 130,
            "span_id": "PairGrid",
            "file_path": "seaborn/axisgrid.py"
          },
          {
            "rank": 4,
            "tokens": 284,
            "span_id": "PairGrid._plot_bivariate_iter_hue",
            "file_path": "seaborn/axisgrid.py"
          },
          {
            "rank": 5,
            "tokens": 251,
            "span_id": "PairGrid._plot_bivariate",
            "file_path": "seaborn/axisgrid.py"
          },
          {
            "rank": 6,
            "tokens": 209,
            "span_id": "PairGrid._map_bivariate",
            "file_path": "seaborn/axisgrid.py"
          },
          {
            "rank": 8,
            "tokens": 543,
            "span_id": "PairGrid.map_diag",
            "file_path": "seaborn/axisgrid.py"
          },
          {
            "rank": 9,
            "tokens": 166,
            "span_id": "PairGrid.map_offdiag",
            "file_path": "seaborn/axisgrid.py"
          },
          {
            "rank": 11,
            "tokens": 107,
            "span_id": "PairGrid.map_lower",
            "file_path": "seaborn/axisgrid.py"
          },
          {
            "rank": 12,
            "tokens": 39,
            "span_id": "FacetGrid._facet_color",
            "file_path": "seaborn/axisgrid.py"
          },
          {
            "rank": 12,
            "tokens": 108,
            "span_id": "FacetGrid._facet_plot",
            "file_path": "seaborn/axisgrid.py"
          },
          {
            "rank": 13,
            "tokens": 46,
            "span_id": "PairGrid._find_numeric_cols",
            "file_path": "seaborn/axisgrid.py"
          },
          {
            "rank": 13,
            "tokens": 59,
            "span_id": "PairGrid._add_axis_labels",
            "file_path": "seaborn/axisgrid.py"
          },
          {
            "rank": 14,
            "tokens": 107,
            "span_id": "PairGrid.map_upper",
            "file_path": "seaborn/axisgrid.py"
          },
          {
            "rank": 16,
            "tokens": 110,
            "span_id": "PairGrid.map",
            "file_path": "seaborn/axisgrid.py"
          },
          {
            "rank": 17,
            "tokens": 16,
            "span_id": "FacetGrid",
            "file_path": "seaborn/axisgrid.py"
          },
          {
            "rank": 19,
            "tokens": 314,
            "span_id": "FacetGrid.facet_data",
            "file_path": "seaborn/axisgrid.py"
          },
          {
            "rank": 24,
            "tokens": 608,
            "span_id": "FacetGrid.map",
            "file_path": "seaborn/axisgrid.py"
          },
          {
            "rank": 25,
            "tokens": 140,
            "span_id": "FacetGrid._inner_axes",
            "file_path": "seaborn/axisgrid.py"
          },
          {
            "rank": 28,
            "tokens": 136,
            "span_id": "FacetGrid._not_bottom_axes",
            "file_path": "seaborn/axisgrid.py"
          },
          {
            "rank": 29,
            "tokens": 73,
            "span_id": "FacetGrid._left_axes",
            "file_path": "seaborn/axisgrid.py"
          },
          {
            "rank": 29,
            "tokens": 76,
            "span_id": "FacetGrid._not_left_axes",
            "file_path": "seaborn/axisgrid.py"
          },
          {
            "rank": 30,
            "tokens": 132,
            "span_id": "FacetGrid._bottom_axes",
            "file_path": "seaborn/axisgrid.py"
          },
          {
            "rank": 31,
            "tokens": 541,
            "span_id": "FacetGrid.map_dataframe",
            "file_path": "seaborn/axisgrid.py"
          },
          {
            "rank": 34,
            "tokens": 98,
            "span_id": "FacetGrid.set_axis_labels",
            "file_path": "seaborn/axisgrid.py"
          },
          {
            "rank": 34,
            "tokens": 29,
            "span_id": "FacetGrid._finalize_grid",
            "file_path": "seaborn/axisgrid.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves the `pairplot` function raising a `KeyError` when dealing with a MultiIndex DataFrame. The traceback provided indicates that the error occurs within the `map_diag` method of the `FacetGrid` class when accessing the DataFrame's columns. The error occurs when dealing with a MultiIndex DataFrame, and the workaround suggests flattening the columns to avoid this issue. I will identify the spans within the `axisgrid.py` file that are pertinent to handling MultiIndex DataFrames or might be involved in the interaction with such DataFrames in `pairplot`. Specifically, I will focus on code handling the DataFrame within the `map_diag` method.",
            "identified_spans": [
              {
                "span_ids": [
                  "FacetGrid.__init__",
                  "FacetGrid.map_diag",
                  "FacetGrid.facet_data",
                  "PairGrid.__init__",
                  "PairGrid.map_diag",
                  "PairGrid._map_diag_iter_hue",
                  "pairplot"
                ],
                "file_path": "seaborn/axisgrid.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 8905,
          "output_tokens": 269,
          "retry_message": null,
          "completion_cost": 0.03075
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The provided file context contains the `PairGrid` and `pairplot` classes from the seaborn library, which are relevant to the reported issue of `KeyError` when using `pairplot` with a MultiIndex DataFrame. The `pairplot` function is where the analysis of the DataFrame occurs and where the error could potentially be triggered, as indicated by the traceback. The `PairGrid` class also handles DataFrame operations and is likely involved in the process. The file context includes methods like `map_diag` and `_map_diag_iter_hue` that directly interact with the data, which could be the source of the issue. Given this context, the relevant parts of the codebase where modifications might be needed to handle MultiIndex DataFrames properly are identified.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 7286,
          "output_tokens": 199,
          "retry_message": null,
          "completion_cost": 0.024843
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "pairplot",
            "file_path": "seaborn/axisgrid.py",
            "scratch_pad": "The issue is related to handling MultiIndex DataFrame in the `pairplot` function. When calling `pairplot` with a MultiIndex DataFrame, it raises a `KeyError` because the code assumes that the DataFrame columns are not MultiIndex. To fix this, we need to ensure that the columns are flattened before they are used in the `pairplot` function. This involves modifying the `pairplot` function to check if the DataFrame has MultiIndex columns and if so, flatten them.",
            "instructions": "Update the `pairplot` function to check if the DataFrame has MultiIndex columns. If it does, flatten the columns using the provided workaround ('flatten' the columns: `df.columns = ['_'.join(column) for column in df.columns]`). This will ensure that the columns are in a format that can be processed correctly by the rest of the `pairplot` function."
          },
          "output": {
            "span_id": "pairplot",
            "file_path": "seaborn/axisgrid.py",
            "instructions": "Update the `pairplot` function to check if the DataFrame has MultiIndex columns. If it does, flatten the columns using the provided workaround ('flatten' the columns: `df.columns = ['_'.join(column) for column in df.columns]`). This will ensure that the columns are in a format that can be processed correctly by the rest of the `pairplot` function."
          },
          "input_tokens": 7509,
          "output_tokens": 238,
          "retry_message": null,
          "completion_cost": 0.026097000000000002
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "pairplot",
        "end_line": null,
        "file_path": "seaborn/axisgrid.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Update the `pairplot` function to check if the DataFrame has MultiIndex columns. If it does, flatten the columns using the provided workaround ('flatten' the columns: `df.columns = ['_'.join(column) for column in df.columns]`). This will ensure that the columns are in a format that can be processed correctly by the rest of the `pairplot` function.\n\nThe function needs to check if the DataFrame has MultiIndex columns and flatten them if so. This should occur before any plotting logic begins. The check and flattening logic should be added right after the DataFrame type check.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 2101,
            "start_line": 2101,
            "scratch_pad": "The function needs to check if the DataFrame has MultiIndex columns and flatten them if so. This should occur before any plotting logic begins. The check and flattening logic should be added right after the DataFrame type check."
          },
          "output": {
            "span_id": "pairplot",
            "end_line": 2105,
            "file_path": "seaborn/axisgrid.py",
            "start_line": 2097,
            "instructions": "Update the `pairplot` function to check if the DataFrame has MultiIndex columns. If it does, flatten the columns using the provided workaround ('flatten' the columns: `df.columns = ['_'.join(column) for column in df.columns]`). This will ensure that the columns are in a format that can be processed correctly by the rest of the `pairplot` function.\n\nThe function needs to check if the DataFrame has MultiIndex columns and flatten them if so. This should occur before any plotting logic begins. The check and flattening logic should be added right after the DataFrame type check."
          },
          "input_tokens": 3098,
          "output_tokens": 84,
          "retry_message": null,
          "completion_cost": 0.010554000000000001
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "pairplot",
        "end_line": 2105,
        "file_path": "seaborn/axisgrid.py",
        "max_tokens": 1000,
        "start_line": 2097,
        "temperature": 1.6,
        "instructions": "Update the `pairplot` function to check if the DataFrame has MultiIndex columns. If it does, flatten the columns using the provided workaround ('flatten' the columns: `df.columns = ['_'.join(column) for column in df.columns]`). This will ensure that the columns are in a format that can be processed correctly by the rest of the `pairplot` function.\n\nThe function needs to check if the DataFrame has MultiIndex columns and flatten them if so. This should occur before any plotting logic begins. The check and flattening logic should be added right after the DataFrame type check.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n    if not isinstance(data, pd.DataFrame):\n        raise TypeError(\n            f\"'data' must be pandas DataFrame object, not: {type(data)}\")\n\n    # Check if the DataFrame has MultiIndex columns and flatten them if so\n    if isinstance(data.columns, pd.MultiIndex):\n        data.columns = ['_'.join(map(str, column)) for column in data.columns]\n\n    plot_kws = {} if plot_kws is None else plot_kws.copy()\n    diag_kws = {} if diag_kws is None else diag_kws.copy()\n    grid_kws = {} if grid_kws is None else grid_kws.copy()\n\n    # Resolve \"auto\" diag kind\n</replace>"
          },
          "output": {
            "diff": "--- seaborn/axisgrid.py\n+++ seaborn/axisgrid.py\n@@ -2098,6 +2098,10 @@\n         raise TypeError(\n             f\"'data' must be pandas DataFrame object, not: {type(data)}\")\n \n+    # Check if the DataFrame has MultiIndex columns and flatten them if so\n+    if isinstance(data.columns, pd.MultiIndex):\n+        data.columns = ['_'.join(map(str, column)) for column in data.columns]\n+\n     plot_kws = {} if plot_kws is None else plot_kws.copy()\n     diag_kws = {} if diag_kws is None else diag_kws.copy()\n     grid_kws = {} if grid_kws is None else grid_kws.copy()\n",
            "message": "Applied the change to seaborn/axisgrid.py.",
            "verification_errors": []
          },
          "input_tokens": 9323,
          "output_tokens": 179,
          "retry_message": null,
          "completion_cost": 0.030654
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- seaborn/axisgrid.py\n+++ seaborn/axisgrid.py\n@@ -2098,6 +2098,10 @@\n         raise TypeError(\n             f\"'data' must be pandas DataFrame object, not: {type(data)}\")\n \n+    # Check if the DataFrame has MultiIndex columns and flatten them if so\n+    if isinstance(data.columns, pd.MultiIndex):\n+        data.columns = ['_'.join(map(str, column)) for column in data.columns]\n+\n     plot_kws = {} if plot_kws is None else plot_kws.copy()\n     diag_kws = {} if diag_kws is None else diag_kws.copy()\n     grid_kws = {} if grid_kws is None else grid_kws.copy()\n",
        "model": "deepseek-coder",
        "message": "Applied the change to seaborn/axisgrid.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The necessary change to handle MultiIndex DataFrames in the `pairplot` function has been implemented correctly. This addresses the reported issue of `KeyError` when using `pairplot` with a MultiIndex DataFrame.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The initial change to address the MultiIndex DataFrame issue has been applied successfully. The `pairplot` function now includes a check to determine if the DataFrame has MultiIndex columns. If so, it flattens the columns by joining the levels with an underscore. This modification ensures that the `pairplot` function can handle MultiIndex DataFrames without raising a `KeyError`.",
            "instructions": null
          },
          "output": {
            "message": "The necessary change to handle MultiIndex DataFrames in the `pairplot` function has been implemented correctly. This addresses the reported issue of `KeyError` when using `pairplot` with a MultiIndex DataFrame."
          },
          "input_tokens": 8021,
          "output_tokens": 165,
          "retry_message": null,
          "completion_cost": 0.026538000000000003
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The necessary change to handle MultiIndex DataFrames in the `pairplot` function has been implemented correctly. This addresses the reported issue of `KeyError` when using `pairplot` with a MultiIndex DataFrame.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "pairplot raises KeyError with MultiIndex DataFrame\nWhen trying to pairplot a MultiIndex DataFrame, `pairplot` raises a `KeyError`:\r\n\r\nMRE:\r\n\r\n```python\r\nimport numpy as np\r\nimport pandas as pd\r\nimport seaborn as sns\r\n\r\n\r\ndata = {\r\n    (\"A\", \"1\"): np.random.rand(100),\r\n    (\"A\", \"2\"): np.random.rand(100),\r\n    (\"B\", \"1\"): np.random.rand(100),\r\n    (\"B\", \"2\"): np.random.rand(100),\r\n}\r\ndf = pd.DataFrame(data)\r\nsns.pairplot(df)\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\seaborn\\axisgrid.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/seaborn/axisgrid.py) in pairplot(data, hue, hue_order, palette, vars, x_vars, y_vars, kind, diag_kind, markers, height, aspect, corner, dropna, plot_kws, diag_kws, grid_kws, size)\r\n   2142     diag_kws.setdefault(\"legend\", False)\r\n   2143     if diag_kind == \"hist\":\r\n-> 2144         grid.map_diag(histplot, **diag_kws)\r\n   2145     elif diag_kind == \"kde\":\r\n   2146         diag_kws.setdefault(\"fill\", True)\r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\seaborn\\axisgrid.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/seaborn/axisgrid.py) in map_diag(self, func, **kwargs)\r\n   1488                 plt.sca(ax)\r\n   1489 \r\n-> 1490             vector = self.data[var]\r\n   1491             if self._hue_var is not None:\r\n   1492                 hue = self.data[self._hue_var]\r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\pandas\\core\\frame.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/pandas/core/frame.py) in __getitem__(self, key)\r\n   3765             if is_iterator(key):\r\n   3766                 key = list(key)\r\n-> 3767             indexer = self.columns._get_indexer_strict(key, \"columns\")[1]\r\n   3768 \r\n   3769         # take() does not accept boolean indexers\r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\multi.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/pandas/core/indexes/multi.py) in _get_indexer_strict(self, key, axis_name)\r\n   2534             indexer = self._get_indexer_level_0(keyarr)\r\n   2535 \r\n-> 2536             self._raise_if_missing(key, indexer, axis_name)\r\n   2537             return self[indexer], indexer\r\n   2538 \r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\multi.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/pandas/core/indexes/multi.py) in _raise_if_missing(self, key, indexer, axis_name)\r\n   2552                 cmask = check == -1\r\n   2553                 if cmask.any():\r\n-> 2554                     raise KeyError(f\"{keyarr[cmask]} not in index\")\r\n   2555                 # We get here when levels still contain values which are not\r\n   2556                 # actually in Index anymore\r\n\r\nKeyError: \"['1'] not in index\"\r\n```\r\n\r\nA workaround is to \"flatten\" the columns:\r\n\r\n```python\r\ndf.columns = [\"\".join(column) for column in df.columns]\r\n```\n"
}