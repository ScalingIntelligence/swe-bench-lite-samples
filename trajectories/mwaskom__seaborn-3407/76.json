{
  "info": {
    "duration": 293.4548077583313,
    "submission": "diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py\nindex 75349099..6882221b 100644\n--- a/seaborn/axisgrid.py\n+++ b/seaborn/axisgrid.py\n@@ -1487,6 +1487,8 @@ class PairGrid(Grid):\n             else:\n                 plt.sca(ax)\n \n+            if isinstance(self.data.columns, pd.MultiIndex):\n+                var = tuple(var) if isinstance(var, list) else (var,)\n             vector = self.data[var]\n             if self._hue_var is not None:\n                 hue = self.data[self._hue_var]\n",
    "total_cost": 0.229518,
    "instance_id": "mwaskom__seaborn-3407",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue revolves around the `pairplot` function raising a `KeyError` when used with a MultiIndex DataFrame. The traceback suggests that the error originates from accessing columns in the DataFrame within the `PairGrid` class. To address this, I need to locate the `PairGrid` class and the `pairplot` function in the seaborn library, specifically focusing on the `map_diag` method within `PairGrid`. Additionally, I'll ensure to look for handling of MultiIndex DataFrames in the relevant parts of the code.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "PairGrid"
                ],
                "code_snippet": null,
                "file_pattern": "**/seaborn/**/*.py",
                "function_names": [
                  "pairplot",
                  "map_diag"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 543,
                "span_id": "PairGrid.map_diag",
                "file_path": "seaborn/axisgrid.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "PairGrid"
                ],
                "code_snippet": null,
                "file_pattern": "**/seaborn/**/*.py",
                "function_names": [
                  "pairplot",
                  "map_diag"
                ]
              }
            ]
          },
          "input_tokens": 5121,
          "output_tokens": 194,
          "retry_message": null,
          "completion_cost": 0.018273
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 543,
            "span_id": "PairGrid.map_diag",
            "file_path": "seaborn/axisgrid.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "Analyzing the reported issue, it is clear that the KeyError is being raised when trying to access a column in a MultiIndex DataFrame using `pairplot`. The error occurs in the `map_diag` method of the `PairGrid` class, specifically when trying to access the column in the DataFrame. The relevant code spans include the `PairGrid` class definition, its `map_diag` method, and the `__init__` method where the DataFrame is processed. These sections are crucial for understanding how the DataFrame is handled and how the error might be occurring. The search task seems complete as these code spans cover the essential parts of the code related to the reported issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "PairGrid",
                  "PairGrid.__init__",
                  "PairGrid.map_diag"
                ],
                "file_path": "seaborn/axisgrid.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 6092,
          "output_tokens": 225,
          "retry_message": null,
          "completion_cost": 0.021651
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The provided file context includes the relevant parts of the `seaborn.axisgrid` module, specifically the `PairGrid` class and the `pairplot` function. The `map_diag` method within `PairGrid` is identified as the location where the KeyError occurs as per the traceback. Also, the initialization and other related methods of `PairGrid` are present, indicating that the necessary context for understanding the issue is available. The fact that the `pairplot` function and `PairGrid` class are both included suggests that the focus of the issue, which is on handling MultiIndex DataFrames in these contexts, is addressed. Therefore, essential parts of the codebase necessary for understanding and potentially addressing the issue are provided.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 5289,
          "output_tokens": 190,
          "retry_message": null,
          "completion_cost": 0.018716999999999998
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "PairGrid.map_diag",
            "file_path": "seaborn/axisgrid.py",
            "scratch_pad": "The issue arises because the MultiIndex DataFrame's columns are not properly handled when retrieving data for the diagonal plots in `PairGrid.map_diag`. This results in a `KeyError` when attempting to access these columns. To fix this, we need to ensure that we handle MultiIndex columns properly when extracting the data for the diagonal plots.",
            "instructions": "Update the `PairGrid.map_diag` method to handle MultiIndex columns properly. Specifically, adjust the line where `vector = self.data[var]` is accessed to ensure it correctly identifies and retrieves the data from MultiIndex columns."
          },
          "output": {
            "span_id": "PairGrid.map_diag",
            "file_path": "seaborn/axisgrid.py",
            "instructions": "Update the `PairGrid.map_diag` method to handle MultiIndex columns properly. Specifically, adjust the line where `vector = self.data[var]` is accessed to ensure it correctly identifies and retrieves the data from MultiIndex columns."
          },
          "input_tokens": 5576,
          "output_tokens": 169,
          "retry_message": null,
          "completion_cost": 0.019263
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "PairGrid.map_diag",
        "end_line": null,
        "file_path": "seaborn/axisgrid.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Update the `PairGrid.map_diag` method to handle MultiIndex columns properly. Specifically, adjust the line where `vector = self.data[var]` is accessed to ensure it correctly identifies and retrieves the data from MultiIndex columns.\n\nThe instruction is to update the line where `vector = self.data[var]` is accessed to handle MultiIndex columns properly. This line is located within the `map_diag` method of the `PairGrid` class, specifically at line 1490.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 1490,
            "start_line": 1490,
            "scratch_pad": "The instruction is to update the line where `vector = self.data[var]` is accessed to handle MultiIndex columns properly. This line is located within the `map_diag` method of the `PairGrid` class, specifically at line 1490."
          },
          "output": {
            "span_id": "PairGrid.map_diag",
            "end_line": 1494,
            "file_path": "seaborn/axisgrid.py",
            "start_line": 1486,
            "instructions": "Update the `PairGrid.map_diag` method to handle MultiIndex columns properly. Specifically, adjust the line where `vector = self.data[var]` is accessed to ensure it correctly identifies and retrieves the data from MultiIndex columns.\n\nThe instruction is to update the line where `vector = self.data[var]` is accessed to handle MultiIndex columns properly. This line is located within the `map_diag` method of the `PairGrid` class, specifically at line 1490."
          },
          "input_tokens": 1683,
          "output_tokens": 104,
          "retry_message": null,
          "completion_cost": 0.006609
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "PairGrid.map_diag",
        "end_line": 1494,
        "file_path": "seaborn/axisgrid.py",
        "max_tokens": 1000,
        "start_line": 1486,
        "temperature": 1.6,
        "instructions": "Update the `PairGrid.map_diag` method to handle MultiIndex columns properly. Specifically, adjust the line where `vector = self.data[var]` is accessed to ensure it correctly identifies and retrieves the data from MultiIndex columns.\n\nThe instruction is to update the line where `vector = self.data[var]` is accessed to handle MultiIndex columns properly. This line is located within the `map_diag` method of the `PairGrid` class, specifically at line 1490.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\n                plot_kwargs[\"ax\"] = ax\n            else:\n                plt.sca(ax)\n\n            if isinstance(self.data.columns, pd.MultiIndex):\n                var = tuple(var) if isinstance(var, list) else (var,)\n            vector = self.data[var]\n            if self._hue_var is not None:\n                hue = self.data[self._hue_var]\n            else:\n                hue = None\n</replace>"
          },
          "output": {
            "diff": "--- seaborn/axisgrid.py\n+++ seaborn/axisgrid.py\n@@ -1487,6 +1487,8 @@\n             else:\n                 plt.sca(ax)\n \n+            if isinstance(self.data.columns, pd.MultiIndex):\n+                var = tuple(var) if isinstance(var, list) else (var,)\n             vector = self.data[var]\n             if self._hue_var is not None:\n                 hue = self.data[self._hue_var]\n",
            "message": "Applied the change to seaborn/axisgrid.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 7157,
          "output_tokens": 115,
          "retry_message": null,
          "completion_cost": 0.023196
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- seaborn/axisgrid.py\n+++ seaborn/axisgrid.py\n@@ -1487,6 +1487,8 @@\n             else:\n                 plt.sca(ax)\n \n+            if isinstance(self.data.columns, pd.MultiIndex):\n+                var = tuple(var) if isinstance(var, list) else (var,)\n             vector = self.data[var]\n             if self._hue_var is not None:\n                 hue = self.data[self._hue_var]\n",
        "model": "deepseek-coder",
        "message": "Applied the change to seaborn/axisgrid.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "PairGrid.map_diag",
            "file_path": "seaborn/axisgrid.py",
            "scratch_pad": "The issue arises because the MultiIndex DataFrame's columns are not properly handled when retrieving data for the diagonal plots in `PairGrid.map_diag`. This results in a `KeyError` when attempting to access these columns. To fix this, we need to ensure that we handle MultiIndex columns properly when extracting the data for the diagonal plots.",
            "instructions": "Update the `PairGrid.map_diag` method to handle MultiIndex columns properly. Specifically, adjust the line where `vector = self.data[var]` is accessed to ensure it correctly identifies and retrieves the data from MultiIndex columns."
          },
          "output": {
            "span_id": "PairGrid.map_diag",
            "file_path": "seaborn/axisgrid.py",
            "instructions": "Update the `PairGrid.map_diag` method to handle MultiIndex columns properly. Specifically, adjust the line where `vector = self.data[var]` is accessed to ensure it correctly identifies and retrieves the data from MultiIndex columns."
          },
          "input_tokens": 6511,
          "output_tokens": 264,
          "retry_message": null,
          "completion_cost": 0.023493
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "PairGrid.map_diag",
        "end_line": null,
        "file_path": "seaborn/axisgrid.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Update the `PairGrid.map_diag` method to handle MultiIndex columns properly. Specifically, adjust the line where `vector = self.data[var]` is accessed to ensure it correctly identifies and retrieves the data from MultiIndex columns.\n\nThe line to be modified is where `vector = self.data[var]` is accessed. This line should be updated to correctly identify and retrieve the data from MultiIndex columns. The previous line adjusts `var` to be a tuple if the columns are a MultiIndex, which is necessary for this update.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 1492,
            "start_line": 1492,
            "scratch_pad": "The line to be modified is where `vector = self.data[var]` is accessed. This line should be updated to correctly identify and retrieve the data from MultiIndex columns. The previous line adjusts `var` to be a tuple if the columns are a MultiIndex, which is necessary for this update."
          },
          "output": {
            "span_id": "PairGrid.map_diag",
            "end_line": 1496,
            "file_path": "seaborn/axisgrid.py",
            "start_line": 1488,
            "instructions": "Update the `PairGrid.map_diag` method to handle MultiIndex columns properly. Specifically, adjust the line where `vector = self.data[var]` is accessed to ensure it correctly identifies and retrieves the data from MultiIndex columns.\n\nThe line to be modified is where `vector = self.data[var]` is accessed. This line should be updated to correctly identify and retrieve the data from MultiIndex columns. The previous line adjusts `var` to be a tuple if the columns are a MultiIndex, which is necessary for this update."
          },
          "input_tokens": 1726,
          "output_tokens": 104,
          "retry_message": null,
          "completion_cost": 0.006738
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "PairGrid.map_diag",
        "end_line": 1496,
        "file_path": "seaborn/axisgrid.py",
        "max_tokens": 1000,
        "start_line": 1488,
        "temperature": 1.6,
        "instructions": "Update the `PairGrid.map_diag` method to handle MultiIndex columns properly. Specifically, adjust the line where `vector = self.data[var]` is accessed to ensure it correctly identifies and retrieves the data from MultiIndex columns.\n\nThe line to be modified is where `vector = self.data[var]` is accessed. This line should be updated to correctly identify and retrieve the data from MultiIndex columns. The previous line adjusts `var` to be a tuple if the columns are a MultiIndex, which is necessary for this update.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n                plt.sca(ax)\n\n            if isinstance(self.data.columns, pd.MultiIndex):\n                var = tuple(var) if isinstance(var, list) else (var,)\n            vector = self.data[var]\n            if self._hue_var is not None:\n                hue = self.data[self._hue_var]\n            else:\n                hue = None\n</replace>"
          },
          "output": null,
          "input_tokens": 7220,
          "output_tokens": 98,
          "retry_message": "The code in the replace tag is the same as in the search. Use the reject function if you can't do any changes and want to reject the instructions.",
          "completion_cost": 0.02313
        },
        {
          "action": {
            "content": "<reject>\nThe provided instructions do not specify how to modify the code to handle MultiIndex columns properly, only that the line accessing `vector = self.data[var]` should be updated. More context or specific details on how to handle MultiIndex columns would be needed to proceed with the modification. Additionally, the provided code already adjusts `var` to be a tuple if the columns are a MultiIndex, which aligns with typical handling of MultiIndex columns in Pandas, and doesn't seem to contain any obvious issues or errors.\n</reject>"
          },
          "output": {
            "message": "\nThe provided instructions do not specify how to modify the code to handle MultiIndex columns properly, only that the line accessing `vector = self.data[var]` should be updated. More context or specific details on how to handle MultiIndex columns would be needed to proceed with the modification. Additionally, the provided code already adjusts `var` to be a tuple if the columns are a MultiIndex, which aligns with typical handling of MultiIndex columns in Pandas, and doesn't seem to contain any obvious issues or errors.\n"
          },
          "input_tokens": 7358,
          "output_tokens": 114,
          "retry_message": null,
          "completion_cost": 0.023784
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "\nThe provided instructions do not specify how to modify the code to handle MultiIndex columns properly, only that the line accessing `vector = self.data[var]` should be updated. More context or specific details on how to handle MultiIndex columns would be needed to proceed with the modification. Additionally, the provided code already adjusts `var` to be a tuple if the columns are a MultiIndex, which aligns with typical handling of MultiIndex columns in Pandas, and doesn't seem to contain any obvious issues or errors.\n",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "review",
            "finish": null,
            "reject": "The instructions lack specificity on how to handle MultiIndex columns properly for the modification. The code already appears to handle MultiIndex columns correctly by converting `var` to a tuple when MultiIndex columns are present.",
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The provided instructions do not specify how to modify the code to handle MultiIndex columns properly, only that the line accessing `vector = self.data[var]` should be updated. More context or specific details on how to handle MultiIndex columns would be needed to proceed with the modification. Additionally, the provided code already adjusts `var` to be a tuple if the columns are a MultiIndex, which aligns with typical handling of MultiIndex columns in Pandas, and doesn't seem to contain any obvious issues or errors.",
            "instructions": null
          },
          "output": null,
          "input_tokens": 6287,
          "output_tokens": 208,
          "retry_message": "Review isn't possible. If the change is done you can finish or reject the task.",
          "completion_cost": 0.021981
        },
        {
          "action": {
            "action": "reject",
            "finish": null,
            "reject": "The instructions lack specificity on how to handle MultiIndex columns properly for the modification. The code already appears to handle MultiIndex columns correctly by converting `var` to a tuple when MultiIndex columns are present.",
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The provided instructions do not specify how to modify the code to handle MultiIndex columns properly, only that the line accessing `vector = self.data[var]` should be updated. More context or specific details on how to handle MultiIndex columns would be needed to proceed with the modification. Additionally, the provided code already adjusts `var` to be a tuple if the columns are a MultiIndex, which aligns with typical handling of MultiIndex columns in Pandas, and doesn't seem to contain any obvious issues or errors.",
            "instructions": null
          },
          "output": {
            "message": "The instructions lack specificity on how to handle MultiIndex columns properly for the modification. The code already appears to handle MultiIndex columns correctly by converting `var` to a tuple when MultiIndex columns are present."
          },
          "input_tokens": 6521,
          "output_tokens": 208,
          "retry_message": null,
          "completion_cost": 0.022683000000000002
        }
      ]
    },
    {
      "name": "Rejected",
      "state": {
        "model": "gpt-4o",
        "message": "The instructions lack specificity on how to handle MultiIndex columns properly for the modification. The code already appears to handle MultiIndex columns correctly by converting `var` to a tuple when MultiIndex columns are present.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "pairplot raises KeyError with MultiIndex DataFrame\nWhen trying to pairplot a MultiIndex DataFrame, `pairplot` raises a `KeyError`:\r\n\r\nMRE:\r\n\r\n```python\r\nimport numpy as np\r\nimport pandas as pd\r\nimport seaborn as sns\r\n\r\n\r\ndata = {\r\n    (\"A\", \"1\"): np.random.rand(100),\r\n    (\"A\", \"2\"): np.random.rand(100),\r\n    (\"B\", \"1\"): np.random.rand(100),\r\n    (\"B\", \"2\"): np.random.rand(100),\r\n}\r\ndf = pd.DataFrame(data)\r\nsns.pairplot(df)\r\n```\r\n\r\nOutput:\r\n\r\n```\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\seaborn\\axisgrid.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/seaborn/axisgrid.py) in pairplot(data, hue, hue_order, palette, vars, x_vars, y_vars, kind, diag_kind, markers, height, aspect, corner, dropna, plot_kws, diag_kws, grid_kws, size)\r\n   2142     diag_kws.setdefault(\"legend\", False)\r\n   2143     if diag_kind == \"hist\":\r\n-> 2144         grid.map_diag(histplot, **diag_kws)\r\n   2145     elif diag_kind == \"kde\":\r\n   2146         diag_kws.setdefault(\"fill\", True)\r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\seaborn\\axisgrid.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/seaborn/axisgrid.py) in map_diag(self, func, **kwargs)\r\n   1488                 plt.sca(ax)\r\n   1489 \r\n-> 1490             vector = self.data[var]\r\n   1491             if self._hue_var is not None:\r\n   1492                 hue = self.data[self._hue_var]\r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\pandas\\core\\frame.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/pandas/core/frame.py) in __getitem__(self, key)\r\n   3765             if is_iterator(key):\r\n   3766                 key = list(key)\r\n-> 3767             indexer = self.columns._get_indexer_strict(key, \"columns\")[1]\r\n   3768 \r\n   3769         # take() does not accept boolean indexers\r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\multi.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/pandas/core/indexes/multi.py) in _get_indexer_strict(self, key, axis_name)\r\n   2534             indexer = self._get_indexer_level_0(keyarr)\r\n   2535 \r\n-> 2536             self._raise_if_missing(key, indexer, axis_name)\r\n   2537             return self[indexer], indexer\r\n   2538 \r\n\r\n[c:\\Users\\KLuu\\anaconda3\\lib\\site-packages\\pandas\\core\\indexes\\multi.py](file:///C:/Users/KLuu/anaconda3/lib/site-packages/pandas/core/indexes/multi.py) in _raise_if_missing(self, key, indexer, axis_name)\r\n   2552                 cmask = check == -1\r\n   2553                 if cmask.any():\r\n-> 2554                     raise KeyError(f\"{keyarr[cmask]} not in index\")\r\n   2555                 # We get here when levels still contain values which are not\r\n   2556                 # actually in Index anymore\r\n\r\nKeyError: \"['1'] not in index\"\r\n```\r\n\r\nA workaround is to \"flatten\" the columns:\r\n\r\n```python\r\ndf.columns = [\"\".join(column) for column in df.columns]\r\n```\n"
}