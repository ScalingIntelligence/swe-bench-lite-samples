{
  "info": {
    "duration": 247.2095491886139,
    "submission": "",
    "total_cost": 0.20727,
    "instance_id": "matplotlib__matplotlib-23476",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue concerns the DPI of a figure doubling after unpickling on M1 Macs, potentially leading to an 'OverflowError'. The focus should be on the figure's DPI and handling during the unpickling process. Given the stack trace and the example code, the relevant parts likely include the '_set_dpi' method and the '__setstate__' method in the Figure class in 'lib/matplotlib/figure.py', as well as any related backend-specific handling like in 'lib/matplotlib/backends/backend_macosx.py'.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "Figure"
                ],
                "code_snippet": "def _set_dpi(self, dpi, forward=True):",
                "file_pattern": "lib/matplotlib/figure.py",
                "function_names": [
                  "__setstate__"
                ]
              },
              {
                "query": null,
                "class_names": [
                  "FigureCanvasMac"
                ],
                "code_snippet": null,
                "file_pattern": "lib/matplotlib/backends/backend_macosx.py",
                "function_names": [
                  "resize"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 112,
                "span_id": "Figure._set_dpi",
                "file_path": "lib/matplotlib/figure.py"
              },
              {
                "rank": 0,
                "tokens": 22,
                "span_id": "Figure:7",
                "file_path": "lib/matplotlib/figure.py"
              },
              {
                "rank": 0,
                "tokens": 31,
                "span_id": "Figure.get_tight_layout",
                "file_path": "lib/matplotlib/figure.py"
              },
              {
                "rank": 0,
                "tokens": 63,
                "span_id": "FigureCanvasMac.resize",
                "file_path": "lib/matplotlib/backends/backend_macosx.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "Figure"
                ],
                "code_snippet": "def _set_dpi(self, dpi, forward=True):",
                "file_pattern": "lib/matplotlib/figure.py",
                "function_names": [
                  "__setstate__"
                ]
              },
              {
                "query": null,
                "class_names": [
                  "FigureCanvasMac"
                ],
                "code_snippet": null,
                "file_pattern": "lib/matplotlib/backends/backend_macosx.py",
                "function_names": [
                  "resize"
                ]
              }
            ]
          },
          "input_tokens": 4963,
          "output_tokens": 294,
          "retry_message": null,
          "completion_cost": 0.019299
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 112,
            "span_id": "Figure._set_dpi",
            "file_path": "lib/matplotlib/figure.py"
          },
          {
            "rank": 0,
            "tokens": 22,
            "span_id": "Figure:7",
            "file_path": "lib/matplotlib/figure.py"
          },
          {
            "rank": 0,
            "tokens": 31,
            "span_id": "Figure.get_tight_layout",
            "file_path": "lib/matplotlib/figure.py"
          },
          {
            "rank": 0,
            "tokens": 63,
            "span_id": "FigureCanvasMac.resize",
            "file_path": "lib/matplotlib/backends/backend_macosx.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves the DPI of a figure being doubled after unpickling on an M1 Mac, which results in an `OverflowError`. The provided search results include relevant code spans that might be related to the DPI handling in the `Figure` class and the `FigureCanvasMac` class. For the `Figure` class, the relevant spans are the `__init__` method where the DPI is set initially, the `_set_dpi` method where the DPI is updated, and the `dpi` property that controls access to the DPI value. In the `FigureCanvasMac` class, the relevant span is the `resize` method where the figure size is adjusted based on the DPI. These spans seem crucial for understanding and potentially fixing the DPI doubling issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "Figure.__init__",
                  "Figure._set_dpi",
                  "Figure:7"
                ],
                "file_path": "lib/matplotlib/figure.py"
              },
              {
                "span_ids": [
                  "FigureCanvasMac.resize"
                ],
                "file_path": "lib/matplotlib/backends/backend_macosx.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4559,
          "output_tokens": 297,
          "retry_message": null,
          "completion_cost": 0.018132
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The provided file context includes the Figure class in 'lib/matplotlib/figure.py' where methods like '_set_dpi' and '__setstate__' could be relevant for handling the DPI of a figure during unpickling. However, the 'FigureCanvasMac' class in 'lib/matplotlib/backends/backend_macosx.py' is a crucial part that could be involved in the DPI doubling issue due to its interactions during the unpickling process. The file context is somewhat relevant, but more specific methods related to unpickling and DPI management, especially in the context of the backend, might not be fully represented.",
            "search_suggestions": "Look for methods or handlers in 'lib/matplotlib/backends/backend_macosx.py' specifically related to handling figure DPI during or after unpickling, as these might not be fully covered in the provided context."
          },
          "output": {
            "message": "Look for methods or handlers in 'lib/matplotlib/backends/backend_macosx.py' specifically related to handling figure DPI during or after unpickling, as these might not be fully covered in the provided context."
          },
          "input_tokens": 4429,
          "output_tokens": 220,
          "retry_message": null,
          "completion_cost": 0.016587
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look for methods or handlers in 'lib/matplotlib/backends/backend_macosx.py' specifically related to handling figure DPI during or after unpickling, as these might not be fully covered in the provided context.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The initial search focused on methods directly related to setting DPI and the `__setstate__` method in the Figure class. Expanding the search to include backend-specific interactions with figures on M1 Macs is necessary. Specifically, we should look for any methods in 'lib/matplotlib/backends/backend_macosx.py' that could influence or respond to changes in the figure's DPI during or after the unpickling process. This includes methods like '_set_dpi' in the Figure class and potentially custom handling in the FigureCanvasMac class within the backend file.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "FigureCanvasMac"
                ],
                "code_snippet": null,
                "file_pattern": "lib/matplotlib/backends/backend_macosx.py",
                "function_names": [
                  "resize"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 63,
                "span_id": "FigureCanvasMac.resize",
                "file_path": "lib/matplotlib/backends/backend_macosx.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "FigureCanvasMac"
                ],
                "code_snippet": null,
                "file_pattern": "lib/matplotlib/backends/backend_macosx.py",
                "function_names": [
                  "resize"
                ]
              }
            ]
          },
          "input_tokens": 7311,
          "output_tokens": 231,
          "retry_message": null,
          "completion_cost": 0.025398
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 63,
            "span_id": "FigureCanvasMac.resize",
            "file_path": "lib/matplotlib/backends/backend_macosx.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue pertains to the doubling of DPI when unpickling a figure on M1 Macs, which seems to be related to the scaling behavior during resizing or initialization of the figure. The current file context provides relevant code spans for 'Figure.__init__', 'Figure._set_dpi', and 'FigureCanvasMac.resize' which handle DPI setting and figure resizing. The new search results include the 'FigureCanvasMac' class initialization and resize method, which aligns with the context provided. These methods are crucial in handling the figure's DPI and resizing, which could be directly related to the issue of DPI doubling upon unpickling. No further search is needed as the provided code spans sufficiently cover the relevant areas for addressing the reported issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "FigureCanvasMac.__init__",
                  "FigureCanvasMac.resize"
                ],
                "file_path": "lib/matplotlib/backends/backend_macosx.py"
              },
              {
                "span_ids": [
                  "_AxesStack",
                  "SubplotParams",
                  "Figure",
                  "Figure.__init__",
                  "Figure._set_dpi",
                  "Figure:7"
                ],
                "file_path": "lib/matplotlib/figure.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 5102,
          "output_tokens": 317,
          "retry_message": null,
          "completion_cost": 0.020061000000000002
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The provided file context includes relevant code from the 'lib/matplotlib/figure.py' file, specifically the Figure class with its methods for handling DPI (_set_dpi). Additionally, the 'lib/matplotlib/backends/backend_macosx.py' file contains the FigureCanvasMac class, which might be involved in the resizing and configuration of figures during the unpickling process on M1 Macs. This suggests that the file context provided identifies the relevant classes and areas for further investigation related to the DPI doubling issue on M1 Macs upon unpickling. However, more detailed examination or parts of the code related to the actual unpickling and canvas resizing might be required to fully confirm the root cause of the issue.",
            "search_suggestions": "Consider examining the methods involved in the actual unpickling process within FigureCanvasMac or related classes in 'backend_macosx.py'. Also, look for any specific handling of figures during the resizing or unpickling stages on M1 Macs."
          },
          "output": {
            "message": "Consider examining the methods involved in the actual unpickling process within FigureCanvasMac or related classes in 'backend_macosx.py'. Also, look for any specific handling of figures during the resizing or unpickling stages on M1 Macs."
          },
          "input_tokens": 4749,
          "output_tokens": 239,
          "retry_message": null,
          "completion_cost": 0.017832
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Consider examining the methods involved in the actual unpickling process within FigureCanvasMac or related classes in 'backend_macosx.py'. Also, look for any specific handling of figures during the resizing or unpickling stages on M1 Macs.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "Given the provided file context, the primary focus should be on the `Figure` class in 'lib/matplotlib/figure.py' and the `FigureCanvasMac` class in 'lib/matplotlib/backends/backend_macosx.py'. Specifically, the `Figure._set_dpi` method and the `FigureCanvasMac.resize` method are crucial for understanding how DPI is managed during figure handling on M1 Macs. Additional attention should be given to any related methods or handlers in 'backend_macosx.py' that might interact with these functionalities during the resizing or unpickling stages.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "FigureCanvasMac"
                ],
                "code_snippet": "def resize(self, width, height):",
                "file_pattern": "lib/matplotlib/backends/backend_macosx.py",
                "function_names": [
                  "resize"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 63,
                "span_id": "FigureCanvasMac.resize",
                "file_path": "lib/matplotlib/backends/backend_macosx.py"
              },
              {
                "rank": 0,
                "tokens": 104,
                "span_id": "FigureCanvasMac._draw_idle",
                "file_path": "lib/matplotlib/backends/backend_macosx.py"
              },
              {
                "rank": 0,
                "tokens": 21,
                "span_id": "FigureCanvasMac.blit",
                "file_path": "lib/matplotlib/backends/backend_macosx.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "FigureCanvasMac"
                ],
                "code_snippet": "def resize(self, width, height):",
                "file_pattern": "lib/matplotlib/backends/backend_macosx.py",
                "function_names": [
                  "resize"
                ]
              }
            ]
          },
          "input_tokens": 7916,
          "output_tokens": 245,
          "retry_message": null,
          "completion_cost": 0.027423000000000003
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 63,
            "span_id": "FigureCanvasMac.resize",
            "file_path": "lib/matplotlib/backends/backend_macosx.py"
          },
          {
            "rank": 0,
            "tokens": 104,
            "span_id": "FigureCanvasMac._draw_idle",
            "file_path": "lib/matplotlib/backends/backend_macosx.py"
          },
          {
            "rank": 0,
            "tokens": 21,
            "span_id": "FigureCanvasMac.blit",
            "file_path": "lib/matplotlib/backends/backend_macosx.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about the DPI of a figure being doubled after unpickling on M1 Macs, which leads to an OverflowError. The traceback provided in the issue indicates that the problem occurs in the backend_macosx.py file, specifically in the context of the 'backend_macosx' backend. This suggests that the issue is related to how the figure's DPI is handled or interpreted within the Mac OS X backend. Given the context, it seems crucial to focus on code spans related to the handling of DPI settings, resizing operations, and unpickling in the backend_macosx.py file. The provided search results include the FigureCanvasMac class and its methods, which could be relevant to understanding how the DPI might be mismanaged when figures are unpickled and processed by the Mac OS X backend. Specifically, the `resize` method in the `FigureCanvasMac` class adjusts the figure size in inches and re-renders the figure. Given that the issue might be related to DPI handling, these spans are considered relevant for addressing the identified issue. However, further investigation into the exact location of the problematic DPI doubling in the backend_macosx.py file could be required to complete the search for relevant spans.",
            "identified_spans": [
              {
                "span_ids": [
                  "FigureCanvasMac.__init__",
                  "FigureCanvasMac._draw_idle",
                  "FigureCanvasMac.blit",
                  "FigureCanvasMac.resize"
                ],
                "file_path": "lib/matplotlib/backends/backend_macosx.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 5638,
          "output_tokens": 365,
          "retry_message": null,
          "completion_cost": 0.022389000000000003
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "Given the provided file context, the primary focus should be on the `Figure` class in 'lib/matplotlib/figure.py' and the `FigureCanvasMac` class in 'lib/matplotlib/backends/backend_macosx.py'. Specifically, the `Figure._set_dpi` method and the `FigureCanvasMac.resize` method are crucial for understanding how DPI is managed during figure handling on M1 Macs. Additional attention should be given to any related methods or handlers in 'backend_macosx.py' that might interact with these functionalities during the resizing or unpickling stages.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 5269,
          "output_tokens": 164,
          "retry_message": null,
          "completion_cost": 0.018267000000000002
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "Figure._set_dpi",
            "file_path": "lib/matplotlib/figure.py",
            "scratch_pad": "The issue involves the DPI of a figure being doubled after unpickling, particularly on M1 Macs. The root cause seems to be in the `Figure` class, specifically in the way the DPI is handled. We'll need to address this in the `_set_dpi` method and ensure that the DPI value is properly managed during the unpickling process.",
            "instructions": "Modify the `_set_dpi` method in the `Figure` class to ensure that the DPI value is not doubled upon unpickling. Specifically, we need to ensure that the DPI value is set correctly without any multiplication or doubling. This method should only update the DPI if it has actually changed."
          },
          "output": {
            "span_id": "Figure._set_dpi",
            "end_line": 2595,
            "file_path": "lib/matplotlib/figure.py",
            "start_line": 2579,
            "instructions": "Modify the `_set_dpi` method in the `Figure` class to ensure that the DPI value is not doubled upon unpickling. Specifically, we need to ensure that the DPI value is set correctly without any multiplication or doubling. This method should only update the DPI if it has actually changed."
          },
          "input_tokens": 6279,
          "output_tokens": 203,
          "retry_message": null,
          "completion_cost": 0.021882
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "Figure._set_dpi",
        "end_line": 2595,
        "file_path": "lib/matplotlib/figure.py",
        "max_tokens": 1000,
        "start_line": 2579,
        "temperature": 1.6,
        "instructions": "Modify the `_set_dpi` method in the `Figure` class to ensure that the DPI value is not doubled upon unpickling. Specifically, we need to ensure that the DPI value is set correctly without any multiplication or doubling. This method should only update the DPI if it has actually changed.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```json\n{\n  \"replace\": \"    def _set_dpi(self, dpi, forward=True):\\n        \\\"\\\"\\\"\\n        Parameters\\n        ----------\\n        dpi : float\\n\\n        forward : bool\\n            Passed on to `~.Figure.set_size_inches`\\n        \\\"\\\"\\\"\\n        if dpi != self._dpi:\\n            self._dpi = dpi\\n            self.dpi_scale_trans.clear().scale(dpi)\\n            w, h = self.get_size_inches()\\n            self.set_size_inches(w, h, forward=forward)\\n            self._fig_callbacks.process('dpi_changed', self)\"\n}\n```"
          },
          "output": null,
          "input_tokens": 7760,
          "output_tokens": 166,
          "retry_message": "You did not provide any code in the replace tag. If you want to reject the instructions, use the reject function.",
          "completion_cost": 0.02577
        },
        {
          "action": {
            "content": "```json\n{\n  \"reject\": \"The original code does not include a method named `_set_dpi` in the context provided, making it impossible to modify as requested.\"\n}\n```"
          },
          "output": null,
          "input_tokens": 7957,
          "output_tokens": 42,
          "retry_message": "You did not provide any code in the replace tag. If you want to reject the instructions, use the reject function.",
          "completion_cost": 0.024501
        },
        {
          "action": {
            "content": "```json\n{\n  \"reject\": \"The instructions ask for modifications in the `_set_dpi` method, but the provided context does not include this method, making it impossible to modify as requested.\"\n}\n```"
          },
          "output": null,
          "input_tokens": 8030,
          "output_tokens": 47,
          "retry_message": "You did not provide any code in the replace tag. If you want to reject the instructions, use the reject function.",
          "completion_cost": 0.024795
        }
      ]
    }
  ],
  "initial_message": "[Bug]: DPI of a figure is doubled after unpickling on M1 Mac\n### Bug summary\r\n\r\nWhen a figure is unpickled, it's dpi is doubled. This behaviour happens every time and if done in a loop it can cause an `OverflowError`.\r\n\r\n### Code for reproduction\r\n\r\n```python\r\nimport numpy as np\r\nimport matplotlib\r\nimport matplotlib.pyplot as plt\r\nimport pickle\r\nimport platform\r\n\r\nprint(matplotlib.get_backend())\r\nprint('Matplotlib ver:', matplotlib.__version__)\r\nprint('Platform:', platform.platform())\r\nprint('System:', platform.system())\r\nprint('Release:', platform.release())\r\nprint('Python ver:', platform.python_version())\r\n\r\n\r\ndef dump_load_get_dpi(fig):\r\n    with open('sinus.pickle','wb') as file:\r\n        pickle.dump(fig, file)\r\n\r\n    with open('sinus.pickle', 'rb') as blob:\r\n        fig2 = pickle.load(blob)\r\n    return fig2, fig2.dpi\r\n\r\n\r\ndef run():\r\n    fig = plt.figure()\r\n    x = np.linspace(0,2*np.pi)\r\n    y = np.sin(x)\r\n\r\n    for i in range(32):\r\n        print(f'{i}: {fig.dpi}')\r\n        fig, dpi = dump_load_get_dpi(fig)\r\n\r\n\r\nif __name__ == '__main__':\r\n    run()\r\n```\r\n\r\n\r\n### Actual outcome\r\n\r\n```\r\nMacOSX\r\nMatplotlib ver: 3.5.2\r\nPlatform: macOS-12.4-arm64-arm-64bit\r\nSystem: Darwin\r\nRelease: 21.5.0\r\nPython ver: 3.9.12\r\n0: 200.0\r\n1: 400.0\r\n2: 800.0\r\n3: 1600.0\r\n4: 3200.0\r\n5: 6400.0\r\n6: 12800.0\r\n7: 25600.0\r\n8: 51200.0\r\n9: 102400.0\r\n10: 204800.0\r\n11: 409600.0\r\n12: 819200.0\r\n13: 1638400.0\r\n14: 3276800.0\r\n15: 6553600.0\r\n16: 13107200.0\r\n17: 26214400.0\r\n18: 52428800.0\r\n19: 104857600.0\r\n20: 209715200.0\r\n21: 419430400.0\r\nTraceback (most recent call last):\r\n  File \"/Users/wsykala/projects/matplotlib/example.py\", line 34, in <module>\r\n    run()\r\n  File \"/Users/wsykala/projects/matplotlib/example.py\", line 30, in run\r\n    fig, dpi = dump_load_get_dpi(fig)\r\n  File \"/Users/wsykala/projects/matplotlib/example.py\", line 20, in dump_load_get_dpi\r\n    fig2 = pickle.load(blob)\r\n  File \"/Users/wsykala/miniconda3/envs/playground/lib/python3.9/site-packages/matplotlib/figure.py\", line 2911, in __setstate__\r\n    mgr = plt._backend_mod.new_figure_manager_given_figure(num, self)\r\n  File \"/Users/wsykala/miniconda3/envs/playground/lib/python3.9/site-packages/matplotlib/backend_bases.py\", line 3499, in new_figure_manager_given_figure\r\n    canvas = cls.FigureCanvas(figure)\r\n  File \"/Users/wsykala/miniconda3/envs/playground/lib/python3.9/site-packages/matplotlib/backends/backend_macosx.py\", line 32, in __init__\r\n    _macosx.FigureCanvas.__init__(self, width, height)\r\nOverflowError: signed integer is greater than maximum\r\n```\r\n\r\n### Expected outcome\r\n\r\n```\r\nMacOSX\r\nMatplotlib ver: 3.5.2\r\nPlatform: macOS-12.4-arm64-arm-64bit\r\nSystem: Darwin\r\nRelease: 21.5.0\r\nPython ver: 3.9.12\r\n0: 200.0\r\n1: 200.0\r\n2: 200.0\r\n3: 200.0\r\n4: 200.0\r\n5: 200.0\r\n6: 200.0\r\n7: 200.0\r\n8: 200.0\r\n9: 200.0\r\n10: 200.0\r\n11: 200.0\r\n12: 200.0\r\n13: 200.0\r\n14: 200.0\r\n15: 200.0\r\n16: 200.0\r\n17: 200.0\r\n18: 200.0\r\n19: 200.0\r\n20: 200.0\r\n21: 200.0\r\n22: 200.0\r\n```\r\n\r\n### Additional information\r\n\r\nThis seems to happen only on M1 MacBooks and the version of python doesn't matter.\r\n\r\n### Operating system\r\n\r\nOS/X\r\n\r\n### Matplotlib Version\r\n\r\n3.5.2\r\n\r\n### Matplotlib Backend\r\n\r\nMacOSX\r\n\r\n### Python version\r\n\r\n3.9.12\r\n\r\n### Jupyter version\r\n\r\n_No response_\r\n\r\n### Installation\r\n\r\npip\n"
}