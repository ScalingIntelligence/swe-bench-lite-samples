{
  "info": {
    "duration": 184.6317241191864,
    "submission": "diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py\nindex 95a991b17..6e53059fc 100644\n--- a/sphinx/ext/autodoc/__init__.py\n+++ b/sphinx/ext/autodoc/__init__.py\n@@ -1841,7 +1841,7 @@ class UninitializedGlobalVariableMixin(DataDocumenterMixinBase):\n         except ImportError as exc:\n             # annotation only instance variable (PEP-526)\n             try:\n-                with mock(self.config.autodoc_mock_imports):\n+                with mock({**self.config.autodoc_mock_imports, 'struct': struct}):\n                     parent = import_module(self.modname, self.config.autodoc_warningiserror)\n                     annotations = get_type_hints(parent, None,\n                                                  self.config.autodoc_type_aliases)\n",
    "total_cost": 0.098649,
    "instance_id": "sphinx-doc__sphinx-8627",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue indicates that autodoc is unable to resolve type annotations for the `struct.Struct` type, leading to errors in the documentation generation. Given the complexity and potential involvement of multiple components in the Sphinx autodoc extension, it's crucial to focus on the autodoc module and related utilities that handle type annotations and class reference resolution. The initial files provided give a good starting point but do not directly address the type resolution for `struct.Struct`. To thoroughly address the issue, I'll look specifically into files that handle type annotation processing, class reference resolution, and possibly any helper functions or mixins that might contribute to resolving types in the autodoc process.",
            "search_requests": [
              {
                "query": "type annotations struct.Struct",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sphinx/ext/autodoc/**/*.py",
                "function_names": []
              },
              {
                "query": "type annotations resolution",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sphinx/util/**/*.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 263,
                "span_id": "docstring",
                "file_path": "sphinx/ext/autodoc/directive.py"
              },
              {
                "rank": 0,
                "tokens": 14,
                "span_id": "DummyOptionSpec",
                "file_path": "sphinx/ext/autodoc/directive.py"
              },
              {
                "rank": 0,
                "tokens": 20,
                "span_id": "DummyOptionSpec.__bool__",
                "file_path": "sphinx/ext/autodoc/directive.py"
              },
              {
                "rank": 0,
                "tokens": 22,
                "span_id": "DummyOptionSpec.__getitem__",
                "file_path": "sphinx/ext/autodoc/directive.py"
              },
              {
                "rank": 1,
                "tokens": 506,
                "span_id": "docstring",
                "file_path": "sphinx/ext/autodoc/__init__.py"
              },
              {
                "rank": 1,
                "tokens": 14,
                "span_id": "impl:8",
                "file_path": "sphinx/ext/autodoc/__init__.py"
              },
              {
                "rank": 1,
                "tokens": 11,
                "span_id": "identity",
                "file_path": "sphinx/ext/autodoc/__init__.py"
              },
              {
                "rank": 1,
                "tokens": 19,
                "span_id": "_All",
                "file_path": "sphinx/ext/autodoc/__init__.py"
              },
              {
                "rank": 1,
                "tokens": 15,
                "span_id": "_All.__contains__",
                "file_path": "sphinx/ext/autodoc/__init__.py"
              },
              {
                "rank": 1,
                "tokens": 20,
                "span_id": "_Empty",
                "file_path": "sphinx/ext/autodoc/__init__.py"
              },
              {
                "rank": 1,
                "tokens": 15,
                "span_id": "_Empty.__contains__",
                "file_path": "sphinx/ext/autodoc/__init__.py"
              },
              {
                "rank": 1,
                "tokens": 27,
                "span_id": "impl:10",
                "file_path": "sphinx/ext/autodoc/__init__.py"
              },
              {
                "rank": 1,
                "tokens": 62,
                "span_id": "members_option",
                "file_path": "sphinx/ext/autodoc/__init__.py"
              },
              {
                "rank": 0,
                "tokens": 422,
                "span_id": "docstring",
                "file_path": "sphinx/util/__init__.py"
              },
              {
                "rank": 0,
                "tokens": 42,
                "span_id": "docname_join",
                "file_path": "sphinx/util/__init__.py"
              },
              {
                "rank": 0,
                "tokens": 44,
                "span_id": "path_stabilize",
                "file_path": "sphinx/util/__init__.py"
              },
              {
                "rank": 1,
                "tokens": 255,
                "span_id": "docstring",
                "file_path": "sphinx/util/nodes.py"
              },
              {
                "rank": 8,
                "tokens": 269,
                "span_id": "process_index_entry",
                "file_path": "sphinx/util/nodes.py"
              },
              {
                "rank": 2,
                "tokens": 373,
                "span_id": "docstring",
                "file_path": "sphinx/util/typing.py"
              },
              {
                "rank": 3,
                "tokens": 1263,
                "span_id": "_restify_py36",
                "file_path": "sphinx/util/typing.py"
              },
              {
                "rank": 4,
                "tokens": 189,
                "span_id": "get_type_hints",
                "file_path": "sphinx/util/typing.py"
              },
              {
                "rank": 5,
                "tokens": 147,
                "span_id": "SphinxRole.__call__",
                "file_path": "sphinx/util/docutils.py"
              },
              {
                "rank": 9,
                "tokens": 131,
                "span_id": "SphinxTranslator.dispatch_departure",
                "file_path": "sphinx/util/docutils.py"
              },
              {
                "rank": 6,
                "tokens": 115,
                "span_id": "register_application_for_autosummary",
                "file_path": "sphinx/util/compat.py"
              },
              {
                "rank": 6,
                "tokens": 105,
                "span_id": "docstring",
                "file_path": "sphinx/util/compat.py"
              },
              {
                "rank": 7,
                "tokens": 454,
                "span_id": "docstring",
                "file_path": "sphinx/util/inspect.py"
              }
            ],
            "search_requests": [
              {
                "query": "type annotations struct.Struct",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sphinx/ext/autodoc/**/*.py",
                "function_names": []
              },
              {
                "query": "type annotations resolution",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sphinx/util/**/*.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 3371,
          "output_tokens": 235,
          "retry_message": null,
          "completion_cost": 0.013638
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 263,
            "span_id": "docstring",
            "file_path": "sphinx/ext/autodoc/directive.py"
          },
          {
            "rank": 0,
            "tokens": 14,
            "span_id": "DummyOptionSpec",
            "file_path": "sphinx/ext/autodoc/directive.py"
          },
          {
            "rank": 0,
            "tokens": 20,
            "span_id": "DummyOptionSpec.__bool__",
            "file_path": "sphinx/ext/autodoc/directive.py"
          },
          {
            "rank": 0,
            "tokens": 22,
            "span_id": "DummyOptionSpec.__getitem__",
            "file_path": "sphinx/ext/autodoc/directive.py"
          },
          {
            "rank": 0,
            "tokens": 422,
            "span_id": "docstring",
            "file_path": "sphinx/util/__init__.py"
          },
          {
            "rank": 0,
            "tokens": 42,
            "span_id": "docname_join",
            "file_path": "sphinx/util/__init__.py"
          },
          {
            "rank": 0,
            "tokens": 44,
            "span_id": "path_stabilize",
            "file_path": "sphinx/util/__init__.py"
          },
          {
            "rank": 1,
            "tokens": 506,
            "span_id": "docstring",
            "file_path": "sphinx/ext/autodoc/__init__.py"
          },
          {
            "rank": 1,
            "tokens": 14,
            "span_id": "impl:8",
            "file_path": "sphinx/ext/autodoc/__init__.py"
          },
          {
            "rank": 1,
            "tokens": 11,
            "span_id": "identity",
            "file_path": "sphinx/ext/autodoc/__init__.py"
          },
          {
            "rank": 1,
            "tokens": 19,
            "span_id": "_All",
            "file_path": "sphinx/ext/autodoc/__init__.py"
          },
          {
            "rank": 1,
            "tokens": 15,
            "span_id": "_All.__contains__",
            "file_path": "sphinx/ext/autodoc/__init__.py"
          },
          {
            "rank": 1,
            "tokens": 20,
            "span_id": "_Empty",
            "file_path": "sphinx/ext/autodoc/__init__.py"
          },
          {
            "rank": 1,
            "tokens": 15,
            "span_id": "_Empty.__contains__",
            "file_path": "sphinx/ext/autodoc/__init__.py"
          },
          {
            "rank": 1,
            "tokens": 27,
            "span_id": "impl:10",
            "file_path": "sphinx/ext/autodoc/__init__.py"
          },
          {
            "rank": 1,
            "tokens": 62,
            "span_id": "members_option",
            "file_path": "sphinx/ext/autodoc/__init__.py"
          },
          {
            "rank": 1,
            "tokens": 255,
            "span_id": "docstring",
            "file_path": "sphinx/util/nodes.py"
          },
          {
            "rank": 2,
            "tokens": 373,
            "span_id": "docstring",
            "file_path": "sphinx/util/typing.py"
          },
          {
            "rank": 3,
            "tokens": 1263,
            "span_id": "_restify_py36",
            "file_path": "sphinx/util/typing.py"
          },
          {
            "rank": 4,
            "tokens": 189,
            "span_id": "get_type_hints",
            "file_path": "sphinx/util/typing.py"
          },
          {
            "rank": 5,
            "tokens": 147,
            "span_id": "SphinxRole.__call__",
            "file_path": "sphinx/util/docutils.py"
          },
          {
            "rank": 6,
            "tokens": 115,
            "span_id": "register_application_for_autosummary",
            "file_path": "sphinx/util/compat.py"
          },
          {
            "rank": 6,
            "tokens": 105,
            "span_id": "docstring",
            "file_path": "sphinx/util/compat.py"
          },
          {
            "rank": 7,
            "tokens": 454,
            "span_id": "docstring",
            "file_path": "sphinx/util/inspect.py"
          },
          {
            "rank": 8,
            "tokens": 269,
            "span_id": "process_index_entry",
            "file_path": "sphinx/util/nodes.py"
          },
          {
            "rank": 9,
            "tokens": 131,
            "span_id": "SphinxTranslator.dispatch_departure",
            "file_path": "sphinx/util/docutils.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about autodoc not being able to resolve `struct.Struct` type annotations. The key elements to focus on are the handling of type annotations and the resolution of class references within Sphinx's autodoc extension. Given the search results, the following are relevant to the issue at hand:\n\n1. **sphinx/ext/autodoc/directive.py** - This file contains the `DummyOptionSpec` class which may be handling options for directives. Not directly related to type annotations but relevant to understanding directive handling.\n\n2. **sphinx/util/__init__.py** - Contains utility functions and might not be directly relevant to the type annotation issue.\n\n3. **sphinx/ext/autodoc/__init__.py** - This is likely the core file for handling autodoc functionality. The `members_option` function and the `_All` and `_Empty` classes could be related to how members are processed and might be where type annotations are handled.\n\n4. **sphinx/util/nodes.py** - This file deals with docutils nodes and might not be directly relevant to the type annotation issue.\n\n5. **sphinx/util/typing.py** - Contains functions related to typing, which is directly relevant to the issue of type annotations. The `get_type_hints` function is particularly relevant as it deals with the extraction of type hints.\n\n6. **sphinx/util/docutils.py** - Deals with docutils integration and might not be directly relevant to type annotations.\n\n7. **sphinx/util/compat.py** - This is for compatibility and might not be directly relevant.\n\n8. **sphinx/util/inspect.py** - This file contains inspection utilities which could be used for resolving type annotations. The `stringify_annotation` function is likely relevant as it deals with stringifying annotations.\n\nBased on this analysis, the most relevant files and spans are those dealing directly with type annotations and autodoc functionality, such as `sphinx/ext/autodoc/__init__.py` and `sphinx/util/typing.py`.",
            "identified_spans": [
              {
                "span_ids": [
                  "impl:8",
                  "identity",
                  "_All",
                  "_All.__contains__",
                  "_Empty",
                  "_Empty.__contains__",
                  "impl:10",
                  "members_option"
                ],
                "file_path": "sphinx/ext/autodoc/__init__.py"
              },
              {
                "span_ids": [
                  "docstring",
                  "get_type_hints",
                  "_restify_py36"
                ],
                "file_path": "sphinx/util/typing.py"
              },
              {
                "span_ids": [
                  "docstring"
                ],
                "file_path": "sphinx/util/inspect.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4436,
          "output_tokens": 667,
          "retry_message": null,
          "completion_cost": 0.023313
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The provided file context includes significant portions of the Sphinx autodoc extension, particularly focusing on the handling of type annotations and class reference resolution. This directly relates to the issue where `struct.Struct` type annotations are not being resolved correctly. The mixins and utility functions provided, such as `UninitializedGlobalVariableMixin`, `SlotsMixin`, and `AttributeDocumenter`, along with utility functions like `get_type_hints` and `restify` in `sphinx/util/typing.py`, are relevant to resolving type annotations. These segments of code suggest that the file context has covered the main areas where a resolution for `struct.Struct` might be required, including how type hints are evaluated and how unresolved types are handled. Therefore, it appears that the provided file context is comprehensive enough to understand and potentially address the issue.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 5340,
          "output_tokens": 208,
          "retry_message": null,
          "completion_cost": 0.01914
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "UninitializedGlobalVariableMixin.import_object",
            "file_path": "sphinx/ext/autodoc/__init__.py",
            "scratch_pad": "The issue is that autodoc is unable to resolve `struct.Struct` type annotations. This can be addressed by ensuring that `struct` is correctly included in the mock imports and that the type hint resolution mechanism can handle `struct.Struct`. Given the context, updating the `UninitializedGlobalVariableMixin` to recognize and handle `struct.Struct` should resolve the issue.",
            "instructions": "Update the `UninitializedGlobalVariableMixin` to handle `struct.Struct` within the `import_object` method. Specifically, ensure that the class can recognize and mock `struct` if it is part of the type annotations."
          },
          "output": {
            "span_id": "UninitializedGlobalVariableMixin.import_object",
            "end_line": 1860,
            "file_path": "sphinx/ext/autodoc/__init__.py",
            "start_line": 1838,
            "instructions": "Update the `UninitializedGlobalVariableMixin` to handle `struct.Struct` within the `import_object` method. Specifically, ensure that the class can recognize and mock `struct` if it is part of the type annotations."
          },
          "input_tokens": 5792,
          "output_tokens": 191,
          "retry_message": null,
          "completion_cost": 0.020241
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "UninitializedGlobalVariableMixin.import_object",
        "end_line": 1860,
        "file_path": "sphinx/ext/autodoc/__init__.py",
        "max_tokens": 1000,
        "start_line": 1838,
        "temperature": 1.6,
        "instructions": "Update the `UninitializedGlobalVariableMixin` to handle `struct.Struct` within the `import_object` method. Specifically, ensure that the class can recognize and mock `struct` if it is part of the type annotations.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n    def import_object(self, raiseerror: bool = False) -> bool:\n        try:\n            return super().import_object(raiseerror=True)  # type: ignore\n        except ImportError as exc:\n            # annotation only instance variable (PEP-526)\n            try:\n                with mock({**self.config.autodoc_mock_imports, 'struct': struct}):\n                    parent = import_module(self.modname, self.config.autodoc_warningiserror)\n                    annotations = get_type_hints(parent, None,\n                                                 self.config.autodoc_type_aliases)\n                    if self.objpath[-1] in annotations:\n                        self.object = UNINITIALIZED_ATTR\n                        self.parent = parent\n                        return True\n            except ImportError:\n                pass\n\n            if raiseerror:\n                raise\n            else:\n                logger.warning(exc.args[0], type='autodoc', subtype='import_object')\n                self.env.note_reread()\n                return False\n</replace>"
          },
          "output": {
            "diff": "--- sphinx/ext/autodoc/__init__.py\n+++ sphinx/ext/autodoc/__init__.py\n@@ -1841,7 +1841,7 @@\n         except ImportError as exc:\n             # annotation only instance variable (PEP-526)\n             try:\n-                with mock(self.config.autodoc_mock_imports):\n+                with mock({**self.config.autodoc_mock_imports, 'struct': struct}):\n                     parent = import_module(self.modname, self.config.autodoc_warningiserror)\n                     annotations = get_type_hints(parent, None,\n                                                  self.config.autodoc_type_aliases)\n",
            "message": "Applied the change to sphinx/ext/autodoc/__init__.py.",
            "verification_errors": [
              {
                "code": "E0602",
                "line": 1844,
                "message": "Undefined variable 'struct'",
                "file_path": "sphinx/ext/autodoc/__init__.py"
              }
            ]
          },
          "input_tokens": 6184,
          "output_tokens": 251,
          "retry_message": null,
          "completion_cost": 0.022317
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sphinx/ext/autodoc/__init__.py\n+++ sphinx/ext/autodoc/__init__.py\n@@ -1841,7 +1841,7 @@\n         except ImportError as exc:\n             # annotation only instance variable (PEP-526)\n             try:\n-                with mock(self.config.autodoc_mock_imports):\n+                with mock({**self.config.autodoc_mock_imports, 'struct': struct}):\n                     parent = import_module(self.modname, self.config.autodoc_warningiserror)\n                     annotations = get_type_hints(parent, None,\n                                                  self.config.autodoc_type_aliases)\n",
        "model": "deepseek-coder",
        "message": "Applied the change to sphinx/ext/autodoc/__init__.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [
          {
            "code": "E0602",
            "line": 1844,
            "message": "Undefined variable 'struct'",
            "file_path": "sphinx/ext/autodoc/__init__.py"
          }
        ],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": null,
            "file_path": "sphinx/ext/autodoc/__init__.py",
            "scratch_pad": "The lint error indicates that the variable 'struct' is undefined in the context where it is being used. To resolve this, we need to import the 'struct' module at the beginning of the file where the change is being made.",
            "instructions": "Import the 'struct' module at the top of the file 'sphinx/ext/autodoc/__init__.py' to ensure it is defined when used in the 'UninitializedGlobalVariableMixin.import_object' method."
          },
          "output": null,
          "input_tokens": 6251,
          "output_tokens": 166,
          "retry_message": "You must either provide an apply_change action or finish.",
          "completion_cost": 0.021242999999999998
        },
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": null,
            "file_path": "sphinx/ext/autodoc/__init__.py",
            "scratch_pad": "After importing the 'struct' module, the reference to 'struct' within the mock context should be resolved, thereby fixing the lint error and enabling autodoc to properly resolve 'struct.Struct' type annotations.",
            "instructions": "Add the import statement 'import struct' at the top of the file 'sphinx/ext/autodoc/__init__.py'."
          },
          "output": null,
          "input_tokens": 6436,
          "output_tokens": 142,
          "retry_message": "You must either provide an apply_change action or finish.",
          "completion_cost": 0.021438
        },
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": null,
            "file_path": "sphinx/ext/autodoc/__init__.py",
            "scratch_pad": "By adding the import statement for 'struct' at the beginning of the file, we ensure that the 'struct' variable is defined and available throughout the file, specifically in the context of the 'UninitializedGlobalVariableMixin.import_object' method where it is used within the mock context.",
            "instructions": "Add the import statement 'import struct' at the top of the file 'sphinx/ext/autodoc/__init__.py'."
          },
          "output": null,
          "input_tokens": 6597,
          "output_tokens": 159,
          "retry_message": "You must either provide an apply_change action or finish.",
          "completion_cost": 0.022176
        }
      ]
    }
  ],
  "initial_message": "autodoc isn't able to resolve struct.Struct type annotations\n**Describe the bug**\r\nIf `struct.Struct` is declared in any type annotations, I get `class reference target not found: Struct`\r\n\r\n**To Reproduce**\r\nSimple `index.rst`\r\n```\r\nHello World\r\n===========\r\n\r\ncode docs\r\n=========\r\n\r\n.. automodule:: helloworld.helloworld\r\n```\r\n\r\nSimple `helloworld.py`\r\n```\r\nimport struct\r\nimport pathlib\r\n\r\ndef consume_struct(_: struct.Struct) -> None:\r\n    pass\r\n\r\ndef make_struct() -> struct.Struct:\r\n    mystruct = struct.Struct('HH')\r\n    return mystruct\r\n\r\ndef make_path() -> pathlib.Path:\r\n    return pathlib.Path()\r\n```\r\n\r\nCommand line:\r\n```\r\npython3 -m sphinx -b html docs/ doc-out -nvWT\r\n```\r\n\r\n**Expected behavior**\r\nIf you comment out the 2 functions that have `Struct` type annotations, you'll see that `pathlib.Path` resolves fine and shows up in the resulting documentation. I'd expect that `Struct` would also resolve correctly.\r\n\r\n**Your project**\r\nn/a\r\n\r\n**Screenshots**\r\nn/a\r\n\r\n**Environment info**\r\n- OS: Ubuntu 18.04, 20.04\r\n- Python version: 3.8.2\r\n- Sphinx version: 3.2.1\r\n- Sphinx extensions:  'sphinx.ext.autodoc',\r\n              'sphinx.ext.autosectionlabel',\r\n              'sphinx.ext.intersphinx',\r\n              'sphinx.ext.doctest',\r\n              'sphinx.ext.todo'\r\n- Extra tools: \r\n\r\n**Additional context**\r\n\r\n\r\n- [e.g. URL or Ticket]\r\n\r\n\n"
}