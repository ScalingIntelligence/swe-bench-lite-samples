{
  "info": {
    "duration": 270.2061150074005,
    "submission": "diff --git a/sympy/solvers/polysys.py b/sympy/solvers/polysys.py\nindex b9809fd4e9..1da54ea188 100644\n--- a/sympy/solvers/polysys.py\n+++ b/sympy/solvers/polysys.py\n@@ -240,6 +240,12 @@ def _solve_reduced_system(system, gens, entry=False):\n \n         univariate = list(filter(_is_univariate, basis))\n \n+        if len(univariate) < len(gens):\n+            raise NotImplementedError(filldedent('''\n+                only zero-dimensional systems supported\n+                (finite number of solutions)\n+                '''))\n+\n         if len(univariate) == 1:\n             f = univariate.pop()\n         else:\n",
    "total_cost": 0.14919300000000002,
    "instance_id": "sympy__sympy-22005",
    "evaluation_name": "temperature_sweep_250_samples_50_problems_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves the detection of infinite solution requests in the `solve_poly_system` function. The traceback indicates that the function raises a `NotImplementedError` for zero-dimensional systems (finite number of solutions). However, the current implementation does not correctly handle cases where the system is univariate and potentially infinite-dimensional. The provided diff suggests modifications to the `_solve_reduced_system` function within `sympy/solvers/polysys.py` to improve this behavior. Additionally, test cases are added in `sympy/solvers/tests/test_polysys.py` to cover these scenarios.",
            "search_requests": [
              {
                "query": "solve_poly_system univariate infinite-dimensional",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sympy/solvers/polysys.py",
                "function_names": [
                  "solve_poly_system",
                  "_solve_reduced_system"
                ]
              },
              {
                "query": "test cases for infinite-dimensional solve_poly_system",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sympy/solvers/tests/test_polysys.py",
                "function_names": [
                  "solve_poly_system"
                ]
              }
            ]
          },
          "output": null,
          "input_tokens": 3552,
          "output_tokens": 306,
          "retry_message": "It's not possible to search for test files.",
          "completion_cost": 0.015246000000000001
        },
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves the detection of infinite solution requests in the `solve_poly_system` function. The traceback indicates that the function raises a `NotImplementedError` for zero-dimensional systems (finite number of solutions). However, the current implementation does not correctly handle cases where the system is univariate and potentially infinite-dimensional. The provided diff suggests modifications to the `_solve_reduced_system` function within `sympy/solvers/polysys.py` to improve this behavior. Since searching for test files is not allowed, the focus should remain on the implementation file.",
            "search_requests": [
              {
                "query": "solve_poly_system univariate infinite-dimensional",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sympy/solvers/polysys.py",
                "function_names": [
                  "solve_poly_system",
                  "_solve_reduced_system"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 3,
                "tokens": 298,
                "span_id": "solve_poly_system",
                "file_path": "sympy/solvers/polysys.py"
              }
            ],
            "search_requests": [
              {
                "query": "solve_poly_system univariate infinite-dimensional",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sympy/solvers/polysys.py",
                "function_names": [
                  "solve_poly_system",
                  "_solve_reduced_system"
                ]
              }
            ]
          },
          "input_tokens": 3908,
          "output_tokens": 242,
          "retry_message": null,
          "completion_cost": 0.015354
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 3,
            "tokens": 298,
            "span_id": "solve_poly_system",
            "file_path": "sympy/solvers/polysys.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue pertains to the detection and handling of cases where a polynomial system has an infinite number of solutions, specifically in the context of the `solve_poly_system` function. This issue is evidenced by the example where `solve_poly_system((y - 1,), x, y)` does not raise a `NotImplementedError` as expected but instead returns `[(1,)]`. This suggests that the current implementation does not properly handle or detect such cases where the system degenerates into an infinite solution set. \n\nUpon reviewing the search results, it is evident that the focus should be on the `solve_poly_system` function and its related internal functions such as `solve_generic` and `_solve_reduced_system`. The code spans identified for relevance are those related to the actual solving of the polynomial system, especially where the system's dimensionality (zero-dimensional for finite solutions) is checked and handled. The identified spans include the main function `solve_poly_system` as well as `solve_generic` which includes the `_solve_reduced_system` function where the error handling for 'only zero-dimensional systems supported' is implemented. \n\nGiven the reported issue, we need to ensure that the detection and handling of systems with possibly infinite solutions are adequately addressed. The current implementation likely fails to recognize when a system could have an infinite number of solutions, leading to incorrect results without raising the expected error. The provided code spans give a clear view of where such detections and checks should be implemented or adjusted.",
            "identified_spans": [
              {
                "span_ids": [
                  "solve_poly_system",
                  "solve_generic",
                  "_solve_reduced_system"
                ],
                "file_path": "sympy/solvers/polysys.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 2630,
          "output_tokens": 410,
          "retry_message": null,
          "completion_cost": 0.01404
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The provided file context includes the relevant function `_solve_reduced_system` which is directly involved in solving polynomial systems and handling zero-dimensional systems. The modification suggested in the issue is to enhance the detection of infinite solutions by checking if the system is univariate and potentially infinite-dimensional. The current implementation already raises a `NotImplementedError` for such cases, but the issue suggests a more nuanced check. This check is within the scope of the provided file context as it involves direct modification to `_solve_reduced_system`.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 2564,
          "output_tokens": 148,
          "retry_message": null,
          "completion_cost": 0.009912
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "solve_generic",
            "file_path": "sympy/solvers/polysys.py",
            "scratch_pad": "The current implementation of solve_poly_system does not handle cases where there is an infinite number of solutions correctly. Specifically, when there is a single polynomial in the system and multiple generators, it should raise a NotImplementedError indicating that only zero-dimensional systems are supported. The existing check for univariate polynomials is insufficient because it does not account for the number of generators.",
            "instructions": "Modify the _solve_reduced_system function to ensure that it raises a NotImplementedError when there is an infinite number of solutions. This should be done by checking if the number of univariate polynomials is less than the number of generators, indicating an infinite solution set."
          },
          "output": {
            "span_id": "solve_generic",
            "file_path": "sympy/solvers/polysys.py",
            "instructions": "Modify the _solve_reduced_system function to ensure that it raises a NotImplementedError when there is an infinite number of solutions. This should be done by checking if the number of univariate polynomials is less than the number of generators, indicating an infinite solution set."
          },
          "input_tokens": 2735,
          "output_tokens": 189,
          "retry_message": null,
          "completion_cost": 0.011040000000000001
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "solve_generic",
        "end_line": null,
        "file_path": "sympy/solvers/polysys.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Modify the _solve_reduced_system function to ensure that it raises a NotImplementedError when there is an infinite number of solutions. This should be done by checking if the number of univariate polynomials is less than the number of generators, indicating an infinite solution set.\n\nThe _solve_reduced_system function needs to be updated to raise a NotImplementedError when the number of univariate polynomials is less than the number of generators, indicating an infinite solution set. This condition can be checked right after determining the number of univariate polynomials.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 241,
            "start_line": 241,
            "scratch_pad": "The _solve_reduced_system function needs to be updated to raise a NotImplementedError when the number of univariate polynomials is less than the number of generators, indicating an infinite solution set. This condition can be checked right after determining the number of univariate polynomials."
          },
          "output": {
            "span_id": "solve_generic",
            "end_line": 282,
            "file_path": "sympy/solvers/polysys.py",
            "start_line": 227,
            "instructions": "Modify the _solve_reduced_system function to ensure that it raises a NotImplementedError when there is an infinite number of solutions. This should be done by checking if the number of univariate polynomials is less than the number of generators, indicating an infinite solution set.\n\nThe _solve_reduced_system function needs to be updated to raise a NotImplementedError when the number of univariate polynomials is less than the number of generators, indicating an infinite solution set. This condition can be checked right after determining the number of univariate polynomials."
          },
          "input_tokens": 2485,
          "output_tokens": 92,
          "retry_message": null,
          "completion_cost": 0.008834999999999999
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "solve_generic",
        "end_line": 282,
        "file_path": "sympy/solvers/polysys.py",
        "max_tokens": 1000,
        "start_line": 227,
        "temperature": 1.6,
        "instructions": "Modify the _solve_reduced_system function to ensure that it raises a NotImplementedError when there is an infinite number of solutions. This should be done by checking if the number of univariate polynomials is less than the number of generators, indicating an infinite solution set.\n\nThe _solve_reduced_system function needs to be updated to raise a NotImplementedError when the number of univariate polynomials is less than the number of generators, indicating an infinite solution set. This condition can be checked right after determining the number of univariate polynomials.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\n    def _solve_reduced_system(system, gens, entry=False):\n        \"\"\"Recursively solves reduced polynomial systems. \"\"\"\n        if len(system) == len(gens) == 1:\n            zeros = list(roots(system[0], gens[-1]).keys())\n            return [(zero,) for zero in zeros]\n\n        basis = groebner(system, gens, polys=True)\n\n        if len(basis) == 1 and basis[0].is_ground:\n            if not entry:\n                return []\n            else:\n                return None\n\n        univariate = list(filter(_is_univariate, basis))\n\n        if len(univariate) &lt; len(gens):\n            raise NotImplementedError(filldedent('''\n                only zero-dimensional systems supported\n                (finite number of solutions)\n                '''))\n\n        if len(univariate) == 1:\n            f = univariate.pop()\n        else:\n            raise NotImplementedError(filldedent('''\n                only zero-dimensional systems supported\n                (finite number of solutions)\n                '''))\n\n        gens = f.gens\n        gen = gens[-1]\n\n        zeros = list(roots(f.ltrim(gen)).keys())\n\n        if not zeros:\n            return []\n\n        if len(basis) == 1:\n            return [(zero,) for zero in zeros]\n\n        solutions = []\n\n        for zero in zeros:\n            new_system = []\n            new_gens = gens[:-1]\n\n            for b in basis[:-1]:\n                eq = _subs_root(b, gen, zero)\n\n                if eq is not S.Zero:\n                    new_system.append(eq)\n\n            for solution in _solve_reduced_system(new_system, new_gens):\n                solutions.append(solution + (zero,))\n\n        if solutions and len(solutions[0]) != len(gens):\n            raise NotImplementedError(filldedent('''\n                only zero-dimensional systems supported\n                (finite number of solutions)\n                '''))\n        return solutions\n</replace>"
          },
          "output": {
            "diff": "--- sympy/solvers/polysys.py\n+++ sympy/solvers/polysys.py\n@@ -240,6 +240,12 @@\n \n         univariate = list(filter(_is_univariate, basis))\n \n+        if len(univariate) &lt; len(gens):\n+            raise NotImplementedError(filldedent('''\n+                only zero-dimensional systems supported\n+                (finite number of solutions)\n+                '''))\n+\n         if len(univariate) == 1:\n             f = univariate.pop()\n         else:\n",
            "message": "Applied the change to sympy/solvers/polysys.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": [
              {
                "code": "E0001",
                "line": 243,
                "message": "Parsing failed: 'invalid syntax (sympy.solvers.polysys, line 243)'",
                "file_path": "sympy/solvers/polysys.py"
              }
            ]
          },
          "input_tokens": 4240,
          "output_tokens": 493,
          "retry_message": null,
          "completion_cost": 0.020115
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sympy/solvers/polysys.py\n+++ sympy/solvers/polysys.py\n@@ -240,6 +240,12 @@\n \n         univariate = list(filter(_is_univariate, basis))\n \n+        if len(univariate) &lt; len(gens):\n+            raise NotImplementedError(filldedent('''\n+                only zero-dimensional systems supported\n+                (finite number of solutions)\n+                '''))\n+\n         if len(univariate) == 1:\n             f = univariate.pop()\n         else:\n",
        "model": "deepseek-coder",
        "message": "Applied the change to sympy/solvers/polysys.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [
          {
            "code": "E0001",
            "line": 243,
            "message": "Parsing failed: 'invalid syntax (sympy.solvers.polysys, line 243)'",
            "file_path": "sympy/solvers/polysys.py"
          }
        ],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "solve_generic",
            "file_path": "sympy/solvers/polysys.py",
            "scratch_pad": "The lint error indicates that there is an issue with the syntax in the modified line. The '&lt;' character seems to be causing the problem. This is likely due to the fact that it is interpreted as an HTML entity instead of a less-than sign. To fix this, we need to replace '&lt;' with the actual less-than sign '<'.",
            "instructions": "Replace '&lt;' with '<' in the conditional statement to fix the syntax error."
          },
          "output": {
            "span_id": "solve_generic",
            "file_path": "sympy/solvers/polysys.py",
            "instructions": "Replace '&lt;' with '<' in the conditional statement to fix the syntax error."
          },
          "input_tokens": 3237,
          "output_tokens": 165,
          "retry_message": null,
          "completion_cost": 0.012186
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "solve_generic",
        "end_line": null,
        "file_path": "sympy/solvers/polysys.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Replace '&lt;' with '<' in the conditional statement to fix the syntax error.\n\nThe instruction requires replacing '&lt;' with '<' in the conditional statement. The only part of the code where such a replacement is relevant is in line 243, which contains a comparison using '&lt;'.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 243,
            "start_line": 243,
            "scratch_pad": "The instruction requires replacing '&lt;' with '<' in the conditional statement. The only part of the code where such a replacement is relevant is in line 243, which contains a comparison using '&lt;'."
          },
          "output": {
            "span_id": "solve_generic",
            "end_line": 288,
            "file_path": "sympy/solvers/polysys.py",
            "start_line": 227,
            "instructions": "Replace '&lt;' with '<' in the conditional statement to fix the syntax error.\n\nThe instruction requires replacing '&lt;' with '<' in the conditional statement. The only part of the code where such a replacement is relevant is in line 243, which contains a comparison using '&lt;'."
          },
          "input_tokens": 2515,
          "output_tokens": 83,
          "retry_message": null,
          "completion_cost": 0.008790000000000001
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "solve_generic",
        "end_line": 288,
        "file_path": "sympy/solvers/polysys.py",
        "max_tokens": 1000,
        "start_line": 227,
        "temperature": 1.6,
        "instructions": "Replace '&lt;' with '<' in the conditional statement to fix the syntax error.\n\nThe instruction requires replacing '&lt;' with '<' in the conditional statement. The only part of the code where such a replacement is relevant is in line 243, which contains a comparison using '&lt;'.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n    def _solve_reduced_system(system, gens, entry=False):\n        \"\"\"Recursively solves reduced polynomial systems. \"\"\"\n        if len(system) == len(gens) == 1:\n            zeros = list(roots(system[0], gens[-1]).keys())\n            return [(zero,) for zero in zeros]\n\n        basis = groebner(system, gens, polys=True)\n\n        if len(basis) == 1 and basis[0].is_ground:\n            if not entry:\n                return []\n            else:\n                return None\n\n        univariate = list(filter(_is_univariate, basis))\n\n        if len(univariate) < len(gens):\n            raise NotImplementedError(filldedent('''\n                only zero-dimensional systems supported\n                (finite number of solutions)\n                '''))\n\n        if len(univariate) == 1:\n            f = univariate.pop()\n        else:\n            raise NotImplementedError(filldedent('''\n                only zero-dimensional systems supported\n                (finite number of solutions)\n                '''))\n\n        gens = f.gens\n        gen = gens[-1]\n\n        zeros = list(roots(f.ltrim(gen)).keys())\n\n        if not zeros:\n            return []\n\n        if len(basis) == 1:\n            return [(zero,) for zero in zeros]\n\n        solutions = []\n\n        for zero in zeros:\n            new_system = []\n            new_gens = gens[:-1]\n\n            for b in basis[:-1]:\n                eq = _subs_root(b, gen, zero)\n\n                if eq is not S.Zero:\n                    new_system.append(eq)\n\n            for solution in _solve_reduced_system(new_system, new_gens):\n                solutions.append(solution + (zero,))\n\n        if solutions and len(solutions[0]) != len(gens):\n            raise NotImplementedError(filldedent('''\n                only zero-dimensional systems supported\n                (finite number of solutions)\n                '''))\n        return solutions\n</replace>"
          },
          "output": {
            "diff": "--- sympy/solvers/polysys.py\n+++ sympy/solvers/polysys.py\n@@ -240,7 +240,7 @@\n \n         univariate = list(filter(_is_univariate, basis))\n \n-        if len(univariate) &lt; len(gens):\n+        if len(univariate) < len(gens):\n             raise NotImplementedError(filldedent('''\n                 only zero-dimensional systems supported\n                 (finite number of solutions)\n",
            "message": "Applied the change to sympy/solvers/polysys.py.",
            "verification_errors": []
          },
          "input_tokens": 4289,
          "output_tokens": 488,
          "retry_message": null,
          "completion_cost": 0.020187
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sympy/solvers/polysys.py\n+++ sympy/solvers/polysys.py\n@@ -240,7 +240,7 @@\n \n         univariate = list(filter(_is_univariate, basis))\n \n-        if len(univariate) &lt; len(gens):\n+        if len(univariate) < len(gens):\n             raise NotImplementedError(filldedent('''\n                 only zero-dimensional systems supported\n                 (finite number of solutions)\n",
        "model": "deepseek-coder",
        "message": "Applied the change to sympy/solvers/polysys.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue has been resolved by modifying the _solve_reduced_system function to correctly identify and handle cases where the system has an infinite number of solutions. The necessary changes have been made to raise a NotImplementedError in such cases, ensuring that the system only supports zero-dimensional polynomial systems.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The modification to address the issue of detecting infinite solutions has been successfully applied and the lint error has been corrected. The code now correctly raises a NotImplementedError when the number of univariate polynomials is less than the number of generators, indicating an infinite solution set. This ensures that the system adheres to the requirement of supporting only zero-dimensional systems.",
            "instructions": null
          },
          "output": {
            "message": "The issue has been resolved by modifying the _solve_reduced_system function to correctly identify and handle cases where the system has an infinite number of solutions. The necessary changes have been made to raise a NotImplementedError in such cases, ensuring that the system only supports zero-dimensional polynomial systems."
          },
          "input_tokens": 3551,
          "output_tokens": 189,
          "retry_message": null,
          "completion_cost": 0.013488000000000002
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue has been resolved by modifying the _solve_reduced_system function to correctly identify and handle cases where the system has an infinite number of solutions. The necessary changes have been made to raise a NotImplementedError in such cases, ensuring that the system only supports zero-dimensional polynomial systems.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "detection of infinite solution request\n```python\r\n>>> solve_poly_system((x - 1,), x, y)\r\nTraceback (most recent call last):\r\n...\r\nNotImplementedError:\r\nonly zero-dimensional systems supported (finite number of solutions)\r\n>>> solve_poly_system((y - 1,), x, y)  <--- this is not handled correctly\r\n[(1,)]\r\n```\r\n```diff\r\ndiff --git a/sympy/solvers/polysys.py b/sympy/solvers/polysys.py\r\nindex b9809fd4e9..674322d4eb 100644\r\n--- a/sympy/solvers/polysys.py\r\n+++ b/sympy/solvers/polysys.py\r\n@@ -240,7 +240,7 @@ def _solve_reduced_system(system, gens, entry=False):\r\n \r\n         univariate = list(filter(_is_univariate, basis))\r\n \r\n-        if len(univariate) == 1:\r\n+        if len(univariate) == 1 and len(gens) == 1:\r\n             f = univariate.pop()\r\n         else:\r\n             raise NotImplementedError(filldedent('''\r\ndiff --git a/sympy/solvers/tests/test_polysys.py b/sympy/solvers/tests/test_polysys.py\r\nindex 58419f8762..9e674a6fe6 100644\r\n--- a/sympy/solvers/tests/test_polysys.py\r\n+++ b/sympy/solvers/tests/test_polysys.py\r\n@@ -48,6 +48,10 @@ def test_solve_poly_system():\r\n     raises(NotImplementedError, lambda: solve_poly_system(\r\n         [z, -2*x*y**2 + x + y**2*z, y**2*(-z - 4) + 2]))\r\n     raises(PolynomialError, lambda: solve_poly_system([1/x], x))\r\n+    raises(NotImplementedError, lambda: solve_poly_system(\r\n+        Poly(x - 1, x, y), (x, y)))\r\n+    raises(NotImplementedError, lambda: solve_poly_system(\r\n+        Poly(y - 1, x, y), (x, y)))\r\n \r\n \r\n def test_solve_biquadratic():\r\n```\n"
}