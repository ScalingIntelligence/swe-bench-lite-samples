{
  "info": {
    "duration": 360.858243227005,
    "submission": "diff --git a/sympy/solvers/polysys.py b/sympy/solvers/polysys.py\nindex b9809fd4e9..8330ed2bbf 100644\n--- a/sympy/solvers/polysys.py\n+++ b/sympy/solvers/polysys.py\n@@ -240,7 +240,12 @@ def _solve_reduced_system(system, gens, entry=False):\n \n         univariate = list(filter(_is_univariate, basis))\n \n-        if len(univariate) == 1:\n+        if len(univariate) == 1 and len(gens) > 1:\n+            raise NotImplementedError(filldedent('''\n+                only zero-dimensional systems supported\n+                (finite number of solutions)\n+                '''))\n+        elif len(univariate) == 1:\n             f = univariate.pop()\n         else:\n             raise NotImplementedError(filldedent('''\n",
    "total_cost": 0.148737,
    "instance_id": "sympy__sympy-22005",
    "evaluation_name": "temperature_sweep_250_samples_50_problems_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves the detection of an infinite solution request in the `solve_poly_system` function. The traceback indicates that only zero-dimensional systems are supported, which implies a finite number of solutions. The provided diff suggests modifications in the `sympy/solvers/polysys.py` file to handle this, specifically in the `_solve_reduced_system` function. Additionally, test cases are added to `sympy/solvers/tests/test_polysys.py` to ensure the new behavior is tested. To debug and fix this issue, focus on the code that handles polynomial systems and the corresponding test file.",
            "search_requests": [
              {
                "query": "solve_poly_system infinite solution detection",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/solvers/polysys.py",
                "function_names": []
              },
              {
                "query": "solve_poly_system infinite solution detection",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/solvers/tests/test_polysys.py",
                "function_names": []
              }
            ]
          },
          "output": null,
          "input_tokens": 3552,
          "output_tokens": 248,
          "retry_message": "It's not possible to search for test files.",
          "completion_cost": 0.014376
        },
        {
          "action": {
            "complete": false,
            "scratch_pad": "Given the restriction that test files cannot be searched, the focus will be solely on the main code file where the issue might be addressed. The issue involves the detection of an infinite solution request in the `solve_poly_system` function within `sympy/solvers/polysys.py`. The provided diff indicates modifications in this file that are likely related to handling this issue. Concentrating the search on `sympy/solvers/polysys.py` is therefore crucial to understand and fix the problem.",
            "search_requests": [
              {
                "query": "solve_poly_system infinite solution detection",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sympy/solvers/polysys.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 1199,
                "span_id": "solve_generic",
                "file_path": "sympy/solvers/polysys.py"
              },
              {
                "rank": 1,
                "tokens": 16,
                "span_id": "SolveFailed",
                "file_path": "sympy/solvers/polysys.py"
              },
              {
                "rank": 1,
                "tokens": 92,
                "span_id": "docstring",
                "file_path": "sympy/solvers/polysys.py"
              },
              {
                "rank": 2,
                "tokens": 298,
                "span_id": "solve_poly_system",
                "file_path": "sympy/solvers/polysys.py"
              },
              {
                "rank": 4,
                "tokens": 662,
                "span_id": "solve_triangulated",
                "file_path": "sympy/solvers/polysys.py"
              },
              {
                "rank": 5,
                "tokens": 516,
                "span_id": "solve_biquadratic",
                "file_path": "sympy/solvers/polysys.py"
              }
            ],
            "search_requests": [
              {
                "query": "solve_poly_system infinite solution detection",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sympy/solvers/polysys.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 3868,
          "output_tokens": 205,
          "retry_message": null,
          "completion_cost": 0.014679
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 1199,
            "span_id": "solve_generic",
            "file_path": "sympy/solvers/polysys.py"
          },
          {
            "rank": 1,
            "tokens": 16,
            "span_id": "SolveFailed",
            "file_path": "sympy/solvers/polysys.py"
          },
          {
            "rank": 1,
            "tokens": 92,
            "span_id": "docstring",
            "file_path": "sympy/solvers/polysys.py"
          },
          {
            "rank": 2,
            "tokens": 298,
            "span_id": "solve_poly_system",
            "file_path": "sympy/solvers/polysys.py"
          },
          {
            "rank": 4,
            "tokens": 662,
            "span_id": "solve_triangulated",
            "file_path": "sympy/solvers/polysys.py"
          },
          {
            "rank": 5,
            "tokens": 516,
            "span_id": "solve_biquadratic",
            "file_path": "sympy/solvers/polysys.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about the detection of an infinite solution request in the `solve_poly_system` function, where it should raise a `NotImplementedError` for systems that do not have a finite number of solutions. The current code does not handle this case correctly when given specific input like `solve_poly_system((y - 1,), x, y)`. The provided search results contain the `solve_poly_system` function and related functions in `sympy/solvers/polysys.py`. The functions `solve_generic` and `_solve_reduced_system` are particularly relevant as they handle the solving logic and might need modifications to correctly detect and handle cases with infinite solutions. Additionally, the `solve_biquadratic` function is relevant as it is called in the process of solving polynomial systems. The code spans that are most relevant to addressing the issue include the logic within `_solve_reduced_system` where the `NotImplementedError` is raised for systems with only a single univariate polynomial and all gens are not considered. The modifications suggested in the issue hint at inspecting the length of `univariate` and the total number of `gens` to determine if the system has a finite number of solutions, which can be directly applied to the code span in `_solve_reduced_system`. Therefore, these sections of code are the most pertinent to address the issue reported.",
            "identified_spans": [
              {
                "span_ids": [
                  "solve_poly_system",
                  "solve_generic",
                  "_solve_reduced_system",
                  "solve_biquadratic"
                ],
                "file_path": "sympy/solvers/polysys.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3240,
          "output_tokens": 391,
          "retry_message": null,
          "completion_cost": 0.015585
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The provided file context includes the `solve_poly_system` function as well as the `_solve_reduced_system` function, which both handle polynomial systems. The issue requests detection of infinite solution requests, which is indicated by an error handling mechanism already present in the code where `NotImplementedError` is raised for non-zero-dimensional systems. This aligns with the issue's requirements, suggesting that the necessary code to detect and handle the infinite solution scenarios is likely present. However, the specific case mentioned in the issue (where a single polynomial is provided but in multiple variables) has not been explicitly seen in the provided context. It's suggested that further examination of the `solve_poly_system` function and its interactions might be needed to confirm full coverage of the issues.",
            "search_suggestions": "It might be beneficial to extend the inspection into how the `solve_poly_system` function processes its inputs, especially when dealing with systems formed by a single polynomial but in multiple variables (as in `Poly(y - 1, x, y)`). Also, verifying whether the system correctly raises `NotImplementedError` when such cases are encountered could be crucial to decide if all relevant aspects have been covered."
          },
          "output": {
            "message": "It might be beneficial to extend the inspection into how the `solve_poly_system` function processes its inputs, especially when dealing with systems formed by a single polynomial but in multiple variables (as in `Poly(y - 1, x, y)`). Also, verifying whether the system correctly raises `NotImplementedError` when such cases are encountered could be crucial to decide if all relevant aspects have been covered."
          },
          "input_tokens": 2550,
          "output_tokens": 283,
          "retry_message": null,
          "completion_cost": 0.011895000000000001
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "It might be beneficial to extend the inspection into how the `solve_poly_system` function processes its inputs, especially when dealing with systems formed by a single polynomial but in multiple variables (as in `Poly(y - 1, x, y)`). Also, verifying whether the system correctly raises `NotImplementedError` when such cases are encountered could be crucial to decide if all relevant aspects have been covered.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The initial search focused on `sympy/solvers/polysys.py` was pertinent as it directly addresses the function `solve_poly_system` which is central to the issue. However, to fully understand how `solve_poly_system` processes inputs, especially those involving a single polynomial in multiple variables, it's necessary to delve deeper into the logic within this function. The provided context shows the presence of helper functions and logic that could handle or fail to handle such cases correctly, especially concerning the raising of `NotImplementedError`. Expanding the search to include detailed checks within `solve_poly_system` and its internal functions is warranted to ensure all potential paths for handling single polynomials in multiple variables are correctly addressed.",
            "search_requests": [
              {
                "query": "solve_poly_system input processing single polynomial multiple variables",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sympy/solvers/polysys.py",
                "function_names": [
                  "solve_poly_system",
                  "_solve_reduced_system"
                ]
              },
              {
                "query": "NotImplementedError handling single polynomial multiple variables",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sympy/solvers/polysys.py",
                "function_names": [
                  "solve_poly_system",
                  "_solve_reduced_system"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 2,
                "tokens": 298,
                "span_id": "solve_poly_system",
                "file_path": "sympy/solvers/polysys.py"
              },
              {
                "rank": 2,
                "tokens": 298,
                "span_id": "solve_poly_system",
                "file_path": "sympy/solvers/polysys.py"
              }
            ],
            "search_requests": [
              {
                "query": "solve_poly_system input processing single polynomial multiple variables",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sympy/solvers/polysys.py",
                "function_names": [
                  "solve_poly_system",
                  "_solve_reduced_system"
                ]
              },
              {
                "query": "NotImplementedError handling single polynomial multiple variables",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sympy/solvers/polysys.py",
                "function_names": [
                  "solve_poly_system",
                  "_solve_reduced_system"
                ]
              }
            ]
          },
          "input_tokens": 4906,
          "output_tokens": 344,
          "retry_message": null,
          "completion_cost": 0.019878
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 2,
            "tokens": 298,
            "span_id": "solve_poly_system",
            "file_path": "sympy/solvers/polysys.py"
          },
          {
            "rank": 2,
            "tokens": 298,
            "span_id": "solve_poly_system",
            "file_path": "sympy/solvers/polysys.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about the detection of an infinite solution request in the `solve_poly_system` function. The provided example suggests that the function should raise a `NotImplementedError` for certain cases where the system is not zero-dimensional (finite number of solutions). The current implementation raises this error for non-zero-dimensional systems, but the example reveals that the function does not handle all cases correctly. Specifically, it does not raise an error when `solve_poly_system` is called with a polynomial system that can have an infinite number of solutions. The search results show the relevant code spans in `sympy/solvers/polysys.py` where the functions `solve_poly_system`, `solve_biquadratic`, and `solve_generic` are defined. The key section is the `solve_generic` function, which includes the logic for solving polynomial systems and raises the `NotImplementedError` for non-zero-dimensional systems. The identified code spans are relevant to the reported issue as they contain the logic for handling polynomial systems and raising the required error for infinite solutions.",
            "identified_spans": [
              {
                "span_ids": [
                  "solve_poly_system",
                  "solve_biquadratic",
                  "solve_generic"
                ],
                "file_path": "sympy/solvers/polysys.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3725,
          "output_tokens": 318,
          "retry_message": null,
          "completion_cost": 0.015945
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The provided file context includes the `solve_poly_system` function and its related helper functions such as `solve_reduced_system`, `_is_univariate`, `_subs_root`, etc. The context also includes the raising of `NotImplementedError` for systems that are not zero-dimensional. This covers the relevant code that would be involved in fixing or handling the detection of infinite solutions as described in the issue. The issue mentions handling systems with a single polynomial in multiple variables, which could result in an infinite number of solutions. The file context shows that such cases are currently unsupported, raising a `NotImplementedError`, which aligns with the requirement to detect and handle such cases correctly. Therefore, the file context appears to be relevant and sufficient to address the reported issue.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 2594,
          "output_tokens": 198,
          "retry_message": null,
          "completion_cost": 0.010752
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "solve_generic",
            "file_path": "sympy/solvers/polysys.py",
            "scratch_pad": "The current implementation is not correctly handling systems with an infinite number of solutions. The issue occurs when the system is univariate but involves more than one variable, leading to an incorrect detection of a finite solution. The solution is to modify the condition that checks for univariate systems to ensure it correctly identifies and raises a NotImplementedError for systems that are not zero-dimensional.",
            "instructions": "Update the condition for detecting univariate systems in the _solve_reduced_system function to correctly handle cases where the system is univariate but involves more than one variable. Specifically, change the condition to raise a NotImplementedError when the number of univariate polynomials is one but the number of variables is greater than one."
          },
          "output": {
            "span_id": "solve_generic",
            "file_path": "sympy/solvers/polysys.py",
            "instructions": "Update the condition for detecting univariate systems in the _solve_reduced_system function to correctly handle cases where the system is univariate but involves more than one variable. Specifically, change the condition to raise a NotImplementedError when the number of univariate polynomials is one but the number of variables is greater than one."
          },
          "input_tokens": 2735,
          "output_tokens": 198,
          "retry_message": null,
          "completion_cost": 0.011175000000000001
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "solve_generic",
        "end_line": null,
        "file_path": "sympy/solvers/polysys.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Update the condition for detecting univariate systems in the _solve_reduced_system function to correctly handle cases where the system is univariate but involves more than one variable. Specifically, change the condition to raise a NotImplementedError when the number of univariate polynomials is one but the number of variables is greater than one.\n\nThe condition for detecting univariate systems is currently at line 241-246. To raise a NotImplementedError when the number of univariate polynomials is one but the number of variables is greater than one, the current condition should be modified.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 246,
            "start_line": 241,
            "scratch_pad": "The condition for detecting univariate systems is currently at line 241-246. To raise a NotImplementedError when the number of univariate polynomials is one but the number of variables is greater than one, the current condition should be modified."
          },
          "output": {
            "span_id": "solve_generic",
            "end_line": 246,
            "file_path": "sympy/solvers/polysys.py",
            "start_line": 241,
            "instructions": "Update the condition for detecting univariate systems in the _solve_reduced_system function to correctly handle cases where the system is univariate but involves more than one variable. Specifically, change the condition to raise a NotImplementedError when the number of univariate polynomials is one but the number of variables is greater than one.\n\nThe condition for detecting univariate systems is currently at line 241-246. To raise a NotImplementedError when the number of univariate polynomials is one but the number of variables is greater than one, the current condition should be modified."
          },
          "input_tokens": 2495,
          "output_tokens": 97,
          "retry_message": null,
          "completion_cost": 0.00894
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "solve_generic",
        "end_line": 246,
        "file_path": "sympy/solvers/polysys.py",
        "max_tokens": 1000,
        "start_line": 241,
        "temperature": 1.6,
        "instructions": "Update the condition for detecting univariate systems in the _solve_reduced_system function to correctly handle cases where the system is univariate but involves more than one variable. Specifically, change the condition to raise a NotImplementedError when the number of univariate polynomials is one but the number of variables is greater than one.\n\nThe condition for detecting univariate systems is currently at line 241-246. To raise a NotImplementedError when the number of univariate polynomials is one but the number of variables is greater than one, the current condition should be modified.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```python\n<replace>\n        univariate = list(filter(_is_univariate, basis))\n\n        if len(univariate) == 1 and len(gens) > 1:\n            raise NotImplementedError(filldedent('''\n                only zero-dimensional systems supported\n                (finite number of solutions)\n                '''))\n        elif len(univariate) == 1:\n            f = univariate.pop()\n        else:\n            raise NotImplementedError(filldedent('''\n                only zero-dimensional systems supported\n                (finite number of solutions)\n                '''))\n</replace>"
          },
          "output": {
            "diff": "--- sympy/solvers/polysys.py\n+++ sympy/solvers/polysys.py\n@@ -240,7 +240,12 @@\n \n         univariate = list(filter(_is_univariate, basis))\n \n-        if len(univariate) == 1:\n+        if len(univariate) == 1 and len(gens) > 1:\n+            raise NotImplementedError(filldedent('''\n+                only zero-dimensional systems supported\n+                (finite number of solutions)\n+                '''))\n+        elif len(univariate) == 1:\n             f = univariate.pop()\n         else:\n             raise NotImplementedError(filldedent('''\n",
            "message": "Applied the change to sympy/solvers/polysys.py.\n\n<scratch_pad>\n```python\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 3865,
          "output_tokens": 134,
          "retry_message": null,
          "completion_cost": 0.013605
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sympy/solvers/polysys.py\n+++ sympy/solvers/polysys.py\n@@ -240,7 +240,12 @@\n \n         univariate = list(filter(_is_univariate, basis))\n \n-        if len(univariate) == 1:\n+        if len(univariate) == 1 and len(gens) > 1:\n+            raise NotImplementedError(filldedent('''\n+                only zero-dimensional systems supported\n+                (finite number of solutions)\n+                '''))\n+        elif len(univariate) == 1:\n             f = univariate.pop()\n         else:\n             raise NotImplementedError(filldedent('''\n",
        "model": "deepseek-coder",
        "message": "Applied the change to sympy/solvers/polysys.py.\n\n<scratch_pad>\n```python\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The change has been successfully applied, and the issue reported has been addressed. The system now correctly identifies and handles cases where the system is univariate but involves more than one variable, raising a NotImplementedError as intended.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The change has been applied and the condition now correctly raises a NotImplementedError for systems that are univariate but involve more than one variable. This ensures that only zero-dimensional systems (finite number of solutions) are supported as required.",
            "instructions": null
          },
          "output": {
            "message": "The change has been successfully applied, and the issue reported has been addressed. The system now correctly identifies and handles cases where the system is univariate but involves more than one variable, raising a NotImplementedError as intended."
          },
          "input_tokens": 3214,
          "output_tokens": 151,
          "retry_message": null,
          "completion_cost": 0.011907
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The change has been successfully applied, and the issue reported has been addressed. The system now correctly identifies and handles cases where the system is univariate but involves more than one variable, raising a NotImplementedError as intended.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "detection of infinite solution request\n```python\r\n>>> solve_poly_system((x - 1,), x, y)\r\nTraceback (most recent call last):\r\n...\r\nNotImplementedError:\r\nonly zero-dimensional systems supported (finite number of solutions)\r\n>>> solve_poly_system((y - 1,), x, y)  <--- this is not handled correctly\r\n[(1,)]\r\n```\r\n```diff\r\ndiff --git a/sympy/solvers/polysys.py b/sympy/solvers/polysys.py\r\nindex b9809fd4e9..674322d4eb 100644\r\n--- a/sympy/solvers/polysys.py\r\n+++ b/sympy/solvers/polysys.py\r\n@@ -240,7 +240,7 @@ def _solve_reduced_system(system, gens, entry=False):\r\n \r\n         univariate = list(filter(_is_univariate, basis))\r\n \r\n-        if len(univariate) == 1:\r\n+        if len(univariate) == 1 and len(gens) == 1:\r\n             f = univariate.pop()\r\n         else:\r\n             raise NotImplementedError(filldedent('''\r\ndiff --git a/sympy/solvers/tests/test_polysys.py b/sympy/solvers/tests/test_polysys.py\r\nindex 58419f8762..9e674a6fe6 100644\r\n--- a/sympy/solvers/tests/test_polysys.py\r\n+++ b/sympy/solvers/tests/test_polysys.py\r\n@@ -48,6 +48,10 @@ def test_solve_poly_system():\r\n     raises(NotImplementedError, lambda: solve_poly_system(\r\n         [z, -2*x*y**2 + x + y**2*z, y**2*(-z - 4) + 2]))\r\n     raises(PolynomialError, lambda: solve_poly_system([1/x], x))\r\n+    raises(NotImplementedError, lambda: solve_poly_system(\r\n+        Poly(x - 1, x, y), (x, y)))\r\n+    raises(NotImplementedError, lambda: solve_poly_system(\r\n+        Poly(y - 1, x, y), (x, y)))\r\n \r\n \r\n def test_solve_biquadratic():\r\n```\n"
}