{
  "info": {
    "duration": 259.0257291793823,
    "submission": "diff --git a/sympy/solvers/polysys.py b/sympy/solvers/polysys.py\nindex b9809fd4e9..b1c63b0e58 100644\n--- a/sympy/solvers/polysys.py\n+++ b/sympy/solvers/polysys.py\n@@ -240,8 +240,13 @@ def _solve_reduced_system(system, gens, entry=False):\n \n         univariate = list(filter(_is_univariate, basis))\n \n-        if len(univariate) == 1:\n+        if len(univariate) == 1 and len(gens) == 1:\n             f = univariate.pop()\n+        elif len(univariate) == 1 and len(gens) > 1:\n+            raise NotImplementedError(filldedent('''\n+                only zero-dimensional systems supported\n+                (finite number of solutions)\n+                '''))\n         else:\n             raise NotImplementedError(filldedent('''\n                 only zero-dimensional systems supported\n",
    "total_cost": 0.29701800000000006,
    "instance_id": "sympy__sympy-22005",
    "evaluation_name": "temperature_sweep_250_samples_50_problems_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves detecting infinite solutions in polynomial systems, specifically when calling `solve_poly_system`. The error indicates that only zero-dimensional systems (finite number of solutions) are currently supported. The task is to identify the relevant code in `solve_poly_system` and related functions to ensure proper handling of cases where infinite solutions might be detected.",
            "search_requests": [
              {
                "query": "solve_poly_system",
                "class_names": [],
                "code_snippet": "NotImplementedError: only zero-dimensional systems supported (finite number of solutions)",
                "file_pattern": "**/polysys.py",
                "function_names": [
                  "solve_poly_system"
                ]
              }
            ]
          },
          "output": null,
          "input_tokens": 3552,
          "output_tokens": 175,
          "retry_message": "\n\nUnfortunately, I didn\u2019t find any relevant results.",
          "completion_cost": 0.013281000000000001
        },
        {
          "action": {
            "complete": false,
            "scratch_pad": "Given that no relevant results were found in the initial search for `solve_poly_system`, it is likely that the search parameters were too specific or the issue might be located in a different module altogether. Expanding the search to include broader queries and related modules might help locate the relevant code.",
            "search_requests": [
              {
                "query": "infinite solutions polynomial systems",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/solvers/**/*.py",
                "function_names": []
              },
              {
                "query": "solve polynomial system",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/polys/**/*.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 1808,
                "span_id": "_solve_system",
                "file_path": "sympy/solvers/solvers.py"
              },
              {
                "rank": 6,
                "tokens": 3430,
                "span_id": "unrad",
                "file_path": "sympy/solvers/solvers.py"
              },
              {
                "rank": 6,
                "tokens": 25,
                "span_id": "impl:3",
                "file_path": "sympy/solvers/solvers.py"
              },
              {
                "rank": 11,
                "tokens": 3712,
                "span_id": "_solve",
                "file_path": "sympy/solvers/solvers.py"
              },
              {
                "rank": 13,
                "tokens": 7733,
                "span_id": "solve",
                "file_path": "sympy/solvers/solvers.py"
              },
              {
                "rank": 1,
                "tokens": 2347,
                "span_id": "nonlinsolve",
                "file_path": "sympy/solvers/solveset.py"
              },
              {
                "rank": 3,
                "tokens": 118,
                "span_id": "_handle_positive_dimensional",
                "file_path": "sympy/solvers/solveset.py"
              },
              {
                "rank": 3,
                "tokens": 135,
                "span_id": "_handle_zero_dimensional",
                "file_path": "sympy/solvers/solveset.py"
              },
              {
                "rank": 5,
                "tokens": 187,
                "span_id": "_separate_poly_nonpoly",
                "file_path": "sympy/solvers/solveset.py"
              },
              {
                "rank": 9,
                "tokens": 65,
                "span_id": "_solveset_work",
                "file_path": "sympy/solvers/solveset.py"
              },
              {
                "rank": 9,
                "tokens": 4828,
                "span_id": "substitution",
                "file_path": "sympy/solvers/solveset.py"
              },
              {
                "rank": 12,
                "tokens": 1327,
                "span_id": "_solveset",
                "file_path": "sympy/solvers/solveset.py"
              },
              {
                "rank": 8,
                "tokens": 1199,
                "span_id": "solve_generic",
                "file_path": "sympy/solvers/polysys.py"
              },
              {
                "rank": 0,
                "tokens": 1749,
                "span_id": "eqs_189x49",
                "file_path": "sympy/polys/benchmarks/bench_solvers.py"
              },
              {
                "rank": 0,
                "tokens": 310,
                "span_id": "sol_189x49",
                "file_path": "sympy/polys/benchmarks/bench_solvers.py"
              },
              {
                "rank": 1,
                "tokens": 49,
                "span_id": "time_solve_lin_sys_10x8",
                "file_path": "sympy/polys/benchmarks/bench_solvers.py"
              },
              {
                "rank": 1,
                "tokens": 41,
                "span_id": "time_to_expr_eqs_10x8",
                "file_path": "sympy/polys/benchmarks/bench_solvers.py"
              },
              {
                "rank": 1,
                "tokens": 66,
                "span_id": "time_verify_sol_10x8",
                "file_path": "sympy/polys/benchmarks/bench_solvers.py"
              },
              {
                "rank": 1,
                "tokens": 2121,
                "span_id": "eqs_10x8",
                "file_path": "sympy/polys/benchmarks/bench_solvers.py"
              },
              {
                "rank": 1,
                "tokens": 83,
                "span_id": "sol_10x8",
                "file_path": "sympy/polys/benchmarks/bench_solvers.py"
              },
              {
                "rank": 1,
                "tokens": 33,
                "span_id": "time_eqs_10x8",
                "file_path": "sympy/polys/benchmarks/bench_solvers.py"
              },
              {
                "rank": 4,
                "tokens": 33,
                "span_id": "time_eqs_189x49",
                "file_path": "sympy/polys/benchmarks/bench_solvers.py"
              },
              {
                "rank": 4,
                "tokens": 49,
                "span_id": "time_solve_lin_sys_189x49",
                "file_path": "sympy/polys/benchmarks/bench_solvers.py"
              },
              {
                "rank": 2,
                "tokens": 18,
                "span_id": "PolyNonlinearError",
                "file_path": "sympy/polys/solvers.py"
              },
              {
                "rank": 2,
                "tokens": 112,
                "span_id": "docstring",
                "file_path": "sympy/polys/solvers.py"
              },
              {
                "rank": 3,
                "tokens": 27093,
                "span_id": "PolyQuintic.b",
                "file_path": "sympy/polys/polyquinticconst.py"
              }
            ],
            "search_requests": [
              {
                "query": "infinite solutions polynomial systems",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/solvers/**/*.py",
                "function_names": []
              },
              {
                "query": "solve polynomial system",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/polys/**/*.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 3759,
          "output_tokens": 205,
          "retry_message": null,
          "completion_cost": 0.014352
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 1808,
            "span_id": "_solve_system",
            "file_path": "sympy/solvers/solvers.py"
          },
          {
            "rank": 0,
            "tokens": 1749,
            "span_id": "eqs_189x49",
            "file_path": "sympy/polys/benchmarks/bench_solvers.py"
          },
          {
            "rank": 0,
            "tokens": 310,
            "span_id": "sol_189x49",
            "file_path": "sympy/polys/benchmarks/bench_solvers.py"
          },
          {
            "rank": 1,
            "tokens": 2347,
            "span_id": "nonlinsolve",
            "file_path": "sympy/solvers/solveset.py"
          },
          {
            "rank": 1,
            "tokens": 49,
            "span_id": "time_solve_lin_sys_10x8",
            "file_path": "sympy/polys/benchmarks/bench_solvers.py"
          },
          {
            "rank": 1,
            "tokens": 41,
            "span_id": "time_to_expr_eqs_10x8",
            "file_path": "sympy/polys/benchmarks/bench_solvers.py"
          },
          {
            "rank": 1,
            "tokens": 66,
            "span_id": "time_verify_sol_10x8",
            "file_path": "sympy/polys/benchmarks/bench_solvers.py"
          },
          {
            "rank": 1,
            "tokens": 2121,
            "span_id": "eqs_10x8",
            "file_path": "sympy/polys/benchmarks/bench_solvers.py"
          },
          {
            "rank": 1,
            "tokens": 83,
            "span_id": "sol_10x8",
            "file_path": "sympy/polys/benchmarks/bench_solvers.py"
          },
          {
            "rank": 1,
            "tokens": 33,
            "span_id": "time_eqs_10x8",
            "file_path": "sympy/polys/benchmarks/bench_solvers.py"
          },
          {
            "rank": 2,
            "tokens": 18,
            "span_id": "PolyNonlinearError",
            "file_path": "sympy/polys/solvers.py"
          },
          {
            "rank": 2,
            "tokens": 112,
            "span_id": "docstring",
            "file_path": "sympy/polys/solvers.py"
          },
          {
            "rank": 3,
            "tokens": 118,
            "span_id": "_handle_positive_dimensional",
            "file_path": "sympy/solvers/solveset.py"
          },
          {
            "rank": 3,
            "tokens": 135,
            "span_id": "_handle_zero_dimensional",
            "file_path": "sympy/solvers/solveset.py"
          },
          {
            "rank": 3,
            "tokens": 27093,
            "span_id": "PolyQuintic.b",
            "file_path": "sympy/polys/polyquinticconst.py"
          },
          {
            "rank": 4,
            "tokens": 33,
            "span_id": "time_eqs_189x49",
            "file_path": "sympy/polys/benchmarks/bench_solvers.py"
          },
          {
            "rank": 4,
            "tokens": 49,
            "span_id": "time_solve_lin_sys_189x49",
            "file_path": "sympy/polys/benchmarks/bench_solvers.py"
          },
          {
            "rank": 5,
            "tokens": 187,
            "span_id": "_separate_poly_nonpoly",
            "file_path": "sympy/solvers/solveset.py"
          },
          {
            "rank": 6,
            "tokens": 3430,
            "span_id": "unrad",
            "file_path": "sympy/solvers/solvers.py"
          },
          {
            "rank": 6,
            "tokens": 25,
            "span_id": "impl:3",
            "file_path": "sympy/solvers/solvers.py"
          },
          {
            "rank": 8,
            "tokens": 1199,
            "span_id": "solve_generic",
            "file_path": "sympy/solvers/polysys.py"
          },
          {
            "rank": 9,
            "tokens": 65,
            "span_id": "_solveset_work",
            "file_path": "sympy/solvers/solveset.py"
          },
          {
            "rank": 9,
            "tokens": 4828,
            "span_id": "substitution",
            "file_path": "sympy/solvers/solveset.py"
          },
          {
            "rank": 11,
            "tokens": 3712,
            "span_id": "_solve",
            "file_path": "sympy/solvers/solvers.py"
          },
          {
            "rank": 12,
            "tokens": 1327,
            "span_id": "_solveset",
            "file_path": "sympy/solvers/solveset.py"
          },
          {
            "rank": 13,
            "tokens": 7733,
            "span_id": "solve",
            "file_path": "sympy/solvers/solvers.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue indicates a problem with the `solve_poly_system` function when handling certain types of polynomial systems, particularly those that should raise a `NotImplementedError` due to being infinite-dimensional, but instead returning a solution. The issue suggests that the condition for checking univariate polynomials in the `_solve_reduced_system` function is modified to also check the length of `gens`.\n\nFrom the search results, several relevant files and spans are identified:\n\n1. `sympy/solvers/solvers.py` - Contains imports and the `solve` function which might be related to the poly system solver.\n2. `sympy/solvers/solveset.py` - Contains functions `_solveset`, `substitution`, and `nonlinsolve` which could be related to the logic for solving systems of equations, including polynomial systems.\n3. `sympy/solvers/polysys.py` - Contains `solve_generic` function which likely includes the logic for handling polynomial systems, and is directly related to the functionality in question.\n4. `sympy/polys/benchmarks/bench_solvers.py` - Contains benchmarks for polynomial solvers, which are not directly related to the issue but indicate areas where the system might be tested.\n\nOf these, the most relevant span is in `sympy/solvers/polysys.py` where the `_solve_reduced_system` function is located, as this is where the logic for solving reduced polynomial systems exists. This span contains the conditions under which the system should raise a `NotImplementedError`, which is exactly what the issue is about. Other spans in `solveset.py` might contribute to the broader context of solving systems of equations but are not directly related to the specific error condition in question.",
            "identified_spans": [
              {
                "span_ids": [
                  "solve_generic"
                ],
                "file_path": "sympy/solvers/polysys.py"
              },
              {
                "span_ids": [
                  "imports:27",
                  "solve"
                ],
                "file_path": "sympy/solvers/solvers.py"
              },
              {
                "span_ids": [
                  "imports:26",
                  "_solveset",
                  "substitution",
                  "nonlinsolve"
                ],
                "file_path": "sympy/solvers/solveset.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 5128,
          "output_tokens": 575,
          "retry_message": null,
          "completion_cost": 0.024009000000000003
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The analysis of the reported issue and the file context shows that the relevant code for handling infinite solutions in the `solve_poly_system` function is indeed present in the `sympy/solvers/polysys.py` file. The specific code snippet that addresses the issue is the modification of the condition for handling univariate polynomials to also check if the number of variables equals one before raising a `NotImplementedError`. Additionally, the test cases provided in the issue demonstrate the expected behavior, which matches the implementation. Therefore, the file context provided is comprehensive for addressing the reported issue.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 12312,
          "output_tokens": 158,
          "retry_message": null,
          "completion_cost": 0.039306
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "solve_generic",
            "file_path": "sympy/solvers/polysys.py",
            "scratch_pad": "The reported issue is about handling an infinite solution detection incorrectly in the `solve_poly_system` function. The provided context includes the relevant file `sympy/solvers/polysys.py`. The issue specifies that when the system has one univariate polynomial and multiple generators, the current code incorrectly assumes it to be zero-dimensional. We need to modify the condition to correctly handle this case.",
            "instructions": "Update the condition in the `_solve_reduced_system` function to correctly handle the case when there is one univariate polynomial but the number of generators is greater than one, by raising a `NotImplementedError` for such systems."
          },
          "output": {
            "span_id": "solve_generic",
            "file_path": "sympy/solvers/polysys.py",
            "instructions": "Update the condition in the `_solve_reduced_system` function to correctly handle the case when there is one univariate polynomial but the number of generators is greater than one, by raising a `NotImplementedError` for such systems."
          },
          "input_tokens": 12585,
          "output_tokens": 192,
          "retry_message": null,
          "completion_cost": 0.040635000000000004
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "solve_generic",
        "end_line": null,
        "file_path": "sympy/solvers/polysys.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Update the condition in the `_solve_reduced_system` function to correctly handle the case when there is one univariate polynomial but the number of generators is greater than one, by raising a `NotImplementedError` for such systems.\n\nThe function to update is `_solve_reduced_system`. The condition to check is the length of the univariate polynomials and the number of generators. The relevant lines are where this length is checked and the decision to raise an error is made.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": false,
            "end_line": 249,
            "start_line": 241,
            "scratch_pad": "The function to update is `_solve_reduced_system`. The condition to check is the length of the univariate polynomials and the number of generators. The relevant lines are where this length is checked and the decision to raise an error is made."
          },
          "output": {
            "span_id": "solve_generic",
            "end_line": 249,
            "file_path": "sympy/solvers/polysys.py",
            "start_line": 241,
            "instructions": "Update the condition in the `_solve_reduced_system` function to correctly handle the case when there is one univariate polynomial but the number of generators is greater than one, by raising a `NotImplementedError` for such systems.\n\nThe function to update is `_solve_reduced_system`. The condition to check is the length of the univariate polynomials and the number of generators. The relevant lines are where this length is checked and the decision to raise an error is made."
          },
          "input_tokens": 2480,
          "output_tokens": 96,
          "retry_message": null,
          "completion_cost": 0.00888
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "solve_generic",
        "end_line": 249,
        "file_path": "sympy/solvers/polysys.py",
        "max_tokens": 1000,
        "start_line": 241,
        "temperature": 1.6,
        "instructions": "Update the condition in the `_solve_reduced_system` function to correctly handle the case when there is one univariate polynomial but the number of generators is greater than one, by raising a `NotImplementedError` for such systems.\n\nThe function to update is `_solve_reduced_system`. The condition to check is the length of the univariate polynomials and the number of generators. The relevant lines are where this length is checked and the decision to raise an error is made.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n        univariate = list(filter(_is_univariate, basis))\n\n        if len(univariate) == 1 and len(gens) == 1:\n            f = univariate.pop()\n        elif len(univariate) == 1 and len(gens) > 1:\n            raise NotImplementedError(filldedent('''\n                only zero-dimensional systems supported\n                (finite number of solutions)\n                '''))\n        else:\n            raise NotImplementedError(filldedent('''\n                only zero-dimensional systems supported\n                (finite number of solutions)\n                '''))\n</replace>"
          },
          "output": {
            "diff": "--- sympy/solvers/polysys.py\n+++ sympy/solvers/polysys.py\n@@ -240,8 +240,13 @@\n \n         univariate = list(filter(_is_univariate, basis))\n \n-        if len(univariate) == 1:\n+        if len(univariate) == 1 and len(gens) == 1:\n             f = univariate.pop()\n+        elif len(univariate) == 1 and len(gens) > 1:\n+            raise NotImplementedError(filldedent('''\n+                only zero-dimensional systems supported\n+                (finite number of solutions)\n+                '''))\n         else:\n             raise NotImplementedError(filldedent('''\n                 only zero-dimensional systems supported\n",
            "message": "Applied the change to sympy/solvers/polysys.py.",
            "verification_errors": []
          },
          "input_tokens": 23318,
          "output_tokens": 139,
          "retry_message": null,
          "completion_cost": 0.072039
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sympy/solvers/polysys.py\n+++ sympy/solvers/polysys.py\n@@ -240,8 +240,13 @@\n \n         univariate = list(filter(_is_univariate, basis))\n \n-        if len(univariate) == 1:\n+        if len(univariate) == 1 and len(gens) == 1:\n             f = univariate.pop()\n+        elif len(univariate) == 1 and len(gens) > 1:\n+            raise NotImplementedError(filldedent('''\n+                only zero-dimensional systems supported\n+                (finite number of solutions)\n+                '''))\n         else:\n             raise NotImplementedError(filldedent('''\n                 only zero-dimensional systems supported\n",
        "model": "deepseek-coder",
        "message": "Applied the change to sympy/solvers/polysys.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "review",
            "finish": "The reported issue has been fixed by updating the condition in the `_solve_reduced_system` function to correctly identify and handle the case when there is one univariate polynomial and multiple generators, thereby ensuring that a `NotImplementedError` is raised for such systems. This addresses the problem as specified in the issue.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The provided file context includes the file `sympy/solvers/polysys.py` where the function `_solve_reduced_system` is located. The issue reports that the function is not handling infinite solutions correctly when there is one univariate polynomial but multiple generators. The current fix involves updating the condition to raise a `NotImplementedError` when this scenario is detected.",
            "instructions": null
          },
          "output": null,
          "input_tokens": 13066,
          "output_tokens": 204,
          "retry_message": "Review isn't possible. If the change is done you can finish or reject the task.",
          "completion_cost": 0.042258000000000004
        },
        {
          "action": {
            "action": "finish",
            "finish": "The task has been completed successfully by correctly updating the condition in the `_solve_reduced_system` function to handle infinite solution detection accurately.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The required modification has been applied as per the instructions. The condition in the `_solve_reduced_system` function has been updated to correctly handle the case when there is one univariate polynomial but multiple generators, by raising a `NotImplementedError` for such systems. This solution directly addresses the problem as stated in the issue.",
            "instructions": null
          },
          "output": {
            "message": "The task has been completed successfully by correctly updating the condition in the `_solve_reduced_system` function to handle infinite solution detection accurately."
          },
          "input_tokens": 13296,
          "output_tokens": 158,
          "retry_message": null,
          "completion_cost": 0.042258
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The task has been completed successfully by correctly updating the condition in the `_solve_reduced_system` function to handle infinite solution detection accurately.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "detection of infinite solution request\n```python\r\n>>> solve_poly_system((x - 1,), x, y)\r\nTraceback (most recent call last):\r\n...\r\nNotImplementedError:\r\nonly zero-dimensional systems supported (finite number of solutions)\r\n>>> solve_poly_system((y - 1,), x, y)  <--- this is not handled correctly\r\n[(1,)]\r\n```\r\n```diff\r\ndiff --git a/sympy/solvers/polysys.py b/sympy/solvers/polysys.py\r\nindex b9809fd4e9..674322d4eb 100644\r\n--- a/sympy/solvers/polysys.py\r\n+++ b/sympy/solvers/polysys.py\r\n@@ -240,7 +240,7 @@ def _solve_reduced_system(system, gens, entry=False):\r\n \r\n         univariate = list(filter(_is_univariate, basis))\r\n \r\n-        if len(univariate) == 1:\r\n+        if len(univariate) == 1 and len(gens) == 1:\r\n             f = univariate.pop()\r\n         else:\r\n             raise NotImplementedError(filldedent('''\r\ndiff --git a/sympy/solvers/tests/test_polysys.py b/sympy/solvers/tests/test_polysys.py\r\nindex 58419f8762..9e674a6fe6 100644\r\n--- a/sympy/solvers/tests/test_polysys.py\r\n+++ b/sympy/solvers/tests/test_polysys.py\r\n@@ -48,6 +48,10 @@ def test_solve_poly_system():\r\n     raises(NotImplementedError, lambda: solve_poly_system(\r\n         [z, -2*x*y**2 + x + y**2*z, y**2*(-z - 4) + 2]))\r\n     raises(PolynomialError, lambda: solve_poly_system([1/x], x))\r\n+    raises(NotImplementedError, lambda: solve_poly_system(\r\n+        Poly(x - 1, x, y), (x, y)))\r\n+    raises(NotImplementedError, lambda: solve_poly_system(\r\n+        Poly(y - 1, x, y), (x, y)))\r\n \r\n \r\n def test_solve_biquadratic():\r\n```\n"
}