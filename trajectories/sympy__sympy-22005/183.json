{
  "info": {
    "duration": 271.8929777145386,
    "submission": "",
    "total_cost": 0.153228,
    "instance_id": "sympy__sympy-22005",
    "evaluation_name": "temperature_sweep_250_samples_50_problems_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves handling infinite solution detection in the solve_poly_system function. The traceback indicates that the system only supports zero-dimensional systems (finite number of solutions), but the current implementation does not correctly handle certain cases leading to infinite solutions. The relevant classes and functions to investigate are solve_poly_system, solve_generic, and possibly underlying helper functions in the polysys module and related solver modules. Additionally, changes in the test files might indicate where the infinite solution handling needs to be adjusted.",
            "search_requests": [
              {
                "query": "solve_poly_system infinite solutions",
                "class_names": [
                  "solve_poly_system"
                ],
                "code_snippet": null,
                "file_pattern": "sympy/solvers/polysys.py",
                "function_names": []
              },
              {
                "query": "NotImplementedError infinite solutions",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sympy/solvers/tests/test_polysys.py",
                "function_names": [
                  "solve_poly_system"
                ]
              }
            ]
          },
          "output": null,
          "input_tokens": 3552,
          "output_tokens": 246,
          "retry_message": "It's not possible to search for test files.",
          "completion_cost": 0.014346000000000001
        },
        {
          "action": {
            "complete": false,
            "scratch_pad": "Given the prohibition on searching for test files, the focus should be solely on the relevant source files where the logic for handling infinite solutions in the solve_poly_system function is implemented. These files include 'sympy/solvers/polysys.py' and any other files directly involved in the solving mechanism for polynomial systems. The query should be updated to reflect this constraint.",
            "search_requests": [
              {
                "query": "solve_poly_system infinite solutions",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sympy/solvers/polysys.py",
                "function_names": [
                  "solve_poly_system"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 2,
                "tokens": 298,
                "span_id": "solve_poly_system",
                "file_path": "sympy/solvers/polysys.py"
              }
            ],
            "search_requests": [
              {
                "query": "solve_poly_system infinite solutions",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sympy/solvers/polysys.py",
                "function_names": [
                  "solve_poly_system"
                ]
              }
            ]
          },
          "input_tokens": 3862,
          "output_tokens": 187,
          "retry_message": null,
          "completion_cost": 0.014391000000000001
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 2,
            "tokens": 298,
            "span_id": "solve_poly_system",
            "file_path": "sympy/solvers/polysys.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about handling infinite solution requests in the solve_poly_system function. The example provided shows that when solving a polynomial system with a single variable and a non-zero constant, it should raise a NotImplementedError indicating only finite solutions are supported. \n\nAnalyzing the search results, we can see that the solve_poly_system function is correctly identified. Additionally, the _solve_reduced_system function, which is called within solve_poly_system, contains the logic for solving systems where it raises a NotImplementedError for non-zero-dimensional systems. \n\nThe relevant code spans include the solve_poly_system function, the _solve_reduced_system function where the NotImplementedError is raised, and the _is_univariate function that checks if a polynomial is univariate. These are critical for understanding the logic that needs to be addressed to handle infinite solution requests correctly.",
            "identified_spans": [
              {
                "span_ids": [
                  "solve_poly_system",
                  "_solve_reduced_system",
                  "_is_univariate"
                ],
                "file_path": "sympy/solvers/polysys.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 2630,
          "output_tokens": 267,
          "retry_message": null,
          "completion_cost": 0.011895
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The reported issue concerns the detection of infinite solutions in the solve_poly_system function. The file context provided includes the solve_poly_system function along with related functions like solve_biquadratic and solve_generic. Specifically, the solve_generic function contains the _solve_reduced_system method which raises a NotImplementedError for systems that are not zero-dimensional (finite number of solutions). The code snippet in the issue description suggests modifying the _solve_reduced_system method to handle cases where the system might have infinite solutions by refining the condition that checks for univariate polynomials. This exact method and the necessary check are found in the provided file context, indicating that the relevant code for addressing the issue is present.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 2521,
          "output_tokens": 185,
          "retry_message": null,
          "completion_cost": 0.010338
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "solve_poly_system",
            "file_path": "sympy/solvers/polysys.py",
            "scratch_pad": "The issue involves a case where the system of polynomials is reduced to a univariate polynomial but the number of generators is greater than 1, indicating an infinite solution space. The current implementation does not throw an error in such cases, but it should.",
            "instructions": "Introduce a check to raise a NotImplementedError when the system is reduced to a univariate polynomial but the number of generators is greater than 1."
          },
          "output": {
            "span_id": "solve_poly_system",
            "end_line": 63,
            "file_path": "sympy/solvers/polysys.py",
            "start_line": 17,
            "instructions": "Introduce a check to raise a NotImplementedError when the system is reduced to a univariate polynomial but the number of generators is greater than 1."
          },
          "input_tokens": 2735,
          "output_tokens": 143,
          "retry_message": null,
          "completion_cost": 0.010350000000000002
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "solve_poly_system",
        "end_line": 63,
        "file_path": "sympy/solvers/polysys.py",
        "max_tokens": 1000,
        "start_line": 17,
        "temperature": 1.6,
        "instructions": "Introduce a check to raise a NotImplementedError when the system is reduced to a univariate polynomial but the number of generators is greater than 1.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\ndef solve_poly_system(seq, *gens, **args):\n    \"\"\"\n    Solve a system of polynomial equations.\n\n    Parameters\n    ==========\n\n    seq: a list/tuple/set\n        Listing all the equations that are needed to be solved\n    gens: generators\n        generators of the equations in seq for which we want the\n        solutions\n    args: Keyword arguments\n        Special options for solving the equations\n\n    Returns\n    =======\n\n    List[Tuple]\n        A List of tuples. Solutions for symbols that satisfy the\n        equations listed in seq\n\n    Examples\n    ========\n\n    >>> from sympy import solve_poly_system\n    >>> from sympy.abc import x, y\n\n    >>> solve_poly_system([x*y - 2*y, 2*y**2 - x**2], x, y)\n    [(0, 0), (2, -sqrt(2)), (2, sqrt(2))]\n\n    \"\"\"\n    try:\n        polys, opt = parallel_poly_from_expr(seq, *gens, **args)\n    except PolificationFailed as exc:\n        raise ComputationFailed('solve_poly_system', len(seq), exc)\n\n    if len(polys) == len(opt.gens) == 2:\n        f, g = polys\n\n        if all(i <= 2 for i in f.degree_list() + g.degree_list()):\n            try:\n                return solve_biquadratic(f, g, opt)\n            except SolveFailed:\n                pass\n\n    return solve_generic(polys, opt)\n\n\ndef solve_generic(polys, opt):\n    \"\"\"\n    Solve a generic system of polynomial equations.\n\n    Returns all possible solutions over C[x_1, x_2, ..., x_m] of a\n    set F = { f_1, f_2, ..., f_n } of polynomial equations,  using\n    Groebner basis approach. For now only zero-dimensional systems\n    are supported, which means F can have at most a finite number\n    of solutions.\n\n    The algorithm works by the fact that, supposing G is the basis\n    of F with respect to an elimination order  (here lexicographic\n    order is used), G and F generate the same ideal, they have the\n    same set of solutions. By the elimination property,  if G is a\n    reduced, zero-dimensional Groebner basis, then there exists an\n    univariate polynomial in G (in its last variable). This can be\n    solved by computing its roots. Substituting all computed roots\n    for the last (eliminated) variable in other elements of G, new\n    polynomial system is generated. Applying the above procedure\n    recursively, a finite number of solutions can be found.\n\n    The ability of finding all solutions by this procedure depends\n    on the root finding algorithms. If no solutions were found, it\n    means only that roots() failed, but the system is solvable. To\n    overcome this difficulty use numerical algorithms instead.\n\n    Parameters\n    ==========\n\n    polys: a list/tuple/set\n        Listing all the polynomial equations that are needed to be solved\n    opt: an Options object\n        For specifying keyword arguments and generators\n\n    Returns\n    =======\n\n    List[Tuple]\n        A List of tuples. Solutions for symbols that satisfy the\n        equations listed in seq\n\n    References\n    ==========\n\n    .. [Buchberger01] B. Buchberger, Groebner Bases: A Short\n    Introduction for Systems Theorists, In: R. Moreno-Diaz,\n    B. Buchberger, J.L. Freire, Proceedings of EUROCAST'01,\n    February, 2001\n\n    .. [Cox97] D. Cox, J. Little, D. O'Shea, Ideals, Varieties\n    and Algorithms, Springer, Second Edition, 1997, pp. 112\n\n    Examples\n    ========\n\n    >>> from sympy.polys import Poly, Options\n    >>> from sympy.solvers.polysys import solve_generic\n    >>> from sympy.abc import x, y\n    >>> NewOption = Options((x, y), {'domain': 'ZZ'})\n\n    >>> a = Poly(x - y + 5, x, y, domain='ZZ')"
          },
          "output": null,
          "input_tokens": 4098,
          "output_tokens": 997,
          "retry_message": "The following diff was not applied:\n --- sympy/solvers/polysys.py\n+++ sympy/solvers/polysys.py\n@@ -61,75 +61,6 @@\n                 pass\n \n     return solve_generic(polys, opt)\n-\n-\n-def solve_biquadratic(f, g, opt):\n-    \"\"\"Solve a system of two bivariate quadratic polynomial equations.\n-\n-    Parameters\n-    ==========\n-\n-    f: a single Expr or Poly\n-        First equation\n-    g: a single Expr or Poly\n-        Second Equation\n-    opt: an Options object\n-        For specifying keyword arguments and generators\n-\n-    Returns\n-    =======\n-\n-    List[Tuple]\n-        A List of tuples. Solutions for symbols that satisfy the\n-        equations listed in seq.\n-\n-    Examples\n-    ========\n-\n-    >>> from sympy.polys import Options, Poly\n-    >>> from sympy.abc import x, y\n-    >>> from sympy.solvers.polysys import solve_biquadratic\n-    >>> NewOption = Options((x, y), {'domain': 'ZZ'})\n-\n-    >>> a = Poly(y**2 - 4 + x, y, x, domain='ZZ')\n-    >>> b = Poly(y*2 + 3*x - 7, y, x, domain='ZZ')\n-    >>> solve_biquadratic(a, b, NewOption)\n-    [(1/3, 3), (41/27, 11/9)]\n-\n-    >>> a = Poly(y + x**2 - 3, y, x, domain='ZZ')\n-    >>> b = Poly(-y + x - 4, y, x, domain='ZZ')\n-    >>> solve_biquadratic(a, b, NewOption)\n-    [(7/2 - sqrt(29)/2, -sqrt(29)/2 - 1/2), (sqrt(29)/2 + 7/2, -1/2 + \\\n-      sqrt(29)/2)]\n-    \"\"\"\n-    G = groebner([f, g])\n-\n-    if len(G) == 1 and G[0].is_ground:\n-        return None\n-\n-    if len(G) != 2:\n-        raise SolveFailed\n-\n-    x, y = opt.gens\n-    p, q = G\n-    if not p.gcd(q).is_ground:\n-        # not 0-dimensional\n-        raise SolveFailed\n-\n-    p = Poly(p, x, expand=False)\n-    p_roots = [rcollect(expr, y) for expr in roots(p).keys()]\n-\n-    q = q.ltrim(-1)\n-    q_roots = list(roots(q).keys())\n-\n-    solutions = []\n-\n-    for q_root in q_roots:\n-        for p_root in p_roots:\n-            solution = (p_root.subs(y, q_root), q_root)\n-            solutions.append(solution)\n-\n-    return sorted(solutions, key=default_sort_key)\n \n \n def solve_generic(polys, opt):\n@@ -193,6 +124,138 @@\n     >>> NewOption = Options((x, y), {'domain': 'ZZ'})\n \n     >>> a = Poly(x - y + 5, x, y, domain='ZZ')\n+\n+\n+def solve_biquadratic(f, g, opt):\n+    \"\"\"Solve a system of two bivariate quadratic polynomial equations.\n+\n+    Parameters\n+    ==========\n+\n+    f: a single Expr or Poly\n+        First equation\n+    g: a single Expr or Poly\n+        Second Equation\n+    opt: an Options object\n+        For specifying keyword arguments and generators\n+\n+    Returns\n+    =======\n+\n+    List[Tuple]\n+        A List of tuples. Solutions for symbols that satisfy the\n+        equations listed in seq.\n+\n+    Examples\n+    ========\n+\n+    >>> from sympy.polys import Options, Poly\n+    >>> from sympy.abc import x, y\n+    >>> from sympy.solvers.polysys import solve_biquadratic\n+    >>> NewOption = Options((x, y), {'domain': 'ZZ'})\n+\n+    >>> a = Poly(y**2 - 4 + x, y, x, domain='ZZ')\n+    >>> b = Poly(y*2 + 3*x - 7, y, x, domain='ZZ')\n+    >>> solve_biquadratic(a, b, NewOption)\n+    [(1/3, 3), (41/27, 11/9)]\n+\n+    >>> a = Poly(y + x**2 - 3, y, x, domain='ZZ')\n+    >>> b = Poly(-y + x - 4, y, x, domain='ZZ')\n+    >>> solve_biquadratic(a, b, NewOption)\n+    [(7/2 - sqrt(29)/2, -sqrt(29)/2 - 1/2), (sqrt(29)/2 + 7/2, -1/2 + \\\n+      sqrt(29)/2)]\n+    \"\"\"\n+    G = groebner([f, g])\n+\n+    if len(G) == 1 and G[0].is_ground:\n+        return None\n+\n+    if len(G) != 2:\n+        raise SolveFailed\n+\n+    x, y = opt.gens\n+    p, q = G\n+    if not p.gcd(q).is_ground:\n+        # not 0-dimensional\n+        raise SolveFailed\n+\n+    p = Poly(p, x, expand=False)\n+    p_roots = [rcollect(expr, y) for expr in roots(p).keys()]\n+\n+    q = q.ltrim(-1)\n+    q_roots = list(roots(q).keys())\n+\n+    solutions = []\n+\n+    for q_root in q_roots:\n+        for p_root in p_roots:\n+            solution = (p_root.subs(y, q_root), q_root)\n+            solutions.append(solution)\n+\n+    return sorted(solutions, key=default_sort_key)\n+\n+\n+def solve_generic(polys, opt):\n+    \"\"\"\n+    Solve a generic system of polynomial equations.\n+\n+    Returns all possible solutions over C[x_1, x_2, ..., x_m] of a\n+    set F = { f_1, f_2, ..., f_n } of polynomial equations,  using\n+    Groebner basis approach. For now only zero-dimensional systems\n+    are supported, which means F can have at most a finite number\n+    of solutions.\n+\n+    The algorithm works by the fact that, supposing G is the basis\n+    of F with respect to an elimination order  (here lexicographic\n+    order is used), G and F generate the same ideal, they have the\n+    same set of solutions. By the elimination property,  if G is a\n+    reduced, zero-dimensional Groebner basis, then there exists an\n+    univariate polynomial in G (in its last variable). This can be\n+    solved by computing its roots. Substituting all computed roots\n+    for the last (eliminated) variable in other elements of G, new\n+    polynomial system is generated. Applying the above procedure\n+    recursively, a finite number of solutions can be found.\n+\n+    The ability of finding all solutions by this procedure depends\n+    on the root finding algorithms. If no solutions were found, it\n+    means only that roots() failed, but the system is solvable. To\n+    overcome this difficulty use numerical algorithms instead.\n+\n+    Parameters\n+    ==========\n+\n+    polys: a list/tuple/set\n+        Listing all the polynomial equations that are needed to be solved\n+    opt: an Options object\n+        For specifying keyword arguments and generators\n+\n+    Returns\n+    =======\n+\n+    List[Tuple]\n+        A List of tuples. Solutions for symbols that satisfy the\n+        equations listed in seq\n+\n+    References\n+    ==========\n+\n+    .. [Buchberger01] B. Buchberger, Groebner Bases: A Short\n+    Introduction for Systems Theorists, In: R. Moreno-Diaz,\n+    B. Buchberger, J.L. Freire, Proceedings of EUROCAST'01,\n+    February, 2001\n+\n+    .. [Cox97] D. Cox, J. Little, D. O'Shea, Ideals, Varieties\n+    and Algorithms, Springer, Second Edition, 1997, pp. 112\n+\n+    Examples\n+    ========\n+\n+    >>> from sympy.polys import Poly, Options\n+    >>> from sympy.solvers.polysys import solve_generic\n+    >>> from sympy.abc import x, y\n+    >>> NewOption = Options((x, y), {'domain': 'ZZ'})\n+\n+    >>> a = Poly(x - y + 5, x, y, domain='ZZ')\n     >>> b = Poly(x + y - 3, x, y, domain='ZZ')\n     >>> solve_generic([a, b], NewOption)\n     [(-1, 4)]\n. \nErrors:\nThe updated code is invalid.\nMake sure that you return the unchanged code in the replace tag exactly as it is. If you want to reject the instructions, use the reject function.",
          "completion_cost": 0.027249000000000002
        },
        {
          "action": {
            "content": "<replace>\ndef solve_poly_system(seq, *gens, **args):\n    \"\"\"\n    Solve a system of polynomial equations.\n\n    Parameters\n    ==========\n\n    seq: a list/tuple/set\n        Listing all the equations that are needed to be solved\n    gens: generators\n        generators of the equations in seq for which we want the\n        solutions\n    args: Keyword arguments\n        Special options for solving the equations\n\n    Returns\n    =======\n\n    List[Tuple]\n        A List of tuples. Solutions for symbols that satisfy the\n        equations listed in seq\n\n    Examples\n    ========\n\n    >>> from sympy import solve_poly_system\n    >>> from sympy.abc import x, y\n\n    >>> solve_poly_system([x*y - 2*y, 2*y**2 - x**2], x, y)\n    [(0, 0), (2, -sqrt(2)), (2, sqrt(2))]\n\n    \"\"\"\n    try:\n        polys, opt = parallel_poly_from_expr(seq, *gens, **args)\n    except PolificationFailed as exc:\n        raise ComputationFailed('solve_poly_system', len(seq), exc)\n\n    if len(polys) == len(opt.gens) == 2:\n        f, g = polys\n\n        if all(i <= 2 for i in f.degree_list() + g.degree_list()):\n            try:\n                return solve_biquadratic(f, g, opt)\n            except SolveFailed:\n                pass\n\n    return solve_generic(polys, opt)\n</replace>"
          },
          "output": null,
          "input_tokens": 7425,
          "output_tokens": 380,
          "retry_message": "The code in the replace tag is the same as in the search. Use the reject function if you can't do any changes and want to reject the instructions.",
          "completion_cost": 0.027975
        },
        {
          "action": {
            "content": "<reject>\nThe instructions require the removal of code that is not present in the provided search block. The search block only contains the definition of `solve_poly_system`, which does not include the context needed to make the requested change. The specific code to check for univariate polynomials and throw a `NotImplementedError` when the system is reduced to a univariate polynomial but the number of generators is greater than 1 is not part of the provided context within the search block.\n</reject>"
          },
          "output": {
            "message": "\nThe instructions require the removal of code that is not present in the provided search block. The search block only contains the definition of `solve_poly_system`, which does not include the context needed to make the requested change. The specific code to check for univariate polynomials and throw a `NotImplementedError` when the system is reduced to a univariate polynomial but the number of generators is greater than 1 is not part of the provided context within the search block.\n"
          },
          "input_tokens": 7845,
          "output_tokens": 102,
          "retry_message": null,
          "completion_cost": 0.025065
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "\nThe instructions require the removal of code that is not present in the provided search block. The search block only contains the definition of `solve_poly_system`, which does not include the context needed to make the requested change. The specific code to check for univariate polynomials and throw a `NotImplementedError` when the system is reduced to a univariate polynomial but the number of generators is greater than 1 is not part of the provided context within the search block.\n",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "reject",
            "finish": null,
            "reject": "The required change is not present in the provided context. The context does not include the specific code where a check for univariate polynomials and raising a NotImplementedError when the system is reduced to a univariate polynomial but the number of generators is greater than 1 should be implemented.",
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The specific code to check for univariate polynomials and throw a NotImplementedError when the system is reduced to a univariate polynomial but the number of generators is greater than 1 is not part of the provided context within the search block. The instructions require a change that is not present in the given context.",
            "instructions": null
          },
          "output": {
            "message": "The required change is not present in the provided context. The context does not include the specific code where a check for univariate polynomials and raising a NotImplementedError when the system is reduced to a univariate polynomial but the number of generators is greater than 1 should be implemented."
          },
          "input_tokens": 2993,
          "output_tokens": 176,
          "retry_message": null,
          "completion_cost": 0.011619
        }
      ]
    },
    {
      "name": "Rejected",
      "state": {
        "model": "gpt-4o",
        "message": "The required change is not present in the provided context. The context does not include the specific code where a check for univariate polynomials and raising a NotImplementedError when the system is reduced to a univariate polynomial but the number of generators is greater than 1 should be implemented.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "detection of infinite solution request\n```python\r\n>>> solve_poly_system((x - 1,), x, y)\r\nTraceback (most recent call last):\r\n...\r\nNotImplementedError:\r\nonly zero-dimensional systems supported (finite number of solutions)\r\n>>> solve_poly_system((y - 1,), x, y)  <--- this is not handled correctly\r\n[(1,)]\r\n```\r\n```diff\r\ndiff --git a/sympy/solvers/polysys.py b/sympy/solvers/polysys.py\r\nindex b9809fd4e9..674322d4eb 100644\r\n--- a/sympy/solvers/polysys.py\r\n+++ b/sympy/solvers/polysys.py\r\n@@ -240,7 +240,7 @@ def _solve_reduced_system(system, gens, entry=False):\r\n \r\n         univariate = list(filter(_is_univariate, basis))\r\n \r\n-        if len(univariate) == 1:\r\n+        if len(univariate) == 1 and len(gens) == 1:\r\n             f = univariate.pop()\r\n         else:\r\n             raise NotImplementedError(filldedent('''\r\ndiff --git a/sympy/solvers/tests/test_polysys.py b/sympy/solvers/tests/test_polysys.py\r\nindex 58419f8762..9e674a6fe6 100644\r\n--- a/sympy/solvers/tests/test_polysys.py\r\n+++ b/sympy/solvers/tests/test_polysys.py\r\n@@ -48,6 +48,10 @@ def test_solve_poly_system():\r\n     raises(NotImplementedError, lambda: solve_poly_system(\r\n         [z, -2*x*y**2 + x + y**2*z, y**2*(-z - 4) + 2]))\r\n     raises(PolynomialError, lambda: solve_poly_system([1/x], x))\r\n+    raises(NotImplementedError, lambda: solve_poly_system(\r\n+        Poly(x - 1, x, y), (x, y)))\r\n+    raises(NotImplementedError, lambda: solve_poly_system(\r\n+        Poly(y - 1, x, y), (x, y)))\r\n \r\n \r\n def test_solve_biquadratic():\r\n```\n"
}