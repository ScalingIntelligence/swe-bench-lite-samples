{
  "info": {
    "duration": 406.5436980724335,
    "submission": "diff --git a/sympy/solvers/polysys.py b/sympy/solvers/polysys.py\nindex b9809fd4e9..674322d4eb 100644\n--- a/sympy/solvers/polysys.py\n+++ b/sympy/solvers/polysys.py\n@@ -240,7 +240,7 @@ def _solve_reduced_system(system, gens, entry=False):\n \n         univariate = list(filter(_is_univariate, basis))\n \n-        if len(univariate) == 1:\n+        if len(univariate) == 1 and len(gens) == 1:\n             f = univariate.pop()\n         else:\n             raise NotImplementedError(filldedent('''\n",
    "total_cost": 0.17984699999999998,
    "instance_id": "sympy__sympy-22005",
    "evaluation_name": "temperature_sweep_250_samples_50_problems_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves detecting and handling an infinite solution in the solve_poly_system function. The error trace indicates that the function currently only supports zero-dimensional systems with a finite number of solutions. The specific problematic case is when only one polynomial is provided, which can lead to an infinite solution if not handled correctly. The goal is to identify and possibly modify the solve_poly_system function to correctly handle such cases.",
            "search_requests": [
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/solvers/polysys.py",
                "function_names": [
                  "solve_poly_system"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 298,
                "span_id": "solve_poly_system",
                "file_path": "sympy/solvers/polysys.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/solvers/polysys.py",
                "function_names": [
                  "solve_poly_system"
                ]
              }
            ]
          },
          "input_tokens": 3552,
          "output_tokens": 155,
          "retry_message": null,
          "completion_cost": 0.012981000000000001
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 298,
            "span_id": "solve_poly_system",
            "file_path": "sympy/solvers/polysys.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about the detection of infinite solution requests in the function `solve_poly_system`. Specifically, the issue is with the handling of the case where there is an infinite solution (as seen in the example provided where `solve_poly_system((y - 1,), x, y)` does not raise an error as expected). The given search results provide relevant code spans that likely pertain to the solution of polynomial systems, including the function `solve_poly_system` itself, its helper functions `solve_biquadratic` and `solve_generic`, and the function `_solve_reduced_system` that is called within `solve_generic`. These functions are crucial for handling different scenarios in solving polynomial systems, including the detection of possible infinite solutions. The code spans include logic for handling biquadratic systems, generic systems, and the reduction of systems, which likely encompass the necessary logic to address the issue of detecting infinite solutions.",
            "identified_spans": [
              {
                "span_ids": [
                  "solve_poly_system",
                  "solve_biquadratic",
                  "solve_generic"
                ],
                "file_path": "sympy/solvers/polysys.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 2630,
          "output_tokens": 288,
          "retry_message": null,
          "completion_cost": 0.012209999999999999
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The file context provided includes the relevant function solve_poly_system, which is where the issue would need to be addressed. The code indicates that it currently supports only zero-dimensional systems with a finite number of solutions, as specified in the NotImplementedError raised. The file context also contains the _solve_reduced_system function, which is called by solve_poly_system and includes the logic for handling univariate polynomials. The issue suggests that additional checks need to be implemented to correctly handle cases where a polynomial system might have an infinite number of solutions, which is not currently managed. The provided context does not, however, include the specific modifications suggested in the issue (like the diff content). Given the existing code and the description of the issue, it is clear that the relevant part of the codebase is identified, but the specific implementation of the fix is not present in the context provided.",
            "search_suggestions": "Look for the specific patch or code modifications in the history of the sympy/solvers/polysys.py file, as suggested in the issue's diff content. These changes may include additional checks or conditions within the _solve_reduced_system function to properly raise a NotImplementedError for systems with infinite solutions."
          },
          "output": {
            "message": "Look for the specific patch or code modifications in the history of the sympy/solvers/polysys.py file, as suggested in the issue's diff content. These changes may include additional checks or conditions within the _solve_reduced_system function to properly raise a NotImplementedError for systems with infinite solutions."
          },
          "input_tokens": 2528,
          "output_tokens": 283,
          "retry_message": null,
          "completion_cost": 0.011829000000000001
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look for the specific patch or code modifications in the history of the sympy/solvers/polysys.py file, as suggested in the issue's diff content. These changes may include additional checks or conditions within the _solve_reduced_system function to properly raise a NotImplementedError for systems with infinite solutions.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The provided context includes the current implementation of the solve_poly_system function and its related functions in sympy/solvers/polysys.py. The goal is to find the specific patch or code modifications that were introduced to handle cases where the system could have an infinite number of solutions. This would typically involve modifications to the _solve_reduced_system function to add additional checks or conditions that raise a NotImplementedError when an infinite solution is detected.",
            "search_requests": [
              {
                "query": "additional checks to detect infinite solutions",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/solvers/polysys.py",
                "function_names": [
                  "_solve_reduced_system"
                ]
              }
            ]
          },
          "output": null,
          "input_tokens": 4867,
          "output_tokens": 199,
          "retry_message": "\n\nUnfortunately, I didn\u2019t find any relevant results.",
          "completion_cost": 0.017586
        },
        {
          "action": {
            "complete": false,
            "scratch_pad": "No relevant results were found in the file context provided for sympy/solvers/polysys.py. This suggests that the specific patch or code modifications mentioned in the issue's diff content might not be present in the code snippet provided. Given this circumstance, another approach would be to search the entire sympy/solvers/ directory for any changes related to handling infinite solutions or modifications to the _solve_reduced_system function.",
            "search_requests": [
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/solvers/**/*.py",
                "function_names": [
                  "_solve_reduced_system"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 1199,
                "span_id": "solve_generic",
                "file_path": "sympy/solvers/polysys.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/solvers/**/*.py",
                "function_names": [
                  "_solve_reduced_system"
                ]
              }
            ]
          },
          "input_tokens": 5084,
          "output_tokens": 187,
          "retry_message": null,
          "completion_cost": 0.018057
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 1199,
            "span_id": "solve_generic",
            "file_path": "sympy/solvers/polysys.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue pertains to the incorrect handling of a specific case in the 'solve_poly_system' function, specifically when handling a system of polynomial equations that has an infinite number of solutions. The issue points to a specific error in the implementation that leads to an incorrect result. The given context includes the 'solve_poly_system' function and 'solve_generic' function where the main logic resides. The search results reconfirm the presence of these functions and their related logic. The primary task is to identify the relevant code spans that address the handling of the infinite solution system and ensure the implementation aligns with the requirement to raise a 'NotImplementedError' for such cases.",
            "identified_spans": [
              {
                "span_ids": [
                  "solve_poly_system",
                  "solve_generic"
                ],
                "file_path": "sympy/solvers/polysys.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3464,
          "output_tokens": 217,
          "retry_message": null,
          "completion_cost": 0.013647
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": false,
            "scratch_pad": "No relevant results were found in the file context provided for sympy/solvers/polysys.py. This suggests that the specific patch or code modifications mentioned in the issue's diff content might not be present in the code snippet provided. Given this circumstance, another approach would be to search the entire sympy/solvers/ directory for any changes related to handling infinite solutions or modifications to the _solve_reduced_system function.",
            "search_suggestions": "Consider searching the entire sympy/solvers/ directory for any changes related to handling infinite solutions or modifications to the _solve_reduced_system function."
          },
          "output": {
            "message": "Consider searching the entire sympy/solvers/ directory for any changes related to handling infinite solutions or modifications to the _solve_reduced_system function."
          },
          "input_tokens": 2533,
          "output_tokens": 159,
          "retry_message": null,
          "completion_cost": 0.009984
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Consider searching the entire sympy/solvers/ directory for any changes related to handling infinite solutions or modifications to the _solve_reduced_system function.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "scratch_pad": "The file context provided includes the implementation of the `solve_poly_system` function in sympy/solvers/polysys.py. The function `_solve_reduced_system` is responsible for solving polynomial systems and contains the logic that handles the univariate case. The current implementation raises a `NotImplementedError` if the system is not zero-dimensional, which aligns with the error encountered in the provided diff. However, there is no direct patch or modification present in the provided snippet that specifically addresses the handling of infinite solutions.",
            "search_requests": []
          },
          "output": {
            "message": "The file context provided includes the implementation of the `solve_poly_system` function in sympy/solvers/polysys.py. The function `_solve_reduced_system` is responsible for solving polynomial systems and contains the logic that handles the univariate case. The current implementation raises a `NotImplementedError` if the system is not zero-dimensional, which aligns with the error encountered in the provided diff. However, there is no direct patch or modification present in the provided snippet that specifically addresses the handling of infinite solutions."
          },
          "input_tokens": 5092,
          "output_tokens": 140,
          "retry_message": null,
          "completion_cost": 0.017376
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "The file context provided includes the implementation of the `solve_poly_system` function in sympy/solvers/polysys.py. The function `_solve_reduced_system` is responsible for solving polynomial systems and contains the logic that handles the univariate case. The current implementation raises a `NotImplementedError` if the system is not zero-dimensional, which aligns with the error encountered in the provided diff. However, there is no direct patch or modification present in the provided snippet that specifically addresses the handling of infinite solutions.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "_solve_reduced_system",
            "file_path": "sympy/solvers/polysys.py",
            "scratch_pad": "The issue reported indicates that the function `solve_poly_system` is not handling correctly the case where it encounters an infinite number of solutions. From the provided diff, it seems that the function `_solve_reduced_system` is supposed to raise a `NotImplementedError` for non-zero-dimensional systems (infinite solutions). However, the current condition to check for univariate polynomials does not account for cases where there are multiple variables but only one univariate polynomial. This is the likely cause of the issue where the function is erroneously returning a finite solution when it should be indicating that the system has infinite solutions.",
            "instructions": "Update the condition in `_solve_reduced_system` to correctly identify systems with infinite solutions. Specifically, modify the condition that checks for univariate polynomials to ensure that it not only checks the number of univariate polynomials but also verifies that the system does not have a finite number of solutions based on the number of variables involved."
          },
          "output": null,
          "input_tokens": 2845,
          "output_tokens": 256,
          "retry_message": "Span not found: _solve_reduced_system. Available spans: solve_biquadratic, solve_poly_system, solve_generic",
          "completion_cost": 0.012375
        },
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "solve_generic",
            "file_path": "sympy/solvers/polysys.py",
            "scratch_pad": "The span ID '_solve_reduced_system' provided in the request does not exist in the provided file context. Instead, the relevant span for solving generic polynomial systems is 'solve_generic'. This span contains the function `_solve_reduced_system` which is responsible for solving the polynomial system. The error indicates that the system must raise a `NotImplementedError` when it detects an infinite solution.",
            "instructions": "Update the function within the 'solve_generic' span to include a check that raises a `NotImplementedError` when the system detects an infinite number of solutions. This should be incorporated into the current logic that handles univariate polynomials and basis evaluation."
          },
          "output": {
            "span_id": "solve_generic",
            "file_path": "sympy/solvers/polysys.py",
            "instructions": "Update the function within the 'solve_generic' span to include a check that raises a `NotImplementedError` when the system detects an infinite number of solutions. This should be incorporated into the current logic that handles univariate polynomials and basis evaluation."
          },
          "input_tokens": 3151,
          "output_tokens": 207,
          "retry_message": null,
          "completion_cost": 0.012558
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "solve_generic",
        "end_line": null,
        "file_path": "sympy/solvers/polysys.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Update the function within the 'solve_generic' span to include a check that raises a `NotImplementedError` when the system detects an infinite number of solutions. This should be incorporated into the current logic that handles univariate polynomials and basis evaluation.\n\nThe function 'solve_generic' needs to be updated to include a check for an infinite number of solutions. This can be done by modifying the 'NotImplementedError' raised in lines 246-249 to account for the infinite solutions scenario.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 249,
            "start_line": 246,
            "scratch_pad": "The function 'solve_generic' needs to be updated to include a check for an infinite number of solutions. This can be done by modifying the 'NotImplementedError' raised in lines 246-249 to account for the infinite solutions scenario."
          },
          "output": {
            "span_id": "solve_generic",
            "end_line": 282,
            "file_path": "sympy/solvers/polysys.py",
            "start_line": 227,
            "instructions": "Update the function within the 'solve_generic' span to include a check that raises a `NotImplementedError` when the system detects an infinite number of solutions. This should be incorporated into the current logic that handles univariate polynomials and basis evaluation.\n\nThe function 'solve_generic' needs to be updated to include a check for an infinite number of solutions. This can be done by modifying the 'NotImplementedError' raised in lines 246-249 to account for the infinite solutions scenario."
          },
          "input_tokens": 2482,
          "output_tokens": 99,
          "retry_message": null,
          "completion_cost": 0.008931
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "solve_generic",
        "end_line": 282,
        "file_path": "sympy/solvers/polysys.py",
        "max_tokens": 1000,
        "start_line": 227,
        "temperature": 1.6,
        "instructions": "Update the function within the 'solve_generic' span to include a check that raises a `NotImplementedError` when the system detects an infinite number of solutions. This should be incorporated into the current logic that handles univariate polynomials and basis evaluation.\n\nThe function 'solve_generic' needs to be updated to include a check for an infinite number of solutions. This can be done by modifying the 'NotImplementedError' raised in lines 246-249 to account for the infinite solutions scenario.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```\n<replace>\n    def _solve_reduced_system(system, gens, entry=False):\n        \"\"\"Recursively solves reduced polynomial systems. \"\"\"\n        if len(system) == len(gens) == 1:\n            zeros = list(roots(system[0], gens[-1]).keys())\n            return [(zero,) for zero in zeros]\n\n        basis = groebner(system, gens, polys=True)\n\n        if len(basis) == 1 and basis[0].is_ground:\n            if not entry:\n                return []\n            else:\n                return None\n\n        univariate = list(filter(_is_univariate, basis))\n\n        if len(univariate) == 1 and len(gens) == 1:\n            f = univariate.pop()\n        else:\n            raise NotImplementedError(filldedent('''\n                only zero-dimensional systems supported\n                (finite number of solutions)\n                '''))\n\n        gens = f.gens\n        gen = gens[-1]\n\n        zeros = list(roots(f.ltrim(gen)).keys())\n\n        if not zeros:\n            return []\n\n        if len(basis) == 1:\n            return [(zero,) for zero in zeros]\n\n        solutions = []\n\n        for zero in zeros:\n            new_system = []\n            new_gens = gens[:-1]\n\n            for b in basis[:-1]:\n                eq = _subs_root(b, gen, zero)\n\n                if eq is not S.Zero:\n                    new_system.append(eq)\n\n            for solution in _solve_reduced_system(new_system, new_gens):\n                solutions.append(solution + (zero,))\n\n        if solutions and len(solutions[0]) != len(gens):\n            raise NotImplementedError(filldedent('''\n                only zero-dimensional systems supported\n                (finite number of solutions)\n                '''))\n        return solutions\n</replace>"
          },
          "output": {
            "diff": "--- sympy/solvers/polysys.py\n+++ sympy/solvers/polysys.py\n@@ -240,7 +240,7 @@\n \n         univariate = list(filter(_is_univariate, basis))\n \n-        if len(univariate) == 1:\n+        if len(univariate) == 1 and len(gens) == 1:\n             f = univariate.pop()\n         else:\n             raise NotImplementedError(filldedent('''\n",
            "message": "Applied the change to sympy/solvers/polysys.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 4237,
          "output_tokens": 453,
          "retry_message": null,
          "completion_cost": 0.019506
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sympy/solvers/polysys.py\n+++ sympy/solvers/polysys.py\n@@ -240,7 +240,7 @@\n \n         univariate = list(filter(_is_univariate, basis))\n \n-        if len(univariate) == 1:\n+        if len(univariate) == 1 and len(gens) == 1:\n             f = univariate.pop()\n         else:\n             raise NotImplementedError(filldedent('''\n",
        "model": "deepseek-coder",
        "message": "Applied the change to sympy/solvers/polysys.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The changes have been applied to sympy/solvers/polysys.py, specifically within the '_solve_reduced_system' function. The patch ensures that a 'NotImplementedError' is raised when the system is not zero-dimensional, thereby fixing the issue regarding the detection of infinite solutions.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The updated code now includes a check in the '_solve_reduced_system' function to raise a 'NotImplementedError' if the length of the univariate list is 1 and the number of generators (variables) is 1. This ensures that the system is zero-dimensional and has a finite number of solutions. This change directly addresses the issue reported, where the infinite solution case was not being handled correctly.",
            "instructions": null
          },
          "output": {
            "message": "The changes have been applied to sympy/solvers/polysys.py, specifically within the '_solve_reduced_system' function. The patch ensures that a 'NotImplementedError' is raised when the system is not zero-dimensional, thereby fixing the issue regarding the detection of infinite solutions."
          },
          "input_tokens": 3229,
          "output_tokens": 208,
          "retry_message": null,
          "completion_cost": 0.012806999999999999
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The changes have been applied to sympy/solvers/polysys.py, specifically within the '_solve_reduced_system' function. The patch ensures that a 'NotImplementedError' is raised when the system is not zero-dimensional, thereby fixing the issue regarding the detection of infinite solutions.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "detection of infinite solution request\n```python\r\n>>> solve_poly_system((x - 1,), x, y)\r\nTraceback (most recent call last):\r\n...\r\nNotImplementedError:\r\nonly zero-dimensional systems supported (finite number of solutions)\r\n>>> solve_poly_system((y - 1,), x, y)  <--- this is not handled correctly\r\n[(1,)]\r\n```\r\n```diff\r\ndiff --git a/sympy/solvers/polysys.py b/sympy/solvers/polysys.py\r\nindex b9809fd4e9..674322d4eb 100644\r\n--- a/sympy/solvers/polysys.py\r\n+++ b/sympy/solvers/polysys.py\r\n@@ -240,7 +240,7 @@ def _solve_reduced_system(system, gens, entry=False):\r\n \r\n         univariate = list(filter(_is_univariate, basis))\r\n \r\n-        if len(univariate) == 1:\r\n+        if len(univariate) == 1 and len(gens) == 1:\r\n             f = univariate.pop()\r\n         else:\r\n             raise NotImplementedError(filldedent('''\r\ndiff --git a/sympy/solvers/tests/test_polysys.py b/sympy/solvers/tests/test_polysys.py\r\nindex 58419f8762..9e674a6fe6 100644\r\n--- a/sympy/solvers/tests/test_polysys.py\r\n+++ b/sympy/solvers/tests/test_polysys.py\r\n@@ -48,6 +48,10 @@ def test_solve_poly_system():\r\n     raises(NotImplementedError, lambda: solve_poly_system(\r\n         [z, -2*x*y**2 + x + y**2*z, y**2*(-z - 4) + 2]))\r\n     raises(PolynomialError, lambda: solve_poly_system([1/x], x))\r\n+    raises(NotImplementedError, lambda: solve_poly_system(\r\n+        Poly(x - 1, x, y), (x, y)))\r\n+    raises(NotImplementedError, lambda: solve_poly_system(\r\n+        Poly(y - 1, x, y), (x, y)))\r\n \r\n \r\n def test_solve_biquadratic():\r\n```\n"
}