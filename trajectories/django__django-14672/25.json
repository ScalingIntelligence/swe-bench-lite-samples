{
  "info": {
    "duration": 137.80382442474365,
    "submission": "diff --git a/django/db/models/fields/reverse_related.py b/django/db/models/fields/reverse_related.py\nindex ccc2223a5f..e7f84be36f 100644\n--- a/django/db/models/fields/reverse_related.py\n+++ b/django/db/models/fields/reverse_related.py\n@@ -301,6 +301,8 @@ class ManyToManyRel(ForeignObjectRel):\n \n         if through_fields and not through:\n             raise ValueError(\"Cannot specify through_fields without a through model\")\n+        if isinstance(through_fields, list):\n+            through_fields = tuple(through_fields)\n         self.through_fields = through_fields\n \n         self.symmetrical = symmetrical\n",
    "total_cost": 0.13647,
    "instance_id": "django__django-14672",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves the absence of a call to `make_hashable` on the `through_fields` attribute in the `ManyToManyRel` class when `through_fields` can be a list. This causes a `TypeError` because a list is not hashable. The issue is only observed when checking proxy models, and the solution involves adding the missing `make_hashable` call. To address this, it's necessary to locate the `ManyToManyRel` class and the `identity` property within it, which are relevant for this issue. It's also important to find the location of the `make_hashable` function for potential inclusion. Given the context, it's likely that `ManyToManyRel` and `make_hashable` are within files related to model fields or relationships, specifically in `related.py` or `reverse_related.py`.",
            "search_requests": [
              {
                "query": "make_hashable",
                "class_names": [
                  "ManyToManyRel"
                ],
                "code_snippet": null,
                "file_pattern": "**/related.py",
                "function_names": []
              },
              {
                "query": "make_hashable",
                "class_names": [
                  "ManyToManyRel"
                ],
                "code_snippet": null,
                "file_pattern": "**/reverse_related.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 1,
                "tokens": 98,
                "span_id": "ManyToManyRel.get_related_field",
                "file_path": "django/db/models/fields/reverse_related.py"
              },
              {
                "rank": 1,
                "tokens": 31,
                "span_id": "ManyToManyRel.identity",
                "file_path": "django/db/models/fields/reverse_related.py"
              },
              {
                "rank": 1,
                "tokens": 51,
                "span_id": "ManyToManyRel",
                "file_path": "django/db/models/fields/reverse_related.py"
              }
            ],
            "search_requests": [
              {
                "query": "make_hashable",
                "class_names": [
                  "ManyToManyRel"
                ],
                "code_snippet": null,
                "file_pattern": "**/related.py",
                "function_names": []
              },
              {
                "query": "make_hashable",
                "class_names": [
                  "ManyToManyRel"
                ],
                "code_snippet": null,
                "file_pattern": "**/reverse_related.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 5059,
          "output_tokens": 314,
          "retry_message": null,
          "completion_cost": 0.019887
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 1,
            "tokens": 98,
            "span_id": "ManyToManyRel.get_related_field",
            "file_path": "django/db/models/fields/reverse_related.py"
          },
          {
            "rank": 1,
            "tokens": 31,
            "span_id": "ManyToManyRel.identity",
            "file_path": "django/db/models/fields/reverse_related.py"
          },
          {
            "rank": 1,
            "tokens": 51,
            "span_id": "ManyToManyRel",
            "file_path": "django/db/models/fields/reverse_related.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue indicates that a call to `make_hashable` is missing on `through_fields` in the `ManyToManyRel` class. This is leading to a `TypeError` when attempting to hash the `identity` property due to `through_fields` being a list. The provided context does not include any file context, indicating that this is the initial search. The search results include several spans from the `reverse_related.py` file, notably the `ManyToManyRel` class with its `__init__` method and the `identity` property. The relevant span is the `ManyToManyRel.__init__` span, which initializes `through_fields` but does not apply the `make_hashable` function to it. This is directly related to the reported issue as it implies the missing call to `make_hashable` on `through_fields`.",
            "identified_spans": [
              {
                "span_ids": [
                  "ManyToManyRel.__init__"
                ],
                "file_path": "django/db/models/fields/reverse_related.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3693,
          "output_tokens": 260,
          "retry_message": null,
          "completion_cost": 0.014979000000000001
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The file context provided includes the `ManyToManyRel` class within `reverse_related.py`, which is directly related to the issue reported. The `ManyToManyRel` class contains the `through_fields` attribute that could potentially be a list and needs the `make_hashable` call to avoid the `TypeError`. However, the actual instantiation or definition of the `make_hashable` function is not provided in the file context. To fully fix the issue, we would need the definition of `make_hashable` or its implementation context.",
            "search_suggestions": "Look for the definition of `make_hashable` in the project's codebase, likely in a utility file or within the models directory, to understand how it transforms unhashable objects into a hashable format. Additionally, ensure that the `make_hashable` function can be applied to `through_fields` in the `ManyToManyRel` class to prevent the `TypeError`."
          },
          "output": {
            "message": "Look for the definition of `make_hashable` in the project's codebase, likely in a utility file or within the models directory, to understand how it transforms unhashable objects into a hashable format. Additionally, ensure that the `make_hashable` function can be applied to `through_fields` in the `ManyToManyRel` class to prevent the `TypeError`."
          },
          "input_tokens": 3454,
          "output_tokens": 234,
          "retry_message": null,
          "completion_cost": 0.013871999999999999
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look for the definition of `make_hashable` in the project's codebase, likely in a utility file or within the models directory, to understand how it transforms unhashable objects into a hashable format. Additionally, ensure that the `make_hashable` function can be applied to `through_fields` in the `ManyToManyRel` class to prevent the `TypeError`.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "To fully resolve the issue, it's essential to not only find the `ManyToManyRel` class but also understand the `make_hashable` function. This function is likely located in a utility module, given its potential use across different parts of the codebase. It's necessary to examine how `make_hashable` handles objects that are unhashable, such as lists, in order to ensure it can properly transform `through_fields` for use in hash operations. With this knowledge, the appropriate modifications can be made to `ManyToManyRel` to call `make_hashable` on `through_fields`.",
            "search_requests": [
              {
                "query": "make_hashable",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/utils.py",
                "function_names": [
                  "make_hashable"
                ]
              },
              {
                "query": "make_hashable",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/models/utils.py",
                "function_names": [
                  "make_hashable"
                ]
              }
            ]
          },
          "output": null,
          "input_tokens": 5744,
          "output_tokens": 297,
          "retry_message": "\n\nUnfortunately, I didn\u2019t find any relevant results.",
          "completion_cost": 0.021687
        },
        {
          "action": {
            "complete": true,
            "scratch_pad": "Given that the search for `make_hashable` did not yield any results, it suggests that the function might not be present in the project's codebase under the expected filenames. This could indicate a need to create the `make_hashable` function from scratch or to identify an alternative method for converting unhashable objects into a hashable format. For the immediate issue in `ManyToManyRel`, since `through_fields` being a list is causing the `TypeError`, consider implementing a custom hash method in `ManyToManyRel` that handles list conversion appropriately, possibly converting lists to tuples which are hashable. If implementing `make_hashable`, it would need to be done on case-by-case bases, tailored to the specific requirements and objects involved in each context it's meant to serve.",
            "search_requests": []
          },
          "output": {
            "message": "Given that the search for `make_hashable` did not yield any results, it suggests that the function might not be present in the project's codebase under the expected filenames. This could indicate a need to create the `make_hashable` function from scratch or to identify an alternative method for converting unhashable objects into a hashable format. For the immediate issue in `ManyToManyRel`, since `through_fields` being a list is causing the `TypeError`, consider implementing a custom hash method in `ManyToManyRel` that handles list conversion appropriately, possibly converting lists to tuples which are hashable. If implementing `make_hashable`, it would need to be done on case-by-case bases, tailored to the specific requirements and objects involved in each context it's meant to serve."
          },
          "input_tokens": 6059,
          "output_tokens": 196,
          "retry_message": null,
          "completion_cost": 0.021117000000000004
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "Given that the search for `make_hashable` did not yield any results, it suggests that the function might not be present in the project's codebase under the expected filenames. This could indicate a need to create the `make_hashable` function from scratch or to identify an alternative method for converting unhashable objects into a hashable format. For the immediate issue in `ManyToManyRel`, since `through_fields` being a list is causing the `TypeError`, consider implementing a custom hash method in `ManyToManyRel` that handles list conversion appropriately, possibly converting lists to tuples which are hashable. If implementing `make_hashable`, it would need to be done on case-by-case bases, tailored to the specific requirements and objects involved in each context it's meant to serve.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "ManyToManyRel.__init__",
            "file_path": "django/db/models/fields/reverse_related.py",
            "scratch_pad": "The issue is that the `through_fields` attribute in the `ManyToManyRel` class can be a list, which is not hashable and causing a `TypeError`. To resolve this, we need to ensure that `through_fields` is converted to a hashable type before it is used for any hashing operations. This can be done by adding a call to a `make_hashable` function if it exists, or by ensuring that `through_fields` is always a tuple before any hashing operation.",
            "instructions": "Add a check in the `__init__` method of the `ManyToManyRel` class to convert `self.through_fields` to a tuple if it is a list. This ensures that `through_fields` is always hashable."
          },
          "output": {
            "span_id": "ManyToManyRel.__init__",
            "end_line": 307,
            "file_path": "django/db/models/fields/reverse_related.py",
            "start_line": 288,
            "instructions": "Add a check in the `__init__` method of the `ManyToManyRel` class to convert `self.through_fields` to a tuple if it is a list. This ensures that `through_fields` is always hashable."
          },
          "input_tokens": 3792,
          "output_tokens": 223,
          "retry_message": null,
          "completion_cost": 0.014721000000000001
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "ManyToManyRel.__init__",
        "end_line": 307,
        "file_path": "django/db/models/fields/reverse_related.py",
        "max_tokens": 1000,
        "start_line": 288,
        "temperature": 1.6,
        "instructions": "Add a check in the `__init__` method of the `ManyToManyRel` class to convert `self.through_fields` to a tuple if it is a list. This ensures that `through_fields` is always hashable.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```\n<replace>\n    def __init__(self, field, to, related_name=None, related_query_name=None,\n                 limit_choices_to=None, symmetrical=True, through=None,\n                 through_fields=None, db_constraint=True):\n        super().__init__(\n            field, to,\n            related_name=related_name,\n            related_query_name=related_query_name,\n            limit_choices_to=limit_choices_to,\n        )\n\n        if through and not db_constraint:\n            raise ValueError(\"Can't supply a through model and db_constraint=False\")\n        self.through = through\n\n        if through_fields and not through:\n            raise ValueError(\"Cannot specify through_fields without a through model\")\n        if isinstance(through_fields, list):\n            through_fields = tuple(through_fields)\n        self.through_fields = through_fields\n\n        self.symmetrical = symmetrical\n        self.db_constraint = db_constraint\n</replace>"
          },
          "output": {
            "diff": "--- django/db/models/fields/reverse_related.py\n+++ django/db/models/fields/reverse_related.py\n@@ -301,6 +301,8 @@\n \n         if through_fields and not through:\n             raise ValueError(\"Cannot specify through_fields without a through model\")\n+        if isinstance(through_fields, list):\n+            through_fields = tuple(through_fields)\n         self.through_fields = through_fields\n \n         self.symmetrical = symmetrical\n",
            "message": "Applied the change to django/db/models/fields/reverse_related.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 3532,
          "output_tokens": 238,
          "retry_message": null,
          "completion_cost": 0.014166
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- django/db/models/fields/reverse_related.py\n+++ django/db/models/fields/reverse_related.py\n@@ -301,6 +301,8 @@\n \n         if through_fields and not through:\n             raise ValueError(\"Cannot specify through_fields without a through model\")\n+        if isinstance(through_fields, list):\n+            through_fields = tuple(through_fields)\n         self.through_fields = through_fields\n \n         self.symmetrical = symmetrical\n",
        "model": "deepseek-coder",
        "message": "Applied the change to django/db/models/fields/reverse_related.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The required change has been correctly implemented. The issue of `through_fields` being a list and causing a `TypeError` during hashing operations has been resolved by ensuring `through_fields` is always a tuple.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The change has been applied to ensure that `self.through_fields` is always a tuple, making it hashable. This addresses the issue where `through_fields` could be a list, which is unhashable. The change involves adding a check in the `__init__` method of the `ManyToManyRel` class to convert `self.through_fields` to a tuple if it is a list.",
            "instructions": null
          },
          "output": {
            "message": "The required change has been correctly implemented. The issue of `through_fields` being a list and causing a `TypeError` during hashing operations has been resolved by ensuring `through_fields` is always a tuple."
          },
          "input_tokens": 4387,
          "output_tokens": 192,
          "retry_message": null,
          "completion_cost": 0.016041
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The required change has been correctly implemented. The issue of `through_fields` being a list and causing a `TypeError` during hashing operations has been resolved by ensuring `through_fields` is always a tuple.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Missing call `make_hashable` on `through_fields` in `ManyToManyRel`\nDescription\n\t\nIn 3.2 identity property has been added to all ForeignObjectRel to make it possible to compare them. A hash is derived from said identity and it's possible because identity is a tuple. To make limit_choices_to hashable (one of this tuple elements), \u200bthere's a call to make_hashable.\nIt happens that through_fields can be a list. In such case, this make_hashable call is missing in \u200bManyToManyRel.\nFor some reason it only fails on checking proxy model. I think proxy models have 29 checks and normal ones 24, hence the issue, but that's just a guess.\nMinimal repro:\nclass Parent(models.Model):\n\tname = models.CharField(max_length=256)\nclass ProxyParent(Parent):\n\tclass Meta:\n\t\tproxy = True\nclass Child(models.Model):\n\tparent = models.ForeignKey(Parent, on_delete=models.CASCADE)\n\tmany_to_many_field = models.ManyToManyField(\n\t\tto=Parent,\n\t\tthrough=\"ManyToManyModel\",\n\t\tthrough_fields=['child', 'parent'],\n\t\trelated_name=\"something\"\n\t)\nclass ManyToManyModel(models.Model):\n\tparent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')\n\tchild = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')\n\tsecond_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)\nWhich will result in \n File \"manage.py\", line 23, in <module>\n\tmain()\n File \"manage.py\", line 19, in main\n\texecute_from_command_line(sys.argv)\n File \"/home/tom/PycharmProjects/broken_m2m_project/venv/lib/python3.8/site-packages/django/core/management/__init__.py\", line 419, in execute_from_command_line\n\tutility.execute()\n File \"/home/tom/PycharmProjects/broken_m2m_project/venv/lib/python3.8/site-packages/django/core/management/__init__.py\", line 413, in execute\n\tself.fetch_command(subcommand).run_from_argv(self.argv)\n File \"/home/tom/PycharmProjects/broken_m2m_project/venv/lib/python3.8/site-packages/django/core/management/base.py\", line 354, in run_from_argv\n\tself.execute(*args, **cmd_options)\n File \"/home/tom/PycharmProjects/broken_m2m_project/venv/lib/python3.8/site-packages/django/core/management/base.py\", line 393, in execute\n\tself.check()\n File \"/home/tom/PycharmProjects/broken_m2m_project/venv/lib/python3.8/site-packages/django/core/management/base.py\", line 419, in check\n\tall_issues = checks.run_checks(\n File \"/home/tom/PycharmProjects/broken_m2m_project/venv/lib/python3.8/site-packages/django/core/checks/registry.py\", line 76, in run_checks\n\tnew_errors = check(app_configs=app_configs, databases=databases)\n File \"/home/tom/PycharmProjects/broken_m2m_project/venv/lib/python3.8/site-packages/django/core/checks/model_checks.py\", line 34, in check_all_models\n\terrors.extend(model.check(**kwargs))\n File \"/home/tom/PycharmProjects/broken_m2m_project/venv/lib/python3.8/site-packages/django/db/models/base.py\", line 1277, in check\n\t*cls._check_field_name_clashes(),\n File \"/home/tom/PycharmProjects/djangbroken_m2m_projectProject/venv/lib/python3.8/site-packages/django/db/models/base.py\", line 1465, in _check_field_name_clashes\n\tif f not in used_fields:\n File \"/home/tom/PycharmProjects/broken_m2m_project/venv/lib/python3.8/site-packages/django/db/models/fields/reverse_related.py\", line 140, in __hash__\n\treturn hash(self.identity)\nTypeError: unhashable type: 'list'\nSolution: Add missing make_hashable call on self.through_fields in ManyToManyRel.\nMissing call `make_hashable` on `through_fields` in `ManyToManyRel`\nDescription\n\t\nIn 3.2 identity property has been added to all ForeignObjectRel to make it possible to compare them. A hash is derived from said identity and it's possible because identity is a tuple. To make limit_choices_to hashable (one of this tuple elements), \u200bthere's a call to make_hashable.\nIt happens that through_fields can be a list. In such case, this make_hashable call is missing in \u200bManyToManyRel.\nFor some reason it only fails on checking proxy model. I think proxy models have 29 checks and normal ones 24, hence the issue, but that's just a guess.\nMinimal repro:\nclass Parent(models.Model):\n\tname = models.CharField(max_length=256)\nclass ProxyParent(Parent):\n\tclass Meta:\n\t\tproxy = True\nclass Child(models.Model):\n\tparent = models.ForeignKey(Parent, on_delete=models.CASCADE)\n\tmany_to_many_field = models.ManyToManyField(\n\t\tto=Parent,\n\t\tthrough=\"ManyToManyModel\",\n\t\tthrough_fields=['child', 'parent'],\n\t\trelated_name=\"something\"\n\t)\nclass ManyToManyModel(models.Model):\n\tparent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')\n\tchild = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')\n\tsecond_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)\nWhich will result in \n File \"manage.py\", line 23, in <module>\n\tmain()\n File \"manage.py\", line 19, in main\n\texecute_from_command_line(sys.argv)\n File \"/home/tom/PycharmProjects/broken_m2m_project/venv/lib/python3.8/site-packages/django/core/management/__init__.py\", line 419, in execute_from_command_line\n\tutility.execute()\n File \"/home/tom/PycharmProjects/broken_m2m_project/venv/lib/python3.8/site-packages/django/core/management/__init__.py\", line 413, in execute\n\tself.fetch_command(subcommand).run_from_argv(self.argv)\n File \"/home/tom/PycharmProjects/broken_m2m_project/venv/lib/python3.8/site-packages/django/core/management/base.py\", line 354, in run_from_argv\n\tself.execute(*args, **cmd_options)\n File \"/home/tom/PycharmProjects/broken_m2m_project/venv/lib/python3.8/site-packages/django/core/management/base.py\", line 393, in execute\n\tself.check()\n File \"/home/tom/PycharmProjects/broken_m2m_project/venv/lib/python3.8/site-packages/django/core/management/base.py\", line 419, in check\n\tall_issues = checks.run_checks(\n File \"/home/tom/PycharmProjects/broken_m2m_project/venv/lib/python3.8/site-packages/django/core/checks/registry.py\", line 76, in run_checks\n\tnew_errors = check(app_configs=app_configs, databases=databases)\n File \"/home/tom/PycharmProjects/broken_m2m_project/venv/lib/python3.8/site-packages/django/core/checks/model_checks.py\", line 34, in check_all_models\n\terrors.extend(model.check(**kwargs))\n File \"/home/tom/PycharmProjects/broken_m2m_project/venv/lib/python3.8/site-packages/django/db/models/base.py\", line 1277, in check\n\t*cls._check_field_name_clashes(),\n File \"/home/tom/PycharmProjects/djangbroken_m2m_projectProject/venv/lib/python3.8/site-packages/django/db/models/base.py\", line 1465, in _check_field_name_clashes\n\tif f not in used_fields:\n File \"/home/tom/PycharmProjects/broken_m2m_project/venv/lib/python3.8/site-packages/django/db/models/fields/reverse_related.py\", line 140, in __hash__\n\treturn hash(self.identity)\nTypeError: unhashable type: 'list'\nSolution: Add missing make_hashable call on self.through_fields in ManyToManyRel.\n"
}