{
  "info": {
    "duration": 177.19770574569702,
    "submission": "diff --git a/src/_pytest/logging.py b/src/_pytest/logging.py\nindex 757cb2797..08670d2b2 100644\n--- a/src/_pytest/logging.py\n+++ b/src/_pytest/logging.py\n@@ -15,7 +15,7 @@ from _pytest.compat import dummy_context_manager\n from _pytest.config import create_terminal_writer\n from _pytest.pathlib import Path\n \n-DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n DEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n \n \n",
    "total_cost": 0.110367,
    "instance_id": "pytest-dev__pytest-5227",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves improving the default logging format by including the module name (`name`) instead of just the base filename, and potentially adding the relative path. We need to find the current logging format definition and examine where this format string is being used to ensure that the proposed changes will be applied everywhere in the system. Given the description, it seems plausible that the logging implementation can be found in files under the `src/_pytest` directory, possibly in files related to logging or configuration.",
            "search_requests": [
              {
                "query": "DEFAULT_LOG_FORMAT",
                "class_names": [
                  "ColoredLevelFormatter",
                  "LogCaptureFixture",
                  "LoggingPlugin"
                ],
                "code_snippet": "%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s",
                "file_pattern": "**/logging.py",
                "function_names": [
                  "format",
                  "pytest_addoption",
                  "catching_logs",
                  "pytest_runtest_teardown",
                  "pytest_runtestloop",
                  "emit",
                  "caplog",
                  "_setup_cli_logging",
                  "set_log_path",
                  "_log_cli_enabled"
                ]
              }
            ]
          },
          "output": null,
          "input_tokens": 3135,
          "output_tokens": 313,
          "retry_message": "\n\nUnfortunately, I didn\u2019t find any relevant results.",
          "completion_cost": 0.014100000000000001
        },
        {
          "action": {
            "complete": false,
            "scratch_pad": "Given that no relevant files were found even with specific search criteria, it's possible that the `DEFAULT_LOG_FORMAT` might be defined in a file that has not yet been included in our search or it might be using a different name. Expanding the search to include other files under the `src/_pytest` directory that might contain logging configurations or settings could yield better results. Additionally, broadening the search to include variations on the `DEFAULT_LOG_FORMAT` string might help.",
            "search_requests": [
              {
                "query": "logging format",
                "class_names": [],
                "code_snippet": "\"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"",
                "file_pattern": "**/src/_pytest/**/*.py",
                "function_names": []
              },
              {
                "query": "logging configuration",
                "class_names": [
                  "ColoredLevelFormatter",
                  "LogCaptureFixture",
                  "LoggingPlugin"
                ],
                "code_snippet": null,
                "file_pattern": "**/src/_pytest/**/*.py",
                "function_names": [
                  "format",
                  "pytest_addoption",
                  "catching_logs",
                  "pytest_runtest_teardown",
                  "pytest_runtestloop",
                  "emit",
                  "caplog",
                  "_setup_cli_logging",
                  "set_log_path",
                  "_log_cli_enabled"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 102,
                "span_id": "docstring",
                "file_path": "src/_pytest/logging.py"
              },
              {
                "rank": 0,
                "tokens": 65,
                "span_id": "LoggingPlugin._log_cli_enabled",
                "file_path": "src/_pytest/logging.py"
              },
              {
                "rank": 0,
                "tokens": 54,
                "span_id": "LoggingPlugin._runtest_for",
                "file_path": "src/_pytest/logging.py"
              },
              {
                "rank": 0,
                "tokens": 67,
                "span_id": "LoggingPlugin.pytest_collection",
                "file_path": "src/_pytest/logging.py"
              },
              {
                "rank": 1,
                "tokens": 268,
                "span_id": "LoggingPlugin._setup_cli_logging",
                "file_path": "src/_pytest/logging.py"
              },
              {
                "rank": 2,
                "tokens": 33,
                "span_id": "LoggingPlugin.pytest_runtest_teardown",
                "file_path": "src/_pytest/logging.py"
              },
              {
                "rank": 2,
                "tokens": 42,
                "span_id": "LoggingPlugin.pytest_runtest_logstart",
                "file_path": "src/_pytest/logging.py"
              },
              {
                "rank": 2,
                "tokens": 31,
                "span_id": "LoggingPlugin.pytest_runtest_setup",
                "file_path": "src/_pytest/logging.py"
              },
              {
                "rank": 2,
                "tokens": 30,
                "span_id": "LoggingPlugin.pytest_runtest_logfinish",
                "file_path": "src/_pytest/logging.py"
              },
              {
                "rank": 2,
                "tokens": 31,
                "span_id": "LoggingPlugin.pytest_runtest_call",
                "file_path": "src/_pytest/logging.py"
              },
              {
                "rank": 2,
                "tokens": 31,
                "span_id": "LoggingPlugin.pytest_runtest_logreport",
                "file_path": "src/_pytest/logging.py"
              },
              {
                "rank": 3,
                "tokens": 69,
                "span_id": "LoggingPlugin.pytest_runtestloop",
                "file_path": "src/_pytest/logging.py"
              },
              {
                "rank": 3,
                "tokens": 69,
                "span_id": "LoggingPlugin.pytest_sessionstart",
                "file_path": "src/_pytest/logging.py"
              },
              {
                "rank": 4,
                "tokens": 22,
                "span_id": "LoggingPlugin",
                "file_path": "src/_pytest/logging.py"
              }
            ],
            "search_requests": [
              {
                "query": "logging format",
                "class_names": [],
                "code_snippet": "\"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"",
                "file_pattern": "**/src/_pytest/**/*.py",
                "function_names": []
              },
              {
                "query": "logging configuration",
                "class_names": [
                  "ColoredLevelFormatter",
                  "LogCaptureFixture",
                  "LoggingPlugin"
                ],
                "code_snippet": null,
                "file_pattern": "**/src/_pytest/**/*.py",
                "function_names": [
                  "format",
                  "pytest_addoption",
                  "catching_logs",
                  "pytest_runtest_teardown",
                  "pytest_runtestloop",
                  "emit",
                  "caplog",
                  "_setup_cli_logging",
                  "set_log_path",
                  "_log_cli_enabled"
                ]
              }
            ]
          },
          "input_tokens": 3466,
          "output_tokens": 348,
          "retry_message": null,
          "completion_cost": 0.015618
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 102,
            "span_id": "docstring",
            "file_path": "src/_pytest/logging.py"
          },
          {
            "rank": 0,
            "tokens": 65,
            "span_id": "LoggingPlugin._log_cli_enabled",
            "file_path": "src/_pytest/logging.py"
          },
          {
            "rank": 0,
            "tokens": 54,
            "span_id": "LoggingPlugin._runtest_for",
            "file_path": "src/_pytest/logging.py"
          },
          {
            "rank": 0,
            "tokens": 67,
            "span_id": "LoggingPlugin.pytest_collection",
            "file_path": "src/_pytest/logging.py"
          },
          {
            "rank": 1,
            "tokens": 268,
            "span_id": "LoggingPlugin._setup_cli_logging",
            "file_path": "src/_pytest/logging.py"
          },
          {
            "rank": 2,
            "tokens": 33,
            "span_id": "LoggingPlugin.pytest_runtest_teardown",
            "file_path": "src/_pytest/logging.py"
          },
          {
            "rank": 2,
            "tokens": 42,
            "span_id": "LoggingPlugin.pytest_runtest_logstart",
            "file_path": "src/_pytest/logging.py"
          },
          {
            "rank": 2,
            "tokens": 31,
            "span_id": "LoggingPlugin.pytest_runtest_setup",
            "file_path": "src/_pytest/logging.py"
          },
          {
            "rank": 2,
            "tokens": 30,
            "span_id": "LoggingPlugin.pytest_runtest_logfinish",
            "file_path": "src/_pytest/logging.py"
          },
          {
            "rank": 2,
            "tokens": 31,
            "span_id": "LoggingPlugin.pytest_runtest_call",
            "file_path": "src/_pytest/logging.py"
          },
          {
            "rank": 2,
            "tokens": 31,
            "span_id": "LoggingPlugin.pytest_runtest_logreport",
            "file_path": "src/_pytest/logging.py"
          },
          {
            "rank": 3,
            "tokens": 69,
            "span_id": "LoggingPlugin.pytest_runtestloop",
            "file_path": "src/_pytest/logging.py"
          },
          {
            "rank": 3,
            "tokens": 69,
            "span_id": "LoggingPlugin.pytest_sessionstart",
            "file_path": "src/_pytest/logging.py"
          },
          {
            "rank": 4,
            "tokens": 22,
            "span_id": "LoggingPlugin",
            "file_path": "src/_pytest/logging.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves improving the default logging format by replacing the filename with the module name in the logging format. This will provide more context in the logs. The search results show several relevant code spans in the `_pytest/logging.py` file, including the definition of `DEFAULT_LOG_FORMAT`, the `ColoredLevelFormatter` class, and several functions and methods related to logging configuration and handling. The `DEFAULT_LOG_FORMAT` definition, being directly related to the logging format, is the most relevant span for addressing the issue. The other spans provide context on how the logging format is used and configured in the pytest framework, which could be useful for a complete understanding and potential implementation changes. Given this, the identified spans should be sufficient to address the reported issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "DEFAULT_LOG_FORMAT"
                ],
                "file_path": "src/_pytest/logging.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3642,
          "output_tokens": 228,
          "retry_message": null,
          "completion_cost": 0.014346000000000001
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": false,
            "scratch_pad": "Given that no relevant files were found even with specific search criteria, it's possible that the `DEFAULT_LOG_FORMAT` might be defined in a file that has not yet been included in our search or it might be using a different name. Expanding the search to include other files under the `src/_pytest` directory that might contain logging configurations or settings could yield better results. Additionally, broadening the search to include variations on the `DEFAULT_LOG_FORMAT` string might help.",
            "search_suggestions": "Expand search to include files in the `src/_pytest` directory for any logging configurations or settings. Also, look for variations of the `DEFAULT_LOG_FORMAT` string."
          },
          "output": {
            "message": "Expand search to include files in the `src/_pytest` directory for any logging configurations or settings. Also, look for variations of the `DEFAULT_LOG_FORMAT` string."
          },
          "input_tokens": 1222,
          "output_tokens": 174,
          "retry_message": null,
          "completion_cost": 0.006276
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Expand search to include files in the `src/_pytest` directory for any logging configurations or settings. Also, look for variations of the `DEFAULT_LOG_FORMAT` string.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "Since the existing search has not found the specific logging format definition, expanding the search to include all files within the `src/_pytest` directory could uncover where the logging configuration is managed. Also, examining variants of the `DEFAULT_LOG_FORMAT` string may reveal related patterns or comments that suggest where to find the logging format setup.",
            "search_requests": [
              {
                "query": "logging format DEFAULT_LOG_FORMAT",
                "class_names": [],
                "code_snippet": "%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s",
                "file_pattern": "**/src/_pytest/**/*.py",
                "function_names": []
              },
              {
                "query": "logging configuration",
                "class_names": [
                  "ColoredLevelFormatter",
                  "LogCaptureFixture",
                  "LoggingPlugin"
                ],
                "code_snippet": "%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s",
                "file_pattern": "**/src/_pytest/**/*.py",
                "function_names": [
                  "format",
                  "pytest_addoption",
                  "catching_logs",
                  "pytest_runtest_teardown",
                  "pytest_runtestloop",
                  "emit",
                  "caplog",
                  "_setup_cli_logging",
                  "set_log_path",
                  "_log_cli_enabled"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 102,
                "span_id": "docstring",
                "file_path": "src/_pytest/logging.py"
              }
            ],
            "search_requests": [
              {
                "query": "logging format DEFAULT_LOG_FORMAT",
                "class_names": [],
                "code_snippet": "%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s",
                "file_pattern": "**/src/_pytest/**/*.py",
                "function_names": []
              },
              {
                "query": "logging configuration",
                "class_names": [
                  "ColoredLevelFormatter",
                  "LogCaptureFixture",
                  "LoggingPlugin"
                ],
                "code_snippet": "%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s",
                "file_pattern": "**/src/_pytest/**/*.py",
                "function_names": [
                  "format",
                  "pytest_addoption",
                  "catching_logs",
                  "pytest_runtest_teardown",
                  "pytest_runtestloop",
                  "emit",
                  "caplog",
                  "_setup_cli_logging",
                  "set_log_path",
                  "_log_cli_enabled"
                ]
              }
            ]
          },
          "input_tokens": 3548,
          "output_tokens": 335,
          "retry_message": null,
          "completion_cost": 0.015669000000000002
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 102,
            "span_id": "docstring",
            "file_path": "src/_pytest/logging.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about improving the default logging format in the codebase. The current format is defined by DEFAULT_LOG_FORMAT which includes the filename, line number, log level, and message. The user suggests adding the module name (name) to the format. From the search results, there is a file 'src/_pytest/logging.py' which contains the definition of DEFAULT_LOG_FORMAT. This file is directly relevant to the issue as it contains the code that needs to be modified to include the module name in the logging format. Therefore, the code span containing DEFAULT_LOG_FORMAT is identified as relevant.",
            "identified_spans": [
              {
                "span_ids": [
                  "docstring"
                ],
                "file_path": "src/_pytest/logging.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 1579,
          "output_tokens": 194,
          "retry_message": null,
          "completion_cost": 0.007647
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context provided contains the definition of the DEFAULT_LOG_FORMAT string. The current format matches the description in the issue, and the file context includes the specific module where this format is defined. No further context is needed to address the issue since the relevant part of the code (the logging format definition) is provided.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 1549,
          "output_tokens": 104,
          "retry_message": null,
          "completion_cost": 0.006207
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "docstring",
            "file_path": "src/_pytest/logging.py",
            "scratch_pad": "The reported issue suggests that the current default logging format is missing the `name` (module name) which could be useful for debugging. Therefore, the proposed solution is to update the DEFAULT_LOG_FORMAT to include `%(name)s`.",
            "instructions": "Update the DEFAULT_LOG_FORMAT to include `%(name)s` before `%(filename)s`."
          },
          "output": {
            "span_id": "docstring",
            "end_line": 19,
            "file_path": "src/_pytest/logging.py",
            "start_line": 1,
            "instructions": "Update the DEFAULT_LOG_FORMAT to include `%(name)s` before `%(filename)s`."
          },
          "input_tokens": 2641,
          "output_tokens": 130,
          "retry_message": null,
          "completion_cost": 0.009873
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "docstring",
        "end_line": 19,
        "file_path": "src/_pytest/logging.py",
        "max_tokens": 1000,
        "start_line": 1,
        "temperature": 1.6,
        "instructions": "Update the DEFAULT_LOG_FORMAT to include `%(name)s` before `%(filename)s`.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\n\"\"\" Access and control log capturing. \"\"\"\nfrom __future__ import absolute_import\nfrom __future__ import division\nfrom __future__ import print_function\n\nimport logging\nimport re\nfrom contextlib import contextmanager\n\nimport py\nimport six\n\nimport pytest\nfrom _pytest.compat import dummy_context_manager\nfrom _pytest.config import create_terminal_writer\nfrom _pytest.pathlib import Path\n\nDEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\nDEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n</replace>"
          },
          "output": {
            "diff": "--- src/_pytest/logging.py\n+++ src/_pytest/logging.py\n@@ -15,7 +15,7 @@\n from _pytest.config import create_terminal_writer\n from _pytest.pathlib import Path\n \n-DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n DEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n \n \n",
            "message": "Applied the change to src/_pytest/logging.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 2441,
          "output_tokens": 152,
          "retry_message": null,
          "completion_cost": 0.009603
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- src/_pytest/logging.py\n+++ src/_pytest/logging.py\n@@ -15,7 +15,7 @@\n from _pytest.config import create_terminal_writer\n from _pytest.pathlib import Path\n \n-DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\n+DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"\n DEFAULT_LOG_DATE_FORMAT = \"%H:%M:%S\"\n \n \n",
        "model": "deepseek-coder",
        "message": "Applied the change to src/_pytest/logging.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue regarding the improvement of default logging format has been resolved by including the module name in the logging format string.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The change to include `%(name)s` in the DEFAULT_LOG_FORMAT has been successfully applied. The updated format includes the module name, which is beneficial for debugging. The change was necessary as per the reported issue and no further modifications are required in this file context.",
            "instructions": null
          },
          "output": {
            "message": "The issue regarding the improvement of default logging format has been resolved by including the module name in the logging format string."
          },
          "input_tokens": 2971,
          "output_tokens": 141,
          "retry_message": null,
          "completion_cost": 0.011028000000000001
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue regarding the improvement of default logging format has been resolved by including the module name in the logging format string.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Improve default logging format\nCurrently it is:\r\n\r\n> DEFAULT_LOG_FORMAT = \"%(filename)-25s %(lineno)4d %(levelname)-8s %(message)s\"\r\n\r\nI think `name` (module name) would be very useful here, instead of just the base filename.\r\n\r\n(It might also be good to have the relative path there (maybe at the end), but it is usually still very long (but e.g. `$VIRTUAL_ENV` could be substituted therein))\r\n\r\nCurrently it would look like this:\r\n```\r\nutils.py                   114 DEBUG    (0.000) SELECT \"app_url\".\"id\", \"app_url\".\"created\", \"app_url\".\"url\" FROM \"app_url\" WHERE \"app_url\".\"id\" = 2; args=(2,)\r\nmultipart.py               604 DEBUG    Calling on_field_start with no data\r\n```\r\n\r\n\r\nUsing `DEFAULT_LOG_FORMAT = \"%(levelname)-8s %(name)s:%(filename)s:%(lineno)d %(message)s\"` instead:\r\n\r\n```\r\nDEBUG    django.db.backends:utils.py:114 (0.000) SELECT \"app_url\".\"id\", \"app_url\".\"created\", \"app_url\".\"url\" FROM \"app_url\" WHERE \"app_url\".\"id\" = 2; args=(2,)\r\nDEBUG    multipart.multipart:multipart.py:604 Calling on_field_start with no data\r\n```\n"
}