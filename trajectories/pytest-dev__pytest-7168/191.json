{
  "info": {
    "duration": 204.80720400810242,
    "submission": "diff --git a/src/_pytest/_io/saferepr.py b/src/_pytest/_io/saferepr.py\nindex 23af4d0bb..45447747e 100644\n--- a/src/_pytest/_io/saferepr.py\n+++ b/src/_pytest/_io/saferepr.py\n@@ -48,7 +48,9 @@ class SafeRepr(reprlib.Repr):\n         except (KeyboardInterrupt, SystemExit):\n             raise\n         except BaseException as exc:\n-            s = _format_repr_exception(exc, x)\n+            s = \"<[{} raised in repr()] {} object at 0x{:x}>\".format(\n+                _try_repr_or_str(exc), x.__class__.__name__, id(x)\n+            )\n         return _ellipsize(s, self.maxsize)\n \n     def repr_instance(self, x: Any, level: int) -> str:\n",
    "total_cost": 0.27295200000000003,
    "instance_id": "pytest-dev__pytest-7168",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue seems to be related to an unhandled exception inside a custom method or within the __repr__ method of a class during pytest session. This is causing an INTERNALERROR. The traceback indicates that the error occurs within the pytest's _pytest.main, _pytest.runner, and _pytest._code modules, which are responsible for running tests and handling test failures. The minimal code provided involves a class with custom __getattribute__ and __repr__ methods, which raise exceptions. The search should focus on these methods as well as the pytest instances responsible for handling exceptions in these types of scenarios.",
            "search_requests": [
              {
                "query": "INTERNALERROR when exception in __repr__",
                "class_names": [
                  "SomeClass"
                ],
                "code_snippet": "raise",
                "file_pattern": "**/_pytest/**/*.py",
                "function_names": []
              }
            ]
          },
          "output": null,
          "input_tokens": 5980,
          "output_tokens": 222,
          "retry_message": "\n\nUnfortunately, I didn\u2019t find any relevant results.",
          "completion_cost": 0.02127
        },
        {
          "action": {
            "complete": false,
            "scratch_pad": "Given that no relevant results were found within the _pytest directory, it may be beneficial to broaden the search to include all Python files within the project to ensure that the issue isn't located outside the expected scope. Additionally, the error might be influenced by how pytest interacts with custom exceptions or the __repr__ method in user code. Thus, searching for the custom class definition 'SomeClass' and its interactions within the broader project context could yield useful insights.",
            "search_requests": [
              {
                "query": "INTERNALERROR when exception in __repr__",
                "class_names": [
                  "SomeClass"
                ],
                "code_snippet": "class SomeClass:",
                "file_pattern": "**/*.py",
                "function_names": []
              }
            ]
          },
          "output": null,
          "input_tokens": 6226,
          "output_tokens": 195,
          "retry_message": "\n\nUnfortunately, I didn\u2019t find any relevant results.",
          "completion_cost": 0.021603
        },
        {
          "action": {
            "complete": false,
            "scratch_pad": "Since the initial search and the broader search have not yielded any relevant results, it suggests that the issue might be deeply rooted in the pytest internals or the interaction between pytest and custom class implementations like 'SomeClass'. It could also be possible that the exception handling mechanisms are not properly set up to manage exceptions raised in __repr__ methods. Given this, the next search should focus more on the exception handling code path within the pytest codebase, looking for where it might fail to handle exceptions arising from __repr__.",
            "search_requests": [
              {
                "query": "exception handling __repr__",
                "class_names": [],
                "code_snippet": "raise",
                "file_pattern": "**/_pytest/**/*.py",
                "function_names": [
                  "_repr_failure_py",
                  "repr_failure",
                  "repr_excinfo",
                  "repr_traceback",
                  "repr_traceback_entry"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 3,
                "tokens": 63,
                "span_id": "Function.repr_failure",
                "file_path": "src/_pytest/python.py"
              },
              {
                "rank": 30,
                "tokens": 142,
                "span_id": "Collector.repr_failure",
                "file_path": "src/_pytest/nodes.py"
              }
            ],
            "search_requests": [
              {
                "query": "exception handling __repr__",
                "class_names": [],
                "code_snippet": "raise",
                "file_pattern": "**/_pytest/**/*.py",
                "function_names": [
                  "_repr_failure_py",
                  "repr_failure",
                  "repr_excinfo",
                  "repr_traceback",
                  "repr_traceback_entry"
                ]
              }
            ]
          },
          "input_tokens": 6439,
          "output_tokens": 241,
          "retry_message": null,
          "completion_cost": 0.022932
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 3,
            "tokens": 63,
            "span_id": "Function.repr_failure",
            "file_path": "src/_pytest/python.py"
          },
          {
            "rank": 30,
            "tokens": 142,
            "span_id": "Collector.repr_failure",
            "file_path": "src/_pytest/nodes.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves an INTERNALERROR when an exception occurs within the __repr__ method of a class. The traceback indicates that the error occurs within the pytest framework, specifically in the _repr_failure_py method. The search results include relevant files such as `src/_pytest/python.py` and `src/_pytest/nodes.py`, which contain methods like `repr_failure` and `_repr_failure_py` that handle test failures and their representations. These methods are directly related to the error handling mechanism in pytest, which is crucial for addressing the issue described. The `repr_failure` method in `src/_pytest/python.py` is particularly relevant as it is responsible for formatting the failure representation of a test function, which aligns with the reported issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "Function",
                  "Function.__init__",
                  "Function.repr_failure"
                ],
                "file_path": "src/_pytest/python.py"
              },
              {
                "span_ids": [
                  "imports",
                  "_splitnode",
                  "Collector",
                  "Collector.CollectError",
                  "Collector.repr_failure",
                  "FSCollector",
                  "FSCollector.__init__"
                ],
                "file_path": "src/_pytest/nodes.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 5354,
          "output_tokens": 327,
          "retry_message": null,
          "completion_cost": 0.020967
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The reported issue involves an `INTERNALERROR` when an exception is raised in the `__repr__` method of a class, causing a failure in pytest's exception handling during test execution. The provided file context includes parts of the pytest codebase, specifically focusing on functions and nodes related to test execution and failure representation. While the context provides a detailed look into how pytest handles function calls and failure reporting, it does not directly address the issue of handling exceptions raised in the `__repr__` method. There are no explicit mentions or handling strategies for exceptions in `__repr__` within the provided code snippets. Therefore, it appears that the relevant file context is not fully provided to address the specific issue.",
            "search_suggestions": "To fully address the issue, it's recommended to search for additional parts of the pytest codebase that deal specifically with exception handling during object representation. This could include examining the saferepr module or other parts of the code responsible for safely representing instances during error reporting."
          },
          "output": {
            "message": "To fully address the issue, it's recommended to search for additional parts of the pytest codebase that deal specifically with exception handling during object representation. This could include examining the saferepr module or other parts of the code responsible for safely representing instances during error reporting."
          },
          "input_tokens": 5659,
          "output_tokens": 236,
          "retry_message": null,
          "completion_cost": 0.020517
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "To fully address the issue, it's recommended to search for additional parts of the pytest codebase that deal specifically with exception handling during object representation. This could include examining the saferepr module or other parts of the code responsible for safely representing instances during error reporting.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "It's clear that the initial search focused on areas that manage exceptions and object representation. Given the nature of the issue, which involves exceptions during the representation of objects in a testing context, the search should be expanded to include more of the pytest internals that deal with exception handling and representation. This includes examining the `_repr_failure_py` function in the `nodes.py` module, which plays a key role in handling representation of failures. Additionally, the `saferepr` module should be scrutinized for any code paths that might potentially lead to the issue when handling the representation of objects during error reporting.",
            "search_requests": [
              {
                "query": "exception handling __repr__",
                "class_names": [],
                "code_snippet": "raise",
                "file_pattern": "**/_pytest/**/*.py",
                "function_names": [
                  "_repr_failure_py",
                  "repr_failure",
                  "repr_excinfo",
                  "repr_traceback",
                  "repr_traceback_entry"
                ]
              },
              {
                "query": "safe object representation",
                "class_names": [
                  "SafeRepr"
                ],
                "code_snippet": null,
                "file_pattern": "**/_pytest/_io/**/*.py",
                "function_names": [
                  "repr",
                  "repr_instance"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 3,
                "tokens": 63,
                "span_id": "Function.repr_failure",
                "file_path": "src/_pytest/python.py"
              },
              {
                "rank": 30,
                "tokens": 142,
                "span_id": "Collector.repr_failure",
                "file_path": "src/_pytest/nodes.py"
              },
              {
                "rank": 0,
                "tokens": 58,
                "span_id": "SafeRepr.repr_instance",
                "file_path": "src/_pytest/_io/saferepr.py"
              },
              {
                "rank": 0,
                "tokens": 55,
                "span_id": "SafeRepr.repr",
                "file_path": "src/_pytest/_io/saferepr.py"
              },
              {
                "rank": 0,
                "tokens": 37,
                "span_id": "SafeRepr",
                "file_path": "src/_pytest/_io/saferepr.py"
              }
            ],
            "search_requests": [
              {
                "query": "exception handling __repr__",
                "class_names": [],
                "code_snippet": "raise",
                "file_pattern": "**/_pytest/**/*.py",
                "function_names": [
                  "_repr_failure_py",
                  "repr_failure",
                  "repr_excinfo",
                  "repr_traceback",
                  "repr_traceback_entry"
                ]
              },
              {
                "query": "safe object representation",
                "class_names": [
                  "SafeRepr"
                ],
                "code_snippet": null,
                "file_pattern": "**/_pytest/_io/**/*.py",
                "function_names": [
                  "repr",
                  "repr_instance"
                ]
              }
            ]
          },
          "input_tokens": 8094,
          "output_tokens": 337,
          "retry_message": null,
          "completion_cost": 0.029337000000000002
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 3,
            "tokens": 63,
            "span_id": "Function.repr_failure",
            "file_path": "src/_pytest/python.py"
          },
          {
            "rank": 30,
            "tokens": 142,
            "span_id": "Collector.repr_failure",
            "file_path": "src/_pytest/nodes.py"
          },
          {
            "rank": 0,
            "tokens": 58,
            "span_id": "SafeRepr.repr_instance",
            "file_path": "src/_pytest/_io/saferepr.py"
          },
          {
            "rank": 0,
            "tokens": 55,
            "span_id": "SafeRepr.repr",
            "file_path": "src/_pytest/_io/saferepr.py"
          },
          {
            "rank": 0,
            "tokens": 37,
            "span_id": "SafeRepr",
            "file_path": "src/_pytest/_io/saferepr.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves an INTERNALERROR when an exception occurs in `__repr__`. The minimal code provided suggests that the issue arises from a custom `__repr__` method that raises an exception. The traceback indicates that the error occurs during the representation of an exception, specifically in a part of the pytest framework that handles test failure reporting. The relevant code spans identified so far include methods related to the representation of failure in `Function` and `Collector` classes, and the `_format_repr_exception` function in `saferepr.py`, which is part of the pytest's exception formatting process. The new search results confirm the focus on the exception handling and representation in `Function`, `Collector`, and the `saferepr.py` module, with specific attention to how exceptions are formatted and represented. These code spans are relevant to understanding and potentially addressing the issue, as they are directly involved in the processing of exceptions within pytest.",
            "identified_spans": [
              {
                "span_ids": [
                  "Function",
                  "Function.__init__",
                  "Function.repr_failure"
                ],
                "file_path": "src/_pytest/python.py"
              },
              {
                "span_ids": [
                  "Collector",
                  "Collector.CollectError",
                  "Collector.repr_failure",
                  "FSCollector",
                  "FSCollector.__init__"
                ],
                "file_path": "src/_pytest/nodes.py"
              },
              {
                "span_ids": [
                  "_format_repr_exception",
                  "SafeRepr",
                  "SafeRepr.__init__",
                  "SafeRepr.repr",
                  "SafeRepr.repr_instance"
                ],
                "file_path": "src/_pytest/_io/saferepr.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 7877,
          "output_tokens": 356,
          "retry_message": null,
          "completion_cost": 0.028971
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context provided is extensive and includes the `pytest` internals necessary to understand the issue regarding exceptions during object representation. The `src/_pytest/python.py` file contains the `Function` class with the `repr_failure` method, which is crucial for handling representation of failures. The `src/_pytest/nodes.py` file contains the `Node` class, which is involved in node management, including the `repr_failure` method in the `Collector` class. The `src/_pytest/_io/saferepr.py` file contains the `SafeRepr` class, which handles safe representations of objects, including exceptions. It is evident from the context that the necessary code for handling the exceptions and object representations during testing is included. Therefore, the provided file context appears to be relevant to the issue at hand.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 7163,
          "output_tokens": 211,
          "retry_message": null,
          "completion_cost": 0.024654000000000002
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "SafeRepr.repr",
            "file_path": "src/_pytest/_io/saferepr.py",
            "scratch_pad": "The issue arises because an exception is being raised within the `__repr__` method of a class, which leads to a chain of internal errors in the pytest framework. To address this, we should ensure that any attempt to represent an object safely in pytest handles exceptions within the `__repr__` method gracefully. We can achieve this by updating the `SafeRepr` class in `src/_pytest/_io/saferepr.py` to catch exceptions raised within `__repr__` and return a safe, generic representation instead.",
            "instructions": "Modify the `SafeRepr.repr` method in `src/_pytest/_io/saferepr.py` to catch any exceptions that occur during the call to `super().repr(x)` and return a safe string representation that includes the type of the object and its identity hash, similar to how exceptions are currently formatted in `_format_repr_exception`."
          },
          "output": {
            "span_id": "SafeRepr.repr",
            "end_line": 52,
            "file_path": "src/_pytest/_io/saferepr.py",
            "start_line": 45,
            "instructions": "Modify the `SafeRepr.repr` method in `src/_pytest/_io/saferepr.py` to catch any exceptions that occur during the call to `super().repr(x)` and return a safe string representation that includes the type of the object and its identity hash, similar to how exceptions are currently formatted in `_format_repr_exception`."
          },
          "input_tokens": 7991,
          "output_tokens": 249,
          "retry_message": null,
          "completion_cost": 0.027708
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "SafeRepr.repr",
        "end_line": 52,
        "file_path": "src/_pytest/_io/saferepr.py",
        "max_tokens": 1000,
        "start_line": 45,
        "temperature": 1.6,
        "instructions": "Modify the `SafeRepr.repr` method in `src/_pytest/_io/saferepr.py` to catch any exceptions that occur during the call to `super().repr(x)` and return a safe string representation that includes the type of the object and its identity hash, similar to how exceptions are currently formatted in `_format_repr_exception`.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\n    def repr(self, x: Any) -> str:\n        try:\n            s = super().repr(x)\n        except (KeyboardInterrupt, SystemExit):\n            raise\n        except BaseException as exc:\n            s = \"<[{} raised in repr()] {} object at 0x{:x}>\".format(\n                _try_repr_or_str(exc), x.__class__.__name__, id(x)\n            )\n        return _ellipsize(s, self.maxsize)\n</replace>"
          },
          "output": {
            "diff": "--- src/_pytest/_io/saferepr.py\n+++ src/_pytest/_io/saferepr.py\n@@ -48,7 +48,9 @@\n         except (KeyboardInterrupt, SystemExit):\n             raise\n         except BaseException as exc:\n-            s = _format_repr_exception(exc, x)\n+            s = \"<[{} raised in repr()] {} object at 0x{:x}>\".format(\n+                _try_repr_or_str(exc), x.__class__.__name__, id(x)\n+            )\n         return _ellipsize(s, self.maxsize)\n \n     def repr_instance(self, x: Any, level: int) -> str:\n",
            "message": "Applied the change to src/_pytest/_io/saferepr.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 8463,
          "output_tokens": 124,
          "retry_message": null,
          "completion_cost": 0.027249000000000002
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- src/_pytest/_io/saferepr.py\n+++ src/_pytest/_io/saferepr.py\n@@ -48,7 +48,9 @@\n         except (KeyboardInterrupt, SystemExit):\n             raise\n         except BaseException as exc:\n-            s = _format_repr_exception(exc, x)\n+            s = \"<[{} raised in repr()] {} object at 0x{:x}>\".format(\n+                _try_repr_or_str(exc), x.__class__.__name__, id(x)\n+            )\n         return _ellipsize(s, self.maxsize)\n \n     def repr_instance(self, x: Any, level: int) -> str:\n",
        "model": "deepseek-coder",
        "message": "Applied the change to src/_pytest/_io/saferepr.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The changes have been applied successfully and should address the issue reported. The `SafeRepr` class now handles exceptions within `__repr__` gracefully, ensuring a more robust error representation.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The changes applied to `SafeRepr.repr` seem appropriate in handling exceptions within the `__repr__` method. This should prevent the INTERNALERROR observed in the traceback. Confirming the changes and proceeding to finish the task.",
            "instructions": null
          },
          "output": {
            "message": "The changes have been applied successfully and should address the issue reported. The `SafeRepr` class now handles exceptions within `__repr__` gracefully, ensuring a more robust error representation."
          },
          "input_tokens": 8503,
          "output_tokens": 149,
          "retry_message": null,
          "completion_cost": 0.027744
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The changes have been applied successfully and should address the issue reported. The `SafeRepr` class now handles exceptions within `__repr__` gracefully, ensuring a more robust error representation.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "INTERNALERROR when exception in __repr__\nMinimal code to reproduce the issue: \r\n```python\r\nclass SomeClass:\r\n    def __getattribute__(self, attr):\r\n        raise\r\n    def __repr__(self):\r\n        raise\r\ndef test():\r\n    SomeClass().attr\r\n```\r\nSession traceback:\r\n```\r\n============================= test session starts ==============================\r\nplatform darwin -- Python 3.8.1, pytest-5.4.1, py-1.8.1, pluggy-0.13.1 -- /usr/local/opt/python@3.8/bin/python3.8\r\ncachedir: .pytest_cache\r\nrootdir: ******\r\nplugins: asyncio-0.10.0, mock-3.0.0, cov-2.8.1\r\ncollecting ... collected 1 item\r\n\r\ntest_pytest.py::test \r\nINTERNALERROR> Traceback (most recent call last):\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/main.py\", line 191, in wrap_session\r\nINTERNALERROR>     session.exitstatus = doit(config, session) or 0\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/main.py\", line 247, in _main\r\nINTERNALERROR>     config.hook.pytest_runtestloop(session=session)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/hooks.py\", line 286, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/manager.py\", line 93, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/manager.py\", line 84, in <lambda>\r\nINTERNALERROR>     self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 208, in _multicall\r\nINTERNALERROR>     return outcome.get_result()\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/main.py\", line 272, in pytest_runtestloop\r\nINTERNALERROR>     item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/hooks.py\", line 286, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/manager.py\", line 93, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/manager.py\", line 84, in <lambda>\r\nINTERNALERROR>     self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 208, in _multicall\r\nINTERNALERROR>     return outcome.get_result()\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/runner.py\", line 85, in pytest_runtest_protocol\r\nINTERNALERROR>     runtestprotocol(item, nextitem=nextitem)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/runner.py\", line 100, in runtestprotocol\r\nINTERNALERROR>     reports.append(call_and_report(item, \"call\", log))\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/runner.py\", line 188, in call_and_report\r\nINTERNALERROR>     report = hook.pytest_runtest_makereport(item=item, call=call)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/hooks.py\", line 286, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/manager.py\", line 93, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/manager.py\", line 84, in <lambda>\r\nINTERNALERROR>     self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 203, in _multicall\r\nINTERNALERROR>     gen.send(outcome)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/skipping.py\", line 129, in pytest_runtest_makereport\r\nINTERNALERROR>     rep = outcome.get_result()\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in pytest_runtest_makereport\r\nINTERNALERROR>     return TestReport.from_item_and_call(item, call)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/reports.py\", line 294, in from_item_and_call\r\nINTERNALERROR>     longrepr = item.repr_failure(excinfo)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/python.py\", line 1513, in repr_failure\r\nINTERNALERROR>     return self._repr_failure_py(excinfo, style=style)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/nodes.py\", line 355, in _repr_failure_py\r\nINTERNALERROR>     return excinfo.getrepr(\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_code/code.py\", line 634, in getrepr\r\nINTERNALERROR>     return fmt.repr_excinfo(self)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_code/code.py\", line 879, in repr_excinfo\r\nINTERNALERROR>     reprtraceback = self.repr_traceback(excinfo_)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_code/code.py\", line 823, in repr_traceback\r\nINTERNALERROR>     reprentry = self.repr_traceback_entry(entry, einfo)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_code/code.py\", line 784, in repr_traceback_entry\r\nINTERNALERROR>     reprargs = self.repr_args(entry) if not short else None\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_code/code.py\", line 693, in repr_args\r\nINTERNALERROR>     args.append((argname, saferepr(argvalue)))\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 82, in saferepr\r\nINTERNALERROR>     return SafeRepr(maxsize).repr(obj)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 51, in repr\r\nINTERNALERROR>     s = _format_repr_exception(exc, x)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 23, in _format_repr_exception\r\nINTERNALERROR>     exc_info, obj.__class__.__name__, id(obj)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 47, in repr\r\nINTERNALERROR>     s = super().repr(x)\r\nINTERNALERROR>   File \"/usr/local/Cellar/python@3.8/3.8.1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/reprlib.py\", line 52, in repr\r\nINTERNALERROR>     return self.repr1(x, self.maxlevel)\r\nINTERNALERROR>   File \"/usr/local/Cellar/python@3.8/3.8.1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/reprlib.py\", line 62, in repr1\r\nINTERNALERROR>     return self.repr_instance(x, level)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 60, in repr_instance\r\nINTERNALERROR>     s = _format_repr_exception(exc, x)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 23, in _format_repr_exception\r\nINTERNALERROR>     exc_info, obj.__class__.__name__, id(obj)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 56, in repr_instance\r\nINTERNALERROR>     s = repr(x)\r\nINTERNALERROR>   File \"/Users/stiflou/Documents/projets/apischema/tests/test_pytest.py\", line 6, in __repr__\r\nINTERNALERROR>     raise\r\nINTERNALERROR> RuntimeError: No active exception to reraise\r\n\r\n============================ no tests ran in 0.09s ============================\r\n```\n"
}