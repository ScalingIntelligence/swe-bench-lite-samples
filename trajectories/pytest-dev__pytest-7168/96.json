{
  "info": {
    "duration": 212.89485216140747,
    "submission": "",
    "total_cost": 0.18960600000000002,
    "instance_id": "pytest-dev__pytest-7168",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves an INTERNALERROR during a pytest session due to an exception in a class's __repr__ method. The traceback indicates that the error occurs when pytest attempts to represent an instance of a custom class with problematic __repr__ and __getattribute__ methods, where both raise exceptions. To resolve this, we need to identify the specific parts of the pytest codebase involved in handling these situations, such as the representation of failures or exceptions, focusing on the relevant core functionalities.",
            "search_requests": [
              {
                "query": "INTERNALERROR in __repr__",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pytest/**/*.py",
                "function_names": [
                  "repr_failure",
                  "_repr_failure_py",
                  "repr_excinfo"
                ]
              }
            ]
          },
          "output": null,
          "input_tokens": 5980,
          "output_tokens": 198,
          "retry_message": "\n\nUnfortunately, I didn\u2019t find any relevant results.",
          "completion_cost": 0.02091
        },
        {
          "action": {
            "complete": false,
            "scratch_pad": "Given that the initial search didn't yield relevant results, it suggests that the issue might not be directly linked to the representation of failures or exceptions as initially thought. Next, we should broaden our search to include parts of the codebase that handle exceptions more generally or that might interact with custom class methods during test execution. This includes not only reporting modules but also runtime handling within test items or configuration settings.",
            "search_requests": [
              {
                "query": "handling exceptions in custom class methods during test execution",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pytest/**/*.py",
                "function_names": [
                  "pytest_runtest_protocol",
                  "pytest_runtest_call",
                  "pytest_runtest_makereport",
                  "notify_exception"
                ]
              }
            ]
          },
          "output": null,
          "input_tokens": 6215,
          "output_tokens": 219,
          "retry_message": "\n\nUnfortunately, I didn\u2019t find any relevant results.",
          "completion_cost": 0.02193
        },
        {
          "action": {
            "complete": false,
            "scratch_pad": "Since broadening the search to include more general exception handling did not yield any results, the next step is to focus on the specific methods and patterns from the minimal code provided that reproduce the issue. This includes looking for similar patterns of raising exceptions within `__repr__` or `__getattribute__` methods in the test modules or in any module related to object representation or attribute access within the pytest framework.",
            "search_requests": [
              {
                "query": "methods raising exceptions in __repr__ or __getattribute__",
                "class_names": [],
                "code_snippet": "raise",
                "file_pattern": "**/pytest/**/*.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 24,
                "span_id": "docstring",
                "file_path": "src/pytest/__main__.py"
              },
              {
                "rank": 1,
                "tokens": 70,
                "span_id": "imports",
                "file_path": "src/pytest/collect.py"
              },
              {
                "rank": 1,
                "tokens": 7,
                "span_id": "FakeCollectModule",
                "file_path": "src/pytest/collect.py"
              },
              {
                "rank": 1,
                "tokens": 33,
                "span_id": "FakeCollectModule.__init__",
                "file_path": "src/pytest/collect.py"
              },
              {
                "rank": 1,
                "tokens": 15,
                "span_id": "FakeCollectModule.__dir__",
                "file_path": "src/pytest/collect.py"
              },
              {
                "rank": 1,
                "tokens": 44,
                "span_id": "FakeCollectModule.__getattr__",
                "file_path": "src/pytest/collect.py"
              },
              {
                "rank": 1,
                "tokens": 11,
                "span_id": "impl:3",
                "file_path": "src/pytest/collect.py"
              }
            ],
            "search_requests": [
              {
                "query": "methods raising exceptions in __repr__ or __getattribute__",
                "class_names": [],
                "code_snippet": "raise",
                "file_pattern": "**/pytest/**/*.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 6452,
          "output_tokens": 179,
          "retry_message": null,
          "completion_cost": 0.022041
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 24,
            "span_id": "docstring",
            "file_path": "src/pytest/__main__.py"
          },
          {
            "rank": 1,
            "tokens": 70,
            "span_id": "imports",
            "file_path": "src/pytest/collect.py"
          },
          {
            "rank": 1,
            "tokens": 7,
            "span_id": "FakeCollectModule",
            "file_path": "src/pytest/collect.py"
          },
          {
            "rank": 1,
            "tokens": 33,
            "span_id": "FakeCollectModule.__init__",
            "file_path": "src/pytest/collect.py"
          },
          {
            "rank": 1,
            "tokens": 15,
            "span_id": "FakeCollectModule.__dir__",
            "file_path": "src/pytest/collect.py"
          },
          {
            "rank": 1,
            "tokens": 44,
            "span_id": "FakeCollectModule.__getattr__",
            "file_path": "src/pytest/collect.py"
          },
          {
            "rank": 1,
            "tokens": 11,
            "span_id": "impl:3",
            "file_path": "src/pytest/collect.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves an INTERNALERROR when an exception occurs in the `__repr__` method of a class. This error occurs during the pytest session, specifically in the `_repr_failure_py` method. The provided search results do not directly reference the `__repr__` method or the `_repr_failure_py` method, nor do they mention the handling of exceptions within these methods. Therefore, based on the current search results, there are no relevant code spans identified that pertain to the reported issue. Further search or examination of other parts of the codebase might be necessary to find the relevant code that handles exceptions in the `__repr__` method during a pytest session.",
            "identified_spans": null
          },
          "output": {
            "message": "The search returned 7 results. But unfortunately, I didn\u2019t find any of the search results relevant to the query.\n\nThe reported issue involves an INTERNALERROR when an exception occurs in the `__repr__` method of a class. This error occurs during the pytest session, specifically in the `_repr_failure_py` method. The provided search results do not directly reference the `__repr__` method or the `_repr_failure_py` method, nor do they mention the handling of exceptions within these methods. Therefore, based on the current search results, there are no relevant code spans identified that pertain to the reported issue. Further search or examination of other parts of the codebase might be necessary to find the relevant code that handles exceptions in the `__repr__` method during a pytest session."
          },
          "input_tokens": 4282,
          "output_tokens": 168,
          "retry_message": null,
          "completion_cost": 0.015366
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "The search returned 7 results. But unfortunately, I didn\u2019t find any of the search results relevant to the query.\n\nThe reported issue involves an INTERNALERROR when an exception occurs in the `__repr__` method of a class. This error occurs during the pytest session, specifically in the `_repr_failure_py` method. The provided search results do not directly reference the `__repr__` method or the `_repr_failure_py` method, nor do they mention the handling of exceptions within these methods. Therefore, based on the current search results, there are no relevant code spans identified that pertain to the reported issue. Further search or examination of other parts of the codebase might be necessary to find the relevant code that handles exceptions in the `__repr__` method during a pytest session.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "Given that the initial search did not yield relevant results, it is crucial to broaden the search parameters to include not only the specific methods and patterns from the minimal code provided but also the broader context of exception handling and representation within the pytest framework. This includes examining various hooks and internal error handling mechanisms that might be involved when exceptions occur in the `__repr__` method during a pytest session.",
            "search_requests": [
              {
                "query": "exception handling in __repr__ during pytest session",
                "class_names": [],
                "code_snippet": "raise",
                "file_pattern": "**/pytest/**/*.py",
                "function_names": []
              },
              {
                "query": "internal error handling in pytest",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pytest/**/*.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 24,
                "span_id": "docstring",
                "file_path": "src/pytest/__main__.py"
              },
              {
                "rank": 1,
                "tokens": 613,
                "span_id": "docstring",
                "file_path": "src/pytest/__init__.py"
              },
              {
                "rank": 0,
                "tokens": 24,
                "span_id": "docstring",
                "file_path": "src/pytest/__main__.py"
              },
              {
                "rank": 1,
                "tokens": 613,
                "span_id": "docstring",
                "file_path": "src/pytest/__init__.py"
              }
            ],
            "search_requests": [
              {
                "query": "exception handling in __repr__ during pytest session",
                "class_names": [],
                "code_snippet": "raise",
                "file_pattern": "**/pytest/**/*.py",
                "function_names": []
              },
              {
                "query": "internal error handling in pytest",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pytest/**/*.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 6336,
          "output_tokens": 230,
          "retry_message": null,
          "completion_cost": 0.022458
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 24,
            "span_id": "docstring",
            "file_path": "src/pytest/__main__.py"
          },
          {
            "rank": 1,
            "tokens": 613,
            "span_id": "docstring",
            "file_path": "src/pytest/__init__.py"
          },
          {
            "rank": 0,
            "tokens": 24,
            "span_id": "docstring",
            "file_path": "src/pytest/__main__.py"
          },
          {
            "rank": 1,
            "tokens": 613,
            "span_id": "docstring",
            "file_path": "src/pytest/__init__.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves an `INTERNALERROR` when an exception occurs within the `__repr__` method of a class. The minimal code to reproduce the issue includes a class `SomeClass` with `__getattribute__` and `__repr__` methods that both raise exceptions. The traceback provided indicates that the error occurs during the pytest session, specifically when pytest tries to format the exception representation. The search results do not directly address the issue but contain initialization and configuration code related to pytest. However, none of the code spans in the search results directly handle exception representation or the `__repr__` method, which is central to the reported issue. Therefore, based on the provided search results, there isn't any relevant code identified that directly addresses the `INTERNALERROR` related to the `__repr__` method exception.",
            "identified_spans": null
          },
          "output": {
            "message": "The search returned 4 results. But unfortunately, I didn\u2019t find any of the search results relevant to the query.\n\nThe reported issue involves an `INTERNALERROR` when an exception occurs within the `__repr__` method of a class. The minimal code to reproduce the issue includes a class `SomeClass` with `__getattribute__` and `__repr__` methods that both raise exceptions. The traceback provided indicates that the error occurs during the pytest session, specifically when pytest tries to format the exception representation. The search results do not directly address the issue but contain initialization and configuration code related to pytest. However, none of the code spans in the search results directly handle exception representation or the `__repr__` method, which is central to the reported issue. Therefore, based on the provided search results, there isn't any relevant code identified that directly addresses the `INTERNALERROR` related to the `__repr__` method exception."
          },
          "input_tokens": 4717,
          "output_tokens": 194,
          "retry_message": null,
          "completion_cost": 0.017061
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "The search returned 4 results. But unfortunately, I didn\u2019t find any of the search results relevant to the query.\n\nThe reported issue involves an `INTERNALERROR` when an exception occurs within the `__repr__` method of a class. The minimal code to reproduce the issue includes a class `SomeClass` with `__getattribute__` and `__repr__` methods that both raise exceptions. The traceback provided indicates that the error occurs during the pytest session, specifically when pytest tries to format the exception representation. The search results do not directly address the issue but contain initialization and configuration code related to pytest. However, none of the code spans in the search results directly handle exception representation or the `__repr__` method, which is central to the reported issue. Therefore, based on the provided search results, there isn't any relevant code identified that directly addresses the `INTERNALERROR` related to the `__repr__` method exception.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "Since the previous searches did not yield relevant results, it is now essential to focus on the core functionality of pytest that involves handling exceptions in object representations and within the context of `__repr__` methods. This includes looking at the pytest internals responsible for formatting and representing exceptions, as well as the error handling within the pytest framework when such exceptions occur. Given the nature of the error and the location in the traceback, a strategic approach now involves examining sections of the codebase that directly interact with or manipulate exception information and object representations during a pytest session.",
            "search_requests": [
              {
                "query": "handling exceptions in object representation during pytest session",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "src/_pytest/_code/code.py",
                "function_names": [
                  "repr_excinfo",
                  "repr_traceback",
                  "repr_instance"
                ]
              },
              {
                "query": "handling exceptions during the pytest session",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "src/_pytest/runner.py",
                "function_names": [
                  "pytest_runtest_makereport",
                  "pytest_runtest_protocol"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 2,
                "tokens": 366,
                "span_id": "FormattedExcinfo.repr_excinfo",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 3,
                "tokens": 139,
                "span_id": "FormattedExcinfo.repr_traceback",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 0,
                "tokens": 63,
                "span_id": "pytest_runtest_protocol",
                "file_path": "src/_pytest/runner.py"
              },
              {
                "rank": 2,
                "tokens": 23,
                "span_id": "pytest_runtest_makereport",
                "file_path": "src/_pytest/runner.py"
              }
            ],
            "search_requests": [
              {
                "query": "handling exceptions in object representation during pytest session",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "src/_pytest/_code/code.py",
                "function_names": [
                  "repr_excinfo",
                  "repr_traceback",
                  "repr_instance"
                ]
              },
              {
                "query": "handling exceptions during the pytest session",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "src/_pytest/runner.py",
                "function_names": [
                  "pytest_runtest_makereport",
                  "pytest_runtest_protocol"
                ]
              }
            ]
          },
          "input_tokens": 6769,
          "output_tokens": 303,
          "retry_message": null,
          "completion_cost": 0.024852000000000003
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 2,
            "tokens": 366,
            "span_id": "FormattedExcinfo.repr_excinfo",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 3,
            "tokens": 139,
            "span_id": "FormattedExcinfo.repr_traceback",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 0,
            "tokens": 63,
            "span_id": "pytest_runtest_protocol",
            "file_path": "src/_pytest/runner.py"
          },
          {
            "rank": 2,
            "tokens": 23,
            "span_id": "pytest_runtest_makereport",
            "file_path": "src/_pytest/runner.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves an INTERNALERROR when an exception occurs in the __repr__ method of a class. The minimal code provided shows a class with both __getattribute__ and __repr__ raising an exception. The session traceback indicates that the error occurs during the creation of a TestReport from an item and call in the pytest framework. The search results include code related to handling exceptions in pytest, specifically the ExceptionInfo, FormattedExcinfo, and pytest_runtest_makereport sections which are relevant to the issue. The FormattedExcinfo section includes methods for representing tracebacks and exceptions which are directly involved in creating the TestReport. The pytest_runtest_makereport section is also relevant as it is responsible for creating the TestReport that fails due to the encountered exception. The identified spans cover the necessary parts of the pytest codebase to understand and potentially resolve the issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "ExceptionInfo",
                  "FormattedExcinfo",
                  "FormattedExcinfo.repr_traceback",
                  "FormattedExcinfo.repr_excinfo"
                ],
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "span_ids": [
                  "pytest_runtest_makereport"
                ],
                "file_path": "src/_pytest/runner.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 5837,
          "output_tokens": 330,
          "retry_message": null,
          "completion_cost": 0.022461
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The provided file context includes sections of pytest code that handle exception information and tracebacks, which are relevant to addressing the reported issue. The issue involves an `INTERNALERROR` when an exception occurs within the `__repr__` method of a class, and the traceback suggests that pytest's handling of this exception is where the error originates. The `ExceptionInfo` class in the file context deals with capturing and representing exceptions, including the `__repr__` method. The `FormattedExcinfo` class is responsible for formatting the exception information, which would be part of the solution to ensure that such errors do not cause an `INTERNALERROR` in pytest. Additionally, the `pytest_runtest_makereport` function in `runner.py` is involved in generating test reports, which could include handling the traceback for exceptions. Given these parts of the pytest codebase, it appears that all relevant parts to address the issue are present in the provided file context.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 6324,
          "output_tokens": 237,
          "retry_message": null,
          "completion_cost": 0.022527
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "saferepr",
            "file_path": "src/_pytest/_io/saferepr.py",
            "scratch_pad": "The issue arises when an exception is raised within the `__repr__` method of a class, causing an INTERNALERROR. The traceback indicates that the problem occurs during the representation of the exception, specifically in the `saferepr` function. To address this, we need to modify the `saferepr` function to handle exceptions gracefully when attempting to represent objects.",
            "instructions": "Update the `saferepr` function in `_pytest/_io/saferepr.py` to handle exceptions gracefully when calling `repr(obj)` on objects that raise exceptions within their `__repr__` method. This can be done by wrapping the `repr(obj)` call in a try-except block and returning a safe default representation if an exception is encountered."
          },
          "output": null,
          "input_tokens": 7004,
          "output_tokens": 215,
          "retry_message": "File src/_pytest/_io/saferepr.py is not found in the file context. You can only request changes to files that are in file context:\n * src/_pytest/_code/code.py\n * src/_pytest/runner.py\n",
          "completion_cost": 0.024236999999999998
        },
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": null,
            "file_path": "src/_pytest/_code/code.py",
            "scratch_pad": "Since the file src/_pytest/_io/saferepr.py is not available in the file context, we need to find an alternative approach within the provided files. The issue stems from handling exceptions within the `__repr__` method during the representation of objects. We can address this by enhancing the error handling within the `repr` function in src/_pytest/_code/code.py or any other relevant location within the provided context.",
            "instructions": "Update the handling of object representation in src/_pytest/_code/code.py to catch exceptions potentially raised by the `__repr__` method. Specifically, modify the code around object representation to include a try-except block that will catch exceptions and provide a safe fallback representation, ensuring that the internal error does not occur."
          },
          "output": null,
          "input_tokens": 7292,
          "output_tokens": 224,
          "retry_message": "You must either provide an apply_change action or finish.",
          "completion_cost": 0.025236
        },
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": null,
            "file_path": "src/_pytest/_code/code.py",
            "scratch_pad": "The issue requires careful handling of exceptions within the `__repr__` method. Since the specific file where this can be addressed directly is not provided in the context, and without a specific span to modify, the approach is limited. However, focusing on general exception handling in the provided files can be beneficial. Given the constraints, I recommend enhancing general exception handling within the methods that process object representations, potentially in `src/_pytest/_code/code.py`.",
            "instructions": "Enhance the exception handling in methods within `src/_pytest/_code/code.py` that are responsible for processing or representing objects. Specifically, add a try-except block around calls that might trigger the `__repr__` method of an object, capturing any exceptions and handling them gracefully to avoid internal errors."
          },
          "output": null,
          "input_tokens": 7535,
          "output_tokens": 227,
          "retry_message": "You must either provide an apply_change action or finish.",
          "completion_cost": 0.02601
        }
      ]
    }
  ],
  "initial_message": "INTERNALERROR when exception in __repr__\nMinimal code to reproduce the issue: \r\n```python\r\nclass SomeClass:\r\n    def __getattribute__(self, attr):\r\n        raise\r\n    def __repr__(self):\r\n        raise\r\ndef test():\r\n    SomeClass().attr\r\n```\r\nSession traceback:\r\n```\r\n============================= test session starts ==============================\r\nplatform darwin -- Python 3.8.1, pytest-5.4.1, py-1.8.1, pluggy-0.13.1 -- /usr/local/opt/python@3.8/bin/python3.8\r\ncachedir: .pytest_cache\r\nrootdir: ******\r\nplugins: asyncio-0.10.0, mock-3.0.0, cov-2.8.1\r\ncollecting ... collected 1 item\r\n\r\ntest_pytest.py::test \r\nINTERNALERROR> Traceback (most recent call last):\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/main.py\", line 191, in wrap_session\r\nINTERNALERROR>     session.exitstatus = doit(config, session) or 0\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/main.py\", line 247, in _main\r\nINTERNALERROR>     config.hook.pytest_runtestloop(session=session)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/hooks.py\", line 286, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/manager.py\", line 93, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/manager.py\", line 84, in <lambda>\r\nINTERNALERROR>     self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 208, in _multicall\r\nINTERNALERROR>     return outcome.get_result()\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/main.py\", line 272, in pytest_runtestloop\r\nINTERNALERROR>     item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/hooks.py\", line 286, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/manager.py\", line 93, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/manager.py\", line 84, in <lambda>\r\nINTERNALERROR>     self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 208, in _multicall\r\nINTERNALERROR>     return outcome.get_result()\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/runner.py\", line 85, in pytest_runtest_protocol\r\nINTERNALERROR>     runtestprotocol(item, nextitem=nextitem)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/runner.py\", line 100, in runtestprotocol\r\nINTERNALERROR>     reports.append(call_and_report(item, \"call\", log))\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/runner.py\", line 188, in call_and_report\r\nINTERNALERROR>     report = hook.pytest_runtest_makereport(item=item, call=call)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/hooks.py\", line 286, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/manager.py\", line 93, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/manager.py\", line 84, in <lambda>\r\nINTERNALERROR>     self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 203, in _multicall\r\nINTERNALERROR>     gen.send(outcome)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/skipping.py\", line 129, in pytest_runtest_makereport\r\nINTERNALERROR>     rep = outcome.get_result()\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in pytest_runtest_makereport\r\nINTERNALERROR>     return TestReport.from_item_and_call(item, call)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/reports.py\", line 294, in from_item_and_call\r\nINTERNALERROR>     longrepr = item.repr_failure(excinfo)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/python.py\", line 1513, in repr_failure\r\nINTERNALERROR>     return self._repr_failure_py(excinfo, style=style)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/nodes.py\", line 355, in _repr_failure_py\r\nINTERNALERROR>     return excinfo.getrepr(\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_code/code.py\", line 634, in getrepr\r\nINTERNALERROR>     return fmt.repr_excinfo(self)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_code/code.py\", line 879, in repr_excinfo\r\nINTERNALERROR>     reprtraceback = self.repr_traceback(excinfo_)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_code/code.py\", line 823, in repr_traceback\r\nINTERNALERROR>     reprentry = self.repr_traceback_entry(entry, einfo)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_code/code.py\", line 784, in repr_traceback_entry\r\nINTERNALERROR>     reprargs = self.repr_args(entry) if not short else None\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_code/code.py\", line 693, in repr_args\r\nINTERNALERROR>     args.append((argname, saferepr(argvalue)))\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 82, in saferepr\r\nINTERNALERROR>     return SafeRepr(maxsize).repr(obj)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 51, in repr\r\nINTERNALERROR>     s = _format_repr_exception(exc, x)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 23, in _format_repr_exception\r\nINTERNALERROR>     exc_info, obj.__class__.__name__, id(obj)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 47, in repr\r\nINTERNALERROR>     s = super().repr(x)\r\nINTERNALERROR>   File \"/usr/local/Cellar/python@3.8/3.8.1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/reprlib.py\", line 52, in repr\r\nINTERNALERROR>     return self.repr1(x, self.maxlevel)\r\nINTERNALERROR>   File \"/usr/local/Cellar/python@3.8/3.8.1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/reprlib.py\", line 62, in repr1\r\nINTERNALERROR>     return self.repr_instance(x, level)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 60, in repr_instance\r\nINTERNALERROR>     s = _format_repr_exception(exc, x)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 23, in _format_repr_exception\r\nINTERNALERROR>     exc_info, obj.__class__.__name__, id(obj)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 56, in repr_instance\r\nINTERNALERROR>     s = repr(x)\r\nINTERNALERROR>   File \"/Users/stiflou/Documents/projets/apischema/tests/test_pytest.py\", line 6, in __repr__\r\nINTERNALERROR>     raise\r\nINTERNALERROR> RuntimeError: No active exception to reraise\r\n\r\n============================ no tests ran in 0.09s ============================\r\n```\n"
}