{
  "info": {
    "duration": 136.52045488357544,
    "submission": "diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py\nindex 02efc7172..90875f65f 100644\n--- a/src/_pytest/_code/code.py\n+++ b/src/_pytest/_code/code.py\n@@ -623,16 +623,27 @@ class ExceptionInfo(Generic[_E]):\n                 self._getreprcrash(),\n             )\n \n-        fmt = FormattedExcinfo(\n-            showlocals=showlocals,\n-            style=style,\n-            abspath=abspath,\n-            tbfilter=tbfilter,\n-            funcargs=funcargs,\n-            truncate_locals=truncate_locals,\n-            chain=chain,\n-        )\n-        return fmt.repr_excinfo(self)\n+        try:\n+            fmt = FormattedExcinfo(\n+                showlocals=showlocals,\n+                style=style,\n+                abspath=abspath,\n+                tbfilter=tbfilter,\n+                funcargs=funcargs,\n+                truncate_locals=truncate_locals,\n+                chain=chain,\n+            )\n+            return fmt.repr_excinfo(self)\n+        except Exception as e:\n+            # Handle exceptions that occur during the repr generation\n+            return ReprExceptionInfo(\n+                ReprTracebackNative(\n+                    traceback.format_exception(\n+                        type(e), e, e.__traceback__\n+                    )\n+                ),\n+                self._getreprcrash(),\n+            )\n \n     def match(self, regexp: \"Union[str, Pattern]\") -> \"Literal[True]\":\n         \"\"\"\n",
    "total_cost": 0.19714199999999998,
    "instance_id": "pytest-dev__pytest-7168",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves an INTERNALERROR when an exception occurs in the `__repr__` method of a class. The traceback indicates that the error is occurring during the pytest_runtest_makereport hook, specifically in the TestReport.from_item_and_call method. This suggests that the problem lies in how pytest handles exceptions during test reporting. The search should focus on the pytest internals related to handling exceptions and generating test reports.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "TestReport",
                  "FormattedExcinfo",
                  "ExceptionChainRepr",
                  "ReprExceptionInfo"
                ],
                "code_snippet": null,
                "file_pattern": "**/src/_pytest/**/*.py",
                "function_names": [
                  "pytest_runtest_makereport",
                  "repr_excinfo",
                  "repr_failure",
                  "repr_traceback_entry",
                  "from_item_and_call"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 366,
                "span_id": "FormattedExcinfo.repr_excinfo",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 0,
                "tokens": 274,
                "span_id": "FormattedExcinfo.repr_traceback_entry",
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "rank": 1,
                "tokens": 272,
                "span_id": "TestReport.from_item_and_call",
                "file_path": "src/_pytest/reports.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "TestReport",
                  "FormattedExcinfo",
                  "ExceptionChainRepr",
                  "ReprExceptionInfo"
                ],
                "code_snippet": null,
                "file_pattern": "**/src/_pytest/**/*.py",
                "function_names": [
                  "pytest_runtest_makereport",
                  "repr_excinfo",
                  "repr_failure",
                  "repr_traceback_entry",
                  "from_item_and_call"
                ]
              }
            ]
          },
          "input_tokens": 5980,
          "output_tokens": 221,
          "retry_message": null,
          "completion_cost": 0.021255000000000003
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 366,
            "span_id": "FormattedExcinfo.repr_excinfo",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 0,
            "tokens": 274,
            "span_id": "FormattedExcinfo.repr_traceback_entry",
            "file_path": "src/_pytest/_code/code.py"
          },
          {
            "rank": 1,
            "tokens": 272,
            "span_id": "TestReport.from_item_and_call",
            "file_path": "src/_pytest/reports.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about an INTERNALERROR occurring when an exception is raised in the __repr__ method of a class. The traceback indicates that the error originates from the _pytest module, specifically in the `repr_excinfo` method of the `FormattedExcinfo` class in `src/_pytest/_code/code.py`. This method is responsible for formatting exception information, which involves handling tracebacks and exceptions. The traceback also mentions the `repr_traceback_entry` method within the same class, indicating that it is involved in processing individual traceback entries. Additionally, the `TestReport` class in `src/_pytest/reports.py` is identified, which is used to report test outcomes and might be where the formatted exception information is used or processed further. Based on the traceback and the issue description, the relevant code spans are identified in the `FormattedExcinfo` class within `src/_pytest/_code/code.py` and the `TestReport` class within `src/_pytest/reports.py`.",
            "identified_spans": [
              {
                "span_ids": [
                  "FormattedExcinfo",
                  "FormattedExcinfo.repr_traceback_entry",
                  "FormattedExcinfo.repr_excinfo"
                ],
                "file_path": "src/_pytest/_code/code.py"
              },
              {
                "span_ids": [
                  "TestReport",
                  "TestReport.__init__",
                  "TestReport.from_item_and_call"
                ],
                "file_path": "src/_pytest/reports.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 6617,
          "output_tokens": 377,
          "retry_message": null,
          "completion_cost": 0.025506
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The reported issue involves an INTERNALERROR when an exception occurs in the `__repr__` method of a class. The traceback indicates that the error is occurring during the pytest_runtest_makereport hook, specifically in the TestReport.from_item_and_call method. This suggests that the problem lies in how pytest handles exceptions during test reporting. The provided file context includes relevant code from `_pytest._code.code` and `_pytest.reports`, which handle exception information and test reporting respectively. Specifically, the `ExceptionInfo` class and its methods like `getrepr` and `repr_excinfo` are relevant, as well as the `TestReport.from_item_and_call` method which constructs the `TestReport` object. These sections of code are directly involved in handling exceptions and generating test reports, making them relevant to the reported issue. Given this, all relevant code needed to identify the issue and potential fixes seems to be provided in the file context.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 7898,
          "output_tokens": 244,
          "retry_message": null,
          "completion_cost": 0.027354
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "saferepr",
            "file_path": "src/_pytest/_io/saferepr.py",
            "scratch_pad": "The issue arises when an exception occurs during the `__repr__` method, leading to an INTERNALERROR in pytest. This can be mitigated by handling exceptions that occur during the `repr` call in the `saferepr` function.",
            "instructions": "Modify the `saferepr` function in `src/_pytest/_io/saferepr.py` to handle exceptions that occur during the `repr` call, ensuring that a fallback representation is used instead of propagating the exception."
          },
          "output": null,
          "input_tokens": 8482,
          "output_tokens": 158,
          "retry_message": "File src/_pytest/_io/saferepr.py is not found in the file context. You can only request changes to files that are in file context:\n * src/_pytest/_code/code.py\n * src/_pytest/reports.py\n",
          "completion_cost": 0.027816
        },
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "ExceptionInfo.getrepr",
            "file_path": "src/_pytest/_code/code.py",
            "scratch_pad": "The issue requires handling exceptions that occur during the `__repr__` method, which might trigger an INTERNALERROR in pytest. Since the `saferepr` function is not part of the provided context, I need to find an alternative solution within the files provided.",
            "instructions": "Modify the `ExceptionInfo.getrepr` method in `src/_pytest/_code/code.py` to ensure that when constructing the `ReprExceptionInfo`, it handles potentially problematic `__repr__` calls within the traceback formatting."
          },
          "output": {
            "span_id": "ExceptionInfo.getrepr",
            "end_line": 635,
            "file_path": "src/_pytest/_code/code.py",
            "start_line": 578,
            "instructions": "Modify the `ExceptionInfo.getrepr` method in `src/_pytest/_code/code.py` to ensure that when constructing the `ReprExceptionInfo`, it handles potentially problematic `__repr__` calls within the traceback formatting."
          },
          "input_tokens": 8713,
          "output_tokens": 179,
          "retry_message": null,
          "completion_cost": 0.028824
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "ExceptionInfo.getrepr",
        "end_line": 635,
        "file_path": "src/_pytest/_code/code.py",
        "max_tokens": 1000,
        "start_line": 578,
        "temperature": 1.6,
        "instructions": "Modify the `ExceptionInfo.getrepr` method in `src/_pytest/_code/code.py` to ensure that when constructing the `ReprExceptionInfo`, it handles potentially problematic `__repr__` calls within the traceback formatting.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```python\n<replace>\n    def getrepr(\n        self,\n        showlocals: bool = False,\n        style: \"_TracebackStyle\" = \"long\",\n        abspath: bool = False,\n        tbfilter: bool = True,\n        funcargs: bool = False,\n        truncate_locals: bool = True,\n        chain: bool = True,\n    ) -> Union[\"ReprExceptionInfo\", \"ExceptionChainRepr\"]:\n        \"\"\"\n        Return str()able representation of this exception info.\n\n        :param bool showlocals:\n            Show locals per traceback entry.\n            Ignored if ``style==\"native\"``.\n\n        :param str style: long|short|no|native traceback style\n\n        :param bool abspath:\n            If paths should be changed to absolute or left unchanged.\n\n        :param bool tbfilter:\n            Hide entries that contain a local variable ``__tracebackhide__==True``.\n            Ignored if ``style==\"native\"``.\n\n        :param bool funcargs:\n            Show fixtures (\"funcargs\" for legacy purposes) per traceback entry.\n\n        :param bool truncate_locals:\n            With ``showlocals==True``, make sure locals can be safely represented as strings.\n\n        :param bool chain: if chained exceptions in Python 3 should be shown.\n\n        .. versionchanged:: 3.9\n\n            Added the ``chain`` parameter.\n        \"\"\"\n        if style == \"native\":\n            return ReprExceptionInfo(\n                ReprTracebackNative(\n                    traceback.format_exception(\n                        self.type, self.value, self.traceback[0]._rawentry\n                    )\n                ),\n                self._getreprcrash(),\n            )\n\n        try:\n            fmt = FormattedExcinfo(\n                showlocals=showlocals,\n                style=style,\n                abspath=abspath,\n                tbfilter=tbfilter,\n                funcargs=funcargs,\n                truncate_locals=truncate_locals,\n                chain=chain,\n            )\n            return fmt.repr_excinfo(self)\n        except Exception as e:\n            # Handle exceptions that occur during the repr generation\n            return ReprExceptionInfo(\n                ReprTracebackNative(\n                    traceback.format_exception(\n                        type(e), e, e.__traceback__\n                    )\n                ),\n                self._getreprcrash(),\n            )\n</replace>"
          },
          "output": {
            "diff": "--- src/_pytest/_code/code.py\n+++ src/_pytest/_code/code.py\n@@ -623,16 +623,27 @@\n                 self._getreprcrash(),\n             )\n \n-        fmt = FormattedExcinfo(\n-            showlocals=showlocals,\n-            style=style,\n-            abspath=abspath,\n-            tbfilter=tbfilter,\n-            funcargs=funcargs,\n-            truncate_locals=truncate_locals,\n-            chain=chain,\n-        )\n-        return fmt.repr_excinfo(self)\n+        try:\n+            fmt = FormattedExcinfo(\n+                showlocals=showlocals,\n+                style=style,\n+                abspath=abspath,\n+                tbfilter=tbfilter,\n+                funcargs=funcargs,\n+                truncate_locals=truncate_locals,\n+                chain=chain,\n+            )\n+            return fmt.repr_excinfo(self)\n+        except Exception as e:\n+            # Handle exceptions that occur during the repr generation\n+            return ReprExceptionInfo(\n+                ReprTracebackNative(\n+                    traceback.format_exception(\n+                        type(e), e, e.__traceback__\n+                    )\n+                ),\n+                self._getreprcrash(),\n+            )\n \n     def match(self, regexp: \"Union[str, Pattern]\") -> \"Literal[True]\":\n         \"\"\"\n",
            "message": "Applied the change to src/_pytest/_code/code.py.\n\n<scratch_pad>\n```python\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 9348,
          "output_tokens": 555,
          "retry_message": null,
          "completion_cost": 0.036369
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- src/_pytest/_code/code.py\n+++ src/_pytest/_code/code.py\n@@ -623,16 +623,27 @@\n                 self._getreprcrash(),\n             )\n \n-        fmt = FormattedExcinfo(\n-            showlocals=showlocals,\n-            style=style,\n-            abspath=abspath,\n-            tbfilter=tbfilter,\n-            funcargs=funcargs,\n-            truncate_locals=truncate_locals,\n-            chain=chain,\n-        )\n-        return fmt.repr_excinfo(self)\n+        try:\n+            fmt = FormattedExcinfo(\n+                showlocals=showlocals,\n+                style=style,\n+                abspath=abspath,\n+                tbfilter=tbfilter,\n+                funcargs=funcargs,\n+                truncate_locals=truncate_locals,\n+                chain=chain,\n+            )\n+            return fmt.repr_excinfo(self)\n+        except Exception as e:\n+            # Handle exceptions that occur during the repr generation\n+            return ReprExceptionInfo(\n+                ReprTracebackNative(\n+                    traceback.format_exception(\n+                        type(e), e, e.__traceback__\n+                    )\n+                ),\n+                self._getreprcrash(),\n+            )\n \n     def match(self, regexp: \"Union[str, Pattern]\") -> \"Literal[True]\":\n         \"\"\"\n",
        "model": "deepseek-coder",
        "message": "Applied the change to src/_pytest/_code/code.py.\n\n<scratch_pad>\n```python\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The changes have been implemented to handle exceptions that occur during the `repr` generation. This should resolve the INTERNALERROR issue observed when an exception is raised within the `__repr__` method.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The applied change ensures that any exceptions raised during the `repr` generation are handled gracefully. Now, if an exception occurs within the `FormattedExcinfo.repr_excinfo` method, a `ReprExceptionInfo` instance is returned that includes a `ReprTracebackNative` with the formatted exception traceback, effectively preventing the INTERNALERROR.",
            "instructions": null
          },
          "output": {
            "message": "The changes have been implemented to handle exceptions that occur during the `repr` generation. This should resolve the INTERNALERROR issue observed when an exception is raised within the `__repr__` method."
          },
          "input_tokens": 9136,
          "output_tokens": 174,
          "retry_message": null,
          "completion_cost": 0.030018000000000003
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The changes have been implemented to handle exceptions that occur during the `repr` generation. This should resolve the INTERNALERROR issue observed when an exception is raised within the `__repr__` method.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "INTERNALERROR when exception in __repr__\nMinimal code to reproduce the issue: \r\n```python\r\nclass SomeClass:\r\n    def __getattribute__(self, attr):\r\n        raise\r\n    def __repr__(self):\r\n        raise\r\ndef test():\r\n    SomeClass().attr\r\n```\r\nSession traceback:\r\n```\r\n============================= test session starts ==============================\r\nplatform darwin -- Python 3.8.1, pytest-5.4.1, py-1.8.1, pluggy-0.13.1 -- /usr/local/opt/python@3.8/bin/python3.8\r\ncachedir: .pytest_cache\r\nrootdir: ******\r\nplugins: asyncio-0.10.0, mock-3.0.0, cov-2.8.1\r\ncollecting ... collected 1 item\r\n\r\ntest_pytest.py::test \r\nINTERNALERROR> Traceback (most recent call last):\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/main.py\", line 191, in wrap_session\r\nINTERNALERROR>     session.exitstatus = doit(config, session) or 0\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/main.py\", line 247, in _main\r\nINTERNALERROR>     config.hook.pytest_runtestloop(session=session)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/hooks.py\", line 286, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/manager.py\", line 93, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/manager.py\", line 84, in <lambda>\r\nINTERNALERROR>     self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 208, in _multicall\r\nINTERNALERROR>     return outcome.get_result()\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/main.py\", line 272, in pytest_runtestloop\r\nINTERNALERROR>     item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/hooks.py\", line 286, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/manager.py\", line 93, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/manager.py\", line 84, in <lambda>\r\nINTERNALERROR>     self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 208, in _multicall\r\nINTERNALERROR>     return outcome.get_result()\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/runner.py\", line 85, in pytest_runtest_protocol\r\nINTERNALERROR>     runtestprotocol(item, nextitem=nextitem)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/runner.py\", line 100, in runtestprotocol\r\nINTERNALERROR>     reports.append(call_and_report(item, \"call\", log))\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/runner.py\", line 188, in call_and_report\r\nINTERNALERROR>     report = hook.pytest_runtest_makereport(item=item, call=call)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/hooks.py\", line 286, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/manager.py\", line 93, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/manager.py\", line 84, in <lambda>\r\nINTERNALERROR>     self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 203, in _multicall\r\nINTERNALERROR>     gen.send(outcome)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/skipping.py\", line 129, in pytest_runtest_makereport\r\nINTERNALERROR>     rep = outcome.get_result()\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in pytest_runtest_makereport\r\nINTERNALERROR>     return TestReport.from_item_and_call(item, call)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/reports.py\", line 294, in from_item_and_call\r\nINTERNALERROR>     longrepr = item.repr_failure(excinfo)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/python.py\", line 1513, in repr_failure\r\nINTERNALERROR>     return self._repr_failure_py(excinfo, style=style)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/nodes.py\", line 355, in _repr_failure_py\r\nINTERNALERROR>     return excinfo.getrepr(\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_code/code.py\", line 634, in getrepr\r\nINTERNALERROR>     return fmt.repr_excinfo(self)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_code/code.py\", line 879, in repr_excinfo\r\nINTERNALERROR>     reprtraceback = self.repr_traceback(excinfo_)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_code/code.py\", line 823, in repr_traceback\r\nINTERNALERROR>     reprentry = self.repr_traceback_entry(entry, einfo)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_code/code.py\", line 784, in repr_traceback_entry\r\nINTERNALERROR>     reprargs = self.repr_args(entry) if not short else None\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_code/code.py\", line 693, in repr_args\r\nINTERNALERROR>     args.append((argname, saferepr(argvalue)))\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 82, in saferepr\r\nINTERNALERROR>     return SafeRepr(maxsize).repr(obj)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 51, in repr\r\nINTERNALERROR>     s = _format_repr_exception(exc, x)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 23, in _format_repr_exception\r\nINTERNALERROR>     exc_info, obj.__class__.__name__, id(obj)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 47, in repr\r\nINTERNALERROR>     s = super().repr(x)\r\nINTERNALERROR>   File \"/usr/local/Cellar/python@3.8/3.8.1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/reprlib.py\", line 52, in repr\r\nINTERNALERROR>     return self.repr1(x, self.maxlevel)\r\nINTERNALERROR>   File \"/usr/local/Cellar/python@3.8/3.8.1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/reprlib.py\", line 62, in repr1\r\nINTERNALERROR>     return self.repr_instance(x, level)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 60, in repr_instance\r\nINTERNALERROR>     s = _format_repr_exception(exc, x)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 23, in _format_repr_exception\r\nINTERNALERROR>     exc_info, obj.__class__.__name__, id(obj)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 56, in repr_instance\r\nINTERNALERROR>     s = repr(x)\r\nINTERNALERROR>   File \"/Users/stiflou/Documents/projets/apischema/tests/test_pytest.py\", line 6, in __repr__\r\nINTERNALERROR>     raise\r\nINTERNALERROR> RuntimeError: No active exception to reraise\r\n\r\n============================ no tests ran in 0.09s ============================\r\n```\n"
}