{
  "info": {
    "duration": 100.00065803527832,
    "submission": "diff --git a/src/_pytest/_io/saferepr.py b/src/_pytest/_io/saferepr.py\nindex 23af4d0bb..2ad470c42 100644\n--- a/src/_pytest/_io/saferepr.py\n+++ b/src/_pytest/_io/saferepr.py\n@@ -6,8 +6,6 @@ from typing import Any\n def _try_repr_or_str(obj):\n     try:\n         return repr(obj)\n-    except (KeyboardInterrupt, SystemExit):\n-        raise\n     except BaseException:\n         return '{}(\"{}\")'.format(type(obj).__name__, obj)\n \n",
    "total_cost": 0.131031,
    "instance_id": "pytest-dev__pytest-7168",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The error indicates that an exception is raised within the `__repr__` method of the `SomeClass`. This exception is causing the pytest framework to fail when trying to represent the object during the test report generation. To resolve this, I need to find where the `__repr__` method is being called and how the `SomeClass` is being used in the pytest framework. The traceback indicates the error occurs in `src/_pytest/_io/saferepr.py`, `src/_pytest/reports.py`, `src/_pytest/nodes.py`, and `src/_pytest/runner.py`. I'll focus on these files to locate the problematic code.",
            "search_requests": [
              {
                "query": "raise",
                "class_names": [],
                "code_snippet": "def repr_instance(self, x: Any, level: int) -> str:",
                "file_pattern": "src/_pytest/_io/saferepr.py",
                "function_names": []
              },
              {
                "query": "repr_failure",
                "class_names": [],
                "code_snippet": "def from_item_and_call(item, call):",
                "file_pattern": "src/_pytest/reports.py",
                "function_names": []
              },
              {
                "query": "repr_failure",
                "class_names": [],
                "code_snippet": "def repr_failure(self, excinfo, style=None):",
                "file_pattern": "src/_pytest/nodes.py",
                "function_names": []
              },
              {
                "query": "pytest_runtest_makereport",
                "class_names": [],
                "code_snippet": "def pytest_runtest_makereport(item, call):",
                "file_pattern": "src/_pytest/runner.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 58,
                "span_id": "SafeRepr.repr_instance",
                "file_path": "src/_pytest/_io/saferepr.py"
              },
              {
                "rank": 0,
                "tokens": 55,
                "span_id": "SafeRepr.repr",
                "file_path": "src/_pytest/_io/saferepr.py"
              },
              {
                "rank": 0,
                "tokens": 37,
                "span_id": "SafeRepr",
                "file_path": "src/_pytest/_io/saferepr.py"
              },
              {
                "rank": 0,
                "tokens": 160,
                "span_id": "CallInfo.from_call",
                "file_path": "src/_pytest/runner.py"
              },
              {
                "rank": 0,
                "tokens": 23,
                "span_id": "pytest_runtest_makereport",
                "file_path": "src/_pytest/runner.py"
              },
              {
                "rank": 0,
                "tokens": 57,
                "span_id": "CallInfo.__repr__",
                "file_path": "src/_pytest/runner.py"
              }
            ],
            "search_requests": [
              {
                "query": "raise",
                "class_names": [],
                "code_snippet": "def repr_instance(self, x: Any, level: int) -> str:",
                "file_pattern": "src/_pytest/_io/saferepr.py",
                "function_names": []
              },
              {
                "query": "repr_failure",
                "class_names": [],
                "code_snippet": "def from_item_and_call(item, call):",
                "file_pattern": "src/_pytest/reports.py",
                "function_names": []
              },
              {
                "query": "repr_failure",
                "class_names": [],
                "code_snippet": "def repr_failure(self, excinfo, style=None):",
                "file_pattern": "src/_pytest/nodes.py",
                "function_names": []
              },
              {
                "query": "pytest_runtest_makereport",
                "class_names": [],
                "code_snippet": "def pytest_runtest_makereport(item, call):",
                "file_pattern": "src/_pytest/runner.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 5980,
          "output_tokens": 395,
          "retry_message": null,
          "completion_cost": 0.023865
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 58,
            "span_id": "SafeRepr.repr_instance",
            "file_path": "src/_pytest/_io/saferepr.py"
          },
          {
            "rank": 0,
            "tokens": 55,
            "span_id": "SafeRepr.repr",
            "file_path": "src/_pytest/_io/saferepr.py"
          },
          {
            "rank": 0,
            "tokens": 37,
            "span_id": "SafeRepr",
            "file_path": "src/_pytest/_io/saferepr.py"
          },
          {
            "rank": 0,
            "tokens": 160,
            "span_id": "CallInfo.from_call",
            "file_path": "src/_pytest/runner.py"
          },
          {
            "rank": 0,
            "tokens": 23,
            "span_id": "pytest_runtest_makereport",
            "file_path": "src/_pytest/runner.py"
          },
          {
            "rank": 0,
            "tokens": 57,
            "span_id": "CallInfo.__repr__",
            "file_path": "src/_pytest/runner.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves an INTERNALERROR when an exception occurs within the `__repr__` method of a class. The minimal code provided shows a class `SomeClass` with both `__getattribute__` and `__repr__` methods raising exceptions. The traceback indicates that the error occurs during the pytest session when attempting to represent the object of `SomeClass`. Two files are relevant: `src/_pytest/_io/saferepr.py` and `src/_pytest/runner.py`. In `saferepr.py`, the `SafeRepr` class and its methods `repr` and `repr_instance` handle object representation, including exceptions. The `_format_repr_exception` function is also relevant as it formats exceptions during object representation. In `runner.py`, the `CallInfo` class and its `__repr__` method are related to capturing test call information, which might involve object representation. The `pytest_runtest_makereport` function also links to test report generation, where representation of objects might be attempted.",
            "identified_spans": [
              {
                "span_ids": [
                  "imports",
                  "_format_repr_exception",
                  "_ellipsize",
                  "SafeRepr",
                  "SafeRepr.__init__",
                  "SafeRepr.repr",
                  "SafeRepr.repr_instance"
                ],
                "file_path": "src/_pytest/_io/saferepr.py"
              },
              {
                "span_ids": [
                  "call_runtest_hook",
                  "CallInfo",
                  "CallInfo.from_call",
                  "CallInfo.__repr__",
                  "pytest_runtest_makereport",
                  "pytest_make_collect_report"
                ],
                "file_path": "src/_pytest/runner.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 5358,
          "output_tokens": 436,
          "retry_message": null,
          "completion_cost": 0.022614000000000002
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "I have identified the relevant files and the parts of the code where the `__repr__` method could potentially cause issues. In `src/_pytest/_io/saferepr.py`, the `repr_instance` method calls `repr(x)`, which could trigger the `__repr__` method and raise an exception. Similarly, in `src/_pytest/runner.py`, the `CallInfo` class's `__repr__` method also calls `self.excinfo` which might call `__repr__` on objects of `SomeClass`. These points of possible interaction with `__repr__` are relevant to the reported issue.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 5741,
          "output_tokens": 174,
          "retry_message": null,
          "completion_cost": 0.019833
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "_try_repr_or_str",
            "file_path": "src/_pytest/_io/saferepr.py",
            "scratch_pad": "The issue involves exceptions raised in the `__repr__` method of a class, which can cause pytest to fail internally. This is because pytest relies on the `repr` method for reporting and debugging purposes. The traceback indicates that the exception originates in the `repr` method of the class, and the error handling in `saferepr.py` fails to catch this specific case. We need to enhance the error handling in the `_format_repr_exception` function to catch and handle exceptions raised during the `repr` call.",
            "instructions": "Update the `_try_repr_or_str` function in `src/_pytest/_io/saferepr.py` to catch and handle all exceptions, not just `KeyboardInterrupt` and `SystemExit`, to ensure that any exception raised during the `repr` call is caught and a safe representation of the object is returned."
          },
          "output": {
            "span_id": "_try_repr_or_str",
            "end_line": 12,
            "file_path": "src/_pytest/_io/saferepr.py",
            "start_line": 6,
            "instructions": "Update the `_try_repr_or_str` function in `src/_pytest/_io/saferepr.py` to catch and handle all exceptions, not just `KeyboardInterrupt` and `SystemExit`, to ensure that any exception raised during the `repr` call is caught and a safe representation of the object is returned."
          },
          "input_tokens": 6288,
          "output_tokens": 245,
          "retry_message": null,
          "completion_cost": 0.022539
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "_try_repr_or_str",
        "end_line": 12,
        "file_path": "src/_pytest/_io/saferepr.py",
        "max_tokens": 1000,
        "start_line": 6,
        "temperature": 1.6,
        "instructions": "Update the `_try_repr_or_str` function in `src/_pytest/_io/saferepr.py` to catch and handle all exceptions, not just `KeyboardInterrupt` and `SystemExit`, to ensure that any exception raised during the `repr` call is caught and a safe representation of the object is returned.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\ndef _try_repr_or_str(obj):\n    try:\n        return repr(obj)\n    except BaseException:\n        return '{}(\"{}\")'.format(type(obj).__name__, obj)\n</replace>"
          },
          "output": {
            "diff": "--- src/_pytest/_io/saferepr.py\n+++ src/_pytest/_io/saferepr.py\n@@ -6,8 +6,6 @@\n def _try_repr_or_str(obj):\n     try:\n         return repr(obj)\n-    except (KeyboardInterrupt, SystemExit):\n-        raise\n     except BaseException:\n         return '{}(\"{}\")'.format(type(obj).__name__, obj)\n \n",
            "message": "Applied the change to src/_pytest/_io/saferepr.py.",
            "verification_errors": []
          },
          "input_tokens": 6092,
          "output_tokens": 55,
          "retry_message": null,
          "completion_cost": 0.019101
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- src/_pytest/_io/saferepr.py\n+++ src/_pytest/_io/saferepr.py\n@@ -6,8 +6,6 @@\n def _try_repr_or_str(obj):\n     try:\n         return repr(obj)\n-    except (KeyboardInterrupt, SystemExit):\n-        raise\n     except BaseException:\n         return '{}(\"{}\")'.format(type(obj).__name__, obj)\n \n",
        "model": "deepseek-coder",
        "message": "Applied the change to src/_pytest/_io/saferepr.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The change to handle all exceptions within `_try_repr_or_str` has been correctly applied, ensuring that an internal error in pytest due to exceptions in the `__repr__` method is avoided. No further changes are needed as the issue has been effectively resolved.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The change to `_try_repr_or_str` has been successfully applied, altering the function to catch all exceptions rather than just `KeyboardInterrupt` and `SystemExit`. This modification ensures that any exceptions raised during the `repr` call are safely handled, preventing an internal error in pytest. Given that the necessary change has been implemented and the file context remains relevant, no further modifications are required to address the reported issue.",
            "instructions": null
          },
          "output": {
            "message": "The change to handle all exceptions within `_try_repr_or_str` has been correctly applied, ensuring that an internal error in pytest due to exceptions in the `__repr__` method is avoided. No further changes are needed as the issue has been effectively resolved."
          },
          "input_tokens": 6668,
          "output_tokens": 205,
          "retry_message": null,
          "completion_cost": 0.023079000000000002
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The change to handle all exceptions within `_try_repr_or_str` has been correctly applied, ensuring that an internal error in pytest due to exceptions in the `__repr__` method is avoided. No further changes are needed as the issue has been effectively resolved.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "INTERNALERROR when exception in __repr__\nMinimal code to reproduce the issue: \r\n```python\r\nclass SomeClass:\r\n    def __getattribute__(self, attr):\r\n        raise\r\n    def __repr__(self):\r\n        raise\r\ndef test():\r\n    SomeClass().attr\r\n```\r\nSession traceback:\r\n```\r\n============================= test session starts ==============================\r\nplatform darwin -- Python 3.8.1, pytest-5.4.1, py-1.8.1, pluggy-0.13.1 -- /usr/local/opt/python@3.8/bin/python3.8\r\ncachedir: .pytest_cache\r\nrootdir: ******\r\nplugins: asyncio-0.10.0, mock-3.0.0, cov-2.8.1\r\ncollecting ... collected 1 item\r\n\r\ntest_pytest.py::test \r\nINTERNALERROR> Traceback (most recent call last):\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/main.py\", line 191, in wrap_session\r\nINTERNALERROR>     session.exitstatus = doit(config, session) or 0\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/main.py\", line 247, in _main\r\nINTERNALERROR>     config.hook.pytest_runtestloop(session=session)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/hooks.py\", line 286, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/manager.py\", line 93, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/manager.py\", line 84, in <lambda>\r\nINTERNALERROR>     self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 208, in _multicall\r\nINTERNALERROR>     return outcome.get_result()\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/main.py\", line 272, in pytest_runtestloop\r\nINTERNALERROR>     item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/hooks.py\", line 286, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/manager.py\", line 93, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/manager.py\", line 84, in <lambda>\r\nINTERNALERROR>     self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 208, in _multicall\r\nINTERNALERROR>     return outcome.get_result()\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/runner.py\", line 85, in pytest_runtest_protocol\r\nINTERNALERROR>     runtestprotocol(item, nextitem=nextitem)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/runner.py\", line 100, in runtestprotocol\r\nINTERNALERROR>     reports.append(call_and_report(item, \"call\", log))\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/runner.py\", line 188, in call_and_report\r\nINTERNALERROR>     report = hook.pytest_runtest_makereport(item=item, call=call)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/hooks.py\", line 286, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/manager.py\", line 93, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/manager.py\", line 84, in <lambda>\r\nINTERNALERROR>     self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 203, in _multicall\r\nINTERNALERROR>     gen.send(outcome)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/skipping.py\", line 129, in pytest_runtest_makereport\r\nINTERNALERROR>     rep = outcome.get_result()\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in pytest_runtest_makereport\r\nINTERNALERROR>     return TestReport.from_item_and_call(item, call)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/reports.py\", line 294, in from_item_and_call\r\nINTERNALERROR>     longrepr = item.repr_failure(excinfo)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/python.py\", line 1513, in repr_failure\r\nINTERNALERROR>     return self._repr_failure_py(excinfo, style=style)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/nodes.py\", line 355, in _repr_failure_py\r\nINTERNALERROR>     return excinfo.getrepr(\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_code/code.py\", line 634, in getrepr\r\nINTERNALERROR>     return fmt.repr_excinfo(self)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_code/code.py\", line 879, in repr_excinfo\r\nINTERNALERROR>     reprtraceback = self.repr_traceback(excinfo_)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_code/code.py\", line 823, in repr_traceback\r\nINTERNALERROR>     reprentry = self.repr_traceback_entry(entry, einfo)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_code/code.py\", line 784, in repr_traceback_entry\r\nINTERNALERROR>     reprargs = self.repr_args(entry) if not short else None\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_code/code.py\", line 693, in repr_args\r\nINTERNALERROR>     args.append((argname, saferepr(argvalue)))\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 82, in saferepr\r\nINTERNALERROR>     return SafeRepr(maxsize).repr(obj)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 51, in repr\r\nINTERNALERROR>     s = _format_repr_exception(exc, x)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 23, in _format_repr_exception\r\nINTERNALERROR>     exc_info, obj.__class__.__name__, id(obj)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 47, in repr\r\nINTERNALERROR>     s = super().repr(x)\r\nINTERNALERROR>   File \"/usr/local/Cellar/python@3.8/3.8.1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/reprlib.py\", line 52, in repr\r\nINTERNALERROR>     return self.repr1(x, self.maxlevel)\r\nINTERNALERROR>   File \"/usr/local/Cellar/python@3.8/3.8.1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/reprlib.py\", line 62, in repr1\r\nINTERNALERROR>     return self.repr_instance(x, level)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 60, in repr_instance\r\nINTERNALERROR>     s = _format_repr_exception(exc, x)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 23, in _format_repr_exception\r\nINTERNALERROR>     exc_info, obj.__class__.__name__, id(obj)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 56, in repr_instance\r\nINTERNALERROR>     s = repr(x)\r\nINTERNALERROR>   File \"/Users/stiflou/Documents/projets/apischema/tests/test_pytest.py\", line 6, in __repr__\r\nINTERNALERROR>     raise\r\nINTERNALERROR> RuntimeError: No active exception to reraise\r\n\r\n============================ no tests ran in 0.09s ============================\r\n```\n"
}