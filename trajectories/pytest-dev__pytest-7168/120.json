{
  "info": {
    "duration": 128.81178331375122,
    "submission": "diff --git a/src/_pytest/_code/code.py b/src/_pytest/_code/code.py\nindex 02efc7172..27ababd66 100644\n--- a/src/_pytest/_code/code.py\n+++ b/src/_pytest/_code/code.py\n@@ -877,8 +877,14 @@ class FormattedExcinfo:\n         while e is not None and id(e) not in seen:\n             seen.add(id(e))\n             if excinfo_:\n-                reprtraceback = self.repr_traceback(excinfo_)\n-                reprcrash = excinfo_._getreprcrash()  # type: Optional[ReprFileLocation]\n+                try:\n+                    reprtraceback = self.repr_traceback(excinfo_)\n+                    reprcrash = excinfo_._getreprcrash()  # type: Optional[ReprFileLocation]\n+                except Exception:\n+                    reprtraceback = ReprTracebackNative(\n+                        traceback.format_exception(type(e), e, e.__traceback__)\n+                    )\n+                    reprcrash = None\n             else:\n                 # fallback to native repr if the exception doesn't have a traceback:\n                 # ExceptionInfo objects require a full traceback to work\n",
    "total_cost": 0.18039000000000002,
    "instance_id": "pytest-dev__pytest-7168",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves an exception occurring in the `__repr__` method of a class during pytest execution, leading to an 'INTERNALERROR'. Given the stack trace, it's clear that pytest's internals are involved in handling the exception, particularly in formatting the traceback and handling the test execution. The error message reveals that the exception occurs when attempting to represent an instance of `SomeClass`. It's essential to identify the relevant parts of the pytest codebase where exceptions are handled and representations are managed. Specifically, looking at the `_repr_failure_py` and `repr_failure` methods in the `Node` class, and the `repr_failure` method in the `Function` class could provide insights. Also, examining the `repr_failure` method in `DoctestItem` and the `formatest_formatting.getrepr` method could be helpful.",
            "search_requests": [
              {
                "query": "handling exceptions in __repr__",
                "class_names": [
                  "Node",
                  "Function",
                  "DoctestItem"
                ],
                "code_snippet": null,
                "file_pattern": "src/_pytest/**/*.py",
                "function_names": [
                  "_repr_failure_py",
                  "repr_failure",
                  "repr_excinfo"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 314,
                "span_id": "Node._repr_failure_py",
                "file_path": "src/_pytest/nodes.py"
              },
              {
                "rank": 0,
                "tokens": 72,
                "span_id": "Node.repr_failure",
                "file_path": "src/_pytest/nodes.py"
              },
              {
                "rank": 11,
                "tokens": 142,
                "span_id": "Collector.repr_failure",
                "file_path": "src/_pytest/nodes.py"
              },
              {
                "rank": 63,
                "tokens": 15,
                "span_id": "Node.listnames",
                "file_path": "src/_pytest/nodes.py"
              },
              {
                "rank": 63,
                "tokens": 75,
                "span_id": "Node.get_closest_marker",
                "file_path": "src/_pytest/nodes.py"
              },
              {
                "rank": 63,
                "tokens": 60,
                "span_id": "Node.addfinalizer",
                "file_path": "src/_pytest/nodes.py"
              },
              {
                "rank": 63,
                "tokens": 53,
                "span_id": "Node.getparent",
                "file_path": "src/_pytest/nodes.py"
              },
              {
                "rank": 63,
                "tokens": 52,
                "span_id": "Node.iter_markers",
                "file_path": "src/_pytest/nodes.py"
              },
              {
                "rank": 63,
                "tokens": 51,
                "span_id": "Node.listextrakeywords",
                "file_path": "src/_pytest/nodes.py"
              },
              {
                "rank": 63,
                "tokens": 84,
                "span_id": "Node.iter_markers_with_node",
                "file_path": "src/_pytest/nodes.py"
              },
              {
                "rank": 63,
                "tokens": 13,
                "span_id": "Node._prunetraceback",
                "file_path": "src/_pytest/nodes.py"
              },
              {
                "rank": 110,
                "tokens": 30,
                "span_id": "Node.ihook",
                "file_path": "src/_pytest/nodes.py"
              },
              {
                "rank": 110,
                "tokens": 26,
                "span_id": "Node.__repr__",
                "file_path": "src/_pytest/nodes.py"
              },
              {
                "rank": 110,
                "tokens": 128,
                "span_id": "Node.from_parent",
                "file_path": "src/_pytest/nodes.py"
              },
              {
                "rank": 1,
                "tokens": 211,
                "span_id": "Function._prunetraceback",
                "file_path": "src/_pytest/python.py"
              },
              {
                "rank": 1,
                "tokens": 63,
                "span_id": "Function.repr_failure",
                "file_path": "src/_pytest/python.py"
              },
              {
                "rank": 118,
                "tokens": 41,
                "span_id": "Function",
                "file_path": "src/_pytest/python.py"
              },
              {
                "rank": 118,
                "tokens": 40,
                "span_id": "Function._getobj",
                "file_path": "src/_pytest/python.py"
              },
              {
                "rank": 2,
                "tokens": 461,
                "span_id": "DoctestItem.repr_failure",
                "file_path": "src/_pytest/doctest.py"
              },
              {
                "rank": 2,
                "tokens": 37,
                "span_id": "DoctestItem.reportinfo",
                "file_path": "src/_pytest/doctest.py"
              },
              {
                "rank": 98,
                "tokens": 83,
                "span_id": "DoctestItem.from_parent",
                "file_path": "src/_pytest/doctest.py"
              },
              {
                "rank": 98,
                "tokens": 68,
                "span_id": "DoctestItem.runtest",
                "file_path": "src/_pytest/doctest.py"
              },
              {
                "rank": 98,
                "tokens": 8,
                "span_id": "DoctestItem",
                "file_path": "src/_pytest/doctest.py"
              },
              {
                "rank": 98,
                "tokens": 71,
                "span_id": "DoctestItem.setup",
                "file_path": "src/_pytest/doctest.py"
              },
              {
                "rank": 98,
                "tokens": 89,
                "span_id": "DoctestItem._disable_output_capturing_for_darwin",
                "file_path": "src/_pytest/doctest.py"
              },
              {
                "rank": 13,
                "tokens": 366,
                "span_id": "FormattedExcinfo.repr_excinfo",
                "file_path": "src/_pytest/_code/code.py"
              }
            ],
            "search_requests": [
              {
                "query": "handling exceptions in __repr__",
                "class_names": [
                  "Node",
                  "Function",
                  "DoctestItem"
                ],
                "code_snippet": null,
                "file_pattern": "src/_pytest/**/*.py",
                "function_names": [
                  "_repr_failure_py",
                  "repr_failure",
                  "repr_excinfo"
                ]
              }
            ]
          },
          "input_tokens": 5980,
          "output_tokens": 295,
          "retry_message": null,
          "completion_cost": 0.022365000000000003
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 314,
            "span_id": "Node._repr_failure_py",
            "file_path": "src/_pytest/nodes.py"
          },
          {
            "rank": 0,
            "tokens": 72,
            "span_id": "Node.repr_failure",
            "file_path": "src/_pytest/nodes.py"
          },
          {
            "rank": 11,
            "tokens": 142,
            "span_id": "Collector.repr_failure",
            "file_path": "src/_pytest/nodes.py"
          },
          {
            "rank": 63,
            "tokens": 15,
            "span_id": "Node.listnames",
            "file_path": "src/_pytest/nodes.py"
          },
          {
            "rank": 63,
            "tokens": 75,
            "span_id": "Node.get_closest_marker",
            "file_path": "src/_pytest/nodes.py"
          },
          {
            "rank": 63,
            "tokens": 60,
            "span_id": "Node.addfinalizer",
            "file_path": "src/_pytest/nodes.py"
          },
          {
            "rank": 63,
            "tokens": 53,
            "span_id": "Node.getparent",
            "file_path": "src/_pytest/nodes.py"
          },
          {
            "rank": 63,
            "tokens": 52,
            "span_id": "Node.iter_markers",
            "file_path": "src/_pytest/nodes.py"
          },
          {
            "rank": 63,
            "tokens": 51,
            "span_id": "Node.listextrakeywords",
            "file_path": "src/_pytest/nodes.py"
          },
          {
            "rank": 63,
            "tokens": 84,
            "span_id": "Node.iter_markers_with_node",
            "file_path": "src/_pytest/nodes.py"
          },
          {
            "rank": 63,
            "tokens": 13,
            "span_id": "Node._prunetraceback",
            "file_path": "src/_pytest/nodes.py"
          },
          {
            "rank": 110,
            "tokens": 30,
            "span_id": "Node.ihook",
            "file_path": "src/_pytest/nodes.py"
          },
          {
            "rank": 110,
            "tokens": 26,
            "span_id": "Node.__repr__",
            "file_path": "src/_pytest/nodes.py"
          },
          {
            "rank": 110,
            "tokens": 128,
            "span_id": "Node.from_parent",
            "file_path": "src/_pytest/nodes.py"
          },
          {
            "rank": 1,
            "tokens": 211,
            "span_id": "Function._prunetraceback",
            "file_path": "src/_pytest/python.py"
          },
          {
            "rank": 1,
            "tokens": 63,
            "span_id": "Function.repr_failure",
            "file_path": "src/_pytest/python.py"
          },
          {
            "rank": 118,
            "tokens": 41,
            "span_id": "Function",
            "file_path": "src/_pytest/python.py"
          },
          {
            "rank": 118,
            "tokens": 40,
            "span_id": "Function._getobj",
            "file_path": "src/_pytest/python.py"
          },
          {
            "rank": 2,
            "tokens": 461,
            "span_id": "DoctestItem.repr_failure",
            "file_path": "src/_pytest/doctest.py"
          },
          {
            "rank": 2,
            "tokens": 37,
            "span_id": "DoctestItem.reportinfo",
            "file_path": "src/_pytest/doctest.py"
          },
          {
            "rank": 98,
            "tokens": 83,
            "span_id": "DoctestItem.from_parent",
            "file_path": "src/_pytest/doctest.py"
          },
          {
            "rank": 98,
            "tokens": 68,
            "span_id": "DoctestItem.runtest",
            "file_path": "src/_pytest/doctest.py"
          },
          {
            "rank": 98,
            "tokens": 8,
            "span_id": "DoctestItem",
            "file_path": "src/_pytest/doctest.py"
          },
          {
            "rank": 98,
            "tokens": 71,
            "span_id": "DoctestItem.setup",
            "file_path": "src/_pytest/doctest.py"
          },
          {
            "rank": 98,
            "tokens": 89,
            "span_id": "DoctestItem._disable_output_capturing_for_darwin",
            "file_path": "src/_pytest/doctest.py"
          },
          {
            "rank": 13,
            "tokens": 366,
            "span_id": "FormattedExcinfo.repr_excinfo",
            "file_path": "src/_pytest/_code/code.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about an INTERNALERROR when an exception occurs in the __repr__ method of a class. The minimal code to reproduce the issue involves defining a class with __getattribute__ and __repr__ methods that both raise exceptions. The traceback provided shows that the error occurs during the processing of the test report, specifically when trying to format the exception info in _repr_failure_py. The relevant files to look at would be those dealing with exception handling and representation in pytest. The search results include code spans from src/_pytest/nodes.py, src/_pytest/python.py, src/_pytest/doctest.py, and src/_pytest/_code/code.py. These files contain definitions and methods related to Node, Function, DoctestItem, and FormattedExcinfo classes, which handle various aspects of exception handling and representation in pytest. The identified code spans include methods such as _repr_failure_py in Node, which is directly involved in producing the representation of a failure, including exceptions. Additionally, repr_failure methods in Function and DoctestItem are relevant as they handle the representation of failures specific to functions and doctests. The FormattedExcinfo.repr_excinfo method in src/_pytest/_code/code.py is also relevant as it deals with the representation of exception info, which is crucial for understanding and reproducing the issue. Overall, the identified code spans are relevant to the reported issue and provide a good starting point for understanding and addressing it.",
            "identified_spans": [
              {
                "span_ids": [
                  "Node._repr_failure_py"
                ],
                "file_path": "src/_pytest/nodes.py"
              },
              {
                "span_ids": [
                  "Function.repr_failure"
                ],
                "file_path": "src/_pytest/python.py"
              },
              {
                "span_ids": [
                  "DoctestItem.repr_failure"
                ],
                "file_path": "src/_pytest/doctest.py"
              },
              {
                "span_ids": [
                  "FormattedExcinfo.repr_excinfo"
                ],
                "file_path": "src/_pytest/_code/code.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 8865,
          "output_tokens": 516,
          "retry_message": null,
          "completion_cost": 0.034335000000000004
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context provided contains portions of the pytest codebase that are directly involved in handling and representing exceptions, which is central to the reported issue. Specifically, the `_repr_failure_py` method in the `Node` class, the `repr_failure` method in the `Function` class, and the `repr_failure` method in `DoctestItem` are all relevant. Additionally, the `ExceptionInfo` and `FormattedExcinfo` classes from `_pytest._code.code` module are involved in managing and formatting exceptions, which is crucial for understanding the 'INTERNALERROR'. The file context provided covers these critical areas, suggesting that the relevant code to address the issue is likely included.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 8316,
          "output_tokens": 185,
          "retry_message": null,
          "completion_cost": 0.027723
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "FormattedExcinfo.repr_excinfo",
            "file_path": "src/_pytest/_code/code.py",
            "scratch_pad": "The issue arises when an exception occurs during the `__repr__` method of a class, which is being called during the representation of the exception. This causes an internal error in pytest. To address this, we need to handle exceptions that occur during the `repr` call in the `repr_excinfo` method of `FormattedExcinfo`.",
            "instructions": "Catch and handle any exceptions that occur during the `repr` call in the `repr_excinfo` method of `FormattedExcinfo` to prevent the internal error."
          },
          "output": {
            "span_id": "FormattedExcinfo.repr_excinfo",
            "end_line": 912,
            "file_path": "src/_pytest/_code/code.py",
            "start_line": 869,
            "instructions": "Catch and handle any exceptions that occur during the `repr` call in the `repr_excinfo` method of `FormattedExcinfo` to prevent the internal error."
          },
          "input_tokens": 8799,
          "output_tokens": 160,
          "retry_message": null,
          "completion_cost": 0.028797
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "FormattedExcinfo.repr_excinfo",
        "end_line": 912,
        "file_path": "src/_pytest/_code/code.py",
        "max_tokens": 1000,
        "start_line": 869,
        "temperature": 1.6,
        "instructions": "Catch and handle any exceptions that occur during the `repr` call in the `repr_excinfo` method of `FormattedExcinfo` to prevent the internal error.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\n    def repr_excinfo(self, excinfo: ExceptionInfo) -> \"ExceptionChainRepr\":\n        repr_chain = (\n            []\n        )  # type: List[Tuple[ReprTraceback, Optional[ReprFileLocation], Optional[str]]]\n        e = excinfo.value\n        excinfo_ = excinfo  # type: Optional[ExceptionInfo]\n        descr = None\n        seen = set()  # type: Set[int]\n        while e is not None and id(e) not in seen:\n            seen.add(id(e))\n            if excinfo_:\n                try:\n                    reprtraceback = self.repr_traceback(excinfo_)\n                    reprcrash = excinfo_._getreprcrash()  # type: Optional[ReprFileLocation]\n                except Exception:\n                    reprtraceback = ReprTracebackNative(\n                        traceback.format_exception(type(e), e, e.__traceback__)\n                    )\n                    reprcrash = None\n            else:\n                # fallback to native repr if the exception doesn't have a traceback:\n                # ExceptionInfo objects require a full traceback to work\n                reprtraceback = ReprTracebackNative(\n                    traceback.format_exception(type(e), e, None)\n                )\n                reprcrash = None\n\n            repr_chain += [(reprtraceback, reprcrash, descr)]\n            if e.__cause__ is not None and self.chain:\n                e = e.__cause__\n                excinfo_ = (\n                    ExceptionInfo((type(e), e, e.__traceback__))\n                    if e.__traceback__\n                    else None\n                )\n                descr = \"The above exception was the direct cause of the following exception:\"\n            elif (\n                e.__context__ is not None and not e.__suppress_context__ and self.chain\n            ):\n                e = e.__context__\n                excinfo_ = (\n                    ExceptionInfo((type(e), e, e.__traceback__))\n                    if e.__traceback__\n                    else None\n                )\n                descr = \"During handling of the above exception, another exception occurred:\"\n            else:\n                e = None\n        repr_chain.reverse()\n        return ExceptionChainRepr(repr_chain)\n</replace>"
          },
          "output": {
            "diff": "--- src/_pytest/_code/code.py\n+++ src/_pytest/_code/code.py\n@@ -877,8 +877,14 @@\n         while e is not None and id(e) not in seen:\n             seen.add(id(e))\n             if excinfo_:\n-                reprtraceback = self.repr_traceback(excinfo_)\n-                reprcrash = excinfo_._getreprcrash()  # type: Optional[ReprFileLocation]\n+                try:\n+                    reprtraceback = self.repr_traceback(excinfo_)\n+                    reprcrash = excinfo_._getreprcrash()  # type: Optional[ReprFileLocation]\n+                except Exception:\n+                    reprtraceback = ReprTracebackNative(\n+                        traceback.format_exception(type(e), e, e.__traceback__)\n+                    )\n+                    reprcrash = None\n             else:\n                 # fallback to native repr if the exception doesn't have a traceback:\n                 # ExceptionInfo objects require a full traceback to work\n",
            "message": "Applied the change to src/_pytest/_code/code.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 9540,
          "output_tokens": 527,
          "retry_message": null,
          "completion_cost": 0.036525
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- src/_pytest/_code/code.py\n+++ src/_pytest/_code/code.py\n@@ -877,8 +877,14 @@\n         while e is not None and id(e) not in seen:\n             seen.add(id(e))\n             if excinfo_:\n-                reprtraceback = self.repr_traceback(excinfo_)\n-                reprcrash = excinfo_._getreprcrash()  # type: Optional[ReprFileLocation]\n+                try:\n+                    reprtraceback = self.repr_traceback(excinfo_)\n+                    reprcrash = excinfo_._getreprcrash()  # type: Optional[ReprFileLocation]\n+                except Exception:\n+                    reprtraceback = ReprTracebackNative(\n+                        traceback.format_exception(type(e), e, e.__traceback__)\n+                    )\n+                    reprcrash = None\n             else:\n                 # fallback to native repr if the exception doesn't have a traceback:\n                 # ExceptionInfo objects require a full traceback to work\n",
        "model": "deepseek-coder",
        "message": "Applied the change to src/_pytest/_code/code.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue of INTERNALERROR due to exceptions in `__repr__` methods has been addressed by enhancing exception handling in the `repr_excinfo` method. This change ensures that any exceptions during the `repr` call are caught and handled, preventing the internal error from occurring.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The change applied to `FormattedExcinfo.repr_excinfo` should mitigate the internal error caused by exceptions in `__repr__` methods. The added exception handling ensures that any exceptions during the `repr` call will be caught and handled gracefully, preventing the internal error from propagating.",
            "instructions": null
          },
          "output": {
            "message": "The issue of INTERNALERROR due to exceptions in `__repr__` methods has been addressed by enhancing exception handling in the `repr_excinfo` method. This change ensures that any exceptions during the `repr` call are caught and handled, preventing the internal error from occurring."
          },
          "input_tokens": 9325,
          "output_tokens": 178,
          "retry_message": null,
          "completion_cost": 0.030645
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue of INTERNALERROR due to exceptions in `__repr__` methods has been addressed by enhancing exception handling in the `repr_excinfo` method. This change ensures that any exceptions during the `repr` call are caught and handled, preventing the internal error from occurring.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "INTERNALERROR when exception in __repr__\nMinimal code to reproduce the issue: \r\n```python\r\nclass SomeClass:\r\n    def __getattribute__(self, attr):\r\n        raise\r\n    def __repr__(self):\r\n        raise\r\ndef test():\r\n    SomeClass().attr\r\n```\r\nSession traceback:\r\n```\r\n============================= test session starts ==============================\r\nplatform darwin -- Python 3.8.1, pytest-5.4.1, py-1.8.1, pluggy-0.13.1 -- /usr/local/opt/python@3.8/bin/python3.8\r\ncachedir: .pytest_cache\r\nrootdir: ******\r\nplugins: asyncio-0.10.0, mock-3.0.0, cov-2.8.1\r\ncollecting ... collected 1 item\r\n\r\ntest_pytest.py::test \r\nINTERNALERROR> Traceback (most recent call last):\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/main.py\", line 191, in wrap_session\r\nINTERNALERROR>     session.exitstatus = doit(config, session) or 0\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/main.py\", line 247, in _main\r\nINTERNALERROR>     config.hook.pytest_runtestloop(session=session)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/hooks.py\", line 286, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/manager.py\", line 93, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/manager.py\", line 84, in <lambda>\r\nINTERNALERROR>     self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 208, in _multicall\r\nINTERNALERROR>     return outcome.get_result()\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/main.py\", line 272, in pytest_runtestloop\r\nINTERNALERROR>     item.config.hook.pytest_runtest_protocol(item=item, nextitem=nextitem)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/hooks.py\", line 286, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/manager.py\", line 93, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/manager.py\", line 84, in <lambda>\r\nINTERNALERROR>     self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 208, in _multicall\r\nINTERNALERROR>     return outcome.get_result()\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/runner.py\", line 85, in pytest_runtest_protocol\r\nINTERNALERROR>     runtestprotocol(item, nextitem=nextitem)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/runner.py\", line 100, in runtestprotocol\r\nINTERNALERROR>     reports.append(call_and_report(item, \"call\", log))\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/runner.py\", line 188, in call_and_report\r\nINTERNALERROR>     report = hook.pytest_runtest_makereport(item=item, call=call)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/hooks.py\", line 286, in __call__\r\nINTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/manager.py\", line 93, in _hookexec\r\nINTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/manager.py\", line 84, in <lambda>\r\nINTERNALERROR>     self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 203, in _multicall\r\nINTERNALERROR>     gen.send(outcome)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/skipping.py\", line 129, in pytest_runtest_makereport\r\nINTERNALERROR>     rep = outcome.get_result()\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 80, in get_result\r\nINTERNALERROR>     raise ex[1].with_traceback(ex[2])\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/pluggy/callers.py\", line 187, in _multicall\r\nINTERNALERROR>     res = hook_impl.function(*args)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/runner.py\", line 260, in pytest_runtest_makereport\r\nINTERNALERROR>     return TestReport.from_item_and_call(item, call)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/reports.py\", line 294, in from_item_and_call\r\nINTERNALERROR>     longrepr = item.repr_failure(excinfo)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/python.py\", line 1513, in repr_failure\r\nINTERNALERROR>     return self._repr_failure_py(excinfo, style=style)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/nodes.py\", line 355, in _repr_failure_py\r\nINTERNALERROR>     return excinfo.getrepr(\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_code/code.py\", line 634, in getrepr\r\nINTERNALERROR>     return fmt.repr_excinfo(self)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_code/code.py\", line 879, in repr_excinfo\r\nINTERNALERROR>     reprtraceback = self.repr_traceback(excinfo_)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_code/code.py\", line 823, in repr_traceback\r\nINTERNALERROR>     reprentry = self.repr_traceback_entry(entry, einfo)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_code/code.py\", line 784, in repr_traceback_entry\r\nINTERNALERROR>     reprargs = self.repr_args(entry) if not short else None\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_code/code.py\", line 693, in repr_args\r\nINTERNALERROR>     args.append((argname, saferepr(argvalue)))\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 82, in saferepr\r\nINTERNALERROR>     return SafeRepr(maxsize).repr(obj)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 51, in repr\r\nINTERNALERROR>     s = _format_repr_exception(exc, x)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 23, in _format_repr_exception\r\nINTERNALERROR>     exc_info, obj.__class__.__name__, id(obj)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 47, in repr\r\nINTERNALERROR>     s = super().repr(x)\r\nINTERNALERROR>   File \"/usr/local/Cellar/python@3.8/3.8.1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/reprlib.py\", line 52, in repr\r\nINTERNALERROR>     return self.repr1(x, self.maxlevel)\r\nINTERNALERROR>   File \"/usr/local/Cellar/python@3.8/3.8.1/Frameworks/Python.framework/Versions/3.8/lib/python3.8/reprlib.py\", line 62, in repr1\r\nINTERNALERROR>     return self.repr_instance(x, level)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 60, in repr_instance\r\nINTERNALERROR>     s = _format_repr_exception(exc, x)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 23, in _format_repr_exception\r\nINTERNALERROR>     exc_info, obj.__class__.__name__, id(obj)\r\nINTERNALERROR>   File \"/usr/local/lib/python3.8/site-packages/_pytest/_io/saferepr.py\", line 56, in repr_instance\r\nINTERNALERROR>     s = repr(x)\r\nINTERNALERROR>   File \"/Users/stiflou/Documents/projets/apischema/tests/test_pytest.py\", line 6, in __repr__\r\nINTERNALERROR>     raise\r\nINTERNALERROR> RuntimeError: No active exception to reraise\r\n\r\n============================ no tests ran in 0.09s ============================\r\n```\n"
}