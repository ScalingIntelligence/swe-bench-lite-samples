{
  "info": {
    "duration": 214.86674451828003,
    "submission": "diff --git a/django/contrib/messages/storage/cookie.py b/django/contrib/messages/storage/cookie.py\nindex 1d390c71dd..e48d4edb08 100644\n--- a/django/contrib/messages/storage/cookie.py\n+++ b/django/contrib/messages/storage/cookie.py\n@@ -19,7 +19,7 @@ class MessageEncoder(json.JSONEncoder):\n             # Using 0/1 here instead of False/True to produce more compact json\n             is_safedata = 1 if isinstance(obj.message, SafeData) else 0\n             message = [self.message_key, is_safedata, obj.level, obj.message]\n-            if obj.extra_tags:\n+            if obj.extra_tags is not None:\n                 message.append(obj.extra_tags)\n             return message\n         return super().default(obj)\n",
    "total_cost": 0.10643699999999999,
    "instance_id": "django__django-15347",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue revolves around the incorrect serialization and deserialization of the `extra_tags` attribute in Django's messages framework, specifically when `extra_tags` is an empty string. The `MessageEncoder` class checks the truthiness of `extra_tags` instead of checking if it is not `None`, causing an empty string to be converted to `None`. This leads to a bug where message tags are lost upon deserialization. The focus should be on the `MessageEncoder` and `MessageDecoder` classes in the `django/contrib/messages/storage/cookie.py` module, as well as any related methods in other storage backends like `django/contrib/messages/storage/session.py`.",
            "search_requests": [
              {
                "query": "extra_tags==\"\" is converted to extra_tags==None",
                "class_names": [],
                "code_snippet": "extra_tags=None",
                "file_pattern": "django/contrib/messages/storage/**/*.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 21,
                "span_id": "imports",
                "file_path": "django/contrib/messages/storage/base.py"
              },
              {
                "rank": 0,
                "tokens": 42,
                "span_id": "Message",
                "file_path": "django/contrib/messages/storage/base.py"
              },
              {
                "rank": 0,
                "tokens": 30,
                "span_id": "Message.__init__",
                "file_path": "django/contrib/messages/storage/base.py"
              },
              {
                "rank": 0,
                "tokens": 60,
                "span_id": "Message._prepare",
                "file_path": "django/contrib/messages/storage/base.py"
              },
              {
                "rank": 0,
                "tokens": 30,
                "span_id": "Message.__eq__",
                "file_path": "django/contrib/messages/storage/base.py"
              },
              {
                "rank": 0,
                "tokens": 11,
                "span_id": "Message.__str__",
                "file_path": "django/contrib/messages/storage/base.py"
              },
              {
                "rank": 0,
                "tokens": 27,
                "span_id": "Message.tags",
                "file_path": "django/contrib/messages/storage/base.py"
              },
              {
                "rank": 0,
                "tokens": 16,
                "span_id": "Message.level_tag",
                "file_path": "django/contrib/messages/storage/base.py"
              }
            ],
            "search_requests": [
              {
                "query": "extra_tags==\"\" is converted to extra_tags==None",
                "class_names": [],
                "code_snippet": "extra_tags=None",
                "file_pattern": "django/contrib/messages/storage/**/*.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 3756,
          "output_tokens": 302,
          "retry_message": null,
          "completion_cost": 0.015798
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 21,
            "span_id": "imports",
            "file_path": "django/contrib/messages/storage/base.py"
          },
          {
            "rank": 0,
            "tokens": 42,
            "span_id": "Message",
            "file_path": "django/contrib/messages/storage/base.py"
          },
          {
            "rank": 0,
            "tokens": 30,
            "span_id": "Message.__init__",
            "file_path": "django/contrib/messages/storage/base.py"
          },
          {
            "rank": 0,
            "tokens": 60,
            "span_id": "Message._prepare",
            "file_path": "django/contrib/messages/storage/base.py"
          },
          {
            "rank": 0,
            "tokens": 30,
            "span_id": "Message.__eq__",
            "file_path": "django/contrib/messages/storage/base.py"
          },
          {
            "rank": 0,
            "tokens": 11,
            "span_id": "Message.__str__",
            "file_path": "django/contrib/messages/storage/base.py"
          },
          {
            "rank": 0,
            "tokens": 27,
            "span_id": "Message.tags",
            "file_path": "django/contrib/messages/storage/base.py"
          },
          {
            "rank": 0,
            "tokens": 16,
            "span_id": "Message.level_tag",
            "file_path": "django/contrib/messages/storage/base.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue pertains to the incorrect serialization and deserialization of the `extra_tags` attribute in the `Message` class when it is an empty string. On examining the provided code spans, it's evident that the `Message` class includes methods and properties related to `extra_tags`, such as the `__init__`, `_prepare`, and `tags` methods. The `_prepare` method is particularly relevant as it converts `extra_tags` to a string if it is not `None`. This could be where the issue arises since it doesn't explicitly handle the case where `extra_tags` is an empty string. The `BaseStorage.add` method also initializes a `Message` instance with `extra_tags` set to an empty string by default, demonstrating the direct interaction with the `extra_tags` attribute. Given that these code spans directly deal with the `extra_tags` attribute and its handling within the `Message` class, they are highly relevant to the reported issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "Message",
                  "Message.__init__",
                  "Message._prepare",
                  "Message.tags",
                  "BaseStorage.add"
                ],
                "file_path": "django/contrib/messages/storage/base.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 1746,
          "output_tokens": 309,
          "retry_message": null,
          "completion_cost": 0.009873
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "While the file context provided includes the `BaseStorage` and `Message` classes from `django/contrib/messages/storage/base.py`, it does not include the specific code for `MessageEncoder` and `MessageDecoder` responsible for the serialization and deserialization, which are key to addressing the reported issue. These classes are likely located in another module, specifically `django/contrib/messages/storage/cookie.py`. Therefore, although the relevant classes are found in the provided file context, the specific methods needed to fix the issue are not present.",
            "search_suggestions": "Look for the `MessageEncoder` and `MessageDecoder` classes in `django/contrib/messages/storage/cookie.py` and possibly in other storage backends like `django/contrib/messages/storage/session.py`."
          },
          "output": {
            "message": "Look for the `MessageEncoder` and `MessageDecoder` classes in `django/contrib/messages/storage/cookie.py` and possibly in other storage backends like `django/contrib/messages/storage/session.py`."
          },
          "input_tokens": 1619,
          "output_tokens": 201,
          "retry_message": null,
          "completion_cost": 0.007872
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look for the `MessageEncoder` and `MessageDecoder` classes in `django/contrib/messages/storage/cookie.py` and possibly in other storage backends like `django/contrib/messages/storage/session.py`.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The `MessageEncoder` and `MessageDecoder` classes should be located in the `django/contrib/messages/storage/cookie.py` module, as they are integral to cookie-based message storage which handles serialization and deserialization. Additionally, similar functionality might be implemented in other storage backends like `django/contrib/messages/storage/session.py`. These classes are crucial for understanding how `extra_tags` is handled during serialization and deserialization, particularly when `extra_tags` is an empty string.",
            "search_requests": [
              {
                "query": "MessageEncoder and MessageDecoder classes",
                "class_names": [
                  "MessageEncoder",
                  "MessageDecoder"
                ],
                "code_snippet": null,
                "file_pattern": "django/contrib/messages/storage/cookie.py",
                "function_names": []
              },
              {
                "query": "methods handling message serialization and deserialization",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "django/contrib/messages/storage/session.py",
                "function_names": [
                  "serialize_messages",
                  "deserialize_messages"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 83,
                "span_id": "MessageEncoder.default",
                "file_path": "django/contrib/messages/storage/cookie.py"
              },
              {
                "rank": 0,
                "tokens": 32,
                "span_id": "MessageEncoder",
                "file_path": "django/contrib/messages/storage/cookie.py"
              },
              {
                "rank": 1,
                "tokens": 87,
                "span_id": "MessageDecoder.process_messages",
                "file_path": "django/contrib/messages/storage/cookie.py"
              },
              {
                "rank": 1,
                "tokens": 25,
                "span_id": "MessageDecoder.decode",
                "file_path": "django/contrib/messages/storage/cookie.py"
              },
              {
                "rank": 1,
                "tokens": 21,
                "span_id": "MessageDecoder",
                "file_path": "django/contrib/messages/storage/cookie.py"
              },
              {
                "rank": 0,
                "tokens": 27,
                "span_id": "SessionStorage.deserialize_messages",
                "file_path": "django/contrib/messages/storage/session.py"
              },
              {
                "rank": 0,
                "tokens": 17,
                "span_id": "SessionStorage.serialize_messages",
                "file_path": "django/contrib/messages/storage/session.py"
              }
            ],
            "search_requests": [
              {
                "query": "MessageEncoder and MessageDecoder classes",
                "class_names": [
                  "MessageEncoder",
                  "MessageDecoder"
                ],
                "code_snippet": null,
                "file_pattern": "django/contrib/messages/storage/cookie.py",
                "function_names": []
              },
              {
                "query": "methods handling message serialization and deserialization",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "django/contrib/messages/storage/session.py",
                "function_names": [
                  "serialize_messages",
                  "deserialize_messages"
                ]
              }
            ]
          },
          "input_tokens": 3700,
          "output_tokens": 284,
          "retry_message": null,
          "completion_cost": 0.01536
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 83,
            "span_id": "MessageEncoder.default",
            "file_path": "django/contrib/messages/storage/cookie.py"
          },
          {
            "rank": 0,
            "tokens": 32,
            "span_id": "MessageEncoder",
            "file_path": "django/contrib/messages/storage/cookie.py"
          },
          {
            "rank": 1,
            "tokens": 87,
            "span_id": "MessageDecoder.process_messages",
            "file_path": "django/contrib/messages/storage/cookie.py"
          },
          {
            "rank": 1,
            "tokens": 25,
            "span_id": "MessageDecoder.decode",
            "file_path": "django/contrib/messages/storage/cookie.py"
          },
          {
            "rank": 1,
            "tokens": 21,
            "span_id": "MessageDecoder",
            "file_path": "django/contrib/messages/storage/cookie.py"
          },
          {
            "rank": 0,
            "tokens": 27,
            "span_id": "SessionStorage.deserialize_messages",
            "file_path": "django/contrib/messages/storage/session.py"
          },
          {
            "rank": 0,
            "tokens": 17,
            "span_id": "SessionStorage.serialize_messages",
            "file_path": "django/contrib/messages/storage/session.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about the incorrect serialization and deserialization of the `extra_tags` when it's an empty string in Django's messages framework. The bug arises because `MessageEncoder` checks for the truthiness of `extra_tags` rather than checking if it is not `None`. This results in `extra_tags` being converted from an empty string to `None` when a message is serialized and deserialized. \n\nThe current context shows relevant code in `django/contrib/messages/storage/base.py`, which includes the `Message` class with its `extra_tags` attribute being initialized and used in methods like `__init__` and `_prepare`. There is also a mention of the `MessageEncoder` and `MessageDecoder` in the file context, suggesting partial relevance, which aligns with the search results that include implementations of these encoders and decoders in `django/contrib/messages/storage/cookie.py` and `django/contrib/messages/storage/session.py`.\n\nThe new search results confirm the bug's presence in `MessageEncoder`. Specifically, the `default` method of `MessageEncoder` in `django/contrib/messages/storage/cookie.py` checks if `obj.extra_tags` is truthy before appending it to the message data, which fails to account for when `extra_tags` is an empty string. Additionally, `MessageDecoder` in the same file and the session storage file contain methods for processing and decoding messages, which could be handling the `extra_tags` improperly due to the encoder's behavior.\n\nTo address the issue, the relevant spans include the `MessageEncoder.default` and `MessageDecoder.process_messages` spans from `django/contrib/messages/storage/cookie.py` as they directly pertain to the serialization and deserialization processes affected by the bug. Also included is the `SessionStorage.serialize_messages` and `SessionStorage.deserialize_messages` from `django/contrib/messages/storage/session.py` for completeness, since they also handle message serialization using the same `MessageEncoder` and `MessageDecoder`.\n\nThese selected spans provide a comprehensive view of where the bug resides and how it impacts the message storage in Django. This analysis is enough to proceed with the search task, determining that the identified spans are relevant to the reported issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "MessageEncoder.default",
                  "MessageDecoder.process_messages"
                ],
                "file_path": "django/contrib/messages/storage/cookie.py"
              },
              {
                "span_ids": [
                  "SessionStorage.serialize_messages",
                  "SessionStorage.deserialize_messages"
                ],
                "file_path": "django/contrib/messages/storage/session.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 2491,
          "output_tokens": 641,
          "retry_message": null,
          "completion_cost": 0.017088
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context provided includes the relevant classes and methods directly dealing with the serialization and deserialization of messages. The `MessageEncoder` and `MessageDecoder` classes in `django/contrib/messages/storage/cookie.py` are indeed crucial for understanding the behavior of `extra_tags` during these processes. The `SessionStorage` class in `django/contrib/messages/storage/session.py` also uses these classes, indicating that the issue affects multiple storage backends. The provided code includes the logic that determines how `extra_tags` is handled, both in terms of checking its truthiness and during the encoding and decoding processes. This context is sufficient to understand and potentially fix the issue regarding the incorrect handling of `extra_tags` when it is an empty string.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 2205,
          "output_tokens": 198,
          "retry_message": null,
          "completion_cost": 0.009585
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "MessageEncoder.default",
            "file_path": "django/contrib/messages/storage/cookie.py",
            "scratch_pad": "The issue is caused by the check for truthiness in `MessageEncoder.default`, which incorrectly converts an empty string `extra_tags` to `False`. To fix this, we need to explicitly check if `extra_tags` is not `None` and not just rely on its truthiness.",
            "instructions": "Update the `MessageEncoder.default` method to explicitly check if `extra_tags` is not `None` before appending it to the message list."
          },
          "output": {
            "span_id": "MessageEncoder.default",
            "end_line": 25,
            "file_path": "django/contrib/messages/storage/cookie.py",
            "start_line": 17,
            "instructions": "Update the `MessageEncoder.default` method to explicitly check if `extra_tags` is not `None` before appending it to the message list."
          },
          "input_tokens": 2560,
          "output_tokens": 156,
          "retry_message": null,
          "completion_cost": 0.010020000000000001
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "MessageEncoder.default",
        "end_line": 25,
        "file_path": "django/contrib/messages/storage/cookie.py",
        "max_tokens": 1000,
        "start_line": 17,
        "temperature": 1.6,
        "instructions": "Update the `MessageEncoder.default` method to explicitly check if `extra_tags` is not `None` before appending it to the message list.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```\n<replace>\n    def default(self, obj):\n        if isinstance(obj, Message):\n            # Using 0/1 here instead of False/True to produce more compact json\n            is_safedata = 1 if isinstance(obj.message, SafeData) else 0\n            message = [self.message_key, is_safedata, obj.level, obj.message]\n            if obj.extra_tags is not None:\n                message.append(obj.extra_tags)\n            return message\n        return super().default(obj)\n</replace>"
          },
          "output": {
            "diff": "--- django/contrib/messages/storage/cookie.py\n+++ django/contrib/messages/storage/cookie.py\n@@ -19,7 +19,7 @@\n             # Using 0/1 here instead of False/True to produce more compact json\n             is_safedata = 1 if isinstance(obj.message, SafeData) else 0\n             message = [self.message_key, is_safedata, obj.level, obj.message]\n-            if obj.extra_tags:\n+            if obj.extra_tags is not None:\n                 message.append(obj.extra_tags)\n             return message\n         return super().default(obj)\n",
            "message": "Applied the change to django/contrib/messages/storage/cookie.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 2318,
          "output_tokens": 131,
          "retry_message": null,
          "completion_cost": 0.008919
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- django/contrib/messages/storage/cookie.py\n+++ django/contrib/messages/storage/cookie.py\n@@ -19,7 +19,7 @@\n             # Using 0/1 here instead of False/True to produce more compact json\n             is_safedata = 1 if isinstance(obj.message, SafeData) else 0\n             message = [self.message_key, is_safedata, obj.level, obj.message]\n-            if obj.extra_tags:\n+            if obj.extra_tags is not None:\n                 message.append(obj.extra_tags)\n             return message\n         return super().default(obj)\n",
        "model": "deepseek-coder",
        "message": "Applied the change to django/contrib/messages/storage/cookie.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue has been resolved by correcting the check in `MessageEncoder.default`. This ensures that `extra_tags` remains an empty string instead of being converted to `None` during serialization and deserialization.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The initial fix in `MessageEncoder.default` has been applied successfully, ensuring that `extra_tags` is not converted to `None` when it is an empty string. The context now shows the relevant parts of the Django messages framework, including the `Message` class, its methods, and the `BaseStorage` class, along with the `MessageEncoder` and `MessageDecoder` classes. There are no further changes needed in the provided context to address the issue, as the problem was specifically with the serialization and deserialization logic in `MessageEncoder`. The fix ensures that the correct value of `extra_tags` is maintained through the serialization and deserialization process.",
            "instructions": null
          },
          "output": {
            "message": "The issue has been resolved by correcting the check in `MessageEncoder.default`. This ensures that `extra_tags` remains an empty string instead of being converted to `None` during serialization and deserialization."
          },
          "input_tokens": 2934,
          "output_tokens": 208,
          "retry_message": null,
          "completion_cost": 0.011922
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue has been resolved by correcting the check in `MessageEncoder.default`. This ensures that `extra_tags` remains an empty string instead of being converted to `None` during serialization and deserialization.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Messages framework incorrectly serializes/deserializes extra_tags when it's an empty string\nDescription\n\t\nWhen a message is serialised and then deserialised with any of the built in storage backends, then extra_tags==\"\" is converted to extra_tags==None. This is because MessageEncoder checks for the truthyness of extra_tags rather than checking it is not None.\nTo replicate this bug\n>>> from django.conf import settings\n>>> settings.configure() # Just to allow the following import\n>>> from django.contrib.messages.storage.base import Message\n>>> from django.contrib.messages.storage.cookie import MessageEncoder, MessageDecoder\n>>> original_message = Message(10, \"Here is a message\", extra_tags=\"\")\n>>> encoded_message = MessageEncoder().encode(original_message)\n>>> decoded_message = MessageDecoder().decode(encoded_message)\n>>> original_message.extra_tags == \"\"\nTrue\n>>> decoded_message.extra_tags is None\nTrue\nEffect of the bug in application behaviour\nThis error occurred in the wild with a template tag similar to the following:\n{% if x not in message.extra_tags %}\nWhen the message was displayed as part of a redirect, it had been serialised and deserialized which meant that extra_tags was None instead of the empty string. This caused an error.\nIt's important to note that this bug affects all of the standard API (messages.debug, messages.info etc. all have a default value of extra_tags equal to \"\").\n"
}