{
  "info": {
    "duration": 130.27328372001648,
    "submission": "diff --git a/django/contrib/messages/storage/cookie.py b/django/contrib/messages/storage/cookie.py\nindex 1d390c71dd..f17356f278 100644\n--- a/django/contrib/messages/storage/cookie.py\n+++ b/django/contrib/messages/storage/cookie.py\n@@ -19,7 +19,7 @@ class MessageEncoder(json.JSONEncoder):\n             # Using 0/1 here instead of False/True to produce more compact json\n             is_safedata = 1 if isinstance(obj.message, SafeData) else 0\n             message = [self.message_key, is_safedata, obj.level, obj.message]\n-            if obj.extra_tags:\n+            if obj.extra_tags is not None:  # Explicitly check for None\n                 message.append(obj.extra_tags)\n             return message\n         return super().default(obj)\n",
    "total_cost": 0.083133,
    "instance_id": "django__django-15347",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue at hand revolves around the serialization and deserialization of the `extra_tags` attribute in Django's messages framework. When `extra_tags` is an empty string, it gets incorrectly converted to `None` after serialization and deserialization. This is due to the `MessageEncoder` checking the truthiness of `extra_tags` instead of specifically checking if it's `None`. To address this, we need to focus our search on the `MessageEncoder` and `MessageDecoder` classes, as well as the methods involved in serialization and deserialization within the `cookie.py` and potentially other storage backends like `session.py`. Additionally, it would be beneficial to include the `api.py` file, which contains functions like `add_message`, as these functions might inherently involve serialization and deserialization.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "MessageEncoder",
                  "MessageDecoder"
                ],
                "code_snippet": null,
                "file_pattern": "django/contrib/messages/storage/cookie.py",
                "function_names": [
                  "encode",
                  "decode"
                ]
              },
              {
                "query": null,
                "class_names": [
                  "SessionStorage"
                ],
                "code_snippet": null,
                "file_pattern": "django/contrib/messages/storage/session.py",
                "function_names": []
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "django/contrib/messages/api.py",
                "function_names": [
                  "add_message"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 25,
                "span_id": "MessageDecoder.decode",
                "file_path": "django/contrib/messages/storage/cookie.py"
              },
              {
                "rank": 0,
                "tokens": 29,
                "span_id": "SessionStorage",
                "file_path": "django/contrib/messages/storage/session.py"
              },
              {
                "rank": 0,
                "tokens": 77,
                "span_id": "SessionStorage.__init__",
                "file_path": "django/contrib/messages/storage/session.py"
              },
              {
                "rank": 0,
                "tokens": 63,
                "span_id": "SessionStorage._get",
                "file_path": "django/contrib/messages/storage/session.py"
              },
              {
                "rank": 0,
                "tokens": 60,
                "span_id": "SessionStorage._store",
                "file_path": "django/contrib/messages/storage/session.py"
              },
              {
                "rank": 0,
                "tokens": 17,
                "span_id": "SessionStorage.serialize_messages",
                "file_path": "django/contrib/messages/storage/session.py"
              },
              {
                "rank": 0,
                "tokens": 27,
                "span_id": "SessionStorage.deserialize_messages",
                "file_path": "django/contrib/messages/storage/session.py"
              },
              {
                "rank": 0,
                "tokens": 130,
                "span_id": "add_message",
                "file_path": "django/contrib/messages/api.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "MessageEncoder",
                  "MessageDecoder"
                ],
                "code_snippet": null,
                "file_pattern": "django/contrib/messages/storage/cookie.py",
                "function_names": [
                  "encode",
                  "decode"
                ]
              },
              {
                "query": null,
                "class_names": [
                  "SessionStorage"
                ],
                "code_snippet": null,
                "file_pattern": "django/contrib/messages/storage/session.py",
                "function_names": []
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "django/contrib/messages/api.py",
                "function_names": [
                  "add_message"
                ]
              }
            ]
          },
          "input_tokens": 3017,
          "output_tokens": 330,
          "retry_message": null,
          "completion_cost": 0.014001
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 25,
            "span_id": "MessageDecoder.decode",
            "file_path": "django/contrib/messages/storage/cookie.py"
          },
          {
            "rank": 0,
            "tokens": 29,
            "span_id": "SessionStorage",
            "file_path": "django/contrib/messages/storage/session.py"
          },
          {
            "rank": 0,
            "tokens": 77,
            "span_id": "SessionStorage.__init__",
            "file_path": "django/contrib/messages/storage/session.py"
          },
          {
            "rank": 0,
            "tokens": 63,
            "span_id": "SessionStorage._get",
            "file_path": "django/contrib/messages/storage/session.py"
          },
          {
            "rank": 0,
            "tokens": 60,
            "span_id": "SessionStorage._store",
            "file_path": "django/contrib/messages/storage/session.py"
          },
          {
            "rank": 0,
            "tokens": 17,
            "span_id": "SessionStorage.serialize_messages",
            "file_path": "django/contrib/messages/storage/session.py"
          },
          {
            "rank": 0,
            "tokens": 27,
            "span_id": "SessionStorage.deserialize_messages",
            "file_path": "django/contrib/messages/storage/session.py"
          },
          {
            "rank": 0,
            "tokens": 130,
            "span_id": "add_message",
            "file_path": "django/contrib/messages/api.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue highlights that the `extra_tags` field in Django's messages framework is incorrectly serialized and deserialized when it's an empty string. This is due to the `MessageEncoder` not explicitly checking for the empty string but rather its truthiness. The provided search results offer insights into the serialization and deserialization processes, but they don't directly show the specific code in the `MessageEncoder` that causes this issue. Since the issue is about the handling of `extra_tags` during serialization, it's crucial to find and correct the problematic part in the `MessageEncoder` class. Based on the search results, the relevant files and spans to focus on would be those related to the `MessageDecoder` and `MessageEncoder` in `django/contrib/messages/storage/cookie.py` and their methods, particularly `decode` in `MessageDecoder` and anywhere in `MessageEncoder` that handles the serialization of `extra_tags`. However, the exact problematic span in `MessageEncoder` that checks for truthiness rather than explicit emptiness is still missing from the provided search results. To fix this issue, we would need to identify where in the `MessageEncoder` the serialization of `extra_tags` is performed and ensure it correctly handles the empty string scenario. Therefore, more search results or a direct examination of the `MessageEncoder` class in its entirety is necessary to pinpoint the exact location of the bug.",
            "identified_spans": null
          },
          "output": {
            "message": "The search returned 8 results. But unfortunately, I didn\u2019t find any of the search results relevant to the query.\n\nThe reported issue highlights that the `extra_tags` field in Django's messages framework is incorrectly serialized and deserialized when it's an empty string. This is due to the `MessageEncoder` not explicitly checking for the empty string but rather its truthiness. The provided search results offer insights into the serialization and deserialization processes, but they don't directly show the specific code in the `MessageEncoder` that causes this issue. Since the issue is about the handling of `extra_tags` during serialization, it's crucial to find and correct the problematic part in the `MessageEncoder` class. Based on the search results, the relevant files and spans to focus on would be those related to the `MessageDecoder` and `MessageEncoder` in `django/contrib/messages/storage/cookie.py` and their methods, particularly `decode` in `MessageDecoder` and anywhere in `MessageEncoder` that handles the serialization of `extra_tags`. However, the exact problematic span in `MessageEncoder` that checks for truthiness rather than explicit emptiness is still missing from the provided search results. To fix this issue, we would need to identify where in the `MessageEncoder` the serialization of `extra_tags` is performed and ensure it correctly handles the empty string scenario. Therefore, more search results or a direct examination of the `MessageEncoder` class in its entirety is necessary to pinpoint the exact location of the bug."
          },
          "input_tokens": 2477,
          "output_tokens": 318,
          "retry_message": null,
          "completion_cost": 0.012201
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "The search returned 8 results. But unfortunately, I didn\u2019t find any of the search results relevant to the query.\n\nThe reported issue highlights that the `extra_tags` field in Django's messages framework is incorrectly serialized and deserialized when it's an empty string. This is due to the `MessageEncoder` not explicitly checking for the empty string but rather its truthiness. The provided search results offer insights into the serialization and deserialization processes, but they don't directly show the specific code in the `MessageEncoder` that causes this issue. Since the issue is about the handling of `extra_tags` during serialization, it's crucial to find and correct the problematic part in the `MessageEncoder` class. Based on the search results, the relevant files and spans to focus on would be those related to the `MessageDecoder` and `MessageEncoder` in `django/contrib/messages/storage/cookie.py` and their methods, particularly `decode` in `MessageDecoder` and anywhere in `MessageEncoder` that handles the serialization of `extra_tags`. However, the exact problematic span in `MessageEncoder` that checks for truthiness rather than explicit emptiness is still missing from the provided search results. To fix this issue, we would need to identify where in the `MessageEncoder` the serialization of `extra_tags` is performed and ensure it correctly handles the empty string scenario. Therefore, more search results or a direct examination of the `MessageEncoder` class in its entirety is necessary to pinpoint the exact location of the bug.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The initial search results did not provide the specific code spans related to the incorrect handling of `extra_tags` during serialization and deserialization in Django's messages framework. To continue troubleshooting, we need to focus on the `MessageEncoder` class within the `django/contrib/messages/storage/cookie.py` file. The issue is likely within the `default` method of the `MessageEncoder` class, where the truthiness of `extra_tags` is checked rather than specifically handling the case where `extra_tags` is an empty string. Additionally, examining the `MessageDecoder` class and its `decode` method might also provide insights into how the deserialization process treats `extra_tags`.",
            "search_requests": [
              {
                "query": "MessageEncoder extra_tags empty string",
                "class_names": [
                  "MessageEncoder"
                ],
                "code_snippet": null,
                "file_pattern": "django/contrib/messages/storage/cookie.py",
                "function_names": [
                  "default"
                ]
              },
              {
                "query": "MessageDecoder extra_tags empty string",
                "class_names": [
                  "MessageDecoder"
                ],
                "code_snippet": null,
                "file_pattern": "django/contrib/messages/storage/cookie.py",
                "function_names": [
                  "decode"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 83,
                "span_id": "MessageEncoder.default",
                "file_path": "django/contrib/messages/storage/cookie.py"
              },
              {
                "rank": 0,
                "tokens": 32,
                "span_id": "MessageEncoder",
                "file_path": "django/contrib/messages/storage/cookie.py"
              },
              {
                "rank": 0,
                "tokens": 87,
                "span_id": "MessageDecoder.process_messages",
                "file_path": "django/contrib/messages/storage/cookie.py"
              },
              {
                "rank": 0,
                "tokens": 25,
                "span_id": "MessageDecoder.decode",
                "file_path": "django/contrib/messages/storage/cookie.py"
              },
              {
                "rank": 0,
                "tokens": 21,
                "span_id": "MessageDecoder",
                "file_path": "django/contrib/messages/storage/cookie.py"
              }
            ],
            "search_requests": [
              {
                "query": "MessageEncoder extra_tags empty string",
                "class_names": [
                  "MessageEncoder"
                ],
                "code_snippet": null,
                "file_pattern": "django/contrib/messages/storage/cookie.py",
                "function_names": [
                  "default"
                ]
              },
              {
                "query": "MessageDecoder extra_tags empty string",
                "class_names": [
                  "MessageDecoder"
                ],
                "code_snippet": null,
                "file_pattern": "django/contrib/messages/storage/cookie.py",
                "function_names": [
                  "decode"
                ]
              }
            ]
          },
          "input_tokens": 3766,
          "output_tokens": 342,
          "retry_message": null,
          "completion_cost": 0.016428
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 83,
            "span_id": "MessageEncoder.default",
            "file_path": "django/contrib/messages/storage/cookie.py"
          },
          {
            "rank": 0,
            "tokens": 32,
            "span_id": "MessageEncoder",
            "file_path": "django/contrib/messages/storage/cookie.py"
          },
          {
            "rank": 0,
            "tokens": 87,
            "span_id": "MessageDecoder.process_messages",
            "file_path": "django/contrib/messages/storage/cookie.py"
          },
          {
            "rank": 0,
            "tokens": 25,
            "span_id": "MessageDecoder.decode",
            "file_path": "django/contrib/messages/storage/cookie.py"
          },
          {
            "rank": 0,
            "tokens": 21,
            "span_id": "MessageDecoder",
            "file_path": "django/contrib/messages/storage/cookie.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about the incorrect serialization and deserialization of the 'extra_tags' attribute when it's an empty string in the Django Messages framework. Specifically, the bug occurs because the MessageEncoder checks for the truthiness of 'extra_tags' rather than explicitly checking if it is not None. This results in 'extra_tags' being converted to None after serialization and deserialization. The search results reveal crucial parts of the codebase that deal with the encoding and decoding of messages. The relevant code spans include the definition of the MessageEncoder and MessageDecoder classes, particularly the 'default' method in MessageEncoder and the 'process_messages' method in MessageDecoder. These sections directly handle the serialization and deserialization processes, making them highly relevant to the reported issue. By examining these code spans, it's clear that the current logic in MessageEncoder treats an empty string for 'extra_tags' as falsy and does not append it to the serialized message, which leads to the bug. Identifying these sections of the code will help in addressing the issue by ensuring that 'extra_tags' is explicitly checked for None rather than relying on its truthiness.",
            "identified_spans": [
              {
                "span_ids": [
                  "MessageEncoder.default",
                  "MessageDecoder.process_messages"
                ],
                "file_path": "django/contrib/messages/storage/cookie.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 1711,
          "output_tokens": 320,
          "retry_message": null,
          "completion_cost": 0.009933
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The provided file context includes the relevant code spans for the `MessageEncoder` and `MessageDecoder` classes within the Django messages framework. Specifically, the `MessageEncoder.default` method checks if `extra_tags` is truthy (which fails for an empty string) and the `MessageDecoder.process_messages` method constructs the `Message` object without specifically handling the case where `extra_tags` was an empty string. This matches the issue description about the incorrect serialization/deserialization of `extra_tags`.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 1608,
          "output_tokens": 147,
          "retry_message": null,
          "completion_cost": 0.0070290000000000005
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "MessageEncoder.default",
            "file_path": "django/contrib/messages/storage/cookie.py",
            "scratch_pad": "The issue arises because the `MessageEncoder` checks for truthiness of `obj.extra_tags` rather than checking if it is specifically an empty string. This results in `obj.extra_tags` being ignored during serialization when it's an empty string, and then during deserialization, it defaults to `None`.",
            "instructions": "Update the `MessageEncoder.default` method to handle the case where `obj.extra_tags` is an empty string, ensuring it gets serialized properly."
          },
          "output": {
            "span_id": "MessageEncoder.default",
            "end_line": 25,
            "file_path": "django/contrib/messages/storage/cookie.py",
            "start_line": 17,
            "instructions": "Update the `MessageEncoder.default` method to handle the case where `obj.extra_tags` is an empty string, ensuring it gets serialized properly."
          },
          "input_tokens": 1774,
          "output_tokens": 175,
          "retry_message": null,
          "completion_cost": 0.007947000000000001
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "MessageEncoder.default",
        "end_line": 25,
        "file_path": "django/contrib/messages/storage/cookie.py",
        "max_tokens": 1000,
        "start_line": 17,
        "temperature": 1.6,
        "instructions": "Update the `MessageEncoder.default` method to handle the case where `obj.extra_tags` is an empty string, ensuring it gets serialized properly.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n    def default(self, obj):\n        if isinstance(obj, Message):\n            # Using 0/1 here instead of False/True to produce more compact json\n            is_safedata = 1 if isinstance(obj.message, SafeData) else 0\n            message = [self.message_key, is_safedata, obj.level, obj.message]\n            if obj.extra_tags is not None:  # Explicitly check for None\n                message.append(obj.extra_tags)\n            return message\n        return super().default(obj)\n</replace>"
          },
          "output": {
            "diff": "--- django/contrib/messages/storage/cookie.py\n+++ django/contrib/messages/storage/cookie.py\n@@ -19,7 +19,7 @@\n             # Using 0/1 here instead of False/True to produce more compact json\n             is_safedata = 1 if isinstance(obj.message, SafeData) else 0\n             message = [self.message_key, is_safedata, obj.level, obj.message]\n-            if obj.extra_tags:\n+            if obj.extra_tags is not None:  # Explicitly check for None\n                 message.append(obj.extra_tags)\n             return message\n         return super().default(obj)\n",
            "message": "Applied the change to django/contrib/messages/storage/cookie.py.",
            "verification_errors": []
          },
          "input_tokens": 1465,
          "output_tokens": 136,
          "retry_message": null,
          "completion_cost": 0.006435000000000001
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- django/contrib/messages/storage/cookie.py\n+++ django/contrib/messages/storage/cookie.py\n@@ -19,7 +19,7 @@\n             # Using 0/1 here instead of False/True to produce more compact json\n             is_safedata = 1 if isinstance(obj.message, SafeData) else 0\n             message = [self.message_key, is_safedata, obj.level, obj.message]\n-            if obj.extra_tags:\n+            if obj.extra_tags is not None:  # Explicitly check for None\n                 message.append(obj.extra_tags)\n             return message\n         return super().default(obj)\n",
        "model": "deepseek-coder",
        "message": "Applied the change to django/contrib/messages/storage/cookie.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue has been addressed by ensuring that `extra_tags` is not explicitly checked for truthiness but rather for being `None`. This change will prevent the deserialization bug and ensure that `extra_tags` maintains its original value, whether it is an empty string or any other value.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The change to the `MessageEncoder.default` method ensures that the `extra_tags` attribute is serialized properly, even if it is an empty string. This will prevent the deserialized message from having `extra_tags` set to `None` when it was originally an empty string.",
            "instructions": null
          },
          "output": {
            "message": "The issue has been addressed by ensuring that `extra_tags` is not explicitly checked for truthiness but rather for being `None`. This change will prevent the deserialization bug and ensure that `extra_tags` maintains its original value, whether it is an empty string or any other value."
          },
          "input_tokens": 2153,
          "output_tokens": 180,
          "retry_message": null,
          "completion_cost": 0.009159
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue has been addressed by ensuring that `extra_tags` is not explicitly checked for truthiness but rather for being `None`. This change will prevent the deserialization bug and ensure that `extra_tags` maintains its original value, whether it is an empty string or any other value.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Messages framework incorrectly serializes/deserializes extra_tags when it's an empty string\nDescription\n\t\nWhen a message is serialised and then deserialised with any of the built in storage backends, then extra_tags==\"\" is converted to extra_tags==None. This is because MessageEncoder checks for the truthyness of extra_tags rather than checking it is not None.\nTo replicate this bug\n>>> from django.conf import settings\n>>> settings.configure() # Just to allow the following import\n>>> from django.contrib.messages.storage.base import Message\n>>> from django.contrib.messages.storage.cookie import MessageEncoder, MessageDecoder\n>>> original_message = Message(10, \"Here is a message\", extra_tags=\"\")\n>>> encoded_message = MessageEncoder().encode(original_message)\n>>> decoded_message = MessageDecoder().decode(encoded_message)\n>>> original_message.extra_tags == \"\"\nTrue\n>>> decoded_message.extra_tags is None\nTrue\nEffect of the bug in application behaviour\nThis error occurred in the wild with a template tag similar to the following:\n{% if x not in message.extra_tags %}\nWhen the message was displayed as part of a redirect, it had been serialised and deserialized which meant that extra_tags was None instead of the empty string. This caused an error.\nIt's important to note that this bug affects all of the standard API (messages.debug, messages.info etc. all have a default value of extra_tags equal to \"\").\n"
}