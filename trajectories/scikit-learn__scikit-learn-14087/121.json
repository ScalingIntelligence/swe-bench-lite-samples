{
  "info": {
    "duration": 522.6234669685364,
    "submission": "diff --git a/sklearn/linear_model/logistic.py b/sklearn/linear_model/logistic.py\nindex 1999f1dae..7d102d967 100644\n--- a/sklearn/linear_model/logistic.py\n+++ b/sklearn/linear_model/logistic.py\n@@ -2174,7 +2174,7 @@ class LogisticRegressionCV(LogisticRegression, BaseEstimator,\n                     w = np.mean([coefs_paths[i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n                 else:\n-                    w = np.mean([coefs_paths[:, i, best_indices[i], :]\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n \n                 best_indices_C = best_indices % len(self.Cs_)\n",
    "total_cost": 0.24482699999999996,
    "instance_id": "scikit-learn__scikit-learn-14087",
    "evaluation_name": "temperature_sweep_250_samples_50_problems_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves an IndexError thrown when using the LogisticRegressionCV class with refit=False. The stack trace indicates the error occurs in the fit method of LogisticRegressionCV within the file 'sklearn/linear_model/logistic.py'. The specific line causing the error is when np.mean is called with a list comprehension over folds, and an IndexError is raised due to an attempt to index an array with too many indices. The search should focus on the LogisticRegressionCV class within the logistic.py file to examine the logic related to handling folds and cross-validation paths.",
            "search_requests": [
              {
                "query": "IndexError: too many indices for array",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sklearn/linear_model/logistic.py",
                "function_names": [
                  "fit"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 2558,
                "span_id": "LogisticRegressionCV.fit",
                "file_path": "sklearn/linear_model/logistic.py"
              },
              {
                "rank": 5,
                "tokens": 1348,
                "span_id": "LogisticRegression.fit",
                "file_path": "sklearn/linear_model/logistic.py"
              }
            ],
            "search_requests": [
              {
                "query": "IndexError: too many indices for array",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sklearn/linear_model/logistic.py",
                "function_names": [
                  "fit"
                ]
              }
            ]
          },
          "input_tokens": 4862,
          "output_tokens": 207,
          "retry_message": null,
          "completion_cost": 0.017691
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 2558,
            "span_id": "LogisticRegressionCV.fit",
            "file_path": "sklearn/linear_model/logistic.py"
          },
          {
            "rank": 5,
            "tokens": 1348,
            "span_id": "LogisticRegression.fit",
            "file_path": "sklearn/linear_model/logistic.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is an IndexError thrown when using LogisticRegressionCV with refit=False. The error occurs in the `fit` method of LogisticRegressionCV, specifically when calculating the mean of coefficients across folds. The relevant code spans to investigate are those within the `fit` method of `LogisticRegressionCV`, as this is where the error is occurring. Additionally, the `fit` method of `LogisticRegression` is also relevant as `LogisticRegressionCV` inherits from it. The key element to focus on is the logic that handles the case when `refit=False` and how the coefficients are aggregated across folds. There are two main code spans to consider: one within the `LogisticRegressionCV.fit` method where the coefficients are being processed for the case when `refit=False`, and the other within the same method where the best indices and coefficients are determined. These spans are crucial for understanding and possibly resolving the IndexError mentioned in the issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "LogisticRegressionCV.fit",
                  "LogisticRegression.fit"
                ],
                "file_path": "sklearn/linear_model/logistic.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 6423,
          "output_tokens": 285,
          "retry_message": null,
          "completion_cost": 0.023544000000000002
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The issue involves an IndexError thrown when using the LogisticRegressionCV class with refit=False. The stack trace indicates the error occurs in the fit method of LogisticRegressionCV within the file 'sklearn/linear_model/logistic.py'. The specific line causing the error is when np.mean is called with a list comprehension over folds, and an IndexError is raised due to an attempt to index an array with too many indices. The provided file context contains the LogisticRegressionCV class and its fit method, which includes the logic for handling cross-validation and refitting. The relevant part of the code is present, but the specific fix for the IndexError ('too many indices for array') related to the np.mean call needs further investigation.",
            "search_suggestions": "Focus on the line in the fit method of LogisticRegressionCV where np.mean is called with a list comprehension over folds. Specifically, look at the indexing logic within the list comprehension to ensure it correctly handles the dimensions of the arrays involved in the operation."
          },
          "output": {
            "message": "Focus on the line in the fit method of LogisticRegressionCV where np.mean is called with a list comprehension over folds. Specifically, look at the indexing logic within the list comprehension to ensure it correctly handles the dimensions of the arrays involved in the operation."
          },
          "input_tokens": 6348,
          "output_tokens": 247,
          "retry_message": null,
          "completion_cost": 0.022749000000000002
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Focus on the line in the fit method of LogisticRegressionCV where np.mean is called with a list comprehension over folds. Specifically, look at the indexing logic within the list comprehension to ensure it correctly handles the dimensions of the arrays involved in the operation.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "Focusing on the fit method of LogisticRegressionCV, the error occurs when np.mean is called with a list comprehension over folds. The indexing logic within the list comprehension involves iterating over 'len(folds)' and accessing 'coefs_paths[:, i, best_indices[i], :]'. This operation is likely causing the IndexError due to an incorrect assumption about the dimensions of 'coefs_paths'. Ensuring that the dimensions are correctly handled and that 'best_indices[i]' provides valid indices for 'coefs_paths' is crucial.",
            "search_requests": [
              {
                "query": "np.mean([coefs_paths[:, i, best_indices[i], :] for i in range(len(folds))], axis=0)",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sklearn/linear_model/logistic.py",
                "function_names": [
                  "fit"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 2558,
                "span_id": "LogisticRegressionCV.fit",
                "file_path": "sklearn/linear_model/logistic.py"
              },
              {
                "rank": 9,
                "tokens": 1348,
                "span_id": "LogisticRegression.fit",
                "file_path": "sklearn/linear_model/logistic.py"
              }
            ],
            "search_requests": [
              {
                "query": "np.mean([coefs_paths[:, i, best_indices[i], :] for i in range(len(folds))], axis=0)",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sklearn/linear_model/logistic.py",
                "function_names": [
                  "fit"
                ]
              }
            ]
          },
          "input_tokens": 9701,
          "output_tokens": 251,
          "retry_message": null,
          "completion_cost": 0.032868
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 2558,
            "span_id": "LogisticRegressionCV.fit",
            "file_path": "sklearn/linear_model/logistic.py"
          },
          {
            "rank": 9,
            "tokens": 1348,
            "span_id": "LogisticRegression.fit",
            "file_path": "sklearn/linear_model/logistic.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves an IndexError when using LogisticRegressionCV with refit=False. The traceback points to a specific section of the code in the `fit` method of the LogisticRegressionCV class. In the provided search results, the relevant code spans are found in the 'LogisticRegressionCV.fit' span. This span contains the logic for handling the refit parameter and the section where the error occurs. Specifically, the identified code spans include the part where the best coefficients are averaged across folds when refit is False. This is crucial for understanding and resolving the reported IndexError.",
            "identified_spans": [
              {
                "span_ids": [
                  "LogisticRegressionCV.fit"
                ],
                "file_path": "sklearn/linear_model/logistic.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 11022,
          "output_tokens": 197,
          "retry_message": null,
          "completion_cost": 0.036021
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The reported issue related to an IndexError when setting refit=False in LogisticRegressionCV. The error occurs in the fit method when calculating the mean of coefficients across folds. The relevant code in the file context is mostly focused on the fit method of LogisticRegressionCV, which includes the logic for handling cross-validation and fitting the model. The part of the code where the error occurs (when refit=False) is present and directly involves accessing 'coefs_paths[:, i, best_indices[i], :]' within a list comprehension, leading to an IndexError due to incorrect array indexing. The provided file context adequately represents the functionality involved in resolving the issue.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 6344,
          "output_tokens": 178,
          "retry_message": null,
          "completion_cost": 0.021702
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "LogisticRegressionCV.fit",
            "file_path": "sklearn/linear_model/logistic.py",
            "scratch_pad": "The issue occurs when refit=False. The error is in the line where the average coefficients are calculated. When refit=False, the code tries to take the mean over axes that do not exist, leading to an IndexError. To fix this, we need to ensure that the indices used for taking the mean are correct based on the structure of the coefficients paths when refit=False.",
            "instructions": "Update the line that calculates the mean of the coefficients paths to ensure it correctly handles the dimensions when refit=False. Specifically, change the line: `w = np.mean([coefs_paths[:, i, best_indices[i], :] for i in range(len(folds))], axis=0)` to handle the case where refit=False properly. The fix should be based on understanding the structure of coefs_paths and ensuring the mean is taken over the correct dimensions."
          },
          "output": {
            "span_id": "LogisticRegressionCV.fit",
            "file_path": "sklearn/linear_model/logistic.py",
            "instructions": "Update the line that calculates the mean of the coefficients paths to ensure it correctly handles the dimensions when refit=False. Specifically, change the line: `w = np.mean([coefs_paths[:, i, best_indices[i], :] for i in range(len(folds))], axis=0)` to handle the case where refit=False properly. The fix should be based on understanding the structure of coefs_paths and ensuring the mean is taken over the correct dimensions."
          },
          "input_tokens": 6528,
          "output_tokens": 248,
          "retry_message": null,
          "completion_cost": 0.023304000000000002
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "LogisticRegressionCV.fit",
        "end_line": null,
        "file_path": "sklearn/linear_model/logistic.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Update the line that calculates the mean of the coefficients paths to ensure it correctly handles the dimensions when refit=False. Specifically, change the line: `w = np.mean([coefs_paths[:, i, best_indices[i], :] for i in range(len(folds))], axis=0)` to handle the case where refit=False properly. The fix should be based on understanding the structure of coefs_paths and ensuring the mean is taken over the correct dimensions.\n\nThe instructions specify updating the line that calculates the mean of the coefficients paths when refit=False. The current line `w = np.mean([coefs_paths[i, best_indices[i], :] for i in range(len(folds))], axis=0)` does not handle the dimensions correctly according to the instructions when multi_class='multinomial'. The correct line is identified in the provided code. This line is part of a larger conditional block that checks the value of `self.refit`, and then handles the 'ovr' and 'multinomial' cases for the `multi_class` parameter. Given the structur of the code and the instructions, the ideal lines to update align with the 'multinomial' case specifically.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 2178,
            "start_line": 2175,
            "scratch_pad": "The instructions specify updating the line that calculates the mean of the coefficients paths when refit=False. The current line `w = np.mean([coefs_paths[i, best_indices[i], :] for i in range(len(folds))], axis=0)` does not handle the dimensions correctly according to the instructions when multi_class='multinomial'. The correct line is identified in the provided code. This line is part of a larger conditional block that checks the value of `self.refit`, and then handles the 'ovr' and 'multinomial' cases for the `multi_class` parameter. Given the structur of the code and the instructions, the ideal lines to update align with the 'multinomial' case specifically."
          },
          "output": {
            "span_id": "LogisticRegressionCV.fit",
            "end_line": 2181,
            "file_path": "sklearn/linear_model/logistic.py",
            "start_line": 2171,
            "instructions": "Update the line that calculates the mean of the coefficients paths to ensure it correctly handles the dimensions when refit=False. Specifically, change the line: `w = np.mean([coefs_paths[:, i, best_indices[i], :] for i in range(len(folds))], axis=0)` to handle the case where refit=False properly. The fix should be based on understanding the structure of coefs_paths and ensuring the mean is taken over the correct dimensions.\n\nThe instructions specify updating the line that calculates the mean of the coefficients paths when refit=False. The current line `w = np.mean([coefs_paths[i, best_indices[i], :] for i in range(len(folds))], axis=0)` does not handle the dimensions correctly according to the instructions when multi_class='multinomial'. The correct line is identified in the provided code. This line is part of a larger conditional block that checks the value of `self.refit`, and then handles the 'ovr' and 'multinomial' cases for the `multi_class` parameter. Given the structur of the code and the instructions, the ideal lines to update align with the 'multinomial' case specifically."
          },
          "input_tokens": 5229,
          "output_tokens": 208,
          "retry_message": null,
          "completion_cost": 0.018807
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "LogisticRegressionCV.fit",
        "end_line": 2181,
        "file_path": "sklearn/linear_model/logistic.py",
        "max_tokens": 1000,
        "start_line": 2171,
        "temperature": 1.6,
        "instructions": "Update the line that calculates the mean of the coefficients paths to ensure it correctly handles the dimensions when refit=False. Specifically, change the line: `w = np.mean([coefs_paths[:, i, best_indices[i], :] for i in range(len(folds))], axis=0)` to handle the case where refit=False properly. The fix should be based on understanding the structure of coefs_paths and ensuring the mean is taken over the correct dimensions.\n\nThe instructions specify updating the line that calculates the mean of the coefficients paths when refit=False. The current line `w = np.mean([coefs_paths[i, best_indices[i], :] for i in range(len(folds))], axis=0)` does not handle the dimensions correctly according to the instructions when multi_class='multinomial'. The correct line is identified in the provided code. This line is part of a larger conditional block that checks the value of `self.refit`, and then handles the 'ovr' and 'multinomial' cases for the `multi_class` parameter. Given the structur of the code and the instructions, the ideal lines to update align with the 'multinomial' case specifically.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\n                # all coefficients corresponding to the best scores.\n                best_indices = np.argmax(scores, axis=1)\n                if self.multi_class == 'ovr':\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n                else:\n                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                 for i in range(len(folds))], axis=0)\n\n                best_indices_C = best_indices % len(self.Cs_)\n                self.C_.append(np.mean(self.Cs_[best_indices_C]))\n</replace>"
          },
          "output": {
            "diff": "--- sklearn/linear_model/logistic.py\n+++ sklearn/linear_model/logistic.py\n@@ -2174,7 +2174,7 @@\n                     w = np.mean([coefs_paths[i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n                 else:\n-                    w = np.mean([coefs_paths[:, i, best_indices[i], :]\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n \n                 best_indices_C = best_indices % len(self.Cs_)\n",
            "message": "Applied the change to sklearn/linear_model/logistic.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 7336,
          "output_tokens": 175,
          "retry_message": null,
          "completion_cost": 0.024633
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sklearn/linear_model/logistic.py\n+++ sklearn/linear_model/logistic.py\n@@ -2174,7 +2174,7 @@\n                     w = np.mean([coefs_paths[i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n                 else:\n-                    w = np.mean([coefs_paths[:, i, best_indices[i], :]\n+                    w = np.mean([coefs_paths[i, best_indices[i], :]\n                                  for i in range(len(folds))], axis=0)\n \n                 best_indices_C = best_indices % len(self.Cs_)\n",
        "model": "deepseek-coder",
        "message": "Applied the change to sklearn/linear_model/logistic.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The provided changes correct the issue by ensuring the indices used for taking the mean are correct based on the structure of the coefficients paths when refit=False. The changes have been applied as specified, and no further modifications are needed.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The changes made to the LogisticRegressionCV fit method address the issue with refit=False causing an IndexError. By modifying the line that calculates the mean of the coefficients paths, we ensure it correctly handles the dimensions when refit=False. This should resolve the reported issue.",
            "instructions": null
          },
          "output": {
            "message": "The provided changes correct the issue by ensuring the indices used for taking the mean are correct based on the structure of the coefficients paths when refit=False. The changes have been applied as specified, and no further modifications are needed."
          },
          "input_tokens": 7011,
          "output_tokens": 165,
          "retry_message": null,
          "completion_cost": 0.023508
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The provided changes correct the issue by ensuring the indices used for taking the mean are correct based on the structure of the coefficients paths when refit=False. The changes have been applied as specified, and no further modifications are needed.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "IndexError thrown with LogisticRegressionCV and refit=False\n#### Description\r\nThe following error is thrown when trying to estimate a regularization parameter via cross-validation, *without* refitting.\r\n\r\n#### Steps/Code to Reproduce\r\n```python\r\nimport sys\r\nimport sklearn\r\nfrom sklearn.linear_model import LogisticRegressionCV\r\nimport numpy as np\r\n\r\nnp.random.seed(29)\r\nX = np.random.normal(size=(1000, 3))\r\nbeta = np.random.normal(size=3)\r\nintercept = np.random.normal(size=None)\r\ny = np.sign(intercept + X @ beta)\r\n\r\nLogisticRegressionCV(\r\ncv=5,\r\nsolver='saga', # same error with 'liblinear'\r\ntol=1e-2,\r\nrefit=False).fit(X, y)\r\n```\r\n\r\n\r\n#### Expected Results\r\nNo error is thrown. \r\n\r\n#### Actual Results\r\n```\r\n---------------------------------------------------------------------------\r\nIndexError                                Traceback (most recent call last)\r\n<ipython-input-3-81609fd8d2ca> in <module>\r\n----> 1 LogisticRegressionCV(refit=False).fit(X, y)\r\n\r\n~/.pyenv/versions/3.6.7/envs/jupyter/lib/python3.6/site-packages/sklearn/linear_model/logistic.py in fit(self, X, y, sample_weight)\r\n   2192                 else:\r\n   2193                     w = np.mean([coefs_paths[:, i, best_indices[i], :]\r\n-> 2194                                  for i in range(len(folds))], axis=0)\r\n   2195 \r\n   2196                 best_indices_C = best_indices % len(self.Cs_)\r\n\r\n~/.pyenv/versions/3.6.7/envs/jupyter/lib/python3.6/site-packages/sklearn/linear_model/logistic.py in <listcomp>(.0)\r\n   2192                 else:\r\n   2193                     w = np.mean([coefs_paths[:, i, best_indices[i], :]\r\n-> 2194                                  for i in range(len(folds))], axis=0)\r\n   2195 \r\n   2196                 best_indices_C = best_indices % len(self.Cs_)\r\n\r\nIndexError: too many indices for array\r\n```\r\n\r\n#### Versions\r\n```\r\nSystem:\r\n    python: 3.6.7 (default, May 13 2019, 16:14:45)  [GCC 4.2.1 Compatible Apple LLVM 10.0.1 (clang-1001.0.46.4)]\r\nexecutable: /Users/tsweetser/.pyenv/versions/3.6.7/envs/jupyter/bin/python\r\n   machine: Darwin-18.6.0-x86_64-i386-64bit\r\n\r\nBLAS:\r\n    macros: NO_ATLAS_INFO=3, HAVE_CBLAS=None\r\n  lib_dirs: \r\ncblas_libs: cblas\r\n\r\nPython deps:\r\n       pip: 19.1.1\r\nsetuptools: 39.0.1\r\n   sklearn: 0.21.2\r\n     numpy: 1.15.1\r\n     scipy: 1.1.0\r\n    Cython: 0.29.6\r\n    pandas: 0.24.2\r\n```\n"
}