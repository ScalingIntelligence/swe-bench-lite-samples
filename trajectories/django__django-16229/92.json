{
  "info": {
    "duration": 134.84012150764465,
    "submission": "diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 6c6ee8cee7..c2539b8cde 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -2268,6 +2268,11 @@ class ModelAdmin(BaseModelAdmin):\n                     and \"{}-{}-DELETE\".format(formset.prefix, index) in request.POST\n                 )\n \n+            # Set show_hidden_initial=False on the form fields\n+            for form in formset.forms:\n+                for field_name in form.fields:\n+                    form.fields[field_name].show_hidden_initial = False\n+\n             # Bypass validation of each view-only inline form (since the form's\n             # data won't be in request.POST), unless the form was deleted.\n             if not inline.has_change_permission(request, obj if change else None):\n",
    "total_cost": 0.138171,
    "instance_id": "django__django-16229",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "To address the issue, we need to identify the code responsible for handling the default values in ModelForm fields, particularly when those defaults are callables. The issue seems to be related to how hidden inputs store initial values and how validation for an ArrayField is managed. We should also look into the logic for bypassing validation when resubmitting a form without modifications. Given the provided context, it would be useful to focus on the admin and form handling modules, specifically where ArrayField and ModelForm interactions are involved.",
            "search_requests": [
              {
                "query": "ModelForm default value handling callable",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/admin/**/*.py",
                "function_names": []
              },
              {
                "query": "ArrayField validation bypass",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/forms/models.py",
                "function_names": []
              },
              {
                "query": "hidden input initial value ArrayField",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/contrib/postgres/fields/array.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 103,
                "span_id": "ModelAdmin.get_changelist_form",
                "file_path": "django/contrib/admin/options.py"
              },
              {
                "rank": 1,
                "tokens": 310,
                "span_id": "ModelAdmin._create_formsets",
                "file_path": "django/contrib/admin/options.py"
              },
              {
                "rank": 1,
                "tokens": 96,
                "span_id": "ModelAdmin.get_formset_kwargs",
                "file_path": "django/contrib/admin/options.py"
              },
              {
                "rank": 2,
                "tokens": 19,
                "span_id": "BaseModelAdmin.check",
                "file_path": "django/contrib/admin/options.py"
              },
              {
                "rank": 2,
                "tokens": 100,
                "span_id": "BaseModelAdmin",
                "file_path": "django/contrib/admin/options.py"
              },
              {
                "rank": 2,
                "tokens": 68,
                "span_id": "BaseModelAdmin.__init__",
                "file_path": "django/contrib/admin/options.py"
              },
              {
                "rank": 3,
                "tokens": 45,
                "span_id": "BaseModelAdmin.get_fieldsets",
                "file_path": "django/contrib/admin/options.py"
              },
              {
                "rank": 3,
                "tokens": 37,
                "span_id": "BaseModelAdmin.get_ordering",
                "file_path": "django/contrib/admin/options.py"
              },
              {
                "rank": 3,
                "tokens": 22,
                "span_id": "BaseModelAdmin.get_exclude",
                "file_path": "django/contrib/admin/options.py"
              },
              {
                "rank": 0,
                "tokens": 42,
                "span_id": "modelform_defines_fields",
                "file_path": "django/forms/models.py"
              },
              {
                "rank": 0,
                "tokens": 61,
                "span_id": "ModelMultipleChoiceField.prepare_value",
                "file_path": "django/forms/models.py"
              },
              {
                "rank": 0,
                "tokens": 74,
                "span_id": "ModelMultipleChoiceField.has_changed",
                "file_path": "django/forms/models.py"
              },
              {
                "rank": 1,
                "tokens": 345,
                "span_id": "BaseModelForm._get_validation_exclusions",
                "file_path": "django/forms/models.py"
              },
              {
                "rank": 2,
                "tokens": 107,
                "span_id": "ModelMultipleChoiceField.clean",
                "file_path": "django/forms/models.py"
              },
              {
                "rank": 3,
                "tokens": 258,
                "span_id": "ModelMultipleChoiceField._check_values",
                "file_path": "django/forms/models.py"
              },
              {
                "rank": 4,
                "tokens": 142,
                "span_id": "BaseModelForm._save_m2m",
                "file_path": "django/forms/models.py"
              },
              {
                "rank": 4,
                "tokens": 62,
                "span_id": "BaseModelForm.validate_unique",
                "file_path": "django/forms/models.py"
              },
              {
                "rank": 5,
                "tokens": 11,
                "span_id": "ModelChoiceIteratorValue.__str__",
                "file_path": "django/forms/models.py"
              },
              {
                "rank": 0,
                "tokens": 104,
                "span_id": "imports",
                "file_path": "django/contrib/postgres/fields/array.py"
              },
              {
                "rank": 1,
                "tokens": 66,
                "span_id": "ArrayField",
                "file_path": "django/contrib/postgres/fields/array.py"
              },
              {
                "rank": 1,
                "tokens": 31,
                "span_id": "ArrayField._choices_is_value",
                "file_path": "django/contrib/postgres/fields/array.py"
              },
              {
                "rank": 1,
                "tokens": 25,
                "span_id": "ArrayField.model_1",
                "file_path": "django/contrib/postgres/fields/array.py"
              },
              {
                "rank": 1,
                "tokens": 43,
                "span_id": "ArrayField.model",
                "file_path": "django/contrib/postgres/fields/array.py"
              },
              {
                "rank": 2,
                "tokens": 30,
                "span_id": "ArrayField.db_parameters",
                "file_path": "django/contrib/postgres/fields/array.py"
              },
              {
                "rank": 2,
                "tokens": 66,
                "span_id": "ArrayField.value_to_string",
                "file_path": "django/contrib/postgres/fields/array.py"
              },
              {
                "rank": 2,
                "tokens": 43,
                "span_id": "ArrayField._from_db_value",
                "file_path": "django/contrib/postgres/fields/array.py"
              },
              {
                "rank": 2,
                "tokens": 50,
                "span_id": "ArrayField.get_db_prep_value",
                "file_path": "django/contrib/postgres/fields/array.py"
              }
            ],
            "search_requests": [
              {
                "query": "ModelForm default value handling callable",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/admin/**/*.py",
                "function_names": []
              },
              {
                "query": "ArrayField validation bypass",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/forms/models.py",
                "function_names": []
              },
              {
                "query": "hidden input initial value ArrayField",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/contrib/postgres/fields/array.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 3102,
          "output_tokens": 239,
          "retry_message": null,
          "completion_cost": 0.012891
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 103,
            "span_id": "ModelAdmin.get_changelist_form",
            "file_path": "django/contrib/admin/options.py"
          },
          {
            "rank": 1,
            "tokens": 310,
            "span_id": "ModelAdmin._create_formsets",
            "file_path": "django/contrib/admin/options.py"
          },
          {
            "rank": 1,
            "tokens": 96,
            "span_id": "ModelAdmin.get_formset_kwargs",
            "file_path": "django/contrib/admin/options.py"
          },
          {
            "rank": 2,
            "tokens": 19,
            "span_id": "BaseModelAdmin.check",
            "file_path": "django/contrib/admin/options.py"
          },
          {
            "rank": 2,
            "tokens": 100,
            "span_id": "BaseModelAdmin",
            "file_path": "django/contrib/admin/options.py"
          },
          {
            "rank": 2,
            "tokens": 68,
            "span_id": "BaseModelAdmin.__init__",
            "file_path": "django/contrib/admin/options.py"
          },
          {
            "rank": 3,
            "tokens": 45,
            "span_id": "BaseModelAdmin.get_fieldsets",
            "file_path": "django/contrib/admin/options.py"
          },
          {
            "rank": 3,
            "tokens": 37,
            "span_id": "BaseModelAdmin.get_ordering",
            "file_path": "django/contrib/admin/options.py"
          },
          {
            "rank": 3,
            "tokens": 22,
            "span_id": "BaseModelAdmin.get_exclude",
            "file_path": "django/contrib/admin/options.py"
          },
          {
            "rank": 0,
            "tokens": 42,
            "span_id": "modelform_defines_fields",
            "file_path": "django/forms/models.py"
          },
          {
            "rank": 0,
            "tokens": 61,
            "span_id": "ModelMultipleChoiceField.prepare_value",
            "file_path": "django/forms/models.py"
          },
          {
            "rank": 0,
            "tokens": 74,
            "span_id": "ModelMultipleChoiceField.has_changed",
            "file_path": "django/forms/models.py"
          },
          {
            "rank": 1,
            "tokens": 345,
            "span_id": "BaseModelForm._get_validation_exclusions",
            "file_path": "django/forms/models.py"
          },
          {
            "rank": 2,
            "tokens": 107,
            "span_id": "ModelMultipleChoiceField.clean",
            "file_path": "django/forms/models.py"
          },
          {
            "rank": 3,
            "tokens": 258,
            "span_id": "ModelMultipleChoiceField._check_values",
            "file_path": "django/forms/models.py"
          },
          {
            "rank": 4,
            "tokens": 142,
            "span_id": "BaseModelForm._save_m2m",
            "file_path": "django/forms/models.py"
          },
          {
            "rank": 4,
            "tokens": 62,
            "span_id": "BaseModelForm.validate_unique",
            "file_path": "django/forms/models.py"
          },
          {
            "rank": 5,
            "tokens": 11,
            "span_id": "ModelChoiceIteratorValue.__str__",
            "file_path": "django/forms/models.py"
          },
          {
            "rank": 0,
            "tokens": 104,
            "span_id": "imports",
            "file_path": "django/contrib/postgres/fields/array.py"
          },
          {
            "rank": 1,
            "tokens": 66,
            "span_id": "ArrayField",
            "file_path": "django/contrib/postgres/fields/array.py"
          },
          {
            "rank": 1,
            "tokens": 31,
            "span_id": "ArrayField._choices_is_value",
            "file_path": "django/contrib/postgres/fields/array.py"
          },
          {
            "rank": 1,
            "tokens": 25,
            "span_id": "ArrayField.model_1",
            "file_path": "django/contrib/postgres/fields/array.py"
          },
          {
            "rank": 1,
            "tokens": 43,
            "span_id": "ArrayField.model",
            "file_path": "django/contrib/postgres/fields/array.py"
          },
          {
            "rank": 2,
            "tokens": 30,
            "span_id": "ArrayField.db_parameters",
            "file_path": "django/contrib/postgres/fields/array.py"
          },
          {
            "rank": 2,
            "tokens": 66,
            "span_id": "ArrayField.value_to_string",
            "file_path": "django/contrib/postgres/fields/array.py"
          },
          {
            "rank": 2,
            "tokens": 43,
            "span_id": "ArrayField._from_db_value",
            "file_path": "django/contrib/postgres/fields/array.py"
          },
          {
            "rank": 2,
            "tokens": 50,
            "span_id": "ArrayField.get_db_prep_value",
            "file_path": "django/contrib/postgres/fields/array.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves a ModelForm with callable defaults for an ArrayField in Django's admin interface, where validation bypasses on the second form submission. Key points from the issue are: 1) The use of ArrayField with a callable default. 2) The bypass of validation on the second submission. 3) The role of hidden input fields in storing initial values.\n\nReviewing the search results, several relevant code spans emerge:\n\n1) 'django/contrib/admin/options.py' - This file contains the implementation of the ModelAdmin class, which is directly related to admin interface functionality. Within this class, the 'get_formset_kwargs' and '_create_formsets' spans are relevant as they deal with formset creation and handling, which is where the validation issue might stem from.\n\n2) 'django/forms/models.py' - The file where model form handling is defined. Specifically, the 'BaseModelForm' class and its methods such as '_get_validation_exclusions', 'validate_unique', and '_save_m2m' are relevant as they handle form validation and saving operations.\n\n3) 'django/contrib/postgres/fields/array.py' - This file deals specifically with the ArrayField, the field type in question for the issue. The 'ArrayField' class and its methods are relevant, particularly those handling database preparation and value transformation, such as 'get_db_prep_value' and '_from_db_value'.\n\nThese code spans provide a detailed look into the Django core code responsible for model form handling, formset processing, and the specific handling of ArrayField. Understanding these will be crucial for addressing the issue of validation bypassing with ArrayFields in Django's admin.",
            "identified_spans": [
              {
                "span_ids": [
                  "ModelAdmin.get_formset_kwargs",
                  "ModelAdmin._create_formsets"
                ],
                "file_path": "django/contrib/admin/options.py"
              },
              {
                "span_ids": [
                  "BaseModelForm._get_validation_exclusions",
                  "BaseModelForm.validate_unique",
                  "BaseModelForm._save_m2m"
                ],
                "file_path": "django/forms/models.py"
              },
              {
                "span_ids": [
                  "ArrayField.get_db_prep_value",
                  "ArrayField._from_db_value"
                ],
                "file_path": "django/contrib/postgres/fields/array.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 6203,
          "output_tokens": 596,
          "retry_message": null,
          "completion_cost": 0.027549
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The provided file context includes relevant code from Django's admin and form handling modules, specifically focusing on ModelAdmin, BaseModelForm, and ArrayField. These sections of the code are essential for understanding how forms are rendered, validated, and processed, as well as how special fields like ArrayField handle their data. The issue describes problems with default values and validation bypass, which are strongly related to the behaviors and interactions described in these sections. Therefore, while not every specific method or detail of the issue may be explicitly present, the overall functionality at play is well-represented in the file context.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 6342,
          "output_tokens": 158,
          "retry_message": null,
          "completion_cost": 0.021396000000000002
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "ModelAdmin._create_formsets",
            "file_path": "django/contrib/admin/options.py",
            "scratch_pad": "The issue states that when using an ArrayField with some initial validation, the validation can be bypassed if the form is submitted again without modification. This seems to be related to the hidden input containing the initial value. To address this, the suggestion is to force show_hidden_initial=False on the field in the form init. The relevant files to modify are admin.py and forms.py within the django/ contrib/admin and django/forms directories respectively.",
            "instructions": "Modify the `ModelAdmin._create_formsets` method to set `show_hidden_initial=False` on the form fields to prevent hidden inputs containing initial values from bypassed validation."
          },
          "output": {
            "span_id": "ModelAdmin._create_formsets",
            "end_line": 2281,
            "file_path": "django/contrib/admin/options.py",
            "start_line": 2248,
            "instructions": "Modify the `ModelAdmin._create_formsets` method to set `show_hidden_initial=False` on the form fields to prevent hidden inputs containing initial values from bypassed validation."
          },
          "input_tokens": 6717,
          "output_tokens": 197,
          "retry_message": null,
          "completion_cost": 0.023106
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "ModelAdmin._create_formsets",
        "end_line": 2281,
        "file_path": "django/contrib/admin/options.py",
        "max_tokens": 1000,
        "start_line": 2248,
        "temperature": 1.6,
        "instructions": "Modify the `ModelAdmin._create_formsets` method to set `show_hidden_initial=False` on the form fields to prevent hidden inputs containing initial values from bypassed validation.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```html\n<replace>\n    def _create_formsets(self, request, obj, change):\n        \"Helper function to generate formsets for add/change_view.\"\n        formsets = []\n        inline_instances = []\n        prefixes = {}\n        get_formsets_args = [request]\n        if change:\n            get_formsets_args.append(obj)\n        for FormSet, inline in self.get_formsets_with_inlines(*get_formsets_args):\n            prefix = FormSet.get_default_prefix()\n            prefixes[prefix] = prefixes.get(prefix, 0) + 1\n            if prefixes[prefix] != 1 or not prefix:\n                prefix = \"%s-%s\" % (prefix, prefixes[prefix])\n            formset_params = self.get_formset_kwargs(request, obj, inline, prefix)\n            formset = FormSet(**formset_params)\n\n            def user_deleted_form(request, obj, formset, index, inline):\n                \"\"\"Return whether or not the user deleted the form.\"\"\"\n                return (\n                    inline.has_delete_permission(request, obj)\n                    and \"{}-{}-DELETE\".format(formset.prefix, index) in request.POST\n                )\n\n            # Set show_hidden_initial=False on the form fields\n            for form in formset.forms:\n                for field_name in form.fields:\n                    form.fields[field_name].show_hidden_initial = False\n\n            # Bypass validation of each view-only inline form (since the form's\n            # data won't be in request.POST), unless the form was deleted.\n            if not inline.has_change_permission(request, obj if change else None):\n                for index, form in enumerate(formset.initial_forms):\n                    if user_deleted_form(request, obj, formset, index, inline):\n                        continue\n                    form._errors = {}\n                    form.cleaned_data = form.initial\n            formsets.append(formset)\n            inline_instances.append(inline)\n        return formsets, inline_instances\n</replace>"
          },
          "output": {
            "diff": "--- django/contrib/admin/options.py\n+++ django/contrib/admin/options.py\n@@ -2268,6 +2268,11 @@\n                     and \"{}-{}-DELETE\".format(formset.prefix, index) in request.POST\n                 )\n \n+            # Set show_hidden_initial=False on the form fields\n+            for form in formset.forms:\n+                for field_name in form.fields:\n+                    form.fields[field_name].show_hidden_initial = False\n+\n             # Bypass validation of each view-only inline form (since the form's\n             # data won't be in request.POST), unless the form was deleted.\n             if not inline.has_change_permission(request, obj if change else None):\n",
            "message": "Applied the change to django/contrib/admin/options.py.\n\n<scratch_pad>\n```html\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 7112,
          "output_tokens": 495,
          "retry_message": null,
          "completion_cost": 0.028761000000000002
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- django/contrib/admin/options.py\n+++ django/contrib/admin/options.py\n@@ -2268,6 +2268,11 @@\n                     and \"{}-{}-DELETE\".format(formset.prefix, index) in request.POST\n                 )\n \n+            # Set show_hidden_initial=False on the form fields\n+            for form in formset.forms:\n+                for field_name in form.fields:\n+                    form.fields[field_name].show_hidden_initial = False\n+\n             # Bypass validation of each view-only inline form (since the form's\n             # data won't be in request.POST), unless the form was deleted.\n             if not inline.has_change_permission(request, obj if change else None):\n",
        "model": "deepseek-coder",
        "message": "Applied the change to django/contrib/admin/options.py.\n\n<scratch_pad>\n```html\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue has been resolved by applying the necessary changes. The fix ensures that form fields within the admin formsets do not display hidden initial values, thus preserving form validation integrity on subsequent submissions.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The proposed change to django/contrib/admin/options.py has been applied successfully. The change ensures that the `show_hidden_initial` attribute is set to `False` for each field in the formset's forms, which prevents hidden inputs containing initial values from bypassing validation. This solution directly addresses the reported issue related to validation bypassing on second form submission. The modification is confined to the context provided and aligns with the issue description.",
            "instructions": null
          },
          "output": {
            "message": "The issue has been resolved by applying the necessary changes. The fix ensures that form fields within the admin formsets do not display hidden initial values, thus preserving form validation integrity on subsequent submissions."
          },
          "input_tokens": 7196,
          "output_tokens": 192,
          "retry_message": null,
          "completion_cost": 0.024468
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue has been resolved by applying the necessary changes. The fix ensures that form fields within the admin formsets do not display hidden initial values, thus preserving form validation integrity on subsequent submissions.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "ModelForm fields with callable defaults don't correctly propagate default values\nDescription\n\t\nWhen creating an object via the admin, if an inline contains an ArrayField in error, the validation will be bypassed (and the inline dismissed) if we submit the form a second time (without modification).\ngo to /admin/my_app/thing/add/\ntype anything in plop\nsubmit -> it shows an error on the inline\nsubmit again -> no errors, plop become unfilled\n# models.py\nclass Thing(models.Model):\n\tpass\nclass RelatedModel(models.Model):\n\tthing = models.ForeignKey(Thing, on_delete=models.CASCADE)\n\tplop = ArrayField(\n\t\tmodels.CharField(max_length=42),\n\t\tdefault=list,\n\t)\n# admin.py\nclass RelatedModelForm(forms.ModelForm):\n\tdef clean(self):\n\t\traise ValidationError(\"whatever\")\nclass RelatedModelInline(admin.TabularInline):\n\tform = RelatedModelForm\n\tmodel = RelatedModel\n\textra = 1\n@admin.register(Thing)\nclass ThingAdmin(admin.ModelAdmin):\n\tinlines = [\n\t\tRelatedModelInline\n\t]\nIt seems related to the hidden input containing the initial value:\n<input type=\"hidden\" name=\"initial-relatedmodel_set-0-plop\" value=\"test\" id=\"initial-relatedmodel_set-0-id_relatedmodel_set-0-plop\">\nI can fix the issue locally by forcing show_hidden_initial=False on the field (in the form init)\n"
}