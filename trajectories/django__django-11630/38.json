{
  "info": {
    "duration": 188.79143714904785,
    "submission": "diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py\nindex 5c2266ca1d..6cf2ae8b9b 100644\n--- a/django/core/checks/model_checks.py\n+++ b/django/core/checks/model_checks.py\n@@ -37,14 +37,20 @@ def check_all_models(app_configs=None, **kwargs):\n             constraints[model_constraint.name].append(model._meta.label)\n     for db_table, model_labels in db_table_models.items():\n         if len(model_labels) != 1:\n-            errors.append(\n-                Error(\n-                    \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n-                    obj=db_table,\n-                    id='models.E028',\n-                )\n-            )\n+            model_databases = defaultdict(list)\n+            for model_label in model_labels:\n+                model = apps.get_model(model_label)\n+                model_databases[model._meta.database].append(model_label)\n+            for database, db_model_labels in model_databases.items():\n+                if len(db_model_labels) != 1:\n+                    errors.append(\n+                        Error(\n+                            \"db_table '%s' is used by multiple models on the same database: %s.\"\n+                            % (db_table, ', '.join(db_model_labels)),\n+                            obj=db_table,\n+                            id='models.E028'\n+                        )\n+                    )\n     for index_name, model_labels in indexes.items():\n         if len(model_labels) > 1:\n             model_labels = set(model_labels)\n",
    "total_cost": 0.152517,
    "instance_id": "django__django-11630",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue revolves around Django's behavior when different apps with different models share the same table name. Given the error message and description, it appears that Django 2.2 enforces a stricter rule against duplicate table names across different models. The search should focus on the code sections related to model and database table handling, especially where uniqueness checks or table name assignments occur. The identified files and their contents suggest areas in Django's codebase that manage these interactions, so searches should be concentrated around these areas.",
            "search_requests": [
              {
                "query": "multiple models with the same db_table",
                "class_names": [
                  "ModelBase",
                  "Model",
                  "ManyToManyField",
                  "BaseDatabaseSchemaEditor",
                  "BaseDatabaseIntrospection",
                  "Index",
                  "Options",
                  "DatabaseSchemaEditor",
                  "AppConfig",
                  "ConnectionRouter"
                ],
                "code_snippet": null,
                "file_pattern": "**/db/models/**/*.py",
                "function_names": [
                  "_check_column_name_clashes",
                  "_perform_unique_checks",
                  "alter_db_table",
                  "django_table_names",
                  "set_name_with_model",
                  "contribute_to_class",
                  "_remake_table",
                  "get_model",
                  "allow_relation",
                  "allow_migrate"
                ]
              },
              {
                "query": "check all models for table uniqueness",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/core/checks/**/*.py",
                "function_names": [
                  "check_all_models"
                ]
              },
              {
                "query": "handle duplicate table names during migrations",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/migrations/**/*.py",
                "function_names": [
                  "_get_app_label_and_model_name",
                  "render_multiple",
                  "database_forwards",
                  "database_backwards",
                  "references_model",
                  "describe"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 289,
                "span_id": "ManyToManyField._check_table_uniqueness",
                "file_path": "django/db/models/fields/related.py"
              },
              {
                "rank": 6,
                "tokens": 26,
                "span_id": "ManyToManyField.get_path_info",
                "file_path": "django/db/models/fields/related.py"
              },
              {
                "rank": 6,
                "tokens": 27,
                "span_id": "ManyToManyField.get_reverse_path_info",
                "file_path": "django/db/models/fields/related.py"
              },
              {
                "rank": 6,
                "tokens": 107,
                "span_id": "ManyToManyField._get_m2m_db_table",
                "file_path": "django/db/models/fields/related.py"
              },
              {
                "rank": 1,
                "tokens": 215,
                "span_id": "Model._check_m2m_through_same_relationship",
                "file_path": "django/db/models/base.py"
              },
              {
                "rank": 2,
                "tokens": 154,
                "span_id": "Model._check_model_name_db_lookup_clashes",
                "file_path": "django/db/models/base.py"
              },
              {
                "rank": 3,
                "tokens": 155,
                "span_id": "Model._check_column_name_clashes",
                "file_path": "django/db/models/base.py"
              },
              {
                "rank": 4,
                "tokens": 155,
                "span_id": "Model._check_constraints",
                "file_path": "django/db/models/base.py"
              },
              {
                "rank": 5,
                "tokens": 505,
                "span_id": "Model._check_long_column_names",
                "file_path": "django/db/models/base.py"
              },
              {
                "rank": 0,
                "tokens": 499,
                "span_id": "check_all_models",
                "file_path": "django/core/checks/model_checks.py"
              },
              {
                "rank": 1,
                "tokens": 35,
                "span_id": "AlterModelTable.database_backwards",
                "file_path": "django/db/migrations/operations/models.py"
              },
              {
                "rank": 1,
                "tokens": 186,
                "span_id": "AlterModelTable.database_forwards",
                "file_path": "django/db/migrations/operations/models.py"
              },
              {
                "rank": 1,
                "tokens": 36,
                "span_id": "AlterModelTable.describe",
                "file_path": "django/db/migrations/operations/models.py"
              },
              {
                "rank": 2,
                "tokens": 102,
                "span_id": "RenameModel.database_backwards",
                "file_path": "django/db/migrations/operations/models.py"
              },
              {
                "rank": 2,
                "tokens": 36,
                "span_id": "RenameModel.references_model",
                "file_path": "django/db/migrations/operations/models.py"
              },
              {
                "rank": 2,
                "tokens": 24,
                "span_id": "RenameModel.describe",
                "file_path": "django/db/migrations/operations/models.py"
              },
              {
                "rank": 5,
                "tokens": 450,
                "span_id": "RenameModel.database_forwards",
                "file_path": "django/db/migrations/operations/models.py"
              },
              {
                "rank": 6,
                "tokens": 19,
                "span_id": "ModelOperation.references_model",
                "file_path": "django/db/migrations/operations/models.py"
              },
              {
                "rank": 7,
                "tokens": 62,
                "span_id": "_get_app_label_and_model_name",
                "file_path": "django/db/migrations/state.py"
              }
            ],
            "search_requests": [
              {
                "query": "multiple models with the same db_table",
                "class_names": [
                  "ModelBase",
                  "Model",
                  "ManyToManyField",
                  "BaseDatabaseSchemaEditor",
                  "BaseDatabaseIntrospection",
                  "Index",
                  "Options",
                  "DatabaseSchemaEditor",
                  "AppConfig",
                  "ConnectionRouter"
                ],
                "code_snippet": null,
                "file_pattern": "**/db/models/**/*.py",
                "function_names": [
                  "_check_column_name_clashes",
                  "_perform_unique_checks",
                  "alter_db_table",
                  "django_table_names",
                  "set_name_with_model",
                  "contribute_to_class",
                  "_remake_table",
                  "get_model",
                  "allow_relation",
                  "allow_migrate"
                ]
              },
              {
                "query": "check all models for table uniqueness",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/core/checks/**/*.py",
                "function_names": [
                  "check_all_models"
                ]
              },
              {
                "query": "handle duplicate table names during migrations",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/migrations/**/*.py",
                "function_names": [
                  "_get_app_label_and_model_name",
                  "render_multiple",
                  "database_forwards",
                  "database_backwards",
                  "references_model",
                  "describe"
                ]
              }
            ]
          },
          "input_tokens": 3231,
          "output_tokens": 498,
          "retry_message": null,
          "completion_cost": 0.017163
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 289,
            "span_id": "ManyToManyField._check_table_uniqueness",
            "file_path": "django/db/models/fields/related.py"
          },
          {
            "rank": 6,
            "tokens": 26,
            "span_id": "ManyToManyField.get_path_info",
            "file_path": "django/db/models/fields/related.py"
          },
          {
            "rank": 6,
            "tokens": 27,
            "span_id": "ManyToManyField.get_reverse_path_info",
            "file_path": "django/db/models/fields/related.py"
          },
          {
            "rank": 6,
            "tokens": 107,
            "span_id": "ManyToManyField._get_m2m_db_table",
            "file_path": "django/db/models/fields/related.py"
          },
          {
            "rank": 1,
            "tokens": 215,
            "span_id": "Model._check_m2m_through_same_relationship",
            "file_path": "django/db/models/base.py"
          },
          {
            "rank": 2,
            "tokens": 154,
            "span_id": "Model._check_model_name_db_lookup_clashes",
            "file_path": "django/db/models/base.py"
          },
          {
            "rank": 3,
            "tokens": 155,
            "span_id": "Model._check_column_name_clashes",
            "file_path": "django/db/models/base.py"
          },
          {
            "rank": 4,
            "tokens": 155,
            "span_id": "Model._check_constraints",
            "file_path": "django/db/models/base.py"
          },
          {
            "rank": 5,
            "tokens": 505,
            "span_id": "Model._check_long_column_names",
            "file_path": "django/db/models/base.py"
          },
          {
            "rank": 0,
            "tokens": 499,
            "span_id": "check_all_models",
            "file_path": "django/core/checks/model_checks.py"
          },
          {
            "rank": 1,
            "tokens": 35,
            "span_id": "AlterModelTable.database_backwards",
            "file_path": "django/db/migrations/operations/models.py"
          },
          {
            "rank": 1,
            "tokens": 186,
            "span_id": "AlterModelTable.database_forwards",
            "file_path": "django/db/migrations/operations/models.py"
          },
          {
            "rank": 1,
            "tokens": 36,
            "span_id": "AlterModelTable.describe",
            "file_path": "django/db/migrations/operations/models.py"
          },
          {
            "rank": 2,
            "tokens": 102,
            "span_id": "RenameModel.database_backwards",
            "file_path": "django/db/migrations/operations/models.py"
          },
          {
            "rank": 2,
            "tokens": 36,
            "span_id": "RenameModel.references_model",
            "file_path": "django/db/migrations/operations/models.py"
          },
          {
            "rank": 2,
            "tokens": 24,
            "span_id": "RenameModel.describe",
            "file_path": "django/db/migrations/operations/models.py"
          },
          {
            "rank": 5,
            "tokens": 450,
            "span_id": "RenameModel.database_forwards",
            "file_path": "django/db/migrations/operations/models.py"
          },
          {
            "rank": 6,
            "tokens": 19,
            "span_id": "ModelOperation.references_model",
            "file_path": "django/db/migrations/operations/models.py"
          },
          {
            "rank": 7,
            "tokens": 62,
            "span_id": "_get_app_label_and_model_name",
            "file_path": "django/db/migrations/state.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue pertains to a scenario where Django throws an error when different apps with different models have the same table name. This error is particularly observed after upgrading to Django 2.2 and is not encountered in Django 2.0. The error message specifically points out that multiple models are using the same table name. The task involves identifying the relevant code spans in the provided search results that address this issue. The focus should be on code spans that handle table uniqueness and model checks in Django's ORM. After reviewing the search results, several key spans appear relevant: \n1. 'ManyToManyField._check_table_uniqueness' in 'django/db/models/fields/related.py': This method checks for table uniqueness in ManyToManyField configurations, which is directly related to the issue of table name clashes. \n2. 'Model._check_m2m_through_same_relationship' in 'django/db/models/base.py': This method checks for multiple identical many-to-many relationships through the intermediate model, which could lead to table name clashes. \n3. 'check_all_models' in 'django/core/checks/model_checks.py': This function performs checks on all models, including ensuring that db_table names are unique across models. This function wraps around possibly error-causing scenarios related to the issue at hand. \n4. 'AlterModelTable.database_forwards' in 'django/db/migrations/operations/models.py': This method handles the renaming of database tables during migrations, which indirectly touches upon the table uniqueness and clashes that could occur in the reported issue. \nBased on these identified spans, it's evident that Django has built-in checks and mechanisms to handle and prevent multiple models from clashing on the same table name, highlighting the core issue of table name uniqueness in Django's ORM.",
            "identified_spans": [
              {
                "span_ids": [
                  "ManyToManyField._check_table_uniqueness"
                ],
                "file_path": "django/db/models/fields/related.py"
              },
              {
                "span_ids": [
                  "Model._check_m2m_through_same_relationship"
                ],
                "file_path": "django/db/models/base.py"
              },
              {
                "span_ids": [
                  "check_all_models"
                ],
                "file_path": "django/core/checks/model_checks.py"
              },
              {
                "span_ids": [
                  "AlterModelTable.database_forwards"
                ],
                "file_path": "django/db/migrations/operations/models.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 6841,
          "output_tokens": 622,
          "retry_message": null,
          "completion_cost": 0.029852999999999998
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context provided contains the relevant code for handling model and database table uniqueness. Specifically, in 'django/db/models/base.py', the '_check_m2m_through_same_relationship' and 'check_all_models' functions in 'django/core/checks/model_checks.py' enforce checks for table uniqueness. Additionally, the 'AlterModelTable' class in 'django/db/migrations/operations/models.py' manages table renaming, which could be a potential solution to avoid duplicate table names. The provided context thoroughly covers the area affected by the issue concerning table name clashes across different models in Django.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 5984,
          "output_tokens": 173,
          "retry_message": null,
          "completion_cost": 0.020547
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "check_all_models",
            "file_path": "django/core/checks/model_checks.py",
            "scratch_pad": "The issue is related to Django throwing an error when different apps with different models have the same table name. The solution involves updating the `check_all_models` function in `django/core/checks/model_checks.py` to ensure that models from different databases do not cause a clash in table names.",
            "instructions": "Update the `check_all_models` function in `django/core/checks/model_checks.py` to only raise an error if the models sharing the same table name are on the same database."
          },
          "output": {
            "span_id": "check_all_models",
            "end_line": 74,
            "file_path": "django/core/checks/model_checks.py",
            "start_line": 10,
            "instructions": "Update the `check_all_models` function in `django/core/checks/model_checks.py` to only raise an error if the models sharing the same table name are on the same database."
          },
          "input_tokens": 7040,
          "output_tokens": 171,
          "retry_message": null,
          "completion_cost": 0.023685
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "check_all_models",
        "end_line": 74,
        "file_path": "django/core/checks/model_checks.py",
        "max_tokens": 1000,
        "start_line": 10,
        "temperature": 1.6,
        "instructions": "Update the `check_all_models` function in `django/core/checks/model_checks.py` to only raise an error if the models sharing the same table name are on the same database.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n@register(Tags.models)\ndef check_all_models(app_configs=None, **kwargs):\n    db_table_models = defaultdict(list)\n    indexes = defaultdict(list)\n    constraints = defaultdict(list)\n    errors = []\n    if app_configs is None:\n        models = apps.get_models()\n    else:\n        models = chain.from_iterable(app_config.get_models() for app_config in app_configs)\n    for model in models:\n        if model._meta.managed and not model._meta.proxy:\n            db_table_models[model._meta.db_table].append(model._meta.label)\n        if not inspect.ismethod(model.check):\n            errors.append(\n                Error(\n                    \"The '%s.check()' class method is currently overridden by %r.\"\n                    % (model.__name__, model.check),\n                    obj=model,\n                    id='models.E020'\n                )\n            )\n        else:\n            errors.extend(model.check(**kwargs))\n        for model_index in model._meta.indexes:\n            indexes[model_index.name].append(model._meta.label)\n        for model_constraint in model._meta.constraints:\n            constraints[model_constraint.name].append(model._meta.label)\n    for db_table, model_labels in db_table_models.items():\n        if len(model_labels) != 1:\n            model_databases = defaultdict(list)\n            for model_label in model_labels:\n                model = apps.get_model(model_label)\n                model_databases[model._meta.database].append(model_label)\n            for database, db_model_labels in model_databases.items():\n                if len(db_model_labels) != 1:\n                    errors.append(\n                        Error(\n                            \"db_table '%s' is used by multiple models on the same database: %s.\"\n                            % (db_table, ', '.join(db_model_labels)),\n                            obj=db_table,\n                            id='models.E028'\n                        )\n                    )\n    for index_name, model_labels in indexes.items():\n        if len(model_labels) > 1:\n            model_labels = set(model_labels)\n            errors.append(\n                Error(\n                    \"index name '%s' is not unique %s %s.\" % (\n                        index_name,\n                        'for model' if len(model_labels) == 1 else 'amongst models:',\n                        ', '.join(sorted(model_labels)),\n                    ),\n                    id='models.E029' if len(model_labels) == 1 else 'models.E030',\n                ),\n            )\n    for constraint_name, model_labels in constraints.items():\n        if len(model_labels) > 1:\n            model_labels = set(model_labels)\n            errors.append(\n                Error(\n                    \"constraint name '%s' is not unique %s %s.\" % (\n                        constraint_name,\n                        'for model' if len(model_labels) == 1 else 'amongst models:',\n                        ', '.join(sorted(model_labels)),\n                    ),\n                    id='models.E031' if len(model_labels) == 1 else 'models.E032',\n                ),\n            )\n    return errors\n</replace>"
          },
          "output": {
            "diff": "--- django/core/checks/model_checks.py\n+++ django/core/checks/model_checks.py\n@@ -37,14 +37,20 @@\n             constraints[model_constraint.name].append(model._meta.label)\n     for db_table, model_labels in db_table_models.items():\n         if len(model_labels) != 1:\n-            errors.append(\n-                Error(\n-                    \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n-                    obj=db_table,\n-                    id='models.E028',\n-                )\n-            )\n+            model_databases = defaultdict(list)\n+            for model_label in model_labels:\n+                model = apps.get_model(model_label)\n+                model_databases[model._meta.database].append(model_label)\n+            for database, db_model_labels in model_databases.items():\n+                if len(db_model_labels) != 1:\n+                    errors.append(\n+                        Error(\n+                            \"db_table '%s' is used by multiple models on the same database: %s.\"\n+                            % (db_table, ', '.join(db_model_labels)),\n+                            obj=db_table,\n+                            id='models.E028'\n+                        )\n+                    )\n     for index_name, model_labels in indexes.items():\n         if len(model_labels) > 1:\n             model_labels = set(model_labels)\n",
            "message": "Applied the change to django/core/checks/model_checks.py.",
            "verification_errors": []
          },
          "input_tokens": 7656,
          "output_tokens": 810,
          "retry_message": null,
          "completion_cost": 0.035118
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- django/core/checks/model_checks.py\n+++ django/core/checks/model_checks.py\n@@ -37,14 +37,20 @@\n             constraints[model_constraint.name].append(model._meta.label)\n     for db_table, model_labels in db_table_models.items():\n         if len(model_labels) != 1:\n-            errors.append(\n-                Error(\n-                    \"db_table '%s' is used by multiple models: %s.\"\n-                    % (db_table, ', '.join(db_table_models[db_table])),\n-                    obj=db_table,\n-                    id='models.E028',\n-                )\n-            )\n+            model_databases = defaultdict(list)\n+            for model_label in model_labels:\n+                model = apps.get_model(model_label)\n+                model_databases[model._meta.database].append(model_label)\n+            for database, db_model_labels in model_databases.items():\n+                if len(db_model_labels) != 1:\n+                    errors.append(\n+                        Error(\n+                            \"db_table '%s' is used by multiple models on the same database: %s.\"\n+                            % (db_table, ', '.join(db_model_labels)),\n+                            obj=db_table,\n+                            id='models.E028'\n+                        )\n+                    )\n     for index_name, model_labels in indexes.items():\n         if len(model_labels) > 1:\n             model_labels = set(model_labels)\n",
        "model": "deepseek-coder",
        "message": "Applied the change to django/core/checks/model_checks.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue related to table name clashes between models on different databases has been resolved. The change ensures that models with the same table name are only flagged if they are on the same database, thereby addressing the reported Django error.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The change applied to `check_all_models` in `django/core/checks/model_checks.py` appears to correctly handle the case where models sharing the same table name are on different databases, ensuring that no errors are raised if they use different databases. The provided diff confirms that the error is only raised if the models with the same table name are on the same database. No further changes are needed as the issue has been resolved.",
            "instructions": null
          },
          "output": {
            "message": "The issue related to table name clashes between models on different databases has been resolved. The change ensures that models with the same table name are only flagged if they are on the same database, thereby addressing the reported Django error."
          },
          "input_tokens": 7732,
          "output_tokens": 197,
          "retry_message": null,
          "completion_cost": 0.026151
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue related to table name clashes between models on different databases has been resolved. The change ensures that models with the same table name are only flagged if they are on the same database, thereby addressing the reported Django error.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Django throws error when different apps with different models have the same name table name.\nDescription\n\t\nError message:\ntable_name: (models.E028) db_table 'table_name' is used by multiple models: base.ModelName, app2.ModelName.\nWe have a Base app that points to a central database and that has its own tables. We then have multiple Apps that talk to their own databases. Some share the same table names.\nWe have used this setup for a while, but after upgrading to Django 2.2 we're getting an error saying we're not allowed 2 apps, with 2 different models to have the same table names. \nIs this correct behavior? We've had to roll back to Django 2.0 for now.\n"
}