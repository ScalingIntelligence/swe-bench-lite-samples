{
  "info": {
    "duration": 185.33623814582825,
    "submission": "diff --git a/lib/matplotlib/backends/backend_ps.py b/lib/matplotlib/backends/backend_ps.py\nindex f209e811f1..ac7d40f8a2 100644\n--- a/lib/matplotlib/backends/backend_ps.py\n+++ b/lib/matplotlib/backends/backend_ps.py\n@@ -659,14 +659,16 @@ grestore\n                            .encode(\"ascii\", \"replace\").decode(\"ascii\"))\n                 if item.ft_object is not prev_font:\n                     if curr_stream:\n-                        stream.append(curr_stream)\n+                        if curr_stream:\n+                            stream.append(curr_stream)\n                     prev_font = item.ft_object\n                     curr_stream = [ps_name, []]\n                 curr_stream[1].append(\n                     (item.x, item.ft_object.get_glyph_name(item.glyph_idx))\n                 )\n             # append the last entry\n-            stream.append(curr_stream)\n+            if curr_stream:\n+                stream.append(curr_stream)\n \n         self.set_color(*gc.get_rgb())\n \n",
    "total_cost": 0.152787,
    "instance_id": "matplotlib__matplotlib-23964",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves a TypeError when saving a figure with the PostScript backend in Matplotlib. This occurs specifically when a multi-line text label with an empty line is present in the figure. The stack trace indicates that the error originates from line 673 in `backend_ps.py` where an attempt is made to unpack a NoneType object. Given that this issue affects the PostScript backend, focus should be directed towards the `backend_ps.py` file. The suggested fix involves adding a check before line 669 to ensure that `curr_stream` is not None.",
            "search_requests": [
              {
                "query": "TypeError: cannot unpack non-iterable NoneType object",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/backends/**/*.py",
                "function_names": [
                  "draw_text",
                  "_print_ps",
                  "_print_figure"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 1,
                "tokens": 1172,
                "span_id": "FigureCanvasPS._print_figure",
                "file_path": "lib/matplotlib/backends/backend_ps.py"
              },
              {
                "rank": 2,
                "tokens": 519,
                "span_id": "RendererPS.draw_text",
                "file_path": "lib/matplotlib/backends/backend_ps.py"
              },
              {
                "rank": 3,
                "tokens": 366,
                "span_id": "FigureCanvasPS._print_ps",
                "file_path": "lib/matplotlib/backends/backend_ps.py"
              },
              {
                "rank": 7,
                "tokens": 961,
                "span_id": "RendererPdf.draw_text",
                "file_path": "lib/matplotlib/backends/backend_pdf.py"
              },
              {
                "rank": 29,
                "tokens": 223,
                "span_id": "RendererAgg.draw_text",
                "file_path": "lib/matplotlib/backends/backend_agg.py"
              },
              {
                "rank": 84,
                "tokens": 198,
                "span_id": "RendererWx.draw_text",
                "file_path": "lib/matplotlib/backends/backend_wx.py"
              },
              {
                "rank": 50,
                "tokens": 185,
                "span_id": "RendererCairo.draw_text",
                "file_path": "lib/matplotlib/backends/backend_cairo.py"
              },
              {
                "rank": 26,
                "tokens": 471,
                "span_id": "RendererPgf.draw_text",
                "file_path": "lib/matplotlib/backends/backend_pgf.py"
              },
              {
                "rank": 28,
                "tokens": 184,
                "span_id": "RendererSVG.draw_text",
                "file_path": "lib/matplotlib/backends/backend_svg.py"
              }
            ],
            "search_requests": [
              {
                "query": "TypeError: cannot unpack non-iterable NoneType object",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/backends/**/*.py",
                "function_names": [
                  "draw_text",
                  "_print_ps",
                  "_print_figure"
                ]
              }
            ]
          },
          "input_tokens": 4911,
          "output_tokens": 233,
          "retry_message": null,
          "completion_cost": 0.018228
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 1,
            "tokens": 1172,
            "span_id": "FigureCanvasPS._print_figure",
            "file_path": "lib/matplotlib/backends/backend_ps.py"
          },
          {
            "rank": 2,
            "tokens": 519,
            "span_id": "RendererPS.draw_text",
            "file_path": "lib/matplotlib/backends/backend_ps.py"
          },
          {
            "rank": 3,
            "tokens": 366,
            "span_id": "FigureCanvasPS._print_ps",
            "file_path": "lib/matplotlib/backends/backend_ps.py"
          },
          {
            "rank": 7,
            "tokens": 961,
            "span_id": "RendererPdf.draw_text",
            "file_path": "lib/matplotlib/backends/backend_pdf.py"
          },
          {
            "rank": 26,
            "tokens": 471,
            "span_id": "RendererPgf.draw_text",
            "file_path": "lib/matplotlib/backends/backend_pgf.py"
          },
          {
            "rank": 28,
            "tokens": 184,
            "span_id": "RendererSVG.draw_text",
            "file_path": "lib/matplotlib/backends/backend_svg.py"
          },
          {
            "rank": 29,
            "tokens": 223,
            "span_id": "RendererAgg.draw_text",
            "file_path": "lib/matplotlib/backends/backend_agg.py"
          },
          {
            "rank": 50,
            "tokens": 185,
            "span_id": "RendererCairo.draw_text",
            "file_path": "lib/matplotlib/backends/backend_cairo.py"
          },
          {
            "rank": 84,
            "tokens": 198,
            "span_id": "RendererWx.draw_text",
            "file_path": "lib/matplotlib/backends/backend_wx.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue pertains to a TypeError that occurs when saving a figure with the PostScript backend, specifically when a multi-line text label contains an empty line. This issue has been traced to the `draw_text` method in `backend_ps.py`. The problematic section of the code involves the `RendererPS.draw_text` method where the variable `curr_stream` is unpacked without checking if it's not None. This leads to a TypeError due to a non-iterable NoneType object. The additional information provided suggests that adding a check `if curr_stream:` before line 669 in `backend_ps.py` seems to fix the bug. The provided search results contain the relevant `draw_text` methods in `backend_ps.py` and other backends such as `backend_pdf.py`, `backend_pgf.py`, `backend_svg.py`, `backend_agg.py`, and `backend_cairo.py`. From these results, the relevant code spans in `backend_ps.py` are identified as relating to the handling of multi-line text and the specific operations around `curr_stream`, confirming the initial analysis and extending understanding of how similar operations are handled in other backends.",
            "identified_spans": [
              {
                "span_ids": [
                  "RendererPS.draw_text"
                ],
                "file_path": "lib/matplotlib/backends/backend_ps.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 7588,
          "output_tokens": 335,
          "retry_message": null,
          "completion_cost": 0.027789
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The issue involves a TypeError when saving a figure with the PostScript backend in Matplotlib. This occurs specifically when a multi-line text label with an empty line is present in the figure. The stack trace indicates that the error originates from line 673 in `backend_ps.py` where an attempt is made to unpack a NoneType object. Given that this issue affects the PostScript backend, focus should be directed towards the `backend_ps.py` file. The suggested fix involves adding a check before line 669 to ensure that `curr_stream` is not None. The provided file context contains the relevant method `draw_text` in `backend_ps.py`, which includes the code section where `curr_stream` is handled. As per the suggested fix, it appears that the file context is focused on the correct area of the codebase. However, the file context does not include the exact line referred to in the issue description (line 669) and the actual fix suggested (adding a check before this line).",
            "search_suggestions": "Look for line 669 in the `backend_ps.py` file to identify the context of the suggested fix. Ensure that the check for `curr_stream` being not None is applied before its processing begins, as suggested by the issue description."
          },
          "output": {
            "message": "Look for line 669 in the `backend_ps.py` file to identify the context of the suggested fix. Ensure that the check for `curr_stream` being not None is applied before its processing begins, as suggested by the issue description."
          },
          "input_tokens": 3482,
          "output_tokens": 310,
          "retry_message": null,
          "completion_cost": 0.015096000000000002
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look for line 669 in the `backend_ps.py` file to identify the context of the suggested fix. Ensure that the check for `curr_stream` being not None is applied before its processing begins, as suggested by the issue description.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "scratch_pad": "The issue involves a TypeError at line 669 in `backend_ps.py` when attempting to unpack a NoneType object. This occurs during the rendering of text in the PostScript backend, specifically within the `draw_text` method. The suggested fix involves adding a check before processing `curr_stream`, to ensure it is not None. This was identified within the text processing loop where each character's layout is handled and where `curr_stream` is iterated over. Implementing the suggested fix is crucial to prevent further errors when dealing with potentially None values.",
            "search_requests": []
          },
          "output": {
            "message": "The issue involves a TypeError at line 669 in `backend_ps.py` when attempting to unpack a NoneType object. This occurs during the rendering of text in the PostScript backend, specifically within the `draw_text` method. The suggested fix involves adding a check before processing `curr_stream`, to ensure it is not None. This was identified within the text processing loop where each character's layout is handled and where `curr_stream` is iterated over. Implementing the suggested fix is crucial to prevent further errors when dealing with potentially None values."
          },
          "input_tokens": 6277,
          "output_tokens": 147,
          "retry_message": null,
          "completion_cost": 0.021036
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "The issue involves a TypeError at line 669 in `backend_ps.py` when attempting to unpack a NoneType object. This occurs during the rendering of text in the PostScript backend, specifically within the `draw_text` method. The suggested fix involves adding a check before processing `curr_stream`, to ensure it is not None. This was identified within the text processing loop where each character's layout is handled and where `curr_stream` is iterated over. Implementing the suggested fix is crucial to prevent further errors when dealing with potentially None values.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "RendererPS.draw_text",
            "file_path": "lib/matplotlib/backends/backend_ps.py",
            "scratch_pad": "The issue involves a TypeError at line 669 in `backend_ps.py` when attempting to unpack a NoneType object. This occurs during the rendering of text in the PostScript backend, specifically within the `draw_text` method. The suggested fix involves adding a check before processing `curr_stream`, to ensure it is not None. This was identified within the text processing loop where each character's layout is handled and where `curr_stream` is iterated over. Implementing the suggested fix is crucial to prevent further errors when dealing with potentially None values.",
            "instructions": "Add a check to ensure `curr_stream` is not None before attempting to append it to the `stream` list."
          },
          "output": {
            "span_id": "RendererPS.draw_text",
            "file_path": "lib/matplotlib/backends/backend_ps.py",
            "instructions": "Add a check to ensure `curr_stream` is not None before attempting to append it to the `stream` list."
          },
          "input_tokens": 6102,
          "output_tokens": 208,
          "retry_message": null,
          "completion_cost": 0.021426
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "RendererPS.draw_text",
        "end_line": null,
        "file_path": "lib/matplotlib/backends/backend_ps.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Add a check to ensure `curr_stream` is not None before attempting to append it to the `stream` list.\n\nThe check should be added before attempting to append `curr_stream` to the `stream` list. This is on lines 669 and 662 where `curr_stream` is being appended to `stream`.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 669,
            "start_line": 662,
            "scratch_pad": "The check should be added before attempting to append `curr_stream` to the `stream` list. This is on lines 669 and 662 where `curr_stream` is being appended to `stream`."
          },
          "output": {
            "span_id": "RendererPS.draw_text",
            "end_line": 669,
            "file_path": "lib/matplotlib/backends/backend_ps.py",
            "start_line": 662,
            "instructions": "Add a check to ensure `curr_stream` is not None before attempting to append it to the `stream` list.\n\nThe check should be added before attempting to append `curr_stream` to the `stream` list. This is on lines 669 and 662 where `curr_stream` is being appended to `stream`."
          },
          "input_tokens": 1511,
          "output_tokens": 87,
          "retry_message": null,
          "completion_cost": 0.0058379999999999994
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "RendererPS.draw_text",
        "end_line": 669,
        "file_path": "lib/matplotlib/backends/backend_ps.py",
        "max_tokens": 1000,
        "start_line": 662,
        "temperature": 1.6,
        "instructions": "Add a check to ensure `curr_stream` is not None before attempting to append it to the `stream` list.\n\nThe check should be added before attempting to append `curr_stream` to the `stream` list. This is on lines 669 and 662 where `curr_stream` is being appended to `stream`.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\n                        if curr_stream:\n                            stream.append(curr_stream)\n                    prev_font = item.ft_object\n                    curr_stream = [ps_name, []]\n                curr_stream[1].append(\n                    (item.x, item.ft_object.get_glyph_name(item.glyph_idx))\n                )\n            # append the last entry\n            if curr_stream:\n                stream.append(curr_stream)\n</replace>"
          },
          "output": {
            "diff": "--- lib/matplotlib/backends/backend_ps.py\n+++ lib/matplotlib/backends/backend_ps.py\n@@ -659,14 +659,16 @@\n                            .encode(\"ascii\", \"replace\").decode(\"ascii\"))\n                 if item.ft_object is not prev_font:\n                     if curr_stream:\n-                        stream.append(curr_stream)\n+                        if curr_stream:\n+                            stream.append(curr_stream)\n                     prev_font = item.ft_object\n                     curr_stream = [ps_name, []]\n                 curr_stream[1].append(\n                     (item.x, item.ft_object.get_glyph_name(item.glyph_idx))\n                 )\n             # append the last entry\n-            stream.append(curr_stream)\n+            if curr_stream:\n+                stream.append(curr_stream)\n \n         self.set_color(*gc.get_rgb())\n \n",
            "message": "Applied the change to lib/matplotlib/backends/backend_ps.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 6027,
          "output_tokens": 113,
          "retry_message": null,
          "completion_cost": 0.019776
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- lib/matplotlib/backends/backend_ps.py\n+++ lib/matplotlib/backends/backend_ps.py\n@@ -659,14 +659,16 @@\n                            .encode(\"ascii\", \"replace\").decode(\"ascii\"))\n                 if item.ft_object is not prev_font:\n                     if curr_stream:\n-                        stream.append(curr_stream)\n+                        if curr_stream:\n+                            stream.append(curr_stream)\n                     prev_font = item.ft_object\n                     curr_stream = [ps_name, []]\n                 curr_stream[1].append(\n                     (item.x, item.ft_object.get_glyph_name(item.glyph_idx))\n                 )\n             # append the last entry\n-            stream.append(curr_stream)\n+            if curr_stream:\n+                stream.append(curr_stream)\n \n         self.set_color(*gc.get_rgb())\n \n",
        "model": "deepseek-coder",
        "message": "Applied the change to lib/matplotlib/backends/backend_ps.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The preventive measure has been efficiently implemented in the `backend_ps.py`, safeguarding against potential NoneType errors when dealing with text in the PostScript backend. This action ensures compatibility and robustness in text rendering functionalities, thereby resolving the reported issue.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The changes to `backend_ps.py` have been successfully applied by adding a check to ensure `curr_stream` is not None before attempting to append it to the `stream` list within the `draw_text` method. This modification addresses the specific TypeError related to unpacking a NoneType object that occurs during text rendering with the PostScript backend. The issue was due to the potential absence of `curr_stream` during its intended use, and the added check corrects this by ensuring that `curr_stream` is verified for existence prior to its manipulation. The updated code should now function correctly when dealing with multi-line text labels, including those containing empty lines.",
            "instructions": null
          },
          "output": {
            "message": "The preventive measure has been efficiently implemented in the `backend_ps.py`, safeguarding against potential NoneType errors when dealing with text in the PostScript backend. This action ensures compatibility and robustness in text rendering functionalities, thereby resolving the reported issue."
          },
          "input_tokens": 6616,
          "output_tokens": 250,
          "retry_message": null,
          "completion_cost": 0.023598
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The preventive measure has been efficiently implemented in the `backend_ps.py`, safeguarding against potential NoneType errors when dealing with text in the PostScript backend. This action ensures compatibility and robustness in text rendering functionalities, thereby resolving the reported issue.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "[Bug]: Text label with empty line causes a \"TypeError: cannot unpack non-iterable NoneType object\" in PostScript backend\n### Bug summary\n\nWhen saving a figure with the PostScript backend, a\r\n> TypeError: cannot unpack non-iterable NoneType object\r\n\r\nhappens if the figure contains a multi-line text label with an empty line (see example).\n\n### Code for reproduction\n\n```python\nfrom matplotlib.figure import Figure\r\n\r\nfigure = Figure()\r\nax = figure.add_subplot(111)\r\n# ax.set_title('\\nLower title')  # this would cause an error as well\r\nax.annotate(text='\\nLower label', xy=(0, 0))\r\nfigure.savefig('figure.eps')\n```\n\n\n### Actual outcome\n\n$ ./venv/Scripts/python save_ps.py\r\nTraceback (most recent call last):\r\n  File \"C:\\temp\\matplotlib_save_ps\\save_ps.py\", line 7, in <module>\r\n    figure.savefig('figure.eps')\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\figure.py\", line 3272, in savefig\r\n    self.canvas.print_figure(fname, **kwargs)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backend_bases.py\", line 2338, in print_figure\r\n    result = print_method(\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backend_bases.py\", line 2204, in <lambda>\r\n    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\_api\\deprecation.py\", line 410, in wrapper\r\n    return func(*inner_args, **inner_kwargs)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backends\\backend_ps.py\", line 869, in _print_ps\r\n    printer(fmt, outfile, dpi=dpi, dsc_comments=dsc_comments,\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backends\\backend_ps.py\", line 927, in _print_figure\r\n    self.figure.draw(renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 74, in draw_wrapper\r\n    result = draw(artist, renderer, *args, **kwargs)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\figure.py\", line 3069, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\axes\\_base.py\", line 3106, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\text.py\", line 1995, in draw\r\n    Text.draw(self, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\text.py\", line 736, in draw\r\n    textrenderer.draw_text(gc, x, y, clean_line,\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backends\\backend_ps.py\", line 248, in wrapper\r\n    return meth(self, *args, **kwargs)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backends\\backend_ps.py\", line 673, in draw_text\r\n    for ps_name, xs_names in stream:\r\nTypeError: cannot unpack non-iterable NoneType object\r\n\n\n### Expected outcome\n\nThe figure can be saved as `figure.eps` without error.\n\n### Additional information\n\n- seems to happen if a text label or title contains a linebreak with an empty line\r\n- works without error for other backends such as PNG, PDF, SVG, Qt\r\n- works with matplotlib<=3.5.3\r\n- adding `if curr_stream:` before line 669 of `backend_ps.py` seems to fix the bug \n\n### Operating system\n\nWindows\n\n### Matplotlib Version\n\n3.6.0\n\n### Matplotlib Backend\n\n_No response_\n\n### Python version\n\n3.9.13\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip\n"
}