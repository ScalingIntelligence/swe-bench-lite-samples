{
  "info": {
    "duration": 194.2999439239502,
    "submission": "diff --git a/lib/matplotlib/backends/backend_ps.py b/lib/matplotlib/backends/backend_ps.py\nindex f209e811f1..02268c5fbe 100644\n--- a/lib/matplotlib/backends/backend_ps.py\n+++ b/lib/matplotlib/backends/backend_ps.py\n@@ -666,8 +666,18 @@ grestore\n                     (item.x, item.ft_object.get_glyph_name(item.glyph_idx))\n                 )\n             # append the last entry\n-            stream.append(curr_stream)\n-\n+            if curr_stream:\n+                stream.append(curr_stream)\n+                    if curr_stream:\n+                        stream.append(curr_stream)\n+                    prev_font = item.ft_object\n+                    curr_stream = [ps_name, []]\n+                curr_stream[1].append(\n+                    (item.x, item.ft_object.get_glyph_name(item.glyph_idx))\n+                )\n+            # append the last entry\n+            if curr_stream:\n+                stream.append(curr_stream)\n         self.set_color(*gc.get_rgb())\n \n         for ps_name, xs_names in stream:\n",
    "total_cost": 0.193182,
    "instance_id": "matplotlib__matplotlib-23964",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue pertains to a TypeError occurring specifically with the PostScript (PS) backend in Matplotlib when handling text labels containing empty lines. The traceback indicates that the error originates within the 'backend_ps.py' file, specifically in the 'draw_text' method. To narrow down the search, we should focus on this file and the 'draw_text' method, which processes text for rendering in PostScript format. Additionally, considering the suggestion in the issue description to add a check before line 669 in 'backend_ps.py', we should look for and possibly adjust the handling of text or line breaks within this method to prevent the TypeError.",
            "search_requests": [
              {
                "query": "TypeError: cannot unpack non-iterable NoneType object",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/matplotlib/backends/backend_ps.py",
                "function_names": [
                  "draw_text"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 519,
                "span_id": "RendererPS.draw_text",
                "file_path": "lib/matplotlib/backends/backend_ps.py"
              }
            ],
            "search_requests": [
              {
                "query": "TypeError: cannot unpack non-iterable NoneType object",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/matplotlib/backends/backend_ps.py",
                "function_names": [
                  "draw_text"
                ]
              }
            ]
          },
          "input_tokens": 4911,
          "output_tokens": 233,
          "retry_message": null,
          "completion_cost": 0.018228
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 519,
            "span_id": "RendererPS.draw_text",
            "file_path": "lib/matplotlib/backends/backend_ps.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves a 'TypeError: cannot unpack non-iterable NoneType object' in the PostScript backend when dealing with a multi-line text label containing an empty line. This error occurs in the draw_text method of the RendererPS class in the backend_ps.py file. The issue seems to stem from how the text stream is processed and unpacked. Specifically, the empty line in the text label might be causing the curr_stream variable to be None, which leads to the TypeError when trying to unpack it. The relevant code spans are identified based on the draw_text method and its handling of the text stream.",
            "identified_spans": [
              {
                "span_ids": [
                  "RendererPS",
                  "RendererPS.__init__",
                  "RendererPS.draw_text"
                ],
                "file_path": "lib/matplotlib/backends/backend_ps.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3545,
          "output_tokens": 220,
          "retry_message": null,
          "completion_cost": 0.013935
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The provided file context contains the relevant 'backend_ps.py' file, which includes the 'draw_text' method. This method is critical for handling text rendering in the PostScript backend and is directly implicated in the issue description as the source of the TypeError. The method's implementation is present and includes the logic for processing text, including handling multi-line text and empty lines. The issue suggests that an additional check before a specific line (line 669 according to the issue description) may resolve the problem. Upon inspection of the 'draw_text' method in the provided file context, it appears that the relevant part of the code where this check might be needed is already identified and included. The file context is thus comprehensive for addressing the issue and does not lack any crucial code segments necessary for implementing the suggested fix or for further diagnosing the problem.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 5788,
          "output_tokens": 215,
          "retry_message": null,
          "completion_cost": 0.020589
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "RendererPS.draw_text",
            "file_path": "lib/matplotlib/backends/backend_ps.py",
            "scratch_pad": "The issue reported is a TypeError due to unpacking a non-iterable NoneType object when a figure contains a multi-line text label with an empty line. This occurs specifically in the PostScript (PS) backend. The suggested fix involves adding a check to ensure that curr_stream is not None before attempting to unpack it.",
            "instructions": "Add a check to ensure that curr_stream is not None before iterating over it in the `RendererPS.draw_text` method."
          },
          "output": {
            "span_id": "RendererPS.draw_text",
            "file_path": "lib/matplotlib/backends/backend_ps.py",
            "instructions": "Add a check to ensure that curr_stream is not None before iterating over it in the `RendererPS.draw_text` method."
          },
          "input_tokens": 7222,
          "output_tokens": 162,
          "retry_message": null,
          "completion_cost": 0.024096
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "RendererPS.draw_text",
        "end_line": null,
        "file_path": "lib/matplotlib/backends/backend_ps.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Add a check to ensure that curr_stream is not None before iterating over it in the `RendererPS.draw_text` method.\n\nThe instructions require adding a check for curr_stream not being None before iterating over it. This iteration happens in lines 657-667 within the 'else' block starting at line 652. The check should be implemented just before the iteration starts, which is line 657.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 656,
            "start_line": 656,
            "scratch_pad": "The instructions require adding a check for curr_stream not being None before iterating over it. This iteration happens in lines 657-667 within the 'else' block starting at line 652. The check should be implemented just before the iteration starts, which is line 657."
          },
          "output": {
            "span_id": "RendererPS.draw_text",
            "end_line": 660,
            "file_path": "lib/matplotlib/backends/backend_ps.py",
            "start_line": 652,
            "instructions": "Add a check to ensure that curr_stream is not None before iterating over it in the `RendererPS.draw_text` method.\n\nThe instructions require adding a check for curr_stream not being None before iterating over it. This iteration happens in lines 657-667 within the 'else' block starting at line 652. The check should be implemented just before the iteration starts, which is line 657."
          },
          "input_tokens": 1515,
          "output_tokens": 104,
          "retry_message": null,
          "completion_cost": 0.006105
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "RendererPS.draw_text",
        "end_line": 660,
        "file_path": "lib/matplotlib/backends/backend_ps.py",
        "max_tokens": 1000,
        "start_line": 652,
        "temperature": 1.6,
        "instructions": "Add a check to ensure that curr_stream is not None before iterating over it in the `RendererPS.draw_text` method.\n\nThe instructions require adding a check for curr_stream not being None before iterating over it. This iteration happens in lines 657-667 within the 'else' block starting at line 652. The check should be implemented just before the iteration starts, which is line 657.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```html\n<replace>\n        else:\n            font = self._get_font_ttf(prop)\n            self._character_tracker.track(font, s)\n            stream = []\n            prev_font = curr_stream = None\n            for item in _text_helpers.layout(s, font):\n                ps_name = (item.ft_object.postscript_name\n                           .encode(\"ascii\", \"replace\").decode(\"ascii\"))\n                if item.ft_object is not prev_font:\n                    if curr_stream:\n                        stream.append(curr_stream)\n                    prev_font = item.ft_object\n                    curr_stream = [ps_name, []]\n                curr_stream[1].append(\n                    (item.x, item.ft_object.get_glyph_name(item.glyph_idx))\n                )\n            # append the last entry\n            if curr_stream:\n                stream.append(curr_stream)\n</replace>"
          },
          "output": {
            "diff": "--- lib/matplotlib/backends/backend_ps.py\n+++ lib/matplotlib/backends/backend_ps.py\n@@ -658,6 +658,16 @@\n                 ps_name = (item.ft_object.postscript_name\n                            .encode(\"ascii\", \"replace\").decode(\"ascii\"))\n                 if item.ft_object is not prev_font:\n+                    if curr_stream:\n+                        stream.append(curr_stream)\n+                    prev_font = item.ft_object\n+                    curr_stream = [ps_name, []]\n+                curr_stream[1].append(\n+                    (item.x, item.ft_object.get_glyph_name(item.glyph_idx))\n+                )\n+            # append the last entry\n+            if curr_stream:\n+                stream.append(curr_stream)\n                     if curr_stream:\n                         stream.append(curr_stream)\n                     prev_font = item.ft_object\n",
            "message": "Applied the change to lib/matplotlib/backends/backend_ps.py.\n\n<scratch_pad>\n```html\n</scratch_pad>",
            "verification_errors": [
              {
                "code": "E0001",
                "line": 671,
                "message": "Parsing failed: 'unexpected indent (matplotlib.backends.backend_ps, line 671)'",
                "file_path": "lib/matplotlib/backends/backend_ps.py"
              }
            ]
          },
          "input_tokens": 7627,
          "output_tokens": 222,
          "retry_message": null,
          "completion_cost": 0.026211
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- lib/matplotlib/backends/backend_ps.py\n+++ lib/matplotlib/backends/backend_ps.py\n@@ -658,6 +658,16 @@\n                 ps_name = (item.ft_object.postscript_name\n                            .encode(\"ascii\", \"replace\").decode(\"ascii\"))\n                 if item.ft_object is not prev_font:\n+                    if curr_stream:\n+                        stream.append(curr_stream)\n+                    prev_font = item.ft_object\n+                    curr_stream = [ps_name, []]\n+                curr_stream[1].append(\n+                    (item.x, item.ft_object.get_glyph_name(item.glyph_idx))\n+                )\n+            # append the last entry\n+            if curr_stream:\n+                stream.append(curr_stream)\n                     if curr_stream:\n                         stream.append(curr_stream)\n                     prev_font = item.ft_object\n",
        "model": "deepseek-coder",
        "message": "Applied the change to lib/matplotlib/backends/backend_ps.py.\n\n<scratch_pad>\n```html\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [
          {
            "code": "E0001",
            "line": 671,
            "message": "Parsing failed: 'unexpected indent (matplotlib.backends.backend_ps, line 671)'",
            "file_path": "lib/matplotlib/backends/backend_ps.py"
          }
        ],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "RendererPS.draw_text",
            "file_path": "lib/matplotlib/backends/backend_ps.py",
            "scratch_pad": "The lint error indicated an unexpected indent on line 671. This is likely due to improper alignment of the code blocks during the initial fix. I will correct the indentation to ensure the code adheres to the proper syntax.",
            "instructions": "Adjust the indentation of the code block to ensure proper syntax."
          },
          "output": {
            "span_id": "RendererPS.draw_text",
            "file_path": "lib/matplotlib/backends/backend_ps.py",
            "instructions": "Adjust the indentation of the code block to ensure proper syntax."
          },
          "input_tokens": 7836,
          "output_tokens": 137,
          "retry_message": null,
          "completion_cost": 0.025563000000000002
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "RendererPS.draw_text",
        "end_line": null,
        "file_path": "lib/matplotlib/backends/backend_ps.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Adjust the indentation of the code block to ensure proper syntax.\n\nThe indentation of the code block needs to be adjusted to ensure proper syntax. Specifically, lines 671 to 680 have incorrect indentation which is evident from the inconsistent use of indentation levels.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 680,
            "start_line": 671,
            "scratch_pad": "The indentation of the code block needs to be adjusted to ensure proper syntax. Specifically, lines 671 to 680 have incorrect indentation which is evident from the inconsistent use of indentation levels."
          },
          "output": {
            "span_id": "RendererPS.draw_text",
            "end_line": 680,
            "file_path": "lib/matplotlib/backends/backend_ps.py",
            "start_line": 671,
            "instructions": "Adjust the indentation of the code block to ensure proper syntax.\n\nThe indentation of the code block needs to be adjusted to ensure proper syntax. Specifically, lines 671 to 680 have incorrect indentation which is evident from the inconsistent use of indentation levels."
          },
          "input_tokens": 1631,
          "output_tokens": 80,
          "retry_message": null,
          "completion_cost": 0.0060929999999999995
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "RendererPS.draw_text",
        "end_line": 680,
        "file_path": "lib/matplotlib/backends/backend_ps.py",
        "max_tokens": 1000,
        "start_line": 671,
        "temperature": 1.6,
        "instructions": "Adjust the indentation of the code block to ensure proper syntax.\n\nThe indentation of the code block needs to be adjusted to ensure proper syntax. Specifically, lines 671 to 680 have incorrect indentation which is evident from the inconsistent use of indentation levels.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```\n<replace>\n                    if curr_stream:\n                        stream.append(curr_stream)\n                    prev_font = item.ft_object\n                    curr_stream = [ps_name, []]\n                curr_stream[1].append(\n                    (item.x, item.ft_object.get_glyph_name(item.glyph_idx))\n                )\n            # append the last entry\n            if curr_stream:\n                stream.append(curr_stream)\n</replace>"
          },
          "output": {
            "diff": "--- lib/matplotlib/backends/backend_ps.py\n+++ lib/matplotlib/backends/backend_ps.py\n@@ -676,8 +676,8 @@\n                     (item.x, item.ft_object.get_glyph_name(item.glyph_idx))\n                 )\n             # append the last entry\n-            stream.append(curr_stream)\n-\n+            if curr_stream:\n+                stream.append(curr_stream)\n         self.set_color(*gc.get_rgb())\n \n         for ps_name, xs_names in stream:\n",
            "message": "Applied the change to lib/matplotlib/backends/backend_ps.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 7677,
          "output_tokens": 112,
          "retry_message": null,
          "completion_cost": 0.024711
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- lib/matplotlib/backends/backend_ps.py\n+++ lib/matplotlib/backends/backend_ps.py\n@@ -676,8 +676,8 @@\n                     (item.x, item.ft_object.get_glyph_name(item.glyph_idx))\n                 )\n             # append the last entry\n-            stream.append(curr_stream)\n-\n+            if curr_stream:\n+                stream.append(curr_stream)\n         self.set_color(*gc.get_rgb())\n \n         for ps_name, xs_names in stream:\n",
        "model": "deepseek-coder",
        "message": "Applied the change to lib/matplotlib/backends/backend_ps.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The changes have been applied to correct the TypeError when saving a figure with a multi-line text label containing an empty line using the PostScript backend. The code change includes a check to ensure that `curr_stream` is not None before attempting to append or iterate over it, and the indentation has been corrected to pass linting.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The initial fix was applied, but it introduced a lint error due to improper indentation. The subsequent change corrected the indentation, ensuring the code adheres to proper syntax. With these changes in place, the issue of unpacking a non-iterable NoneType object should be resolved, and the figure should save without error when using the PostScript backend with a multi-line text label containing an empty line.",
            "instructions": null
          },
          "output": {
            "message": "The changes have been applied to correct the TypeError when saving a figure with a multi-line text label containing an empty line using the PostScript backend. The code change includes a check to ensure that `curr_stream` is not None before attempting to append or iterate over it, and the indentation has been corrected to pass linting."
          },
          "input_tokens": 8167,
          "output_tokens": 210,
          "retry_message": null,
          "completion_cost": 0.027651000000000002
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The changes have been applied to correct the TypeError when saving a figure with a multi-line text label containing an empty line using the PostScript backend. The code change includes a check to ensure that `curr_stream` is not None before attempting to append or iterate over it, and the indentation has been corrected to pass linting.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "[Bug]: Text label with empty line causes a \"TypeError: cannot unpack non-iterable NoneType object\" in PostScript backend\n### Bug summary\n\nWhen saving a figure with the PostScript backend, a\r\n> TypeError: cannot unpack non-iterable NoneType object\r\n\r\nhappens if the figure contains a multi-line text label with an empty line (see example).\n\n### Code for reproduction\n\n```python\nfrom matplotlib.figure import Figure\r\n\r\nfigure = Figure()\r\nax = figure.add_subplot(111)\r\n# ax.set_title('\\nLower title')  # this would cause an error as well\r\nax.annotate(text='\\nLower label', xy=(0, 0))\r\nfigure.savefig('figure.eps')\n```\n\n\n### Actual outcome\n\n$ ./venv/Scripts/python save_ps.py\r\nTraceback (most recent call last):\r\n  File \"C:\\temp\\matplotlib_save_ps\\save_ps.py\", line 7, in <module>\r\n    figure.savefig('figure.eps')\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\figure.py\", line 3272, in savefig\r\n    self.canvas.print_figure(fname, **kwargs)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backend_bases.py\", line 2338, in print_figure\r\n    result = print_method(\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backend_bases.py\", line 2204, in <lambda>\r\n    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\_api\\deprecation.py\", line 410, in wrapper\r\n    return func(*inner_args, **inner_kwargs)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backends\\backend_ps.py\", line 869, in _print_ps\r\n    printer(fmt, outfile, dpi=dpi, dsc_comments=dsc_comments,\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backends\\backend_ps.py\", line 927, in _print_figure\r\n    self.figure.draw(renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 74, in draw_wrapper\r\n    result = draw(artist, renderer, *args, **kwargs)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\figure.py\", line 3069, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\axes\\_base.py\", line 3106, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\text.py\", line 1995, in draw\r\n    Text.draw(self, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\text.py\", line 736, in draw\r\n    textrenderer.draw_text(gc, x, y, clean_line,\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backends\\backend_ps.py\", line 248, in wrapper\r\n    return meth(self, *args, **kwargs)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backends\\backend_ps.py\", line 673, in draw_text\r\n    for ps_name, xs_names in stream:\r\nTypeError: cannot unpack non-iterable NoneType object\r\n\n\n### Expected outcome\n\nThe figure can be saved as `figure.eps` without error.\n\n### Additional information\n\n- seems to happen if a text label or title contains a linebreak with an empty line\r\n- works without error for other backends such as PNG, PDF, SVG, Qt\r\n- works with matplotlib<=3.5.3\r\n- adding `if curr_stream:` before line 669 of `backend_ps.py` seems to fix the bug \n\n### Operating system\n\nWindows\n\n### Matplotlib Version\n\n3.6.0\n\n### Matplotlib Backend\n\n_No response_\n\n### Python version\n\n3.9.13\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip\n"
}