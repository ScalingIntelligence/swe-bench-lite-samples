{
  "info": {
    "duration": 223.10989570617676,
    "submission": "diff --git a/lib/matplotlib/backends/backend_ps.py b/lib/matplotlib/backends/backend_ps.py\nindex f209e811f1..02954d6cdc 100644\n--- a/lib/matplotlib/backends/backend_ps.py\n+++ b/lib/matplotlib/backends/backend_ps.py\n@@ -658,7 +658,7 @@ grestore\n                 ps_name = (item.ft_object.postscript_name\n                            .encode(\"ascii\", \"replace\").decode(\"ascii\"))\n                 if item.ft_object is not prev_font:\n-                    if curr_stream:\n+                    if curr_stream is not None:\n                         stream.append(curr_stream)\n                     prev_font = item.ft_object\n                     curr_stream = [ps_name, []]\n@@ -666,7 +666,8 @@ grestore\n                     (item.x, item.ft_object.get_glyph_name(item.glyph_idx))\n                 )\n             # append the last entry\n-            stream.append(curr_stream)\n+            if curr_stream is not None:\n+                stream.append(curr_stream)\n \n         self.set_color(*gc.get_rgb())\n \n",
    "total_cost": 0.220239,
    "instance_id": "matplotlib__matplotlib-23964",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The error 'TypeError: cannot unpack non-iterable NoneType object' occurs when saving a figure with the PostScript backend, specifically when the figure contains a multi-line text label with an empty line. The traceback indicates that the error is triggered in the 'draw_text' method of 'Backend_ps.py'. To resolve this, we need to identify the exact location in the code where the NoneType object is being unpacked and ensure it is properly handled. Based on the additional information, adding 'if curr_stream:' before line 669 of 'backend_ps.py' might fix the issue.",
            "search_requests": [
              {
                "query": "TypeError: cannot unpack non-iterable NoneType object",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/backends/backend_ps.py",
                "function_names": [
                  "draw_text"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 519,
                "span_id": "RendererPS.draw_text",
                "file_path": "lib/matplotlib/backends/backend_ps.py"
              }
            ],
            "search_requests": [
              {
                "query": "TypeError: cannot unpack non-iterable NoneType object",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/backends/backend_ps.py",
                "function_names": [
                  "draw_text"
                ]
              }
            ]
          },
          "input_tokens": 4911,
          "output_tokens": 208,
          "retry_message": null,
          "completion_cost": 0.017853
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 519,
            "span_id": "RendererPS.draw_text",
            "file_path": "lib/matplotlib/backends/backend_ps.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is related to a TypeError that occurs when saving a figure with the PostScript backend if the figure contains a multi-line text label with an empty line. The traceback points to a specific line in the PostScript backend code where a TypeError occurs due to trying to unpack a non-iterable NoneType object. The search results provided include a detailed section of the `RendererPS` class, particularly the `draw_text` method, which handles the rendering of text in the PostScript backend. Within this method, there is a section that processes the text and builds a stream of PostScript commands. The error mentioned in the issue could be related to the handling of this stream when an empty line is encountered in the text label. Specifically, the issue might be in the part of the code where the stream is iterated over and unpacked. Given the information provided, the relevant code spans within the search results are those related to the `draw_text` method where the stream is processed and where the error might occur. These spans include the logic for handling math text, AFM fonts, and TTF fonts, as well as the part where the stream of PostScript commands is built and written out. Based on the issue description and the search results, the identified relevant code spans are those related to the `draw_text` method.",
            "identified_spans": [
              {
                "span_ids": [
                  "RendererPS.__init__",
                  "RendererPS.draw_text"
                ],
                "file_path": "lib/matplotlib/backends/backend_ps.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3545,
          "output_tokens": 355,
          "retry_message": null,
          "completion_cost": 0.015960000000000002
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The issue states that a TypeError occurs when saving a figure with the PostScript backend if the figure contains a multi-line text label with an empty line. The traceback indicates that the error is triggered in the 'draw_text' method of 'Backend_ps.py'. The provided file context contains the 'draw_text' method of 'RendererPS' class in 'backend_ps.py'. The code within this method handles the rendering of text and includes logic for both AFM and TTF fonts. The relevant section for TTF fonts involves checking and handling 'curr_stream' before appending it to the 'stream' list. Based on the additional information provided, adding 'if curr_stream:' before line 669 of 'backend_ps.py' might fix the issue. Since the relevant method and context where the error occurs are provided, we can consider the file context complete for identifying the fix. However, the actual fix suggested by the additional information ('if curr_stream:' before line 669) is not provided directly in the file context, indicating that the actual code modification needed is not within the provided file context.",
            "search_suggestions": "To make the file context complete, update the 'backend_ps.py' file to include 'if curr_stream:' before the 'stream.append(curr_stream)' line. This is line 669 based on the provided information but this specific line is not available in the given file context. The exact line number and context should be verified in the actual codebase."
          },
          "output": {
            "message": "To make the file context complete, update the 'backend_ps.py' file to include 'if curr_stream:' before the 'stream.append(curr_stream)' line. This is line 669 based on the provided information but this specific line is not available in the given file context. The exact line number and context should be verified in the actual codebase."
          },
          "input_tokens": 3488,
          "output_tokens": 352,
          "retry_message": null,
          "completion_cost": 0.015744
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "To make the file context complete, update the 'backend_ps.py' file to include 'if curr_stream:' before the 'stream.append(curr_stream)' line. This is line 669 based on the provided information but this specific line is not available in the given file context. The exact line number and context should be verified in the actual codebase.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The provided file context for 'backend_ps.py' does not include the specific line number where 'stream.append(curr_stream)' is located, which is crucial for applying the suggested fix ('if curr_stream:' before this line). To accurately apply the fix, we need to locate the exact line number and context in the actual codebase. However, based on the suggestion and the provided context, we can still formulate a targeted search to identify the exact location and fix the issue.",
            "search_requests": [
              {
                "query": "stream.append(curr_stream)",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/backends/backend_ps.py",
                "function_names": [
                  "draw_text"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 519,
                "span_id": "RendererPS.draw_text",
                "file_path": "lib/matplotlib/backends/backend_ps.py"
              }
            ],
            "search_requests": [
              {
                "query": "stream.append(curr_stream)",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/backends/backend_ps.py",
                "function_names": [
                  "draw_text"
                ]
              }
            ]
          },
          "input_tokens": 6297,
          "output_tokens": 205,
          "retry_message": null,
          "completion_cost": 0.021966000000000003
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 519,
            "span_id": "RendererPS.draw_text",
            "file_path": "lib/matplotlib/backends/backend_ps.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is a TypeError when attempting to save a figure with a PostScript backend, specifically when the figure contains a multi-line text label with an empty line. The traceback points to a problem in the draw_text method of the RendererPS class in backend_ps.py. The relevant code spans are the draw_text method itself, particularly the section that processes text with line breaks, and the part where the PostScript command is generated. The provided search results already contain the relevant code span for the draw_text method, including the part that processes the text and generates the PostScript command. Therefore, the search task is complete as the relevant code spans have been identified.",
            "identified_spans": [
              {
                "span_ids": [
                  "RendererPS.draw_text"
                ],
                "file_path": "lib/matplotlib/backends/backend_ps.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4645,
          "output_tokens": 216,
          "retry_message": null,
          "completion_cost": 0.017175000000000003
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The provided file context for 'backend_ps.py' does not include the specific line number where 'stream.append(curr_stream)' is located, which is crucial for applying the suggested fix ('if curr_stream:' before this line). To accurately apply the fix, we need to locate the exact line number and context in the actual codebase. However, based on the suggestion and the provided context, we can still formulate a targeted search to identify the exact location and fix the issue.",
            "search_suggestions": "Search within 'backend_ps.py' for the line containing 'stream.append(curr_stream)' and the surrounding context to apply the suggested fix."
          },
          "output": {
            "message": "Search within 'backend_ps.py' for the line containing 'stream.append(curr_stream)' and the surrounding context to apply the suggested fix."
          },
          "input_tokens": 5752,
          "output_tokens": 171,
          "retry_message": null,
          "completion_cost": 0.019821000000000002
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Search within 'backend_ps.py' for the line containing 'stream.append(curr_stream)' and the surrounding context to apply the suggested fix.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "scratch_pad": "The updated file context for 'backend_ps.py' now includes the relevant section where 'stream.append(curr_stream)' is located. This line is part of the 'draw_text' method where text rendering logic is implemented. The suggested fix 'if curr_stream:' should be applied immediately before 'stream.append(curr_stream)' to ensure that a NoneType object is not accidentally added to the stream. This change will likely resolve the 'TypeError: cannot unpack non-iterable NoneType object' issue when rendering multi-line text labels with empty lines.",
            "search_requests": []
          },
          "output": {
            "message": "The updated file context for 'backend_ps.py' now includes the relevant section where 'stream.append(curr_stream)' is located. This line is part of the 'draw_text' method where text rendering logic is implemented. The suggested fix 'if curr_stream:' should be applied immediately before 'stream.append(curr_stream)' to ensure that a NoneType object is not accidentally added to the stream. This change will likely resolve the 'TypeError: cannot unpack non-iterable NoneType object' issue when rendering multi-line text labels with empty lines."
          },
          "input_tokens": 8833,
          "output_tokens": 148,
          "retry_message": null,
          "completion_cost": 0.028719
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "The updated file context for 'backend_ps.py' now includes the relevant section where 'stream.append(curr_stream)' is located. This line is part of the 'draw_text' method where text rendering logic is implemented. The suggested fix 'if curr_stream:' should be applied immediately before 'stream.append(curr_stream)' to ensure that a NoneType object is not accidentally added to the stream. This change will likely resolve the 'TypeError: cannot unpack non-iterable NoneType object' issue when rendering multi-line text labels with empty lines.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "RendererPS.draw_text",
            "file_path": "lib/matplotlib/backends/backend_ps.py",
            "scratch_pad": "The reported issue is a TypeError due to attempting to unpack a NoneType object when rendering multi-line text labels with empty lines using the PostScript backend. The suggested fix is to add a check for 'None' before appending to the 'stream' list in the 'draw_text' method. I will apply this change.",
            "instructions": "Add a check for 'curr_stream' being 'None' before appending to the 'stream' list in the 'draw_text' method of the 'RendererPS' class."
          },
          "output": {
            "span_id": "RendererPS.draw_text",
            "file_path": "lib/matplotlib/backends/backend_ps.py",
            "instructions": "Add a check for 'curr_stream' being 'None' before appending to the 'stream' list in the 'draw_text' method of the 'RendererPS' class."
          },
          "input_tokens": 7340,
          "output_tokens": 171,
          "retry_message": null,
          "completion_cost": 0.024585000000000003
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "RendererPS.draw_text",
        "end_line": null,
        "file_path": "lib/matplotlib/backends/backend_ps.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Add a check for 'curr_stream' being 'None' before appending to the 'stream' list in the 'draw_text' method of the 'RendererPS' class.\n\nThe instruction requires a check for 'curr_stream' being 'None' before appending to the 'stream' list. This check needs to be added around line 662 or potentially updated starting from line 656 where 'curr_stream' is initially set.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 669,
            "start_line": 656,
            "scratch_pad": "The instruction requires a check for 'curr_stream' being 'None' before appending to the 'stream' list. This check needs to be added around line 662 or potentially updated starting from line 656 where 'curr_stream' is initially set."
          },
          "output": {
            "span_id": "RendererPS.draw_text",
            "end_line": 669,
            "file_path": "lib/matplotlib/backends/backend_ps.py",
            "start_line": 656,
            "instructions": "Add a check for 'curr_stream' being 'None' before appending to the 'stream' list in the 'draw_text' method of the 'RendererPS' class.\n\nThe instruction requires a check for 'curr_stream' being 'None' before appending to the 'stream' list. This check needs to be added around line 662 or potentially updated starting from line 656 where 'curr_stream' is initially set."
          },
          "input_tokens": 1524,
          "output_tokens": 96,
          "retry_message": null,
          "completion_cost": 0.006012000000000001
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "RendererPS.draw_text",
        "end_line": 669,
        "file_path": "lib/matplotlib/backends/backend_ps.py",
        "max_tokens": 1000,
        "start_line": 656,
        "temperature": 1.6,
        "instructions": "Add a check for 'curr_stream' being 'None' before appending to the 'stream' list in the 'draw_text' method of the 'RendererPS' class.\n\nThe instruction requires a check for 'curr_stream' being 'None' before appending to the 'stream' list. This check needs to be added around line 662 or potentially updated starting from line 656 where 'curr_stream' is initially set.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```xml\n<replace>\n            prev_font = curr_stream = None\n            for item in _text_helpers.layout(s, font):\n                ps_name = (item.ft_object.postscript_name\n                           .encode(\"ascii\", \"replace\").decode(\"ascii\"))\n                if item.ft_object is not prev_font:\n                    if curr_stream is not None:\n                        stream.append(curr_stream)\n                    prev_font = item.ft_object\n                    curr_stream = [ps_name, []]\n                curr_stream[1].append(\n                    (item.x, item.ft_object.get_glyph_name(item.glyph_idx))\n                )\n            # append the last entry\n            if curr_stream is not None:\n                stream.append(curr_stream)\n</replace>"
          },
          "output": {
            "diff": "--- lib/matplotlib/backends/backend_ps.py\n+++ lib/matplotlib/backends/backend_ps.py\n@@ -658,7 +658,7 @@\n                 ps_name = (item.ft_object.postscript_name\n                            .encode(\"ascii\", \"replace\").decode(\"ascii\"))\n                 if item.ft_object is not prev_font:\n-                    if curr_stream:\n+                    if curr_stream is not None:\n                         stream.append(curr_stream)\n                     prev_font = item.ft_object\n                     curr_stream = [ps_name, []]\n@@ -666,7 +666,8 @@\n                     (item.x, item.ft_object.get_glyph_name(item.glyph_idx))\n                 )\n             # append the last entry\n-            stream.append(curr_stream)\n+            if curr_stream is not None:\n+                stream.append(curr_stream)\n \n         self.set_color(*gc.get_rgb())\n \n",
            "message": "Applied the change to lib/matplotlib/backends/backend_ps.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 7687,
          "output_tokens": 191,
          "retry_message": null,
          "completion_cost": 0.025926
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- lib/matplotlib/backends/backend_ps.py\n+++ lib/matplotlib/backends/backend_ps.py\n@@ -658,7 +658,7 @@\n                 ps_name = (item.ft_object.postscript_name\n                            .encode(\"ascii\", \"replace\").decode(\"ascii\"))\n                 if item.ft_object is not prev_font:\n-                    if curr_stream:\n+                    if curr_stream is not None:\n                         stream.append(curr_stream)\n                     prev_font = item.ft_object\n                     curr_stream = [ps_name, []]\n@@ -666,7 +666,8 @@\n                     (item.x, item.ft_object.get_glyph_name(item.glyph_idx))\n                 )\n             # append the last entry\n-            stream.append(curr_stream)\n+            if curr_stream is not None:\n+                stream.append(curr_stream)\n \n         self.set_color(*gc.get_rgb())\n \n",
        "model": "deepseek-coder",
        "message": "Applied the change to lib/matplotlib/backends/backend_ps.py.\n\n<scratch_pad>\n```xml\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The changes have been applied as specified in the issue. The check for 'curr_stream' being 'None' has been added correctly before appending to the 'stream' list in the 'draw_text' method, which should resolve the 'TypeError: cannot unpack non-iterable NoneType object' when rendering multi-line text labels with empty lines using the PostScript backend.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The changes applied in the diff correctly implement the check for 'curr_stream' being 'None' before appending to the 'stream' list in the 'draw_text' method. This ensures that a NoneType object is not accidentally added to the stream, thereby resolving the reported TypeError.",
            "instructions": null
          },
          "output": {
            "message": "The changes have been applied as specified in the issue. The check for 'curr_stream' being 'None' has been added correctly before appending to the 'stream' list in the 'draw_text' method, which should resolve the 'TypeError: cannot unpack non-iterable NoneType object' when rendering multi-line text labels with empty lines using the PostScript backend."
          },
          "input_tokens": 7831,
          "output_tokens": 199,
          "retry_message": null,
          "completion_cost": 0.026478
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The changes have been applied as specified in the issue. The check for 'curr_stream' being 'None' has been added correctly before appending to the 'stream' list in the 'draw_text' method, which should resolve the 'TypeError: cannot unpack non-iterable NoneType object' when rendering multi-line text labels with empty lines using the PostScript backend.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "[Bug]: Text label with empty line causes a \"TypeError: cannot unpack non-iterable NoneType object\" in PostScript backend\n### Bug summary\n\nWhen saving a figure with the PostScript backend, a\r\n> TypeError: cannot unpack non-iterable NoneType object\r\n\r\nhappens if the figure contains a multi-line text label with an empty line (see example).\n\n### Code for reproduction\n\n```python\nfrom matplotlib.figure import Figure\r\n\r\nfigure = Figure()\r\nax = figure.add_subplot(111)\r\n# ax.set_title('\\nLower title')  # this would cause an error as well\r\nax.annotate(text='\\nLower label', xy=(0, 0))\r\nfigure.savefig('figure.eps')\n```\n\n\n### Actual outcome\n\n$ ./venv/Scripts/python save_ps.py\r\nTraceback (most recent call last):\r\n  File \"C:\\temp\\matplotlib_save_ps\\save_ps.py\", line 7, in <module>\r\n    figure.savefig('figure.eps')\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\figure.py\", line 3272, in savefig\r\n    self.canvas.print_figure(fname, **kwargs)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backend_bases.py\", line 2338, in print_figure\r\n    result = print_method(\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backend_bases.py\", line 2204, in <lambda>\r\n    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\_api\\deprecation.py\", line 410, in wrapper\r\n    return func(*inner_args, **inner_kwargs)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backends\\backend_ps.py\", line 869, in _print_ps\r\n    printer(fmt, outfile, dpi=dpi, dsc_comments=dsc_comments,\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backends\\backend_ps.py\", line 927, in _print_figure\r\n    self.figure.draw(renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 74, in draw_wrapper\r\n    result = draw(artist, renderer, *args, **kwargs)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\figure.py\", line 3069, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\axes\\_base.py\", line 3106, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\text.py\", line 1995, in draw\r\n    Text.draw(self, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\text.py\", line 736, in draw\r\n    textrenderer.draw_text(gc, x, y, clean_line,\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backends\\backend_ps.py\", line 248, in wrapper\r\n    return meth(self, *args, **kwargs)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backends\\backend_ps.py\", line 673, in draw_text\r\n    for ps_name, xs_names in stream:\r\nTypeError: cannot unpack non-iterable NoneType object\r\n\n\n### Expected outcome\n\nThe figure can be saved as `figure.eps` without error.\n\n### Additional information\n\n- seems to happen if a text label or title contains a linebreak with an empty line\r\n- works without error for other backends such as PNG, PDF, SVG, Qt\r\n- works with matplotlib<=3.5.3\r\n- adding `if curr_stream:` before line 669 of `backend_ps.py` seems to fix the bug \n\n### Operating system\n\nWindows\n\n### Matplotlib Version\n\n3.6.0\n\n### Matplotlib Backend\n\n_No response_\n\n### Python version\n\n3.9.13\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip\n"
}