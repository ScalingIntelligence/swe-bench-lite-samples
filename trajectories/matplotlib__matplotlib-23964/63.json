{
  "info": {
    "duration": 258.56085753440857,
    "submission": "diff --git a/lib/matplotlib/backends/backend_ps.py b/lib/matplotlib/backends/backend_ps.py\nindex f209e811f1..bd996b7509 100644\n--- a/lib/matplotlib/backends/backend_ps.py\n+++ b/lib/matplotlib/backends/backend_ps.py\n@@ -666,7 +666,8 @@ grestore\n                     (item.x, item.ft_object.get_glyph_name(item.glyph_idx))\n                 )\n             # append the last entry\n-            stream.append(curr_stream)\n+            if curr_stream:\n+                stream.append(curr_stream)\n \n         self.set_color(*gc.get_rgb())\n \n",
    "total_cost": 0.26934,
    "instance_id": "matplotlib__matplotlib-23964",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves a 'TypeError: cannot unpack non-iterable NoneType object' occurring when saving a figure using the PostScript backend, specifically when the figure contains a multi-line text label with an empty line. The error stack trace points to the file 'backend_ps.py' and particularly the function 'draw_text'. Focus should be on this file and function to identify where a NoneType object is being unpacked.",
            "search_requests": [
              {
                "query": "TypeError: cannot unpack non-iterable NoneType object",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/matplotlib/backends/backend_ps.py",
                "function_names": [
                  "draw_text"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 519,
                "span_id": "RendererPS.draw_text",
                "file_path": "lib/matplotlib/backends/backend_ps.py"
              }
            ],
            "search_requests": [
              {
                "query": "TypeError: cannot unpack non-iterable NoneType object",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/matplotlib/backends/backend_ps.py",
                "function_names": [
                  "draw_text"
                ]
              }
            ]
          },
          "input_tokens": 4911,
          "output_tokens": 193,
          "retry_message": null,
          "completion_cost": 0.017627999999999998
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 519,
            "span_id": "RendererPS.draw_text",
            "file_path": "lib/matplotlib/backends/backend_ps.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about a 'TypeError: cannot unpack non-iterable NoneType object' occurring when saving a figure with the PostScript backend if the figure contains a multi-line text label with an empty line. The stack trace indicates that the error is happening in the 'draw_text' method of the 'RendererPS' class in 'backend_ps.py'. From the search results, it is clear that this method processes text elements in figures. The method handles text rendering in two different ways depending on the 'ps.useafm' setting in the rcParams. When 'ps.useafm' is True, it processes text using Adobe Font Metrics (AFM) fonts. When it's False, it uses TrueType (TTF) fonts. The key part of the method that seems relevant to the issue is the section where it accumulates 'curr_stream' and appends it to 'stream' if 'item.ft_object' is not 'prev_font'. Given the error described, it's likely that 'curr_stream' ends up being 'None' in some cases, especially with multi-line text including empty lines, thus causing the 'TypeError'. Identifying the exact code span responsible for this would be helpful in applying the suggested fix or debugging further.",
            "identified_spans": [
              {
                "span_ids": [
                  "RendererPS.draw_text"
                ],
                "file_path": "lib/matplotlib/backends/backend_ps.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3545,
          "output_tokens": 343,
          "retry_message": null,
          "completion_cost": 0.015780000000000002
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The file context provided does include the 'backend_ps.py' file, which is directly implicated in the stack trace of the issue. The function 'draw_text' is present, and it contains the logic that deals with text rendering, including handling multi-line text. The specific section of the code that is likely causing the issue (unpacking a NoneType object) is attributed to the 'stream' variable in the 'draw_text' function. The provided code for 'draw_text' does indeed handle 'stream' and includes a check for 'curr_stream' within the loop that processes text items. This suggests that the provided context is relevant to the issue. However, a direct check for None before unpacking 'curr_stream' is not explicitly present, which could be the reason for the TypeError. Based on the issue's description and the provided context, it is likely that the current code does not include all necessary checks to avoid the NoneType error. Adding a check before unpacking 'curr_stream' seems necessary to avoid the TypeError.",
            "search_suggestions": "Given the detailed nature of the issue and the code context, additional inspection of the generation and handling of 'curr_stream' variable in the 'draw_text' function may be necessary. Specifically, ensuring that 'curr_stream' is not None before attempting to unpack it could be a critical part of the solution that is currently missing from the provided code."
          },
          "output": {
            "message": "Given the detailed nature of the issue and the code context, additional inspection of the generation and handling of 'curr_stream' variable in the 'draw_text' function may be necessary. Specifically, ensuring that 'curr_stream' is not None before attempting to unpack it could be a critical part of the solution that is currently missing from the provided code."
          },
          "input_tokens": 3447,
          "output_tokens": 328,
          "retry_message": null,
          "completion_cost": 0.015261
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Given the detailed nature of the issue and the code context, additional inspection of the generation and handling of 'curr_stream' variable in the 'draw_text' function may be necessary. Specifically, ensuring that 'curr_stream' is not None before attempting to unpack it could be a critical part of the solution that is currently missing from the provided code.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "Having reviewed the initial file context, it is clear that the issue stems from the 'curr_stream' variable potentially being None in the 'draw_text' method of the 'RendererPS' class within the 'backend_ps.py' file. The provided solution of adding a check 'if curr_stream:' before using it in the loop seems appropriate. However, it needs to be implemented in the correct scope within the 'draw_text' method. Given this, further searching within the 'backend_ps.py' file is suggested, focusing specifically on ensuring that 'curr_stream' is properly instantiated and used within the 'draw_text' method.",
            "search_requests": [
              {
                "query": "Ensure curr_stream is not None before unpacking",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/matplotlib/backends/backend_ps.py",
                "function_names": [
                  "draw_text"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 519,
                "span_id": "RendererPS.draw_text",
                "file_path": "lib/matplotlib/backends/backend_ps.py"
              }
            ],
            "search_requests": [
              {
                "query": "Ensure curr_stream is not None before unpacking",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/matplotlib/backends/backend_ps.py",
                "function_names": [
                  "draw_text"
                ]
              }
            ]
          },
          "input_tokens": 6253,
          "output_tokens": 246,
          "retry_message": null,
          "completion_cost": 0.022449
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 519,
            "span_id": "RendererPS.draw_text",
            "file_path": "lib/matplotlib/backends/backend_ps.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue indicates a TypeError caused by an iterable NoneType object when saving a figure with the PostScript backend if the figure contains a multi-line text label with an empty line. The traceback points to the 'draw_text' method in the 'RenderePS' class in 'backend_ps.py'. The code provided shows the implementation of this method, and it is indeed the part of the code that could be causing the issue. The specific line 'for ps_name, xs_names in stream:' is likely where the TypeError occurs, as 'stream' is expected to be a list of tuples, but if it contains a 'None' value, this would cause the TypeError. The current context and search results both provide the same method, confirming that this is the relevant code section.",
            "identified_spans": [
              {
                "span_ids": [
                  "RendererPS.draw_text"
                ],
                "file_path": "lib/matplotlib/backends/backend_ps.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4645,
          "output_tokens": 233,
          "retry_message": null,
          "completion_cost": 0.01743
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "Having reviewed the initial file context, it is clear that the issue stems from the 'curr_stream' variable potentially being None in the 'draw_text' method of the 'RendererPS' class within the 'backend_ps.py' file. The provided solution of adding a check 'if curr_stream:' before using it in the loop seems appropriate. However, it needs to be implemented in the correct scope within the 'draw_text' method. Given this, further searching within the 'backend_ps.py' file is suggested, focusing specifically on ensuring that 'curr_stream' is properly instantiated and used within the 'draw_text' method.",
            "search_suggestions": "Focus on the 'draw_text' method within the 'RendererPS' class in 'backend_ps.py' to ensure 'curr_stream' is properly checked and instantiated before being used in the loop."
          },
          "output": {
            "message": "Focus on the 'draw_text' method within the 'RendererPS' class in 'backend_ps.py' to ensure 'curr_stream' is properly checked and instantiated before being used in the loop."
          },
          "input_tokens": 5787,
          "output_tokens": 217,
          "retry_message": null,
          "completion_cost": 0.020616000000000002
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Focus on the 'draw_text' method within the 'RendererPS' class in 'backend_ps.py' to ensure 'curr_stream' is properly checked and instantiated before being used in the loop.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The file context indicates that the 'draw_text' method within the 'RendererPS' class in 'backend_ps.py' handles the generation and usage of the 'curr_stream' variable. The method includes conditions to check if 'curr_stream' is None before appending it to the 'stream' list, which helps prevent unpacking a NoneType object. However, the context suggests that despite this precaution, there might still be a scenario where 'curr_stream' is not properly initialized or its state mismanaged, which could lead to the error when attempting to unpack it. To address this, further inspection is needed within the 'draw_text' method to ensure that 'curr_stream' is consistently valid before being used in the loop.",
            "search_requests": [
              {
                "query": "Ensure curr_stream is properly initialized and not None before it is used in a loop",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/matplotlib/backends/backend_ps.py",
                "function_names": [
                  "draw_text"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 519,
                "span_id": "RendererPS.draw_text",
                "file_path": "lib/matplotlib/backends/backend_ps.py"
              }
            ],
            "search_requests": [
              {
                "query": "Ensure curr_stream is properly initialized and not None before it is used in a loop",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/matplotlib/backends/backend_ps.py",
                "function_names": [
                  "draw_text"
                ]
              }
            ]
          },
          "input_tokens": 8841,
          "output_tokens": 272,
          "retry_message": null,
          "completion_cost": 0.030603
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 519,
            "span_id": "RendererPS.draw_text",
            "file_path": "lib/matplotlib/backends/backend_ps.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about a TypeError occurring when saving a figure with the PostScript backend if the figure contains a multi-line text label with an empty line. The traceback indicates that the error occurs at line 673 in `draw_text` method of `RendererPS` class in `backend_ps.py`. This method is responsible for rendering text in the PostScript format. Specifically, the error is due to an attempt to unpack a `NoneType` object in the `stream` list at line 673. The current context already identifies the relevant code spans in `backend_ps.py`, specifically the `draw_text` method. The search results confirm the same code span, indicating that the identified code is relevant to the issue. Additionally, the issue suggests a potential fix by adding a check `if curr_stream:` before line 669. This fix ensures that only non-None streams are processed. Given the provided context and the similarity in the search results, the task of identifying relevant code spans related to the reported issue is complete.",
            "identified_spans": [
              {
                "span_ids": [
                  "RendererPS.draw_text"
                ],
                "file_path": "lib/matplotlib/backends/backend_ps.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 6980,
          "output_tokens": 271,
          "retry_message": null,
          "completion_cost": 0.025005
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context indicates that the 'draw_text' method within the 'RendererPS' class in 'backend_ps.py' handles the generation and usage of the 'curr_stream' variable. The method includes conditions to check if 'curr_stream' is None before appending it to the 'stream' list, which helps prevent unpacking a NoneType object. However, the context suggests that despite this precaution, there might still be a scenario where 'curr_stream' is not properly initialized or its state mismanaged, which could lead to the error when attempting to unpack it. To address this, further inspection is needed within the 'draw_text' method to ensure that 'curr_stream' is consistently valid before being used in the loop.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 6958,
          "output_tokens": 193,
          "retry_message": null,
          "completion_cost": 0.023769
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "RendererPS.draw_text",
            "file_path": "lib/matplotlib/backends/backend_ps.py",
            "scratch_pad": "The issue described indicates a TypeError when unpacking a NoneType object in the PostScript backend. This occurs when the figure contains a multi-line text label with an empty line. The suggested fix involves adding a check to ensure 'curr_stream' is not None before attempting to unpack it. The relevant code span is within the 'draw_text' method of the 'RendererPS' class.",
            "instructions": "Add a check to ensure 'curr_stream' is not None before iterating over it in the 'draw_text' method of the 'RendererPS' class."
          },
          "output": {
            "span_id": "RendererPS.draw_text",
            "file_path": "lib/matplotlib/backends/backend_ps.py",
            "instructions": "Add a check to ensure 'curr_stream' is not None before iterating over it in the 'draw_text' method of the 'RendererPS' class."
          },
          "input_tokens": 7222,
          "output_tokens": 180,
          "retry_message": null,
          "completion_cost": 0.024366000000000002
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "RendererPS.draw_text",
        "end_line": null,
        "file_path": "lib/matplotlib/backends/backend_ps.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Add a check to ensure 'curr_stream' is not None before iterating over it in the 'draw_text' method of the 'RendererPS' class.\n\nThe code needs to check if 'curr_stream' is not None before iterating over it. The relevant lines to modify are those where 'curr_stream' is being iterated over.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 669,
            "start_line": 656,
            "scratch_pad": "The code needs to check if 'curr_stream' is not None before iterating over it. The relevant lines to modify are those where 'curr_stream' is being iterated over."
          },
          "output": {
            "span_id": "RendererPS.draw_text",
            "end_line": 669,
            "file_path": "lib/matplotlib/backends/backend_ps.py",
            "start_line": 656,
            "instructions": "Add a check to ensure 'curr_stream' is not None before iterating over it in the 'draw_text' method of the 'RendererPS' class.\n\nThe code needs to check if 'curr_stream' is not None before iterating over it. The relevant lines to modify are those where 'curr_stream' is being iterated over."
          },
          "input_tokens": 1520,
          "output_tokens": 77,
          "retry_message": null,
          "completion_cost": 0.005715
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "RendererPS.draw_text",
        "end_line": 669,
        "file_path": "lib/matplotlib/backends/backend_ps.py",
        "max_tokens": 1000,
        "start_line": 656,
        "temperature": 1.6,
        "instructions": "Add a check to ensure 'curr_stream' is not None before iterating over it in the 'draw_text' method of the 'RendererPS' class.\n\nThe code needs to check if 'curr_stream' is not None before iterating over it. The relevant lines to modify are those where 'curr_stream' is being iterated over.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n            prev_font = curr_stream = None\n            for item in _text_helpers.layout(s, font):\n                ps_name = (item.ft_object.postscript_name\n                           .encode(\"ascii\", \"replace\").decode(\"ascii\"))\n                if item.ft_object is not prev_font:\n                    if curr_stream:\n                        stream.append(curr_stream)\n                    prev_font = item.ft_object\n                    curr_stream = [ps_name, []]\n                curr_stream[1].append(\n                    (item.x, item.ft_object.get_glyph_name(item.glyph_idx))\n                )\n            # append the last entry\n            if curr_stream:\n                stream.append(curr_stream)\n</replace>"
          },
          "output": {
            "diff": "--- lib/matplotlib/backends/backend_ps.py\n+++ lib/matplotlib/backends/backend_ps.py\n@@ -666,7 +666,8 @@\n                     (item.x, item.ft_object.get_glyph_name(item.glyph_idx))\n                 )\n             # append the last entry\n-            stream.append(curr_stream)\n+            if curr_stream:\n+                stream.append(curr_stream)\n \n         self.set_color(*gc.get_rgb())\n \n",
            "message": "Applied the change to lib/matplotlib/backends/backend_ps.py.",
            "verification_errors": []
          },
          "input_tokens": 7664,
          "output_tokens": 182,
          "retry_message": null,
          "completion_cost": 0.025722000000000002
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- lib/matplotlib/backends/backend_ps.py\n+++ lib/matplotlib/backends/backend_ps.py\n@@ -666,7 +666,8 @@\n                     (item.x, item.ft_object.get_glyph_name(item.glyph_idx))\n                 )\n             # append the last entry\n-            stream.append(curr_stream)\n+            if curr_stream:\n+                stream.append(curr_stream)\n \n         self.set_color(*gc.get_rgb())\n \n",
        "model": "deepseek-coder",
        "message": "Applied the change to lib/matplotlib/backends/backend_ps.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The required change has been successfully applied in the 'draw_text' method of the 'RendererPS' class, ensuring that 'curr_stream' is checked for None before it is used. This resolves the reported issue.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The provided git diff confirms the addition of a check to ensure 'curr_stream' is not None before appending it to the stream. This modification directly addresses the TypeError caused by unpacking a NoneType object.",
            "instructions": null
          },
          "output": {
            "message": "The required change has been successfully applied in the 'draw_text' method of the 'RendererPS' class, ensuring that 'curr_stream' is checked for None before it is used. This resolves the reported issue."
          },
          "input_tokens": 7582,
          "output_tokens": 150,
          "retry_message": null,
          "completion_cost": 0.024995999999999997
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The required change has been successfully applied in the 'draw_text' method of the 'RendererPS' class, ensuring that 'curr_stream' is checked for None before it is used. This resolves the reported issue.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "[Bug]: Text label with empty line causes a \"TypeError: cannot unpack non-iterable NoneType object\" in PostScript backend\n### Bug summary\n\nWhen saving a figure with the PostScript backend, a\r\n> TypeError: cannot unpack non-iterable NoneType object\r\n\r\nhappens if the figure contains a multi-line text label with an empty line (see example).\n\n### Code for reproduction\n\n```python\nfrom matplotlib.figure import Figure\r\n\r\nfigure = Figure()\r\nax = figure.add_subplot(111)\r\n# ax.set_title('\\nLower title')  # this would cause an error as well\r\nax.annotate(text='\\nLower label', xy=(0, 0))\r\nfigure.savefig('figure.eps')\n```\n\n\n### Actual outcome\n\n$ ./venv/Scripts/python save_ps.py\r\nTraceback (most recent call last):\r\n  File \"C:\\temp\\matplotlib_save_ps\\save_ps.py\", line 7, in <module>\r\n    figure.savefig('figure.eps')\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\figure.py\", line 3272, in savefig\r\n    self.canvas.print_figure(fname, **kwargs)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backend_bases.py\", line 2338, in print_figure\r\n    result = print_method(\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backend_bases.py\", line 2204, in <lambda>\r\n    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\_api\\deprecation.py\", line 410, in wrapper\r\n    return func(*inner_args, **inner_kwargs)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backends\\backend_ps.py\", line 869, in _print_ps\r\n    printer(fmt, outfile, dpi=dpi, dsc_comments=dsc_comments,\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backends\\backend_ps.py\", line 927, in _print_figure\r\n    self.figure.draw(renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 74, in draw_wrapper\r\n    result = draw(artist, renderer, *args, **kwargs)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\figure.py\", line 3069, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\axes\\_base.py\", line 3106, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\text.py\", line 1995, in draw\r\n    Text.draw(self, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\text.py\", line 736, in draw\r\n    textrenderer.draw_text(gc, x, y, clean_line,\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backends\\backend_ps.py\", line 248, in wrapper\r\n    return meth(self, *args, **kwargs)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backends\\backend_ps.py\", line 673, in draw_text\r\n    for ps_name, xs_names in stream:\r\nTypeError: cannot unpack non-iterable NoneType object\r\n\n\n### Expected outcome\n\nThe figure can be saved as `figure.eps` without error.\n\n### Additional information\n\n- seems to happen if a text label or title contains a linebreak with an empty line\r\n- works without error for other backends such as PNG, PDF, SVG, Qt\r\n- works with matplotlib<=3.5.3\r\n- adding `if curr_stream:` before line 669 of `backend_ps.py` seems to fix the bug \n\n### Operating system\n\nWindows\n\n### Matplotlib Version\n\n3.6.0\n\n### Matplotlib Backend\n\n_No response_\n\n### Python version\n\n3.9.13\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip\n"
}