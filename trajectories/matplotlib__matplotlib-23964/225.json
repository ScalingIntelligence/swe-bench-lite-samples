{
  "info": {
    "duration": 247.53625345230103,
    "submission": "diff --git a/lib/matplotlib/backends/backend_ps.py b/lib/matplotlib/backends/backend_ps.py\nindex f209e811f1..02954d6cdc 100644\n--- a/lib/matplotlib/backends/backend_ps.py\n+++ b/lib/matplotlib/backends/backend_ps.py\n@@ -658,7 +658,7 @@ grestore\n                 ps_name = (item.ft_object.postscript_name\n                            .encode(\"ascii\", \"replace\").decode(\"ascii\"))\n                 if item.ft_object is not prev_font:\n-                    if curr_stream:\n+                    if curr_stream is not None:\n                         stream.append(curr_stream)\n                     prev_font = item.ft_object\n                     curr_stream = [ps_name, []]\n@@ -666,7 +666,8 @@ grestore\n                     (item.x, item.ft_object.get_glyph_name(item.glyph_idx))\n                 )\n             # append the last entry\n-            stream.append(curr_stream)\n+            if curr_stream is not None:\n+                stream.append(curr_stream)\n \n         self.set_color(*gc.get_rgb())\n \n",
    "total_cost": 0.190287,
    "instance_id": "matplotlib__matplotlib-23964",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue is a TypeError caused by an attempt to unpack a non-iterable NoneType object when saving a figure using the PostScript backend. This occurs specifically when the figure contains a multi-line text label with an empty line. Given the stack trace and the specific error, it's clear that the problem is occurring within the 'backend_ps.py' file in the draw_text method or its related functions. To resolve this, we need to investigate the 'backend_ps.py' file for the problematic code block.",
            "search_requests": [
              {
                "query": "cannot unpack non-iterable NoneType object",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/lib/matplotlib/backends/backend_ps.py",
                "function_names": [
                  "draw_text"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 519,
                "span_id": "RendererPS.draw_text",
                "file_path": "lib/matplotlib/backends/backend_ps.py"
              }
            ],
            "search_requests": [
              {
                "query": "cannot unpack non-iterable NoneType object",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/lib/matplotlib/backends/backend_ps.py",
                "function_names": [
                  "draw_text"
                ]
              }
            ]
          },
          "input_tokens": 4911,
          "output_tokens": 206,
          "retry_message": null,
          "completion_cost": 0.017823
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 519,
            "span_id": "RendererPS.draw_text",
            "file_path": "lib/matplotlib/backends/backend_ps.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue relates to a TypeError that occurs when saving a figure with a multi-line text label containing an empty line using the PostScript backend in Matplotlib. The error traceback points to the `draw_text` method in `backend_ps.py` as the source. Upon analyzing the provided code span, it is evident that this is the relevant portion of the codebase. The `draw_text` method processes text for rendering, and the error message indicates a problem with unpacking a non-iterable NoneType object. The context provided in the issue suggests that adding a check for `if curr_stream:` before processing the stream might fix the issue, which aligns with the segment of code handling the `curr_stream` variable. This confirms the relevance of the provided code span to the reported issue. Therefore, I will identify the `draw_text` span as relevant to the issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "RendererPS.draw_text"
                ],
                "file_path": "lib/matplotlib/backends/backend_ps.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3545,
          "output_tokens": 261,
          "retry_message": null,
          "completion_cost": 0.01455
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The issue is related to drawing text in the PostScript backend of Matplotlib, specifically handling text labels with empty lines. The traceback indicates the error occurs in the draw_text method of backend_ps.py. The file context provided contains this method. The method handles the drawing of text, including the case of multi-line text with different handling for AFM (Adobe Font Metrics) and TrueType fonts. The actual error, 'TypeError: cannot unpack non-iterable NoneType object', is likely triggered by a specific condition not being met in the logic for handling multi-line text, resulting in a NoneType object being processed instead of a valid iterable. Given the context provided, it seems we are on the right track to understand and potentially fix the issue, as the relevant method where the error occurs is present.",
            "search_suggestions": "To ensure completeness, more granular debugging of the 'draw_text' method in backend_ps.py is suggested, focusing on the streams and checks for NoneType. Additionally, consider looking into the 'layout' function in '_text_helpers.py' as it is used within the 'draw_text' method and might be the source of the NoneType object if it returns unexpected values."
          },
          "output": {
            "message": "To ensure completeness, more granular debugging of the 'draw_text' method in backend_ps.py is suggested, focusing on the streams and checks for NoneType. Additionally, consider looking into the 'layout' function in '_text_helpers.py' as it is used within the 'draw_text' method and might be the source of the NoneType object if it returns unexpected values."
          },
          "input_tokens": 3469,
          "output_tokens": 285,
          "retry_message": null,
          "completion_cost": 0.014682
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "To ensure completeness, more granular debugging of the 'draw_text' method in backend_ps.py is suggested, focusing on the streams and checks for NoneType. Additionally, consider looking into the 'layout' function in '_text_helpers.py' as it is used within the 'draw_text' method and might be the source of the NoneType object if it returns unexpected values.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "Given the additional context and the specific breakdown of the 'draw_text' method in 'backend_ps.py', it appears that the issue could be rooted in how the text layout is handled, particularly when multi-line text includes an empty line. The 'layout' function from '_text_helpers.py' is used to process the text and might return unexpected NoneType values under certain conditions. Let's focus the search on '_text_helpers.py' to investigate the 'layout' function and any related operations that might return NoneType when handling empty lines or other edge cases in the text.",
            "search_requests": [
              {
                "query": "layout function for text handling",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/lib/matplotlib/_text_helpers.py",
                "function_names": [
                  "layout"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 276,
                "span_id": "layout",
                "file_path": "lib/matplotlib/_text_helpers.py"
              }
            ],
            "search_requests": [
              {
                "query": "layout function for text handling",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/lib/matplotlib/_text_helpers.py",
                "function_names": [
                  "layout"
                ]
              }
            ]
          },
          "input_tokens": 6283,
          "output_tokens": 227,
          "retry_message": null,
          "completion_cost": 0.022254000000000003
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 276,
            "span_id": "layout",
            "file_path": "lib/matplotlib/_text_helpers.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves a TypeError when saving a figure with a multi-line text label containing an empty line using the PostScript backend in Matplotlib. The exact error occurs in the draw_text method of the RendererPS class in backend_ps.py when processing the text stream, specifically where it attempts to unpack a non-iterable NoneType object. The provided context shows the draw_text method and additional logic for handling text streams and fonts in the PostScript backend.\n\nNew search results include a layout function within _text_helpers.py, which is responsible for laying out the text string according to the specified font, including kerning between characters. This function directly relates to the text processing that happens before the draw_text method in the PostScript backend, suggesting it could be a potential source of the issue if it is returning None or an unexpected value.\n\nGiven the description of the issue and the provided context and search results, I've identified the relevant code spans as the draw_text method in backend_ps.py and the layout function in _text_helpers.py. The issue is likely to be resolved by ensuring that the layout function correctly processes the multi-line text, including any empty lines, and does not return a None value that would cause the unpacking error in draw_text.",
            "identified_spans": [
              {
                "span_ids": [
                  "RendererPS",
                  "RendererPS.__init__",
                  "RendererPS.draw_text"
                ],
                "file_path": "lib/matplotlib/backends/backend_ps.py"
              },
              {
                "span_ids": [
                  "layout"
                ],
                "file_path": "lib/matplotlib/_text_helpers.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3816,
          "output_tokens": 404,
          "retry_message": null,
          "completion_cost": 0.017508
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The provided file context contains the 'draw_text' method in 'backend_ps.py' which directly relates to the issue of handling text labels with empty lines. The method includes logic for handling both AFM and TTF fonts, and it uses the 'layout' function from '_text_helpers.py' to process text input. The 'layout' function appears to manage individual characters and their positioning, which is relevant to the reported issue where an empty line within a multi-line text label causes an error. Although the direct NoneType handling within the 'draw_text' method is not fully detailed in the provided context, the use of the 'layout' function and the handling of multi-line text seem to address the core of the problem. Additional checks might be necessary within the 'layout' function or the 'draw_text' method to handle edge cases like empty lines, but the overall context provided suggests that the relevant code areas for addressing the issue have been identified.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 6043,
          "output_tokens": 237,
          "retry_message": null,
          "completion_cost": 0.021684
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "RendererPS.draw_text",
            "file_path": "lib/matplotlib/backends/backend_ps.py",
            "scratch_pad": "The reported issue is due to a `TypeError` when the figure contains a multi-line text label with an empty line and is saved with the PostScript backend. The traceback indicates that the error occurs in the `draw_text` method of the `RendererPS` class in `backend_ps.py`. The suggested solution is to add a check for `if curr_stream:` before line 669 of `backend_ps.py`.",
            "instructions": "Add a check to ensure that `curr_stream` is not `None` before attempting to append it to the `stream` in the `draw_text` method of the `RendererPS` class."
          },
          "output": {
            "span_id": "RendererPS.draw_text",
            "file_path": "lib/matplotlib/backends/backend_ps.py",
            "instructions": "Add a check to ensure that `curr_stream` is not `None` before attempting to append it to the `stream` in the `draw_text` method of the `RendererPS` class."
          },
          "input_tokens": 7229,
          "output_tokens": 202,
          "retry_message": null,
          "completion_cost": 0.024717000000000003
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "RendererPS.draw_text",
        "end_line": null,
        "file_path": "lib/matplotlib/backends/backend_ps.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Add a check to ensure that `curr_stream` is not `None` before attempting to append it to the `stream` in the `draw_text` method of the `RendererPS` class.\n\nThe check needs to be added before appending `curr_stream` to the `stream` list. The relevant lines are 661 and 669 where `curr_stream` is checked and appended respectively. The check should ensure `curr_stream` is not `None`.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 669,
            "start_line": 661,
            "scratch_pad": "The check needs to be added before appending `curr_stream` to the `stream` list. The relevant lines are 661 and 669 where `curr_stream` is checked and appended respectively. The check should ensure `curr_stream` is not `None`."
          },
          "output": {
            "span_id": "RendererPS.draw_text",
            "end_line": 669,
            "file_path": "lib/matplotlib/backends/backend_ps.py",
            "start_line": 661,
            "instructions": "Add a check to ensure that `curr_stream` is not `None` before attempting to append it to the `stream` in the `draw_text` method of the `RendererPS` class.\n\nThe check needs to be added before appending `curr_stream` to the `stream` list. The relevant lines are 661 and 669 where `curr_stream` is checked and appended respectively. The check should ensure `curr_stream` is not `None`."
          },
          "input_tokens": 1528,
          "output_tokens": 100,
          "retry_message": null,
          "completion_cost": 0.006084000000000001
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "RendererPS.draw_text",
        "end_line": 669,
        "file_path": "lib/matplotlib/backends/backend_ps.py",
        "max_tokens": 1000,
        "start_line": 661,
        "temperature": 1.6,
        "instructions": "Add a check to ensure that `curr_stream` is not `None` before attempting to append it to the `stream` in the `draw_text` method of the `RendererPS` class.\n\nThe check needs to be added before appending `curr_stream` to the `stream` list. The relevant lines are 661 and 669 where `curr_stream` is checked and appended respectively. The check should ensure `curr_stream` is not `None`.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```\n<replace>\n                    if curr_stream is not None:\n                        stream.append(curr_stream)\n                    prev_font = item.ft_object\n                    curr_stream = [ps_name, []]\n                curr_stream[1].append(\n                    (item.x, item.ft_object.get_glyph_name(item.glyph_idx))\n                )\n            # append the last entry\n            if curr_stream is not None:\n                stream.append(curr_stream)\n</replace>"
          },
          "output": {
            "diff": "--- lib/matplotlib/backends/backend_ps.py\n+++ lib/matplotlib/backends/backend_ps.py\n@@ -658,7 +658,7 @@\n                 ps_name = (item.ft_object.postscript_name\n                            .encode(\"ascii\", \"replace\").decode(\"ascii\"))\n                 if item.ft_object is not prev_font:\n-                    if curr_stream:\n+                    if curr_stream is not None:\n                         stream.append(curr_stream)\n                     prev_font = item.ft_object\n                     curr_stream = [ps_name, []]\n@@ -666,7 +666,8 @@\n                     (item.x, item.ft_object.get_glyph_name(item.glyph_idx))\n                 )\n             # append the last entry\n-            stream.append(curr_stream)\n+            if curr_stream is not None:\n+                stream.append(curr_stream)\n \n         self.set_color(*gc.get_rgb())\n \n",
            "message": "Applied the change to lib/matplotlib/backends/backend_ps.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 7737,
          "output_tokens": 118,
          "retry_message": null,
          "completion_cost": 0.024981
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- lib/matplotlib/backends/backend_ps.py\n+++ lib/matplotlib/backends/backend_ps.py\n@@ -658,7 +658,7 @@\n                 ps_name = (item.ft_object.postscript_name\n                            .encode(\"ascii\", \"replace\").decode(\"ascii\"))\n                 if item.ft_object is not prev_font:\n-                    if curr_stream:\n+                    if curr_stream is not None:\n                         stream.append(curr_stream)\n                     prev_font = item.ft_object\n                     curr_stream = [ps_name, []]\n@@ -666,7 +666,8 @@\n                     (item.x, item.ft_object.get_glyph_name(item.glyph_idx))\n                 )\n             # append the last entry\n-            stream.append(curr_stream)\n+            if curr_stream is not None:\n+                stream.append(curr_stream)\n \n         self.set_color(*gc.get_rgb())\n \n",
        "model": "deepseek-coder",
        "message": "Applied the change to lib/matplotlib/backends/backend_ps.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The change has been applied to the `draw_text` method in `backend_ps.py`, and it should now handle multi-line text labels with empty lines correctly without raising a `TypeError`.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The applied change ensures that `curr_stream` is not `None` before appending it to the `stream` in the `draw_text` method of the `RendererPS` class. This should resolve the `TypeError: cannot unpack non-iterable NoneType object` when the figure contains a multi-line text label with an empty line and is saved with the PostScript backend.",
            "instructions": null
          },
          "output": {
            "message": "The change has been applied to the `draw_text` method in `backend_ps.py`, and it should now handle multi-line text labels with empty lines correctly without raising a `TypeError`."
          },
          "input_tokens": 7748,
          "output_tokens": 184,
          "retry_message": null,
          "completion_cost": 0.026004
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The change has been applied to the `draw_text` method in `backend_ps.py`, and it should now handle multi-line text labels with empty lines correctly without raising a `TypeError`.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "[Bug]: Text label with empty line causes a \"TypeError: cannot unpack non-iterable NoneType object\" in PostScript backend\n### Bug summary\n\nWhen saving a figure with the PostScript backend, a\r\n> TypeError: cannot unpack non-iterable NoneType object\r\n\r\nhappens if the figure contains a multi-line text label with an empty line (see example).\n\n### Code for reproduction\n\n```python\nfrom matplotlib.figure import Figure\r\n\r\nfigure = Figure()\r\nax = figure.add_subplot(111)\r\n# ax.set_title('\\nLower title')  # this would cause an error as well\r\nax.annotate(text='\\nLower label', xy=(0, 0))\r\nfigure.savefig('figure.eps')\n```\n\n\n### Actual outcome\n\n$ ./venv/Scripts/python save_ps.py\r\nTraceback (most recent call last):\r\n  File \"C:\\temp\\matplotlib_save_ps\\save_ps.py\", line 7, in <module>\r\n    figure.savefig('figure.eps')\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\figure.py\", line 3272, in savefig\r\n    self.canvas.print_figure(fname, **kwargs)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backend_bases.py\", line 2338, in print_figure\r\n    result = print_method(\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backend_bases.py\", line 2204, in <lambda>\r\n    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\_api\\deprecation.py\", line 410, in wrapper\r\n    return func(*inner_args, **inner_kwargs)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backends\\backend_ps.py\", line 869, in _print_ps\r\n    printer(fmt, outfile, dpi=dpi, dsc_comments=dsc_comments,\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backends\\backend_ps.py\", line 927, in _print_figure\r\n    self.figure.draw(renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 74, in draw_wrapper\r\n    result = draw(artist, renderer, *args, **kwargs)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\figure.py\", line 3069, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\axes\\_base.py\", line 3106, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\text.py\", line 1995, in draw\r\n    Text.draw(self, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\text.py\", line 736, in draw\r\n    textrenderer.draw_text(gc, x, y, clean_line,\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backends\\backend_ps.py\", line 248, in wrapper\r\n    return meth(self, *args, **kwargs)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backends\\backend_ps.py\", line 673, in draw_text\r\n    for ps_name, xs_names in stream:\r\nTypeError: cannot unpack non-iterable NoneType object\r\n\n\n### Expected outcome\n\nThe figure can be saved as `figure.eps` without error.\n\n### Additional information\n\n- seems to happen if a text label or title contains a linebreak with an empty line\r\n- works without error for other backends such as PNG, PDF, SVG, Qt\r\n- works with matplotlib<=3.5.3\r\n- adding `if curr_stream:` before line 669 of `backend_ps.py` seems to fix the bug \n\n### Operating system\n\nWindows\n\n### Matplotlib Version\n\n3.6.0\n\n### Matplotlib Backend\n\n_No response_\n\n### Python version\n\n3.9.13\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip\n"
}