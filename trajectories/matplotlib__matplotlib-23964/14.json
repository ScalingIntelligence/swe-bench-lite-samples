{
  "info": {
    "duration": 214.4735279083252,
    "submission": "diff --git a/lib/matplotlib/backends/backend_ps.py b/lib/matplotlib/backends/backend_ps.py\nindex f209e811f1..bd996b7509 100644\n--- a/lib/matplotlib/backends/backend_ps.py\n+++ b/lib/matplotlib/backends/backend_ps.py\n@@ -666,7 +666,8 @@ grestore\n                     (item.x, item.ft_object.get_glyph_name(item.glyph_idx))\n                 )\n             # append the last entry\n-            stream.append(curr_stream)\n+            if curr_stream:\n+                stream.append(curr_stream)\n \n         self.set_color(*gc.get_rgb())\n \n",
    "total_cost": 0.16112100000000001,
    "instance_id": "matplotlib__matplotlib-23964",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The error 'TypeError: cannot unpack non-iterable NoneType object' is happening specifically in the PostScript backend when dealing with multi-line text labels that contain an empty line. This suggests that the issue lies within the logic handling text rendering in the PostScript backend. Given the stack trace and the provided example, we need to focus our search on the 'backend_ps.py' file within the 'matplotlib/backends' directory. Additionally, the line 'if curr_stream:' mentioned in the additional information suggests that the NoneType object might be related to the 'stream' variable in the text rendering process. Therefore, we should search for occurrences of 'stream' and potentially unpacking logic within the 'backend_ps.py' file.",
            "search_requests": [
              {
                "query": "TypeError: cannot unpack non-iterable NoneType object",
                "class_names": [],
                "code_snippet": "for ps_name, xs_names in stream:",
                "file_pattern": "**/matplotlib/backends/backend_ps.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 519,
                "span_id": "RendererPS.draw_text",
                "file_path": "lib/matplotlib/backends/backend_ps.py"
              }
            ],
            "search_requests": [
              {
                "query": "TypeError: cannot unpack non-iterable NoneType object",
                "class_names": [],
                "code_snippet": "for ps_name, xs_names in stream:",
                "file_pattern": "**/matplotlib/backends/backend_ps.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 4911,
          "output_tokens": 249,
          "retry_message": null,
          "completion_cost": 0.018468
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 519,
            "span_id": "RendererPS.draw_text",
            "file_path": "lib/matplotlib/backends/backend_ps.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue pertains to a TypeError when saving a figure using the PostScript backend if the figure contains a multi-line text label with an empty line. The error trace points to the 'draw_text' method in 'backend_ps.py', specifically to a line where a non-iterable NoneType object is being unpacked. This suggests a potential issue with how the 'stream' variable is being handled in the 'draw_text' method. Given that the error occurs when processing text labels or titles with empty lines, the focused area should be the part of the 'draw_text' method that processes the text rendering. The provided code spans show the 'RendererPS' class with the '__init__' and 'draw_text' methods. The 'draw_text' method handles the rendering of text in the PostScript backend, including the handling of mathematical text and the conversion of text to PostScript commands. It is likely that the issue occurs in the part of the 'draw_text' method where the 'stream' variable is built and processed. The 'stream' variable is a list of tuples where each tuple contains a PostScript font name and a list of character positions and names. The error suggests that at some point during the processing of this 'stream', a NoneType object is encountered where an iterable is expected. This could be due to an unhandled edge case, such as encountering an empty line in the text, rather than due to the intrinsic iteration behavior of the 'stream' variable. From the code spans provided, the relevant code span is the 'draw_text' method, particularly the section where the 'stream' variable is built and iterated over. The issue seems to arise when iterating over 'stream' in the for loop just after its formation. This makes the 'draw_text' code span the most relevant to the reported issue. Additionally, there might be value in checking or transitioning the contents of 'curr_stream' before each iteration, as suggested in the 'additional information' section, to prevent NoneType objects from being added to the 'stream' list.",
            "identified_spans": [
              {
                "span_ids": [
                  "RendererPS.draw_text"
                ],
                "file_path": "lib\\matplotlib\\backends\\backend_ps.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3545,
          "output_tokens": 503,
          "retry_message": null,
          "completion_cost": 0.01818
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": false,
            "scratch_pad": "The file context provided is empty, which means there is no code to analyze in relation to the reported issue. To make a decision, we need to have at least the 'backend_ps.py' file from the 'matplotlib/backends' directory, as suggested by the stack trace and the issue description.",
            "search_suggestions": "Look for the 'backend_ps.py' file within the 'matplotlib/backends' directory. Specifically, search for occurrences of the 'stream' variable and unpacking logic related to text rendering in the PostScript backend."
          },
          "output": {
            "message": "Look for the 'backend_ps.py' file within the 'matplotlib/backends' directory. Specifically, search for occurrences of the 'stream' variable and unpacking logic related to text rendering in the PostScript backend."
          },
          "input_tokens": 2444,
          "output_tokens": 148,
          "retry_message": null,
          "completion_cost": 0.009552
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look for the 'backend_ps.py' file within the 'matplotlib/backends' directory. Specifically, search for occurrences of the 'stream' variable and unpacking logic related to text rendering in the PostScript backend.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "Based on the provided instructions, we need to focus our search on the 'backend_ps.py' file within the 'matplotlib/backends' directory. The specific areas of interest are occurrences of the 'stream' variable and any unpacking logic that could be related to text rendering in the PostScript backend. Given the absence of any previously found files in the context, we should proceed with this specific search request to find the relevant code portions.",
            "search_requests": [
              {
                "query": "unpack non-iterable NoneType object",
                "class_names": [],
                "code_snippet": "for ps_name, xs_names in stream:",
                "file_pattern": "**/matplotlib/backends/backend_ps.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 519,
                "span_id": "RendererPS.draw_text",
                "file_path": "lib/matplotlib/backends/backend_ps.py"
              }
            ],
            "search_requests": [
              {
                "query": "unpack non-iterable NoneType object",
                "class_names": [],
                "code_snippet": "for ps_name, xs_names in stream:",
                "file_pattern": "**/matplotlib/backends/backend_ps.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 5229,
          "output_tokens": 199,
          "retry_message": null,
          "completion_cost": 0.018672
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 519,
            "span_id": "RendererPS.draw_text",
            "file_path": "lib/matplotlib/backends/backend_ps.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "Analyzing the reported issue, it's clear that the problem occurs when saving a figure with the PostScript backend, specifically when a multi-line text label contains an empty line. The error 'TypeError: cannot unpack non-iterable NoneType object' is traced back to the 'draw_text' method in the 'RendererPS' class of the 'backend_ps.py' file. The search results provided contain the 'draw_text' method, which processes text for rendering in PostScript format. The key section to focus on is where the text is processed into a 'stream' and then unpacked. The reported issue suggests that adding a check 'if curr_stream:' before unpacking in line 669 of 'backend_ps.py' might resolve the issue. Given this context, the relevant code spans are those involved in processing the text streams leading to the error.",
            "identified_spans": [
              {
                "span_ids": [
                  "RendererPS.draw_text"
                ],
                "file_path": "lib/matplotlib/backends/backend_ps.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 3545,
          "output_tokens": 258,
          "retry_message": null,
          "completion_cost": 0.014505
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context provided contains the 'draw_text' method within the 'matplotlib/backends/backend_ps.py' file, which is the primary area of interest based on the issue description. This method includes the handling of text rendering in the PostScript backend, including logic for processing the 'stream' variable. There is unpacking logic present (`for ps_name, xs_names in stream:`), which directly relates to the reported `TypeError: cannot unpack non-iterable NoneType object`. While the specific addition of 'if curr_stream:' as suggested in the issue's additional information is not present in the provided file context, the context does include the portion of the code that needs to be modified to address the issue. Therefore, I believe that all relevant code for addressing the issue has been identified in the provided context.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 3450,
          "output_tokens": 210,
          "retry_message": null,
          "completion_cost": 0.0135
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "RendererPS.draw_text",
            "file_path": "lib/matplotlib/backends/backend_ps.py",
            "scratch_pad": "The issue indicates that a TypeError occurs when saving a figure using the PostScript backend if the figure contains a multi-line text label with an empty line. To fix this, we need to add a check to ensure that `curr_stream` is not `None` before attempting to unpack and append it to the `stream` list. This involves modifying the `draw_text` method within the `RendererPS` class.",
            "instructions": "Add a check to ensure that `curr_stream` is not `None` before appending it to the `stream` list. Specifically, we will add `if curr_stream:` before the line where `curr_stream` is appended to `stream`."
          },
          "output": {
            "span_id": "RendererPS.draw_text",
            "file_path": "lib/matplotlib/backends/backend_ps.py",
            "instructions": "Add a check to ensure that `curr_stream` is not `None` before appending it to the `stream` list. Specifically, we will add `if curr_stream:` before the line where `curr_stream` is appended to `stream`."
          },
          "input_tokens": 5985,
          "output_tokens": 206,
          "retry_message": null,
          "completion_cost": 0.021044999999999998
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "RendererPS.draw_text",
        "end_line": null,
        "file_path": "lib/matplotlib/backends/backend_ps.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Add a check to ensure that `curr_stream` is not `None` before appending it to the `stream` list. Specifically, we will add `if curr_stream:` before the line where `curr_stream` is appended to `stream`.\n\nThe instruction requires adding a check to ensure `curr_stream` is not `None` before appending it to the `stream` list. This modification should be placed just before the line where `curr_stream` is appended to `stream`.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 669,
            "start_line": 669,
            "scratch_pad": "The instruction requires adding a check to ensure `curr_stream` is not `None` before appending it to the `stream` list. This modification should be placed just before the line where `curr_stream` is appended to `stream`."
          },
          "output": {
            "span_id": "RendererPS.draw_text",
            "end_line": 673,
            "file_path": "lib/matplotlib/backends/backend_ps.py",
            "start_line": 665,
            "instructions": "Add a check to ensure that `curr_stream` is not `None` before appending it to the `stream` list. Specifically, we will add `if curr_stream:` before the line where `curr_stream` is appended to `stream`.\n\nThe instruction requires adding a check to ensure `curr_stream` is not `None` before appending it to the `stream` list. This modification should be placed just before the line where `curr_stream` is appended to `stream`."
          },
          "input_tokens": 1539,
          "output_tokens": 90,
          "retry_message": null,
          "completion_cost": 0.005967
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "RendererPS.draw_text",
        "end_line": 673,
        "file_path": "lib/matplotlib/backends/backend_ps.py",
        "max_tokens": 1000,
        "start_line": 665,
        "temperature": 1.6,
        "instructions": "Add a check to ensure that `curr_stream` is not `None` before appending it to the `stream` list. Specifically, we will add `if curr_stream:` before the line where `curr_stream` is appended to `stream`.\n\nThe instruction requires adding a check to ensure `curr_stream` is not `None` before appending it to the `stream` list. This modification should be placed just before the line where `curr_stream` is appended to `stream`.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```\n<replace>\n                curr_stream[1].append(\n                    (item.x, item.ft_object.get_glyph_name(item.glyph_idx))\n                )\n            # append the last entry\n            if curr_stream:\n                stream.append(curr_stream)\n\n        self.set_color(*gc.get_rgb())\n\n        for ps_name, xs_names in stream:\n</replace>"
          },
          "output": {
            "diff": "--- lib/matplotlib/backends/backend_ps.py\n+++ lib/matplotlib/backends/backend_ps.py\n@@ -666,7 +666,8 @@\n                     (item.x, item.ft_object.get_glyph_name(item.glyph_idx))\n                 )\n             # append the last entry\n-            stream.append(curr_stream)\n+            if curr_stream:\n+                stream.append(curr_stream)\n \n         self.set_color(*gc.get_rgb())\n \n",
            "message": "Applied the change to lib/matplotlib/backends/backend_ps.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 6053,
          "output_tokens": 100,
          "retry_message": null,
          "completion_cost": 0.019659000000000003
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- lib/matplotlib/backends/backend_ps.py\n+++ lib/matplotlib/backends/backend_ps.py\n@@ -666,7 +666,8 @@\n                     (item.x, item.ft_object.get_glyph_name(item.glyph_idx))\n                 )\n             # append the last entry\n-            stream.append(curr_stream)\n+            if curr_stream:\n+                stream.append(curr_stream)\n \n         self.set_color(*gc.get_rgb())\n \n",
        "model": "deepseek-coder",
        "message": "Applied the change to lib/matplotlib/backends/backend_ps.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The change has been applied to the `draw_text` method within the `RendererPS` class as requested. This modification addresses the issue and should allow the figure to be saved without the TypeError.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The change to ensure that `curr_stream` is not `None` before appending it to the `stream` list has been successfully applied. This should resolve the TypeError when saving a figure with the PostScript backend if the figure contains a multi-line text label with an empty line.",
            "instructions": null
          },
          "output": {
            "message": "The change has been applied to the `draw_text` method within the `RendererPS` class as requested. This modification addresses the issue and should allow the figure to be saved without the TypeError."
          },
          "input_tokens": 6386,
          "output_tokens": 161,
          "retry_message": null,
          "completion_cost": 0.021573000000000002
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The change has been applied to the `draw_text` method within the `RendererPS` class as requested. This modification addresses the issue and should allow the figure to be saved without the TypeError.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "[Bug]: Text label with empty line causes a \"TypeError: cannot unpack non-iterable NoneType object\" in PostScript backend\n### Bug summary\n\nWhen saving a figure with the PostScript backend, a\r\n> TypeError: cannot unpack non-iterable NoneType object\r\n\r\nhappens if the figure contains a multi-line text label with an empty line (see example).\n\n### Code for reproduction\n\n```python\nfrom matplotlib.figure import Figure\r\n\r\nfigure = Figure()\r\nax = figure.add_subplot(111)\r\n# ax.set_title('\\nLower title')  # this would cause an error as well\r\nax.annotate(text='\\nLower label', xy=(0, 0))\r\nfigure.savefig('figure.eps')\n```\n\n\n### Actual outcome\n\n$ ./venv/Scripts/python save_ps.py\r\nTraceback (most recent call last):\r\n  File \"C:\\temp\\matplotlib_save_ps\\save_ps.py\", line 7, in <module>\r\n    figure.savefig('figure.eps')\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\figure.py\", line 3272, in savefig\r\n    self.canvas.print_figure(fname, **kwargs)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backend_bases.py\", line 2338, in print_figure\r\n    result = print_method(\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backend_bases.py\", line 2204, in <lambda>\r\n    print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\_api\\deprecation.py\", line 410, in wrapper\r\n    return func(*inner_args, **inner_kwargs)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backends\\backend_ps.py\", line 869, in _print_ps\r\n    printer(fmt, outfile, dpi=dpi, dsc_comments=dsc_comments,\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backends\\backend_ps.py\", line 927, in _print_figure\r\n    self.figure.draw(renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 74, in draw_wrapper\r\n    result = draw(artist, renderer, *args, **kwargs)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\figure.py\", line 3069, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\axes\\_base.py\", line 3106, in draw\r\n    mimage._draw_list_compositing_images(\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\image.py\", line 131, in _draw_list_compositing_images\r\n    a.draw(renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\text.py\", line 1995, in draw\r\n    Text.draw(self, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\artist.py\", line 51, in draw_wrapper\r\n    return draw(artist, renderer)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\text.py\", line 736, in draw\r\n    textrenderer.draw_text(gc, x, y, clean_line,\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backends\\backend_ps.py\", line 248, in wrapper\r\n    return meth(self, *args, **kwargs)\r\n  File \"C:\\temp\\matplotlib_save_ps\\venv\\lib\\site-packages\\matplotlib\\backends\\backend_ps.py\", line 673, in draw_text\r\n    for ps_name, xs_names in stream:\r\nTypeError: cannot unpack non-iterable NoneType object\r\n\n\n### Expected outcome\n\nThe figure can be saved as `figure.eps` without error.\n\n### Additional information\n\n- seems to happen if a text label or title contains a linebreak with an empty line\r\n- works without error for other backends such as PNG, PDF, SVG, Qt\r\n- works with matplotlib<=3.5.3\r\n- adding `if curr_stream:` before line 669 of `backend_ps.py` seems to fix the bug \n\n### Operating system\n\nWindows\n\n### Matplotlib Version\n\n3.6.0\n\n### Matplotlib Backend\n\n_No response_\n\n### Python version\n\n3.9.13\n\n### Jupyter version\n\n_No response_\n\n### Installation\n\npip\n"
}