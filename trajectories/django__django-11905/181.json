{
  "info": {
    "duration": 397.7371232509613,
    "submission": "diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py\nindex 9344979c56..8e20555f9a 100644\n--- a/django/db/models/lookups.py\n+++ b/django/db/models/lookups.py\n@@ -462,6 +462,11 @@ class IsNull(BuiltinLookup):\n     lookup_name = 'isnull'\n     prepare_rhs = False\n \n+    def __init__(self, lhs, rhs):\n+        super().__init__(lhs, rhs)\n+        if not isinstance(rhs, bool):\n+            raise TypeError(\"rhs must be of boolean type\")\n+\n     def as_sql(self, compiler, connection):\n         sql, params = compiler.compile(self.lhs)\n         if self.rhs:\n",
    "total_cost": 0.175731,
    "instance_id": "django__django-11905",
    "evaluation_name": "temperature_sweep_250_samples_50_problems_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue at hand involves ensuring that the `__isnull` lookup in Django's ORM does not accept non-boolean values. This will help prevent confusion and maintain consistency in the ORM's behavior. Given the information from the issue and the provided files, we should focus our search on the specific locations where the `IsNull` lookup is defined and used. The primary file for this is `django/db/models/lookups.py`, which contains the `IsNull` class. Additionally, we should also check the `build_lookup` method in `django/db/models/sql/query.py` as it might have logic related to how lookups are processed.",
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "IsNull"
                ],
                "code_snippet": null,
                "file_pattern": "django/db/models/lookups.py",
                "function_names": []
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "django/db/models/sql/query.py",
                "function_names": [
                  "build_lookup"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 23,
                "span_id": "IsNull",
                "file_path": "django/db/models/lookups.py"
              },
              {
                "rank": 0,
                "tokens": 47,
                "span_id": "IsNull.as_sql",
                "file_path": "django/db/models/lookups.py"
              },
              {
                "rank": 0,
                "tokens": 425,
                "span_id": "Query.build_lookup",
                "file_path": "django/db/models/sql/query.py"
              }
            ],
            "search_requests": [
              {
                "query": null,
                "class_names": [
                  "IsNull"
                ],
                "code_snippet": null,
                "file_pattern": "django/db/models/lookups.py",
                "function_names": []
              },
              {
                "query": null,
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "django/db/models/sql/query.py",
                "function_names": [
                  "build_lookup"
                ]
              }
            ]
          },
          "input_tokens": 3138,
          "output_tokens": 246,
          "retry_message": null,
          "completion_cost": 0.013104000000000001
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 23,
            "span_id": "IsNull",
            "file_path": "django/db/models/lookups.py"
          },
          {
            "rank": 0,
            "tokens": 47,
            "span_id": "IsNull.as_sql",
            "file_path": "django/db/models/lookups.py"
          },
          {
            "rank": 0,
            "tokens": 425,
            "span_id": "Query.build_lookup",
            "file_path": "django/db/models/sql/query.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue indicates the need to prevent the use of the __isnull lookup with non-boolean values. This means that when the 'isnull' lookup is used, it should only accept boolean values (True or False) and raise an error if any other type of value is provided. The provided search results include the definition of the 'IsNull' lookup class and its method 'as_sql', which is responsible for generating SQL statements for the 'isnull' lookup. Additionally, the 'Query' class in 'django/db/models/sql/query.py' contains a method 'build_lookup', which constructs the lookup and handles the 'isnull' lookup. However, the search results do not explicitly include where and how to enforce the restriction of non-boolean values for the 'isnull' lookup. Therefore, based on the provided search results, we cannot fully determine the exact spots in the code that need to be updated to address the reported issue. However, 'IsNull' and 'build_lookup' are likely places to start for implementing the solution, especially where the 'rhs' (right-hand side) value of the lookup is handled to ensure it is a boolean. More context and possibly further code sections are needed to fully address the issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "imports",
                  "IsNull",
                  "IsNull.as_sql"
                ],
                "file_path": "django/db/models/lookups.py"
              },
              {
                "span_ids": [
                  "Query",
                  "Query.__init__",
                  "Query.build_lookup"
                ],
                "file_path": "django/db/models/sql/query.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 2173,
          "output_tokens": 401,
          "retry_message": null,
          "completion_cost": 0.012534
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The analysis focused on identifying the relevant code for the issue, which involves preventing non-boolean values for the `__isnull` lookup in Django's ORM. The `IsNull` class in `django/db/models/lookups.py` defines the `isnull` lookup and its behavior. Additionally, the `build_lookup` method in `django/db/models/sql/query.py` processes lookups and might be where additional validation could be integrated. While the current context provides the necessary class and method, it seems there's no specific validation for non-boolean values in the provided code. More context or code might be needed to fully implement this validation.",
            "search_suggestions": "Look for additional methods or classes where input validation for lookups might be defined or added, particularly focusing on the validation logic during the processing of lookups. Also, consider checking tests or documentation related to `__isnull` to ensure they reflect the desired behavior."
          },
          "output": {
            "message": "Look for additional methods or classes where input validation for lookups might be defined or added, particularly focusing on the validation logic during the processing of lookups. Also, consider checking tests or documentation related to `__isnull` to ensure they reflect the desired behavior."
          },
          "input_tokens": 2592,
          "output_tokens": 230,
          "retry_message": null,
          "completion_cost": 0.011226
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look for additional methods or classes where input validation for lookups might be defined or added, particularly focusing on the validation logic during the processing of lookups. Also, consider checking tests or documentation related to `__isnull` to ensure they reflect the desired behavior.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "Based on the provided context, it appears that the `build_lookup` method in `django/db/models/sql/query.py` is crucial for processing lookups and could have validation logic for the `__isnull` lookup. Additionally, since we are focusing on ensuring that `__isnull` does not accept non-boolean values, we should also look into any additional methods or classes that might handle input validation for lookups. This could include methods like `validate_lookup_value` or similar, which might be defined in `django/db/models/lookups.py` or another related file. We should also consider checking tests or documentation related to `__isnull` to ensure they reflect the desired behavior and include scenarios where non-boolean values are rejected.",
            "search_requests": [
              {
                "query": "validate lookup value",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "django/db/models/lookups.py",
                "function_names": []
              },
              {
                "query": "validate lookup value",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "django/db/models/sql/query.py",
                "function_names": []
              },
              {
                "query": "__isnull non-boolean value",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/tests/**/*.py",
                "function_names": []
              },
              {
                "query": "__isnull non-boolean value",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/docs/**/*.txt",
                "function_names": []
              }
            ]
          },
          "output": null,
          "input_tokens": 5086,
          "output_tokens": 429,
          "retry_message": "It's not possible to search for test files.",
          "completion_cost": 0.021693
        },
        {
          "action": {
            "complete": false,
            "scratch_pad": "Given the constraint that test files cannot be searched, our focus will remain on the primary files related to the `__isnull` lookup and input validation for lookups. We should continue to explore potential methods or classes within the `django/db/models/lookups.py` and `django/db/models/sql/query.py` files that might contain validation logic specifically for the `__isnull` lookup to ensure non-boolean values are not accepted. Additionally, we should also review any related documentation to ensure it correctly describes the behavior of the `__isnull` lookup without mentioning support for non-boolean values.",
            "search_requests": [
              {
                "query": "validate lookup value",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "django/db/models/lookups.py",
                "function_names": []
              },
              {
                "query": "validate lookup value",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "django/db/models/sql/query.py",
                "function_names": [
                  "build_lookup"
                ]
              },
              {
                "query": "__isnull non-boolean value",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/docs/**/*.txt",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 26,
                "span_id": "Lookup.apply_bilateral_transforms",
                "file_path": "django/db/models/lookups.py"
              },
              {
                "rank": 0,
                "tokens": 82,
                "span_id": "imports",
                "file_path": "django/db/models/lookups.py"
              },
              {
                "rank": 0,
                "tokens": 18,
                "span_id": "Lookup",
                "file_path": "django/db/models/lookups.py"
              },
              {
                "rank": 1,
                "tokens": 30,
                "span_id": "Range.get_rhs_op",
                "file_path": "django/db/models/lookups.py"
              },
              {
                "rank": 1,
                "tokens": 27,
                "span_id": "StartsWith",
                "file_path": "django/db/models/lookups.py"
              },
              {
                "rank": 1,
                "tokens": 17,
                "span_id": "Contains",
                "file_path": "django/db/models/lookups.py"
              },
              {
                "rank": 1,
                "tokens": 20,
                "span_id": "IEndsWith",
                "file_path": "django/db/models/lookups.py"
              },
              {
                "rank": 1,
                "tokens": 47,
                "span_id": "IsNull.as_sql",
                "file_path": "django/db/models/lookups.py"
              },
              {
                "rank": 1,
                "tokens": 17,
                "span_id": "IContains",
                "file_path": "django/db/models/lookups.py"
              },
              {
                "rank": 1,
                "tokens": 425,
                "span_id": "Query.build_lookup",
                "file_path": "django/db/models/sql/query.py"
              }
            ],
            "search_requests": [
              {
                "query": "validate lookup value",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "django/db/models/lookups.py",
                "function_names": []
              },
              {
                "query": "validate lookup value",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "django/db/models/sql/query.py",
                "function_names": [
                  "build_lookup"
                ]
              },
              {
                "query": "__isnull non-boolean value",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/docs/**/*.txt",
                "function_names": []
              }
            ]
          },
          "input_tokens": 5533,
          "output_tokens": 350,
          "retry_message": null,
          "completion_cost": 0.021849
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 26,
            "span_id": "Lookup.apply_bilateral_transforms",
            "file_path": "django/db/models/lookups.py"
          },
          {
            "rank": 0,
            "tokens": 82,
            "span_id": "imports",
            "file_path": "django/db/models/lookups.py"
          },
          {
            "rank": 0,
            "tokens": 18,
            "span_id": "Lookup",
            "file_path": "django/db/models/lookups.py"
          },
          {
            "rank": 1,
            "tokens": 30,
            "span_id": "Range.get_rhs_op",
            "file_path": "django/db/models/lookups.py"
          },
          {
            "rank": 1,
            "tokens": 27,
            "span_id": "StartsWith",
            "file_path": "django/db/models/lookups.py"
          },
          {
            "rank": 1,
            "tokens": 17,
            "span_id": "Contains",
            "file_path": "django/db/models/lookups.py"
          },
          {
            "rank": 1,
            "tokens": 20,
            "span_id": "IEndsWith",
            "file_path": "django/db/models/lookups.py"
          },
          {
            "rank": 1,
            "tokens": 47,
            "span_id": "IsNull.as_sql",
            "file_path": "django/db/models/lookups.py"
          },
          {
            "rank": 1,
            "tokens": 17,
            "span_id": "IContains",
            "file_path": "django/db/models/lookups.py"
          },
          {
            "rank": 1,
            "tokens": 425,
            "span_id": "Query.build_lookup",
            "file_path": "django/db/models/sql/query.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue states that the `__isnull` lookup should not allow non-boolean values and suggests raising an error for such cases to avoid confusion and maintain consistency. The current implementation of `IsNull` in `django/db/models/lookups.py` already handles the `isnull` lookup, but does not explicitly check for non-boolean values. The `as_sql` method in `IsNull` directly uses the boolean value of `self.rhs` to determine whether to use 'IS NULL' or 'IS NOT NULL'. This may inadvertently handle non-boolean values due to Python's truthiness/falsiness evaluation. \n\nTo address the issue, the relevant code span would be the `IsNull` class definition and the `as_sql` method within `django/db/models/lookups.py`. It is necessary to add a check within the `as_sql` method to ensure `self.rhs` is strictly a boolean before allowing it to proceed. If `self.rhs` is not a boolean, an error should be raised. \n\nThe provided search results do not introduce additional code spans relevant to the issue aside from what was already identified in the `<file_context>`. The identified span `django/db/models/lookups.py` with `id='IsNull.as_sql'` remains the critical part that needs to be modified to incorporate the check for non-boolean values.",
            "identified_spans": [
              {
                "span_ids": [
                  "IsNull.as_sql"
                ],
                "file_path": "django/db/models/lookups.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4737,
          "output_tokens": 373,
          "retry_message": null,
          "completion_cost": 0.019806
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context provided includes relevant sections from the `django/db/models/lookups.py` and `django/db/models/sql/query.py` files. Specifically, the `IsNull` class in `lookups.py` is directly related to the `__isnull` lookup functionality. This class already contains logic that interprets `True` and `False` for the `self.rhs` in the `as_sql` method. Furthermore, the `build_lookup` method in `query.py` also handles the case where `lookup.rhs` is `None` and raises a ValueError if lookup_name is not 'exact' or 'iexact'. These sections seem to address the reported issue by ensuring that only boolean values are accepted for the `__isnull` lookup. While there is no explicit raise for non-boolean values, the current implementation aligns with the requirements described in the issue.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 3021,
          "output_tokens": 231,
          "retry_message": null,
          "completion_cost": 0.012528000000000001
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "IsNull.__init__",
            "file_path": "django/db/models/lookups.py",
            "scratch_pad": "To address the issue, we need to ensure that the __isnull lookup only accepts boolean values. This can be achieved by adding a validation step in the `IsNull` class to check the type of the `rhs` value and raise an error if it's not a boolean.",
            "instructions": "Add a type check in the `IsNull.__init__` method to ensure that `rhs` is of boolean type. If not, raise a TypeError."
          },
          "output": null,
          "input_tokens": 4142,
          "output_tokens": 150,
          "retry_message": "Span not found: IsNull.__init__. Available spans: IsNull, IsNull.as_sql, imports, BuiltinLookup, PatternLookup, LessThanOrEqual, LessThan, Range, GreaterThan, Lookup, GreaterThanOrEqual, IExact, Regex, In, Exact, Lookup.__init__, Contains, StartsWith, EndsWith, FieldGetDbPrepValueMixin, YearLte, YearLt, IntegerLessThan, FieldGetDbPrepValueIterableMixin, YearGt, YearLookup, IntegerGreaterThanOrEqual, YearGte, UUIDIExact, IRegex, YearExact",
          "completion_cost": 0.014676
        },
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "IsNull",
            "file_path": "django/db/models/lookups.py",
            "scratch_pad": "Since the `IsNull.__init__` span was not found, we need to add the type check to the `IsNull` class itself where the `rhs` parameter is first encountered. This will ensure that any non-boolean values used with the `__isnull` lookup will raise an error.",
            "instructions": "Add a type check right after the assignment of `self.rhs` in the `IsNull.__init__` method to ensure that `rhs` is of boolean type. If not, raise a TypeError."
          },
          "output": {
            "span_id": "IsNull",
            "end_line": 470,
            "file_path": "django/db/models/lookups.py",
            "start_line": 460,
            "instructions": "Add a type check right after the assignment of `self.rhs` in the `IsNull.__init__` method to ensure that `rhs` is of boolean type. If not, raise a TypeError."
          },
          "input_tokens": 4437,
          "output_tokens": 173,
          "retry_message": null,
          "completion_cost": 0.015906
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "IsNull",
        "end_line": 470,
        "file_path": "django/db/models/lookups.py",
        "max_tokens": 1000,
        "start_line": 460,
        "temperature": 1.6,
        "instructions": "Add a type check right after the assignment of `self.rhs` in the `IsNull.__init__` method to ensure that `rhs` is of boolean type. If not, raise a TypeError.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n@Field.register_lookup\nclass IsNull(BuiltinLookup):\n    lookup_name = 'isnull'\n    prepare_rhs = False\n\n    def __init__(self, lhs, rhs):\n        super().__init__(lhs, rhs)\n        if not isinstance(rhs, bool):\n            raise TypeError(\"rhs must be of boolean type\")\n\n    def as_sql(self, compiler, connection):\n        sql, params = compiler.compile(self.lhs)\n        if self.rhs:\n            return \"%s IS NULL\" % sql, params\n        else:\n            return \"%s IS NOT NULL\" % sql, params\n</replace>"
          },
          "output": {
            "diff": "--- django/db/models/lookups.py\n+++ django/db/models/lookups.py\n@@ -462,6 +462,11 @@\n     lookup_name = 'isnull'\n     prepare_rhs = False\n \n+    def __init__(self, lhs, rhs):\n+        super().__init__(lhs, rhs)\n+        if not isinstance(rhs, bool):\n+            raise TypeError(\"rhs must be of boolean type\")\n+\n     def as_sql(self, compiler, connection):\n         sql, params = compiler.compile(self.lhs)\n         if self.rhs:\n",
            "message": "Applied the change to django/db/models/lookups.py.",
            "verification_errors": []
          },
          "input_tokens": 4639,
          "output_tokens": 149,
          "retry_message": null,
          "completion_cost": 0.016152
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- django/db/models/lookups.py\n+++ django/db/models/lookups.py\n@@ -462,6 +462,11 @@\n     lookup_name = 'isnull'\n     prepare_rhs = False\n \n+    def __init__(self, lhs, rhs):\n+        super().__init__(lhs, rhs)\n+        if not isinstance(rhs, bool):\n+            raise TypeError(\"rhs must be of boolean type\")\n+\n     def as_sql(self, compiler, connection):\n         sql, params = compiler.compile(self.lhs)\n         if self.rhs:\n",
        "model": "deepseek-coder",
        "message": "Applied the change to django/db/models/lookups.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue has been resolved by ensuring that any non-boolean values used with the `__isnull` lookup will raise a TypeError, which aligns with the requirement to prevent using `__isnull` with non-boolean values.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The initial change has been successfully applied. The non-boolean values used with the `__isnull` lookup will now raise a TypeError. It's important to ensure that there are no further sections in the code that need this type check, and, upon reviewing the context, it seems that this is the only necessary change.",
            "instructions": null
          },
          "output": {
            "message": "The issue has been resolved by ensuring that any non-boolean values used with the `__isnull` lookup will raise a TypeError, which aligns with the requirement to prevent using `__isnull` with non-boolean values."
          },
          "input_tokens": 4549,
          "output_tokens": 174,
          "retry_message": null,
          "completion_cost": 0.016257
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue has been resolved by ensuring that any non-boolean values used with the `__isnull` lookup will raise a TypeError, which aligns with the requirement to prevent using `__isnull` with non-boolean values.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Prevent using __isnull lookup with non-boolean value.\nDescription\n\t \n\t\t(last modified by Mariusz Felisiak)\n\t \n__isnull should not allow for non-boolean values. Using truthy/falsey doesn't promote INNER JOIN to an OUTER JOIN but works fine for a simple queries. Using non-boolean values is \u200bundocumented and untested. IMO we should raise an error for non-boolean values to avoid confusion and for consistency.\n"
}