{
  "info": {
    "duration": 136.920316696167,
    "submission": "diff --git a/seaborn/_stats/regression.py b/seaborn/_stats/regression.py\nindex 7b7ddc8d..4523cf45 100644\n--- a/seaborn/_stats/regression.py\n+++ b/seaborn/_stats/regression.py\n@@ -23,6 +23,9 @@ class PolyFit(Stat):\n \n         x = data[\"x\"]\n         y = data[\"y\"]\n+        not_nan_mask = ~(x.isna() | y.isna())\n+        x = x[not_nan_mask]\n+        y = y[not_nan_mask]\n         if x.nunique() <= self.order:\n             # TODO warn?\n             xx = yy = []\n",
    "total_cost": 0.13527000000000003,
    "instance_id": "mwaskom__seaborn-3010",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves a `LinAlgError` due to missing data when using PolyFit. The traceback indicates that the error occurs in `seaborn/_stats/regression.py` specifically in the `PolyFit.fit_predict` method where `np.polyfit` is called. Given this, the relevant files are likely those handling regression computations and possibly plotting logic related to regression. Thus, the search should focus on files containing regression-related code and specifically look for methods handling missing data or calling `np.polyfit`.",
            "search_requests": [
              {
                "query": "np.polyfit missing data",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/seaborn/_stats/**.py",
                "function_names": []
              },
              {
                "query": "missing data",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/seaborn/regression.py",
                "function_names": []
              },
              {
                "query": "PolyFit",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/seaborn/_core/plot.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 12,
                "span_id": "OLSFit",
                "file_path": "seaborn/_stats/regression.py"
              },
              {
                "rank": 0,
                "tokens": 120,
                "span_id": "PolyFit._fit_predict",
                "file_path": "seaborn/_stats/regression.py"
              },
              {
                "rank": 0,
                "tokens": 27,
                "span_id": "imports",
                "file_path": "seaborn/_stats/regression.py"
              },
              {
                "rank": 0,
                "tokens": 26,
                "span_id": "PolyFit.__call__",
                "file_path": "seaborn/_stats/regression.py"
              },
              {
                "rank": 0,
                "tokens": 80,
                "span_id": "PolyFit",
                "file_path": "seaborn/_stats/regression.py"
              },
              {
                "rank": 1,
                "tokens": 115,
                "span_id": "Hist._eval",
                "file_path": "seaborn/_stats/histogram.py"
              },
              {
                "rank": 1,
                "tokens": 50,
                "span_id": "Hist._get_bins_and_eval",
                "file_path": "seaborn/_stats/histogram.py"
              },
              {
                "rank": 2,
                "tokens": 16,
                "span_id": "Rolling.__call__",
                "file_path": "seaborn/_stats/aggregation.py"
              },
              {
                "rank": 2,
                "tokens": 156,
                "span_id": "Est.__call__",
                "file_path": "seaborn/_stats/aggregation.py"
              },
              {
                "rank": 0,
                "tokens": 101,
                "span_id": "docstring",
                "file_path": "seaborn/regression.py"
              },
              {
                "rank": 1,
                "tokens": 1382,
                "span_id": "impl:11",
                "file_path": "seaborn/regression.py"
              },
              {
                "rank": 2,
                "tokens": 1275,
                "span_id": "impl:16",
                "file_path": "seaborn/regression.py"
              },
              {
                "rank": 3,
                "tokens": 270,
                "span_id": "regplot",
                "file_path": "seaborn/regression.py"
              },
              {
                "rank": 4,
                "tokens": 164,
                "span_id": "_RegressionPlotter.fit_logx",
                "file_path": "seaborn/regression.py"
              },
              {
                "rank": 4,
                "tokens": 53,
                "span_id": "_RegressionPlotter.fit_lowess",
                "file_path": "seaborn/regression.py"
              },
              {
                "rank": 5,
                "tokens": 1440,
                "span_id": "impl:14",
                "file_path": "seaborn/regression.py"
              },
              {
                "rank": 6,
                "tokens": 109,
                "span_id": "_RegressionPlotter.bin_predictor",
                "file_path": "seaborn/regression.py"
              },
              {
                "rank": 6,
                "tokens": 76,
                "span_id": "_RegressionPlotter.regress_out",
                "file_path": "seaborn/regression.py"
              },
              {
                "rank": 0,
                "tokens": 179,
                "span_id": "Plotter._scale_coords",
                "file_path": "seaborn/_core/plot.py"
              },
              {
                "rank": 1,
                "tokens": 270,
                "span_id": "docstring",
                "file_path": "seaborn/_core/plot.py"
              },
              {
                "rank": 1,
                "tokens": 58,
                "span_id": "Layer",
                "file_path": "seaborn/_core/plot.py"
              },
              {
                "rank": 1,
                "tokens": 32,
                "span_id": "FacetSpec",
                "file_path": "seaborn/_core/plot.py"
              },
              {
                "rank": 1,
                "tokens": 39,
                "span_id": "PairSpec",
                "file_path": "seaborn/_core/plot.py"
              },
              {
                "rank": 1,
                "tokens": 3,
                "span_id": "Default",
                "file_path": "seaborn/_core/plot.py"
              },
              {
                "rank": 1,
                "tokens": 10,
                "span_id": "Default.__repr__",
                "file_path": "seaborn/_core/plot.py"
              },
              {
                "rank": 1,
                "tokens": 4,
                "span_id": "impl:4",
                "file_path": "seaborn/_core/plot.py"
              },
              {
                "rank": 2,
                "tokens": 270,
                "span_id": "Plot._plot",
                "file_path": "seaborn/_core/plot.py"
              }
            ],
            "search_requests": [
              {
                "query": "np.polyfit missing data",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/seaborn/_stats/**.py",
                "function_names": []
              },
              {
                "query": "missing data",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/seaborn/regression.py",
                "function_names": []
              },
              {
                "query": "PolyFit",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/seaborn/_core/plot.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 5899,
          "output_tokens": 247,
          "retry_message": null,
          "completion_cost": 0.021402
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 12,
            "span_id": "OLSFit",
            "file_path": "seaborn/_stats/regression.py"
          },
          {
            "rank": 0,
            "tokens": 120,
            "span_id": "PolyFit._fit_predict",
            "file_path": "seaborn/_stats/regression.py"
          },
          {
            "rank": 0,
            "tokens": 27,
            "span_id": "imports",
            "file_path": "seaborn/_stats/regression.py"
          },
          {
            "rank": 0,
            "tokens": 26,
            "span_id": "PolyFit.__call__",
            "file_path": "seaborn/_stats/regression.py"
          },
          {
            "rank": 0,
            "tokens": 80,
            "span_id": "PolyFit",
            "file_path": "seaborn/_stats/regression.py"
          },
          {
            "rank": 0,
            "tokens": 101,
            "span_id": "docstring",
            "file_path": "seaborn/regression.py"
          },
          {
            "rank": 0,
            "tokens": 179,
            "span_id": "Plotter._scale_coords",
            "file_path": "seaborn/_core/plot.py"
          },
          {
            "rank": 1,
            "tokens": 115,
            "span_id": "Hist._eval",
            "file_path": "seaborn/_stats/histogram.py"
          },
          {
            "rank": 1,
            "tokens": 50,
            "span_id": "Hist._get_bins_and_eval",
            "file_path": "seaborn/_stats/histogram.py"
          },
          {
            "rank": 1,
            "tokens": 1382,
            "span_id": "impl:11",
            "file_path": "seaborn/regression.py"
          },
          {
            "rank": 1,
            "tokens": 270,
            "span_id": "docstring",
            "file_path": "seaborn/_core/plot.py"
          },
          {
            "rank": 1,
            "tokens": 58,
            "span_id": "Layer",
            "file_path": "seaborn/_core/plot.py"
          },
          {
            "rank": 1,
            "tokens": 32,
            "span_id": "FacetSpec",
            "file_path": "seaborn/_core/plot.py"
          },
          {
            "rank": 1,
            "tokens": 39,
            "span_id": "PairSpec",
            "file_path": "seaborn/_core/plot.py"
          },
          {
            "rank": 1,
            "tokens": 3,
            "span_id": "Default",
            "file_path": "seaborn/_core/plot.py"
          },
          {
            "rank": 1,
            "tokens": 10,
            "span_id": "Default.__repr__",
            "file_path": "seaborn/_core/plot.py"
          },
          {
            "rank": 1,
            "tokens": 4,
            "span_id": "impl:4",
            "file_path": "seaborn/_core/plot.py"
          },
          {
            "rank": 2,
            "tokens": 16,
            "span_id": "Rolling.__call__",
            "file_path": "seaborn/_stats/aggregation.py"
          },
          {
            "rank": 2,
            "tokens": 156,
            "span_id": "Est.__call__",
            "file_path": "seaborn/_stats/aggregation.py"
          },
          {
            "rank": 2,
            "tokens": 1275,
            "span_id": "impl:16",
            "file_path": "seaborn/regression.py"
          },
          {
            "rank": 2,
            "tokens": 270,
            "span_id": "Plot._plot",
            "file_path": "seaborn/_core/plot.py"
          },
          {
            "rank": 3,
            "tokens": 270,
            "span_id": "regplot",
            "file_path": "seaborn/regression.py"
          },
          {
            "rank": 4,
            "tokens": 164,
            "span_id": "_RegressionPlotter.fit_logx",
            "file_path": "seaborn/regression.py"
          },
          {
            "rank": 4,
            "tokens": 53,
            "span_id": "_RegressionPlotter.fit_lowess",
            "file_path": "seaborn/regression.py"
          },
          {
            "rank": 5,
            "tokens": 1440,
            "span_id": "impl:14",
            "file_path": "seaborn/regression.py"
          },
          {
            "rank": 6,
            "tokens": 109,
            "span_id": "_RegressionPlotter.bin_predictor",
            "file_path": "seaborn/regression.py"
          },
          {
            "rank": 6,
            "tokens": 76,
            "span_id": "_RegressionPlotter.regress_out",
            "file_path": "seaborn/regression.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue highlights the need for PolyFit to handle missing data robustly to avoid causing a `LinAlgError`. Examining the search results, we find the relevant code in `seaborn/_stats/regression.py`, specifically in the `PolyFit` class. The `_fit_predict` method uses `np.polyfit` without checking for missing data, which is likely causing the error during operations. To address this issue, the code should incorporate checks and potentially handle cases where NaN or None values are present before running `np.polyfit`. Additionally, other files like `seaborn/regression.py` and `seaborn/_core/plot.py` contain fitting methods (`fit_lowess`, `fit_logx`, `_RegressionPlotter.fit_lowess`, etc.) that could also be susceptible to similar issues and might require similar missing data handling.",
            "identified_spans": [
              {
                "span_ids": [
                  "imports",
                  "PolyFit",
                  "PolyFit._fit_predict",
                  "PolyFit.__call__"
                ],
                "file_path": "seaborn/_stats/regression.py"
              },
              {
                "span_ids": [
                  "docstring",
                  "_RegressionPlotter",
                  "_RegressionPlotter.fit_lowess",
                  "_RegressionPlotter.fit_logx"
                ],
                "file_path": "seaborn/regression.py"
              },
              {
                "span_ids": [
                  "docstring",
                  "Plot",
                  "Plot._plot"
                ],
                "file_path": "seaborn/_core/plot.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 5536,
          "output_tokens": 402,
          "retry_message": null,
          "completion_cost": 0.022638000000000002
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The code snippet in `seaborn/_stats/regression.py` contains the relevant `PolyFit` class along with the `_fit_predict` method where `np.polyfit` is actually used. The traceback from the issue points directly to this method as the source of the error, suggesting that missing data handling is not robust in this specific code block. The `seaborn/regression.py` file also has a significant amount of regression-related code and is responsible for plotting logic, which is relevant given the context of the issue. The remaining content provided in the `seaborn/_core/plot.py` file does not directly address the missing data issue or `PolyFit` usage but is part of the broader plotting mechanism within the package. Therefore, searching specifically around `PolyFit` methods or regression computation in other parts of the code for proper data handling (e.g., filtering out missing data) might provide additional context, but the primary relevant file context is complete for addressing the specific issue.",
            "search_suggestions": "Although the primary context for `PolyFit` and regression computation seems complete, considering that the error involves missing data, it might be beneficial to search for or assess how other parts of the code deal with data preprocessing, especially for missing values, to ensure that similar errors do not arise elsewhere."
          },
          "output": {},
          "input_tokens": 6176,
          "output_tokens": 307,
          "retry_message": null,
          "completion_cost": 0.023133
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "PolyFit._fit_predict",
            "file_path": "seaborn/_stats/regression.py",
            "scratch_pad": "The issue arises due to the presence of `None` values in the data passed to `np.polyfit`, which causes a `LinAlgError`. To address this, we should filter out any `None` values before performing the polynomial fitting.",
            "instructions": "Filter out `None` values from the `x` and `y` data before passing it to `np.polyfit`."
          },
          "output": {
            "span_id": "PolyFit._fit_predict",
            "end_line": 34,
            "file_path": "seaborn/_stats/regression.py",
            "start_line": 22,
            "instructions": "Filter out `None` values from the `x` and `y` data before passing it to `np.polyfit`."
          },
          "input_tokens": 6513,
          "output_tokens": 140,
          "retry_message": null,
          "completion_cost": 0.021639000000000002
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "PolyFit._fit_predict",
        "end_line": 34,
        "file_path": "seaborn/_stats/regression.py",
        "max_tokens": 1000,
        "start_line": 22,
        "temperature": 1.6,
        "instructions": "Filter out `None` values from the `x` and `y` data before passing it to `np.polyfit`.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```html\n<replace>\n    def _fit_predict(self, data):\n\n        x = data[\"x\"]\n        y = data[\"y\"]\n        not_nan_mask = ~(x.isna() | y.isna())\n        x = x[not_nan_mask]\n        y = y[not_nan_mask]\n        if x.nunique() <= self.order:\n            # TODO warn?\n            xx = yy = []\n        else:\n            p = np.polyfit(x, y, self.order)\n            xx = np.linspace(x.min(), x.max(), self.gridsize)\n            yy = np.polyval(p, xx)\n\n        return pd.DataFrame(dict(x=xx, y=yy))\n</replace>"
          },
          "output": {
            "diff": "--- seaborn/_stats/regression.py\n+++ seaborn/_stats/regression.py\n@@ -23,6 +23,9 @@\n \n         x = data[\"x\"]\n         y = data[\"y\"]\n+        not_nan_mask = ~(x.isna() | y.isna())\n+        x = x[not_nan_mask]\n+        y = y[not_nan_mask]\n         if x.nunique() <= self.order:\n             # TODO warn?\n             xx = yy = []\n",
            "message": "Applied the change to seaborn/_stats/regression.py.\n\n<scratch_pad>\n```html\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 6968,
          "output_tokens": 184,
          "retry_message": null,
          "completion_cost": 0.023663999999999998
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- seaborn/_stats/regression.py\n+++ seaborn/_stats/regression.py\n@@ -23,6 +23,9 @@\n \n         x = data[\"x\"]\n         y = data[\"y\"]\n+        not_nan_mask = ~(x.isna() | y.isna())\n+        x = x[not_nan_mask]\n+        y = y[not_nan_mask]\n         if x.nunique() <= self.order:\n             # TODO warn?\n             xx = yy = []\n",
        "model": "deepseek-coder",
        "message": "Applied the change to seaborn/_stats/regression.py.\n\n<scratch_pad>\n```html\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue of `PolyFit` not being robust to missing data has been resolved by filtering out `None` values prior to polynomial fitting.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The change to `PolyFit._fit_predict` has successfully filtered out `None` values from the `x` and `y` data, preventing the `LinAlgError` when `np.polyfit` is called. This resolves the issue reported.",
            "instructions": null
          },
          "output": {
            "message": "The issue of `PolyFit` not being robust to missing data has been resolved by filtering out `None` values prior to polynomial fitting."
          },
          "input_tokens": 6883,
          "output_tokens": 143,
          "retry_message": null,
          "completion_cost": 0.022794000000000002
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue of `PolyFit` not being robust to missing data has been resolved by filtering out `None` values prior to polynomial fitting.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "PolyFit is not robust to missing data\n```python\r\nso.Plot([1, 2, 3, None, 4], [1, 2, 3, 4, 5]).add(so.Line(), so.PolyFit())\r\n```\r\n\r\n<details><summary>Traceback</summary>\r\n\r\n```python-traceback\r\n---------------------------------------------------------------------------\r\nLinAlgError                               Traceback (most recent call last)\r\nFile ~/miniconda3/envs/seaborn-py39-latest/lib/python3.9/site-packages/IPython/core/formatters.py:343, in BaseFormatter.__call__(self, obj)\r\n    341     method = get_real_method(obj, self.print_method)\r\n    342     if method is not None:\r\n--> 343         return method()\r\n    344     return None\r\n    345 else:\r\n\r\nFile ~/code/seaborn/seaborn/_core/plot.py:265, in Plot._repr_png_(self)\r\n    263 def _repr_png_(self) -> tuple[bytes, dict[str, float]]:\r\n--> 265     return self.plot()._repr_png_()\r\n\r\nFile ~/code/seaborn/seaborn/_core/plot.py:804, in Plot.plot(self, pyplot)\r\n    800 \"\"\"\r\n    801 Compile the plot spec and return the Plotter object.\r\n    802 \"\"\"\r\n    803 with theme_context(self._theme_with_defaults()):\r\n--> 804     return self._plot(pyplot)\r\n\r\nFile ~/code/seaborn/seaborn/_core/plot.py:822, in Plot._plot(self, pyplot)\r\n    819 plotter._setup_scales(self, common, layers, coord_vars)\r\n    821 # Apply statistical transform(s)\r\n--> 822 plotter._compute_stats(self, layers)\r\n    824 # Process scale spec for semantic variables and coordinates computed by stat\r\n    825 plotter._setup_scales(self, common, layers)\r\n\r\nFile ~/code/seaborn/seaborn/_core/plot.py:1110, in Plotter._compute_stats(self, spec, layers)\r\n   1108     grouper = grouping_vars\r\n   1109 groupby = GroupBy(grouper)\r\n-> 1110 res = stat(df, groupby, orient, scales)\r\n   1112 if pair_vars:\r\n   1113     data.frames[coord_vars] = res\r\n\r\nFile ~/code/seaborn/seaborn/_stats/regression.py:41, in PolyFit.__call__(self, data, groupby, orient, scales)\r\n     39 def __call__(self, data, groupby, orient, scales):\r\n---> 41     return groupby.apply(data, self._fit_predict)\r\n\r\nFile ~/code/seaborn/seaborn/_core/groupby.py:109, in GroupBy.apply(self, data, func, *args, **kwargs)\r\n    106 grouper, groups = self._get_groups(data)\r\n    108 if not grouper:\r\n--> 109     return self._reorder_columns(func(data, *args, **kwargs), data)\r\n    111 parts = {}\r\n    112 for key, part_df in data.groupby(grouper, sort=False):\r\n\r\nFile ~/code/seaborn/seaborn/_stats/regression.py:30, in PolyFit._fit_predict(self, data)\r\n     28     xx = yy = []\r\n     29 else:\r\n---> 30     p = np.polyfit(x, y, self.order)\r\n     31     xx = np.linspace(x.min(), x.max(), self.gridsize)\r\n     32     yy = np.polyval(p, xx)\r\n\r\nFile <__array_function__ internals>:180, in polyfit(*args, **kwargs)\r\n\r\nFile ~/miniconda3/envs/seaborn-py39-latest/lib/python3.9/site-packages/numpy/lib/polynomial.py:668, in polyfit(x, y, deg, rcond, full, w, cov)\r\n    666 scale = NX.sqrt((lhs*lhs).sum(axis=0))\r\n    667 lhs /= scale\r\n--> 668 c, resids, rank, s = lstsq(lhs, rhs, rcond)\r\n    669 c = (c.T/scale).T  # broadcast scale coefficients\r\n    671 # warn on rank reduction, which indicates an ill conditioned matrix\r\n\r\nFile <__array_function__ internals>:180, in lstsq(*args, **kwargs)\r\n\r\nFile ~/miniconda3/envs/seaborn-py39-latest/lib/python3.9/site-packages/numpy/linalg/linalg.py:2300, in lstsq(a, b, rcond)\r\n   2297 if n_rhs == 0:\r\n   2298     # lapack can't handle n_rhs = 0 - so allocate the array one larger in that axis\r\n   2299     b = zeros(b.shape[:-2] + (m, n_rhs + 1), dtype=b.dtype)\r\n-> 2300 x, resids, rank, s = gufunc(a, b, rcond, signature=signature, extobj=extobj)\r\n   2301 if m == 0:\r\n   2302     x[...] = 0\r\n\r\nFile ~/miniconda3/envs/seaborn-py39-latest/lib/python3.9/site-packages/numpy/linalg/linalg.py:101, in _raise_linalgerror_lstsq(err, flag)\r\n    100 def _raise_linalgerror_lstsq(err, flag):\r\n--> 101     raise LinAlgError(\"SVD did not converge in Linear Least Squares\")\r\n\r\nLinAlgError: SVD did not converge in Linear Least Squares\r\n\r\n```\r\n\r\n</details>\n"
}