{
  "info": {
    "duration": 178.20897269248962,
    "submission": "diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py\nindex 612b8f4607..75aef79be8 100644\n--- a/sympy/polys/partfrac.py\n+++ b/sympy/polys/partfrac.py\n@@ -137,7 +137,7 @@ def apart(f, x=None, full=False, **options):\n             partial = apart_undetermined_coeffs(P, Q)\n         else:\n             partial = apart_full_decomposition(P, Q)\n-\n+        partial = partial.evalf()  # Evaluate to assign numerical values for symbols if any\n     terms = S.Zero\n \n     for term in Add.make_args(partial):\n",
    "total_cost": 0.108987,
    "instance_id": "sympy__sympy-12236",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves incorrect results when using the 'apart' function in the SymPy library, which is used for partial fraction decomposition. Given the traceback and examples provided, it seems the problem is specifically related to the 'apart' function within the 'sympy/polys/partfrac.py' module. Additionally, looking at other files that involve symbolic operations and simplification like 'sympy/core/expr.py', 'sympy/core/function.py', 'sympy/core/mul.py', and 'sympy/core/add.py' might also be helpful to understand the context of the issue and potential related problems.",
            "search_requests": [
              {
                "query": "apart function in SymPy partial fraction decomposition",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sympy/polys/partfrac.py",
                "function_names": []
              },
              {
                "query": "symbolic operations and simplification",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sympy/core/expr.py",
                "function_names": []
              },
              {
                "query": "subs function",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sympy/core/function.py",
                "function_names": []
              },
              {
                "query": "Mul class for multiple operations",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sympy/core/mul.py",
                "function_names": []
              },
              {
                "query": "Add class for addition operations",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sympy/core/add.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 998,
                "span_id": "apart",
                "file_path": "sympy/polys/partfrac.py"
              },
              {
                "rank": 2,
                "tokens": 1254,
                "span_id": "apart_list",
                "file_path": "sympy/polys/partfrac.py"
              },
              {
                "rank": 4,
                "tokens": 247,
                "span_id": "apart_undetermined_coeffs",
                "file_path": "sympy/polys/partfrac.py"
              },
              {
                "rank": 5,
                "tokens": 119,
                "span_id": "docstring",
                "file_path": "sympy/polys/partfrac.py"
              },
              {
                "rank": 6,
                "tokens": 141,
                "span_id": "apart_full_decomposition",
                "file_path": "sympy/polys/partfrac.py"
              },
              {
                "rank": 7,
                "tokens": 428,
                "span_id": "apart_list_full_decomposition",
                "file_path": "sympy/polys/partfrac.py"
              },
              {
                "rank": 0,
                "tokens": 104,
                "span_id": "imports",
                "file_path": "sympy/core/expr.py"
              },
              {
                "rank": 1,
                "tokens": 41,
                "span_id": "Expr.integrate",
                "file_path": "sympy/core/expr.py"
              },
              {
                "rank": 1,
                "tokens": 46,
                "span_id": "Expr.powsimp",
                "file_path": "sympy/core/expr.py"
              },
              {
                "rank": 1,
                "tokens": 30,
                "span_id": "Expr.ratsimp",
                "file_path": "sympy/core/expr.py"
              },
              {
                "rank": 1,
                "tokens": 34,
                "span_id": "Expr.combsimp",
                "file_path": "sympy/core/expr.py"
              },
              {
                "rank": 1,
                "tokens": 41,
                "span_id": "Expr.factor",
                "file_path": "sympy/core/expr.py"
              },
              {
                "rank": 0,
                "tokens": 85,
                "span_id": "Subs._eval_derivative",
                "file_path": "sympy/core/function.py"
              },
              {
                "rank": 0,
                "tokens": 15,
                "span_id": "Subs.__hash__",
                "file_path": "sympy/core/function.py"
              },
              {
                "rank": 0,
                "tokens": 26,
                "span_id": "Subs.free_symbols",
                "file_path": "sympy/core/function.py"
              },
              {
                "rank": 0,
                "tokens": 31,
                "span_id": "Subs._has",
                "file_path": "sympy/core/function.py"
              },
              {
                "rank": 0,
                "tokens": 53,
                "span_id": "Subs._eval_subs",
                "file_path": "sympy/core/function.py"
              },
              {
                "rank": 0,
                "tokens": 19,
                "span_id": "Subs._hashable_content",
                "file_path": "sympy/core/function.py"
              },
              {
                "rank": 0,
                "tokens": 20,
                "span_id": "_mulsort",
                "file_path": "sympy/core/mul.py"
              },
              {
                "rank": 0,
                "tokens": 100,
                "span_id": "imports",
                "file_path": "sympy/core/mul.py"
              },
              {
                "rank": 0,
                "tokens": 40,
                "span_id": "NC_Marker",
                "file_path": "sympy/core/mul.py"
              },
              {
                "rank": 0,
                "tokens": 11,
                "span_id": "impl",
                "file_path": "sympy/core/mul.py"
              },
              {
                "rank": 1,
                "tokens": 98,
                "span_id": "Mul._eval_evalf",
                "file_path": "sympy/core/mul.py"
              },
              {
                "rank": 1,
                "tokens": 19,
                "span_id": "Mul.class_key",
                "file_path": "sympy/core/mul.py"
              },
              {
                "rank": 0,
                "tokens": 20,
                "span_id": "_addsort",
                "file_path": "sympy/core/add.py"
              },
              {
                "rank": 0,
                "tokens": 102,
                "span_id": "imports",
                "file_path": "sympy/core/add.py"
              },
              {
                "rank": 1,
                "tokens": 17,
                "span_id": "Add",
                "file_path": "sympy/core/add.py"
              },
              {
                "rank": 1,
                "tokens": 1263,
                "span_id": "Add.flatten",
                "file_path": "sympy/core/add.py"
              },
              {
                "rank": 2,
                "tokens": 21,
                "span_id": "Add._eval_transpose",
                "file_path": "sympy/core/add.py"
              },
              {
                "rank": 2,
                "tokens": 18,
                "span_id": "Add.__neg__",
                "file_path": "sympy/core/add.py"
              }
            ],
            "search_requests": [
              {
                "query": "apart function in SymPy partial fraction decomposition",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sympy/polys/partfrac.py",
                "function_names": []
              },
              {
                "query": "symbolic operations and simplification",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sympy/core/expr.py",
                "function_names": []
              },
              {
                "query": "subs function",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sympy/core/function.py",
                "function_names": []
              },
              {
                "query": "Mul class for multiple operations",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sympy/core/mul.py",
                "function_names": []
              },
              {
                "query": "Add class for addition operations",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sympy/core/add.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 4120,
          "output_tokens": 337,
          "retry_message": null,
          "completion_cost": 0.017415
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 998,
            "span_id": "apart",
            "file_path": "sympy/polys/partfrac.py"
          },
          {
            "rank": 0,
            "tokens": 104,
            "span_id": "imports",
            "file_path": "sympy/core/expr.py"
          },
          {
            "rank": 0,
            "tokens": 85,
            "span_id": "Subs._eval_derivative",
            "file_path": "sympy/core/function.py"
          },
          {
            "rank": 0,
            "tokens": 15,
            "span_id": "Subs.__hash__",
            "file_path": "sympy/core/function.py"
          },
          {
            "rank": 0,
            "tokens": 26,
            "span_id": "Subs.free_symbols",
            "file_path": "sympy/core/function.py"
          },
          {
            "rank": 0,
            "tokens": 31,
            "span_id": "Subs._has",
            "file_path": "sympy/core/function.py"
          },
          {
            "rank": 0,
            "tokens": 53,
            "span_id": "Subs._eval_subs",
            "file_path": "sympy/core/function.py"
          },
          {
            "rank": 0,
            "tokens": 19,
            "span_id": "Subs._hashable_content",
            "file_path": "sympy/core/function.py"
          },
          {
            "rank": 0,
            "tokens": 20,
            "span_id": "_mulsort",
            "file_path": "sympy/core/mul.py"
          },
          {
            "rank": 0,
            "tokens": 100,
            "span_id": "imports",
            "file_path": "sympy/core/mul.py"
          },
          {
            "rank": 0,
            "tokens": 40,
            "span_id": "NC_Marker",
            "file_path": "sympy/core/mul.py"
          },
          {
            "rank": 0,
            "tokens": 11,
            "span_id": "impl",
            "file_path": "sympy/core/mul.py"
          },
          {
            "rank": 0,
            "tokens": 20,
            "span_id": "_addsort",
            "file_path": "sympy/core/add.py"
          },
          {
            "rank": 0,
            "tokens": 102,
            "span_id": "imports",
            "file_path": "sympy/core/add.py"
          },
          {
            "rank": 1,
            "tokens": 41,
            "span_id": "Expr.integrate",
            "file_path": "sympy/core/expr.py"
          },
          {
            "rank": 1,
            "tokens": 46,
            "span_id": "Expr.powsimp",
            "file_path": "sympy/core/expr.py"
          },
          {
            "rank": 1,
            "tokens": 30,
            "span_id": "Expr.ratsimp",
            "file_path": "sympy/core/expr.py"
          },
          {
            "rank": 1,
            "tokens": 34,
            "span_id": "Expr.combsimp",
            "file_path": "sympy/core/expr.py"
          },
          {
            "rank": 1,
            "tokens": 41,
            "span_id": "Expr.factor",
            "file_path": "sympy/core/expr.py"
          },
          {
            "rank": 1,
            "tokens": 98,
            "span_id": "Mul._eval_evalf",
            "file_path": "sympy/core/mul.py"
          },
          {
            "rank": 1,
            "tokens": 19,
            "span_id": "Mul.class_key",
            "file_path": "sympy/core/mul.py"
          },
          {
            "rank": 1,
            "tokens": 17,
            "span_id": "Add",
            "file_path": "sympy/core/add.py"
          },
          {
            "rank": 1,
            "tokens": 1263,
            "span_id": "Add.flatten",
            "file_path": "sympy/core/add.py"
          },
          {
            "rank": 2,
            "tokens": 1254,
            "span_id": "apart_list",
            "file_path": "sympy/polys/partfrac.py"
          },
          {
            "rank": 2,
            "tokens": 21,
            "span_id": "Add._eval_transpose",
            "file_path": "sympy/core/add.py"
          },
          {
            "rank": 2,
            "tokens": 18,
            "span_id": "Add.__neg__",
            "file_path": "sympy/core/add.py"
          },
          {
            "rank": 4,
            "tokens": 247,
            "span_id": "apart_undetermined_coeffs",
            "file_path": "sympy/polys/partfrac.py"
          },
          {
            "rank": 5,
            "tokens": 119,
            "span_id": "docstring",
            "file_path": "sympy/polys/partfrac.py"
          },
          {
            "rank": 6,
            "tokens": 141,
            "span_id": "apart_full_decomposition",
            "file_path": "sympy/polys/partfrac.py"
          },
          {
            "rank": 7,
            "tokens": 428,
            "span_id": "apart_list_full_decomposition",
            "file_path": "sympy/polys/partfrac.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue is about an incorrect result when using the 'apart' function in SymPy. The issue involves expressions like 'a * (-t + (-t + 1) * (2 * t - 1)) / (2 * t - 1)'. The user has reported that calling 'apart(t)' on this expression gives a wrong result. To address this, it's crucial to look into the 'apart' function and related functionalities within SymPy. The initial search results include several relevant files and spans of code, particularly in 'sympy/polys/partfrac.py', where the 'apart' function and associated methods are defined. Other files like 'sympy/core/expr.py', 'sympy/core/function.py', 'sympy/core/mul.py', and 'sympy/core/add.py' provide context and support functionalities but are less directly related to the specific issue at hand. The primary focus should be on the 'apart' function and its implementations in 'sympy/polys/partfrac.py'.",
            "identified_spans": [
              {
                "span_ids": [
                  "apart",
                  "apart_undetermined_coeffs",
                  "apart_full_decomposition",
                  "apart_list",
                  "apart_list_full_decomposition"
                ],
                "file_path": "sympy/polys/partfrac.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4548,
          "output_tokens": 333,
          "retry_message": null,
          "completion_cost": 0.018639
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The file context provided is 'sympy/polys/partfrac.py', which contains the implementations of the 'apart' function and other related functions responsible for partial fraction decomposition in the SymPy library. This directly addresses the reported issue concerning incorrect results with the 'apart' function, indicating that the relevant code for the issue is present in the provided file context. Additionally, the file indicates dependencies or potential interactions with other parts of the codebase, as handling commutative and non-commutative elements suggests interaction with core SymPy functionalities (e.g., 'sympy/core/expr.py', 'sympy/core/function.py').",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 3770,
          "output_tokens": 171,
          "retry_message": null,
          "completion_cost": 0.013875
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "apart",
            "file_path": "sympy/polys/partfrac.py",
            "scratch_pad": "The issue involves the `apart` function returning incorrect results when a symbol `a` is used. Specifically, the expression `bug.apart(t)` returns `-a*t` instead of the correct partial fraction decomposition. The root cause is likely in the handling of the 'a' symbol within the `apart` function logic.",
            "instructions": "Update the `apart` function to correctly handle the case when a symbol other than the primary variable is present in the expression. Specifically, ensure that the function does not prematurely simplify or bypass the partial fraction decomposition for such cases."
          },
          "output": {
            "span_id": "apart",
            "file_path": "sympy/polys/partfrac.py",
            "instructions": "Update the `apart` function to correctly handle the case when a symbol other than the primary variable is present in the expression. Specifically, ensure that the function does not prematurely simplify or bypass the partial fraction decomposition for such cases."
          },
          "input_tokens": 3968,
          "output_tokens": 172,
          "retry_message": null,
          "completion_cost": 0.014484
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "apart",
        "end_line": null,
        "file_path": "sympy/polys/partfrac.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Update the `apart` function to correctly handle the case when a symbol other than the primary variable is present in the expression. Specifically, ensure that the function does not prematurely simplify or bypass the partial fraction decomposition for such cases.\n\nTo handle the case when a symbol other than the primary variable is present in the expression, we need to ensure that the function does not prematurely simplify or bypass the partial fraction decomposition. The key part of the code that needs modification is the handling of the case where the degrees of polynomials in the numerator and denominator are checked. This is done around line 133 to 140 where the function decides whether to use partial fraction decomposition based on the degree of the denominator.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 140,
            "start_line": 133,
            "scratch_pad": "To handle the case when a symbol other than the primary variable is present in the expression, we need to ensure that the function does not prematurely simplify or bypass the partial fraction decomposition. The key part of the code that needs modification is the handling of the case where the degrees of polynomials in the numerator and denominator are checked. This is done around line 133 to 140 where the function decides whether to use partial fraction decomposition based on the degree of the denominator."
          },
          "output": {
            "span_id": "apart",
            "end_line": 140,
            "file_path": "sympy/polys/partfrac.py",
            "start_line": 133,
            "instructions": "Update the `apart` function to correctly handle the case when a symbol other than the primary variable is present in the expression. Specifically, ensure that the function does not prematurely simplify or bypass the partial fraction decomposition for such cases.\n\nTo handle the case when a symbol other than the primary variable is present in the expression, we need to ensure that the function does not prematurely simplify or bypass the partial fraction decomposition. The key part of the code that needs modification is the handling of the case where the degrees of polynomials in the numerator and denominator are checked. This is done around line 133 to 140 where the function decides whether to use partial fraction decomposition based on the degree of the denominator."
          },
          "input_tokens": 2126,
          "output_tokens": 142,
          "retry_message": null,
          "completion_cost": 0.008508
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "apart",
        "end_line": 140,
        "file_path": "sympy/polys/partfrac.py",
        "max_tokens": 1000,
        "start_line": 133,
        "temperature": 1.6,
        "instructions": "Update the `apart` function to correctly handle the case when a symbol other than the primary variable is present in the expression. Specifically, ensure that the function does not prematurely simplify or bypass the partial fraction decomposition for such cases.\n\nTo handle the case when a symbol other than the primary variable is present in the expression, we need to ensure that the function does not prematurely simplify or bypass the partial fraction decomposition. The key part of the code that needs modification is the handling of the case where the degrees of polynomials in the numerator and denominator are checked. This is done around line 133 to 140 where the function decides whether to use partial fraction decomposition based on the degree of the denominator.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n    if Q.degree() <= 1:\n        partial = P/Q\n    else:\n        if not full:\n            partial = apart_undetermined_coeffs(P, Q)\n        else:\n            partial = apart_full_decomposition(P, Q)\n        partial = partial.evalf()  # Evaluate to assign numerical values for symbols if any\n</replace>"
          },
          "output": {
            "diff": "--- sympy/polys/partfrac.py\n+++ sympy/polys/partfrac.py\n@@ -137,7 +137,7 @@\n             partial = apart_undetermined_coeffs(P, Q)\n         else:\n             partial = apart_full_decomposition(P, Q)\n-\n+        partial = partial.evalf()  # Evaluate to assign numerical values for symbols if any\n     terms = S.Zero\n \n     for term in Add.make_args(partial):\n",
            "message": "Applied the change to sympy/polys/partfrac.py.",
            "verification_errors": []
          },
          "input_tokens": 6400,
          "output_tokens": 90,
          "retry_message": null,
          "completion_cost": 0.020550000000000002
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sympy/polys/partfrac.py\n+++ sympy/polys/partfrac.py\n@@ -137,7 +137,7 @@\n             partial = apart_undetermined_coeffs(P, Q)\n         else:\n             partial = apart_full_decomposition(P, Q)\n-\n+        partial = partial.evalf()  # Evaluate to assign numerical values for symbols if any\n     terms = S.Zero\n \n     for term in Add.make_args(partial):\n",
        "model": "deepseek-coder",
        "message": "Applied the change to sympy/polys/partfrac.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "reject",
            "finish": null,
            "reject": "The `.evalf()` call is not suitable in the context of partial fraction decomposition, as it can lead to incorrect symbolic simplifications and does not address the core issue of incorrect handling of the `a` symbol inthe `apart` function.",
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The previous change introduced a `.evalf()` call inside the `apart` function. This modification is inappropriate because it incorrectly assumes that numerical evaluation should always occur in the context of partial fraction decomposition. Additionally, this change might alter the symbolic nature of the expression being processed, which is not desirable in this context.",
            "instructions": null
          },
          "output": {
            "message": "The `.evalf()` call is not suitable in the context of partial fraction decomposition, as it can lead to incorrect symbolic simplifications and does not address the core issue of incorrect handling of the `a` symbol inthe `apart` function."
          },
          "input_tokens": 4312,
          "output_tokens": 172,
          "retry_message": null,
          "completion_cost": 0.015516
        }
      ]
    },
    {
      "name": "Rejected",
      "state": {
        "model": "gpt-4o",
        "message": "The `.evalf()` call is not suitable in the context of partial fraction decomposition, as it can lead to incorrect symbolic simplifications and does not address the core issue of incorrect handling of the `a` symbol inthe `apart` function.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Wrong result with apart\n```\r\nPython 3.6.0 |Continuum Analytics, Inc.| (default, Dec 23 2016, 12:22:00) \r\nType \"copyright\", \"credits\" or \"license\" for more information.\r\n\r\nIPython 5.1.0 -- An enhanced Interactive Python.\r\n?         -> Introduction and overview of IPython's features.\r\n%quickref -> Quick reference.\r\nhelp      -> Python's own help system.\r\nobject?   -> Details about 'object', use 'object??' for extra details.\r\n\r\nIn [1]: from sympy import symbols\r\n\r\nIn [2]: a = symbols('a', real=True)\r\n\r\nIn [3]: t = symbols('t', real=True, negative=False)\r\n\r\nIn [4]: bug = a * (-t + (-t + 1) * (2 * t - 1)) / (2 * t - 1)\r\n\r\nIn [5]: bug.subs(a, 1)\r\nOut[5]: (-t + (-t + 1)*(2*t - 1))/(2*t - 1)\r\n\r\nIn [6]: bug.subs(a, 1).apart()\r\nOut[6]: -t + 1/2 - 1/(2*(2*t - 1))\r\n\r\nIn [7]: bug.subs(a, 1).apart(t)\r\nOut[7]: -t + 1/2 - 1/(2*(2*t - 1))\r\n\r\nIn [8]: bug.apart(t)\r\nOut[8]: -a*t\r\n\r\nIn [9]: import sympy; sympy.__version__\r\nOut[9]: '1.0'\r\n```\nWrong result with apart\n```\r\nPython 3.6.0 |Continuum Analytics, Inc.| (default, Dec 23 2016, 12:22:00) \r\nType \"copyright\", \"credits\" or \"license\" for more information.\r\n\r\nIPython 5.1.0 -- An enhanced Interactive Python.\r\n?         -> Introduction and overview of IPython's features.\r\n%quickref -> Quick reference.\r\nhelp      -> Python's own help system.\r\nobject?   -> Details about 'object', use 'object??' for extra details.\r\n\r\nIn [1]: from sympy import symbols\r\n\r\nIn [2]: a = symbols('a', real=True)\r\n\r\nIn [3]: t = symbols('t', real=True, negative=False)\r\n\r\nIn [4]: bug = a * (-t + (-t + 1) * (2 * t - 1)) / (2 * t - 1)\r\n\r\nIn [5]: bug.subs(a, 1)\r\nOut[5]: (-t + (-t + 1)*(2*t - 1))/(2*t - 1)\r\n\r\nIn [6]: bug.subs(a, 1).apart()\r\nOut[6]: -t + 1/2 - 1/(2*(2*t - 1))\r\n\r\nIn [7]: bug.subs(a, 1).apart(t)\r\nOut[7]: -t + 1/2 - 1/(2*(2*t - 1))\r\n\r\nIn [8]: bug.apart(t)\r\nOut[8]: -a*t\r\n\r\nIn [9]: import sympy; sympy.__version__\r\nOut[9]: '1.0'\r\n```\n"
}