{
  "info": {
    "duration": 201.0004858970642,
    "submission": "diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py\nindex 612b8f4607..3e575a42cb 100644\n--- a/sympy/polys/partfrac.py\n+++ b/sympy/polys/partfrac.py\n@@ -78,7 +78,7 @@ def apart(f, x=None, full=False, **options):\n         P, Q = f.as_numer_denom()\n \n     _options = options.copy()\n-    options = set_defaults(options, extension=True)\n+    options = set_defaults(options, extension=True, real=True, negative=False)\n     try:\n         (P, Q), opt = parallel_poly_from_expr((P, Q), x, **options)\n     except PolynomialError as msg:\n",
    "total_cost": 0.11616,
    "instance_id": "sympy__sympy-12236",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves incorrect results when using the `apart` function in SymPy version 1.0. Given the provided files, the relevant file patterns might include those related to polynomial handling and symbolic manipulation, particularly focusing on the 'sympy/polys/' and 'sympy/core/' directories. The `apart` function is likely to be defined or used in these files. Additionally, methods like `_eval_subs` and `_eval_expand_mul` in the `Mul` class might also be relevant, as these can affect the behavior of symbolic expressions during manipulation.",
            "search_requests": [
              {
                "query": "apart function",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sympy/polys/*.py",
                "function_names": []
              },
              {
                "query": "symbolic manipulation",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sympy/core/*.py",
                "function_names": []
              },
              {
                "query": null,
                "class_names": [
                  "Mul"
                ],
                "code_snippet": null,
                "file_pattern": null,
                "function_names": [
                  "_eval_subs",
                  "_eval_expand_mul"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 998,
                "span_id": "apart",
                "file_path": "sympy/polys/partfrac.py"
              },
              {
                "rank": 1,
                "tokens": 1254,
                "span_id": "apart_list",
                "file_path": "sympy/polys/partfrac.py"
              },
              {
                "rank": 4,
                "tokens": 247,
                "span_id": "apart_undetermined_coeffs",
                "file_path": "sympy/polys/partfrac.py"
              },
              {
                "rank": 6,
                "tokens": 785,
                "span_id": "assemble_partfrac_list",
                "file_path": "sympy/polys/partfrac.py"
              },
              {
                "rank": 7,
                "tokens": 119,
                "span_id": "docstring",
                "file_path": "sympy/polys/partfrac.py"
              },
              {
                "rank": 8,
                "tokens": 141,
                "span_id": "apart_full_decomposition",
                "file_path": "sympy/polys/partfrac.py"
              },
              {
                "rank": 5,
                "tokens": 944,
                "span_id": "symmetrize",
                "file_path": "sympy/polys/polyfuncs.py"
              },
              {
                "rank": 9,
                "tokens": 279,
                "span_id": "docstring",
                "file_path": "sympy/polys/polyutils.py"
              },
              {
                "rank": 10,
                "tokens": 121,
                "span_id": "content",
                "file_path": "sympy/polys/polytools.py"
              },
              {
                "rank": 0,
                "tokens": 390,
                "span_id": "docstring",
                "file_path": "sympy/core/core.py"
              },
              {
                "rank": 1,
                "tokens": 104,
                "span_id": "imports",
                "file_path": "sympy/core/expr.py"
              },
              {
                "rank": 5,
                "tokens": 41,
                "span_id": "Expr.integrate",
                "file_path": "sympy/core/expr.py"
              },
              {
                "rank": 2,
                "tokens": 102,
                "span_id": "imports",
                "file_path": "sympy/core/symbol.py"
              },
              {
                "rank": 3,
                "tokens": 333,
                "span_id": "docstring",
                "file_path": "sympy/core/__init__.py"
              },
              {
                "rank": 4,
                "tokens": 20,
                "span_id": "_mulsort",
                "file_path": "sympy/core/mul.py"
              },
              {
                "rank": 4,
                "tokens": 100,
                "span_id": "imports",
                "file_path": "sympy/core/mul.py"
              },
              {
                "rank": 4,
                "tokens": 40,
                "span_id": "NC_Marker",
                "file_path": "sympy/core/mul.py"
              },
              {
                "rank": 4,
                "tokens": 11,
                "span_id": "impl",
                "file_path": "sympy/core/mul.py"
              },
              {
                "rank": 0,
                "tokens": 1825,
                "span_id": "Mul._eval_subs",
                "file_path": "sympy/core/mul.py"
              },
              {
                "rank": 0,
                "tokens": 240,
                "span_id": "Mul._eval_expand_mul",
                "file_path": "sympy/core/mul.py"
              }
            ],
            "search_requests": [
              {
                "query": "apart function",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sympy/polys/*.py",
                "function_names": []
              },
              {
                "query": "symbolic manipulation",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "sympy/core/*.py",
                "function_names": []
              },
              {
                "query": null,
                "class_names": [
                  "Mul"
                ],
                "code_snippet": null,
                "file_pattern": null,
                "function_names": [
                  "_eval_subs",
                  "_eval_expand_mul"
                ]
              }
            ]
          },
          "input_tokens": 4120,
          "output_tokens": 244,
          "retry_message": null,
          "completion_cost": 0.01602
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 998,
            "span_id": "apart",
            "file_path": "sympy/polys/partfrac.py"
          },
          {
            "rank": 0,
            "tokens": 390,
            "span_id": "docstring",
            "file_path": "sympy/core/core.py"
          },
          {
            "rank": 0,
            "tokens": 1825,
            "span_id": "Mul._eval_subs",
            "file_path": "sympy/core/mul.py"
          },
          {
            "rank": 0,
            "tokens": 240,
            "span_id": "Mul._eval_expand_mul",
            "file_path": "sympy/core/mul.py"
          },
          {
            "rank": 1,
            "tokens": 1254,
            "span_id": "apart_list",
            "file_path": "sympy/polys/partfrac.py"
          },
          {
            "rank": 1,
            "tokens": 104,
            "span_id": "imports",
            "file_path": "sympy/core/expr.py"
          },
          {
            "rank": 2,
            "tokens": 102,
            "span_id": "imports",
            "file_path": "sympy/core/symbol.py"
          },
          {
            "rank": 3,
            "tokens": 333,
            "span_id": "docstring",
            "file_path": "sympy/core/__init__.py"
          },
          {
            "rank": 4,
            "tokens": 247,
            "span_id": "apart_undetermined_coeffs",
            "file_path": "sympy/polys/partfrac.py"
          },
          {
            "rank": 4,
            "tokens": 20,
            "span_id": "_mulsort",
            "file_path": "sympy/core/mul.py"
          },
          {
            "rank": 4,
            "tokens": 100,
            "span_id": "imports",
            "file_path": "sympy/core/mul.py"
          },
          {
            "rank": 4,
            "tokens": 40,
            "span_id": "NC_Marker",
            "file_path": "sympy/core/mul.py"
          },
          {
            "rank": 4,
            "tokens": 11,
            "span_id": "impl",
            "file_path": "sympy/core/mul.py"
          },
          {
            "rank": 5,
            "tokens": 944,
            "span_id": "symmetrize",
            "file_path": "sympy/polys/polyfuncs.py"
          },
          {
            "rank": 5,
            "tokens": 41,
            "span_id": "Expr.integrate",
            "file_path": "sympy/core/expr.py"
          },
          {
            "rank": 6,
            "tokens": 785,
            "span_id": "assemble_partfrac_list",
            "file_path": "sympy/polys/partfrac.py"
          },
          {
            "rank": 7,
            "tokens": 119,
            "span_id": "docstring",
            "file_path": "sympy/polys/partfrac.py"
          },
          {
            "rank": 8,
            "tokens": 141,
            "span_id": "apart_full_decomposition",
            "file_path": "sympy/polys/partfrac.py"
          },
          {
            "rank": 9,
            "tokens": 279,
            "span_id": "docstring",
            "file_path": "sympy/polys/polyutils.py"
          },
          {
            "rank": 10,
            "tokens": 121,
            "span_id": "content",
            "file_path": "sympy/polys/polytools.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "To address the reported issue related to incorrect results with the 'apart' function in SymPy, I analyzed the provided code spans in the 'sympy/polys/partfrac.py' file. The key elements of the issue involve the 'apart' function, its variants, and how they handle partial fraction decomposition. The search results include several relevant spans that encapsulate the logic and implementation details of the 'apart' function and related utilities like 'apart_undetermined_coeffs', 'apart_full_decomposition', 'apart_list', and 'assemble_partfrac_list'. These functions are central to the partial fraction decomposition functionality and are likely where the issue occurs. The other files and spans, while part of SymPy, do not directly relate to the partial fraction decomposition issue described in the input. Therefore, the identified spans in 'sympy/polys/partfrac.py' are pertinent to resolving the reported issue.",
            "identified_spans": [
              {
                "span_ids": [
                  "apart",
                  "apart_undetermined_coeffs",
                  "apart_full_decomposition",
                  "apart_list",
                  "assemble_partfrac_list"
                ],
                "file_path": "sympy/polys/partfrac.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 4979,
          "output_tokens": 299,
          "retry_message": null,
          "completion_cost": 0.019422000000000002
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The provided file context contains the implementation of the 'apart' function in SymPy, which is central to the issue reported. The function 'apart' and related methods are found in 'sympy/polys/partfrac.py', which aligns well with the issue's focus on the 'apart' method's functionality. The file includes detailed operations for partial fraction decomposition, handling of numerators and denominators, and various methods to manage expressions. This strongly suggests that the file context includes all relevant code to understand and potentially address the reported issue. However, without access to the entire SymPy codebase, it's critical to ensure that all dependencies and related methods are factored in for a comprehensive analysis.",
            "search_suggestions": "If further analysis is needed, consider examining other parts of the SymPy codebase that interact with 'sympy/polys/partfrac.py', such as 'sympy/core/' for any foundational classes or functionalities used by the 'apart' method. Also, versions of SymPy newer than 1.0 might have addressed this issue, so reviewing recent commits and releases could provide additional context."
          },
          "output": {},
          "input_tokens": 3756,
          "output_tokens": 266,
          "retry_message": null,
          "completion_cost": 0.015258
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "apart",
            "file_path": "sympy/polys/partfrac.py",
            "scratch_pad": "The issue seems to be related to the improper handling of the `apart` function, particularly when the input expression contains symbols with specific properties.",
            "instructions": "Update the `apart` function to ensure that it correctly handles expressions with specified properties like `real=True` and `negative=False`."
          },
          "output": {
            "span_id": "apart",
            "file_path": "sympy/polys/partfrac.py",
            "instructions": "Update the `apart` function to ensure that it correctly handles expressions with specified properties like `real=True` and `negative=False`."
          },
          "input_tokens": 3968,
          "output_tokens": 116,
          "retry_message": null,
          "completion_cost": 0.013644
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "apart",
        "end_line": null,
        "file_path": "sympy/polys/partfrac.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Update the `apart` function to ensure that it correctly handles expressions with specified properties like `real=True` and `negative=False`.\n\nThe `apart` function needs modifications to handle specified properties like `real=True` and `negative=False`. These properties might influence how the polynomial factorization and decomposition are done. The relevant lines are where the options for factorization are set and where the polynomial operations are executed.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 83,
            "start_line": 80,
            "scratch_pad": "The `apart` function needs modifications to handle specified properties like `real=True` and `negative=False`. These properties might influence how the polynomial factorization and decomposition are done. The relevant lines are where the options for factorization are set and where the polynomial operations are executed."
          },
          "output": {
            "span_id": "apart",
            "end_line": 87,
            "file_path": "sympy/polys/partfrac.py",
            "start_line": 76,
            "instructions": "Update the `apart` function to ensure that it correctly handles expressions with specified properties like `real=True` and `negative=False`.\n\nThe `apart` function needs modifications to handle specified properties like `real=True` and `negative=False`. These properties might influence how the polynomial factorization and decomposition are done. The relevant lines are where the options for factorization are set and where the polynomial operations are executed."
          },
          "input_tokens": 2109,
          "output_tokens": 92,
          "retry_message": null,
          "completion_cost": 0.007707
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "apart",
        "end_line": 87,
        "file_path": "sympy/polys/partfrac.py",
        "max_tokens": 1000,
        "start_line": 76,
        "temperature": 1.6,
        "instructions": "Update the `apart` function to ensure that it correctly handles expressions with specified properties like `real=True` and `negative=False`.\n\nThe `apart` function needs modifications to handle specified properties like `real=True` and `negative=False`. These properties might influence how the polynomial factorization and decomposition are done. The relevant lines are where the options for factorization are set and where the polynomial operations are executed.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n        return f\n    else:\n        P, Q = f.as_numer_denom()\n\n    _options = options.copy()\n    options = set_defaults(options, extension=True, real=True, negative=False)\n    try:\n        (P, Q), opt = parallel_poly_from_expr((P, Q), x, **options)\n    except PolynomialError as msg:\n        if f.is_commutative:\n            raise PolynomialError(msg)\n        # non-commutative\n</replace>"
          },
          "output": {
            "diff": "--- sympy/polys/partfrac.py\n+++ sympy/polys/partfrac.py\n@@ -78,7 +78,7 @@\n         P, Q = f.as_numer_denom()\n \n     _options = options.copy()\n-    options = set_defaults(options, extension=True)\n+    options = set_defaults(options, extension=True, real=True, negative=False)\n     try:\n         (P, Q), opt = parallel_poly_from_expr((P, Q), x, **options)\n     except PolynomialError as msg:\n",
            "message": "Applied the change to sympy/polys/partfrac.py.",
            "verification_errors": []
          },
          "input_tokens": 6388,
          "output_tokens": 125,
          "retry_message": null,
          "completion_cost": 0.021039000000000002
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sympy/polys/partfrac.py\n+++ sympy/polys/partfrac.py\n@@ -78,7 +78,7 @@\n         P, Q = f.as_numer_denom()\n \n     _options = options.copy()\n-    options = set_defaults(options, extension=True)\n+    options = set_defaults(options, extension=True, real=True, negative=False)\n     try:\n         (P, Q), opt = parallel_poly_from_expr((P, Q), x, **options)\n     except PolynomialError as msg:\n",
        "model": "deepseek-coder",
        "message": "Applied the change to sympy/polys/partfrac.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "apart",
            "file_path": "sympy/polys/partfrac.py",
            "scratch_pad": "The initially applied change to the `apart` function in `sympy/polys/partfrac.py` didn't fully address the issue. It seems additional context or a deeper examination of the `apart` function's handling of expressions with specified properties is required.",
            "instructions": "Re-evaluate the `apart` function to ensure it properly respects symbol properties like `real=True` and `negative=False` during the partial fraction decomposition process."
          },
          "output": {
            "span_id": "apart",
            "file_path": "sympy/polys/partfrac.py",
            "instructions": "Re-evaluate the `apart` function to ensure it properly respects symbol properties like `real=True` and `negative=False` during the partial fraction decomposition process."
          },
          "input_tokens": 4277,
          "output_tokens": 162,
          "retry_message": null,
          "completion_cost": 0.015261
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "apart",
        "end_line": null,
        "file_path": "sympy/polys/partfrac.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Re-evaluate the `apart` function to ensure it properly respects symbol properties like `real=True` and `negative=False` during the partial fraction decomposition process.\n\nThe instructions require modifications within the `apart` function to ensure it respects symbol properties like `real=True` and `negative=False` during the partial fraction decomposition process. The relevant section of the code where these properties should be considered is where the options are set and the polynomials are processed.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 83,
            "start_line": 80,
            "scratch_pad": "The instructions require modifications within the `apart` function to ensure it respects symbol properties like `real=True` and `negative=False` during the partial fraction decomposition process. The relevant section of the code where these properties should be considered is where the options are set and the polynomials are processed."
          },
          "output": {
            "span_id": "apart",
            "end_line": 87,
            "file_path": "sympy/polys/partfrac.py",
            "start_line": 76,
            "instructions": "Re-evaluate the `apart` function to ensure it properly respects symbol properties like `real=True` and `negative=False` during the partial fraction decomposition process.\n\nThe instructions require modifications within the `apart` function to ensure it respects symbol properties like `real=True` and `negative=False` during the partial fraction decomposition process. The relevant section of the code where these properties should be considered is where the options are set and the polynomials are processed."
          },
          "input_tokens": 2123,
          "output_tokens": 96,
          "retry_message": null,
          "completion_cost": 0.007809000000000001
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "apart",
        "end_line": 87,
        "file_path": "sympy/polys/partfrac.py",
        "max_tokens": 1000,
        "start_line": 76,
        "temperature": 1.6,
        "instructions": "Re-evaluate the `apart` function to ensure it properly respects symbol properties like `real=True` and `negative=False` during the partial fraction decomposition process.\n\nThe instructions require modifications within the `apart` function to ensure it respects symbol properties like `real=True` and `negative=False` during the partial fraction decomposition process. The relevant section of the code where these properties should be considered is where the options are set and the polynomials are processed.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```json\n{\n  \"replace\": \"try:\\n        (P, Q), opt = parallel_poly_from_expr((P, Q), x, **options)\\n    except PolynomialError as msg:\\n        if f.is_commutative:\\n            raise PolynomialError(msg)\\n        # non-commutative\\n\"\n}\n```"
          },
          "output": null,
          "input_tokens": 6414,
          "output_tokens": 78,
          "retry_message": "You did not provide any code in the replace tag. If you want to reject the instructions, use the reject function.",
          "completion_cost": 0.020412000000000003
        },
        {
          "action": {
            "content": "```json\n{\n  \"replace\": \"try:\\n        (P, Q), opt = parallel_poly_from_expr((P, Q), x, **options)\\n    except PolynomialError as msg:\\n        if f.is_commutative:\\n            raise PolynomialError(msg)\\n        # non-commutative\\n\"\n}\n```"
          },
          "output": null,
          "input_tokens": 6523,
          "output_tokens": 78,
          "retry_message": "You did not provide any code in the replace tag. If you want to reject the instructions, use the reject function.",
          "completion_cost": 0.020739
        },
        {
          "action": {
            "content": "```json\n{\n  \"reject\": \"The instructions do not specify changes needed in the provided code snippet to respect symbol properties like 'real=True' and 'negative=False' during the partial fraction decomposition process. The code snippet itself does not handle the partial fraction decomposition directly.\"\n}\n```"
          },
          "output": null,
          "input_tokens": 6632,
          "output_tokens": 62,
          "retry_message": "You did not provide any code in the replace tag. If you want to reject the instructions, use the reject function.",
          "completion_cost": 0.020826
        }
      ]
    }
  ],
  "initial_message": "Wrong result with apart\n```\r\nPython 3.6.0 |Continuum Analytics, Inc.| (default, Dec 23 2016, 12:22:00) \r\nType \"copyright\", \"credits\" or \"license\" for more information.\r\n\r\nIPython 5.1.0 -- An enhanced Interactive Python.\r\n?         -> Introduction and overview of IPython's features.\r\n%quickref -> Quick reference.\r\nhelp      -> Python's own help system.\r\nobject?   -> Details about 'object', use 'object??' for extra details.\r\n\r\nIn [1]: from sympy import symbols\r\n\r\nIn [2]: a = symbols('a', real=True)\r\n\r\nIn [3]: t = symbols('t', real=True, negative=False)\r\n\r\nIn [4]: bug = a * (-t + (-t + 1) * (2 * t - 1)) / (2 * t - 1)\r\n\r\nIn [5]: bug.subs(a, 1)\r\nOut[5]: (-t + (-t + 1)*(2*t - 1))/(2*t - 1)\r\n\r\nIn [6]: bug.subs(a, 1).apart()\r\nOut[6]: -t + 1/2 - 1/(2*(2*t - 1))\r\n\r\nIn [7]: bug.subs(a, 1).apart(t)\r\nOut[7]: -t + 1/2 - 1/(2*(2*t - 1))\r\n\r\nIn [8]: bug.apart(t)\r\nOut[8]: -a*t\r\n\r\nIn [9]: import sympy; sympy.__version__\r\nOut[9]: '1.0'\r\n```\nWrong result with apart\n```\r\nPython 3.6.0 |Continuum Analytics, Inc.| (default, Dec 23 2016, 12:22:00) \r\nType \"copyright\", \"credits\" or \"license\" for more information.\r\n\r\nIPython 5.1.0 -- An enhanced Interactive Python.\r\n?         -> Introduction and overview of IPython's features.\r\n%quickref -> Quick reference.\r\nhelp      -> Python's own help system.\r\nobject?   -> Details about 'object', use 'object??' for extra details.\r\n\r\nIn [1]: from sympy import symbols\r\n\r\nIn [2]: a = symbols('a', real=True)\r\n\r\nIn [3]: t = symbols('t', real=True, negative=False)\r\n\r\nIn [4]: bug = a * (-t + (-t + 1) * (2 * t - 1)) / (2 * t - 1)\r\n\r\nIn [5]: bug.subs(a, 1)\r\nOut[5]: (-t + (-t + 1)*(2*t - 1))/(2*t - 1)\r\n\r\nIn [6]: bug.subs(a, 1).apart()\r\nOut[6]: -t + 1/2 - 1/(2*(2*t - 1))\r\n\r\nIn [7]: bug.subs(a, 1).apart(t)\r\nOut[7]: -t + 1/2 - 1/(2*(2*t - 1))\r\n\r\nIn [8]: bug.apart(t)\r\nOut[8]: -a*t\r\n\r\nIn [9]: import sympy; sympy.__version__\r\nOut[9]: '1.0'\r\n```\n"
}