{
  "info": {
    "duration": 209.6229956150055,
    "submission": "diff --git a/sympy/polys/partfrac.py b/sympy/polys/partfrac.py\nindex 612b8f4607..04b970aaa6 100644\n--- a/sympy/polys/partfrac.py\n+++ b/sympy/polys/partfrac.py\n@@ -137,7 +137,6 @@ def apart(f, x=None, full=False, **options):\n             partial = apart_undetermined_coeffs(P, Q)\n         else:\n             partial = apart_full_decomposition(P, Q)\n-\n     terms = S.Zero\n \n     for term in Add.make_args(partial):\n",
    "total_cost": 0.12364199999999999,
    "instance_id": "sympy__sympy-12236",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue pertains to incorrect results when using the `apart` function in SymPy. The problematic behavior involves incorrect partial fraction decomposition, particularly when substituting `a` with `1`. Given the context, it is critical to investigate the `apart` function in the `sympy/polys/partfrac.py` file, as well as any related functions in the `sympy/core` and `sympy/series` modules that might influence this behavior.",
            "search_requests": [
              {
                "query": "apart function, partial fraction decomposition",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/sympy/polys/partfrac.py",
                "function_names": [
                  "apart",
                  "apart_undetermined_coeffs",
                  "apart_list"
                ]
              },
              {
                "query": "expressions handling, substitution, evaluation",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/sympy/core/**/*.py",
                "function_names": [
                  "_eval_subs",
                  "as_independent",
                  "series",
                  "integrate",
                  "ratsimp",
                  "powsimp"
                ]
              },
              {
                "query": "series expansion, formal series",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/sympy/series/**/*.py",
                "function_names": [
                  "rational_algorithm",
                  "approximants"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 998,
                "span_id": "apart",
                "file_path": "sympy/polys/partfrac.py"
              },
              {
                "rank": 2,
                "tokens": 1254,
                "span_id": "apart_list",
                "file_path": "sympy/polys/partfrac.py"
              },
              {
                "rank": 3,
                "tokens": 247,
                "span_id": "apart_undetermined_coeffs",
                "file_path": "sympy/polys/partfrac.py"
              },
              {
                "rank": 14,
                "tokens": 48,
                "span_id": "Basic._eval_subs",
                "file_path": "sympy/core/basic.py"
              },
              {
                "rank": 1,
                "tokens": 41,
                "span_id": "Expr.integrate",
                "file_path": "sympy/core/expr.py"
              },
              {
                "rank": 1,
                "tokens": 46,
                "span_id": "Expr.powsimp",
                "file_path": "sympy/core/expr.py"
              },
              {
                "rank": 1,
                "tokens": 30,
                "span_id": "Expr.ratsimp",
                "file_path": "sympy/core/expr.py"
              },
              {
                "rank": 17,
                "tokens": 1591,
                "span_id": "Expr.as_independent",
                "file_path": "sympy/core/expr.py"
              },
              {
                "rank": 3,
                "tokens": 1825,
                "span_id": "Mul._eval_subs",
                "file_path": "sympy/core/mul.py"
              },
              {
                "rank": 8,
                "tokens": 53,
                "span_id": "Subs._eval_subs",
                "file_path": "sympy/core/function.py"
              },
              {
                "rank": 9,
                "tokens": 672,
                "span_id": "Pow._eval_subs",
                "file_path": "sympy/core/power.py"
              },
              {
                "rank": 11,
                "tokens": 337,
                "span_id": "Add._eval_subs",
                "file_path": "sympy/core/add.py"
              },
              {
                "rank": 0,
                "tokens": 843,
                "span_id": "rational_algorithm",
                "file_path": "sympy/series/formal.py"
              },
              {
                "rank": 4,
                "tokens": 877,
                "span_id": "approximants",
                "file_path": "sympy/series/approximants.py"
              }
            ],
            "search_requests": [
              {
                "query": "apart function, partial fraction decomposition",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/sympy/polys/partfrac.py",
                "function_names": [
                  "apart",
                  "apart_undetermined_coeffs",
                  "apart_list"
                ]
              },
              {
                "query": "expressions handling, substitution, evaluation",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/sympy/core/**/*.py",
                "function_names": [
                  "_eval_subs",
                  "as_independent",
                  "series",
                  "integrate",
                  "ratsimp",
                  "powsimp"
                ]
              },
              {
                "query": "series expansion, formal series",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/sympy/series/**/*.py",
                "function_names": [
                  "rational_algorithm",
                  "approximants"
                ]
              }
            ]
          },
          "input_tokens": 4120,
          "output_tokens": 312,
          "retry_message": null,
          "completion_cost": 0.01704
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 998,
            "span_id": "apart",
            "file_path": "sympy/polys/partfrac.py"
          },
          {
            "rank": 0,
            "tokens": 843,
            "span_id": "rational_algorithm",
            "file_path": "sympy/series/formal.py"
          },
          {
            "rank": 1,
            "tokens": 41,
            "span_id": "Expr.integrate",
            "file_path": "sympy/core/expr.py"
          },
          {
            "rank": 1,
            "tokens": 46,
            "span_id": "Expr.powsimp",
            "file_path": "sympy/core/expr.py"
          },
          {
            "rank": 1,
            "tokens": 30,
            "span_id": "Expr.ratsimp",
            "file_path": "sympy/core/expr.py"
          },
          {
            "rank": 2,
            "tokens": 1254,
            "span_id": "apart_list",
            "file_path": "sympy/polys/partfrac.py"
          },
          {
            "rank": 3,
            "tokens": 247,
            "span_id": "apart_undetermined_coeffs",
            "file_path": "sympy/polys/partfrac.py"
          },
          {
            "rank": 3,
            "tokens": 1825,
            "span_id": "Mul._eval_subs",
            "file_path": "sympy/core/mul.py"
          },
          {
            "rank": 4,
            "tokens": 877,
            "span_id": "approximants",
            "file_path": "sympy/series/approximants.py"
          },
          {
            "rank": 8,
            "tokens": 53,
            "span_id": "Subs._eval_subs",
            "file_path": "sympy/core/function.py"
          },
          {
            "rank": 9,
            "tokens": 672,
            "span_id": "Pow._eval_subs",
            "file_path": "sympy/core/power.py"
          },
          {
            "rank": 11,
            "tokens": 337,
            "span_id": "Add._eval_subs",
            "file_path": "sympy/core/add.py"
          },
          {
            "rank": 14,
            "tokens": 48,
            "span_id": "Basic._eval_subs",
            "file_path": "sympy/core/basic.py"
          },
          {
            "rank": 17,
            "tokens": 1591,
            "span_id": "Expr.as_independent",
            "file_path": "sympy/core/expr.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves incorrect results when using the 'apart' function in SymPy. The search results include several relevant files and spans of code where the 'apart' function and related methods are implemented. The most relevant file is 'sympy/polys/partfrac.py', which contains the definition of the 'apart' function and related methods such as 'apart_undetermined_coeffs' and 'apart_list'. These functions are directly related to the partial fraction decomposition functionality that is not working correctly as per the issue. Other files such as 'sympy/series/formal.py' and 'sympy/core/expr.py' also contain references to the 'apart' function, indicating potential interactions or uses of this function in different contexts. The analysis of these spans of code should help in identifying the root cause of the issue and potential fixes.",
            "identified_spans": [
              {
                "span_ids": [
                  "apart",
                  "apart_undetermined_coeffs",
                  "apart_list"
                ],
                "file_path": "sympy/polys/partfrac.py"
              },
              {
                "span_ids": [
                  "rational_algorithm"
                ],
                "file_path": "sympy/series/formal.py"
              },
              {
                "span_ids": [
                  "Expr.integrate",
                  "Expr.ratsimp",
                  "Expr.powsimp"
                ],
                "file_path": "sympy/core/expr.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 5960,
          "output_tokens": 339,
          "retry_message": null,
          "completion_cost": 0.022965
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "The analysis focuses on the `apart` function in `sympy/polys/partfrac.py`, which is central to the issue regarding incorrect partial fraction decomposition. The function's implementation is thoroughly explored in the provided context, covering how it handles polynomials and rational functions, including the use of `apart_undetermined_coeffs` and `apart_full_decomposition`. Additionally, the integration of `apart` in other modules like `sympy/series/formal.py` and `sympy/core/expr.py` is observed, which confirms the connectivity of the `apart` function across different parts of the SymPy library. This comprehensive context suggests that all relevant functions and interactions related to the `apart` method for the reported issue are encompassed. Therefore, the relevance and completeness for addressing the issue within this file context seem sufficient.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 3914,
          "output_tokens": 214,
          "retry_message": null,
          "completion_cost": 0.014952
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "apart",
            "file_path": "sympy/polys/partfrac.py",
            "scratch_pad": "The issue involves incorrect results when using the `apart` method, particularly with expressions involving symbols 'a' and 't'. The expected behavior is not observed in the provided snippets, so the `apart` method logic needs to be carefully reviewed and adjusted.",
            "instructions": "Update the `apart` function in `sympy/polys/partfrac.py` to correctly handle partial fraction decomposition for expressions involving both 'a' and 't'. The current implementation returns `-a*t` for `bug.apart(t)` instead of the expected result derived from individual substitutions of 'a' and 't'."
          },
          "output": {
            "span_id": "apart",
            "file_path": "sympy/polys/partfrac.py",
            "instructions": "Update the `apart` function in `sympy/polys/partfrac.py` to correctly handle partial fraction decomposition for expressions involving both 'a' and 't'. The current implementation returns `-a*t` for `bug.apart(t)` instead of the expected result derived from individual substitutions of 'a' and 't'."
          },
          "input_tokens": 4190,
          "output_tokens": 182,
          "retry_message": null,
          "completion_cost": 0.0153
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "apart",
        "end_line": null,
        "file_path": "sympy/polys/partfrac.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Update the `apart` function in `sympy/polys/partfrac.py` to correctly handle partial fraction decomposition for expressions involving both 'a' and 't'. The current implementation returns `-a*t` for `bug.apart(t)` instead of the expected result derived from individual substitutions of 'a' and 't'.\n\nThe function to be modified is `apart` starting from line 73 to handle the specific case involving both 'a' and 't'. The current implementation lacks specific handling for such combinations, leading to incorrect results for expressions like `-a*t` for `bug.apart(t)`. The modification should be around line 133 where the partial fraction decomposition logic is implemented.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 140,
            "start_line": 133,
            "scratch_pad": "The function to be modified is `apart` starting from line 73 to handle the specific case involving both 'a' and 't'. The current implementation lacks specific handling for such combinations, leading to incorrect results for expressions like `-a*t` for `bug.apart(t)`. The modification should be around line 133 where the partial fraction decomposition logic is implemented."
          },
          "output": {
            "span_id": "apart",
            "end_line": 140,
            "file_path": "sympy/polys/partfrac.py",
            "start_line": 133,
            "instructions": "Update the `apart` function in `sympy/polys/partfrac.py` to correctly handle partial fraction decomposition for expressions involving both 'a' and 't'. The current implementation returns `-a*t` for `bug.apart(t)` instead of the expected result derived from individual substitutions of 'a' and 't'.\n\nThe function to be modified is `apart` starting from line 73 to handle the specific case involving both 'a' and 't'. The current implementation lacks specific handling for such combinations, leading to incorrect results for expressions like `-a*t` for `bug.apart(t)`. The modification should be around line 133 where the partial fraction decomposition logic is implemented."
          },
          "input_tokens": 2152,
          "output_tokens": 126,
          "retry_message": null,
          "completion_cost": 0.008346
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "apart",
        "end_line": 140,
        "file_path": "sympy/polys/partfrac.py",
        "max_tokens": 1000,
        "start_line": 133,
        "temperature": 1.6,
        "instructions": "Update the `apart` function in `sympy/polys/partfrac.py` to correctly handle partial fraction decomposition for expressions involving both 'a' and 't'. The current implementation returns `-a*t` for `bug.apart(t)` instead of the expected result derived from individual substitutions of 'a' and 't'.\n\nThe function to be modified is `apart` starting from line 73 to handle the specific case involving both 'a' and 't'. The current implementation lacks specific handling for such combinations, leading to incorrect results for expressions like `-a*t` for `bug.apart(t)`. The modification should be around line 133 where the partial fraction decomposition logic is implemented.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```python\n<replace>\n    if Q.degree() <= 1:\n        partial = P/Q\n    else:\n        if not full:\n            partial = apart_undetermined_coeffs(P, Q)\n        else:\n            partial = apart_full_decomposition(P, Q)\n</replace>"
          },
          "output": {
            "diff": "--- sympy/polys/partfrac.py\n+++ sympy/polys/partfrac.py\n@@ -137,7 +137,6 @@\n             partial = apart_undetermined_coeffs(P, Q)\n         else:\n             partial = apart_full_decomposition(P, Q)\n-\n     terms = S.Zero\n \n     for term in Add.make_args(partial):\n",
            "message": "Applied the change to sympy/polys/partfrac.py.\n\n<scratch_pad>\n```python\n</scratch_pad>",
            "verification_errors": []
          },
          "input_tokens": 6354,
          "output_tokens": 73,
          "retry_message": null,
          "completion_cost": 0.020156999999999998
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sympy/polys/partfrac.py\n+++ sympy/polys/partfrac.py\n@@ -137,7 +137,6 @@\n             partial = apart_undetermined_coeffs(P, Q)\n         else:\n             partial = apart_full_decomposition(P, Q)\n-\n     terms = S.Zero\n \n     for term in Add.make_args(partial):\n",
        "model": "deepseek-coder",
        "message": "Applied the change to sympy/polys/partfrac.py.\n\n<scratch_pad>\n```python\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "apart",
            "file_path": "sympy/polys/partfrac.py",
            "scratch_pad": "The diff changes seem insufficient to address the issue. The 'apart' function needs a more comprehensive adjustment to handle the partial fraction decomposition correctly across different scenarios, including cases with multiple variables like 'a' and 't'.",
            "instructions": "Revise the `apart` function logic in `sympy/polys/partfrac.py` to ensure that it correctly processes the partial fraction decomposition for expressions involving both 'a' and 't'. Specifically, adjust the algorithm to handle multivariate expressions and ensure that the decomposition is performed as expected. The current change has removed a critical newline, but it does not directly address the issue of incorrect partial fraction decomposition. Fix the algorithm to perform the decomposition accurately."
          },
          "output": {
            "span_id": "apart",
            "file_path": "sympy/polys/partfrac.py",
            "instructions": "Revise the `apart` function logic in `sympy/polys/partfrac.py` to ensure that it correctly processes the partial fraction decomposition for expressions involving both 'a' and 't'. Specifically, adjust the algorithm to handle multivariate expressions and ensure that the decomposition is performed as expected. The current change has removed a critical newline, but it does not directly address the issue of incorrect partial fraction decomposition. Fix the algorithm to perform the decomposition accurately."
          },
          "input_tokens": 4530,
          "output_tokens": 210,
          "retry_message": null,
          "completion_cost": 0.016739999999999998
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "apart",
        "end_line": null,
        "file_path": "sympy/polys/partfrac.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Revise the `apart` function logic in `sympy/polys/partfrac.py` to ensure that it correctly processes the partial fraction decomposition for expressions involving both 'a' and 't'. Specifically, adjust the algorithm to handle multivariate expressions and ensure that the decomposition is performed as expected. The current change has removed a critical newline, but it does not directly address the issue of incorrect partial fraction decomposition. Fix the algorithm to perform the decomposition accurately.\n\nThe instruction focuses on revising the algorithm inside the `apart` function to handle multivariate expressions correctly and ensure accurate partial fraction decomposition. The relevant lines for modification are those where the partial fraction decomposition logic is implemented, specifically the lines that handle the undetermined coefficients method and Bronstein's full partial fraction decomposition algorithm.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": [
        {
          "action": {
            "reject": null,
            "end_line": 139,
            "start_line": 136,
            "scratch_pad": "The instruction focuses on revising the algorithm inside the `apart` function to handle multivariate expressions correctly and ensure accurate partial fraction decomposition. The relevant lines for modification are those where the partial fraction decomposition logic is implemented, specifically the lines that handle the undetermined coefficients method and Bronstein's full partial fraction decomposition algorithm."
          },
          "output": {
            "span_id": "apart",
            "end_line": 143,
            "file_path": "sympy/polys/partfrac.py",
            "start_line": 133,
            "instructions": "Revise the `apart` function logic in `sympy/polys/partfrac.py` to ensure that it correctly processes the partial fraction decomposition for expressions involving both 'a' and 't'. Specifically, adjust the algorithm to handle multivariate expressions and ensure that the decomposition is performed as expected. The current change has removed a critical newline, but it does not directly address the issue of incorrect partial fraction decomposition. Fix the algorithm to perform the decomposition accurately.\n\nThe instruction focuses on revising the algorithm inside the `apart` function to handle multivariate expressions correctly and ensure accurate partial fraction decomposition. The relevant lines for modification are those where the partial fraction decomposition logic is implemented, specifically the lines that handle the undetermined coefficients method and Bronstein's full partial fraction decomposition algorithm."
          },
          "input_tokens": 2169,
          "output_tokens": 109,
          "retry_message": null,
          "completion_cost": 0.008142
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "apart",
        "end_line": 143,
        "file_path": "sympy/polys/partfrac.py",
        "max_tokens": 1000,
        "start_line": 133,
        "temperature": 1.6,
        "instructions": "Revise the `apart` function logic in `sympy/polys/partfrac.py` to ensure that it correctly processes the partial fraction decomposition for expressions involving both 'a' and 't'. Specifically, adjust the algorithm to handle multivariate expressions and ensure that the decomposition is performed as expected. The current change has removed a critical newline, but it does not directly address the issue of incorrect partial fraction decomposition. Fix the algorithm to perform the decomposition accurately.\n\nThe instruction focuses on revising the algorithm inside the `apart` function to handle multivariate expressions correctly and ensure accurate partial fraction decomposition. The relevant lines for modification are those where the partial fraction decomposition logic is implemented, specifically the lines that handle the undetermined coefficients method and Bronstein's full partial fraction decomposition algorithm.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\n    if Q.degree() <= 1:\n        partial = P/Q\n    else:\n        if not full:\n            partial = apart_undetermined_coeffs(P, Q)\n        else:\n            partial = apart_full_decomposition(P, Q)\n    terms = S.Zero\n\n    for term in Add.make_args(partial):\n        if term.has(RootSum):\n</replace>"
          },
          "output": null,
          "input_tokens": 6388,
          "output_tokens": 101,
          "retry_message": "The code in the replace tag is the same as in the search. Use the reject function if you can't do any changes and want to reject the instructions.",
          "completion_cost": 0.020679
        },
        {
          "action": {
            "content": "```json\n{\n  \"reject\": \"The provided search code does not contain any clear instructions for modification, nor does it provide specific problematic lines or functionalities that need to be adjusted. Therefore, I am unable to make any changes to the code as per the current instructions.\"\n}\n```"
          },
          "output": null,
          "input_tokens": 6529,
          "output_tokens": 60,
          "retry_message": "You did not provide any code in the replace tag. If you want to reject the instructions, use the reject function.",
          "completion_cost": 0.020487000000000002
        },
        {
          "action": {
            "content": "```json\n{\n  \"reject\": \"The instructions provided do not specify the required modifications to the code snippet in the search tag. Without clear guidance on what to change or correct, I cannot proceed with the requested alterations.\"\n}\n```"
          },
          "output": null,
          "input_tokens": 6620,
          "output_tokens": 50,
          "retry_message": "You did not provide any code in the replace tag. If you want to reject the instructions, use the reject function.",
          "completion_cost": 0.02061
        }
      ]
    }
  ],
  "initial_message": "Wrong result with apart\n```\r\nPython 3.6.0 |Continuum Analytics, Inc.| (default, Dec 23 2016, 12:22:00) \r\nType \"copyright\", \"credits\" or \"license\" for more information.\r\n\r\nIPython 5.1.0 -- An enhanced Interactive Python.\r\n?         -> Introduction and overview of IPython's features.\r\n%quickref -> Quick reference.\r\nhelp      -> Python's own help system.\r\nobject?   -> Details about 'object', use 'object??' for extra details.\r\n\r\nIn [1]: from sympy import symbols\r\n\r\nIn [2]: a = symbols('a', real=True)\r\n\r\nIn [3]: t = symbols('t', real=True, negative=False)\r\n\r\nIn [4]: bug = a * (-t + (-t + 1) * (2 * t - 1)) / (2 * t - 1)\r\n\r\nIn [5]: bug.subs(a, 1)\r\nOut[5]: (-t + (-t + 1)*(2*t - 1))/(2*t - 1)\r\n\r\nIn [6]: bug.subs(a, 1).apart()\r\nOut[6]: -t + 1/2 - 1/(2*(2*t - 1))\r\n\r\nIn [7]: bug.subs(a, 1).apart(t)\r\nOut[7]: -t + 1/2 - 1/(2*(2*t - 1))\r\n\r\nIn [8]: bug.apart(t)\r\nOut[8]: -a*t\r\n\r\nIn [9]: import sympy; sympy.__version__\r\nOut[9]: '1.0'\r\n```\nWrong result with apart\n```\r\nPython 3.6.0 |Continuum Analytics, Inc.| (default, Dec 23 2016, 12:22:00) \r\nType \"copyright\", \"credits\" or \"license\" for more information.\r\n\r\nIPython 5.1.0 -- An enhanced Interactive Python.\r\n?         -> Introduction and overview of IPython's features.\r\n%quickref -> Quick reference.\r\nhelp      -> Python's own help system.\r\nobject?   -> Details about 'object', use 'object??' for extra details.\r\n\r\nIn [1]: from sympy import symbols\r\n\r\nIn [2]: a = symbols('a', real=True)\r\n\r\nIn [3]: t = symbols('t', real=True, negative=False)\r\n\r\nIn [4]: bug = a * (-t + (-t + 1) * (2 * t - 1)) / (2 * t - 1)\r\n\r\nIn [5]: bug.subs(a, 1)\r\nOut[5]: (-t + (-t + 1)*(2*t - 1))/(2*t - 1)\r\n\r\nIn [6]: bug.subs(a, 1).apart()\r\nOut[6]: -t + 1/2 - 1/(2*(2*t - 1))\r\n\r\nIn [7]: bug.subs(a, 1).apart(t)\r\nOut[7]: -t + 1/2 - 1/(2*(2*t - 1))\r\n\r\nIn [8]: bug.apart(t)\r\nOut[8]: -a*t\r\n\r\nIn [9]: import sympy; sympy.__version__\r\nOut[9]: '1.0'\r\n```\n"
}