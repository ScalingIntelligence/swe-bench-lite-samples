{
  "info": {
    "duration": 230.59560561180115,
    "submission": "diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py\nindex 7a1538325..eb6e1f862 100644\n--- a/sphinx/util/rst.py\n+++ b/sphinx/util/rst.py\n@@ -79,22 +79,27 @@ def prepend_prolog(content: StringList, prolog: str) -> None:\n     \"\"\"Prepend a string to content body as prolog.\"\"\"\n     if prolog:\n         pos = 0\n+        domain_directive = False\n         for line in content:\n             if docinfo_re.match(line):\n                 pos += 1\n+            elif line.strip().startswith(':') and ':`' in line:\n+                domain_directive = True\n+                break\n             else:\n                 break\n \n-        if pos > 0:\n+        if pos > 0 and not domain_directive:\n             # insert a blank line after docinfo\n             content.insert(pos, '', '<generated>', 0)\n             pos += 1\n \n-        # insert prolog (after docinfo if exists)\n-        for lineno, line in enumerate(prolog.splitlines()):\n-            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n+        # insert prolog (after docinfo if exists and no domain directive)\n+        if not domain_directive:\n+            for lineno, line in enumerate(prolog.splitlines()):\n+                content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n \n-        content.insert(pos + lineno + 1, '', '<generated>', 0)\n+            content.insert(pos + lineno + 1, '', '<generated>', 0)\n \n \n def append_epilog(content: StringList, epilog: str) -> None:\n",
    "total_cost": 0.110097,
    "instance_id": "sphinx-doc__sphinx-11445",
    "evaluation_name": "temperature_sweep_250_samples_50_problems_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue involves the use of the `rst_prolog` variable in the Sphinx configuration which causes top-level headings containing a domain directive to not render correctly or be included in the toctree. The primary concern is understanding how `rst_prolog` interacts with document parsing and heading rendering within Sphinx. The search should focus on files related to document parsing, especially those dealing with reStructuredText handling, configuration settings, and the management of domain-specific directives.",
            "search_requests": [
              {
                "query": "rst_prolog",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/sphinx/util/rst.py",
                "function_names": [
                  "prepend_prolog",
                  "append_epilog"
                ]
              },
              {
                "query": "domain directive",
                "class_names": [
                  "CustomReSTDispatcher",
                  "sphinx_domains"
                ],
                "code_snippet": null,
                "file_pattern": "**/sphinx/util/docutils.py",
                "function_names": [
                  "directive",
                  "role"
                ]
              },
              {
                "query": "domain directive",
                "class_names": [
                  "ReSTMarkup",
                  "ReSTDirectiveOption",
                  "ReSTDomain",
                  "CDomain",
                  "CPPDomain"
                ],
                "code_snippet": null,
                "file_pattern": "**/sphinx/domains/**.py",
                "function_names": [
                  "add_target_and_index",
                  "clear_doc",
                  "process_doc",
                  "process_field_xref",
                  "_resolve_xref_inner",
                  "resolve_any_xref",
                  "get_objects",
                  "get_full_qualified_name"
                ]
              },
              {
                "query": "RSTParser",
                "class_names": [
                  "RSTParser"
                ],
                "code_snippet": null,
                "file_pattern": "**/sphinx/parsers.py",
                "function_names": [
                  "get_transforms",
                  "parse",
                  "decorate"
                ]
              },
              {
                "query": "rst_prolog",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/sphinx/config.py",
                "function_names": [
                  "check_primary_domain",
                  "check_root_doc"
                ]
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 91,
                "span_id": "append_epilog",
                "file_path": "sphinx/util/rst.py"
              },
              {
                "rank": 0,
                "tokens": 138,
                "span_id": "prepend_prolog",
                "file_path": "sphinx/util/rst.py"
              },
              {
                "rank": 0,
                "tokens": 70,
                "span_id": "sphinx_domains.directive",
                "file_path": "sphinx/util/docutils.py"
              },
              {
                "rank": 0,
                "tokens": 71,
                "span_id": "sphinx_domains.role",
                "file_path": "sphinx/util/docutils.py"
              },
              {
                "rank": 1,
                "tokens": 31,
                "span_id": "sphinx_domains",
                "file_path": "sphinx/util/docutils.py"
              },
              {
                "rank": 1,
                "tokens": 211,
                "span_id": "sphinx_domains.lookup_domain_element",
                "file_path": "sphinx/util/docutils.py"
              },
              {
                "rank": 2,
                "tokens": 31,
                "span_id": "CustomReSTDispatcher.__exit__",
                "file_path": "sphinx/util/docutils.py"
              },
              {
                "rank": 2,
                "tokens": 12,
                "span_id": "CustomReSTDispatcher.__enter__",
                "file_path": "sphinx/util/docutils.py"
              },
              {
                "rank": 0,
                "tokens": 118,
                "span_id": "ReSTDomain.resolve_xref",
                "file_path": "sphinx/domains/rst.py"
              },
              {
                "rank": 1,
                "tokens": 1205,
                "span_id": "CPPDomain._resolve_xref_inner",
                "file_path": "sphinx/domains/cpp.py"
              },
              {
                "rank": 1,
                "tokens": 58,
                "span_id": "CPPDomain.process_doc",
                "file_path": "sphinx/domains/cpp.py"
              },
              {
                "rank": 1,
                "tokens": 693,
                "span_id": "CPPDomain",
                "file_path": "sphinx/domains/cpp.py"
              },
              {
                "rank": 1,
                "tokens": 133,
                "span_id": "CPPDomain.clear_doc",
                "file_path": "sphinx/domains/cpp.py"
              },
              {
                "rank": 1,
                "tokens": 188,
                "span_id": "CPPDomain.merge_domaindata",
                "file_path": "sphinx/domains/cpp.py"
              },
              {
                "rank": 0,
                "tokens": 151,
                "span_id": "RSTParser.parse",
                "file_path": "sphinx/parsers.py"
              },
              {
                "rank": 0,
                "tokens": 21,
                "span_id": "RSTParser",
                "file_path": "sphinx/parsers.py"
              },
              {
                "rank": 0,
                "tokens": 45,
                "span_id": "RSTParser.decorate",
                "file_path": "sphinx/parsers.py"
              },
              {
                "rank": 0,
                "tokens": 62,
                "span_id": "RSTParser.get_transforms",
                "file_path": "sphinx/parsers.py"
              },
              {
                "rank": 0,
                "tokens": 146,
                "span_id": "check_root_doc",
                "file_path": "sphinx/config.py"
              },
              {
                "rank": 0,
                "tokens": 58,
                "span_id": "check_primary_domain",
                "file_path": "sphinx/config.py"
              }
            ],
            "search_requests": [
              {
                "query": "rst_prolog",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/sphinx/util/rst.py",
                "function_names": [
                  "prepend_prolog",
                  "append_epilog"
                ]
              },
              {
                "query": "domain directive",
                "class_names": [
                  "CustomReSTDispatcher",
                  "sphinx_domains"
                ],
                "code_snippet": null,
                "file_pattern": "**/sphinx/util/docutils.py",
                "function_names": [
                  "directive",
                  "role"
                ]
              },
              {
                "query": "domain directive",
                "class_names": [
                  "ReSTMarkup",
                  "ReSTDirectiveOption",
                  "ReSTDomain",
                  "CDomain",
                  "CPPDomain"
                ],
                "code_snippet": null,
                "file_pattern": "**/sphinx/domains/**.py",
                "function_names": [
                  "add_target_and_index",
                  "clear_doc",
                  "process_doc",
                  "process_field_xref",
                  "_resolve_xref_inner",
                  "resolve_any_xref",
                  "get_objects",
                  "get_full_qualified_name"
                ]
              },
              {
                "query": "RSTParser",
                "class_names": [
                  "RSTParser"
                ],
                "code_snippet": null,
                "file_pattern": "**/sphinx/parsers.py",
                "function_names": [
                  "get_transforms",
                  "parse",
                  "decorate"
                ]
              },
              {
                "query": "rst_prolog",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/sphinx/config.py",
                "function_names": [
                  "check_primary_domain",
                  "check_root_doc"
                ]
              }
            ]
          },
          "input_tokens": 3969,
          "output_tokens": 500,
          "retry_message": null,
          "completion_cost": 0.019407
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 91,
            "span_id": "append_epilog",
            "file_path": "sphinx/util/rst.py"
          },
          {
            "rank": 0,
            "tokens": 138,
            "span_id": "prepend_prolog",
            "file_path": "sphinx/util/rst.py"
          },
          {
            "rank": 0,
            "tokens": 70,
            "span_id": "sphinx_domains.directive",
            "file_path": "sphinx/util/docutils.py"
          },
          {
            "rank": 0,
            "tokens": 71,
            "span_id": "sphinx_domains.role",
            "file_path": "sphinx/util/docutils.py"
          },
          {
            "rank": 1,
            "tokens": 31,
            "span_id": "sphinx_domains",
            "file_path": "sphinx/util/docutils.py"
          },
          {
            "rank": 1,
            "tokens": 211,
            "span_id": "sphinx_domains.lookup_domain_element",
            "file_path": "sphinx/util/docutils.py"
          },
          {
            "rank": 2,
            "tokens": 31,
            "span_id": "CustomReSTDispatcher.__exit__",
            "file_path": "sphinx/util/docutils.py"
          },
          {
            "rank": 2,
            "tokens": 12,
            "span_id": "CustomReSTDispatcher.__enter__",
            "file_path": "sphinx/util/docutils.py"
          },
          {
            "rank": 0,
            "tokens": 118,
            "span_id": "ReSTDomain.resolve_xref",
            "file_path": "sphinx/domains/rst.py"
          },
          {
            "rank": 1,
            "tokens": 1205,
            "span_id": "CPPDomain._resolve_xref_inner",
            "file_path": "sphinx/domains/cpp.py"
          },
          {
            "rank": 1,
            "tokens": 58,
            "span_id": "CPPDomain.process_doc",
            "file_path": "sphinx/domains/cpp.py"
          },
          {
            "rank": 1,
            "tokens": 693,
            "span_id": "CPPDomain",
            "file_path": "sphinx/domains/cpp.py"
          },
          {
            "rank": 1,
            "tokens": 133,
            "span_id": "CPPDomain.clear_doc",
            "file_path": "sphinx/domains/cpp.py"
          },
          {
            "rank": 1,
            "tokens": 188,
            "span_id": "CPPDomain.merge_domaindata",
            "file_path": "sphinx/domains/cpp.py"
          },
          {
            "rank": 0,
            "tokens": 151,
            "span_id": "RSTParser.parse",
            "file_path": "sphinx/parsers.py"
          },
          {
            "rank": 0,
            "tokens": 21,
            "span_id": "RSTParser",
            "file_path": "sphinx/parsers.py"
          },
          {
            "rank": 0,
            "tokens": 45,
            "span_id": "RSTParser.decorate",
            "file_path": "sphinx/parsers.py"
          },
          {
            "rank": 0,
            "tokens": 62,
            "span_id": "RSTParser.get_transforms",
            "file_path": "sphinx/parsers.py"
          },
          {
            "rank": 0,
            "tokens": 146,
            "span_id": "check_root_doc",
            "file_path": "sphinx/config.py"
          },
          {
            "rank": 0,
            "tokens": 58,
            "span_id": "check_primary_domain",
            "file_path": "sphinx/config.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue involves the behavior of Sphinx when `rst_prolog` is set and a document contains a top-level heading with a domain directive (e.g., `:mod:`). The issue is that the heading does not render correctly or gets excluded from the toctree. Reviewing the search results, I identified code spans from different files that are relevant to this issue: 1. `sphinx/util/rst.py`: Functions `prepend_prolog` and `append_epilog` are used to manipulate the prolog and epilog text, which could affect how the content is processed. 2. `sphinx/util/docutils.py`: The `CustomReSTDispatcher` class and its methods, particularly the `directive` and `role` methods in the `sphinx_domains` class, are relevant as they handle directives and roles. 3. `sphinx/domains/rst.py`: The `ReSTDomain` class, which includes processing for reStructuredText domains, is relevant, especially its `resolve_xref` method. 4. `sphinx/domains/cpp.py`: The `CPPDomain` class and its methods handle C++ domain-specific directives and roles, which might interact with the general domain handling. 5. `sphinx/parsers.py`: The `RSTParser` class and its methods, particularly `parse` and `decorate`, which handle the parsing of reStructuredText input, are relevant. 6. `sphinx/config.py`: While less directly related, the `check_primary_domain` function handles configuration checks, which might indirectly affect domain handling if misconfigured. Based on these findings, I have selected specific code spans that are most relevant to the described issue, focusing on those that directly deal with prolog/epilog handling, domain-specific directive processing, and parsing of reStructuredText content.",
            "identified_spans": [
              {
                "span_ids": [
                  "prepend_prolog",
                  "append_epilog"
                ],
                "file_path": "sphinx/util/rst.py"
              },
              {
                "span_ids": [
                  "sphinx_domains",
                  "sphinx_domains.directive",
                  "sphinx_domains.role"
                ],
                "file_path": "sphinx/util/docutils.py"
              },
              {
                "span_ids": [
                  "ReSTDomain",
                  "ReSTDomain.resolve_xref"
                ],
                "file_path": "sphinx/domains/rst.py"
              },
              {
                "span_ids": [
                  "RSTParser",
                  "RSTParser.parse",
                  "RSTParser.decorate"
                ],
                "file_path": "sphinx/parsers.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 6506,
          "output_tokens": 633,
          "retry_message": null,
          "completion_cost": 0.029013
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "relevant": true,
            "scratch_pad": "Analysis of the file context reveals several key components related to handling reStructuredText (reST) parsing and the role of 'rst_prolog'. The functions 'prepend_prolog' and 'append_epilog' in 'sphinx/util/rst.py' indicate how prolog and epilog content are added to the reST content before parsing. Further, the 'CustomReSTDispatcher', 'sphinx_domains', 'ReSTMarkup', and 'ReSTDomain' classes in 'sphinx/util/docutils.py' and 'sphinx/domains/rst.py' demonstrate the integration and handling of reST domain directives and roles. Additionally, the 'RSTParser' class in 'sphinx/parsers.py' shows the parsing process where 'rst_prolog' and 'rst_epilog' are used. These components encapsulate the handling of reST content, including domain directives, which aligns with the reported issue. Therefore, the relevant file context seems comprehensive enough to address the issue concerning 'rst_prolog' affecting domain directive headings.",
            "search_suggestions": null
          },
          "output": {},
          "input_tokens": 3589,
          "output_tokens": 258,
          "retry_message": null,
          "completion_cost": 0.014637
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "prepend_prolog",
            "file_path": "sphinx/util/rst.py",
            "scratch_pad": "The issue seems to be related to how the `rst_prolog` interacts with headings containing domain directives. The current implementation of `prepend_prolog` might be interfering with the normal parsing of these headings. We need to identify if there's a way to preserve the headings while still applying the prolog correctly.",
            "instructions": "Modify the `prepend_prolog` function to ensure that top-level headings containing domain directives are not affected by the prolog insertion. This might involve checking for domain directives before inserting the prolog."
          },
          "output": {
            "span_id": "prepend_prolog",
            "end_line": 97,
            "file_path": "sphinx/util/rst.py",
            "start_line": 78,
            "instructions": "Modify the `prepend_prolog` function to ensure that top-level headings containing domain directives are not affected by the prolog insertion. This might involve checking for domain directives before inserting the prolog."
          },
          "input_tokens": 4129,
          "output_tokens": 165,
          "retry_message": null,
          "completion_cost": 0.014862
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "prepend_prolog",
        "end_line": 97,
        "file_path": "sphinx/util/rst.py",
        "max_tokens": 1000,
        "start_line": 78,
        "temperature": 1.6,
        "instructions": "Modify the `prepend_prolog` function to ensure that top-level headings containing domain directives are not affected by the prolog insertion. This might involve checking for domain directives before inserting the prolog.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "<replace>\ndef prepend_prolog(content: StringList, prolog: str) -> None:\n    \"\"\"Prepend a string to content body as prolog.\"\"\"\n    if prolog:\n        pos = 0\n        domain_directive = False\n        for line in content:\n            if docinfo_re.match(line):\n                pos += 1\n            elif line.strip().startswith(':') and ':`' in line:\n                domain_directive = True\n                break\n            else:\n                break\n\n        if pos > 0 and not domain_directive:\n            # insert a blank line after docinfo\n            content.insert(pos, '', '<generated>', 0)\n            pos += 1\n\n        # insert prolog (after docinfo if exists and no domain directive)\n        if not domain_directive:\n            for lineno, line in enumerate(prolog.splitlines()):\n                content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n\n            content.insert(pos + lineno + 1, '', '<generated>', 0)\n</replace>"
          },
          "output": {
            "diff": "--- sphinx/util/rst.py\n+++ sphinx/util/rst.py\n@@ -79,22 +79,27 @@\n     \"\"\"Prepend a string to content body as prolog.\"\"\"\n     if prolog:\n         pos = 0\n+        domain_directive = False\n         for line in content:\n             if docinfo_re.match(line):\n                 pos += 1\n+            elif line.strip().startswith(':') and ':`' in line:\n+                domain_directive = True\n+                break\n             else:\n                 break\n \n-        if pos > 0:\n+        if pos > 0 and not domain_directive:\n             # insert a blank line after docinfo\n             content.insert(pos, '', '<generated>', 0)\n             pos += 1\n \n-        # insert prolog (after docinfo if exists)\n-        for lineno, line in enumerate(prolog.splitlines()):\n-            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n+        # insert prolog (after docinfo if exists and no domain directive)\n+        if not domain_directive:\n+            for lineno, line in enumerate(prolog.splitlines()):\n+                content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n \n-        content.insert(pos + lineno + 1, '', '<generated>', 0)\n+            content.insert(pos + lineno + 1, '', '<generated>', 0)\n \n \n def append_epilog(content: StringList, epilog: str) -> None:\n",
            "message": "Applied the change to sphinx/util/rst.py.",
            "verification_errors": []
          },
          "input_tokens": 3920,
          "output_tokens": 251,
          "retry_message": null,
          "completion_cost": 0.015525
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- sphinx/util/rst.py\n+++ sphinx/util/rst.py\n@@ -79,22 +79,27 @@\n     \"\"\"Prepend a string to content body as prolog.\"\"\"\n     if prolog:\n         pos = 0\n+        domain_directive = False\n         for line in content:\n             if docinfo_re.match(line):\n                 pos += 1\n+            elif line.strip().startswith(':') and ':`' in line:\n+                domain_directive = True\n+                break\n             else:\n                 break\n \n-        if pos > 0:\n+        if pos > 0 and not domain_directive:\n             # insert a blank line after docinfo\n             content.insert(pos, '', '<generated>', 0)\n             pos += 1\n \n-        # insert prolog (after docinfo if exists)\n-        for lineno, line in enumerate(prolog.splitlines()):\n-            content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n+        # insert prolog (after docinfo if exists and no domain directive)\n+        if not domain_directive:\n+            for lineno, line in enumerate(prolog.splitlines()):\n+                content.insert(pos + lineno, line, '<rst_prolog>', lineno)\n \n-        content.insert(pos + lineno + 1, '', '<generated>', 0)\n+            content.insert(pos + lineno + 1, '', '<generated>', 0)\n \n \n def append_epilog(content: StringList, epilog: str) -> None:\n",
        "model": "deepseek-coder",
        "message": "Applied the change to sphinx/util/rst.py.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "finish",
            "finish": "The issue has been addressed by ensuring that the prolog is not prepended when the content starts with a domain directive. This should resolve the problem for all affected documents.",
            "reject": null,
            "span_id": null,
            "file_path": null,
            "scratch_pad": "The change has been applied to the `prepend_prolog` function ensuring that top-level headings containing domain directives are not affected by the prolog insertion. This should resolve the issue where such headings were not rendering correctly or being included in the toctree when `rst_prolog` was set.",
            "instructions": null
          },
          "output": {
            "message": "The issue has been addressed by ensuring that the prolog is not prepended when the content starts with a domain directive. This should resolve the problem for all affected documents."
          },
          "input_tokens": 4766,
          "output_tokens": 157,
          "retry_message": null,
          "completion_cost": 0.016653
        }
      ]
    },
    {
      "name": "Finished",
      "state": {
        "model": "gpt-4o",
        "output": {
          "model": "deepseek-coder",
          "temperature": 1.6
        },
        "message": "The issue has been addressed by ensuring that the prolog is not prepended when the content starts with a domain directive. This should resolve the problem for all affected documents.",
        "max_tokens": 1000,
        "temperature": 0.0,
        "max_iterations": null,
        "include_message_history": false
      },
      "actions": []
    }
  ],
  "initial_message": "Using rst_prolog removes top level headings containing a domain directive\n### Describe the bug\r\n\r\nIf `rst_prolog` is set, then any documents that contain a domain directive as the first heading (eg `:mod:`) do not render the heading correctly or include the heading in the toctree.\r\n\r\nIn the example below, if the heading of `docs/mypackage.rst` were `mypackage2` instead of `:mod:mypackage2` then the heading displays correctly.\r\nSimilarly, if you do not set `rst_prolog` then the heading will display correctly.\r\n\r\nThis appears to have been broken for some time because I can reproduce it in v4.0.0 of Sphinx\r\n\r\n### How to Reproduce\r\n\r\n```bash\r\n$ sphinx-quickstart --no-sep --project mypackage --author me -v 0.1.0 --release 0.1.0 --language en docs\r\n$ echo -e 'Welcome\\n=======\\n\\n.. toctree::\\n\\n   mypackage\\n' > docs/index.rst\r\n$ echo -e ':mod:`mypackage2`\\n=================\\n\\nContent\\n\\nSubheading\\n----------\\n' > docs/mypackage.rst\r\n$ echo -e 'rst_prolog = \"\"\"\\n.. |psf| replace:: Python Software Foundation\\n\"\"\"\\n' >> docs/conf.py\r\n$ sphinx-build -b html . _build\r\n$ grep 'mypackage2' docs/_build/index.html\r\n```\r\n\r\n`docs/index.rst`:\r\n\r\n```rst\r\nWelcome\r\n=======\r\n\r\n.. toctree::\r\n\r\n   mypackage\r\n```\r\n\r\n`docs/mypackage.rst`:\r\n\r\n```rst\r\n:mod:`mypackage2`\r\n=================\r\n\r\nContent\r\n\r\nSubheading\r\n----------\r\n```\r\n\r\n### Environment Information\r\n\r\n```text\r\nPlatform:              linux; (Linux-6.3.2-arch1-1-x86_64-with-glibc2.37)\r\nPython version:        3.11.3 (main, Apr  5 2023, 15:52:25) [GCC 12.2.1 20230201])\r\nPython implementation: CPython\r\nSphinx version:        7.1.0+/d3c91f951\r\nDocutils version:      0.20.1\r\nJinja2 version:        3.1.2\r\nPygments version:      2.15.1\r\n```\r\n\r\n\r\n### Sphinx extensions\r\n\r\n```python\r\n[]\r\n```\r\n\r\n\r\n### Additional context\r\n\r\n_No response_\n"
}