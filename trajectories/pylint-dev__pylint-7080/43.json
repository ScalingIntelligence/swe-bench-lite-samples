{
  "info": {
    "error": "Traceback (most recent call last):\n  File \"/workspace/moatless/moatless-tools/driver/run_moatless.py\", line 89, in run_moatless_core\n    response = loop.run(problem_statement)\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/workspace/moatless/moatless-tools/moatless/loop.py\", line 198, in run\n    raise RuntimeError(\nRuntimeError: The loop was aborted because the cost exceeded the limit.\n",
    "duration": 258.615816116333,
    "submission": "diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py\nindex e2bbf061e..9a12c457e 100644\n--- a/pylint/lint/pylinter.py\n+++ b/pylint/lint/pylinter.py\n@@ -698,45 +698,50 @@ class PyLinter(\n                         symbol = \"fatal\"\n                         self.add_message(symbol, args=msg)\n \n-    def _check_file(\n-        self,\n-        get_ast: GetAstProtocol,\n-        check_astroid_module: Callable[[nodes.Module], bool | None],\n-        file: FileItem,\n-    ) -> None:\n-        \"\"\"Check a file using the passed utility functions (get_ast and\n-        check_astroid_module).\n-\n-        :param callable get_ast: callable returning AST from defined file taking the following arguments\n-        - filepath: path to the file to check\n-        - name: Python module name\n-        :param callable check_astroid_module: callable checking an AST taking the following arguments\n-        - ast: AST of the module\n-        :param FileItem file: data about the file\n-        :raises AstroidError: for any failures stemming from astroid\n-        \"\"\"\n-        self.set_current_module(file.name, file.filepath)\n-        # get the module representation\n-        ast_node = get_ast(file.filepath, file.name)\n-        if ast_node is None:\n-            return\n+def _check_file(\n+    self,\n+    get_ast: GetAstProtocol,\n+    check_astroid_module: Callable[[nodes.Module], bool | None],\n+    file: FileItem,\n+) -> None:\n+    \"\"\"Check a file using the passed utility functions (get_ast and\n+    check_astroid_module).\n+\n+    :param callable get_ast: callable returning AST from defined file taking the following arguments\n+    - filepath: path to the file to check\n+    - name: Python module name\n+    :param callable check_astroid_module: callable checking an AST taking the following arguments\n+    - ast: AST of the module\n+    :param FileItem file: data about the file\n+    :raises AstroidError: for any failures stemming from astroid\n+    \"\"\"\n+    self.set_current_module(file.name, file.filepath)\n+    # get the module representation\n+    ast_node = get_ast(file.filepath, file.name)\n+    if ast_node is None:\n+        return\n \n-        self._ignore_file = False\n+    self._ignore_file = False\n \n-        self.file_state = FileState(file.modpath, self.msgs_store, ast_node)\n-        # fix the current file (if the source file was not available or\n-        # if it's actually a c extension)\n-        self.current_file = ast_node.file\n-        try:\n-            check_astroid_module(ast_node)\n-        except Exception as e:  # pragma: no cover\n-            raise astroid.AstroidError from e\n-        # warn about spurious inline messages handling\n-        spurious_messages = self.file_state.iter_spurious_suppression_messages(\n-            self.msgs_store\n-        )\n-        for msgid, line, args in spurious_messages:\n-            self.add_message(msgid, line, None, args)\n+    if self._is_ignored_file(file.filepath):\n+        self._ignore_file = True\n+        if self.config.recursive:\n+            return\n+\n+    self.file_state = FileState(file.modpath, self.msgs_store, ast_node)\n+    # fix the current file (if the source file was not available or\n+    # if it's actually a c extension)\n+    self.current_file = ast_node.file\n+    try:\n+        check_astroid_module(ast_node)\n+    except Exception as e:  # pragma: no cover\n+        raise astroid.AstroidError from e\n+    # warn about spurious inline messages handling\n+    spurious_messages = self.file_state.iter_spurious_suppression_messages(\n+        self.msgs_store\n+    )\n+    for msgid, line, args in spurious_messages:\n+        self.add_message(msgid, line, None, args)\n \n     @staticmethod\n     def _get_file_descr_from_stdin(filepath: str) -> FileItem:\n",
    "total_cost": 0.519048,
    "instance_id": "pylint-dev__pylint-7080",
    "evaluation_name": "run_on_remaining_250_for_july_4_t_1.6"
  },
  "name": "AgenticLoop",
  "transitions": [
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "scratch_pad": "The issue suggests that the `ignore-paths` configuration in `pyproject.toml` is not working as expected when the `--recursive=y` flag is used with pylint. To debug this, we need to locate the part of the code responsible for handling the `ignore-paths` configuration and the recursive flag.",
            "search_requests": [
              {
                "query": "ignore-paths configuration",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pylint/**/*.py",
                "function_names": []
              },
              {
                "query": "recursive flag handling",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pylint/**/*.py",
                "function_names": []
              }
            ]
          },
          "output": {
            "complete": false,
            "ranked_spans": [
              {
                "rank": 0,
                "tokens": 82,
                "span_id": "docstring",
                "file_path": "pylint/__main__.py"
              },
              {
                "rank": 1,
                "tokens": 116,
                "span_id": "docstring",
                "file_path": "pylint/config/_pylint_config/__init__.py"
              },
              {
                "rank": 2,
                "tokens": 99,
                "span_id": "docstring",
                "file_path": "pylint/config/environment_variable.py"
              },
              {
                "rank": 3,
                "tokens": 1105,
                "span_id": "impl:5",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 6,
                "tokens": 7,
                "span_id": "GetAstProtocol",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 6,
                "tokens": 31,
                "span_id": "GetAstProtocol.__call__",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 6,
                "tokens": 431,
                "span_id": "docstring",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 6,
                "tokens": 59,
                "span_id": "_read_stdin",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 6,
                "tokens": 111,
                "span_id": "_load_reporter_by_class",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 4,
                "tokens": 218,
                "span_id": "docstring",
                "file_path": "pylint/lint/run.py"
              },
              {
                "rank": 5,
                "tokens": 224,
                "span_id": "docstring",
                "file_path": "pylint/lint/base_options.py"
              },
              {
                "rank": 5,
                "tokens": 2571,
                "span_id": "_make_linter_options",
                "file_path": "pylint/lint/base_options.py"
              },
              {
                "rank": 7,
                "tokens": 144,
                "span_id": "docstring",
                "file_path": "pylint/config/find_default_config_files.py"
              },
              {
                "rank": 0,
                "tokens": 82,
                "span_id": "docstring",
                "file_path": "pylint/__main__.py"
              },
              {
                "rank": 1,
                "tokens": 224,
                "span_id": "docstring",
                "file_path": "pylint/lint/base_options.py"
              },
              {
                "rank": 1,
                "tokens": 2571,
                "span_id": "_make_linter_options",
                "file_path": "pylint/lint/base_options.py"
              },
              {
                "rank": 2,
                "tokens": 303,
                "span_id": "docstring",
                "file_path": "pylint/lint/__init__.py"
              },
              {
                "rank": 3,
                "tokens": 202,
                "span_id": "PyLinter._discover_files",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 7,
                "tokens": 7,
                "span_id": "GetAstProtocol",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 7,
                "tokens": 31,
                "span_id": "GetAstProtocol.__call__",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 7,
                "tokens": 431,
                "span_id": "docstring",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 7,
                "tokens": 59,
                "span_id": "_read_stdin",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "rank": 4,
                "tokens": 218,
                "span_id": "docstring",
                "file_path": "pylint/lint/run.py"
              },
              {
                "rank": 5,
                "tokens": 99,
                "span_id": "Run",
                "file_path": "pylint/epylint.py"
              },
              {
                "rank": 5,
                "tokens": 11,
                "span_id": "impl:3",
                "file_path": "pylint/epylint.py"
              },
              {
                "rank": 6,
                "tokens": 492,
                "span_id": "lint",
                "file_path": "pylint/epylint.py"
              }
            ],
            "search_requests": [
              {
                "query": "ignore-paths configuration",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pylint/**/*.py",
                "function_names": []
              },
              {
                "query": "recursive flag handling",
                "class_names": [],
                "code_snippet": null,
                "file_pattern": "**/pylint/**/*.py",
                "function_names": []
              }
            ]
          },
          "input_tokens": 12075,
          "output_tokens": 157,
          "retry_message": null,
          "completion_cost": 0.03858
        }
      ]
    },
    {
      "name": "IdentifyCode",
      "state": {
        "model": "deepseek-coder",
        "query": null,
        "class_name": null,
        "max_tokens": 1000,
        "temperature": 1.6,
        "code_snippet": null,
        "file_pattern": null,
        "ranked_spans": [
          {
            "rank": 0,
            "tokens": 82,
            "span_id": "docstring",
            "file_path": "pylint/__main__.py"
          },
          {
            "rank": 0,
            "tokens": 82,
            "span_id": "docstring",
            "file_path": "pylint/__main__.py"
          },
          {
            "rank": 1,
            "tokens": 116,
            "span_id": "docstring",
            "file_path": "pylint/config/_pylint_config/__init__.py"
          },
          {
            "rank": 1,
            "tokens": 224,
            "span_id": "docstring",
            "file_path": "pylint/lint/base_options.py"
          },
          {
            "rank": 1,
            "tokens": 2571,
            "span_id": "_make_linter_options",
            "file_path": "pylint/lint/base_options.py"
          },
          {
            "rank": 2,
            "tokens": 99,
            "span_id": "docstring",
            "file_path": "pylint/config/environment_variable.py"
          },
          {
            "rank": 2,
            "tokens": 303,
            "span_id": "docstring",
            "file_path": "pylint/lint/__init__.py"
          },
          {
            "rank": 3,
            "tokens": 1105,
            "span_id": "impl:5",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 3,
            "tokens": 202,
            "span_id": "PyLinter._discover_files",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 4,
            "tokens": 218,
            "span_id": "docstring",
            "file_path": "pylint/lint/run.py"
          },
          {
            "rank": 4,
            "tokens": 218,
            "span_id": "docstring",
            "file_path": "pylint/lint/run.py"
          },
          {
            "rank": 5,
            "tokens": 224,
            "span_id": "docstring",
            "file_path": "pylint/lint/base_options.py"
          },
          {
            "rank": 5,
            "tokens": 2571,
            "span_id": "_make_linter_options",
            "file_path": "pylint/lint/base_options.py"
          },
          {
            "rank": 5,
            "tokens": 99,
            "span_id": "Run",
            "file_path": "pylint/epylint.py"
          },
          {
            "rank": 5,
            "tokens": 11,
            "span_id": "impl:3",
            "file_path": "pylint/epylint.py"
          },
          {
            "rank": 6,
            "tokens": 7,
            "span_id": "GetAstProtocol",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 6,
            "tokens": 31,
            "span_id": "GetAstProtocol.__call__",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 6,
            "tokens": 431,
            "span_id": "docstring",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 6,
            "tokens": 59,
            "span_id": "_read_stdin",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 6,
            "tokens": 111,
            "span_id": "_load_reporter_by_class",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 6,
            "tokens": 492,
            "span_id": "lint",
            "file_path": "pylint/epylint.py"
          },
          {
            "rank": 7,
            "tokens": 144,
            "span_id": "docstring",
            "file_path": "pylint/config/find_default_config_files.py"
          },
          {
            "rank": 7,
            "tokens": 7,
            "span_id": "GetAstProtocol",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 7,
            "tokens": 31,
            "span_id": "GetAstProtocol.__call__",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 7,
            "tokens": 431,
            "span_id": "docstring",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "rank": 7,
            "tokens": 59,
            "span_id": "_read_stdin",
            "file_path": "pylint/lint/pylinter.py"
          }
        ],
        "function_name": null,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false
      },
      "actions": [
        {
          "action": {
            "scratch_pad": "The reported issue states that when running pylint recursively with the `--recursive=y` flag, the `ignore-paths` configuration in `pyproject.toml` is ignored. This suggests a need to inspect the code responsible for handling the `--recursive` flag and the `ignore-paths` configuration.\n\nReviewing the search results, the most relevant file appears to be `pylint/lint/pylinter.py`, specifically the `_discover_files` method. This method is responsible for discovering files to be checked by pylint, which involves handling the `--recursive` flag and potentially the `ignore-paths` configuration. The method checks if directories should be skipped based on the `ignore-paths` configuration. This section of the code seems directly relevant to the reported issue.\n\nOther files in the search results, such as `pylint/__main__.py`, `pylint/config/_pylint_config/__init__.py`, and `pylint/lint/__init__.py`, are related to the initialization and setup of pylint but may not directly address the specific issue involving the interaction of `--recursive` and `ignore-paths`.\n\nBased on the analysis, the `_discover_files` method in `pylint/lint/pylinter.py` should be considered relevant to the reported issue as it handles file discovery and potentially the `ignore-paths` configuration.",
            "identified_spans": [
              {
                "span_ids": [
                  "docstring",
                  "GetAstProtocol",
                  "_read_stdin",
                  "_load_reporter_by_class",
                  "impl:5",
                  "PyLinter"
                ],
                "file_path": "pylint/lint/pylinter.py"
              }
            ]
          },
          "output": {},
          "input_tokens": 12412,
          "output_tokens": 406,
          "retry_message": null,
          "completion_cost": 0.043325999999999996
        }
      ]
    },
    {
      "name": "DecideRelevance",
      "state": {
        "model": "deepseek-coder",
        "max_tokens": 1000,
        "temperature": 1.6,
        "expand_context": true,
        "max_iterations": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": false,
        "finish_after_relevant_count": 2
      },
      "actions": [
        {
          "action": {
            "complete": false,
            "relevant": true,
            "scratch_pad": "The code provided in the file context relates to the PyLinter class used by pylint for analyzing Python code. It includes methods like `check`, `_check_files`, and `get_ast`, which are essential for the linting process. However, the specific logic for handling the `--recursive` flag and `ignore-paths` configuration is not directly evident in the provided code snippet. This absence makes it challenging to determine if the code related to the reported issue is present without further investigation into other parts of the pylint codebase or configuration handling. Therefore, additional code snippets or a deeper dive into the configuration management section of pylint may be necessary to conclusively answer whether the provided file context is complete for addressing the issue.",
            "search_suggestions": "Look for methods or logic related to handling the --recursive flag and the ignore-paths configuration in pylint. The logic might be found in methods responsible for parsing configurations, managing module imports, or deciding which files to lint based on given options."
          },
          "output": {
            "message": "Look for methods or logic related to handling the --recursive flag and the ignore-paths configuration in pylint. The logic might be found in methods responsible for parsing configurations, managing module imports, or deciding which files to lint based on given options."
          },
          "input_tokens": 14099,
          "output_tokens": 233,
          "retry_message": null,
          "completion_cost": 0.045792
        }
      ]
    },
    {
      "name": "SearchCode",
      "state": {
        "model": "deepseek-coder",
        "message": "Look for methods or logic related to handling the --recursive flag and the ignore-paths configuration in pylint. The logic might be found in methods responsible for parsing configurations, managing module imports, or deciding which files to lint based on given options.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": null,
        "max_search_results": 25,
        "support_test_files": false,
        "initial_context_tokens": 4000,
        "initial_search_results": 50,
        "include_message_history": true,
        "provide_initial_context": true,
        "initial_context_spans_per_file": 5,
        "max_retries_with_any_file_context": 3
      },
      "actions": [
        {
          "action": {
            "complete": true,
            "scratch_pad": "The provided context from `pylint/lint/pylinter.py` shows relevant methods for handling the `--recursive` flag and possibly the `ignore-paths` configuration. The `check` method initializes the checking process and includes the handling for the `--recursive` flag within conditional logic (`if self.config.recursive:`). This suggests that the recursive functionality is tied to the `self.config.recursive` attribute. Additionally, within the `_check_file` method, the `self._ignore_file = False` line might be an entry point for understanding how file inclusion/exclusion is managed, potentially by referring to the `ignore-paths` configuration. Further exploration of these methods and related attributes in the `PyLinter` class could provide deeper insights into how the `ignore-paths` configuration is evaluated against the files to be linted.",
            "search_requests": []
          },
          "output": {
            "message": "The provided context from `pylint/lint/pylinter.py` shows relevant methods for handling the `--recursive` flag and possibly the `ignore-paths` configuration. The `check` method initializes the checking process and includes the handling for the `--recursive` flag within conditional logic (`if self.config.recursive:`). This suggests that the recursive functionality is tied to the `self.config.recursive` attribute. Additionally, within the `_check_file` method, the `self._ignore_file = False` line might be an entry point for understanding how file inclusion/exclusion is managed, potentially by referring to the `ignore-paths` configuration. Further exploration of these methods and related attributes in the `PyLinter` class could provide deeper insights into how the `ignore-paths` configuration is evaluated against the files to be linted."
          },
          "input_tokens": 16436,
          "output_tokens": 207,
          "retry_message": null,
          "completion_cost": 0.052413
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": null,
        "model": "deepseek-coder",
        "message": "The provided context from `pylint/lint/pylinter.py` shows relevant methods for handling the `--recursive` flag and possibly the `ignore-paths` configuration. The `check` method initializes the checking process and includes the handling for the `--recursive` flag within conditional logic (`if self.config.recursive:`). This suggests that the recursive functionality is tied to the `self.config.recursive` attribute. Additionally, within the `_check_file` method, the `self._ignore_file = False` line might be an entry point for understanding how file inclusion/exclusion is managed, potentially by referring to the `ignore-paths` configuration. Further exploration of these methods and related attributes in the `PyLinter` class could provide deeper insights into how the `ignore-paths` configuration is evaluated against the files to be linted.",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": null,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "PyLinter._check_file",
            "file_path": "pylint/lint/pylinter.py",
            "scratch_pad": "The reported issue indicates that when using the `--recursive=y` flag, the `ignore-paths` configuration in `pyproject.toml` is not being respected. The relevant code spans in `pylinter.py` involve methods like `check`, `_check_file`, and `get_ast`, which handle the linting process, including recursive checking and file exclusion logic. To fix this, we need to ensure that the `ignore-paths` configuration is correctly applied even when the recursive option is enabled. The method `_check_file` initializes `self._ignore_file = False`, which might be an entry point to integrate the `ignore-paths` logic.",
            "instructions": "Integrate the `ignore-paths` configuration check in the `_check_file` method, ensuring it applies correctly whether the `--recursive` flag is set or not. Specifically, after setting `self._ignore_file = False`, add a check to see if the file should be ignored based on the `ignore-paths` configuration."
          },
          "output": {
            "span_id": "PyLinter._check_file",
            "end_line": 739,
            "file_path": "pylint/lint/pylinter.py",
            "start_line": 701,
            "instructions": "Integrate the `ignore-paths` configuration check in the `_check_file` method, ensuring it applies correctly whether the `--recursive` flag is set or not. Specifically, after setting `self._ignore_file = False`, add a check to see if the file should be ignored based on the `ignore-paths` configuration."
          },
          "input_tokens": 14626,
          "output_tokens": 277,
          "retry_message": null,
          "completion_cost": 0.048033
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "PyLinter._check_file",
        "end_line": 739,
        "file_path": "pylint/lint/pylinter.py",
        "max_tokens": 1000,
        "start_line": 701,
        "temperature": 1.6,
        "instructions": "Integrate the `ignore-paths` configuration check in the `_check_file` method, ensuring it applies correctly whether the `--recursive` flag is set or not. Specifically, after setting `self._ignore_file = False`, add a check to see if the file should be ignored based on the `ignore-paths` configuration.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```python\n<replace>\n    def _check_file(\n        self,\n        get_ast: GetAstProtocol,\n        check_astroid_module: Callable[[nodes.Module], bool | None],\n        file: FileItem,\n    ) -> None:\n        \"\"\"Check a file using the passed utility functions (get_ast and\n        check_astroid_module).\n\n        :param callable get_ast: callable returning AST from defined file taking the following arguments\n        - filepath: path to the file to check\n        - name: Python module name\n        :param callable check_astroid_module: callable checking an AST taking the following arguments\n        - ast: AST of the module\n        :param FileItem file: data about the file\n        :raises AstroidError: for any failures stemming from astroid\n        \"\"\"\n        self.set_current_module(file.name, file.filepath)\n        # get the module representation\n        ast_node = get_ast(file.filepath, file.name)\n        if ast_node is None:\n            return\n\n        self._ignore_file = False\n\n        if self._is_ignored_file(file.filepath):\n            self._ignore_file = True\n            return\n\n        self.file_state = FileState(file.modpath, self.msgs_store, ast_node)\n        # fix the current file (if the source file was not available or\n        # if it's actually a c extension)\n        self.current_file = ast_node.file\n        try:\n            check_astroid_module(ast_node)\n        except Exception as e:  # pragma: no cover\n            raise astroid.AstroidError from e\n        # warn about spurious inline messages handling\n        spurious_messages = self.file_state.iter_spurious_suppression_messages(\n            self.msgs_store\n        )\n        for msgid, line, args in spurious_messages:\n            self.add_message(msgid, line, None, args)\n</replace>"
          },
          "output": {
            "diff": "--- pylint/lint/pylinter.py\n+++ pylint/lint/pylinter.py\n@@ -722,6 +722,10 @@\n             return\n \n         self._ignore_file = False\n+\n+        if self._is_ignored_file(file.filepath):\n+            self._ignore_file = True\n+            return\n \n         self.file_state = FileState(file.modpath, self.msgs_store, ast_node)\n         # fix the current file (if the source file was not available or\n",
            "message": "Applied the change to pylint/lint/pylinter.py.\n\n<scratch_pad>\n```python\n</scratch_pad>",
            "verification_errors": [
              {
                "code": "E1101",
                "line": 726,
                "message": "Instance of 'PyLinter' has no '_is_ignored_file' member",
                "file_path": "pylint/lint/pylinter.py"
              }
            ]
          },
          "input_tokens": 15190,
          "output_tokens": 463,
          "retry_message": null,
          "completion_cost": 0.052515
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- pylint/lint/pylinter.py\n+++ pylint/lint/pylinter.py\n@@ -722,6 +722,10 @@\n             return\n \n         self._ignore_file = False\n+\n+        if self._is_ignored_file(file.filepath):\n+            self._ignore_file = True\n+            return\n \n         self.file_state = FileState(file.modpath, self.msgs_store, ast_node)\n         # fix the current file (if the source file was not available or\n",
        "model": "deepseek-coder",
        "message": "Applied the change to pylint/lint/pylinter.py.\n\n<scratch_pad>\n```python\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [
          {
            "code": "E1101",
            "line": 726,
            "message": "Instance of 'PyLinter' has no '_is_ignored_file' member",
            "file_path": "pylint/lint/pylinter.py"
          }
        ],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "PyLinter._check_file",
            "file_path": "pylint/lint/pylinter.py",
            "scratch_pad": "The introduced lint error indicates that the `PyLinter` class does not have a `_is_ignored_file` member. This suggests that the method or function `_is_ignored_file` is not defined within the `PyLinter` class or not properly referenced. To resolve this, we need to ensure that `_is_ignored_file` is correctly defined and accessible within the class scope.",
            "instructions": "Ensure that the `_is_ignored_file` function is properly defined and accessible within the `PyLinter` class. If `_is_ignored_file` is supposed to be a method, define it within the class. If it is a helper function, ensure it is imported or defined in the module scope where `PyLinter` is defined. Additionally, check the naming to ensure consistency and the correct usage of 'self' if it is a class method."
          },
          "output": {
            "span_id": "PyLinter._check_file",
            "end_line": 743,
            "file_path": "pylint/lint/pylinter.py",
            "start_line": 701,
            "instructions": "Ensure that the `_is_ignored_file` function is properly defined and accessible within the `PyLinter` class. If `_is_ignored_file` is supposed to be a method, define it within the class. If it is a helper function, ensure it is imported or defined in the module scope where `PyLinter` is defined. Additionally, check the naming to ensure consistency and the correct usage of 'self' if it is a class method."
          },
          "input_tokens": 15178,
          "output_tokens": 251,
          "retry_message": null,
          "completion_cost": 0.049298999999999996
        }
      ]
    },
    {
      "name": "EditCode",
      "state": {
        "model": "deepseek-coder",
        "verify": true,
        "span_id": "PyLinter._check_file",
        "end_line": 743,
        "file_path": "pylint/lint/pylinter.py",
        "max_tokens": 1000,
        "start_line": 701,
        "temperature": 1.6,
        "instructions": "Ensure that the `_is_ignored_file` function is properly defined and accessible within the `PyLinter` class. If `_is_ignored_file` is supposed to be a method, define it within the class. If it is a helper function, ensure it is imported or defined in the module scope where `PyLinter` is defined. Additionally, check the naming to ensure consistency and the correct usage of 'self' if it is a class method.",
        "max_iterations": 8,
        "chain_of_thought": false,
        "show_file_context": true,
        "show_initial_message": true,
        "max_prompt_file_tokens": 4000,
        "include_message_history": true
      },
      "actions": [
        {
          "action": {
            "content": "```\n<replace>\ndef _check_file(\n    self,\n    get_ast: GetAstProtocol,\n    check_astroid_module: Callable[[nodes.Module], bool | None],\n    file: FileItem,\n) -> None:\n    \"\"\"Check a file using the passed utility functions (get_ast and\n    check_astroid_module).\n\n    :param callable get_ast: callable returning AST from defined file taking the following arguments\n    - filepath: path to the file to check\n    - name: Python module name\n    :param callable check_astroid_module: callable checking an AST taking the following arguments\n    - ast: AST of the module\n    :param FileItem file: data about the file\n    :raises AstroidError: for any failures stemming from astroid\n    \"\"\"\n    self.set_current_module(file.name, file.filepath)\n    # get the module representation\n    ast_node = get_ast(file.filepath, file.name)\n    if ast_node is None:\n        return\n\n    self._ignore_file = False\n\n    if self._is_ignored_file(file.filepath):\n        self._ignore_file = True\n        if self.config.recursive:\n            return\n\n    self.file_state = FileState(file.modpath, self.msgs_store, ast_node)\n    # fix the current file (if the source file was not available or\n    # if it's actually a c extension)\n    self.current_file = ast_node.file\n    try:\n        check_astroid_module(ast_node)\n    except Exception as e:  # pragma: no cover\n        raise astroid.AstroidError from e\n    # warn about spurious inline messages handling\n    spurious_messages = self.file_state.iter_spurious_suppression_messages(\n        self.msgs_store\n    )\n    for msgid, line, args in spurious_messages:\n        self.add_message(msgid, line, None, args)\n</replace>"
          },
          "output": {
            "diff": "--- pylint/lint/pylinter.py\n+++ pylint/lint/pylinter.py\n@@ -698,49 +698,50 @@\n                         symbol = \"fatal\"\n                         self.add_message(symbol, args=msg)\n \n-    def _check_file(\n-        self,\n-        get_ast: GetAstProtocol,\n-        check_astroid_module: Callable[[nodes.Module], bool | None],\n-        file: FileItem,\n-    ) -> None:\n-        \"\"\"Check a file using the passed utility functions (get_ast and\n-        check_astroid_module).\n-\n-        :param callable get_ast: callable returning AST from defined file taking the following arguments\n-        - filepath: path to the file to check\n-        - name: Python module name\n-        :param callable check_astroid_module: callable checking an AST taking the following arguments\n-        - ast: AST of the module\n-        :param FileItem file: data about the file\n-        :raises AstroidError: for any failures stemming from astroid\n-        \"\"\"\n-        self.set_current_module(file.name, file.filepath)\n-        # get the module representation\n-        ast_node = get_ast(file.filepath, file.name)\n-        if ast_node is None:\n+def _check_file(\n+    self,\n+    get_ast: GetAstProtocol,\n+    check_astroid_module: Callable[[nodes.Module], bool | None],\n+    file: FileItem,\n+) -> None:\n+    \"\"\"Check a file using the passed utility functions (get_ast and\n+    check_astroid_module).\n+\n+    :param callable get_ast: callable returning AST from defined file taking the following arguments\n+    - filepath: path to the file to check\n+    - name: Python module name\n+    :param callable check_astroid_module: callable checking an AST taking the following arguments\n+    - ast: AST of the module\n+    :param FileItem file: data about the file\n+    :raises AstroidError: for any failures stemming from astroid\n+    \"\"\"\n+    self.set_current_module(file.name, file.filepath)\n+    # get the module representation\n+    ast_node = get_ast(file.filepath, file.name)\n+    if ast_node is None:\n+        return\n+\n+    self._ignore_file = False\n+\n+    if self._is_ignored_file(file.filepath):\n+        self._ignore_file = True\n+        if self.config.recursive:\n             return\n \n-        self._ignore_file = False\n-\n-        if self._is_ignored_file(file.filepath):\n-            self._ignore_file = True\n-            return\n-\n-        self.file_state = FileState(file.modpath, self.msgs_store, ast_node)\n-        # fix the current file (if the source file was not available or\n-        # if it's actually a c extension)\n-        self.current_file = ast_node.file\n-        try:\n-            check_astroid_module(ast_node)\n-        except Exception as e:  # pragma: no cover\n-            raise astroid.AstroidError from e\n-        # warn about spurious inline messages handling\n-        spurious_messages = self.file_state.iter_spurious_suppression_messages(\n-            self.msgs_store\n-        )\n-        for msgid, line, args in spurious_messages:\n-            self.add_message(msgid, line, None, args)\n+    self.file_state = FileState(file.modpath, self.msgs_store, ast_node)\n+    # fix the current file (if the source file was not available or\n+    # if it's actually a c extension)\n+    self.current_file = ast_node.file\n+    try:\n+        check_astroid_module(ast_node)\n+    except Exception as e:  # pragma: no cover\n+        raise astroid.AstroidError from e\n+    # warn about spurious inline messages handling\n+    spurious_messages = self.file_state.iter_spurious_suppression_messages(\n+        self.msgs_store\n+    )\n+    for msgid, line, args in spurious_messages:\n+        self.add_message(msgid, line, None, args)\n \n     @staticmethod\n     def _get_file_descr_from_stdin(filepath: str) -> FileItem:\n",
            "message": "Applied the change to pylint/lint/pylinter.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
            "verification_errors": [
              {
                "code": "E1101",
                "line": 645,
                "message": "Instance of 'PyLinter' has no 'get_ast' member",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "code": "E1101",
                "line": 646,
                "message": "Instance of 'PyLinter' has no '_get_file_descr_from_stdin' member",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "code": "E1101",
                "line": 651,
                "message": "Instance of 'PyLinter' has no 'get_ast' member",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "code": "E1101",
                "line": 651,
                "message": "Instance of 'PyLinter' has no '_iterate_file_descrs' member",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "code": "E1101",
                "line": 657,
                "message": "Instance of 'PyLinter' has no '_iterate_file_descrs' member",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "code": "E1101",
                "line": 676,
                "message": "Instance of 'PyLinter' has no '_astroid_module_checker' member",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "code": "E1101",
                "line": 677,
                "message": "Instance of 'PyLinter' has no '_check_file' member; maybe '_check_files'?",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "code": "E1101",
                "line": 677,
                "message": "Instance of 'PyLinter' has no 'get_ast' member",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "code": "E1101",
                "line": 685,
                "message": "Instance of 'PyLinter' has no '_astroid_module_checker' member",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "code": "E1101",
                "line": 688,
                "message": "Instance of 'PyLinter' has no '_check_file' member; maybe '_check_files'?",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "code": "E0102",
                "line": 903,
                "message": "function already defined line 703",
                "file_path": "pylint/lint/pylinter.py"
              },
              {
                "code": "E0102",
                "line": 942,
                "message": "function already defined line 704",
                "file_path": "pylint/lint/pylinter.py"
              }
            ]
          },
          "input_tokens": 15274,
          "output_tokens": 469,
          "retry_message": null,
          "completion_cost": 0.052857
        }
      ]
    },
    {
      "name": "PlanToCode",
      "state": {
        "diff": "--- pylint/lint/pylinter.py\n+++ pylint/lint/pylinter.py\n@@ -698,49 +698,50 @@\n                         symbol = \"fatal\"\n                         self.add_message(symbol, args=msg)\n \n-    def _check_file(\n-        self,\n-        get_ast: GetAstProtocol,\n-        check_astroid_module: Callable[[nodes.Module], bool | None],\n-        file: FileItem,\n-    ) -> None:\n-        \"\"\"Check a file using the passed utility functions (get_ast and\n-        check_astroid_module).\n-\n-        :param callable get_ast: callable returning AST from defined file taking the following arguments\n-        - filepath: path to the file to check\n-        - name: Python module name\n-        :param callable check_astroid_module: callable checking an AST taking the following arguments\n-        - ast: AST of the module\n-        :param FileItem file: data about the file\n-        :raises AstroidError: for any failures stemming from astroid\n-        \"\"\"\n-        self.set_current_module(file.name, file.filepath)\n-        # get the module representation\n-        ast_node = get_ast(file.filepath, file.name)\n-        if ast_node is None:\n+def _check_file(\n+    self,\n+    get_ast: GetAstProtocol,\n+    check_astroid_module: Callable[[nodes.Module], bool | None],\n+    file: FileItem,\n+) -> None:\n+    \"\"\"Check a file using the passed utility functions (get_ast and\n+    check_astroid_module).\n+\n+    :param callable get_ast: callable returning AST from defined file taking the following arguments\n+    - filepath: path to the file to check\n+    - name: Python module name\n+    :param callable check_astroid_module: callable checking an AST taking the following arguments\n+    - ast: AST of the module\n+    :param FileItem file: data about the file\n+    :raises AstroidError: for any failures stemming from astroid\n+    \"\"\"\n+    self.set_current_module(file.name, file.filepath)\n+    # get the module representation\n+    ast_node = get_ast(file.filepath, file.name)\n+    if ast_node is None:\n+        return\n+\n+    self._ignore_file = False\n+\n+    if self._is_ignored_file(file.filepath):\n+        self._ignore_file = True\n+        if self.config.recursive:\n             return\n \n-        self._ignore_file = False\n-\n-        if self._is_ignored_file(file.filepath):\n-            self._ignore_file = True\n-            return\n-\n-        self.file_state = FileState(file.modpath, self.msgs_store, ast_node)\n-        # fix the current file (if the source file was not available or\n-        # if it's actually a c extension)\n-        self.current_file = ast_node.file\n-        try:\n-            check_astroid_module(ast_node)\n-        except Exception as e:  # pragma: no cover\n-            raise astroid.AstroidError from e\n-        # warn about spurious inline messages handling\n-        spurious_messages = self.file_state.iter_spurious_suppression_messages(\n-            self.msgs_store\n-        )\n-        for msgid, line, args in spurious_messages:\n-            self.add_message(msgid, line, None, args)\n+    self.file_state = FileState(file.modpath, self.msgs_store, ast_node)\n+    # fix the current file (if the source file was not available or\n+    # if it's actually a c extension)\n+    self.current_file = ast_node.file\n+    try:\n+        check_astroid_module(ast_node)\n+    except Exception as e:  # pragma: no cover\n+        raise astroid.AstroidError from e\n+    # warn about spurious inline messages handling\n+    spurious_messages = self.file_state.iter_spurious_suppression_messages(\n+        self.msgs_store\n+    )\n+    for msgid, line, args in spurious_messages:\n+        self.add_message(msgid, line, None, args)\n \n     @staticmethod\n     def _get_file_descr_from_stdin(filepath: str) -> FileItem:\n",
        "model": "deepseek-coder",
        "message": "Applied the change to pylint/lint/pylinter.py.\n\n<scratch_pad>\n```\n</scratch_pad>",
        "max_tokens": 1000,
        "temperature": 1.6,
        "max_iterations": 8,
        "finish_on_review": false,
        "verification_errors": [
          {
            "code": "E1101",
            "line": 645,
            "message": "Instance of 'PyLinter' has no 'get_ast' member",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "code": "E1101",
            "line": 646,
            "message": "Instance of 'PyLinter' has no '_get_file_descr_from_stdin' member",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "code": "E1101",
            "line": 651,
            "message": "Instance of 'PyLinter' has no 'get_ast' member",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "code": "E1101",
            "line": 651,
            "message": "Instance of 'PyLinter' has no '_iterate_file_descrs' member",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "code": "E1101",
            "line": 657,
            "message": "Instance of 'PyLinter' has no '_iterate_file_descrs' member",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "code": "E1101",
            "line": 676,
            "message": "Instance of 'PyLinter' has no '_astroid_module_checker' member",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "code": "E1101",
            "line": 677,
            "message": "Instance of 'PyLinter' has no '_check_file' member; maybe '_check_files'?",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "code": "E1101",
            "line": 677,
            "message": "Instance of 'PyLinter' has no 'get_ast' member",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "code": "E1101",
            "line": 685,
            "message": "Instance of 'PyLinter' has no '_astroid_module_checker' member",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "code": "E1101",
            "line": 688,
            "message": "Instance of 'PyLinter' has no '_check_file' member; maybe '_check_files'?",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "code": "E0102",
            "line": 903,
            "message": "function already defined line 703",
            "file_path": "pylint/lint/pylinter.py"
          },
          {
            "code": "E0102",
            "line": 942,
            "message": "function already defined line 704",
            "file_path": "pylint/lint/pylinter.py"
          }
        ],
        "max_prompt_file_tokens": 4000,
        "include_message_history": true,
        "allow_hallucinated_spans": false,
        "max_tokens_in_edit_prompt": 500,
        "expand_context_with_related_spans": true
      },
      "actions": [
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "PyLinter._check_file",
            "file_path": "pylint/lint/pylinter.py",
            "scratch_pad": "The first introduced lint error indicates that the `PyLinter` class lacks a `_is_ignored_file` member. This suggests that the method or function `_is_ignored_file` was not defined within the `PyLinter` class. To resolve this, the method `_is_ignored_file` should be defined within the class scope. The subsequent errors indicate issues with missing members like `get_ast`, `_get_file_descr_from_stdin`, `_iterate_file_descrs`, `_astroid_module_checker`, and `_check_file`. These issues likely arose due to the redefinition of `_check_file` as a standalone function rather than a method of the `PyLinter` class. To fix this, `_check_file` should be restored as a method of the `PyLinter` class, ensuring all member references are correct and the method uses 'self' appropriately.",
            "instructions": "Convert `_check_file` back into a method of the `PyLinter` class and ensure all missing members like `_is_ignored_file`, `get_ast`, `_get_file_descr_from_stdin`, `_iterate_file_descrs`, `_astroid_module_checker`, and others, are properly defined and accessible within the class. Ensure that 'self' is correctly used wherever necessary to reference class members."
          },
          "output": null,
          "input_tokens": 20713,
          "output_tokens": 373,
          "retry_message": "Span not found: PyLinter._check_file. Available spans: docstring, impl:5, _read_stdin, _load_reporter_by_class, GetAstProtocol, PyLinter, PyLinter.__init__, PyLinter.check, PyLinter._load_reporter_by_name, PyLinter._check_files, _check_file",
          "completion_cost": 0.067734
        },
        {
          "action": {
            "action": "modify",
            "finish": null,
            "reject": null,
            "span_id": "_check_file",
            "file_path": "pylint/lint/pylinter.py",
            "scratch_pad": "The requested span 'PyLinter._check_file' was not found in the provided context. Instead, the span '_check_file' is available. Since '_check_file' was identified as a standalone function, this could be a mistake or an oversight when the code was refactored. To proceed, we should redefine '_check_file' as a method of the 'PyLinter' class. This involves moving the function inside the 'PyLinter' class definition and adjusting its signature to use 'self'. This change will also require updating all member references inside the method to use 'self' appropriately. Additionally, we should ensure that the '_is_ignored_file' method is defined within the 'PyLinter' class to resolve the initial lint error.",
            "instructions": "Redefine '_check_file' as a method of the 'PyLinter' class. Move the '_check_file' function inside the 'PyLinter' class definition and change its signature to include 'self' as the first parameter. Update all member references inside '_check_file' to use 'self' appropriately. Also, ensure that the '_is_ignored_file' method is defined within the 'PyLinter' class to resolve the missing member lint error."
          },
          "output": {
            "span_id": "_check_file",
            "file_path": "pylint/lint/pylinter.py",
            "instructions": "Redefine '_check_file' as a method of the 'PyLinter' class. Move the '_check_file' function inside the 'PyLinter' class definition and change its signature to include 'self' as the first parameter. Update all member references inside '_check_file' to use 'self' appropriately. Also, ensure that the '_is_ignored_file' method is defined within the 'PyLinter' class to resolve the missing member lint error."
          },
          "input_tokens": 21173,
          "output_tokens": 332,
          "retry_message": null,
          "completion_cost": 0.068499
        }
      ]
    },
    {
      "name": "ClarifyCodeChange",
      "state": {
        "model": "deepseek-coder",
        "span_id": "_check_file",
        "end_line": null,
        "file_path": "pylint/lint/pylinter.py",
        "max_tokens": 1000,
        "start_line": null,
        "temperature": 1.6,
        "instructions": "Redefine '_check_file' as a method of the 'PyLinter' class. Move the '_check_file' function inside the 'PyLinter' class definition and change its signature to include 'self' as the first parameter. Update all member references inside '_check_file' to use 'self' appropriately. Also, ensure that the '_is_ignored_file' method is defined within the 'PyLinter' class to resolve the missing member lint error.",
        "max_iterations": null,
        "include_message_history": false,
        "max_tokens_in_edit_prompt": 500
      },
      "actions": []
    }
  ],
  "initial_message": "`--recursive=y` ignores `ignore-paths`\n### Bug description\r\n\r\nWhen running recursively, it seems `ignore-paths` in my settings in pyproject.toml is completely ignored\r\n\r\n### Configuration\r\n\r\n```ini\r\n[tool.pylint.MASTER]\r\nignore-paths = [\r\n  # Auto generated\r\n  \"^src/gen/.*$\",\r\n]\r\n```\r\n\r\n\r\n### Command used\r\n\r\n```shell\r\npylint --recursive=y src/\r\n```\r\n\r\n\r\n### Pylint output\r\n\r\n```shell\r\n************* Module region_selection\r\nsrc\\region_selection.py:170:0: R0914: Too many local variables (17/15) (too-many-locals)\r\n************* Module about\r\nsrc\\gen\\about.py:2:0: R2044: Line with empty comment (empty-comment)\r\nsrc\\gen\\about.py:4:0: R2044: Line with empty comment (empty-comment)\r\nsrc\\gen\\about.py:57:0: C0301: Line too long (504/120) (line-too-long)\r\nsrc\\gen\\about.py:12:0: C0103: Class name \"Ui_AboutAutoSplitWidget\" doesn't conform to '_?_?[a-zA-Z]+?$' pattern (invalid-name)\r\nsrc\\gen\\about.py:12:0: R0205: Class 'Ui_AboutAutoSplitWidget' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)\r\nsrc\\gen\\about.py:13:4: C0103: Method name \"setupUi\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\about.py:13:22: C0103: Argument name \"AboutAutoSplitWidget\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\about.py:53:4: C0103: Method name \"retranslateUi\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\about.py:53:28: C0103: Argument name \"AboutAutoSplitWidget\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\about.py:24:8: W0201: Attribute 'ok_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\about.py:27:8: W0201: Attribute 'created_by_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\about.py:30:8: W0201: Attribute 'version_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\about.py:33:8: W0201: Attribute 'donate_text_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\about.py:37:8: W0201: Attribute 'donate_button_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\about.py:43:8: W0201: Attribute 'icon_label' defined outside __init__ (attribute-defined-outside-init)\r\n************* Module design\r\nsrc\\gen\\design.py:2:0: R2044: Line with empty comment (empty-comment)\r\nsrc\\gen\\design.py:4:0: R2044: Line with empty comment (empty-comment)\r\nsrc\\gen\\design.py:328:0: C0301: Line too long (123/120) (line-too-long)\r\nsrc\\gen\\design.py:363:0: C0301: Line too long (125/120) (line-too-long)\r\nsrc\\gen\\design.py:373:0: C0301: Line too long (121/120) (line-too-long)\r\nsrc\\gen\\design.py:412:0: C0301: Line too long (131/120) (line-too-long)\r\nsrc\\gen\\design.py:12:0: C0103: Class name \"Ui_MainWindow\" doesn't conform to '_?_?[a-zA-Z]+?$' pattern (invalid-name)\r\nsrc\\gen\\design.py:308:8: C0103: Attribute name \"actionSplit_Settings\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\design.py:318:8: C0103: Attribute name \"actionCheck_for_Updates_on_Open\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\design.py:323:8: C0103: Attribute name \"actionLoop_Last_Split_Image_To_First_Image\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\design.py:325:8: C0103: Attribute name \"actionAuto_Start_On_Reset\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\design.py:327:8: C0103: Attribute name \"actionGroup_dummy_splits_when_undoing_skipping\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\design.py:12:0: R0205: Class 'Ui_MainWindow' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)\r\nsrc\\gen\\design.py:12:0: R0902: Too many instance attributes (69/15) (too-many-instance-attributes)\r\nsrc\\gen\\design.py:13:4: C0103: Method name \"setupUi\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\design.py:13:22: C0103: Argument name \"MainWindow\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\design.py:16:8: C0103: Variable name \"sizePolicy\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\design.py:13:4: R0915: Too many statements (339/50) (too-many-statements)\r\nsrc\\gen\\design.py:354:4: C0103: Method name \"retranslateUi\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\design.py:354:28: C0103: Argument name \"MainWindow\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\design.py:354:4: R0915: Too many statements (61/50) (too-many-statements)\r\nsrc\\gen\\design.py:31:8: W0201: Attribute 'central_widget' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:33:8: W0201: Attribute 'x_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:36:8: W0201: Attribute 'select_region_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:40:8: W0201: Attribute 'start_auto_splitter_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:44:8: W0201: Attribute 'reset_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:49:8: W0201: Attribute 'undo_split_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:54:8: W0201: Attribute 'skip_split_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:59:8: W0201: Attribute 'check_fps_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:63:8: W0201: Attribute 'fps_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:66:8: W0201: Attribute 'live_image' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:75:8: W0201: Attribute 'current_split_image' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:81:8: W0201: Attribute 'current_image_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:85:8: W0201: Attribute 'width_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:88:8: W0201: Attribute 'height_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:91:8: W0201: Attribute 'fps_value_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:95:8: W0201: Attribute 'width_spinbox' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:101:8: W0201: Attribute 'height_spinbox' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:107:8: W0201: Attribute 'capture_region_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:111:8: W0201: Attribute 'current_image_file_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:115:8: W0201: Attribute 'take_screenshot_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:119:8: W0201: Attribute 'x_spinbox' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:128:8: W0201: Attribute 'y_spinbox' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:136:8: W0201: Attribute 'y_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:139:8: W0201: Attribute 'align_region_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:143:8: W0201: Attribute 'select_window_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:147:8: W0201: Attribute 'browse_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:151:8: W0201: Attribute 'split_image_folder_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:154:8: W0201: Attribute 'split_image_folder_input' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:158:8: W0201: Attribute 'capture_region_window_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:162:8: W0201: Attribute 'image_loop_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:165:8: W0201: Attribute 'similarity_viewer_groupbox' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:169:8: W0201: Attribute 'table_live_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:173:8: W0201: Attribute 'table_highest_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:177:8: W0201: Attribute 'table_threshold_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:181:8: W0201: Attribute 'line_1' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:186:8: W0201: Attribute 'table_current_image_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:189:8: W0201: Attribute 'table_reset_image_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:192:8: W0201: Attribute 'line_2' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:197:8: W0201: Attribute 'line_3' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:202:8: W0201: Attribute 'line_4' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:207:8: W0201: Attribute 'line_5' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:212:8: W0201: Attribute 'table_current_image_live_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:216:8: W0201: Attribute 'table_current_image_highest_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:220:8: W0201: Attribute 'table_current_image_threshold_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:224:8: W0201: Attribute 'table_reset_image_live_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:228:8: W0201: Attribute 'table_reset_image_highest_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:232:8: W0201: Attribute 'table_reset_image_threshold_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:236:8: W0201: Attribute 'reload_start_image_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:240:8: W0201: Attribute 'start_image_status_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:243:8: W0201: Attribute 'start_image_status_value_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:246:8: W0201: Attribute 'image_loop_value_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:249:8: W0201: Attribute 'previous_image_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:254:8: W0201: Attribute 'next_image_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:296:8: W0201: Attribute 'menu_bar' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:299:8: W0201: Attribute 'menu_help' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:301:8: W0201: Attribute 'menu_file' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:304:8: W0201: Attribute 'action_view_help' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:306:8: W0201: Attribute 'action_about' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:308:8: W0201: Attribute 'actionSplit_Settings' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:310:8: W0201: Attribute 'action_save_profile' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:312:8: W0201: Attribute 'action_load_profile' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:314:8: W0201: Attribute 'action_save_profile_as' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:316:8: W0201: Attribute 'action_check_for_updates' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:318:8: W0201: Attribute 'actionCheck_for_Updates_on_Open' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:323:8: W0201: Attribute 'actionLoop_Last_Split_Image_To_First_Image' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:325:8: W0201: Attribute 'actionAuto_Start_On_Reset' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:327:8: W0201: Attribute 'actionGroup_dummy_splits_when_undoing_skipping' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:329:8: W0201: Attribute 'action_settings' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\design.py:331:8: W0201: Attribute 'action_check_for_updates_on_open' defined outside __init__ (attribute-defined-outside-init)\r\n************* Module resources_rc\r\nsrc\\gen\\resources_rc.py:1:0: C0302: Too many lines in module (2311/1000) (too-many-lines)\r\nsrc\\gen\\resources_rc.py:8:0: C0103: Constant name \"qt_resource_data\" doesn't conform to UPPER_CASE naming style (invalid-name)\r\nsrc\\gen\\resources_rc.py:2278:0: C0103: Constant name \"qt_resource_name\" doesn't conform to UPPER_CASE naming style (invalid-name)\r\nsrc\\gen\\resources_rc.py:2294:0: C0103: Constant name \"qt_resource_struct\" doesn't conform to UPPER_CASE naming style (invalid-name)\r\nsrc\\gen\\resources_rc.py:2305:0: C0103: Function name \"qInitResources\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\resources_rc.py:2308:0: C0103: Function name \"qCleanupResources\" doesn't conform to snake_case naming style (invalid-name)\r\n************* Module settings\r\nsrc\\gen\\settings.py:2:0: R2044: Line with empty comment (empty-comment)\r\nsrc\\gen\\settings.py:4:0: R2044: Line with empty comment (empty-comment)\r\nsrc\\gen\\settings.py:61:0: C0301: Line too long (158/120) (line-too-long)\r\nsrc\\gen\\settings.py:123:0: C0301: Line too long (151/120) (line-too-long)\r\nsrc\\gen\\settings.py:209:0: C0301: Line too long (162/120) (line-too-long)\r\nsrc\\gen\\settings.py:214:0: C0301: Line too long (121/120) (line-too-long)\r\nsrc\\gen\\settings.py:221:0: C0301: Line too long (177/120) (line-too-long)\r\nsrc\\gen\\settings.py:223:0: C0301: Line too long (181/120) (line-too-long)\r\nsrc\\gen\\settings.py:226:0: C0301: Line too long (461/120) (line-too-long)\r\nsrc\\gen\\settings.py:228:0: C0301: Line too long (192/120) (line-too-long)\r\nsrc\\gen\\settings.py:12:0: C0103: Class name \"Ui_DialogSettings\" doesn't conform to '_?_?[a-zA-Z]+?$' pattern (invalid-name)\r\nsrc\\gen\\settings.py:12:0: R0205: Class 'Ui_DialogSettings' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)\r\nsrc\\gen\\settings.py:12:0: R0902: Too many instance attributes (35/15) (too-many-instance-attributes)\r\nsrc\\gen\\settings.py:13:4: C0103: Method name \"setupUi\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\settings.py:13:22: C0103: Argument name \"DialogSettings\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\settings.py:16:8: C0103: Variable name \"sizePolicy\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\settings.py:13:4: R0915: Too many statements (190/50) (too-many-statements)\r\nsrc\\gen\\settings.py:205:4: C0103: Method name \"retranslateUi\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\settings.py:205:28: C0103: Argument name \"DialogSettings\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\settings.py:26:8: W0201: Attribute 'capture_settings_groupbox' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:29:8: W0201: Attribute 'fps_limit_spinbox' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:36:8: W0201: Attribute 'fps_limit_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:40:8: W0201: Attribute 'live_capture_region_checkbox' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:46:8: W0201: Attribute 'capture_method_combobox' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:49:8: W0201: Attribute 'capture_method_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:52:8: W0201: Attribute 'capture_device_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:55:8: W0201: Attribute 'capture_device_combobox' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:59:8: W0201: Attribute 'image_settings_groupbox' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:65:8: W0201: Attribute 'default_comparison_method' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:73:8: W0201: Attribute 'default_comparison_method_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:76:8: W0201: Attribute 'default_pause_time_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:80:8: W0201: Attribute 'default_pause_time_spinbox' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:87:8: W0201: Attribute 'default_similarity_threshold_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:92:8: W0201: Attribute 'default_similarity_threshold_spinbox' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:98:8: W0201: Attribute 'loop_splits_checkbox' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:104:8: W0201: Attribute 'custom_image_settings_info_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:111:8: W0201: Attribute 'default_delay_time_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:116:8: W0201: Attribute 'default_delay_time_spinbox' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:121:8: W0201: Attribute 'hotkeys_groupbox' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:127:8: W0201: Attribute 'set_pause_hotkey_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:131:8: W0201: Attribute 'split_input' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:137:8: W0201: Attribute 'undo_split_input' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:143:8: W0201: Attribute 'split_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:146:8: W0201: Attribute 'reset_input' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:152:8: W0201: Attribute 'set_undo_split_hotkey_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:156:8: W0201: Attribute 'reset_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:159:8: W0201: Attribute 'set_reset_hotkey_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:163:8: W0201: Attribute 'set_split_hotkey_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:167:8: W0201: Attribute 'pause_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:170:8: W0201: Attribute 'pause_input' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:176:8: W0201: Attribute 'undo_split_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:179:8: W0201: Attribute 'set_skip_split_hotkey_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:183:8: W0201: Attribute 'skip_split_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\settings.py:186:8: W0201: Attribute 'skip_split_input' defined outside __init__ (attribute-defined-outside-init)\r\n************* Module update_checker\r\nsrc\\gen\\update_checker.py:2:0: R2044: Line with empty comment (empty-comment)\r\nsrc\\gen\\update_checker.py:4:0: R2044: Line with empty comment (empty-comment)\r\nsrc\\gen\\update_checker.py:12:0: C0103: Class name \"Ui_UpdateChecker\" doesn't conform to '_?_?[a-zA-Z]+?$' pattern (invalid-name)\r\nsrc\\gen\\update_checker.py:12:0: R0205: Class 'Ui_UpdateChecker' inherits from object, can be safely removed from bases in python3 (useless-object-inheritance)\r\nsrc\\gen\\update_checker.py:13:4: C0103: Method name \"setupUi\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\update_checker.py:13:22: C0103: Argument name \"UpdateChecker\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\update_checker.py:17:8: C0103: Variable name \"sizePolicy\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\update_checker.py:33:8: C0103: Variable name \"sizePolicy\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\update_checker.py:13:4: R0915: Too many statements (56/50) (too-many-statements)\r\nsrc\\gen\\update_checker.py:71:4: C0103: Method name \"retranslateUi\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\update_checker.py:71:28: C0103: Argument name \"UpdateChecker\" doesn't conform to snake_case naming style (invalid-name)\r\nsrc\\gen\\update_checker.py:31:8: W0201: Attribute 'update_status_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\update_checker.py:39:8: W0201: Attribute 'current_version_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\update_checker.py:42:8: W0201: Attribute 'latest_version_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\update_checker.py:45:8: W0201: Attribute 'go_to_download_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\update_checker.py:48:8: W0201: Attribute 'left_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\update_checker.py:52:8: W0201: Attribute 'right_button' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\update_checker.py:55:8: W0201: Attribute 'current_version_number_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\update_checker.py:59:8: W0201: Attribute 'latest_version_number_label' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\update_checker.py:63:8: W0201: Attribute 'do_not_ask_again_checkbox' defined outside __init__ (attribute-defined-outside-init)\r\nsrc\\gen\\update_checker.py:1:0: R0401: Cyclic import (region_capture -> region_selection) (cyclic-import)\r\nsrc\\gen\\update_checker.py:1:0: R0401: Cyclic import (error_messages -> user_profile -> region_capture -> region_selection) (cyclic-import)\r\nsrc\\gen\\update_checker.py:1:0: R0401: Cyclic import (AutoSplitImage -> split_parser) (cyclic-import)\r\nsrc\\gen\\update_checker.py:1:0: R0401: Cyclic import (AutoControlledWorker -> error_messages -> AutoSplit) (cyclic-import)\r\nsrc\\gen\\update_checker.py:1:0: R0401: Cyclic import (AutoSplit -> user_profile -> region_capture -> region_selection -> error_messages) (cyclic-import)\r\nsrc\\gen\\update_checker.py:1:0: R0401: Cyclic import (AutoSplitImage -> error_messages -> user_profile) (cyclic-import)\r\nsrc\\gen\\update_checker.py:1:0: R0401: Cyclic import (AutoSplit -> menu_bar -> user_profile -> region_capture -> region_selection -> error_messages) (cyclic-import)\r\nsrc\\gen\\update_checker.py:1:0: R0401: Cyclic import (AutoSplit -> region_selection -> error_messages) (cyclic-import)\r\nsrc\\gen\\update_checker.py:1:0: R0401: Cyclic import (AutoSplit -> error_messages) (cyclic-import)\r\nsrc\\gen\\update_checker.py:1:0: R0401: Cyclic import (error_messages -> user_profile -> region_selection) (cyclic-import)\r\nsrc\\gen\\update_checker.py:1:0: R0401: Cyclic import (error_messages -> user_profile) (cyclic-import)\r\nsrc\\gen\\update_checker.py:1:0: R0401: Cyclic import (AutoSplitImage -> split_parser -> error_messages -> user_profile) (cyclic-import)\r\nsrc\\gen\\update_checker.py:1:0: R0401: Cyclic import (AutoSplit -> menu_bar -> region_selection -> error_messages) (cyclic-import)\r\nsrc\\gen\\update_checker.py:1:0: R0401: Cyclic import (AutoSplit -> menu_bar -> error_messages) (cyclic-import)\r\n\r\n--------------------------------------------------------------------------\r\nYour code has been rated at -158.32/10 (previous run: -285.20/10, +126.88)\r\n```\r\n\r\n\r\n### Expected behavior\r\n\r\nsrc\\gen\\* should not be checked\r\n\r\n### Pylint version\r\n\r\n```shell\r\npylint 2.14.1\r\nastroid 2.11.5\r\nPython 3.9.6 (tags/v3.9.6:db3ff76, Jun 28 2021, 15:26:21) [MSC v.1929 64 bit (AMD64)]\r\n```\r\n\r\n\r\n### OS / Environment\r\n\r\nWindows 10.0.19044\r\n\r\n\r\n### Additional dependencies\r\n\r\n_No response_\n"
}